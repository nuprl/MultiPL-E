language: swift
name: HumanEval_7_filter_by_substring
results:
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered: [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpj9rq4qzj.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, string)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: -4
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = strings\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = filtered.filter{ $0 != string }\n        }\n    }\n\
    \    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: Exception
  stderr: 'tmpakk2ofat/tmpakk2ofat.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4465768c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446545fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446545f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446545e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpakk2ofat                        0x00005622fe899a77 <unavailable> + 6775

    5    libc.so.6                          0x00002b4465954460 __libc_start_main +
    245

    6    tmpakk2ofat                        0x00005622fe8993f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660013478
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgm3rdoi_.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: -4
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = strings\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = filtered.filter({$0 != string})\n        }\n    }\n\
    \    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: Exception
  stderr: 'tmp8cdmuhw1/tmp8cdmuhw1.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b87f40f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b87f3debb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b87f3deb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b87f3dea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8cdmuhw1                        0x00005558701f0a77 <unavailable> + 6775

    5    libc.so.6                          0x00002b87f42e0460 __libc_start_main +
    245

    6    tmp8cdmuhw1                        0x00005558701f03f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660013478
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var result = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            result.append(s)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgm3rdoi_.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgm3rdoi_.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered: [String] = []\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkmjr96qb.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = strings\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = filtered[..<filtered.index(of: substring)] // remove\
    \ all but first occurrence\n            break\n        }\n    }\n    return filtered\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmp66wtqlmo.swift:11:32: error: cannot assign value of type 'ArraySlice<String>'\
    \ to type '[String]'\n            filtered = filtered[..<filtered.index(of: substring)]\
    \ // remove all but first occurrence\n                       ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp66wtqlmo.swift:11:45: error: value of optional type 'Array<String>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<String>.Index'\
    \ (aka 'Int')\n            filtered = filtered[..<filtered.index(of: substring)]\
    \ // remove all but first occurrence\n                                       \
    \     ^\n/tmp/tmp66wtqlmo.swift:11:45: note: coalesce using '??' to provide a\
    \ default when the optional value contains 'nil'\n            filtered = filtered[..<filtered.index(of:\
    \ substring)] // remove all but first occurrence\n                           \
    \                 ^\n                                   (                    \
    \         ?? <#default value#>)\n/tmp/tmp66wtqlmo.swift:11:45: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n        \
    \    filtered = filtered[..<filtered.index(of: substring)] // remove all but first\
    \ occurrence\n                                            ^\n                \
    \                                                !\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgm3rdoi_.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpaoqma7iq.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, string)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter {\n        contains($0, substring)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmp8j4im8ij.swift:9:9: error: cannot find 'contains' in scope\n  \
    \      contains($0, substring)\n        ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgm3rdoi_.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpaoqma7iq.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, string)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = strings\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = filtered\n        } else {\n            break\n  \
    \      }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_by_substring(strings: [] as [String], substring: \"john\") == []\
    \ as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\", \"aaaxxy\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\", \"trumpet\"\
    , \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpu3bx5rep.swift:11:22: error: assigning a variable to itself\n \
    \           filtered = filtered\n            ~~~~~~~~ ^ ~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: -4
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = strings\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = filtered.filter{ $0 != string }\n        }\n    }\n\
    \    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: Exception
  stderr: 'tmpakk2ofat/tmpakk2ofat.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4465768c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b446545fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b446545f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b446545e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpakk2ofat                        0x00005622fe899a77 <unavailable> + 6775

    5    libc.so.6                          0x00002b4465954460 __libc_start_main +
    245

    6    tmpakk2ofat                        0x00005622fe8993f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660013478
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpaoqma7iq.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, string)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filteredStrings: [String] = []\n    for string in strings {\n       \
    \ if string.contains(substring) {\n            filteredStrings.append(string)\n\
    \        }\n    }\n    return filteredStrings\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(filter_by_substring(strings: [] as [String], substring: \"john\"\
    ) == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\", \"\
    xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\",\
    \ \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013478
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter {\n        contains($0, substring)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmp8j4im8ij.swift:9:9: error: cannot find 'contains' in scope\n  \
    \      contains($0, substring)\n        ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var result = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            result.append(string)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered: [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpj9rq4qzj.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, string)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered: [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpj9rq4qzj.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, string)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return filter_by_substring(strings: strings, substring: substring, options:\
    \ .caseInsensitive)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5xq2yjou.swift:8:82: error: extra argument 'options' in call\n\
    \    return filter_by_substring(strings: strings, substring: substring, options:\
    \ .caseInsensitive)\n                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~\n\
    /tmp/tmp5xq2yjou.swift:8:82: error: cannot infer contextual base in reference\
    \ to member 'caseInsensitive'\n    return filter_by_substring(strings: strings,\
    \ substring: substring, options: .caseInsensitive)\n                         \
    \                                                       ~^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgm3rdoi_.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered: [String] = []\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkmjr96qb.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpaoqma7iq.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, string)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = strings\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = filtered[..<filtered.index(of: substring)..<filtered.index(of:\
    \ substring, offsetBy: 1)]\n            break\n        }\n    }\n    return filtered\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpphgln6g0.swift:11:77: error: no exact matches in call to instance\
    \ method 'index'\n            filtered = filtered[..<filtered.index(of: substring)..<filtered.index(of:\
    \ substring, offsetBy: 1)]\n                                                 \
    \                           ^\n/tmp/tmpphgln6g0.swift:11:77: note: found candidate\
    \ with type '(Int, Int) -> Int'\n            filtered = filtered[..<filtered.index(of:\
    \ substring)..<filtered.index(of: substring, offsetBy: 1)]\n                 \
    \                                                           ^\n/tmp/tmpphgln6g0.swift:11:33:\
    \ error: cannot convert value of type 'PartialRangeUpTo<Array<String>.Index>'\
    \ (aka 'PartialRangeUpTo<Int>') to expected argument type 'Int'\n            filtered\
    \ = filtered[..<filtered.index(of: substring)..<filtered.index(of: substring,\
    \ offsetBy: 1)]\n                                ^\n/tmp/tmpphgln6g0.swift:11:32:\
    \ error: cannot assign value of type 'ArraySlice<String>' to type '[String]'\n\
    \            filtered = filtered[..<filtered.index(of: substring)..<filtered.index(of:\
    \ substring, offsetBy: 1)]\n                       ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpphgln6g0.swift:11:45: error: value of optional type 'Array<String>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<String>.Index'\
    \ (aka 'Int')\n            filtered = filtered[..<filtered.index(of: substring)..<filtered.index(of:\
    \ substring, offsetBy: 1)]\n                                            ^\n/tmp/tmpphgln6g0.swift:11:45:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n            filtered = filtered[..<filtered.index(of: substring)..<filtered.index(of:\
    \ substring, offsetBy: 1)]\n                                            ^\n  \
    \                                 (                             ?? <#default value#>)\n\
    /tmp/tmpphgln6g0.swift:11:45: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n            filtered = filtered[..<filtered.index(o"
  stdout: ''
  timestamp: 1660013478
- exit_code: -4
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = strings\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = filtered.filter({$0 != string})\n        }\n    }\n\
    \    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: Exception
  stderr: 'tmp8cdmuhw1/tmp8cdmuhw1.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b87f40f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b87f3debb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b87f3deb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b87f3dea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8cdmuhw1                        0x00005558701f0a77 <unavailable> + 6775

    5    libc.so.6                          0x00002b87f42e0460 __libc_start_main +
    245

    6    tmp8cdmuhw1                        0x00005558701f03f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpaoqma7iq.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, string)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered: [String] = []\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkmjr96qb.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpaoqma7iq.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, string)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: -4
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = strings\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = filtered.filter({$0 != string})\n        }\n    }\n\
    \    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: Exception
  stderr: 'tmp8cdmuhw1/tmp8cdmuhw1.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b87f40f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b87f3debb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b87f3deb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b87f3dea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8cdmuhw1                        0x00005558701f0a77 <unavailable> + 6775

    5    libc.so.6                          0x00002b87f42e0460 __libc_start_main +
    245

    6    tmp8cdmuhw1                        0x00005558701f03f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgm3rdoi_.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = strings\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = filtered\n        } else {\n            break\n  \
    \      }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_by_substring(strings: [] as [String], substring: \"john\") == []\
    \ as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\", \"aaaxxy\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\", \"trumpet\"\
    , \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpmk8ojzgg.swift:11:22: error: assigning a variable to itself\n \
    \           filtered = filtered\n            ~~~~~~~~ ^ ~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered: [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpj9rq4qzj.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, string)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpaoqma7iq.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, string)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgm3rdoi_.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgm3rdoi_.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgm3rdoi_.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered: [String] = []\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkmjr96qb.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgm3rdoi_.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered: [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered: [String] = []\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkmjr96qb.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter {\n        guard let index = string.range(of: substring)\
    \ else { return false }\n        return index != nil\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpa23w02_x.swift:9:27: error: cannot find 'string' in scope\n   \
    \     guard let index = string.range(of: substring) else { return false }\n  \
    \                        ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered: [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpj9rq4qzj.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, string)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter { (string) -> Bool in\n        let index = string.rangeOfString(substring)\n\
    \        return index != nil\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_by_substring(strings: [] as [String], substring: \"john\") == []\
    \ as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\", \"aaaxxy\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\", \"trumpet\"\
    , \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsuhzemwp.swift:9:28: error: value of type 'String' has no member\
    \ 'rangeOfString'\n        let index = string.rangeOfString(substring)\n     \
    \               ~~~~~~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered: [String] = []\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkmjr96qb.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered: [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpj9rq4qzj.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, string)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgm3rdoi_.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered: [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpj9rq4qzj.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, string)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: -4
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = strings\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = filtered.filter({$0 != string})\n        }\n    }\n\
    \    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: Exception
  stderr: 'tmp8cdmuhw1/tmp8cdmuhw1.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b87f40f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b87f3debb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b87f3deb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b87f3dea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8cdmuhw1                        0x00005558701f0a77 <unavailable> + 6775

    5    libc.so.6                          0x00002b87f42e0460 __libc_start_main +
    245

    6    tmp8cdmuhw1                        0x00005558701f03f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return filter_by_substring(strings.filter({ $0.contains(substring) }), substring)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3xljy_qo.swift:8:31: error: missing argument labels 'strings:substring:'\
    \ in call\n    return filter_by_substring(strings.filter({ $0.contains(substring)\
    \ }), substring)\n                              ^\n                          \
    \     strings:                                    substring: \n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgm3rdoi_.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter { (string: String) -> Bool in\n        let index =\
    \ string.index(of: substring)\n        return index != nil\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_v9apmyv.swift:9:38: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        let index\
    \ = string.index(of: substring)\n                                     ^\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filteredStrings: [String] = []\n    for string in strings {\n       \
    \ if string.contains(substring) {\n            filteredStrings.append(string)\n\
    \        }\n    }\n    return filteredStrings\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(filter_by_substring(strings: [] as [String], substring: \"john\"\
    ) == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\", \"\
    xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\",\
    \ \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = strings\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = filtered[..<filtered.index(s.startIndex, offsetBy:\
    \ s.distance(from: s.startIndex, to: substring.endIndex))]\n        }\n    }\n\
    \    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpudhncc4o.swift:11:53: error: cannot convert value of type 'String.Index'\
    \ to expected argument type 'Int'\n            filtered = filtered[..<filtered.index(s.startIndex,\
    \ offsetBy: s.distance(from: s.startIndex, to: substring.endIndex))]\n       \
    \                                             ^\n/tmp/tmpudhncc4o.swift:11:32:\
    \ error: cannot assign value of type 'ArraySlice<String>' to type '[String]'\n\
    \            filtered = filtered[..<filtered.index(s.startIndex, offsetBy: s.distance(from:\
    \ s.startIndex, to: substring.endIndex))]\n                       ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgm3rdoi_.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var result = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            result.append(string)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered: [String] = []\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkmjr96qb.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered: [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpj9rq4qzj.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, string)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered: [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpj9rq4qzj.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, string)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgm3rdoi_.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgm3rdoi_.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = strings\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = filtered\n        } else {\n            break\n  \
    \      }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_by_substring(strings: [] as [String], substring: \"john\") == []\
    \ as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\", \"aaaxxy\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\", \"trumpet\"\
    , \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpmk8ojzgg.swift:11:22: error: assigning a variable to itself\n \
    \           filtered = filtered\n            ~~~~~~~~ ^ ~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter { (string: String) -> Bool in\n        let index =\
    \ string.range(of: substring)\n        return index != nil\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbr6lkjuw.swift:9:28: error: value of type 'String' has no member\
    \ 'range'\n        let index = string.range(of: substring)\n                 \
    \   ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: -4
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = strings\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = filtered.filter({$0 != string})\n        }\n    }\n\
    \    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: Exception
  stderr: 'tmp8cdmuhw1/tmp8cdmuhw1.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b87f40f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b87f3debb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b87f3deb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b87f3dea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8cdmuhw1                        0x00005558701f0a77 <unavailable> + 6775

    5    libc.so.6                          0x00002b87f42e0460 __libc_start_main +
    245

    6    tmp8cdmuhw1                        0x00005558701f03f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter { (string: String) -> Bool in\n        let index =\
    \ string.range(of: substring)\n        return index != nil\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbr6lkjuw.swift:9:28: error: value of type 'String' has no member\
    \ 'range'\n        let index = string.range(of: substring)\n                 \
    \   ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpaoqma7iq.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, string)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter {\n        if contains($0, substring) {\n         \
    \   return true\n        }\n        return false\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpcbx3681s.swift:9:12: error: cannot find 'contains' in scope\n \
    \       if contains($0, substring) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filteredStrings = [String]()\n    for string in strings {\n        if\
    \ string.contains(substring) {\n            filteredStrings.append(string)\n \
    \       }\n    }\n    return filteredStrings\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(filter_by_substring(strings: [] as [String], substring: \"john\"\
    ) == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\", \"\
    xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\",\
    \ \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013478
- exit_code: -4
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = strings\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = filtered.filter({$0 != string})\n        }\n    }\n\
    \    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: Exception
  stderr: 'tmp8cdmuhw1/tmp8cdmuhw1.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b87f40f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b87f3debb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b87f3deb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b87f3dea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8cdmuhw1                        0x00005558701f0a77 <unavailable> + 6775

    5    libc.so.6                          0x00002b87f42e0460 __libc_start_main +
    245

    6    tmp8cdmuhw1                        0x00005558701f03f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = strings\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = filtered\n        } else {\n            filtered =\
    \ filtered.filter{ $0 != s }\n        }\n    }\n    return filtered\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmp__wzva7k.swift:11:22: error: assigning a variable to itself\n \
    \           filtered = filtered\n            ~~~~~~~~ ^ ~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgm3rdoi_.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = strings\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = filtered\n        } else {\n            break\n  \
    \      }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_by_substring(strings: [] as [String], substring: \"john\") == []\
    \ as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\", \"aaaxxy\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\", \"trumpet\"\
    , \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpu3bx5rep.swift:11:22: error: assigning a variable to itself\n \
    \           filtered = filtered\n            ~~~~~~~~ ^ ~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filteredStrings: [String] = []\n    for string in strings {\n       \
    \ if string.contains(substring) {\n            filteredStrings.append(string)\n\
    \        }\n    }\n    return filteredStrings\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(filter_by_substring(strings: [] as [String], substring: \"john\"\
    ) == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\", \"\
    xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\",\
    \ \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = strings\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = filtered\n        } else {\n            break\n  \
    \      }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_by_substring(strings: [] as [String], substring: \"john\") == []\
    \ as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\", \"aaaxxy\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\", \"trumpet\"\
    , \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpu3bx5rep.swift:11:22: error: assigning a variable to itself\n \
    \           filtered = filtered\n            ~~~~~~~~ ^ ~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered: [String] = []\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkmjr96qb.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: -4
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = strings\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = filtered.filter({$0 != string})\n        }\n    }\n\
    \    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: Exception
  stderr: 'tmp8cdmuhw1/tmp8cdmuhw1.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b87f40f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b87f3debb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b87f3deb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b87f3dea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8cdmuhw1                        0x00005558701f0a77 <unavailable> + 6775

    5    libc.so.6                          0x00002b87f42e0460 __libc_start_main +
    245

    6    tmp8cdmuhw1                        0x00005558701f03f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660013478
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filteredStrings: [String] = []\n    for string in strings {\n       \
    \ if string.contains(substring) {\n            filteredStrings.append(string)\n\
    \        }\n    }\n    return filteredStrings\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(filter_by_substring(strings: [] as [String], substring: \"john\"\
    ) == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\", \"\
    xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\",\
    \ \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter {\n        if let index = strings.firstIndex(of: $0)\
    \ {\n            return index != 0 && index != strings.count - 1 && index != strings.count\
    \ - 2 && strings[index].range(of: substring, options: .caseInsensitive) != nil\n\
    \        }\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_by_substring(strings: [] as [String], substring: \"john\") == []\
    \ as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\", \"aaaxxy\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\", \"trumpet\"\
    , \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmphj33y5mg.swift:10:109: error: value of type 'String' has no member\
    \ 'range'\n            return index != 0 && index != strings.count - 1 && index\
    \ != strings.count - 2 && strings[index].range(of: substring, options: .caseInsensitive)\
    \ != nil\n                                                                   \
    \                          ~~~~~~~~~~~~~~ ^~~~~\n/tmp/tmphj33y5mg.swift:10:140:\
    \ error: cannot infer contextual base in reference to member 'caseInsensitive'\n\
    \            return index != 0 && index != strings.count - 1 && index != strings.count\
    \ - 2 && strings[index].range(of: substring, options: .caseInsensitive) != nil\n\
    \                                                                            \
    \                                                              ~^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = strings\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = filtered\n        } else {\n            break\n  \
    \      }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_by_substring(strings: [] as [String], substring: \"john\") == []\
    \ as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\", \"aaaxxy\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\", \"trumpet\"\
    , \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpu3bx5rep.swift:11:22: error: assigning a variable to itself\n \
    \           filtered = filtered\n            ~~~~~~~~ ^ ~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = strings\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = filtered\n        } else {\n            filtered =\
    \ []\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(filter_by_substring(strings: [] as [String], substring: \"john\"\
    ) == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\", \"\
    xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\",\
    \ \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpe_n9n2n_.swift:11:22: error: assigning a variable to itself\n \
    \           filtered = filtered\n            ~~~~~~~~ ^ ~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgm3rdoi_.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpaoqma7iq.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, string)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: -4
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = strings\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = filtered.filter({$0 != string})\n        }\n    }\n\
    \    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: Exception
  stderr: 'tmp8cdmuhw1/tmp8cdmuhw1.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b87f40f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b87f3debb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b87f3deb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b87f3dea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8cdmuhw1                        0x00005558701f0a77 <unavailable> + 6775

    5    libc.so.6                          0x00002b87f42e0460 __libc_start_main +
    245

    6    tmp8cdmuhw1                        0x00005558701f03f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter {\n        if let index = strings.firstIndex(of: $0)\
    \ {\n            return index != nil && index!.contains(substring)\n        }\
    \ else {\n            return false\n        }\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmps71zk9hj.swift:10:43: error: value of type 'Array<String>.Index'\
    \ (aka 'Int') has no member 'contains'\n            return index != nil && index!.contains(substring)\n\
    \                                   ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpaoqma7iq.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, string)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = strings\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = filtered\n        } else {\n            break\n  \
    \      }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_by_substring(strings: [] as [String], substring: \"john\") == []\
    \ as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\", \"aaaxxy\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\", \"trumpet\"\
    , \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpu3bx5rep.swift:11:22: error: assigning a variable to itself\n \
    \           filtered = filtered\n            ~~~~~~~~ ^ ~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered: [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpj9rq4qzj.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, string)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = strings\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = filtered[..<filtered.index(s.startIndex, offsetBy:\
    \ s.distance(from: substring))]\n            break\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_iccmbfk.swift:11:77: error: no exact matches in call to instance\
    \ method 'distance'\n            filtered = filtered[..<filtered.index(s.startIndex,\
    \ offsetBy: s.distance(from: substring))]\n                                  \
    \                                          ^\n/tmp/tmp_iccmbfk.swift:11:77: note:\
    \ found candidate with type '(String.Index, String.Index) -> Int'\n          \
    \  filtered = filtered[..<filtered.index(s.startIndex, offsetBy: s.distance(from:\
    \ substring))]\n                                                             \
    \               ^\n/tmp/tmp_iccmbfk.swift:11:53: error: cannot convert value of\
    \ type 'String.Index' to expected argument type 'Int'\n            filtered =\
    \ filtered[..<filtered.index(s.startIndex, offsetBy: s.distance(from: substring))]\n\
    \                                                    ^\n/tmp/tmp_iccmbfk.swift:11:32:\
    \ error: cannot assign value of type 'ArraySlice<String>' to type '[String]'\n\
    \            filtered = filtered[..<filtered.index(s.startIndex, offsetBy: s.distance(from:\
    \ substring))]\n                       ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgm3rdoi_.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered: [String] = []\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkmjr96qb.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return filter_by_substring(strings, substring, true)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpysoqhhtm.swift:8:52: error: extra argument in call\n    return\
    \ filter_by_substring(strings, substring, true)\n                            \
    \  ~~~~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = strings\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = filtered\n        } else {\n            break\n  \
    \      }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_by_substring(strings: [] as [String], substring: \"john\") == []\
    \ as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\", \"aaaxxy\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\", \"trumpet\"\
    , \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpu3bx5rep.swift:11:22: error: assigning a variable to itself\n \
    \           filtered = filtered\n            ~~~~~~~~ ^ ~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered: [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpj9rq4qzj.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, string)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var result = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            result.append(s)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013478
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered: [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013478
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filteredStrings: [String] = []\n    for string in strings {\n       \
    \ if string.contains(substring) {\n            filteredStrings.append(string)\n\
    \        }\n    }\n    return filteredStrings\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(filter_by_substring(strings: [] as [String], substring: \"john\"\
    ) == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\", \"\
    xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\",\
    \ \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgm3rdoi_.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgm3rdoi_.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filteredStrings: [String] = []\n    for string in strings {\n       \
    \ if string.contains(substring) {\n            filteredStrings.append(string)\n\
    \        }\n    }\n    return filteredStrings\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(filter_by_substring(strings: [] as [String], substring: \"john\"\
    ) == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\", \"\
    xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\",\
    \ \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return filter_by_substrings(strings, substring, true)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpn24mj9tm.swift:8:12: error: cannot find 'filter_by_substrings'\
    \ in scope\n    return filter_by_substrings(strings, substring, true)\n      \
    \     ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter { (string: String) -> Bool in\n        let index =\
    \ string.index(of: substring)\n        return index != nil\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_v9apmyv.swift:9:38: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        let index\
    \ = string.index(of: substring)\n                                     ^\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgm3rdoi_.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgm3rdoi_.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter {\n        guard let index = string.range(of: substring)\
    \ else { return false }\n        return index != nil\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpa23w02_x.swift:9:27: error: cannot find 'string' in scope\n   \
    \     guard let index = string.range(of: substring) else { return false }\n  \
    \                        ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filteredStrings: [String] = []\n    for string in strings {\n       \
    \ if string.contains(substring) {\n            filteredStrings.append(string)\n\
    \        }\n    }\n    return filteredStrings\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(filter_by_substring(strings: [] as [String], substring: \"john\"\
    ) == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\", \"\
    xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\",\
    \ \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpaoqma7iq.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, string)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: -4
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = strings\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = filtered.filter({$0 != string})\n        }\n    }\n\
    \    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: Exception
  stderr: 'tmp8cdmuhw1/tmp8cdmuhw1.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b87f40f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b87f3debb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b87f3deb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b87f3dea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8cdmuhw1                        0x00005558701f0a77 <unavailable> + 6775

    5    libc.so.6                          0x00002b87f42e0460 __libc_start_main +
    245

    6    tmp8cdmuhw1                        0x00005558701f03f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660013478
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered: [String] = []\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkmjr96qb.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: -4
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = strings\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = filtered.filter({$0 != string})\n        }\n    }\n\
    \    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: Exception
  stderr: 'tmp8cdmuhw1/tmp8cdmuhw1.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b87f40f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b87f3debb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b87f3deb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b87f3dea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8cdmuhw1                        0x00005558701f0a77 <unavailable> + 6775

    5    libc.so.6                          0x00002b87f42e0460 __libc_start_main +
    245

    6    tmp8cdmuhw1                        0x00005558701f03f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgm3rdoi_.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgm3rdoi_.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgm3rdoi_.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered: [String] = []\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkmjr96qb.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered: [String] = []\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkmjr96qb.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered: [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpj9rq4qzj.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, string)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = strings\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = filtered\n        } else {\n            break\n  \
    \      }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_by_substring(strings: [] as [String], substring: \"john\") == []\
    \ as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\", \"aaaxxy\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\", \"trumpet\"\
    , \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpmk8ojzgg.swift:11:22: error: assigning a variable to itself\n \
    \           filtered = filtered\n            ~~~~~~~~ ^ ~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered: [String] = []\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkmjr96qb.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgm3rdoi_.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var result = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            result.append(string)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgm3rdoi_.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filteredStrings: [String] = []\n    for string in strings {\n       \
    \ if string.contains(substring) {\n            filteredStrings.append(string)\n\
    \        }\n    }\n    return filteredStrings\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(filter_by_substring(strings: [] as [String], substring: \"john\"\
    ) == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\", \"\
    xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\",\
    \ \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return filter_by_substring(strings: strings, substring: substring, options:\
    \ .caseInsensitive)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5xq2yjou.swift:8:82: error: extra argument 'options' in call\n\
    \    return filter_by_substring(strings: strings, substring: substring, options:\
    \ .caseInsensitive)\n                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~\n\
    /tmp/tmp5xq2yjou.swift:8:82: error: cannot infer contextual base in reference\
    \ to member 'caseInsensitive'\n    return filter_by_substring(strings: strings,\
    \ substring: substring, options: .caseInsensitive)\n                         \
    \                                                       ~^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered: [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013478
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered: [String] = []\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkmjr96qb.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered: [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpj9rq4qzj.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, string)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpaoqma7iq.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, string)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered: [String] = []\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkmjr96qb.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filteredStrings = [String]()\n    for string in strings {\n        if\
    \ string.contains(substring) {\n            filteredStrings.append(string)\n \
    \       }\n    }\n    return filteredStrings\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(filter_by_substring(strings: [] as [String], substring: \"john\"\
    ) == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\", \"\
    xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\",\
    \ \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013478
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filteredStrings = [String]()\n    for string in strings {\n        if\
    \ string.contains(substring) {\n            filteredStrings.append(string)\n \
    \       }\n    }\n    return filteredStrings\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(filter_by_substring(strings: [] as [String], substring: \"john\"\
    ) == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\", \"\
    xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\",\
    \ \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013478
- exit_code: -4
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = strings\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = filtered.filter({$0 != string})\n        }\n    }\n\
    \    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: Exception
  stderr: 'tmp8cdmuhw1/tmp8cdmuhw1.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b87f40f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b87f3debb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b87f3deb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b87f3dea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8cdmuhw1                        0x00005558701f0a77 <unavailable> + 6775

    5    libc.so.6                          0x00002b87f42e0460 __libc_start_main +
    245

    6    tmp8cdmuhw1                        0x00005558701f03f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660013478
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered: [String] = []\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkmjr96qb.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered: [String] = []\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkmjr96qb.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return filter_by_substring(strings: strings, substring: substring, options:\
    \ .caseInsensitive)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5xq2yjou.swift:8:82: error: extra argument 'options' in call\n\
    \    return filter_by_substring(strings: strings, substring: substring, options:\
    \ .caseInsensitive)\n                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~\n\
    /tmp/tmp5xq2yjou.swift:8:82: error: cannot infer contextual base in reference\
    \ to member 'caseInsensitive'\n    return filter_by_substring(strings: strings,\
    \ substring: substring, options: .caseInsensitive)\n                         \
    \                                                       ~^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = strings\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = filtered[..<filtered.index(of: substring)..<filtered.index(of:\
    \ substring, offsetBy: 1)]\n        }\n    }\n    return filtered\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpcsnfzu25.swift:11:77: error: no exact matches in call to instance\
    \ method 'index'\n            filtered = filtered[..<filtered.index(of: substring)..<filtered.index(of:\
    \ substring, offsetBy: 1)]\n                                                 \
    \                           ^\n/tmp/tmpcsnfzu25.swift:11:77: note: found candidate\
    \ with type '(Int, Int) -> Int'\n            filtered = filtered[..<filtered.index(of:\
    \ substring)..<filtered.index(of: substring, offsetBy: 1)]\n                 \
    \                                                           ^\n/tmp/tmpcsnfzu25.swift:11:33:\
    \ error: cannot convert value of type 'PartialRangeUpTo<Array<String>.Index>'\
    \ (aka 'PartialRangeUpTo<Int>') to expected argument type 'Int'\n            filtered\
    \ = filtered[..<filtered.index(of: substring)..<filtered.index(of: substring,\
    \ offsetBy: 1)]\n                                ^\n/tmp/tmpcsnfzu25.swift:11:32:\
    \ error: cannot assign value of type 'ArraySlice<String>' to type '[String]'\n\
    \            filtered = filtered[..<filtered.index(of: substring)..<filtered.index(of:\
    \ substring, offsetBy: 1)]\n                       ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpcsnfzu25.swift:11:45: error: value of optional type 'Array<String>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<String>.Index'\
    \ (aka 'Int')\n            filtered = filtered[..<filtered.index(of: substring)..<filtered.index(of:\
    \ substring, offsetBy: 1)]\n                                            ^\n/tmp/tmpcsnfzu25.swift:11:45:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n            filtered = filtered[..<filtered.index(of: substring)..<filtered.index(of:\
    \ substring, offsetBy: 1)]\n                                            ^\n  \
    \                                 (                             ?? <#default value#>)\n\
    /tmp/tmpcsnfzu25.swift:11:45: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n            filtered = filtered[..<filtered.index(o"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered: [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpj9rq4qzj.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, string)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgm3rdoi_.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgm3rdoi_.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: -4
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = strings\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = filtered.filter({$0 != string})\n        }\n    }\n\
    \    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: Exception
  stderr: 'tmp8cdmuhw1/tmp8cdmuhw1.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b87f40f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b87f3debb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b87f3deb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b87f3dea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8cdmuhw1                        0x00005558701f0a77 <unavailable> + 6775

    5    libc.so.6                          0x00002b87f42e0460 __libc_start_main +
    245

    6    tmp8cdmuhw1                        0x00005558701f03f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgm3rdoi_.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter {\n        if contains($0, substring) {\n         \
    \   return true\n        }\n        return false\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpcbx3681s.swift:9:12: error: cannot find 'contains' in scope\n \
    \       if contains($0, substring) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var result = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            result.append(s)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered: [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpj9rq4qzj.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, string)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = strings\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = filtered\n        } else {\n            break\n  \
    \      }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_by_substring(strings: [] as [String], substring: \"john\") == []\
    \ as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\", \"aaaxxy\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\", \"trumpet\"\
    , \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpu3bx5rep.swift:11:22: error: assigning a variable to itself\n \
    \           filtered = filtered\n            ~~~~~~~~ ^ ~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgm3rdoi_.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered: [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered: [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpj9rq4qzj.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, string)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return filter_by_substring(strings.filter({ $0.contains(substring) }), substring)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3xljy_qo.swift:8:31: error: missing argument labels 'strings:substring:'\
    \ in call\n    return filter_by_substring(strings.filter({ $0.contains(substring)\
    \ }), substring)\n                              ^\n                          \
    \     strings:                                    substring: \n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered: [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpj9rq4qzj.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, string)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgm3rdoi_.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered = append(filtered, string)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpaoqma7iq.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, string)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered: [String] = []\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkmjr96qb.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgm3rdoi_.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered: [String] = []\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkmjr96qb.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter {\n        strings.contains(substring)\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpk1sb79qw.swift:8:27: error: contextual type for closure argument\
    \ list expects 1 argument, which cannot be implicitly ignored\n    return strings.filter\
    \ {\n                          ^\n                           _ in \n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgm3rdoi_.swift:11:24: error: cannot find 'append' in scope\n  \
    \          filtered = append(filtered, s)\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660013478
