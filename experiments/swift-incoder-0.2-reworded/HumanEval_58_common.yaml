name: HumanEval_58_common
language: swift
prompt: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
  \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n///\
  \ >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2:\
  \ [Int]) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2:\
  \ [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2:\
  \ [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
  assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
completions: ["    var result = [Int]()\n    for x in l1 {\n        if !contains(l2,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n \
    \           result.append(i)\n        }\n    }\n    return result", "    var result:\
    \ [Int] = []\n    for i in l1 {\n        if !contains(l2, i) {\n            result.append(i)\n\
    \        }\n    }\n    return result", "    var result: [Int] = []\n    for x\
    \ in l1 {\n        for y in l2 {\n            if x == y {\n                continue\n\
    \            }\n            if result.contains(&x) {\n                continue\n\
    \            }\n            if result.contains(&y) {\n                continue\n\
    \            }\n            result.append(x)\n        }\n    }\n    return result",
  "    var result: [Int] = []\n    for x in l1 {\n        if !contains(l2, x) {\n\
    \            result.append(x)\n        }\n    }\n    return result", "    var\
    \ result = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n       \
    \     result.append(x)\n        }\n    }\n    for x in l2 {\n        if !contains(l1,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    var i = 0\n    var j = 0\n    while i < l1.count\
    \ && j < l2.count {\n        if l1[i] == l2[j] {\n            result.append(l1[i])\n\
    \            i += 1\n            j += 1\n        } else if l1[i] > l2[j] {\n \
    \           j += 1\n        } else {\n            i += 1\n        }\n    }\n \
    \   while i < l1.count {\n        result.append(l1[i])\n        i += 1\n    }\n\
    \    while j < l2.count {\n        result.append(l2[j])\n        j += 1\n    }\n\
    \    return result", "    var result = [Int]()\n    for i in l1 {\n        if\
    \ !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result", "    var result = [Int]()\n    for i in l1 {\n        if !contains(l2,\
    \ i) {\n            result.append(i)\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n \
    \           result.append(i)\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n            result.append(x)\n\
    \        }\n    }\n    for x in l2 {\n        if !contains(l1, x) {\n        \
    \    result.append(x)\n        }\n    }\n    return result", "    var result =\
    \ [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n            result.append(i)\n\
    \        }\n    }\n    return result", "    var result: [Int] = []\n    var i\
    \ = 0\n    var j = 0\n    while i < l1.count && j < l2.count {\n        if l1[i]\
    \ == l2[j] {\n            result.append(l1[i])\n            i += 1\n         \
    \   j += 1\n        } else if l1[i] < l2[j] {\n            i += 1\n        } else\
    \ {\n            j += 1\n        }\n    }\n    while i < l1.count {\n        result.append(l1[i])\n\
    \        i += 1\n    }\n    while j < l2.count {\n        result.append(l2[j])\n\
    \        j += 1\n    }\n    return result", "    var result = [Int]()\n    for\
    \ i in l1 {\n        if !contains(l2, i) {\n            result.append(i)\n   \
    \     }\n    }\n    return result", "    var result = [Int]()\n    for i in l1\
    \ {\n        if !contains(l2, i) {\n            result.append(i)\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    for i in l1 {\n   \
    \     if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n\
    \    return result", "    var result = [Int]()\n    var i = 0\n    var j = 0\n\
    \    while i < l1.count && j < l2.count {\n        if l1[i] == l2[j] {\n     \
    \       result.append(l1[i])\n            i += 1\n            j += 1\n       \
    \ } else if l1[i] < l2[j] {\n            i += 1\n        } else {\n          \
    \  j += 1\n        }\n    }\n    while i < l1.count {\n        result.append(l1[i])\n\
    \        i += 1\n    }\n    while j < l2.count {\n        result.append(l2[j])\n\
    \        j += 1\n    }\n    return result", "    var result: [Int] = []\n    for\
    \ i in l1 {\n        if !contains(l2, i) {\n            result.append(i)\n   \
    \     }\n    }\n    return result", "    var result = [Int]()\n    for x in l1\
    \ {\n        if !contains(l2, x) {\n            result.append(x)\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    for x in l1 {\n   \
    \     if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n\
    \    return result", "    var result = [Int]()\n    for i in l1 {\n        if\
    \ !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result", "    var result = [Int]()\n    for x in l1 {\n        if !contains(l2,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n \
    \           result.append(i)\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n            result.append(i)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for x in\
    \ l1 {\n        if !contains(l2, x) {\n            result.append(x)\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    for i in l1 {\n   \
    \     if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n\
    \    return result", "    var result: [Int] = []\n    for i in l1 {\n        if\
    \ !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result", "    var result: [Int] = []\n    for i in l1 {\n        if !contains(l2,\
    \ i) {\n            result.append(i)\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n \
    \           result.append(i)\n        }\n    }\n    return result", "    var result:\
    \ [Int] = []\n    for i in l1 {\n        if !contains(l2, i) {\n            result.append(i)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ l1 {\n        if !contains(l2, i) {\n            result.append(i)\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    for x in l1 {\n   \
    \     if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n\
    \    return result", "    var result: [Int] = []\n    for i in l1 {\n        if\
    \ !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result", "    var result = [Int]()\n    for x in l1 {\n        if !contains(l2,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    var i = 0\n    var j = 0\n    while i < l1.count\
    \ && j < l2.count {\n        if l1[i] == l2[j] {\n            result.append(l1[i])\n\
    \            i += 1\n            j += 1\n        } else if l1[i] > l2[j] {\n \
    \           j += 1\n        } else {\n            i += 1\n        }\n    }\n \
    \   return result", "    var result: [Int] = []\n    for i in l1 {\n        if\
    \ !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result", "    var result = [Int]()\n    for x in l1 {\n        if !contains(l2,\
    \ x) {\n            result.append(x)\n        }\n    }\n    for x in l2 {\n  \
    \      if !contains(l1, x) {\n            result.append(x)\n        }\n    }\n\
    \    return result", "    var result: [Int] = []\n    var i = 0\n    var j = 0\n\
    \    while i < l1.count && j < l2.count {\n        if l1[i] == l2[j] {\n     \
    \       result.append(l1[i])\n            i += 1\n            j += 1\n       \
    \ } else if l1[i] > l2[j] {\n            j += 1\n        } else {\n          \
    \  i += 1\n        }\n    }\n    while i < l1.count {\n        result.append(l1[i])\n\
    \        i += 1\n    }\n    while j < l2.count {\n        result.append(l2[j])\n\
    \        j += 1\n    }\n    return result", "    var result = [Int]()\n    for\
    \ x in l1 {\n        for y in l2 {\n            if x == y {\n                continue\n\
    \            }\n            if result.contains(&x) {\n                continue\n\
    \            }\n            result.append(x)\n        }\n    }\n    return result",
  "    var result = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n  \
    \          result.append(x)\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n            result.append(i)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for x in\
    \ l1 {\n        if !contains(l2, x) {\n            result.append(x)\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    for i in l1 {\n   \
    \     if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n\
    \    return result", "    var result = [Int]()\n    for x in l1 {\n        if\
    \ !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result", "    var result = [Int]()\n    for i in l1 {\n        if !contains(l2,\
    \ i) {\n            result.append(i)\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n \
    \           result.append(i)\n        }\n    }\n    return result", "    var result:\
    \ [Int] = []\n    for x in l1 {\n        if !contains(l2, x) {\n            result.append(x)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ l1 {\n        if !contains(l2, i) {\n            result.append(i)\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    for i in l1 {\n   \
    \     if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n\
    \    return result", "    var result = [Int]()\n    for x in l1 {\n        if\
    \ !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result", "    var result: [Int] = []\n    for i in l1 {\n        if !contains(l2,\
    \ i) {\n            result.append(i)\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n \
    \           result.append(i)\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n            result.append(i)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ l1 {\n        if !contains(l2, i) {\n            result.append(i)\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    var i = 0\n    var\
    \ j = 0\n    while i < l1.count && j < l2.count {\n        if l1[i] == l2[j] {\n\
    \            result.append(l1[i])\n            i += 1\n            j += 1\n  \
    \      } else if l1[i] < l2[j] {\n            i += 1\n        } else {\n     \
    \       j += 1\n        }\n    }\n    while i < l1.count {\n        result.append(l1[i])\n\
    \        i += 1\n    }\n    while j < l2.count {\n        result.append(l2[j])\n\
    \        j += 1\n    }\n    return result", "    var result = [Int]()\n    var\
    \ i = 0\n    var j = 0\n    while i < l1.count && j < l2.count {\n        if l1[i]\
    \ == l2[j] {\n            result.append(l1[i])\n            i += 1\n         \
    \   j += 1\n        } else if l1[i] > l2[j] {\n            j += 1\n        } else\
    \ {\n            i += 1\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n            result.append(i)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for x in\
    \ l1 {\n        if !contains(l2, x) {\n            result.append(x)\n        }\n\
    \    }\n    return result", "    var result: [Int] = []\n    for i in l1 {\n \
    \       if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n\
    \    return result", "    var result: [Int] = []\n    for i in l1 {\n        if\
    \ !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result", "    var result = [Int]()\n    for i in l1 {\n        if !contains(l2,\
    \ i) {\n            result.append(i)\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n \
    \           result.append(i)\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n            result.append(i)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ l1 {\n        if !contains(l2, i) {\n            result.append(i)\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    for i in l1 {\n   \
    \     if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n\
    \    return result", "    var result = [Int]()\n    var i = 0\n    var j = 0\n\
    \    while i < l1.count && j < l2.count {\n        if l1[i] == l2[j] {\n     \
    \       result.append(l1[i])\n            i += 1\n            j += 1\n       \
    \ } else if l1[i] < l2[j] {\n            i += 1\n        } else {\n          \
    \  j += 1\n        }\n    }\n    while i < l1.count {\n        result.append(l1[i])\n\
    \        i += 1\n    }\n    while j < l2.count {\n        result.append(l2[j])\n\
    \        j += 1\n    }\n    return result", "    var result = [Int]()\n    for\
    \ i in l1 {\n        if !contains(l2, i) {\n            result.append(i)\n   \
    \     }\n    }\n    return result", "    var result = [Int]()\n    for i in l1\
    \ {\n        if !contains(l2, i) {\n            result.append(i)\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    for x in l1 {\n   \
    \     if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n\
    \    return result", "    var result = [Int]()\n    for i in l1 {\n        if\
    \ !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result", "    var result = [Int]()\n    for x in l1 {\n        if !contains(l2,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result", " \
    \   var result: [Int] = []\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result", "    var\
    \ result: [Int] = []\n    for i in l1 {\n        if !contains(l2, i) {\n     \
    \       result.append(i)\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n            result.append(x)\n\
    \        }\n    }\n    return result", "    var result: [Int] = []\n    for i\
    \ in l1 {\n        if !contains(l2, i) {\n            result.append(i)\n     \
    \   }\n    }\n    return result", "    var result: [Int] = []\n    for i in l1\
    \ {\n        if !contains(l2, i) {\n            result.append(i)\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    for i in l1 {\n   \
    \     if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n\
    \    return result", "    var result = [Int]()\n    var i = 0\n    var j = 0\n\
    \    while i < l1.count && j < l2.count {\n        if l1[i] == l2[j] {\n     \
    \       result.append(l1[i])\n            i += 1\n            j += 1\n       \
    \ } else if l1[i] > l2[j] {\n            j += 1\n        } else {\n          \
    \  i += 1\n        }\n    }\n    while i < l1.count {\n        result.append(l1[i])\n\
    \        i += 1\n    }\n    while j < l2.count {\n        result.append(l2[j])\n\
    \        j += 1\n    }\n    return result", "    var result = [Int]()\n    var\
    \ i = 0\n    var j = 0\n    while i < l1.count && j < l2.count {\n        if l1[i]\
    \ == l2[j] {\n            result.append(l1[i])\n            i += 1\n         \
    \   j += 1\n        } else if l1[i] > l2[j] {\n            j += 1\n        } else\
    \ {\n            i += 1\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n            result.append(i)\n\
    \        }\n    }\n    return result", "    var result: [Int] = []\n    for i\
    \ in l1 {\n        if !contains(l2, i) {\n            result.append(i)\n     \
    \   }\n    }\n    return result", "    var result = [Int]()\n    for i in l1 {\n\
    \        if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n\
    \    return result", "    var result = [Int]()\n    for x in l1 {\n        if\
    \ !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result", "    var result = [Int]()\n    for i in l1 {\n        if !contains(l2,\
    \ i) {\n            result.append(i)\n        }\n    }\n    return result", " \
    \   var result: [Int] = []\n    for x in l1 {\n        if !contains(l2, x) {\n\
    \            result.append(x)\n        }\n    }\n    return result", "    var\
    \ result = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n       \
    \     result.append(i)\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n            result.append(i)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ l1 {\n        if !contains(l2, i) {\n            result.append(i)\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    for i in l1 {\n   \
    \     if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n\
    \    return result", "    var result = [Int]()\n    for i in l1 {\n        if\
    \ !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result", "    var result = [Int]()\n    for x in l1 {\n        if !contains(l2,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    var i = 0\n    var j = 0\n    while i < l1.count\
    \ && j < l2.count {\n        if l1[i] == l2[j] {\n            result.append(l1[i])\n\
    \            i += 1\n            j += 1\n        } else if l1[i] > l2[j] {\n \
    \           j += 1\n        } else {\n            i += 1\n        }\n    }\n \
    \   while i < l1.count {\n        result.append(l1[i])\n        i += 1\n    }\n\
    \    while j < l2.count {\n        result.append(l2[j])\n        j += 1\n    }\n\
    \    return result", "    var result = [Int]()\n    for i in l1 {\n        if\
    \ !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result", "    var result = [Int]()\n    for x in l1 {\n        if !contains(l2,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    for x in l1 {\n        for y in l2 {\n         \
    \   if x == y {\n                continue\n            }\n            if result.contains(&x)\
    \ {\n                continue\n            }\n            result.append(x)\n \
    \       }\n    }\n    return result", "    var result: [Int] = []\n    for x in\
    \ l1 {\n        if !contains(l2, x) {\n            result.append(x)\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    for x in l1 {\n   \
    \     if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n\
    \    return result", "    var result = [Int]()\n    for i in l1 {\n        if\
    \ !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result", "    var result: [Int] = []\n    var i = 0\n    var j = 0\n    while\
    \ i < l1.count && j < l2.count {\n        if l1[i] == l2[j] {\n            result.append(l1[i])\n\
    \            i += 1\n            j += 1\n        } else if l1[i] < l2[j] {\n \
    \           i += 1\n        } else {\n            j += 1\n        }\n    }\n \
    \   return result", "    var result = [Int]()\n    for i in l1 {\n        if !contains(l2,\
    \ i) {\n            result.append(i)\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    var i = 0\n    var j = 0\n    while i < l1.count\
    \ && j < l2.count {\n        if l1[i] == l2[j] {\n            result.append(l1[i])\n\
    \            i += 1\n            j += 1\n        } else if l1[i] > l2[j] {\n \
    \           i += 1\n        } else {\n            j += 1\n        }\n    }\n \
    \   while i < l1.count {\n        result.append(l1[i])\n        i += 1\n    }\n\
    \    while j < l2.count {\n        result.append(l2[j])\n        j += 1\n    }\n\
    \    return result", "    var result = [Int]()\n    for x in l1 {\n        if\
    \ !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result", "    var result: [Int] = []\n    var i = 0\n    var j = 0\n    while\
    \ i < l1.count && j < l2.count {\n        if l1[i] == l2[j] {\n            result.append(l1[i])\n\
    \            i += 1\n            j += 1\n        } else if l1[i] > l2[j] {\n \
    \           j += 1\n        } else {\n            i += 1\n        }\n    }\n \
    \   return result", "    var result: [Int] = []\n    for i in l1 {\n        if\
    \ !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result", "    var result = [Int]()\n    for i in l1 {\n        if !contains(l2,\
    \ i) {\n            result.append(i)\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    var i = 0\n    var j = 0\n    while i < l1.count\
    \ && j < l2.count {\n        if l1[i] == l2[j] {\n            result.append(l1[i])\n\
    \            i += 1\n            j += 1\n        } else if l1[i] > l2[j] {\n \
    \           j += 1\n        } else {\n            i += 1\n        }\n    }\n \
    \   return result", "    var result: [Int] = []\n    for i in l1 {\n        if\
    \ !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result", "    var result = [Int]()\n    for x in l1 {\n        if !contains(l2,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n \
    \           result.append(i)\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n            result.append(i)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ l1 {\n        if !contains(l2, i) {\n            result.append(i)\n        }\n\
    \    }\n    return result", "    var result: [Int] = []\n    for i in l1 {\n \
    \       if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n\
    \    return result", "    var result = [Int]()\n    for x in l1 {\n        if\
    \ !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result", "    var result = [Int]()\n    for i in l1 {\n        if !contains(l2,\
    \ i) {\n            result.append(i)\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n \
    \           result.append(x)\n        }\n    }\n    return result", "    var result:\
    \ [Int] = []\n    for i in l1 {\n        if !contains(l2, i) {\n            result.append(i)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for x in\
    \ l1 {\n        if !contains(l2, x) {\n            result.append(x)\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    for x in l1 {\n   \
    \     if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n\
    \    return result", "    var result: [Int] = []\n    for i in l1 {\n        if\
    \ !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result", "    var result = [Int]()\n    for i in l1 {\n        if !contains(l2,\
    \ i) {\n            result.append(i)\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    for x in l1 {\n        for y in l2 {\n         \
    \   if x == y {\n                continue\n            }\n            if result.contains(&x)\
    \ {\n                continue\n            }\n            result.append(x)\n \
    \       }\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ l1 {\n        if !contains(l2, i) {\n            result.append(i)\n        }\n\
    \    }\n    return result", "    var result: [Int] = []\n    for i in l1 {\n \
    \       if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n\
    \    return result", "    var result = [Int]()\n    for x in l1 {\n        if\
    \ !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result", "    var result = [Int]()\n    for i in l1 {\n        if !contains(l2,\
    \ i) {\n            result.append(i)\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    var i = 0\n    var j = 0\n    while i < l1.count\
    \ && j < l2.count {\n        if l1[i] == l2[j] {\n            result.append(l1[i])\n\
    \            i += 1\n            j += 1\n        } else if l1[i] < l2[j] {\n \
    \           i += 1\n        } else {\n            j += 1\n        }\n    }\n \
    \   return result", "    var result = [Int]()\n    for x in l1 {\n        if !contains(l2,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result", " \
    \   var result: [Int] = []\n    for i in l1 {\n        if !contains(l2, i) {\n\
    \            result.append(i)\n        }\n    }\n    return result", "    var\
    \ result = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n       \
    \     result.append(i)\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n            result.append(i)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ l1 {\n        if !contains(l2, i) {\n            result.append(i)\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    for x in l1 {\n   \
    \     if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n\
    \    return result", "    var result: [Int] = []\n    for i in l1 {\n        if\
    \ !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result", "    var result = [Int]()\n    for x in l1 {\n        for y in l2 {\n\
    \            if x == y {\n                continue\n            }\n          \
    \  if result.contains(&x) {\n                continue\n            }\n       \
    \     result.append(x)\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n            result.append(x)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ l1 {\n        if !contains(l2, i) {\n            result.append(i)\n        }\n\
    \    }\n    return result", "    var result: [Int] = []\n    for i in l1 {\n \
    \       if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n\
    \    return result", "    var result = [Int]()\n    for i in l1 {\n        if\
    \ !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result", "    var result = [Int]()\n    for x in l1 {\n        if !contains(l2,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n \
    \           result.append(i)\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n            result.append(x)\n\
    \        }\n    }\n    return result", "    var result: [Int] = []\n    var i\
    \ = 0\n    var j = 0\n    while i < l1.count && j < l2.count {\n        if l1[i]\
    \ == l2[j] {\n            result.append(l1[i])\n            i += 1\n         \
    \   j += 1\n        } else if l1[i] > l2[j] {\n            j += 1\n        } else\
    \ {\n            i += 1\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n            result.append(i)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for x in\
    \ l1 {\n        if !contains(l2, x) {\n            result.append(x)\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    var i = 0\n    var\
    \ j = 0\n    while i < l1.count && j < l2.count {\n        if l1[i] == l2[j] {\n\
    \            result.append(l1[i])\n            i += 1\n            j += 1\n  \
    \      } else if l1[i] < l2[j] {\n            i += 1\n        } else {\n     \
    \       j += 1\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    for x in l1 {\n        if !contains(l2, x) {\n            result.append(x)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    var i =\
    \ 0\n    var j = 0\n    while i < l1.count && j < l2.count {\n        if l1[i]\
    \ == l2[j] {\n            result.append(l1[i])\n            i += 1\n         \
    \   j += 1\n        } else if l1[i] > l2[j] {\n            j += 1\n        } else\
    \ {\n            i += 1\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    var i = 0\n    var j = 0\n    while i < l1.count && j < l2.count\
    \ {\n        if l1[i] == l2[j] {\n            result.append(l1[i])\n         \
    \   i += 1\n            j += 1\n        } else if l1[i] > l2[j] {\n          \
    \  i += 1\n        } else {\n            j += 1\n        }\n    }\n    while i\
    \ < l1.count {\n        result.append(l1[i])\n        i += 1\n    }\n    while\
    \ j < l2.count {\n        result.append(l2[j])\n        j += 1\n    }\n    return\
    \ result", "    var result: [Int] = []\n    for i in l1 {\n        if !contains(l2,\
    \ i) {\n            result.append(i)\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n \
    \           result.append(x)\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n            result.append(i)\n\
    \        }\n    }\n    return result", "    var result: [Int] = []\n    for i\
    \ in l1 {\n        if !contains(l2, i) {\n            result.append(i)\n     \
    \   }\n    }\n    return result", "    var result = [Int]()\n    for i in l1 {\n\
    \        if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n\
    \    return result", "    var result = [Int]()\n    for i in l1 {\n        if\
    \ !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result", "    var result = [Int]()\n    for i in l1 {\n        if !contains(l2,\
    \ i) {\n            result.append(i)\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n \
    \           result.append(x)\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n            result.append(i)\n\
    \        }\n    }\n    return result", "    var result: [Int] = []\n    var i\
    \ = 0\n    var j = 0\n    while i < l1.count && j < l2.count {\n        if l1[i]\
    \ == l2[j] {\n            result.append(l1[i])\n            i += 1\n         \
    \   j += 1\n        } else if l1[i] < l2[j] {\n            i += 1\n        } else\
    \ {\n            j += 1\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n            result.append(x)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for x in\
    \ l1 {\n        if !contains(l2, x) {\n            result.append(x)\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    for x in l1 {\n   \
    \     if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n\
    \    return result", "    var result: [Int] = []\n    for x in l1 {\n        if\
    \ !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result", "    var result = [Int]()\n    for x in l1 {\n        if !contains(l2,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    var i = 0\n    var j = 0\n    while i < l1.count\
    \ && j < l2.count {\n        if l1[i] == l2[j] {\n            result.append(l1[i])\n\
    \            i += 1\n            j += 1\n        } else if l1[i] > l2[j] {\n \
    \           j += 1\n        } else {\n            i += 1\n        }\n    }\n \
    \   return result", "    var result = [Int]()\n    for i in l1 {\n        if !contains(l2,\
    \ i) {\n            result.append(i)\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n \
    \           result.append(i)\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n            result.append(i)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ l1 {\n        if !contains(l2, i) {\n            result.append(i)\n        }\n\
    \    }\n    return result"]
stop_tokens:
- "\n}"
