name: HumanEval_65_circular_shift
language: swift
prompt: "\n/// Circular shift the digits of the integer x, shift the digits right\
  \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
  \ return digits reversed.\n/// >>> circular_shift(x: 12, shift: 1)\n/// \"21\"\n\
  /// >>> circular_shift(x: 12, shift: 2)\n/// \"12\"\nfunc circular_shift(x: Int,\
  \ shift: Int) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(circular_shift(x: 100, shift: 2) == \"001\"\
  )\nassert(circular_shift(x: 12, shift: 2) == \"12\")\nassert(circular_shift(x: 97,\
  \ shift: 8) == \"79\")\nassert(circular_shift(x: 12, shift: 1) == \"21\")\nassert(circular_shift(x:\
  \ 11, shift: 101) == \"11\")"
completions: ["    var result = \"\"\n    for digit in x.toString() {\n        result\
    \ = digit.characters.reversed()[Int(shift) % Int(digit.characters.count)] + result\n\
    \        shift -= Int(digit.characters.count)\n    }\n    return result", "  \
    \  var result = \"\"\n    for digit in x.toString() {\n        result = digit.stringByAppendingString(result)\n\
    \    }\n    if shift > result.characters.count {\n        return result.characters.reversed()\n\
    \    }\n    return result.substringToIndex(result.startIndex.advancedBy(-shift))",
  "    var s = String(x)\n    for i := 0; i < shift; i++ {\n        s = String(Int(s[i])\
    \ - Int(s[i+shift])) + s\n    }\n    return s", "    var s = String(x)\n    if\
    \ shift > s.count {\n        shift = s.count - 1\n    }\n    for _ in 0..<shift\
    \ {\n        s = s.reversed()\n    }\n    return s", "    var result = \"\"\n\
    \    var shiftDigits = shift % 10\n    var shiftRemainder = shift / 10\n    for\
    \ digit in x.toString() {\n        if digit == \"0\" {\n            result +=\
    \ digit\n        } else {\n            result += String(digit)\n        }\n  \
    \  }\n    if shiftRemainder != 0 {\n        result += String(shiftDigits)\n  \
    \  }\n    return result", "    if shift > x.count {\n        return x.reversed()\n\
    \    }\n    var result = \"\"\n    for _ in 0..<shift {\n        result = String(x.last!)\
    \ + result\n        x = x.prefix(1)\n    }\n    return result", "    let digits\
    \ = x.digits\n    if shift > digits.count {\n        return digits.reversed()\n\
    \    }\n    var result = \"\"\n    for index in 0..<shift {\n        result =\
    \ digits[index] + result\n    }\n    return result", "    if shift > x.bitLength\
    \ {\n        return x.reverse()\n    }\n    var result = \"\"\n    var carry =\
    \ 0\n    for i := 0; i < x.bitLength; i++ {\n        var digit = x.uint(i)\n \
    \       var newDigit = digit.shl(shift)\n        if carry == 0 {\n           \
    \ result += String(newDigit)\n        } else {\n            result += String(newDigit).reverse()\n\
    \        }\n        carry = newDigit >> 8\n    }\n    if carry != 0 {\n      \
    \  result += \"1\"\n    }\n    return result", "    var s = \"\"\n    for i :=\
    \ 0; i < shift; i++ {\n        s += String(x%10)\n        x /= 10\n    }\n   \
    \ for i := 0; i < shift; i++ {\n        x /= 10\n    }\n    return s + String(x)",
  '    return x.toString().circularShift(shift)', "    var result = \"\"\n    for\
    \ digit := 0; digit < shift; digit++ {\n        result = String(x.toInt()) + result\n\
    \        x = x >> 1\n    }\n    return result", "    let digits = x.toInt()\n\
    \    let shift = shift % digits\n    let digits_count = digits - shift\n    let\
    \ digits_reversed = digits_count > 0 ? digits_count : digits - 1\n    let digits_reversed_str\
    \ = String(digits_reversed)\n    let digits_reversed_reversed = digits_reversed_str.characters.reversed()\n\
    \    let digits_reversed_reversed_str = String(digits_reversed_reversed)\n   \
    \ return digits_reversed_str + digits_reversed_reversed_str", "    var s = \"\"\
    \n    for i := 0; i < shift; i++ {\n        s = String(format: \"%0*d\", i, x)\
    \ + s\n    }\n    return s", "    var s = \"\"\n    for i := 0; i < shift; i++\
    \ {\n        s += String(x)\n        x = x >> 1\n    }\n    return s", "    var\
    \ result = \"\"\n    for i := 0; i < shift; i++ {\n        result = String(Int(x%10))\
    \ + result\n        x = x / 10\n    }\n    if shift > len(result) {\n        result\
    \ = String(Int(x)) + result\n    }\n    return result", "    let digits = x.digits\n\
    \    let digits_count = digits.count\n    if shift > digits_count {\n        return\
    \ digits.reversed()\n    }\n    let digits_count = digits_count - shift\n    let\
    \ digits_reversed = digits.reversed()\n    let digits_reversed_count = digits_reversed.count\n\
    \    var result = \"\"\n    for i in 0..<digits_count {\n        let digit = digits_reversed[i]\n\
    \        result += String(digit)\n    }\n    for i in 0..<digits_reversed_count\
    \ {\n        let digit = digits_reversed[digits_reversed_count - 1 - i]\n    \
    \    result += String(digit)\n    }\n    return result", "    var s = \"\"\n \
    \   for i := 0; i < shift; i++ {\n        s += String(x)\n        x = x >> 1\n\
    \    }\n    if shift > len(s) {\n        for i := len(s) - 1; i >= shift; i--\
    \ {\n            s = String(x) + s\n            x = x >> 1\n        }\n    }\n\
    \    return s", "    if shift > x.bitLength {\n        return x.reverse()\n  \
    \  }\n    var result = \"\"\n    var carry: UInt64 = 0\n    for i := 0; i < shift;\
    \ i++ {\n        carry += UInt64(UInt32(x) >> UInt32(i))\n        result += String(carry\
    \ % 10)\n        carry /= 10\n    }\n    if carry != 0 {\n        result += String(carry)\n\
    \    }\n    return result", "    let digits = x.digits\n    if shift > digits.count\
    \ {\n        return digits.reversed()\n    }\n    var result = \"\"\n    for index\
    \ in 0..<shift {\n        result += digits[index]\n    }\n    for index in (shift..<digits.count)\
    \ {\n        result += digits[index]\n    }\n    return result", "    var result\
    \ = \"\"\n    for digit in x.toString() {\n        result += String(digit)[(shift\
    \ - Int(digit)) + 1]\n    }\n    return result.reversed()", "    var result =\
    \ \"\"\n    for i := 0; i < shift; i++ {\n        result = String(format: \"%0*d\"\
    , i, x) + result\n    }\n    return result", "    var s = \"\"\n    for i := 0;\
    \ i < shift; i++ {\n        s += String(x)\n        x = x >> 1\n    }\n    return\
    \ s", '    return x.toRadixString(shift)', "    if shift > x.count {\n       \
    \ return x.reversed()\n    }\n    var result = \"\"\n    for digit in x.digits()\
    \ {\n        result = String(digit) + result\n    }\n    return String(result[(x.count\
    \ - shift)..<x.count])", "    var s = String(x)\n    if shift > s.count {\n  \
    \      return s.reversed()\n    }\n    for _ in 0..<shift {\n        s = s.reversed()\n\
    \    }\n    return s", "    var s = \"\"\n    for i := 0; i < shift; i++ {\n \
    \       s += String(x%10)\n        x /= 10\n    }\n    if shift < 0 {\n      \
    \  for i := 0; i < -shift; i++ {\n            s += String(x%10)\n            x\
    \ /= 10\n        }\n    }\n    return s", "    if shift > x.count {\n        return\
    \ x.reverse()\n    }\n    var result = \"\"\n    for i := 0; i < shift; i++ {\n\
    \        result += x.digits[i]\n    }\n    for i := shift - 1; i >= 0; i-- {\n\
    \        result += x.digits[i]\n    }\n    return result", "    let digits = x.digits\n\
    \    var result = \"\"\n    for _ in 0..<shift {\n        result = digits[digits.startIndex.advancedBy(digits.startIndex.advancedBy(1)\
    \ + 1)] + result\n    }\n    if shift > digits.count {\n        return digits.reversed()\n\
    \    }\n    return result", "    var s = String(x)\n    if shift > s.count {\n\
    \        return s.reversed()\n    }\n    if shift < 0 {\n        shift = -shift\n\
    \    }\n    var carry = 0\n    for i := 0; i < shift; i++ {\n        carry +=\
    \ Int(s[i])\n        s[i] = carry % 10\n        carry /= 10\n    }\n    return\
    \ s", "    var s = \"\"\n    for i := 0; i < shift; i++ {\n        s = String(format:\
    \ \"%0*d\", i, x) + s\n    }\n    return s", "    if shift > x.count {\n     \
    \   return x.reversed()\n    }\n    var result = \"\"\n    for i := 0; i < shift;\
    \ i++ {\n        result = x.digits[i]+result\n    }\n    return result", "   \
    \ if shift > x.truncatingRemainder(dividingBy: 10).magnitude.magnitude {\n   \
    \     return x.reversed()\n    }\n    var result = \"\"\n    var remainder = x.truncatingRemainder(dividingBy:\
    \ 10)\n    while shift > 0 {\n        result += String(remainder)\n        remainder\
    \ = remainder.truncatingRemainder(dividingBy: 10)\n        shift -= 1\n    }\n\
    \    result += String(remainder)\n    return result", "    var result = \"\"\n\
    \    for digit in x.toString() {\n        result = digit.characters.reversed().reduce(result)\
    \ { $0 + String($1) + String($2) }\n    }\n    if shift > result.characters.count\
    \ {\n        return result.reversed()\n    }\n    return result", "    let digits\
    \ = x.toInt()\n    let reversedDigits = digits % 10\n    let shifted = digits\
    \ - reversedDigits + shift\n    let reversedShifted = shifted % 10\n    return\
    \ String(reversedDigits + reversedShifted)", "    let digits = x.digits\n    let\
    \ shiftDigits = digits.count - shift\n    let digitSlice = digits.subarrayWithRange(Range<Int>(start:\
    \ digits[shiftDigits], end: digits[digits.count - 1]))\n    let reversedDigitSlice\
    \ = digitSlice.map { String($0) }.reversed()\n    return reversedDigitSlice.joinWithSeparator(\"\
    \")", "    var result = \"\"\n    for digit in x.toString() {\n        result\
    \ = digit.stringByAppendingString(result)\n    }\n    if shift > result.characters.count\
    \ {\n        return result.reversed()\n    }\n    return result.stringByAppendingString(String(repeating:\
    \ \"\", count: shift - result.characters.count))", "    let digits = x.toInt()\n\
    \    let shift = Int(pow(10.0, Double(shift)))\n    let digits_shifted = digits\
    \ >> shift\n    let digits_shifted_reversed = digits_shifted << shift\n    return\
    \ String(digits_shifted_reversed)", "    let digits = x.digits\n    if shift >\
    \ digits.count {\n        return digits.reversed()\n    }\n    var result = \"\
    \"\n    for index in 0..<shift {\n        result += digits[index]\n    }\n   \
    \ return result", '    return x.toRadixString(shift).reverse()', "    var s =\
    \ String(x)\n    if shift > s.count {\n        return s[s.startIndex..<s.startIndex\
    \ + s.count - shift].reversed()\n    }\n    return s[s.startIndex..<s.startIndex\
    \ + shift]", "    let digits = x.digits\n    var result = \"\"\n    for index\
    \ in 0..<shift {\n        let digit = digits[index]\n        let digitIndex =\
    \ digits.indexOf(digit)\n        if digitIndex == -1 {\n            result +=\
    \ digit\n        } else {\n            result += digits[digitIndex + shift]\n\
    \        }\n    }\n    return result.reversed()", "    var s = String(x)\n   \
    \ for i := 0; i < shift; i++ {\n        s = String(s.characters[s.startIndex.advancedBy(i)])\n\
    \    }\n    return s", "    var result = \"\"\n    var carry = 0\n    for digit\
    \ in x.toString() {\n        let digit = Int(digit)\n        let digitShifted\
    \ = digit << shift\n        let digitCarry = (digitShifted & UInt32(1)) >> UInt32(shift)\n\
    \        result += String(digitCarry)\n        carry = digitCarry\n    }\n   \
    \ if carry > 0 {\n        result += \"1\"\n    }\n    return result", '    return
    x.toRadixString(shift).reverse()', "    if shift > x.count {\n        return x.reversed()\n\
    \    }\n    var result = String()\n    for _ in 0..<shift {\n        result =\
    \ String(x.digits) + result\n        x = x.div(10)\n    }\n    return result",
  "    var s = String(x)\n    if shift > s.count {\n        s = s.reversed()\n   \
    \ }\n    return String(s.characters.prefix(shift) + s.characters.suffix(s.count\
    \ - shift))", "    var s = String(x)\n    if shift > s.count {\n        return\
    \ s.reversed()\n    }\n    for _ in 0..<shift {\n        s = String(s.reversed())\
    \ + s\n    }\n    return s", "    let digits = x.toString()\n    if shift > digits.length\
    \ {\n        return digits.reversed()\n    }\n    return String(digits.reversed().prefix(shift))",
  "    var result = \"\"\n    var remainder = x % shift\n    x /= shift\n    for _\
    \ in 0..<shift {\n        result += String(x % 10)\n        x /= 10\n    }\n \
    \   if remainder > 0 {\n        result += String(remainder)\n    }\n    return\
    \ result", "    var result = \"\"\n    for digit := 0; digit < shift; digit++\
    \ {\n        result += String(x%10)\n        x = x/10\n    }\n    if shift < 0\
    \ {\n        for digit := 0; digit < -shift; digit++ {\n            result = String(10)\
    \ + result\n        }\n    }\n    return result", "    var result = \"\"\n   \
    \ for i := 0; i < shift; i++ {\n        result = String(Int(x)) + result\n   \
    \     x = x >> 1\n    }\n    return result", "    if shift > x.count {\n     \
    \   return x.reverse()\n    }\n    var result = \"\"\n    for i := 0; i < shift;\
    \ i++ {\n        result = x.digits[i] + result\n    }\n    return result", " \
    \   if shift > x.bitLength {\n        return x.reverse()\n    }\n    var result\
    \ = \"\"\n    for _ in 0..<shift {\n        result = x.reverse() + result\n  \
    \      x = x >> 1\n    }\n    return result", "    var result = \"\"\n    var\
    \ shiftDigits = shift % 10\n    var shiftDigit = shift / 10\n    var digit = x\
    \ % 10\n    var digits = Int(log10(Double(x)))\n    var digitCount = Int(log10(Double(digits)))\n\
    \    var digitShift = Int(log10(Double(digit)))\n    var digitShiftCount = Int(log10(Double(digitShift)))\n\
    \    var digitShiftDigit = digitShift / 10\n    var digitShiftDigits = digitShiftDigit\
    \ % 10\n    var digitShiftDigitCount = digitShiftDigit / 10\n    var digitShiftDigitCount\
    \ = digitShiftDigitCount % 10\n    var digitShiftDigit = digitShiftDigit / 10\n\
    \    var digitShiftDigits = digitShiftDigit % 10\n    var digitShiftDigitCount\
    \ = digitShiftDigit / 10\n    var digitShiftDigitCount = digitShiftDigitCount\
    \ % 10\n    var digitShiftDigit = digitShiftDigit / 10\n    var digitShiftDigits\
    \ = digitShiftDigit % 10\n    var digitShiftDigitCount = digitShiftDigit / 10\n\
    \    var digitShiftDigitCount = digitShiftDigitCount % 10\n    var digitShiftDigit\
    \ = digitShiftDigit / 10\n    var digitShiftDigits = digitShiftDigit % 10\n  \
    \  var digitShiftDigitCount = digitShiftDigit / 10\n    var digitShiftDigitCount\
    \ = digitShiftDigitCount % 10\n    var digitShiftDigit = digitShiftDigit / 10\n\
    \    var digitShiftDigits = digitShiftDigit % 10\n    var digitShiftDigitCount\
    \ = digitShiftDigit / 10\n    var digitShiftDigitCount = digitShiftDigitCount\
    \ % 10\n    var digitShiftDigit = digitShiftDigit / 10\n    var digitShiftDigits\
    \ = digitShiftDigit % 10\n    var digitShiftDigitCount = digitShiftDigit / 10\n\
    \    var digitShiftDigitCount = digitShiftDigitCount % 10\n    var digitShiftDigit\
    \ = digitShiftDigit / 10\n    var digitShiftDigits = digitShiftDigit % 10\n  \
    \  var digitShiftDigitCount = digitShiftDigit / 10\n    var digitShiftDigitCount\
    \ = digitShiftDigitCount % 10\n    var digitShiftDigit = digitShiftDigit / 10\n\
    \    var digitShiftDigits = digitShiftDigit % 10\n    var digitShiftDigitCount\
    \ = digitShiftDigit / 10\n    var digitShiftDigitCount = digitShiftDigitCount\
    \ % 10\n    var digitShiftDigit = digitShiftDigit / 10\n    var digitShiftDigits\
    \ = digitShiftDigit % 10\n    var digitShiftDigitCount = digitShiftDigit / 10\n\
    \    var digitShiftDigitCount = digitShiftDigitCount % 10\n    var digitShiftDigit\
    \ = digitShiftDigit ", "    var s = \"\"\n    for i := 0; i < shift; i++ {\n \
    \       s += String(x%10)\n        x /= 10\n    }\n    for i := 0; i < shift;\
    \ i++ {\n        s += String(x%10)\n        x /= 10\n    }\n    return s", " \
    \   var s = String(x)\n    for i := 0; i < shift; i++ {\n        s = String(Int(s[i])\
    \ - Int(s[i+shift])) + s\n    }\n    return s", "    var s = String(x)\n    if\
    \ shift > s.count {\n        return s.reversed()\n    }\n    var carry = 0\n \
    \   for i := 0; i < shift; i++ {\n        carry += Int(s[i]) - Int(s[s.count -\
    \ 1 - i])\n        s[i] = Int(s[s.count - 1 - i])\n        s[s.count - 1 - i]\
    \ = Int(s[i])\n    }\n    if carry > 0 {\n        s.append(String(carry))\n  \
    \  }\n    return s", "    var result = \"\"\n    for _ in 0..<shift {\n      \
    \  result = String(x % 10) + result\n        x /= 10\n    }\n    if shift > result.characters.count\
    \ {\n        return String(result.reversed())\n    }\n    return String(result)",
  "    if shift > x.bitLength {\n        return x.reversed()\n    }\n    var result\
    \ = \"\"\n    var carry = 0\n    for i := 0; i < shift; i++ {\n        carry +=\
    \ x.bitLength\n        x >>= 1\n        if x == 0 {\n            break\n     \
    \   }\n        result += String(carry & 1)\n        carry >>= 1\n    }\n    if\
    \ carry > 0 {\n        result += String(carry)\n    }\n    return result", " \
    \   var s = String(x)\n    for i := 0; i < shift; i++ {\n        s = String(Int(s[i])\
    \ - Int(s[i+shift])) + s\n    }\n    return s", "    var result = \"\"\n    var\
    \ remainder = x % 10\n    for _ in 0..<shift {\n        result += \"0\"\n    }\n\
    \    result += String(remainder)\n    if shift > result.characters.count {\n \
    \       for _ in 0..<(shift - result.characters.count) {\n            result +=\
    \ \"0\"\n        }\n    }\n    return result", "    var result = \"\"\n    for\
    \ digit in x.toString() {\n        result = digit.characters.reversed().reduce(result)\
    \ { $0 + String($1) + $2 }\n    }\n    if shift > result.characters.count {\n\
    \        return String(result.reversed())\n    }\n    return String(result).characters.reversed()[shift..<result.characters.count]",
  '    return x.toRadixString(shift)', "    let digits = x.toString()\n    let digitCount\
    \ = digits.count\n    let shiftDigitCount = digitCount - shift\n    let digitSlice\
    \ = digits.substringFromIndex(digitCount - shiftDigitCount)\n    let reversedDigitSlice\
    \ = digitSlice.substringToIndex(digitSlice.length - shiftDigitCount)\n    return\
    \ reversedDigitSlice.reversed()", "    let digits = x.digits\n    if shift > digits.count\
    \ {\n        return digits.reversed()\n    }\n    var result = \"\"\n    for index\
    \ in 0..<shift {\n        result += digits[index]\n    }\n    for index in shift..<digits.count\
    \ {\n        result += digits[index]\n    }\n    return result", "    var s =\
    \ String(x)\n    if shift > s.count {\n        s = s.reversed()\n    }\n    return\
    \ String(s.characters.prefix(s.count - shift))", "    var s = \"\"\n    for i\
    \ := 0; i < shift; i++ {\n        s += String(x%10)\n        x /= 10\n    }\n\
    \    for i := shift; i < 0; i++ {\n        s += String(x%10)\n        x /= 10\n\
    \    }\n    return s", "    var s = \"\"\n    for i := 0; i < shift; i++ {\n \
    \       s += String(x)\n    }\n    for i := shift - 1; i >= 0; i-- {\n       \
    \ s += String(x)\n    }\n    return s", '    return x.toRadixString(shift)', " \
    \   let digits = x.toInt()\n    var result = \"\"\n    for _ in 0..<shift {\n\
    \        result = String(digits) + result\n    }\n    return result.reversed()",
  "    var s = \"\"\n    for i := 0; i < shift; i++ {\n        s += String(x%10)\n\
    \        x /= 10\n    }\n    for i := shift - 1; i >= 0; i-- {\n        s += String(x%10)\n\
    \        x /= 10\n    }\n    return s", '    return x.toRadixString(shift).reverse()',
  "    if shift > x.bitLength {\n        return x.reversed()\n    }\n    var result\
    \ = \"\"\n    for digit in x.bits.prefix(shift) {\n        result = digit.bits.reverse().append(result)\n\
    \    }\n    return result", "    var s = String(x)\n    if shift > s.count {\n\
    \        return s.reversed()\n    }\n    for _ in 0..<shift {\n        s = String(s.dropLast())\n\
    \    }\n    return s", "    var s = \"\"\n    for i := 0; i < shift; i++ {\n \
    \       s += String(x%10)\n        x /= 10\n    }\n    for i := 0; i < shift;\
    \ i++ {\n        x /= 10\n    }\n    return s", "    var s = String(x)\n    for\
    \ i := 0; i < shift; i++ {\n        s = String(s.characters[s.startIndex.advancedBy(i)])\n\
    \    }\n    return s", "    var result = \"\"\n    for i := 0; i < shift; i++\
    \ {\n        result = String(format: \"%0*d\", i, x) + result\n    }\n    return\
    \ result", "    var s = String(x)\n    if shift > s.count {\n        s = s.reversed()\n\
    \    }\n    for _ in 0..<shift {\n        s = s.reversed()\n    }\n    return\
    \ s", "    if shift > x.bitLength {\n        return x.reversed()\n    }\n    var\
    \ result = \"\"\n    for i := 0; i < shift; i++ {\n        result += \"0\"\n \
    \   }\n    for i := x.bitLength - 1; i >= shift; i-- {\n        result += \"1\"\
    \n    }\n    return result", '    return x.toRadixString(shift)', "    var s =\
    \ String(x)\n    for i := 0; i < shift; i++ {\n        s = String(Int(s[i]) -\
    \ Int(s[i+shift])) + s[i+shift]\n    }\n    return s", "    var s = String(x)\n\
    \    if shift > s.count {\n        s = s[s.count - shift - 1 ..< s.count].reversed()\n\
    \    }\n    return s", "    let digits = x.digits\n    let shift = shift % len(digits)\n\
    \    return String(digits[0..<shift].reversed()) + String(digits[shift..<len(digits)])",
  "    var s = \"\"\n    for i := 0; i < shift; i++ {\n        s += String(x)\n  \
    \      x = x >> 1\n    }\n    return s", "    if shift > x.truncatingRemainder(dividingBy:\
    \ 10).magnitude.magnitude {\n        return x.reversed()\n    }\n    var result\
    \ = \"\"\n    var remainder = x.truncatingRemainder(dividingBy: 10)\n    for i\
    \ in 0..<shift {\n        result = String(remainder) + result\n        remainder\
    \ = remainder.quotientModulo(dividingBy: 10)\n    }\n    return String(remainder)\
    \ + result", "    var s = String(x)\n    for i := 0; i < shift; i++ {\n      \
    \  s = String(Int(s[i]) - Int(s[i+shift])) + s\n    }\n    return s", "    var\
    \ s = String(x)\n    if shift > s.count {\n        return s.reversed()\n    }\n\
    \    \n    var digits = Array(s.characters)\n    \n    for _ in 0..<shift {\n\
    \        digits.reverse()\n    }\n    \n    return String(digits)", "    if shift\
    \ > x.count {\n        return x.reverse()\n    }\n    var result = String()\n\
    \    for _ in 0..<shift {\n        result = String(x.digits) + result\n    }\n\
    \    return result", "    var s = \"\"\n    for i := 0; i < shift; i++ {\n   \
    \     s = String(format: \"%0*d\", i, x) + s\n    }\n    return s", "    let digits\
    \ = x.digits\n    let shift = shift % digits.count\n    let digits_count = digits.count\n\
    \    var result = \"\"\n    for i in 0..<digits_count {\n        let digit = digits[i]\n\
    \        let digits_count = digits.count\n        if i == shift {\n          \
    \  result += digit\n        } else {\n            result += digit.reversed()\n\
    \        }\n    }\n    return result", "    var s = \"\"\n    for i := 0; i <\
    \ shift; i++ {\n        s = s + String(x%10)\n        x = x/10\n    }\n    if\
    \ shift < 0 {\n        s = String(x%10) + s\n    }\n    return s", "    var s\
    \ = \"\"\n    var i = shift\n    var j = x.bitLength()\n    while i >= 0 {\n \
    \       if j == 0 {\n            s = String(x.toInt()) + s\n            break\n\
    \        }\n        x >>= 1\n        j >>= 1\n    }\n    if i < 0 {\n        s\
    \ = String(x.toInt()) + s\n    }\n    return s", "    var s = String(x)\n    if\
    \ shift > s.count {\n        s = s[s.startIndex..<s.endIndex].reversed()\n   \
    \ }\n    return s", "    if shift > x.bitLength {\n        return x.reversed()\n\
    \    }\n    var result = \"\"\n    for i := 0; i < shift; i++ {\n        result\
    \ = String(x.bytes[i]) + result\n    }\n    return String(x.bytes[shift:]) + result",
  "    var s = String(x)\n    if shift > s.count {\n        s = s.reversed()\n   \
    \ }\n    return String(s.characters.prefix(shift))", "    let digits = x.toInt()\n\
    \    if shift > digits {\n        return String(digits).reversed()\n    }\n  \
    \  var result = \"\"\n    for _ in 0..<shift {\n        result = String(digits)\
    \ + result\n    }\n    return result", "    if shift > x.truncatingRemainder(dividingBy:\
    \ 10).magnitude.magnitude {\n        return x.reversed()\n    }\n    var result\
    \ = \"\"\n    var carry = 0\n    for _ in 0..<shift {\n        carry = x.truncatingRemainder(dividingBy:\
    \ 10).magnitude.magnitude\n        result += \"0123456789\"[Int(carry)!]\n   \
    \     x /= 10\n    }\n    if carry > 0 {\n        result += \"0123456789\"[Int(carry)!]\n\
    \    }\n    return result", "    var s = \"\"\n    for i := 0; i < shift; i++\
    \ {\n        s = String(format: \"%0*d\", i, x) + s\n    }\n    return s", " \
    \   var s = \"\"\n    for i := 0; i < shift; i++ {\n        s = String(format:\
    \ \"%0*d\", i, x) + s\n    }\n    return s", "    if shift > x.bitLength {\n \
    \       return x.reversed()\n    }\n    var result = \"\"\n    for i := 0; i <\
    \ shift; i++ {\n        result = String(x.toInt()) + result\n        x = x >>\
    \ 1\n    }\n    return result", "    if shift > x.count {\n        return x.reversed()\n\
    \    }\n    var result = String()\n    var shiftDigits = x.digits[0..<shift]\n\
    \    for i in 0..<shift {\n        result = result + String(shiftDigits[i])\n\
    \    }\n    for i in 0..<x.count {\n        result = result + String(x.digits[i])\n\
    \    }\n    return result", "    var result = \"\"\n    for digit in x.toString()\
    \ {\n        result = digit.stringByPaddingToLength(shift, 0, digit.length, \"\
    0\")\n    }\n    return result", "    if shift > x.bitLength {\n        return\
    \ x.reverse()\n    }\n    var result = \"\"\n    var carry = 0\n    for i := 0;\
    \ i < x.bitLength; i++ {\n        var digit = x.uint(i)\n        var newDigit\
    \ = digit << shift\n        if carry > 0 {\n            newDigit |= carry\n  \
    \      }\n        carry = newDigit >> 8\n        newDigit &= 0xFF\n        result\
    \ += String(newDigit)\n    }\n    if carry > 0 {\n        result += \"1\"\n  \
    \  }\n    return result", "    if shift > x.bitLength {\n        return x.reversed()\n\
    \    }\n    var result = \"\"\n    for i := 0; i < shift; i++ {\n        result\
    \ += \"0\"\n    }\n    for i := x.bitLength - 1; i >= shift; i-- {\n        result\
    \ += \"1\"\n    }\n    return result", "    var result = \"\"\n    for i := 0;\
    \ i < shift; i++ {\n        result = String(format: \"%0*d\", i, x) + result\n\
    \    }\n    return result", "    if shift > x.count {\n        return x.reversed()\n\
    \    }\n    var result = \"\"\n    for i := 0; i < shift; i++ {\n        result\
    \ = String(x.digits[i]) + result\n    }\n    for i := 0; i < x.count; i++ {\n\
    \        result = String(x.digits[i]) + result\n    }\n    return result", " \
    \   var result = \"\"\n    for _ in 0..<shift {\n        result = String(format:\
    \ \"%0*d\", 0, x) + result\n        x = x >> 1\n    }\n    return result", " \
    \   var result = \"\"\n    for i := 0; i < shift; i++ {\n        result = String(format:\
    \ \"%0*d\", i, x) + result\n    }\n    return result", "    let digits = x.toInt()\n\
    \    var result = \"\"\n    for _ in 0..<shift {\n        result = String(digits)\
    \ + result\n    }\n    return result.reversed()", "    var s = \"\"\n    var i\
    \ = Int(x)\n    var shift = Int(shift)\n    for _ in 0..shift {\n        s +=\
    \ String(i)\n        i = i >> 1\n    }\n    return s", "    if shift > x.bitLength\
    \ {\n        return x.reverse()\n    }\n    var result = \"\"\n    var carry =\
    \ 0\n    for i := 0; i < shift; i++ {\n        carry += x.bitLength\n        x\
    \ >>= 1\n        if carry > 0 {\n            carry += x.bitLength\n          \
    \  x >>= 1\n        }\n        result += String(x)\n    }\n    if carry > 0 {\n\
    \        result += \"1\"\n    }\n    return result", "    if shift > x.bitLength\
    \ {\n        return x.reverse()\n    }\n    var result = \"\"\n    for digit in\
    \ x.bits.reverse() {\n        result += \"0\"\n    }\n    for _ in 0..<shift {\n\
    \        result += \"1\"\n    }\n    return result", "    var result = \"\"\n\
    \    for i := 0; i < shift; i++ {\n        result = String(format: \"%0*d\", i,\
    \ x) + result\n    }\n    return result", "    var s = String(x)\n    if shift\
    \ > s.count {\n        s = s[s.startIndex..<s.startIndex.advanced(by: -shift)].reversed()\n\
    \    }\n    return s", "    let digits = x.digits\n    if shift > digits.count\
    \ {\n        return digits.reversed()\n    }\n    var result = \"\"\n    for index\
    \ in 0..<shift {\n        result += digits[index]\n    }\n    for index in (shift..<digits.count)\
    \ {\n        result += digits[index]\n    }\n    return result", "    var result\
    \ = \"\"\n    var remainder = x % 10\n    for _ in 0..<shift {\n        result\
    \ += \"0\"\n    }\n    result += String(remainder)\n    if shift > result.characters.count\
    \ {\n        return String(result.reversed())\n    }\n    return String(result)",
  "    if shift > x.bitLength {\n        return x.reversed()\n    }\n    var result\
    \ = \"\"\n    var carry = 0\n    for digit in x.bits.reversed() {\n        var\
    \ digit = digit << shift\n        digit += carry\n        carry = digit >> 8\n\
    \        digit &= 0xff\n        result += String(digit)\n    }\n    if carry !=\
    \ 0 {\n        result += \"0\"\n    }\n    return result", "    var s = \"\"\n\
    \    for i := 0; i < shift; i++ {\n        s = String(x >> uint(shift-i))\n  \
    \  }\n    return s", "    var s = String(x)\n    for i := 0; i < shift; i++ {\n\
    \        s = String(s.characters[s.startIndex.advancedBy(i)])\n    }\n    return\
    \ s", "    var result = \"\"\n    for digit in x.toString() {\n        result\
    \ = String(digit) + result\n    }\n    if shift > result.characters.count {\n\
    \        return String(result.reversed())\n    }\n    return String(result[(result.characters.count\
    \ - shift)..<result.characters.count])", "    if shift > x.bitLength {\n     \
    \   return x.reverse()\n    }\n    var result = \"\"\n    for i := 0; i < shift;\
    \ i++ {\n        result = String(x.toInt()) + result\n        x = x >> 1\n   \
    \ }\n    return result", "    let digits = x.toInt()\n    var result = \"\"\n\
    \    for _ in 0..<shift {\n        result = String(digits) + result\n        digits\
    \ = digits >> 1\n    }\n    return result.reversed()", "    var s = String(x)\n\
    \    if shift > s.count {\n        return s.reversed()\n    }\n    var carry =\
    \ 1\n    for i := 0; i < shift; i++ {\n        carry += s[i]\n        s[i] = carry\
    \ % 10\n        carry /= 10\n    }\n    return s", "    var result = \"\"\n  \
    \  for i := 0; i < shift; i++ {\n        result = String(format: \"%0*d\", i,\
    \ x) + result\n    }\n    return result", "    var result = \"\"\n    var shiftDigits\
    \ = shift % 10\n    var shiftRemainder = shift / 10\n    var digits = x.digits\n\
    \    var digit = digits[0]\n    var carry = 0\n    for digit in digits {\n   \
    \     carry = digit.value + carry\n        digit.value = carry % 10\n        carry\
    \ = carry / 10\n    }\n    if carry != 0 {\n        digit = Digit(digit.value\
    \ + carry)\n    }\n    for _ in 0..shiftRemainder {\n        result = digit.value\
    \ + result\n        digit.value = digit.value * 10\n    }\n    if shiftDigits\
    \ != 0 {\n        result = digit.value + result\n    }\n    return result", '    return
    x.toRadixString(shift)', '    return x.toRadixString(shift).reverse()', '    return
    x.toRadixString(shift)', "    let digits = x.digits\n    if shift > digits.count\
    \ {\n        return digits.reversed()\n    }\n    let digit = digits[digits.count\
    \ - shift - 1]\n    return digits.prefix(digits.count - shift) + digit", "   \
    \ var s = String(x)\n    if shift > s.count {\n        return String(s.reversed())\n\
    \    }\n    for _ in 0..<shift {\n        s = String(s.reversed()) + s\n    }\n\
    \    return s", "    var s = String(x)\n    if shift > s.count {\n        return\
    \ String(s.reversed())\n    }\n    for _ in 0..<shift {\n        s = String(s.reversed())\
    \ + s\n    }\n    return s", "    var result = \"\"\n    var remainder = x % shift\n\
    \    for _ in 0..<shift {\n        result = String(remainder) + result\n     \
    \   remainder = remainder / 10\n    }\n    if remainder > 0 {\n        result\
    \ = String(remainder) + result\n    }\n    return result", "    var s = \"\"\n\
    \    var i = 0\n    for ; i < shift && i < len(x); i++ {\n        s = s + String(x[i])\n\
    \    }\n    for ; i >= shift; i-- {\n        s = String(x[i]) + s\n    }\n   \
    \ return s", "    var s = String(x)\n    for i := 0; i < shift; i++ {\n      \
    \  s = String(s.characters[s.startIndex.advancedBy(i)])\n    }\n    return s",
  "    var s = String(x)\n    if shift > s.count {\n        return String(s.reversed())\n\
    \    }\n    var carry = 0\n    for i := 0; i < shift; i++ {\n        var digit\
    \ = s.digits[i]\n        if digit > 0 {\n            digit -= carry\n        \
    \    carry = digit / 10\n            digit %= 10\n        } else {\n         \
    \   carry = 0\n        }\n        s.digits[i] = digit\n    }\n    if carry > 0\
    \ {\n        s.digits[shift] = carry\n    }\n    return s", "    var result =\
    \ \"\"\n    for i := 0; i < shift; i++ {\n        result = String(format: \"%0*d\"\
    , 0, x) + result\n        x = x >> 1\n    }\n    return result", "    var s =\
    \ String(x)\n    if shift > s.count {\n        s = s[s.count - shift - 1 : s.count]\n\
    \    } else {\n        s = s[0 : s.count - shift]\n    }\n    return s", "   \
    \ var s = \"\"\n    var i = shift\n    for digit := 0; digit < x; digit++ {\n\
    \        if i == 0 {\n            s = String(digit)\n        } else {\n      \
    \      s = String(digit) + s\n        }\n        i--\n    }\n    return s", " \
    \   let digits = x.digits\n    let shift = shift % len(digits)\n    let digits_reversed\
    \ = digits[0..<len(digits)-shift].reversed()\n    return String(digits_reversed)",
  "    if shift > x.bitLength {\n        return x.reverse()\n    }\n    var result\
    \ = \"\"\n    var carry = 0\n    for i := 0; i < x.bitLength; i++ {\n        var\
    \ digit = x.uint(i)\n        digit <<= shift\n        digit |= carry\n       \
    \ carry = digit >> 8\n        digit &= 0xff\n        result += String(digit)\n\
    \    }\n    if carry != 0 {\n        result += \"1\"\n    }\n    return result",
  "    var result = \"\"\n    var remainder = x % 10\n    for _ in 0..<shift {\n \
    \       result = String(remainder) + result\n        remainder = remainder / 10\n\
    \    }\n    if shift > result.characters.count {\n        return String(result.reversed())\
    \ + String(remainder)\n    }\n    return String(result) + String(remainder)",
  "    var result = \"\"\n    for i := 0; i < shift; i++ {\n        result = String(format:\
    \ \"%0*d\", i, x) + result\n    }\n    return result", "    var s = \"\"\n   \
    \ for i := 0; i < shift; i++ {\n        s = String(x >> uint(shift-i))\n    }\n\
    \    return s", "    var s = String(x)\n    if shift > s.count {\n        s =\
    \ s[s.count - shift - 1 ..< s.count].reversed()\n    }\n    return s", "    var\
    \ s = \"\"\n    for i := 0; i < shift; i++ {\n        s += String(x)\n       \
    \ x = x >> 1\n    }\n    return s", "    var result = \"\"\n    for _ in 0..<shift\
    \ {\n        result = String(x.toInt()) + result\n        x = x >> 1\n    }\n\
    \    return result", "    var result = \"\"\n    for digit in x.toString() {\n\
    \        result = digit.characters.reversed().append(result)\n    }\n    return\
    \ result.characters.reversed().prefix(shift).append(result)", "    var result\
    \ = \"\"\n    for digit in x.toString() {\n        result += String(digit)[(shift\
    \ - 1) % len(digit)]\n    }\n    return result", "    if shift > x.bitLength {\n\
    \        return x.reverse()\n    }\n    var result = \"\"\n    var carry = 0\n\
    \    for i := 0; i < shift; i++ {\n        carry += x.bitLength\n        x >>=\
    \ 1\n        if x == 0 {\n            result += \"0\"\n            carry = 0\n\
    \        } else {\n            result += \"1\"\n        }\n    }\n    if carry\
    \ > 0 {\n        result += \"1\"\n    }\n    return result", "    var result =\
    \ \"\"\n    for digit := 0; digit < shift; digit++ {\n        result = String(Int(x%10))\
    \ + result\n        x = x / 10\n    }\n    if shift > result.characters.count\
    \ {\n        for digit := 0; digit < result.characters.count; digit++ {\n    \
    \        result = String(Int(result%10)) + result\n        }\n    }\n    return\
    \ result", "    var s = \"\"\n    for i := 0; i < shift; i++ {\n        s = String(x\
    \ >> uint(shift-i))\n    }\n    return s", "    var result = \"\"\n    for i :=\
    \ 0; i < shift; i++ {\n        result = String(format: \"%0*d\", i, x) + result\n\
    \    }\n    return result", "    let digits = x.digits\n    let shift = shift\
    \ % len(digits)\n    let result = String()\n    for digit in digits {\n      \
    \  let digit = digit % 10\n        let digitShifted = digit + digits[shift]\n\
    \        result = result + String(digitShifted)\n        shift -= 1\n    }\n \
    \   return result", "    if shift > x.bitLength {\n        return x.reversed()\n\
    \    }\n    var result = \"\"\n    for _ in 0..<shift {\n        result = String(x.toInt())\
    \ + result\n        x = x >> 1\n    }\n    return result", "    let digits = x.toInt()\n\
    \    var result = \"\"\n    for _ in 0..<shift {\n        result = String(digits)\
    \ + result\n        digits = digits >> 1\n    }\n    return result.reversed()",
  "    var result = \"\"\n    for digit in x.toString() {\n        result = digit.stringByAppendingString(result)\n\
    \    }\n    if shift > result.characters.count {\n        return result.reversed()\n\
    \    }\n    return result.stringByAppendingString(String(repeating: \"\", count:\
    \ shift - result.characters.count))", "    if shift > x.bitLength {\n        return\
    \ x.reversed()\n    }\n    var result = \"\"\n    var carry = 0\n    for i :=\
    \ 0; i < x.bitLength; i++ {\n        var digit = x.uint(i)\n        digit <<=\
    \ shift\n        digit |= carry\n        carry = digit >> 8\n        digit &=\
    \ 0xFF\n        result += String(digit)\n    }\n    if carry != 0 {\n        result\
    \ += \"0\"\n    }\n    return result", "    let digits = x.toRadixString(10)\n\
    \    let shift = shift % len(digits)\n    let result = digits[0..<shift] + digits[shift..<len(digits)].reversed()\n\
    \    return String(result)", "    let digits = x.toString()\n    let digitCount\
    \ = digits.count\n    let digitShiftCount = digitCount - shift\n    let digitShiftDigits\
    \ = digits.substringToIndex(digitShiftCount)\n    let digitShiftDigitCount = digitShiftDigits.count\n\
    \    let digitShiftDigits = digitShiftDigits.reversed()\n    let digitShiftDigitCount\
    \ = digitShiftDigitCount + digitShiftCount\n    let digitShiftDigits = digitShiftDigits.reversed()\n\
    \    let digitShiftDigitCount = digitShiftDigitCount + digitShiftCount\n    let\
    \ digitShiftDigits = digitShiftDigits.reversed()\n    let digitShiftDigitCount\
    \ = digitShiftDigitCount + digitShiftCount\n    let digitShiftDigits = digitShiftDigits.reversed()\n\
    \    let digitShiftDigitCount = digitShiftDigitCount + digitShiftCount\n    let\
    \ digitShiftDigits = digitShiftDigits.reversed()\n    let digitShiftDigitCount\
    \ = digitShiftDigitCount + digitShiftCount\n    let digitShiftDigits = digitShiftDigits.reversed()\n\
    \    let digitShiftDigitCount = digitShiftDigitCount + digitShiftCount\n    let\
    \ digitShiftDigits = digitShiftDigits.reversed()\n    let digitShiftDigitCount\
    \ = digitShiftDigitCount + digitShiftCount\n    let digitShiftDigits = digitShiftDigits.reversed()\n\
    \    let digitShiftDigitCount = digitShiftDigitCount + digitShiftCount\n    let\
    \ digitShiftDigits = digitShiftDigits.reversed()\n    let digitShiftDigitCount\
    \ = digitShiftDigitCount + digitShiftCount\n    let digitShiftDigits = digitShiftDigits.reversed()\n\
    \    let digitShiftDigitCount = digitShiftDigitCount + digitShiftCount\n    let\
    \ digitShiftDigits = digitShiftDigits.reversed()\n    let digitShiftDigitCount\
    \ = digitShiftDigitCount + digitShiftCount\n    let digitShiftDigits = digitShiftDigits.reversed()\n\
    \    let digitShiftDigitCount = digitShiftDigitCount + digitShiftCount\n    let\
    \ digitShiftDigits = digitShiftDigits.reversed()\n    let digitShiftDigitCount\
    \ = digitShiftDigitCount + digitShiftCount\n    let digitShiftDigits = digitShiftDigits.reversed()\n\
    \    let digitShiftDigitCount = digitShiftDigitCount + digitShiftCount\n    let\
    \ digitShiftDigits = digitShiftDigits.reversed()\n    let digitShiftDigitCount\
    \ = digitShiftDigitCount + digitShiftCount\n    let digitShiftDigits = digitShiftDigits.reversed()\n\
    \    let digitShiftDigitCount = digitShiftDigitCount + digitShiftCount\n    let\
    \ digitShiftDigits = digitShiftDigits.reversed()\n    let digitShiftDigitCount\
    \ = digitShiftDigitCount + digitShiftCount\n    let digitShiftDigits = digitShiftDigits.reversed()\n\
    \    let digitShiftDigitCount = digitShiftDigitCount + digit", "    let digits\
    \ = x.toInt()\n    var result = \"\"\n    var carry = 0\n    for digit in digits\
    \ {\n        let digit = digit + carry\n        carry = digit / 10\n        digit\
    \ = digit % 10\n        result = String(digit) + result\n    }\n    if carry >\
    \ 0 {\n        result = String(carry) + result\n    }\n    if shift > result.characters.count\
    \ {\n        result = reverseString(result)\n    }\n    return result", "    let\
    \ digits = x.toInt()\n    let shift = shift % digits\n    let digits_shifted =\
    \ digits - shift\n    let digits_shifted_reversed = digits_shifted + digits\n\
    \    return String(digits_shifted_reversed).reversed()", "    var s = String(x)\n\
    \    if shift > s.count {\n        shift = s.count - 1\n    }\n    for _ in 0..<shift\
    \ {\n        s = s.reversed()\n    }\n    return s", "    var result = \"\"\n\
    \    for digit := 0; digit < shift; digit++ {\n        result = String(digit)\
    \ + result\n    }\n    for digit := 0; digit < x; digit++ {\n        result =\
    \ String(digit) + result\n    }\n    return result", "    if shift > x.bitLength\
    \ {\n        return x.reversed()\n    }\n    var result = \"\"\n    for _ in 0..<shift\
    \ {\n        result = x.reversed()\n        x = x >> 1\n    }\n    return result",
  "    var result = \"\"\n    for digit in x.toString() {\n        result = digit.stringByPaddingToLength(shift,\
    \ 0, digit.unicodeScalars.count, \"0\")\n    }\n    return result", "    var s\
    \ = \"\"\n    var i = shift % len(x)\n    for _ in 0..<shift {\n        s += x[i]\n\
    \        i += 1\n    }\n    return s[0..<len(s)-shift]", "    if shift > x.count\
    \ {\n        return x.reversed()\n    }\n    var result = String()\n    for _\
    \ in 0..<shift {\n        result = x.reversed()\n    }\n    return result + x",
  "    var s = String(x)\n    if shift > s.count {\n        return String(s.reversed())\n\
    \    }\n    var carry = 0\n    for i := 0; i < s.count; i++ {\n        var digit\
    \ = s.digits[i]\n        var newDigit = digit + carry + Int(pow(10, shift)) *\
    \ Int(pow(10, s.count - i - 1))\n        carry = newDigit / Int(pow(10, shift))\n\
    \        newDigit = newDigit % Int(pow(10, shift))\n        s.digits[i] = newDigit\n\
    \    }\n    if carry > 0 {\n        s.digits.append(carry)\n    }\n    return\
    \ s"]
stop_tokens:
- "\n}"
