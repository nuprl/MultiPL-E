language: swift
name: HumanEval_94_skjkasdkd
results:
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp5rwd2y14/tmp5rwd2y14.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95b56d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95b53cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95b53cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95b53cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rwd2y14                        0x000055d7e0167520 <unavailable> + 5408

    5    libc.so.6                          0x00002b95b58c2460 __libc_start_main +
    245

    6    tmp5rwd2y14                        0x000055d7e01670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n        if isPrime(x) {\n       \
    \     sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8,\
    \ 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmpme3ojx18.swift:27:12: error: cannot find 'isPrime' in scope\n \
    \       if isPrime(x) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ i in lst {\n        if max < i {\n            max = i\n        }\n    }\n  \
    \  for i in lst {\n        if max % i == 0 {\n            sum += i\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder
    operation

    Current stack trace:

    0    libswiftCore.so                    0x00002b53e85f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53e82ec561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b53e82ec286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b53e82ec13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b53e82ebbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmphc1o308i                        0x000055684e654070 <unavailable> + 8304

    6    tmphc1o308i                        0x000055684e653532 <unavailable> + 5426

    7    libc.so.6                          0x00002b53e87e1460 __libc_start_main +
    245

    8    tmphc1o308i                        0x000055684e653169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n        if x == max {\n         \
    \   sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1,\
    \ 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst:\
    \ [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst:\
    \ [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\n\
    assert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127,\
    \ 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpxesni88a/tmpxesni88a.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba88ad91c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba88aa88b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba88aa88988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba88aa877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxesni88a                        0x0000558e03504520 <unavailable> + 5408

    5    libc.so.6                          0x00002ba88af7d460 __libc_start_main +
    245

    6    tmpxesni88a                        0x0000558e035040d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n    }\n    for x in lst {\n     \
    \   if x == 0 {\n            continue\n        }\n        if x > max {\n     \
    \       max = x\n        }\n    }\n    for x in lst {\n        if x == 0 {\n \
    \           continue\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == 0 {\n            continue\n\
    \        }\n        if x > max {\n            max = x\n        }\n    }\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n    }\n    for x in lst {\n     \
    \   if x == 0 {\n            continue\n        }\n        if x > max {\n     \
    \       max = x\n        }\n    }\n    for x in lst {\n        if x == 0 {\n \
    \           continue\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == 0 {\n            continue\n\
    \        }\n        if x > max {\n            max = x\n        }\n    }\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n    }\n    for x in lst {\n     \
    \   if x == 0 {\n            continue\n        }\n        if x > max {\n     \
    \       max = x\n        }\n    }\n    for x in lst {\n        if x == 0 {\n \
    \           continue\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == 0 {\n            continue\n\
    \        }\n        if x > max {\n            max = x\n        }\n    }\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n    }\n    for x in lst {\n     \
    \   if x == 0 {\n            continue\n        }\n        if x > max {\n     \
    \       max = x\n        }\n    }\n    for x in lst {\n        if x == 0 {\n \
    \           continue\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == 0 {\n            continue\n\
    \        }\n        if x > max {\n            max = x\n        }\n    }\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n    }\n    for x in lst {\n     \
    \   if x == 0 {\n            continue\n        }\n        if x > max {\n     \
    \       max = x\n        }\n    }\n    for x in lst {\n        if x == 0 {\n \
    \           continue\n        }\n        if x > max {\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8,\
    \ 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmpm_gdp_kh.swift:192:46: error: expected '}' at end of brace statement\n\
    assert(skjkasdkd(lst: [127, 97, 8192]) == 10)\n                              \
    \               ^\n/tmp/tmpm_gdp_kh.swift:164:18: note: to match this opening\
    \ '{'\n    for x in lst {\n                 ^\n/tmp/tmpm_gdp_kh.swift:192:46:\
    \ error: expected '}' at end of brace statement\nassert(skjkasdkd(lst: [127, 97,\
    \ 8192]) == 10)\n                                             ^\n/tmp/tmpm_gdp_kh.swift:17:35:\
    \ note: to match this opening '{'\nfunc skjkasdkd(lst: [Int]) -> Int {\n     \
    \                             ^\n/tmp/tmpm_gdp_kh.swift:172:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpm_gdp_kh.swift:19:9:\
    \ warning: initialization of variable 'sum' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var sum = 0\n    ~~~~^~~\n    _\n"
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var maxIndex = 0\n \
    \   for index in 0..<lst.count {\n        if lst[index] > max {\n            max\
    \ = lst[index]\n            maxIndex = index\n        }\n    }\n    var sum =\
    \ 0\n    for index in 0..<lst.count {\n        if index == maxIndex {\n      \
    \      continue\n        }\n        if lst[index] > max {\n            continue\n\
    \        }\n        if lst[index] % maxIndex == 0 {\n            sum += lst[index]\
    \ % maxIndex\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1,\
    \ 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst:\
    \ [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst:\
    \ [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\n\
    assert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127,\
    \ 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp20eofeky/tmp20eofeky.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b71cd9b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b71cd6aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b71cd6ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71cd6ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp20eofeky                        0x000055ffa9f365f0 <unavailable> + 5616

    5    libc.so.6                          0x00002b71cdba3460 __libc_start_main +
    245

    6    tmp20eofeky                        0x000055ffa9f361a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ num in lst {\n        if num > max {\n            max = num\n        }\n   \
    \ }\n    for num in lst {\n        if num == max {\n            sum += num\n \
    \       }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpnvgq9rhz/tmpnvgq9rhz.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad772f38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad772c2fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad772c2f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad772c2e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnvgq9rhz                        0x000056208c37e520 <unavailable> + 5408

    5    libc.so.6                          0x00002ad773124460 __libc_start_main +
    245

    6    tmpnvgq9rhz                        0x000056208c37e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n        if x > 1 {\n            sum\
    \ += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3,\
    \ 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1,\
    \ 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32,\
    \ 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst:\
    \ [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst:\
    \ [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\n\
    assert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127,\
    \ 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpx2qtr0p5/tmpx2qtr0p5.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c122c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c11fbcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c11fbc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c11fbb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx2qtr0p5                        0x0000560fdebd3520 <unavailable> + 5408

    5    libc.so.6                          0x00002b8c124b1460 __libc_start_main +
    245

    6    tmpx2qtr0p5                        0x0000560fdebd30d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var largestPrime = 0\n    var sum = 0\n\
    \    for number in lst {\n        if number > largestPrime {\n            largestPrime\
    \ = number\n        }\n    }\n    for number in lst {\n        if number % largestPrime\
    \ == 0 {\n            sum += number\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5,\
    \ 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpybik1ulw/tmpybik1ulw.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12838ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b12835c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b12835c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b12835c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpybik1ulw                        0x0000555e9493a5b0 <unavailable> + 5552

    5    libc.so.6                          0x00002b1283ab8460 __libc_start_main +
    245

    6    tmpybik1ulw                        0x0000555e9493a169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ i in lst {\n        if i == 0 {\n            continue\n        }\n        if\
    \ max < i {\n            max = i\n        }\n    }\n    for i in lst {\n     \
    \   if i == 0 {\n            continue\n        }\n        if max % i == 0 {\n\
    \            sum += Int(String(i))\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5,\
    \ 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmpms_qbq34.swift:33:20: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n            sum += Int(String(i))\n \
    \                  ^\n/tmp/tmpms_qbq34.swift:33:20: note: coalesce using '??'\
    \ to provide a default when the optional value contains 'nil'\n            sum\
    \ += Int(String(i))\n                   ^\n                                  ??\
    \ <#default value#>\n/tmp/tmpms_qbq34.swift:33:20: note: force-unwrap using '!'\
    \ to abort execution if the optional value contains 'nil'\n            sum +=\
    \ Int(String(i))\n                   ^\n                                 !\n"
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp5rwd2y14/tmp5rwd2y14.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95b56d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95b53cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95b53cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95b53cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rwd2y14                        0x000055d7e0167520 <unavailable> + 5408

    5    libc.so.6                          0x00002b95b58c2460 __libc_start_main +
    245

    6    tmp5rwd2y14                        0x000055d7e01670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n        if x == max {\n         \
    \   sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1,\
    \ 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst:\
    \ [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst:\
    \ [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\n\
    assert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127,\
    \ 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpxesni88a/tmpxesni88a.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba88ad91c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba88aa88b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba88aa88988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba88aa877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxesni88a                        0x0000558e03504520 <unavailable> + 5408

    5    libc.so.6                          0x00002ba88af7d460 __libc_start_main +
    245

    6    tmpxesni88a                        0x0000558e035040d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n        if x > 1 {\n            if\
    \ x % 2 == 0 {\n                if x % 3 == 0 {\n                    if x % 5\
    \ == 0 {\n                        if x % 7 == 0 {\n                          \
    \  sum += x\n                        }\n                    }\n              \
    \  }\n            }\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8,\
    \ 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmph1jqekw4/tmph1jqekw4.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af5027eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af5024e5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af5024e5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af5024e47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph1jqekw4                        0x000055ccd41565b0 <unavailable> + 5552

    5    libc.so.6                          0x00002af5029da460 __libc_start_main +
    245

    6    tmph1jqekw4                        0x000055ccd4156169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp5rwd2y14/tmp5rwd2y14.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95b56d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95b53cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95b53cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95b53cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rwd2y14                        0x000055d7e0167520 <unavailable> + 5408

    5    libc.so.6                          0x00002b95b58c2460 __libc_start_main +
    245

    6    tmp5rwd2y14                        0x000055d7e01670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp5rwd2y14/tmp5rwd2y14.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95b56d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95b53cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95b53cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95b53cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rwd2y14                        0x000055d7e0167520 <unavailable> + 5408

    5    libc.so.6                          0x00002b95b58c2460 __libc_start_main +
    245

    6    tmp5rwd2y14                        0x000055d7e01670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp5rwd2y14/tmp5rwd2y14.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95b56d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95b53cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95b53cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95b53cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rwd2y14                        0x000055d7e0167520 <unavailable> + 5408

    5    libc.so.6                          0x00002b95b58c2460 __libc_start_main +
    245

    6    tmp5rwd2y14                        0x000055d7e01670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp5rwd2y14/tmp5rwd2y14.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95b56d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95b53cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95b53cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95b53cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rwd2y14                        0x000055d7e0167520 <unavailable> + 5408

    5    libc.so.6                          0x00002b95b58c2460 __libc_start_main +
    245

    6    tmp5rwd2y14                        0x000055d7e01670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n        if x > 1 {\n            sum\
    \ += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3,\
    \ 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1,\
    \ 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32,\
    \ 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst:\
    \ [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst:\
    \ [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\n\
    assert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127,\
    \ 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpx2qtr0p5/tmpx2qtr0p5.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c122c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c11fbcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c11fbc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c11fbb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx2qtr0p5                        0x0000560fdebd3520 <unavailable> + 5408

    5    libc.so.6                          0x00002b8c124b1460 __libc_start_main +
    245

    6    tmpx2qtr0p5                        0x0000560fdebd30d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n        if\
    \ x == max {\n            sum += x\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5,\
    \ 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp4fejh97h/tmp4fejh97h.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af488c55c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af48894cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af48894c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af48894b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4fejh97h                        0x0000563f738a4520 <unavailable> + 5408

    5    libc.so.6                          0x00002af488e41460 __libc_start_main +
    245

    6    tmp4fejh97h                        0x0000563f738a40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n        if x == max {\n         \
    \   sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1,\
    \ 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst:\
    \ [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst:\
    \ [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\n\
    assert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127,\
    \ 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpxesni88a/tmpxesni88a.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba88ad91c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba88aa88b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba88aa88988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba88aa877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxesni88a                        0x0000558e03504520 <unavailable> + 5408

    5    libc.so.6                          0x00002ba88af7d460 __libc_start_main +
    245

    6    tmpxesni88a                        0x0000558e035040d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ max < x {\n            max = x\n        }\n        sum += Int(truncatingIfNeeded(x\
    \ / max))\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmpx_2qxu4f.swift:27:20: error: cannot find 'truncatingIfNeeded' in\
    \ scope\n        sum += Int(truncatingIfNeeded(x / max))\n                   ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ num in lst {\n        if num > max {\n            max = num\n        }\n   \
    \     if num > 0 {\n            sum += Int(num % 10)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst: [0, 3, 2,\
    \ 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst:\
    \ [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpk5z9k5px/tmpk5z9k5px.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ffece7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ffe9deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ffe9de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ffe9dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk5z9k5px                        0x000055b3c4d726f0 <unavailable> + 5872

    5    libc.so.6                          0x00002b6ffeed3460 __libc_start_main +
    245

    6    tmpk5z9k5px                        0x000055b3c4d722a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x > max {\n            continue\n        }\n   \
    \     if x == max {\n            sum += x\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5,\
    \ 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpue9sat_n/tmpue9sat_n.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b63bfd63c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b63bfa5ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b63bfa5a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b63bfa597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpue9sat_n                        0x0000557e0be30520 <unavailable> + 5408

    5    libc.so.6                          0x00002b63bff4f460 __libc_start_main +
    245

    6    tmpue9sat_n                        0x0000557e0be300d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n    }\n    for x in lst {\n     \
    \   if x == 0 {\n            continue\n        }\n        if x > max {\n     \
    \       max = x\n        }\n    }\n    for x in lst {\n        if x == 0 {\n \
    \           continue\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == 0 {\n            continue\n\
    \        }\n        if x > max {\n            max = x\n        }\n    }\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n    }\n    for x in lst {\n     \
    \   if x == 0 {\n            continue\n        }\n        if x > max {\n     \
    \       max = x\n        }\n    }\n    for x in lst {\n        if x == 0 {\n \
    \           continue\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == 0 {\n            continue\n\
    \        }\n        if x > max {\n            max = x\n        }\n    }\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n    }\n    for x in lst {\n     \
    \   if x == 0 {\n            continue\n        }\n        if x > max {\n     \
    \       max = x\n        }\n    }\n    for x in lst {\n        if x == 0 {\n \
    \           continue\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == 0 {\n            continue\n\
    \        }\n        if x > max {\n            max = x\n        }\n    }\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n    }\n    for x in lst {\n     \
    \   if x == 0 {\n            continue\n        }\n        if x > max {\n     \
    \       max = x\n        }\n    }\n    for x in lst {\n        if x == 0 {\n \
    \           continue\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == 0 {\n            continue\n\
    \        }\n        if x > max {\n            max = x\n        }\n    }\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n    }\n    for x in lst {\n     \
    \   if x == 0 {\n            continue\n        }\n        if x > max {\n     \
    \       max = x\n        }\n    }\n    for x in lst {\n        if x == 0 {\n \
    \           continue\n        }\n        if x > max {\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8,\
    \ 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmpm_gdp_kh.swift:192:46: error: expected '}' at end of brace statement\n\
    assert(skjkasdkd(lst: [127, 97, 8192]) == 10)\n                              \
    \               ^\n/tmp/tmpm_gdp_kh.swift:164:18: note: to match this opening\
    \ '{'\n    for x in lst {\n                 ^\n/tmp/tmpm_gdp_kh.swift:192:46:\
    \ error: expected '}' at end of brace statement\nassert(skjkasdkd(lst: [127, 97,\
    \ 8192]) == 10)\n                                             ^\n/tmp/tmpm_gdp_kh.swift:17:35:\
    \ note: to match this opening '{'\nfunc skjkasdkd(lst: [Int]) -> Int {\n     \
    \                             ^\n/tmp/tmpm_gdp_kh.swift:172:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpm_gdp_kh.swift:19:9:\
    \ warning: initialization of variable 'sum' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var sum = 0\n    ~~~~^~~\n    _\n"
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp5rwd2y14/tmp5rwd2y14.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95b56d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95b53cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95b53cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95b53cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rwd2y14                        0x000055d7e0167520 <unavailable> + 5408

    5    libc.so.6                          0x00002b95b58c2460 __libc_start_main +
    245

    6    tmp5rwd2y14                        0x000055d7e01670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp5rwd2y14/tmp5rwd2y14.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95b56d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95b53cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95b53cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95b53cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rwd2y14                        0x000055d7e0167520 <unavailable> + 5408

    5    libc.so.6                          0x00002b95b58c2460 __libc_start_main +
    245

    6    tmp5rwd2y14                        0x000055d7e01670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var largestPrime = 0\n    var sumOfDigits\
    \ = 0\n    for number in lst {\n        if number > largestPrime {\n         \
    \   largestPrime = number\n        }\n    }\n    for number in lst {\n       \
    \ if number % largestPrime == 0 {\n            sumOfDigits += Int(number / largestPrime)\n\
    \        }\n    }\n    return sumOfDigits\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1,\
    \ 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst:\
    \ [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst:\
    \ [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\n\
    assert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127,\
    \ 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpbwxpw1qc/tmpbwxpw1qc.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8f6ff4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8f6cebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8f6ceb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8f6cea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbwxpw1qc                        0x00005643f647e6f0 <unavailable> + 5872

    5    libc.so.6                          0x00002ab8f71e0460 __libc_start_main +
    245

    6    tmpbwxpw1qc                        0x00005643f647e2a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n        if isPrime(x) {\n       \
    \     sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8,\
    \ 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmpme3ojx18.swift:27:12: error: cannot find 'isPrime' in scope\n \
    \       if isPrime(x) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n        if\
    \ x == max {\n            sum += x\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5,\
    \ 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp4fejh97h/tmp4fejh97h.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af488c55c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af48894cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af48894c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af48894b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4fejh97h                        0x0000563f738a4520 <unavailable> + 5408

    5    libc.so.6                          0x00002af488e41460 __libc_start_main +
    245

    6    tmp4fejh97h                        0x0000563f738a40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n    }\n    for x in lst {\n     \
    \   if x == 0 {\n            continue\n        }\n        if x > max {\n     \
    \       max = x\n        }\n    }\n    for x in lst {\n        if x == 0 {\n \
    \           continue\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == 0 {\n            continue\n\
    \        }\n        if x > max {\n            max = x\n        }\n    }\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n    }\n    for x in lst {\n     \
    \   if x == 0 {\n            continue\n        }\n        if x > max {\n     \
    \       max = x\n        }\n    }\n    for x in lst {\n        if x == 0 {\n \
    \           continue\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == 0 {\n            continue\n\
    \        }\n        if x > max {\n            max = x\n        }\n    }\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n    }\n    for x in lst {\n     \
    \   if x == 0 {\n            continue\n        }\n        if x > max {\n     \
    \       max = x\n        }\n    }\n    for x in lst {\n        if x == 0 {\n \
    \           continue\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == 0 {\n            continue\n\
    \        }\n        if x > max {\n            max = x\n        }\n    }\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n    }\n    for x in lst {\n     \
    \   if x == 0 {\n            continue\n        }\n        if x > max {\n     \
    \       max = x\n        }\n    }\n    for x in lst {\n        if x == 0 {\n \
    \           continue\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == 0 {\n            continue\n\
    \        }\n        if x > max {\n            max = x\n        }\n    }\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n    }\n    for x in lst {\n     \
    \   if x == 0 {\n            continue\n        }\n        if x > max {\n     \
    \       max = x\n        }\n    }\n    for x in lst {\n        if x == 0 {\n \
    \           continue\n        }\n        if x > max {\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8,\
    \ 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmpm_gdp_kh.swift:192:46: error: expected '}' at end of brace statement\n\
    assert(skjkasdkd(lst: [127, 97, 8192]) == 10)\n                              \
    \               ^\n/tmp/tmpm_gdp_kh.swift:164:18: note: to match this opening\
    \ '{'\n    for x in lst {\n                 ^\n/tmp/tmpm_gdp_kh.swift:192:46:\
    \ error: expected '}' at end of brace statement\nassert(skjkasdkd(lst: [127, 97,\
    \ 8192]) == 10)\n                                             ^\n/tmp/tmpm_gdp_kh.swift:17:35:\
    \ note: to match this opening '{'\nfunc skjkasdkd(lst: [Int]) -> Int {\n     \
    \                             ^\n/tmp/tmpm_gdp_kh.swift:172:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpm_gdp_kh.swift:19:9:\
    \ warning: initialization of variable 'sum' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var sum = 0\n    ~~~~^~~\n    _\n"
  stdout: ''
  timestamp: 1660014366
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var maxPrime = 0\n \
    \   for num in lst {\n        if num > max {\n            max = num\n        \
    \    maxPrime = num\n        } else if num == max {\n            if isPrime(num)\
    \ {\n                maxPrime += num\n            }\n        }\n    }\n    return\
    \ maxPrime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst: [0, 3,\
    \ 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\n\
    assert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5,\
    \ 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23,\
    \ 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32,\
    \ 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21])\
    \ == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmpqjzdks7j.swift:25:16: error: cannot find 'isPrime' in scope\n \
    \           if isPrime(num) {\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n        if x == max {\n         \
    \   sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1,\
    \ 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst:\
    \ [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst:\
    \ [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\n\
    assert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127,\
    \ 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpxesni88a/tmpxesni88a.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba88ad91c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba88aa88b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba88aa88988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba88aa877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxesni88a                        0x0000558e03504520 <unavailable> + 5408

    5    libc.so.6                          0x00002ba88af7d460 __libc_start_main +
    245

    6    tmpxesni88a                        0x0000558e035040d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var maxIndex = 0\n \
    \   for index in 0..<lst.count {\n        if lst[index] > max {\n            max\
    \ = lst[index]\n            maxIndex = index\n        }\n    }\n    var sum =\
    \ 0\n    for index in 0..<lst.count {\n        if index == maxIndex {\n      \
    \      continue\n        }\n        if lst[index] > max {\n            continue\n\
    \        }\n        if lst[index] % maxIndex == 0 {\n            sum += lst[index]\
    \ / maxIndex\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1,\
    \ 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst:\
    \ [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst:\
    \ [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\n\
    assert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127,\
    \ 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp7y9nuhjf/tmp7y9nuhjf.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf4718dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf46e84b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf46e84988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf46e837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7y9nuhjf                        0x000055ba375365f0 <unavailable> + 5616

    5    libc.so.6                          0x00002adf47379460 __libc_start_main +
    245

    6    tmp7y9nuhjf                        0x000055ba375361a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp5rwd2y14/tmp5rwd2y14.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95b56d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95b53cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95b53cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95b53cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rwd2y14                        0x000055d7e0167520 <unavailable> + 5408

    5    libc.so.6                          0x00002b95b58c2460 __libc_start_main +
    245

    6    tmp5rwd2y14                        0x000055d7e01670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp5rwd2y14/tmp5rwd2y14.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95b56d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95b53cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95b53cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95b53cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rwd2y14                        0x000055d7e0167520 <unavailable> + 5408

    5    libc.so.6                          0x00002b95b58c2460 __libc_start_main +
    245

    6    tmp5rwd2y14                        0x000055d7e01670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ i in lst {\n        if i % 2 == 0 {\n            sum += i\n        }\n     \
    \   if i > max {\n            max = i\n        }\n    }\n    return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5,\
    \ 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpd9bv8hm8/tmpd9bv8hm8.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d16fbbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d16cb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d16cb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d16cb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd9bv8hm8                        0x0000555a9e3b85b0 <unavailable> + 5552

    5    libc.so.6                          0x00002b1d171a7460 __libc_start_main +
    245

    6    tmpd9bv8hm8                        0x0000555a9e3b8169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ i in lst {\n        if i > max {\n            max = i\n        }\n    }\n  \
    \  for i in lst {\n        if i > max {\n            continue\n        }\n   \
    \     if i % max == 0 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5,\
    \ 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpepnxfc0n/tmpepnxfc0n.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b662b9bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b662b6b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b662b6b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b662b6b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpepnxfc0n                        0x0000555c697765b0 <unavailable> + 5552

    5    libc.so.6                          0x00002b662bbaa460 __libc_start_main +
    245

    6    tmpepnxfc0n                        0x0000555c69776169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n        if isPrime(x) {\n       \
    \     sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8,\
    \ 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmpme3ojx18.swift:27:12: error: cannot find 'isPrime' in scope\n \
    \       if isPrime(x) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n        if x > 1 {\n            if\
    \ x % 2 == 0 {\n                if x % 3 == 0 {\n                    if x % 5\
    \ == 0 {\n                        if x % 7 == 0 {\n                          \
    \  sum += x\n                        }\n                    }\n              \
    \  }\n            }\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8,\
    \ 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmph1jqekw4/tmph1jqekw4.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af5027eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af5024e5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af5024e5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af5024e47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph1jqekw4                        0x000055ccd41565b0 <unavailable> + 5552

    5    libc.so.6                          0x00002af5029da460 __libc_start_main +
    245

    6    tmph1jqekw4                        0x000055ccd4156169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ num in lst {\n        if num > max {\n            max = num\n        }\n   \
    \     if num == max {\n            sum += num\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5,\
    \ 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpkqcest2_/tmpkqcest2_.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47b161ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b47b1311b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b47b1311988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b47b13107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkqcest2_                        0x0000562b26b87520 <unavailable> + 5408

    5    libc.so.6                          0x00002b47b1806460 __libc_start_main +
    245

    6    tmpkqcest2_                        0x0000562b26b870d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp5rwd2y14/tmp5rwd2y14.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95b56d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95b53cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95b53cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95b53cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rwd2y14                        0x000055d7e0167520 <unavailable> + 5408

    5    libc.so.6                          0x00002b95b58c2460 __libc_start_main +
    245

    6    tmp5rwd2y14                        0x000055d7e01670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ i in lst {\n        if i % 2 == 0 {\n            sum += i\n        }\n     \
    \   if max < i {\n            max = i\n        }\n    }\n    return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5,\
    \ 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp7y42nc6c/tmp7y42nc6c.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3b5f520c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3b5f217b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3b5f217988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3b5f2167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7y42nc6c                        0x0000563a50d065b0 <unavailable> + 5552

    5    libc.so.6                          0x00002b3b5f70c460 __libc_start_main +
    245

    6    tmp7y42nc6c                        0x0000563a50d06169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n        if x % 2 == 0 {\n       \
    \     if x % 3 == 0 {\n                if x % 5 == 0 {\n                    if\
    \ x % 7 == 0 {\n                        if x % 11 == 0 {\n                   \
    \         if x % 13 == 0 {\n                                if x % 17 == 0 {\n\
    \                                    if x % 19 == 0 {\n                      \
    \                  sum += x\n                                    }\n         \
    \                       }\n                            }\n                   \
    \     }\n                    }\n                }\n            }\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp6s0y63rm/tmp6s0y63rm.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7beaef9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7beabf0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7beabf0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7beabef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6s0y63rm                        0x00005556ce9ed5b0 <unavailable> + 5552

    5    libc.so.6                          0x00002b7beb0e5460 __libc_start_main +
    245

    6    tmp6s0y63rm                        0x00005556ce9ed169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var largestPrime = 0\n    var sum = 0\n\
    \    for num in lst {\n        if num > largestPrime {\n            largestPrime\
    \ = num\n        }\n    }\n    for num in lst {\n        if num > largestPrime\
    \ {\n            sum += Int(String(num))\n        }\n    }\n    return sum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5,\
    \ 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmp3agw46vv.swift:27:20: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n            sum += Int(String(num))\n\
    \                   ^\n/tmp/tmp3agw46vv.swift:27:20: note: coalesce using '??'\
    \ to provide a default when the optional value contains 'nil'\n            sum\
    \ += Int(String(num))\n                   ^\n                                \
    \    ?? <#default value#>\n/tmp/tmp3agw46vv.swift:27:20: note: force-unwrap using\
    \ '!' to abort execution if the optional value contains 'nil'\n            sum\
    \ += Int(String(num))\n                   ^\n                                \
    \   !\n"
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp5rwd2y14/tmp5rwd2y14.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95b56d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95b53cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95b53cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95b53cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rwd2y14                        0x000055d7e0167520 <unavailable> + 5408

    5    libc.so.6                          0x00002b95b58c2460 __libc_start_main +
    245

    6    tmp5rwd2y14                        0x000055d7e01670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp5rwd2y14/tmp5rwd2y14.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95b56d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95b53cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95b53cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95b53cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rwd2y14                        0x000055d7e0167520 <unavailable> + 5408

    5    libc.so.6                          0x00002b95b58c2460 __libc_start_main +
    245

    6    tmp5rwd2y14                        0x000055d7e01670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp5rwd2y14/tmp5rwd2y14.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95b56d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95b53cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95b53cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95b53cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rwd2y14                        0x000055d7e0167520 <unavailable> + 5408

    5    libc.so.6                          0x00002b95b58c2460 __libc_start_main +
    245

    6    tmp5rwd2y14                        0x000055d7e01670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x > max {\n            continue\n        }\n   \
    \     if x == max {\n            sum += x\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5,\
    \ 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpue9sat_n/tmpue9sat_n.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b63bfd63c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b63bfa5ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b63bfa5a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b63bfa597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpue9sat_n                        0x0000557e0be30520 <unavailable> + 5408

    5    libc.so.6                          0x00002b63bff4f460 __libc_start_main +
    245

    6    tmpue9sat_n                        0x0000557e0be300d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var maxPrime = 0\n \
    \   for num in lst {\n        if num > max {\n            max = num\n        \
    \    maxPrime = num\n        }\n    }\n    var sum = 0\n    for num in lst {\n\
    \        if num == maxPrime {\n            sum += num\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst: [0, 3, 2,\
    \ 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst:\
    \ [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpnlkcquuc/tmpnlkcquuc.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc9e483c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc9e17ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc9e17a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc9e1797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnlkcquuc                        0x000055d18fcc3520 <unavailable> + 5408

    5    libc.so.6                          0x00002afc9e66f460 __libc_start_main +
    245

    6    tmpnlkcquuc                        0x000055d18fcc30d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n        if x == max {\n         \
    \   sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1,\
    \ 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst:\
    \ [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst:\
    \ [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\n\
    assert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127,\
    \ 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpxesni88a/tmpxesni88a.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba88ad91c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba88aa88b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba88aa88988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba88aa877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxesni88a                        0x0000558e03504520 <unavailable> + 5408

    5    libc.so.6                          0x00002ba88af7d460 __libc_start_main +
    245

    6    tmpxesni88a                        0x0000558e035040d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ num in lst {\n        if num > max {\n            max = num\n        }\n   \
    \ }\n    for num in lst {\n        if num == max {\n            sum += num\n \
    \       }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpnvgq9rhz/tmpnvgq9rhz.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad772f38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad772c2fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad772c2f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad772c2e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnvgq9rhz                        0x000056208c37e520 <unavailable> + 5408

    5    libc.so.6                          0x00002ad773124460 __libc_start_main +
    245

    6    tmpnvgq9rhz                        0x000056208c37e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n        if x > 1 {\n            sum\
    \ += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3,\
    \ 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1,\
    \ 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32,\
    \ 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst:\
    \ [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst:\
    \ [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\n\
    assert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127,\
    \ 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpx2qtr0p5/tmpx2qtr0p5.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c122c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c11fbcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c11fbc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c11fbb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx2qtr0p5                        0x0000560fdebd3520 <unavailable> + 5408

    5    libc.so.6                          0x00002b8c124b1460 __libc_start_main +
    245

    6    tmpx2qtr0p5                        0x0000560fdebd30d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp5rwd2y14/tmp5rwd2y14.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95b56d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95b53cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95b53cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95b53cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rwd2y14                        0x000055d7e0167520 <unavailable> + 5408

    5    libc.so.6                          0x00002b95b58c2460 __libc_start_main +
    245

    6    tmp5rwd2y14                        0x000055d7e01670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp5rwd2y14/tmp5rwd2y14.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95b56d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95b53cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95b53cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95b53cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rwd2y14                        0x000055d7e0167520 <unavailable> + 5408

    5    libc.so.6                          0x00002b95b58c2460 __libc_start_main +
    245

    6    tmp5rwd2y14                        0x000055d7e01670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ i in lst {\n        if i == 0 {\n            continue\n        }\n        if\
    \ max < i {\n            max = i\n        }\n        if max % i == 0 {\n     \
    \       sum += Int(String(i))\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8,\
    \ 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmp62hw1ehc.swift:28:20: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n            sum += Int(String(i))\n \
    \                  ^\n/tmp/tmp62hw1ehc.swift:28:20: note: coalesce using '??'\
    \ to provide a default when the optional value contains 'nil'\n            sum\
    \ += Int(String(i))\n                   ^\n                                  ??\
    \ <#default value#>\n/tmp/tmp62hw1ehc.swift:28:20: note: force-unwrap using '!'\
    \ to abort execution if the optional value contains 'nil'\n            sum +=\
    \ Int(String(i))\n                   ^\n                                 !\n"
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp5rwd2y14/tmp5rwd2y14.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95b56d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95b53cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95b53cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95b53cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rwd2y14                        0x000055d7e0167520 <unavailable> + 5408

    5    libc.so.6                          0x00002b95b58c2460 __libc_start_main +
    245

    6    tmp5rwd2y14                        0x000055d7e01670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp5rwd2y14/tmp5rwd2y14.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95b56d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95b53cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95b53cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95b53cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rwd2y14                        0x000055d7e0167520 <unavailable> + 5408

    5    libc.so.6                          0x00002b95b58c2460 __libc_start_main +
    245

    6    tmp5rwd2y14                        0x000055d7e01670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n        if x > 1 {\n            sum\
    \ += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3,\
    \ 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1,\
    \ 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32,\
    \ 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst:\
    \ [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst:\
    \ [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\n\
    assert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127,\
    \ 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpx2qtr0p5/tmpx2qtr0p5.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c122c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c11fbcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c11fbc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c11fbb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx2qtr0p5                        0x0000560fdebd3520 <unavailable> + 5408

    5    libc.so.6                          0x00002b8c124b1460 __libc_start_main +
    245

    6    tmpx2qtr0p5                        0x0000560fdebd30d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp5rwd2y14/tmp5rwd2y14.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95b56d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95b53cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95b53cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95b53cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rwd2y14                        0x000055d7e0167520 <unavailable> + 5408

    5    libc.so.6                          0x00002b95b58c2460 __libc_start_main +
    245

    6    tmp5rwd2y14                        0x000055d7e01670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var maxIndex = 0\n \
    \   for index in 0..<lst.count {\n        let value = lst[index]\n        if isPrime(value)\
    \ {\n            if value > max {\n                max = value\n             \
    \   maxIndex = index\n            }\n        }\n    }\n    return maxIndex ==\
    \ 0 ? 0 : max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst: [0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\n\
    assert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5,\
    \ 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23,\
    \ 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32,\
    \ 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21])\
    \ == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmps81oyk5g.swift:22:12: error: cannot find 'isPrime' in scope\n \
    \       if isPrime(value) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp5rwd2y14/tmp5rwd2y14.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95b56d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95b53cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95b53cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95b53cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rwd2y14                        0x000055d7e0167520 <unavailable> + 5408

    5    libc.so.6                          0x00002b95b58c2460 __libc_start_main +
    245

    6    tmp5rwd2y14                        0x000055d7e01670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n    }\n    for x in lst {\n     \
    \   if x == 0 {\n            continue\n        }\n        if x > max {\n     \
    \       max = x\n        }\n    }\n    for x in lst {\n        if x == 0 {\n \
    \           continue\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == 0 {\n            continue\n\
    \        }\n        if x > max {\n            max = x\n        }\n    }\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n    }\n    for x in lst {\n     \
    \   if x == 0 {\n            continue\n        }\n        if x > max {\n     \
    \       max = x\n        }\n    }\n    for x in lst {\n        if x == 0 {\n \
    \           continue\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == 0 {\n            continue\n\
    \        }\n        if x > max {\n            max = x\n        }\n    }\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n    }\n    for x in lst {\n     \
    \   if x == 0 {\n            continue\n        }\n        if x > max {\n     \
    \       max = x\n        }\n    }\n    for x in lst {\n        if x == 0 {\n \
    \           continue\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == 0 {\n            continue\n\
    \        }\n        if x > max {\n            max = x\n        }\n    }\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n    }\n    for x in lst {\n     \
    \   if x == 0 {\n            continue\n        }\n        if x > max {\n     \
    \       max = x\n        }\n    }\n    for x in lst {\n        if x == 0 {\n \
    \           continue\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == 0 {\n            continue\n\
    \        }\n        if x > max {\n            max = x\n        }\n    }\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n    }\n    for x in lst {\n     \
    \   if x == 0 {\n            continue\n        }\n        if x > max {\n     \
    \       max = x\n        }\n    }\n    for x in lst {\n        if x == 0 {\n \
    \           continue\n        }\n        if x > max {\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8,\
    \ 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmpm_gdp_kh.swift:192:46: error: expected '}' at end of brace statement\n\
    assert(skjkasdkd(lst: [127, 97, 8192]) == 10)\n                              \
    \               ^\n/tmp/tmpm_gdp_kh.swift:164:18: note: to match this opening\
    \ '{'\n    for x in lst {\n                 ^\n/tmp/tmpm_gdp_kh.swift:192:46:\
    \ error: expected '}' at end of brace statement\nassert(skjkasdkd(lst: [127, 97,\
    \ 8192]) == 10)\n                                             ^\n/tmp/tmpm_gdp_kh.swift:17:35:\
    \ note: to match this opening '{'\nfunc skjkasdkd(lst: [Int]) -> Int {\n     \
    \                             ^\n/tmp/tmpm_gdp_kh.swift:172:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpm_gdp_kh.swift:19:9:\
    \ warning: initialization of variable 'sum' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var sum = 0\n    ~~~~^~~\n    _\n"
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp5rwd2y14/tmp5rwd2y14.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95b56d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95b53cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95b53cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95b53cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rwd2y14                        0x000055d7e0167520 <unavailable> + 5408

    5    libc.so.6                          0x00002b95b58c2460 __libc_start_main +
    245

    6    tmp5rwd2y14                        0x000055d7e01670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp5rwd2y14/tmp5rwd2y14.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95b56d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95b53cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95b53cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95b53cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rwd2y14                        0x000055d7e0167520 <unavailable> + 5408

    5    libc.so.6                          0x00002b95b58c2460 __libc_start_main +
    245

    6    tmp5rwd2y14                        0x000055d7e01670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ i in lst {\n        if i > max {\n            max = i\n        }\n        if\
    \ i == max {\n            sum += Int(i)\n        }\n    }\n    return sum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5,\
    \ 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpzxfwet81/tmpzxfwet81.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b078d8ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b078d5e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b078d5e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b078d5e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzxfwet81                        0x0000555bf16ce660 <unavailable> + 5728

    5    libc.so.6                          0x00002b078dad8460 __libc_start_main +
    245

    6    tmpzxfwet81                        0x0000555bf16ce219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp5rwd2y14/tmp5rwd2y14.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95b56d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95b53cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95b53cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95b53cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rwd2y14                        0x000055d7e0167520 <unavailable> + 5408

    5    libc.so.6                          0x00002b95b58c2460 __libc_start_main +
    245

    6    tmp5rwd2y14                        0x000055d7e01670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var largestPrime = 0\n    var sum = 0\n\
    \    for number in lst {\n        if number > largestPrime {\n            largestPrime\
    \ = number\n        }\n    }\n    for number in lst {\n        if number % largestPrime\
    \ == 0 {\n            sum += number\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5,\
    \ 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpybik1ulw/tmpybik1ulw.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12838ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b12835c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b12835c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b12835c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpybik1ulw                        0x0000555e9493a5b0 <unavailable> + 5552

    5    libc.so.6                          0x00002b1283ab8460 __libc_start_main +
    245

    6    tmpybik1ulw                        0x0000555e9493a169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp5rwd2y14/tmp5rwd2y14.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95b56d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95b53cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95b53cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95b53cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rwd2y14                        0x000055d7e0167520 <unavailable> + 5408

    5    libc.so.6                          0x00002b95b58c2460 __libc_start_main +
    245

    6    tmp5rwd2y14                        0x000055d7e01670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n        if x % 2 == 0 {\n       \
    \     sum += x\n        }\n        if x % 3 == 0 {\n            sum += x\n   \
    \     }\n        if x % 5 == 0 {\n            sum += x\n        }\n        if\
    \ x % 7 == 0 {\n            sum += x\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5,\
    \ 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpbcu5rwr9/tmpbcu5rwr9.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4c4dd01c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4c4d9f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4c4d9f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4c4d9f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbcu5rwr9                        0x0000556b018755b0 <unavailable> + 5552

    5    libc.so.6                          0x00002b4c4deed460 __libc_start_main +
    245

    6    tmpbcu5rwr9                        0x0000556b01875169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n        if isPrime(x) {\n       \
    \     sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8,\
    \ 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmpme3ojx18.swift:27:12: error: cannot find 'isPrime' in scope\n \
    \       if isPrime(x) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014366
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var largestPrime: Int = 0\n    var largestPrimeIndex:\
    \ Int = 0\n    var largestPrimeSum: Int = 0\n    var largestPrimeSumIndex: Int\
    \ = 0\n    var largestPrimeSumDigit: Int = 0\n    var largestPrimeSumDigitIndex:\
    \ Int = 0\n    var largestPrimeSumDigitSum: Int = 0\n    var largestPrimeSumDigitSumIndex:\
    \ Int = 0\n    var primeSumDigitSum: Int = 0\n    var primeSumDigitSumIndex: Int\
    \ = 0\n    var primeSumDigitSumDigit: Int = 0\n    var primeSumDigitSumDigitIndex:\
    \ Int = 0\n    var primeSumDigitSumDigitSum: Int = 0\n    var primeSumDigitSumDigitSumIndex:\
    \ Int = 0\n    var primeSumDigitSumDigitSumDigit: Int = 0\n    var primeSumDigitSumDigitSumDigitIndex:\
    \ Int = 0\n    var primeSumDigitSumDigitSumDigitSum: Int = 0\n    var primeSumDigitSumDigitSumDigitSumIndex:\
    \ Int = 0\n    var primeSumDigitSumDigitSumDigitSumDigit: Int = 0\n    var primeSumDigitSumDigitSumDigitSumDigitIndex:\
    \ Int = 0\n    var primeSumDigitSumDigitSumDigitSumDigitSum: Int = 0\n    var\
    \ primeSumDigitSumDigitSumDigitSumDigitSumIndex: Int = 0\n    var primeSumDigitSumDigitSumDigitSumDigitSumDigit:\
    \ Int = 0\n    var primeSumDigitSumDigitSumDigitSumDigitSumDigit: Int = 0\n  \
    \  var primeSumDigitSumDigitSumDigitSumDigitSumDigit: Int = 0\n    var primeSumDigitSumDigitSumDigitSumDigitSumDigit:\
    \ Int = 0\n    var primeSumDigitSumDigitSumDigitSumDigitSumDigit: Int = 0\n  \
    \  var primeSumDigitSumDigitSumDigitSumDigitSumDigit: Int = 0\n    var primeSumDigitSumDigitSumDigitSumDigitSumDigit:\
    \ Int = 0\n    var primeSumDigitSumDigitSumDigitSumDigitSumDigit: Int = 0\n  \
    \  var primeSumDigitSumDigitSumDigitSumDigitSumDigit: Int = 0\n    var primeSumDigitSumDigitSumDigitSumDigitSumDigit:\
    \ Int = 0\n    var primeSumDigitSumDigitSumDigitSumDigitSumDigit: Int = 0\n  \
    \  var primeSumDigitSumDigitSumDigitSumDigitSumDigit: Int = 0\n    var primeSumDigitSumDigitSumDigitSumDigitSumDigit:\
    \ Int = 0\n    var primeSumDigitSumDigitSumDigitSumDigitSumDigit: Int = 0\n  \
    \  var primeSumDigitSumDigitSumDigitSumDigitSumDigit: Int = 0\n    var primeSumDigitSumDigitSumDigitSum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5,\
    \ 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmp3913y9u8.swift:41:9: error: invalid redeclaration of 'primeSumDigitSumDigitSumDigitSumDigitSumDigit'\n\
    \    var primeSumDigitSumDigitSumDigitSumDigitSumDigit: Int = 0\n        ^\n/tmp/tmp3913y9u8.swift:40:9:\
    \ note: 'primeSumDigitSumDigitSumDigitSumDigitSumDigit' previously declared here\n\
    \    var primeSumDigitSumDigitSumDigitSumDigitSumDigit: Int = 0\n        ^\n/tmp/tmp3913y9u8.swift:42:9:\
    \ error: invalid redeclaration of 'primeSumDigitSumDigitSumDigitSumDigitSumDigit'\n\
    \    var primeSumDigitSumDigitSumDigitSumDigitSumDigit: Int = 0\n        ^\n/tmp/tmp3913y9u8.swift:40:9:\
    \ note: 'primeSumDigitSumDigitSumDigitSumDigitSumDigit' previously declared here\n\
    \    var primeSumDigitSumDigitSumDigitSumDigitSumDigit: Int = 0\n        ^\n/tmp/tmp3913y9u8.swift:43:9:\
    \ error: invalid redeclaration of 'primeSumDigitSumDigitSumDigitSumDigitSumDigit'\n\
    \    var primeSumDigitSumDigitSumDigitSumDigitSumDigit: Int = 0\n        ^\n/tmp/tmp3913y9u8.swift:40:9:\
    \ note: 'primeSumDigitSumDigitSumDigitSumDigitSumDigit' previously declared here\n\
    \    var primeSumDigitSumDigitSumDigitSumDigitSumDigit: Int = 0\n        ^\n/tmp/tmp3913y9u8.swift:44:9:\
    \ error: invalid redeclaration of 'primeSumDigitSumDigitSumDigitSumDigitSumDigit'\n\
    \    var primeSumDigitSumDigitSumDigitSumDigitSumDigit: Int = 0\n        ^\n/tmp/tmp3913y9u8.swift:40:9:\
    \ note: 'primeSumDigitSumDigitSumDigitSumDigitSumDigit' previously declared here\n\
    \    var primeSumDigitSumDigitSumDigitSumDigitSumDigit: Int = 0\n        ^\n/tmp/tmp3913y9u8.swift:45:9:\
    \ error: invalid redeclaration of 'primeSumDigitSumDigitSumDigitSumDigitSumDigit'\n\
    \    var primeSumDigitSumDigitSumDigitSumDigitSumDigit: Int = 0\n        ^\n/tmp/tmp3913y9u8.swift:40:9:\
    \ note: 'primeSumDigitSumDigitSumDigitSumDigitSumDigit' previously declared here\n\
    \    var primeSumDigitSumDigitSumDigitSumDigitSumDigit: Int = 0\n        ^\n/tmp/tmp3913y9u8.swift:46:9:\
    \ error: invalid redeclaration of 'primeSumDigitSumDigitSumDigitSumDigitSumDigit'\n\
    \    var primeSumDigitSumDigitSumDigitSumDigitSumDigit: Int = 0\n        ^\n/tmp/tmp3913y9u8.swift:40:9:\
    \ note: 'primeSumDigitSu"
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp5rwd2y14/tmp5rwd2y14.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95b56d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95b53cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95b53cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95b53cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rwd2y14                        0x000055d7e0167520 <unavailable> + 5408

    5    libc.so.6                          0x00002b95b58c2460 __libc_start_main +
    245

    6    tmp5rwd2y14                        0x000055d7e01670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n        if x > 0 {\n            sum\
    \ += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3,\
    \ 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1,\
    \ 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32,\
    \ 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst:\
    \ [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst:\
    \ [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\n\
    assert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127,\
    \ 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpq8fc3qmx/tmpq8fc3qmx.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8f477adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8f474a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8f474a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8f474a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq8fc3qmx                        0x000055e2fb535520 <unavailable> + 5408

    5    libc.so.6                          0x00002b8f47999460 __libc_start_main +
    245

    6    tmpq8fc3qmx                        0x000055e2fb5350d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var maxNum = 0\n   \
    \ var maxNumDigit = 0\n    var maxNumDigitDigit = 0\n    var maxNumDigitDigitDigit\
    \ = 0\n    var maxNumDigitDigitDigitDigit = 0\n    var maxNumDigitDigitDigitDigitDigit\
    \ = 0\n    var maxNumDigitDigitDigitDigitDigitDigit = 0\n    var maxNumDigitDigitDigitDigitDigitDigit\
    \ = 0\n    var maxNumDigitDigitDigitDigitDigitDigit = 0\n    var maxNumDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    var maxNumDigitDigitDigitDigitDigitDigitDigitDigit = 0\n    var maxNumDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    var maxNumDigitDigitDigitDigitDigitDigitDigitDigitDigit = 0\n    var\
    \ maxNumDigitDigitDigitDigitDigitDigitDigitDigitDigit = 0\n    var maxNumDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    var maxNumDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit = 0\n\
    \    var maxNumDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit = 0\n    var\
    \ maxNumDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit = 0\n    var maxNumDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    var maxNumDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit =\
    \ 0\n    var maxNumDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit = 0\n\
    \    var maxNumDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit = 0\n \
    \   var maxNumDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit = 0\n  \
    \  var maxNumDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit = 0\n   \
    \ var maxNumDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit = 0\n    var\
    \ maxNumDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit = 0\n    var maxNumDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    var maxNumDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    var maxNumDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit =\
    \ 0\n    var maxNumDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    var maxNumDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    var maxNumDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    var maxNumDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    var maxNumDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    var maxNumDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    var maxNumDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    var maxNumDigitDigitDigit\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3,\
    \ 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1,\
    \ 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32,\
    \ 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst:\
    \ [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst:\
    \ [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\n\
    assert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127,\
    \ 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmppr5zmx8_.swift:26:9: error: invalid redeclaration of 'maxNumDigitDigitDigitDigitDigitDigit'\n\
    \    var maxNumDigitDigitDigitDigitDigitDigit = 0\n        ^\n/tmp/tmppr5zmx8_.swift:25:9:\
    \ note: 'maxNumDigitDigitDigitDigitDigitDigit' previously declared here\n    var\
    \ maxNumDigitDigitDigitDigitDigitDigit = 0\n        ^\n/tmp/tmppr5zmx8_.swift:27:9:\
    \ error: invalid redeclaration of 'maxNumDigitDigitDigitDigitDigitDigit'\n   \
    \ var maxNumDigitDigitDigitDigitDigitDigit = 0\n        ^\n/tmp/tmppr5zmx8_.swift:25:9:\
    \ note: 'maxNumDigitDigitDigitDigitDigitDigit' previously declared here\n    var\
    \ maxNumDigitDigitDigitDigitDigitDigit = 0\n        ^\n/tmp/tmppr5zmx8_.swift:31:9:\
    \ error: invalid redeclaration of 'maxNumDigitDigitDigitDigitDigitDigitDigitDigitDigit'\n\
    \    var maxNumDigitDigitDigitDigitDigitDigitDigitDigitDigit = 0\n        ^\n\
    /tmp/tmppr5zmx8_.swift:30:9: note: 'maxNumDigitDigitDigitDigitDigitDigitDigitDigitDigit'\
    \ previously declared here\n    var maxNumDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n        ^\n/tmp/tmppr5zmx8_.swift:32:9: error: invalid redeclaration of\
    \ 'maxNumDigitDigitDigitDigitDigitDigitDigitDigitDigit'\n    var maxNumDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n        ^\n/tmp/tmppr5zmx8_.swift:30:9: note: 'maxNumDigitDigitDigitDigitDigitDigitDigitDigitDigit'\
    \ previously declared here\n    var maxNumDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n        ^\n/tmp/tmppr5zmx8_.swift:34:9: error: invalid redeclaration of\
    \ 'maxNumDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit'\n    var maxNumDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n        ^\n/tmp/tmppr5zmx8_.swift:33:9: note: 'maxNumDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit'\
    \ previously declared here\n    var maxNumDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n        ^\n/tmp/tmppr5zmx8_.swift:35:9: error: invalid redeclaration of\
    \ 'maxNumDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit'\n    var maxNumDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n        ^\n/tmp/tmppr5zmx8_.swift:33:9: note: 'maxNumDigitDigitDigitDigitDi"
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp5rwd2y14/tmp5rwd2y14.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95b56d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95b53cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95b53cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95b53cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rwd2y14                        0x000055d7e0167520 <unavailable> + 5408

    5    libc.so.6                          0x00002b95b58c2460 __libc_start_main +
    245

    6    tmp5rwd2y14                        0x000055d7e01670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n        if x == max {\n         \
    \   sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1,\
    \ 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst:\
    \ [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst:\
    \ [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\n\
    assert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127,\
    \ 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpxesni88a/tmpxesni88a.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba88ad91c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba88aa88b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba88aa88988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba88aa877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxesni88a                        0x0000558e03504520 <unavailable> + 5408

    5    libc.so.6                          0x00002ba88af7d460 __libc_start_main +
    245

    6    tmpxesni88a                        0x0000558e035040d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp5rwd2y14/tmp5rwd2y14.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95b56d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95b53cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95b53cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95b53cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rwd2y14                        0x000055d7e0167520 <unavailable> + 5408

    5    libc.so.6                          0x00002b95b58c2460 __libc_start_main +
    245

    6    tmp5rwd2y14                        0x000055d7e01670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n        if x % 2 == 0 {\n       \
    \     sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8,\
    \ 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp2bol5o75/tmp2bol5o75.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6f36c93c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6f3698ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6f3698a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6f369897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2bol5o75                        0x000055a1e3c5b5b0 <unavailable> + 5552

    5    libc.so.6                          0x00002b6f36e7f460 __libc_start_main +
    245

    6    tmp2bol5o75                        0x000055a1e3c5b169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp5rwd2y14/tmp5rwd2y14.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95b56d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95b53cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95b53cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95b53cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rwd2y14                        0x000055d7e0167520 <unavailable> + 5408

    5    libc.so.6                          0x00002b95b58c2460 __libc_start_main +
    245

    6    tmp5rwd2y14                        0x000055d7e01670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ num in lst {\n        if num > max {\n            max = num\n        }\n   \
    \ }\n    for num in lst {\n        if num > max {\n            sum += num % max\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp9369p22z/tmp9369p22z.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3942cf1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b39429e8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b39429e8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b39429e77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9369p22z                        0x00005600104ad5b0 <unavailable> + 5552

    5    libc.so.6                          0x00002b3942edd460 __libc_start_main +
    245

    6    tmp9369p22z                        0x00005600104ad169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n        if isPrime(x) {\n       \
    \     sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8,\
    \ 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmpme3ojx18.swift:27:12: error: cannot find 'isPrime' in scope\n \
    \       if isPrime(x) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014366
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ i in lst {\n        if max < i {\n            max = i\n        }\n    }\n  \
    \  for i in lst {\n        if max % i == 0 {\n            sum += Int(String(i))\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmp4itf99wi.swift:27:20: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n            sum += Int(String(i))\n \
    \                  ^\n/tmp/tmp4itf99wi.swift:27:20: note: coalesce using '??'\
    \ to provide a default when the optional value contains 'nil'\n            sum\
    \ += Int(String(i))\n                   ^\n                                  ??\
    \ <#default value#>\n/tmp/tmp4itf99wi.swift:27:20: note: force-unwrap using '!'\
    \ to abort execution if the optional value contains 'nil'\n            sum +=\
    \ Int(String(i))\n                   ^\n                                 !\n"
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n        if x > 1 {\n            sum\
    \ += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3,\
    \ 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1,\
    \ 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32,\
    \ 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst:\
    \ [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst:\
    \ [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\n\
    assert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127,\
    \ 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpx2qtr0p5/tmpx2qtr0p5.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c122c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c11fbcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c11fbc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c11fbb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx2qtr0p5                        0x0000560fdebd3520 <unavailable> + 5408

    5    libc.so.6                          0x00002b8c124b1460 __libc_start_main +
    245

    6    tmpx2qtr0p5                        0x0000560fdebd30d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n        if isPrime(x) {\n       \
    \     sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8,\
    \ 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmpme3ojx18.swift:27:12: error: cannot find 'isPrime' in scope\n \
    \       if isPrime(x) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014366
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n        if x % 2 == 0 {\n       \
    \     sum += x / 2\n        }\n        if x % 3 == 0 {\n            sum += x /\
    \ 3\n        }\n        if x % 5 == 0 {\n            sum += x / 5\n        }\n\
    \        if x % 7 == 0 {\n            sum += x / 7\n        }\n        if x %\
    \ 11 == 0 {\n            sum += x / 11\n        }\n        if x % 13 == 0 {\n\
    \            sum += x / 13\n        }\n        if x % 17 == 0 {\n            sum\
    \ += x / 17\n        }\n        if x % 19 == 0 {\n            sum += x / 19\n\
    \        }\n        if x % 23 == 0 {\n            sum += x / 23\n        }\n \
    \       if x % 29 == 0 {\n            sum += x / 29\n        }\n        if x %\
    \ 31 == 0 {\n            sum += x / 31\n        }\n        if x % 37 == 0 {\n\
    \            sum += x / 37\n        }\n        if x % 41 == 0 {\n            sum\
    \ += x / 41\n        }\n        if x % 43 == 0 {\n            sum += x / 43\n\
    \        }\n        if x % 47 == 0 {\n            sum += x / 47\n        }\n \
    \       if x % 53 == 0 {\n            sum += x / 53\n        }\n        if x %\
    \ 59 == 0 {\n            sum += x / 59\n        }\n        if x % 61 == 0 {\n\
    \            sum += x / 61\n        }\n        if x % 67 == 0 {\n            sum\
    \ += x / 67\n        }\n        if x % 71 == 0 {\n            sum += x / 71\n\
    \        }\n        if x % 73 == 0 {\n            sum += x / 73\n        }\n \
    \       if x % 79 == 0 {\n            sum += x / 79\n        }\n        if x %\
    \ 83 == 0 {\n            sum += x / 83\n        }\n        if x % 89 == 0 {\n\
    \            sum += x / 89\n        }\n        if x % 97 == 0 {\n            sum\
    \ += x / 97\n        }\n        if x % 101 == 0 {\n            sum += x / 101\n\
    \        }\n        if x % 103 == 0 {\n            sum += x / 103\n        }\n\
    \        if x % 107 == 0 {\n            sum += x / 107\n        }\n        if\
    \ x % 111 == 0 {\n            sum += x / 111\n        }\n        if x % 113 ==\
    \ 0 {\n            sum += x / 113\n        }\n        if x % 117 == 0 {\n    \
    \        sum += x / 117\n        }\n        if x % 121 == 0 {\n            sum\
    \ += x / 121\n        }\n        if x % 123 == 0 {\n            sum += x / 123\n\
    \        }\n        if x % 127 == 0 {\n            sum += x / 127\n        }\n\
    \        if x % \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst: [0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\n\
    assert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5,\
    \ 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23,\
    \ 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32,\
    \ 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21])\
    \ == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmpmhvmb_yc.swift:130:1: error: expected expression after operator\n\
    }\n^\n/tmp/tmpmhvmb_yc.swift:153:46: error: expected '}' at end of brace statement\n\
    assert(skjkasdkd(lst: [127, 97, 8192]) == 10)\n                              \
    \               ^\n/tmp/tmpmhvmb_yc.swift:17:35: note: to match this opening '{'\n\
    func skjkasdkd(lst: [Int]) -> Int {\n                                  ^\n/tmp/tmpmhvmb_yc.swift:133:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014366
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n        if isPrime(x) {\n       \
    \     sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8,\
    \ 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmpme3ojx18.swift:27:12: error: cannot find 'isPrime' in scope\n \
    \       if isPrime(x) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014366
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n        if x % 2 == 0 {\n       \
    \     sum += x / 2\n        }\n        for y in 2..<x {\n            if x % y\
    \ == 0 {\n                break\n            }\n        }\n        if y == x {\n\
    \            sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8,\
    \ 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmpfyqx4v6u.swift:35:12: error: cannot find 'y' in scope\n       \
    \ if y == x {\n           ^\n"
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp5rwd2y14/tmp5rwd2y14.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95b56d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95b53cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95b53cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95b53cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rwd2y14                        0x000055d7e0167520 <unavailable> + 5408

    5    libc.so.6                          0x00002b95b58c2460 __libc_start_main +
    245

    6    tmp5rwd2y14                        0x000055d7e01670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ num in lst {\n        if num > max {\n            max = num\n        }\n   \
    \ }\n    for num in lst {\n        if num == max {\n            sum += num\n \
    \       }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpnvgq9rhz/tmpnvgq9rhz.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad772f38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad772c2fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad772c2f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad772c2e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnvgq9rhz                        0x000056208c37e520 <unavailable> + 5408

    5    libc.so.6                          0x00002ad773124460 __libc_start_main +
    245

    6    tmpnvgq9rhz                        0x000056208c37e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp5rwd2y14/tmp5rwd2y14.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95b56d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95b53cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95b53cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95b53cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rwd2y14                        0x000055d7e0167520 <unavailable> + 5408

    5    libc.so.6                          0x00002b95b58c2460 __libc_start_main +
    245

    6    tmp5rwd2y14                        0x000055d7e01670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp5rwd2y14/tmp5rwd2y14.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95b56d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95b53cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95b53cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95b53cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rwd2y14                        0x000055d7e0167520 <unavailable> + 5408

    5    libc.so.6                          0x00002b95b58c2460 __libc_start_main +
    245

    6    tmp5rwd2y14                        0x000055d7e01670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n        if isPrime(x) {\n       \
    \     sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8,\
    \ 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmpme3ojx18.swift:27:12: error: cannot find 'isPrime' in scope\n \
    \       if isPrime(x) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp5rwd2y14/tmp5rwd2y14.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95b56d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95b53cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95b53cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95b53cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rwd2y14                        0x000055d7e0167520 <unavailable> + 5408

    5    libc.so.6                          0x00002b95b58c2460 __libc_start_main +
    245

    6    tmp5rwd2y14                        0x000055d7e01670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var largestPrime: Int = 0\n    var sumOfDigits\
    \ = 0\n    for num in lst {\n        if num > largestPrime {\n            largestPrime\
    \ = num\n        }\n    }\n    for num in lst {\n        if num > largestPrime\
    \ {\n            sumOfDigits += num % 10\n        }\n    }\n    return sumOfDigits\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5,\
    \ 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp2olzgwli/tmp2olzgwli.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad684d3ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad684a35b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad684a35988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad684a347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2olzgwli                        0x000055a2a11fa5b0 <unavailable> + 5552

    5    libc.so.6                          0x00002ad684f2a460 __libc_start_main +
    245

    6    tmp2olzgwli                        0x000055a2a11fa169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var maxIndex = 0\n \
    \   for index in 0..<lst.count {\n        if lst[index] > max {\n            max\
    \ = lst[index]\n            maxIndex = index\n        }\n    }\n    var sum =\
    \ 0\n    for index in 0..<lst.count {\n        if lst[index] == max {\n      \
    \      sum += Int(lst[index])\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8,\
    \ 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpgdsv85px/tmpgdsv85px.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae83c98ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae83c681b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae83c681988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae83c6807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgdsv85px                        0x000055dd98fd3720 <unavailable> + 5920

    5    libc.so.6                          0x00002ae83cb76460 __libc_start_main +
    245

    6    tmpgdsv85px                        0x000055dd98fd32d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ i in lst {\n        if i > max {\n            max = i\n        }\n    }\n  \
    \  for i in lst {\n        if i == max {\n            sum += i\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpp0uec8fr/tmpp0uec8fr.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5c33df5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5c33aecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5c33aec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5c33aeb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp0uec8fr                        0x000055d1493ee520 <unavailable> + 5408

    5    libc.so.6                          0x00002b5c33fe1460 __libc_start_main +
    245

    6    tmpp0uec8fr                        0x000055d1493ee0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp5rwd2y14/tmp5rwd2y14.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95b56d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95b53cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95b53cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95b53cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rwd2y14                        0x000055d7e0167520 <unavailable> + 5408

    5    libc.so.6                          0x00002b95b58c2460 __libc_start_main +
    245

    6    tmp5rwd2y14                        0x000055d7e01670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ i in lst {\n        if i % 2 == 0 {\n            if max < i {\n            \
    \    max = i\n            }\n        }\n        else {\n            if max > i\
    \ {\n                max = i\n            }\n        }\n    }\n    for i in lst\
    \ {\n        if i % 2 == 0 {\n            sum += Int(i)\n        }\n        else\
    \ {\n            sum += Int(i) * Int(Int(i) / Int(max))\n        }\n    }\n  \
    \  return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst: [0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\n\
    assert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5,\
    \ 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23,\
    \ 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32,\
    \ 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21])\
    \ == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpu9p24r98/tmpu9p24r98.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac4918e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac4915d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac4915d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac4915d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu9p24r98                        0x0000563ad1f746f0 <unavailable> + 5872

    5    libc.so.6                          0x00002ac491ace460 __libc_start_main +
    245

    6    tmpu9p24r98                        0x0000563ad1f742a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n        if\
    \ x % 2 == 0 {\n            sum += x\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5,\
    \ 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpc3baci5w/tmpc3baci5w.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2dc7a89c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2dc7780b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2dc7780988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2dc777f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc3baci5w                        0x000055e35a2845b0 <unavailable> + 5552

    5    libc.so.6                          0x00002b2dc7c75460 __libc_start_main +
    245

    6    tmpc3baci5w                        0x000055e35a284169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var largestPrime: Int = 0\n    var largestPrimeDigit:\
    \ Int = 0\n    var largestPrimeDigitSum: Int = 0\n    var largestPrimeSum: Int\
    \ = 0\n    for x in lst {\n        if x > largestPrime {\n            largestPrime\
    \ = x\n            largestPrimeDigit = x\n            largestPrimeDigitSum = Int(x)\n\
    \            largestPrimeSum = Int(x)\n        }\n        if x == largestPrime\
    \ {\n            largestPrimeDigitSum += Int(x)\n            largestPrimeSum +=\
    \ Int(x)\n        }\n    }\n    return largestPrimeSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8,\
    \ 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpd39wokm4/tmpd39wokm4.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5c4a928c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5c4a61fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5c4a61f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5c4a61e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd39wokm4                        0x000055c79df1a660 <unavailable> + 5728

    5    libc.so.6                          0x00002b5c4ab14460 __libc_start_main +
    245

    6    tmpd39wokm4                        0x000055c79df1a219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var maxIndex = 0\n \
    \   for index in 0..<lst.count {\n        if lst[index] > max {\n            max\
    \ = lst[index]\n            maxIndex = index\n        }\n    }\n    var sum =\
    \ 0\n    for index in 0..<lst.count {\n        if lst[index] == max {\n      \
    \      sum += Int(lst[index])\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8,\
    \ 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpgdsv85px/tmpgdsv85px.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae83c98ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae83c681b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae83c681988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae83c6807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgdsv85px                        0x000055dd98fd3720 <unavailable> + 5920

    5    libc.so.6                          0x00002ae83cb76460 __libc_start_main +
    245

    6    tmpgdsv85px                        0x000055dd98fd32d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var largestPrime = 0\n    var sum = 0\n\
    \    for number in lst {\n        if number == 0 {\n            continue\n   \
    \     }\n        if number > largestPrime {\n            largestPrime = number\n\
    \        }\n    }\n    for number in lst {\n        if number == 0 {\n       \
    \     continue\n        }\n        if number > largestPrime {\n            continue\n\
    \        }\n        for divisor in 2...largestPrime {\n            if number %\
    \ divisor == 0 {\n                break\n            }\n        }\n        if\
    \ divisor == largestPrime {\n            sum += Int(number/largestPrime)\n   \
    \     }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmpfk3el069.swift:40:12: error: cannot find 'divisor' in scope\n \
    \       if divisor == largestPrime {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp5rwd2y14/tmp5rwd2y14.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95b56d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95b53cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95b53cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95b53cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rwd2y14                        0x000055d7e0167520 <unavailable> + 5408

    5    libc.so.6                          0x00002b95b58c2460 __libc_start_main +
    245

    6    tmp5rwd2y14                        0x000055d7e01670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var maxIndex = 0\n \
    \   for index in 0..<lst.count {\n        let value = lst[index]\n        if value\
    \ > max {\n            max = value\n            maxIndex = index\n        }\n\
    \    }\n    var sum = 0\n    for index in 0..<lst.count {\n        let value =\
    \ lst[index]\n        if value == max {\n            sum += value\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpcbtgjs1d/tmpcbtgjs1d.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe137f0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe134e7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe134e7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe134e67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcbtgjs1d                        0x00005629712e85f0 <unavailable> + 5616

    5    libc.so.6                          0x00002afe139dc460 __libc_start_main +
    245

    6    tmpcbtgjs1d                        0x00005629712e81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n        if isPrime(x) {\n       \
    \     sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8,\
    \ 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmpme3ojx18.swift:27:12: error: cannot find 'isPrime' in scope\n \
    \       if isPrime(x) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp5rwd2y14/tmp5rwd2y14.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95b56d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95b53cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95b53cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95b53cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rwd2y14                        0x000055d7e0167520 <unavailable> + 5408

    5    libc.so.6                          0x00002b95b58c2460 __libc_start_main +
    245

    6    tmp5rwd2y14                        0x000055d7e01670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var maxNum = 0\n   \
    \ for num in lst {\n        if num > max {\n            max = num\n          \
    \  maxNum = num\n        }\n    }\n    var sum = 0\n    for num in lst {\n   \
    \     if num == maxNum {\n            sum += num\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst: [0, 3, 2,\
    \ 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst:\
    \ [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp86i1tjhv/tmp86i1tjhv.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3208742c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3208439b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3208439988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b32084387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp86i1tjhv                        0x0000556a1252e520 <unavailable> + 5408

    5    libc.so.6                          0x00002b320892e460 __libc_start_main +
    245

    6    tmp86i1tjhv                        0x0000556a1252e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var largestPrime: Int = 0\n    var largestPrimeDigit:\
    \ Int = 0\n    var largestPrimeDigitSum: Int = 0\n    for x in lst {\n       \
    \ if x == 0 {\n            continue\n        }\n        if largestPrime < x {\n\
    \            largestPrime = x\n            largestPrimeDigit = x\n           \
    \ largestPrimeDigitSum = x\n        }\n        if x % 2 == 0 {\n            largestPrimeDigitSum\
    \ += x\n        }\n        if x % 3 == 0 {\n            largestPrimeDigitSum +=\
    \ x\n        }\n        if x % 5 == 0 {\n            largestPrimeDigitSum += x\n\
    \        }\n        if x % 7 == 0 {\n            largestPrimeDigitSum += x\n \
    \       }\n        if x % 11 == 0 {\n            largestPrimeDigitSum += x\n \
    \       }\n        if x % 13 == 0 {\n            largestPrimeDigitSum += x\n \
    \       }\n        if x % 17 == 0 {\n            largestPrimeDigitSum += x\n \
    \       }\n        if x % 19 == 0 {\n            largestPrimeDigitSum += x\n \
    \       }\n        if x % 23 == 0 {\n            largestPrimeDigitSum += x\n \
    \       }\n        if x % 29 == 0 {\n            largestPrimeDigitSum += x\n \
    \       }\n        if x % 31 == 0 {\n            largestPrimeDigitSum += x\n \
    \       }\n        if x % 37 == 0 {\n            largestPrimeDigitSum += x\n \
    \       }\n        if x % 41 == 0 {\n            largestPrimeDigitSum += x\n \
    \       }\n        if x % 43 == 0 {\n            largestPrimeDigitSum += x\n \
    \       }\n        if x % 47 == 0 {\n            largestPrimeDigitSum += x\n \
    \       }\n        if x % 53 == 0 {\n            largestPrimeDigitSum += x\n \
    \       }\n        if x % 59 == 0 {\n            largestPrimeDigitSum += x\n \
    \       }\n        if x % 61 == 0 {\n            largestPrimeDigitSum += x\n \
    \       }\n        if x % 67 == 0 {\n            largestPrimeDigitSum += x\n \
    \       }\n        if x % 71 == 0 {\n            largestPrimeDigitSum += x\n \
    \       }\n        if x % 73 == 0 {\n            largestPrimeDigitSum += x\n \
    \       }\n        if x % 79 == 0 {\n            largestPrimeDigitSum \n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5,\
    \ 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmp7hwxyraj.swift:118:46: error: expected '}' at end of brace statement\n\
    assert(skjkasdkd(lst: [127, 97, 8192]) == 10)\n                              \
    \               ^\n/tmp/tmp7hwxyraj.swift:21:18: note: to match this opening '{'\n\
    \    for x in lst {\n                 ^\n/tmp/tmp7hwxyraj.swift:118:46: error:\
    \ expected '}' at end of brace statement\nassert(skjkasdkd(lst: [127, 97, 8192])\
    \ == 10)\n                                             ^\n/tmp/tmp7hwxyraj.swift:17:35:\
    \ note: to match this opening '{'\nfunc skjkasdkd(lst: [Int]) -> Int {\n     \
    \                             ^\n/tmp/tmp7hwxyraj.swift:94:13: warning: variable\
    \ is unused\n            largestPrimeDigitSum \n            ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp7hwxyraj.swift:98:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n/tmp/tmp7hwxyraj.swift:19:9: warning: variable 'largestPrimeDigit'\
    \ was written to, but never read\n    var largestPrimeDigit: Int = 0\n       \
    \ ^\n"
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp5rwd2y14/tmp5rwd2y14.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95b56d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95b53cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95b53cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95b53cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rwd2y14                        0x000055d7e0167520 <unavailable> + 5408

    5    libc.so.6                          0x00002b95b58c2460 __libc_start_main +
    245

    6    tmp5rwd2y14                        0x000055d7e01670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ num in lst {\n        if num > max {\n            max = num\n        }\n   \
    \ }\n    for num in lst {\n        if num > max {\n            continue\n    \
    \    }\n        var isPrime = true\n        for i = 2; i < max; i++ {\n      \
    \      if num % i == 0 {\n                isPrime = false\n                break\n\
    \            }\n        }\n        if isPrime {\n            sum += num\n    \
    \    }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmphr5mcit1.swift:30:9: error: C-style for statement has been removed\
    \ in Swift 3\n        for i = 2; i < max; i++ {\n        ^   ~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n        if x > 1 {\n            sum\
    \ += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3,\
    \ 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1,\
    \ 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32,\
    \ 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst:\
    \ [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst:\
    \ [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\n\
    assert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127,\
    \ 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpx2qtr0p5/tmpx2qtr0p5.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c122c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c11fbcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c11fbc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c11fbb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx2qtr0p5                        0x0000560fdebd3520 <unavailable> + 5408

    5    libc.so.6                          0x00002b8c124b1460 __libc_start_main +
    245

    6    tmpx2qtr0p5                        0x0000560fdebd30d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp5rwd2y14/tmp5rwd2y14.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95b56d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95b53cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95b53cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95b53cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rwd2y14                        0x000055d7e0167520 <unavailable> + 5408

    5    libc.so.6                          0x00002b95b58c2460 __libc_start_main +
    245

    6    tmp5rwd2y14                        0x000055d7e01670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n        if x == max {\n         \
    \   sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1,\
    \ 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst:\
    \ [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst:\
    \ [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\n\
    assert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127,\
    \ 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpxesni88a/tmpxesni88a.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba88ad91c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba88aa88b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba88aa88988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba88aa877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxesni88a                        0x0000558e03504520 <unavailable> + 5408

    5    libc.so.6                          0x00002ba88af7d460 __libc_start_main +
    245

    6    tmpxesni88a                        0x0000558e035040d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ num in lst {\n        if num > max {\n            max = num\n        }\n   \
    \ }\n    for num in lst {\n        if num == max {\n            sum += num\n \
    \       }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpnvgq9rhz/tmpnvgq9rhz.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad772f38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad772c2fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad772c2f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad772c2e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnvgq9rhz                        0x000056208c37e520 <unavailable> + 5408

    5    libc.so.6                          0x00002ad773124460 __libc_start_main +
    245

    6    tmpnvgq9rhz                        0x000056208c37e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp5rwd2y14/tmp5rwd2y14.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95b56d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95b53cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95b53cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95b53cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rwd2y14                        0x000055d7e0167520 <unavailable> + 5408

    5    libc.so.6                          0x00002b95b58c2460 __libc_start_main +
    245

    6    tmp5rwd2y14                        0x000055d7e01670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ num in lst {\n        if num > max {\n            max = num\n        }\n   \
    \ }\n    for num in lst {\n        if num == max {\n            sum += num\n \
    \       }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpnvgq9rhz/tmpnvgq9rhz.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad772f38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad772c2fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad772c2f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad772c2e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnvgq9rhz                        0x000056208c37e520 <unavailable> + 5408

    5    libc.so.6                          0x00002ad773124460 __libc_start_main +
    245

    6    tmpnvgq9rhz                        0x000056208c37e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp5rwd2y14/tmp5rwd2y14.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95b56d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95b53cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95b53cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95b53cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rwd2y14                        0x000055d7e0167520 <unavailable> + 5408

    5    libc.so.6                          0x00002b95b58c2460 __libc_start_main +
    245

    6    tmp5rwd2y14                        0x000055d7e01670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ num in lst {\n        if num > max {\n            max = num\n        }\n   \
    \ }\n    for num in lst {\n        if num == max {\n            sum += num\n \
    \       }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpnvgq9rhz/tmpnvgq9rhz.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad772f38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad772c2fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad772c2f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad772c2e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnvgq9rhz                        0x000056208c37e520 <unavailable> + 5408

    5    libc.so.6                          0x00002ad773124460 __libc_start_main +
    245

    6    tmpnvgq9rhz                        0x000056208c37e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp5rwd2y14/tmp5rwd2y14.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95b56d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95b53cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95b53cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95b53cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rwd2y14                        0x000055d7e0167520 <unavailable> + 5408

    5    libc.so.6                          0x00002b95b58c2460 __libc_start_main +
    245

    6    tmp5rwd2y14                        0x000055d7e01670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp5rwd2y14/tmp5rwd2y14.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95b56d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95b53cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95b53cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95b53cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rwd2y14                        0x000055d7e0167520 <unavailable> + 5408

    5    libc.so.6                          0x00002b95b58c2460 __libc_start_main +
    245

    6    tmp5rwd2y14                        0x000055d7e01670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n        if x > 1 {\n            sum\
    \ += Int(x / 2)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8,\
    \ 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp9ccgeiew/tmp9ccgeiew.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc4de58c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc4db4fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc4db4f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc4db4e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9ccgeiew                        0x00005563ccaaa6f0 <unavailable> + 5872

    5    libc.so.6                          0x00002adc4e044460 __libc_start_main +
    245

    6    tmp9ccgeiew                        0x00005563ccaaa2a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n        if x % 2 == 0 {\n       \
    \     continue\n        }\n        if x % 3 == 0 {\n            continue\n   \
    \     }\n        if x % 5 == 0 {\n            continue\n        }\n        if\
    \ x % 7 == 0 {\n            continue\n        }\n        if x % 11 == 0 {\n  \
    \          continue\n        }\n        if x % 13 == 0 {\n            continue\n\
    \        }\n        if x % 17 == 0 {\n            continue\n        }\n      \
    \  if x % 19 == 0 {\n            continue\n        }\n        if x % 23 == 0 {\n\
    \            continue\n        }\n        if x % 29 == 0 {\n            continue\n\
    \        }\n        if x % 31 == 0 {\n            continue\n        }\n      \
    \  if x % 37 == 0 {\n            continue\n        }\n        if x % 41 == 0 {\n\
    \            continue\n        }\n        if x % 43 == 0 {\n            continue\n\
    \        }\n        if x % 47 == 0 {\n            continue\n        }\n      \
    \  if x % 53 == 0 {\n            continue\n        }\n        if x % 59 == 0 {\n\
    \            continue\n        }\n        if x % 61 == 0 {\n            continue\n\
    \        }\n        if x % 67 == 0 {\n            continue\n        }\n      \
    \  if x % 71 == 0 {\n            continue\n        }\n        if x % 73 == 0 {\n\
    \            continue\n        }\n        if x % 79 == 0 {\n            continue\n\
    \        }\n        if x % 83 == 0 {\n            continue\n        }\n      \
    \  if x % 89 == 0 {\n            continue\n        }\n        if x % 97 == 0 {\n\
    \            continue\n        }\n        if x % 101 == 0 {\n            continue\n\
    \        }\n        if x % 103 == 0 {\n            continue\n        }\n     \
    \   if x % 107 == 0 {\n            continue\n        }\n        if x % 109 ==\
    \ 0 {\n            continue\n        }\n        if x % 113 == 0 {\n          \
    \  continue\n        }\n        if x % 117 == 0 {\n            continue\n    \
    \    }\n        if x % 121 == 0 {\n            continue\n        }\n        if\
    \ x % 123 == 0 {\n            continue\n        }\n        if x % 127 == 0 {\n\
    \            continue\n        }\n        if x % 131 == 0 {\n            continue\n\
    \        }\n        if x % 137 == 0 {\n            continue\n        }\n     \
    \   if x % 139 == 0 {\n            continue\n        }\n        if x % 143 ==\
    \ 0 {\n            continue\n        }\n        if x % 147 == 0 {\n          \
    \  continue\n        }\n        if x % 151 == 0 {\n            continue\n    \
    \    }\n        if x % 157 == 0 {\n            continue\n        }\n        if\
    \ x % 161 == 0 {\n            continue\n        }\n        if x % 163 == 0 {\n\
    \            continue\n        }\n        if x % 167 == 0 {\n            continue\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5,\
    \ 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmp2jma583a.swift:181:46: error: expected '}' at end of brace statement\n\
    assert(skjkasdkd(lst: [127, 97, 8192]) == 10)\n                              \
    \               ^\n/tmp/tmp2jma583a.swift:20:18: note: to match this opening '{'\n\
    \    for x in lst {\n                 ^\n/tmp/tmp2jma583a.swift:181:46: error:\
    \ expected '}' at end of brace statement\nassert(skjkasdkd(lst: [127, 97, 8192])\
    \ == 10)\n                                             ^\n/tmp/tmp2jma583a.swift:17:35:\
    \ note: to match this opening '{'\nfunc skjkasdkd(lst: [Int]) -> Int {\n     \
    \                             ^\n/tmp/tmp2jma583a.swift:161:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmp2jma583a.swift:19:9:\
    \ warning: initialization of variable 'sum' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var sum = 0\n    ~~~~^~~\n    _\n"
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp5rwd2y14/tmp5rwd2y14.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95b56d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95b53cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95b53cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95b53cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rwd2y14                        0x000055d7e0167520 <unavailable> + 5408

    5    libc.so.6                          0x00002b95b58c2460 __libc_start_main +
    245

    6    tmp5rwd2y14                        0x000055d7e01670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var largestPrime: Int = 0\n    var sumOfDigits\
    \ = 0\n    for x in lst {\n        if isPrime(x) {\n            largestPrime =\
    \ x\n        } else {\n            sumOfDigits += x\n        }\n    }\n    return\
    \ sumOfDigits\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst: [0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\n\
    assert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5,\
    \ 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23,\
    \ 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32,\
    \ 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21])\
    \ == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmpdfz9gvkq.swift:21:12: error: cannot find 'isPrime' in scope\n \
    \       if isPrime(x) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014366
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x > max {\n            continue\n        }\n   \
    \     if x % 2 == 0 {\n            continue\n        }\n        if x % 3 == 0\
    \ {\n            continue\n        }\n        if x % 5 == 0 {\n            continue\n\
    \        }\n        if x % 7 == 0 {\n            continue\n        }\n       \
    \ if x % 11 == 0 {\n            continue\n        }\n        if x % 13 == 0 {\n\
    \            continue\n        }\n        if x % 17 == 0 {\n            continue\n\
    \        }\n        if x % 19 == 0 {\n            continue\n        }\n      \
    \  if x % 23 == 0 {\n            continue\n        }\n        if x % 29 == 0 {\n\
    \            continue\n        }\n        if x % 31 == 0 {\n            continue\n\
    \        }\n        if x % 37 == 0 {\n            continue\n        }\n      \
    \  if x % 41 == 0 {\n            continue\n        }\n        if x % 43 == 0 {\n\
    \            continue\n        }\n        if x % 47 == 0 {\n            continue\n\
    \        }\n        if x % 53 == 0 {\n            continue\n        }\n      \
    \  if x % 59 == 0 {\n            continue\n        }\n        if x % 61 == 0 {\n\
    \            continue\n        }\n        if x % 67 == 0 {\n            continue\n\
    \        }\n        if x % 71 == 0 {\n            continue\n        }\n      \
    \  if x % 73 == 0 {\n            continue\n        }\n        if x % 79 == 0 {\n\
    \            continue\n        }\n        if x % 83 == 0 {\n            continue\n\
    \        }\n        if x % 89 == 0 {\n            continue\n        }\n      \
    \  if x % 97 == 0 {\n            continue\n        }\n        if x % 101 == 0\
    \ {\n            continue\n        }\n        if x % 103 == 0 {\n            continue\n\
    \        }\n        if x % 107 == 0 {\n            continue\n        }\n     \
    \   if x % 109 == 0 {\n            continue\n        }\n        if x % 113 ==\
    \ 0 {\n            continue\n        }\n        if x % 117 == 0 {\n          \
    \  continue\n        }\n        if x % 121 == 0 {\n            continue\n    \
    \    }\n        if x % 123 == 0 {\n            continue\n        }\n        if\
    \ x % 127 == 0 {\n            continue\n        }\n        if x % 131 == 0 {\n\
    \            continue\n        }\n        if x % 137 == 0 {\n            continue\n\
    \        }\n        if x % 139 == 0 {\n            continue\n        }\n     \
    \   if x % 143 == 0 {\n            continue\n        }\n        if x % 147 ==\
    \ 0 {\n            continue\n        }\n        if x % 151 == 0 {\n          \
    \  continue\n        }\n        if x % 157 == 0 {\n            continue\n    \
    \    }\n        if x % 161 == 0 {\n            continue\n        }\n        if\
    \ x % 163 == 0 {\n            continue\n        }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8,\
    \ 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmp3n8xmw4y.swift:181:46: error: expected '}' at end of brace statement\n\
    assert(skjkasdkd(lst: [127, 97, 8192]) == 10)\n                              \
    \               ^\n/tmp/tmp3n8xmw4y.swift:17:35: note: to match this opening '{'\n\
    func skjkasdkd(lst: [Int]) -> Int {\n                                  ^\n/tmp/tmp3n8xmw4y.swift:161:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmp3n8xmw4y.swift:19:9:\
    \ warning: initialization of variable 'sum' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var sum = 0\n    ~~~~^~~\n    _\n"
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ num in lst {\n        if num > max {\n            max = num\n        }\n   \
    \ }\n    for num in lst {\n        if num == max {\n            sum += num\n \
    \       }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpnvgq9rhz/tmpnvgq9rhz.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad772f38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad772c2fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad772c2f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad772c2e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnvgq9rhz                        0x000056208c37e520 <unavailable> + 5408

    5    libc.so.6                          0x00002ad773124460 __libc_start_main +
    245

    6    tmpnvgq9rhz                        0x000056208c37e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp5rwd2y14/tmp5rwd2y14.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95b56d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95b53cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95b53cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95b53cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rwd2y14                        0x000055d7e0167520 <unavailable> + 5408

    5    libc.so.6                          0x00002b95b58c2460 __libc_start_main +
    245

    6    tmp5rwd2y14                        0x000055d7e01670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp5rwd2y14/tmp5rwd2y14.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95b56d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95b53cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95b53cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95b53cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rwd2y14                        0x000055d7e0167520 <unavailable> + 5408

    5    libc.so.6                          0x00002b95b58c2460 __libc_start_main +
    245

    6    tmp5rwd2y14                        0x000055d7e01670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp5rwd2y14/tmp5rwd2y14.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95b56d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95b53cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95b53cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95b53cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rwd2y14                        0x000055d7e0167520 <unavailable> + 5408

    5    libc.so.6                          0x00002b95b58c2460 __libc_start_main +
    245

    6    tmp5rwd2y14                        0x000055d7e01670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ num in lst {\n        if num > max {\n            max = num\n        }\n   \
    \ }\n    for num in lst {\n        if num == max {\n            sum += num\n \
    \       }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpnvgq9rhz/tmpnvgq9rhz.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad772f38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad772c2fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad772c2f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad772c2e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnvgq9rhz                        0x000056208c37e520 <unavailable> + 5408

    5    libc.so.6                          0x00002ad773124460 __libc_start_main +
    245

    6    tmpnvgq9rhz                        0x000056208c37e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp5rwd2y14/tmp5rwd2y14.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95b56d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95b53cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95b53cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95b53cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rwd2y14                        0x000055d7e0167520 <unavailable> + 5408

    5    libc.so.6                          0x00002b95b58c2460 __libc_start_main +
    245

    6    tmp5rwd2y14                        0x000055d7e01670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var maxIndex = 0\n \
    \   for index in 0..<lst.count {\n        if lst[index] > max {\n            max\
    \ = lst[index]\n            maxIndex = index\n        }\n    }\n    var sum =\
    \ 0\n    for index in 0..<lst.count {\n        if lst[index] == max {\n      \
    \      sum += Int(lst[index])\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8,\
    \ 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpgdsv85px/tmpgdsv85px.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae83c98ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae83c681b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae83c681988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae83c6807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgdsv85px                        0x000055dd98fd3720 <unavailable> + 5920

    5    libc.so.6                          0x00002ae83cb76460 __libc_start_main +
    245

    6    tmpgdsv85px                        0x000055dd98fd32d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var largestPrime: Int = 0\n    var largestPrimeDigit:\
    \ Int = 0\n    var largestPrimeDigitSum: Int = 0\n    for element in lst {\n \
    \       if element > largestPrime {\n            largestPrime = element\n    \
    \        largestPrimeDigit = element\n            largestPrimeDigitSum = element\n\
    \        }\n        if element == largestPrime {\n            largestPrimeDigitSum\
    \ += element\n        }\n    }\n    return largestPrimeDigitSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8,\
    \ 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpee7f5zaz/tmpee7f5zaz.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b84a91b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84a8eaab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84a8eaa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84a8ea97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpee7f5zaz                        0x000055d56359c520 <unavailable> + 5408

    5    libc.so.6                          0x00002b84a939f460 __libc_start_main +
    245

    6    tmpee7f5zaz                        0x000055d56359c0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014367
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp5rwd2y14/tmp5rwd2y14.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95b56d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95b53cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95b53cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95b53cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rwd2y14                        0x000055d7e0167520 <unavailable> + 5408

    5    libc.so.6                          0x00002b95b58c2460 __libc_start_main +
    245

    6    tmp5rwd2y14                        0x000055d7e01670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var largestPrime: Int = 0\n    var largestPrimeDigit:\
    \ Int = 0\n    var largestPrimeDigitSum: Int = 0\n    for element in lst {\n \
    \       if element == 0 {\n            continue\n        }\n        if element\
    \ > largestPrime {\n            largestPrime = element\n            largestPrimeDigit\
    \ = element\n            largestPrimeDigitSum = element\n        }\n        if\
    \ element == largestPrimeDigit {\n            largestPrimeDigitSum += element\n\
    \        }\n    }\n    return largestPrimeDigitSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8,\
    \ 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpbdc2y3gt/tmpbdc2y3gt.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4862760c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4862457b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4862457988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48624567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbdc2y3gt                        0x00005562064b0520 <unavailable> + 5408

    5    libc.so.6                          0x00002b486294c460 __libc_start_main +
    245

    6    tmpbdc2y3gt                        0x00005562064b00d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014367
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var maxIndex = 0\n \
    \   for index in 0..<lst.count {\n        if lst[index] > max {\n            max\
    \ = lst[index]\n            maxIndex = index\n        }\n    }\n    var sum =\
    \ 0\n    for index in 0..<lst.count {\n        if lst[index] == max {\n      \
    \      sum += Int(lst[index])\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8,\
    \ 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpgdsv85px/tmpgdsv85px.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae83c98ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae83c681b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae83c681988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae83c6807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgdsv85px                        0x000055dd98fd3720 <unavailable> + 5920

    5    libc.so.6                          0x00002ae83cb76460 __libc_start_main +
    245

    6    tmpgdsv85px                        0x000055dd98fd32d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp5rwd2y14/tmp5rwd2y14.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95b56d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95b53cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95b53cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95b53cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rwd2y14                        0x000055d7e0167520 <unavailable> + 5408

    5    libc.so.6                          0x00002b95b58c2460 __libc_start_main +
    245

    6    tmp5rwd2y14                        0x000055d7e01670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp5rwd2y14/tmp5rwd2y14.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95b56d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95b53cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95b53cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95b53cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rwd2y14                        0x000055d7e0167520 <unavailable> + 5408

    5    libc.so.6                          0x00002b95b58c2460 __libc_start_main +
    245

    6    tmp5rwd2y14                        0x000055d7e01670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n    }\n    for x in lst {\n     \
    \   if x == 0 {\n            continue\n        }\n        if x > max {\n     \
    \       max = x\n        }\n    }\n    for x in lst {\n        if x == 0 {\n \
    \           continue\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == 0 {\n            continue\n\
    \        }\n        if x > max {\n            max = x\n        }\n    }\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n    }\n    for x in lst {\n     \
    \   if x == 0 {\n            continue\n        }\n        if x > max {\n     \
    \       max = x\n        }\n    }\n    for x in lst {\n        if x == 0 {\n \
    \           continue\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == 0 {\n            continue\n\
    \        }\n        if x > max {\n            max = x\n        }\n    }\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n    }\n    for x in lst {\n     \
    \   if x == 0 {\n            continue\n        }\n        if x > max {\n     \
    \       max = x\n        }\n    }\n    for x in lst {\n        if x == 0 {\n \
    \           continue\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == 0 {\n            continue\n\
    \        }\n        if x > max {\n            max = x\n        }\n    }\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n    }\n    for x in lst {\n     \
    \   if x == 0 {\n            continue\n        }\n        if x > max {\n     \
    \       max = x\n        }\n    }\n    for x in lst {\n        if x == 0 {\n \
    \           continue\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == 0 {\n            continue\n\
    \        }\n        if x > max {\n            max = x\n        }\n    }\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n    }\n    for x in lst {\n     \
    \   if x == 0 {\n            continue\n        }\n        if x > max {\n     \
    \       max = x\n        }\n    }\n    for x in lst {\n        if x == 0 {\n \
    \           continue\n        }\n        if x > max {\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8,\
    \ 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmpm_gdp_kh.swift:192:46: error: expected '}' at end of brace statement\n\
    assert(skjkasdkd(lst: [127, 97, 8192]) == 10)\n                              \
    \               ^\n/tmp/tmpm_gdp_kh.swift:164:18: note: to match this opening\
    \ '{'\n    for x in lst {\n                 ^\n/tmp/tmpm_gdp_kh.swift:192:46:\
    \ error: expected '}' at end of brace statement\nassert(skjkasdkd(lst: [127, 97,\
    \ 8192]) == 10)\n                                             ^\n/tmp/tmpm_gdp_kh.swift:17:35:\
    \ note: to match this opening '{'\nfunc skjkasdkd(lst: [Int]) -> Int {\n     \
    \                             ^\n/tmp/tmpm_gdp_kh.swift:172:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpm_gdp_kh.swift:19:9:\
    \ warning: initialization of variable 'sum' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var sum = 0\n    ~~~~^~~\n    _\n"
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp5rwd2y14/tmp5rwd2y14.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95b56d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95b53cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95b53cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95b53cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rwd2y14                        0x000055d7e0167520 <unavailable> + 5408

    5    libc.so.6                          0x00002b95b58c2460 __libc_start_main +
    245

    6    tmp5rwd2y14                        0x000055d7e01670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var largestPrime = 0\n    var sum = 0\n\
    \    for number in lst {\n        if number == 0 {\n            continue\n   \
    \     }\n        if number > largestPrime {\n            largestPrime = number\n\
    \        }\n        if number % 2 == 0 {\n            sum += number\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpjtfu648w/tmpjtfu648w.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b274ec13c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b274e90ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b274e90a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b274e9097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjtfu648w                        0x000055b2a4e3a5b0 <unavailable> + 5552

    5    libc.so.6                          0x00002b274edff460 __libc_start_main +
    245

    6    tmpjtfu648w                        0x000055b2a4e3a169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014367
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ i in lst {\n        if i == 0 {\n            continue\n        }\n        if\
    \ max < i {\n            max = i\n        }\n    }\n    for i in lst {\n     \
    \   if i == 0 {\n            continue\n        }\n        if max % i == 0 {\n\
    \            sum += Int(truncatingIfNeeded: i / Int64(max))\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst: [0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\n\
    assert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5,\
    \ 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23,\
    \ 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32,\
    \ 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21])\
    \ == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmp_ou8qq1m.swift:33:46: error: binary operator '/' cannot be applied\
    \ to operands of type 'Int' and 'Int64'\n            sum += Int(truncatingIfNeeded:\
    \ i / Int64(max))\n                                           ~ ^ ~~~~~~~~~~\n\
    /tmp/tmp_ou8qq1m.swift:33:46: note: overloads for '/' exist with these partially\
    \ matching parameter lists: (Int, Int), (Int64, Int64)\n            sum += Int(truncatingIfNeeded:\
    \ i / Int64(max))\n                                             ^\n"
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp5rwd2y14/tmp5rwd2y14.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95b56d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95b53cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95b53cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95b53cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rwd2y14                        0x000055d7e0167520 <unavailable> + 5408

    5    libc.so.6                          0x00002b95b58c2460 __libc_start_main +
    245

    6    tmp5rwd2y14                        0x000055d7e01670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var maxIndex = 0\n \
    \   for index in 0..<lst.count {\n        if lst[index] > max {\n            max\
    \ = lst[index]\n            maxIndex = index\n        }\n    }\n    var sum =\
    \ 0\n    for index in 0..<lst.count {\n        if index == maxIndex {\n      \
    \      continue\n        }\n        if lst[index] > max {\n            continue\n\
    \        }\n        if lst[index] % max == 0 {\n            sum += lst[index]\
    \ % max\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1,\
    \ 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst:\
    \ [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst:\
    \ [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\n\
    assert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127,\
    \ 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp3y2htlvd/tmp3y2htlvd.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b73da03dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b73d9d34b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b73d9d34988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73d9d337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3y2htlvd                        0x000056098737b5f0 <unavailable> + 5616

    5    libc.so.6                          0x00002b73da229460 __libc_start_main +
    245

    6    tmp3y2htlvd                        0x000056098737b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014367
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var maxNum = 0\n   \
    \ for num in lst {\n        if num > max {\n            max = num\n          \
    \  maxNum = num\n        }\n    }\n    var sum = 0\n    for num in lst {\n   \
    \     if num == maxNum {\n            sum += num\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst: [0, 3, 2,\
    \ 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst:\
    \ [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp86i1tjhv/tmp86i1tjhv.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3208742c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3208439b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3208439988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b32084387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp86i1tjhv                        0x0000556a1252e520 <unavailable> + 5408

    5    libc.so.6                          0x00002b320892e460 __libc_start_main +
    245

    6    tmp86i1tjhv                        0x0000556a1252e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp5rwd2y14/tmp5rwd2y14.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95b56d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95b53cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95b53cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95b53cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rwd2y14                        0x000055d7e0167520 <unavailable> + 5408

    5    libc.so.6                          0x00002b95b58c2460 __libc_start_main +
    245

    6    tmp5rwd2y14                        0x000055d7e01670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n        if x == max {\n         \
    \   sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1,\
    \ 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst:\
    \ [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst:\
    \ [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\n\
    assert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127,\
    \ 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpxesni88a/tmpxesni88a.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba88ad91c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba88aa88b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba88aa88988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba88aa877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxesni88a                        0x0000558e03504520 <unavailable> + 5408

    5    libc.so.6                          0x00002ba88af7d460 __libc_start_main +
    245

    6    tmpxesni88a                        0x0000558e035040d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp5rwd2y14/tmp5rwd2y14.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95b56d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95b53cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95b53cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95b53cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rwd2y14                        0x000055d7e0167520 <unavailable> + 5408

    5    libc.so.6                          0x00002b95b58c2460 __libc_start_main +
    245

    6    tmp5rwd2y14                        0x000055d7e01670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var largestPrime: Int = 0\n    var sumOfDigits\
    \ = 0\n    for number in lst {\n        if number > largestPrime {\n         \
    \   largestPrime = number\n        }\n    }\n    for number in lst {\n       \
    \ if number % largestPrime == 0 {\n            sumOfDigits += number\n       \
    \ }\n    }\n    return sumOfDigits\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3,\
    \ 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1,\
    \ 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32,\
    \ 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst:\
    \ [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst:\
    \ [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\n\
    assert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127,\
    \ 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpwpurso5x/tmpwpurso5x.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada9f111c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada9ee08b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada9ee08988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada9ee077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwpurso5x                        0x0000559e4ddc35b0 <unavailable> + 5552

    5    libc.so.6                          0x00002ada9f2fd460 __libc_start_main +
    245

    6    tmpwpurso5x                        0x0000559e4ddc3169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014367
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp5rwd2y14/tmp5rwd2y14.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95b56d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95b53cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95b53cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95b53cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rwd2y14                        0x000055d7e0167520 <unavailable> + 5408

    5    libc.so.6                          0x00002b95b58c2460 __libc_start_main +
    245

    6    tmp5rwd2y14                        0x000055d7e01670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp5rwd2y14/tmp5rwd2y14.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95b56d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95b53cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95b53cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95b53cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rwd2y14                        0x000055d7e0167520 <unavailable> + 5408

    5    libc.so.6                          0x00002b95b58c2460 __libc_start_main +
    245

    6    tmp5rwd2y14                        0x000055d7e01670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var largestPrime: Int = 0\n    var sumOfDigits\
    \ = 0\n    for number in lst {\n        if number == 0 {\n            continue\n\
    \        }\n        if number > largestPrime {\n            largestPrime = number\n\
    \        }\n        for divisor in 2..<number {\n            if number % divisor\
    \ == 0 {\n                break\n            }\n        }\n        if divisor\
    \ == number {\n            sumOfDigits += number\n        }\n    }\n    return\
    \ sumOfDigits + largestPrime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmpge7xu6sl.swift:32:12: error: cannot find 'divisor' in scope\n \
    \       if divisor == number {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var largestPrime = 0\n    var sum = 0\n\
    \    for num in lst {\n        if num > largestPrime {\n            largestPrime\
    \ = num\n        }\n    }\n    for num in lst {\n        if num == largestPrime\
    \ {\n            sum += num\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8,\
    \ 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpvw_3xm9t/tmpvw_3xm9t.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b35ecdfac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b35ecaf1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b35ecaf1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b35ecaf07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvw_3xm9t                        0x000055a2970d9520 <unavailable> + 5408

    5    libc.so.6                          0x00002b35ecfe6460 __libc_start_main +
    245

    6    tmpvw_3xm9t                        0x000055a2970d90d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014367
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp5rwd2y14/tmp5rwd2y14.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95b56d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95b53cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95b53cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95b53cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rwd2y14                        0x000055d7e0167520 <unavailable> + 5408

    5    libc.so.6                          0x00002b95b58c2460 __libc_start_main +
    245

    6    tmp5rwd2y14                        0x000055d7e01670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp5rwd2y14/tmp5rwd2y14.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95b56d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95b53cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95b53cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95b53cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rwd2y14                        0x000055d7e0167520 <unavailable> + 5408

    5    libc.so.6                          0x00002b95b58c2460 __libc_start_main +
    245

    6    tmp5rwd2y14                        0x000055d7e01670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp5rwd2y14/tmp5rwd2y14.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95b56d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95b53cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95b53cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95b53cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rwd2y14                        0x000055d7e0167520 <unavailable> + 5408

    5    libc.so.6                          0x00002b95b58c2460 __libc_start_main +
    245

    6    tmp5rwd2y14                        0x000055d7e01670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp5rwd2y14/tmp5rwd2y14.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95b56d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95b53cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95b53cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95b53cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rwd2y14                        0x000055d7e0167520 <unavailable> + 5408

    5    libc.so.6                          0x00002b95b58c2460 __libc_start_main +
    245

    6    tmp5rwd2y14                        0x000055d7e01670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp5rwd2y14/tmp5rwd2y14.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95b56d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95b53cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95b53cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95b53cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rwd2y14                        0x000055d7e0167520 <unavailable> + 5408

    5    libc.so.6                          0x00002b95b58c2460 __libc_start_main +
    245

    6    tmp5rwd2y14                        0x000055d7e01670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ num in lst {\n        if num > max {\n            max = num\n        }\n   \
    \ }\n    for num in lst {\n        if num > max {\n            continue\n    \
    \    }\n        if num == max {\n            sum += num\n        }\n    }\n  \
    \  return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst: [0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\n\
    assert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5,\
    \ 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23,\
    \ 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32,\
    \ 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21])\
    \ == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpehdgyz9j/tmpehdgyz9j.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9efb8eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9efb5e5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9efb5e5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9efb5e47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpehdgyz9j                        0x0000561fb7bdc520 <unavailable> + 5408

    5    libc.so.6                          0x00002b9efbada460 __libc_start_main +
    245

    6    tmpehdgyz9j                        0x0000561fb7bdc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014367
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp5rwd2y14/tmp5rwd2y14.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95b56d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95b53cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95b53cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95b53cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rwd2y14                        0x000055d7e0167520 <unavailable> + 5408

    5    libc.so.6                          0x00002b95b58c2460 __libc_start_main +
    245

    6    tmp5rwd2y14                        0x000055d7e01670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp5rwd2y14/tmp5rwd2y14.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95b56d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95b53cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95b53cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95b53cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rwd2y14                        0x000055d7e0167520 <unavailable> + 5408

    5    libc.so.6                          0x00002b95b58c2460 __libc_start_main +
    245

    6    tmp5rwd2y14                        0x000055d7e01670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n        if isPrime(x) {\n       \
    \     sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8,\
    \ 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmpme3ojx18.swift:27:12: error: cannot find 'isPrime' in scope\n \
    \       if isPrime(x) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var maxIndex = 0\n \
    \   for index in 0..<lst.count {\n        if lst[index] > max {\n            max\
    \ = lst[index]\n            maxIndex = index\n        }\n    }\n    var sum =\
    \ 0\n    for index in 0..<lst.count {\n        if lst[index] == max {\n      \
    \      sum += Int(lst[index])\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8,\
    \ 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpgdsv85px/tmpgdsv85px.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae83c98ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae83c681b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae83c681988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae83c6807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgdsv85px                        0x000055dd98fd3720 <unavailable> + 5920

    5    libc.so.6                          0x00002ae83cb76460 __libc_start_main +
    245

    6    tmpgdsv85px                        0x000055dd98fd32d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var largestPrime = 0\n    var sum = 0\n\
    \    for x in lst {\n        if x == 0 {\n            continue\n        }\n  \
    \      if x == 1 {\n            sum += x\n            continue\n        }\n  \
    \      if x == 2 {\n            sum += x\n            continue\n        }\n  \
    \      if x == 3 {\n            sum += x\n            continue\n        }\n  \
    \      if x == 4 {\n            sum += x\n            continue\n        }\n  \
    \      if x == 5 {\n            sum += x\n            continue\n        }\n  \
    \      if x == 6 {\n            sum += x\n            continue\n        }\n  \
    \      if x == 7 {\n            sum += x\n            continue\n        }\n  \
    \      if x == 8 {\n            sum += x\n            continue\n        }\n  \
    \      if x == 9 {\n            sum += x\n            continue\n        }\n  \
    \      if x == 10 {\n            sum += x\n            continue\n        }\n \
    \       if x == 11 {\n            sum += x\n            continue\n        }\n\
    \        if x == 12 {\n            sum += x\n            continue\n        }\n\
    \        if x == 13 {\n            sum += x\n            continue\n        }\n\
    \        if x == 14 {\n            sum += x\n            continue\n        }\n\
    \        if x == 15 {\n            sum += x\n            continue\n        }\n\
    \        if x == 16 {\n            sum += x\n            continue\n        }\n\
    \        if x == 17 {\n            sum += x\n            continue\n        }\n\
    \        if x == 18 {\n            sum += x\n            continue\n        }\n\
    \        if x == 19 {\n            sum += x\n            continue\n        }\n\
    \        if x == 20 {\n            sum += x\n            continue\n        }\n\
    \        if x == 21 {\n            sum += x\n            continue\n        }\n\
    \        if x == 22 {\n            sum += x\n            continue\n        }\n\
    \        if x == 23 {\n            sum += x\n            continue\n        }\n\
    \        if x == 24 {\n            sum += x\n            continue\n        }\n\
    \        if x == 25 {\n            sum += x\n            continue\n        }\n\
    \        if x == 26 {\n            sum += x\n            continue\n        }\n\
    \        if x == 27 {\n            sum += x\n            continue\n        }\n\
    \        if x == 28 {\n            sum += x\n            continue\n        }\n\
    \        if x == 29 {\n            sum += x\n            continue\n        }\n\
    \        if x == 30 {\n            sum += x\n            continue\n        }\n\
    \        if x == 31 {\n            sum += x\n            continue\n        }\n\
    \        if x == 32 {\n            sum += x\n            continue\n        }\n\
    \        if x == 33 {\n            sum += x\n            continue\n        }\n\
    \        if x == 34 {\n            sum += x\n            continue\n        }\n\
    \        if x == 35 {\n            sum += x\n            continue\n        }\n\
    \        if x == 36 {\n            sum += x\n            continue\n        }\n\
    \        if x == 37 {\n            sum += x\n            continue\n        }\n\
    \        if x == 38 {\n            sum += x\n            continue\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5,\
    \ 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmp55vrjf5z.swift:198:46: error: expected '}' at end of brace statement\n\
    assert(skjkasdkd(lst: [127, 97, 8192]) == 10)\n                              \
    \               ^\n/tmp/tmp55vrjf5z.swift:20:18: note: to match this opening '{'\n\
    \    for x in lst {\n                 ^\n/tmp/tmp55vrjf5z.swift:198:46: error:\
    \ expected '}' at end of brace statement\nassert(skjkasdkd(lst: [127, 97, 8192])\
    \ == 10)\n                                             ^\n/tmp/tmp55vrjf5z.swift:17:35:\
    \ note: to match this opening '{'\nfunc skjkasdkd(lst: [Int]) -> Int {\n     \
    \                             ^\n/tmp/tmp55vrjf5z.swift:178:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmp55vrjf5z.swift:18:9:\
    \ warning: initialization of variable 'largestPrime' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var largestPrime = 0\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n"
  stdout: ''
  timestamp: 1660014367
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ num in lst {\n        if num > max {\n            max = num\n        }\n   \
    \ }\n    for num in lst {\n        if num == max {\n            sum += num\n \
    \       }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpnvgq9rhz/tmpnvgq9rhz.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad772f38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad772c2fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad772c2f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad772c2e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnvgq9rhz                        0x000056208c37e520 <unavailable> + 5408

    5    libc.so.6                          0x00002ad773124460 __libc_start_main +
    245

    6    tmpnvgq9rhz                        0x000056208c37e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x > max {\n            continue\n        }\n   \
    \     if x % max == 0 {\n            sum += x\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5,\
    \ 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpw84boknq/tmpw84boknq.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aac6d7a6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac6d49db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aac6d49d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aac6d49c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw84boknq                        0x000055bbd78b05b0 <unavailable> + 5552

    5    libc.so.6                          0x00002aac6d992460 __libc_start_main +
    245

    6    tmpw84boknq                        0x000055bbd78b0169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014367
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var maxIndex = 0\n \
    \   for index in 0..<lst.count {\n        if lst[index] > max {\n            max\
    \ = lst[index]\n            maxIndex = index\n        }\n    }\n    var sum =\
    \ 0\n    for index in 0..<lst.count {\n        if lst[index] == max {\n      \
    \      sum += Int(lst[index])\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8,\
    \ 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpgdsv85px/tmpgdsv85px.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae83c98ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae83c681b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae83c681988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae83c6807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgdsv85px                        0x000055dd98fd3720 <unavailable> + 5920

    5    libc.so.6                          0x00002ae83cb76460 __libc_start_main +
    245

    6    tmpgdsv85px                        0x000055dd98fd32d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ num in lst {\n        if num > max {\n            max = num\n        }\n   \
    \ }\n    for num in lst {\n        if num == max {\n            sum += num\n \
    \       }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpnvgq9rhz/tmpnvgq9rhz.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad772f38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad772c2fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad772c2f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad772c2e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnvgq9rhz                        0x000056208c37e520 <unavailable> + 5408

    5    libc.so.6                          0x00002ad773124460 __libc_start_main +
    245

    6    tmpnvgq9rhz                        0x000056208c37e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ num in lst {\n        if num > max {\n            max = num\n        }\n   \
    \ }\n    for num in lst {\n        if num == max {\n            sum += num\n \
    \       }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpnvgq9rhz/tmpnvgq9rhz.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad772f38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad772c2fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad772c2f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad772c2e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnvgq9rhz                        0x000056208c37e520 <unavailable> + 5408

    5    libc.so.6                          0x00002ad773124460 __libc_start_main +
    245

    6    tmpnvgq9rhz                        0x000056208c37e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ num in lst {\n        if num > max {\n            max = num\n        }\n   \
    \ }\n    for num in lst {\n        if num == max {\n            sum += num\n \
    \       }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpnvgq9rhz/tmpnvgq9rhz.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad772f38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad772c2fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad772c2f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad772c2e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnvgq9rhz                        0x000056208c37e520 <unavailable> + 5408

    5    libc.so.6                          0x00002ad773124460 __libc_start_main +
    245

    6    tmpnvgq9rhz                        0x000056208c37e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp5rwd2y14/tmp5rwd2y14.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95b56d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95b53cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95b53cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95b53cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rwd2y14                        0x000055d7e0167520 <unavailable> + 5408

    5    libc.so.6                          0x00002b95b58c2460 __libc_start_main +
    245

    6    tmp5rwd2y14                        0x000055d7e01670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp5rwd2y14/tmp5rwd2y14.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95b56d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95b53cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95b53cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95b53cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rwd2y14                        0x000055d7e0167520 <unavailable> + 5408

    5    libc.so.6                          0x00002b95b58c2460 __libc_start_main +
    245

    6    tmp5rwd2y14                        0x000055d7e01670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n        if isPrime(x) {\n       \
    \     sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8,\
    \ 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmpme3ojx18.swift:27:12: error: cannot find 'isPrime' in scope\n \
    \       if isPrime(x) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ num in lst {\n        if num > max {\n            max = num\n        }\n   \
    \ }\n    for num in lst {\n        if num == max {\n            sum += num\n \
    \       }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpnvgq9rhz/tmpnvgq9rhz.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad772f38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad772c2fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad772c2f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad772c2e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnvgq9rhz                        0x000056208c37e520 <unavailable> + 5408

    5    libc.so.6                          0x00002ad773124460 __libc_start_main +
    245

    6    tmpnvgq9rhz                        0x000056208c37e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n        if x % 2 == 0 {\n       \
    \     sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8,\
    \ 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp2bol5o75/tmp2bol5o75.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6f36c93c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6f3698ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6f3698a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6f369897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2bol5o75                        0x000055a1e3c5b5b0 <unavailable> + 5552

    5    libc.so.6                          0x00002b6f36e7f460 __libc_start_main +
    245

    6    tmp2bol5o75                        0x000055a1e3c5b169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp5rwd2y14/tmp5rwd2y14.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95b56d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95b53cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95b53cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95b53cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rwd2y14                        0x000055d7e0167520 <unavailable> + 5408

    5    libc.so.6                          0x00002b95b58c2460 __libc_start_main +
    245

    6    tmp5rwd2y14                        0x000055d7e01670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var maxIndex = 0\n \
    \   var sum = 0\n    for i in lst {\n        if i % 2 == 0 {\n            sum\
    \ += i\n        }\n        if i > max {\n            max = i\n            maxIndex\
    \ = i\n        }\n    }\n    if maxIndex != 0 {\n        sum += maxIndex\n   \
    \ }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst: [0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\n\
    assert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5,\
    \ 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23,\
    \ 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32,\
    \ 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21])\
    \ == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp3lr6z50q/tmp3lr6z50q.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab147fadc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab147ca4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab147ca4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab147ca37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3lr6z50q                        0x0000563ec53865b0 <unavailable> + 5552

    5    libc.so.6                          0x00002ab148199460 __libc_start_main +
    245

    6    tmp3lr6z50q                        0x0000563ec5386169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014367
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var maxIndex = 0\n \
    \   for index in 0..<lst.count {\n        let value = lst[index]\n        if isPrime(value)\
    \ {\n            max = max(max, value)\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex == lst.count ? max : maxIndex + 1 + skjkasdkd(lst:\
    \ lst, start: maxIndex)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmp_1pu11lk.swift:22:12: error: cannot find 'isPrime' in scope\n \
    \       if isPrime(value) {\n           ^~~~~~~\n/tmp/tmp_1pu11lk.swift:23:19:\
    \ error: cannot call value of non-function type 'Int'\n            max = max(max,\
    \ value)\n                  ^\n/tmp/tmp_1pu11lk.swift:27:84: error: extra argument\
    \ 'start' in call\n    return maxIndex == lst.count ? max : maxIndex + 1 + skjkasdkd(lst:\
    \ lst, start: maxIndex)\n                                                    \
    \             ~~~~~~~~~~~~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014367
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp5rwd2y14/tmp5rwd2y14.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95b56d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95b53cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95b53cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95b53cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rwd2y14                        0x000055d7e0167520 <unavailable> + 5408

    5    libc.so.6                          0x00002b95b58c2460 __libc_start_main +
    245

    6    tmp5rwd2y14                        0x000055d7e01670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ num in lst {\n        if num > max {\n            max = num\n        }\n   \
    \ }\n    for num in lst {\n        if num == max {\n            sum += num\n \
    \       }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpnvgq9rhz/tmpnvgq9rhz.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad772f38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad772c2fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad772c2f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad772c2e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnvgq9rhz                        0x000056208c37e520 <unavailable> + 5408

    5    libc.so.6                          0x00002ad773124460 __libc_start_main +
    245

    6    tmpnvgq9rhz                        0x000056208c37e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp5rwd2y14/tmp5rwd2y14.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95b56d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95b53cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95b53cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95b53cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rwd2y14                        0x000055d7e0167520 <unavailable> + 5408

    5    libc.so.6                          0x00002b95b58c2460 __libc_start_main +
    245

    6    tmp5rwd2y14                        0x000055d7e01670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ i in lst {\n        if i % 2 == 0 {\n            sum += i\n        }\n     \
    \   if max < i {\n            max = i\n        }\n    }\n    return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5,\
    \ 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp7y42nc6c/tmp7y42nc6c.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3b5f520c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3b5f217b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3b5f217988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3b5f2167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7y42nc6c                        0x0000563a50d065b0 <unavailable> + 5552

    5    libc.so.6                          0x00002b3b5f70c460 __libc_start_main +
    245

    6    tmp7y42nc6c                        0x0000563a50d06169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var maxPrime = 0\n \
    \   for num in lst {\n        if num > max {\n            max = num\n        \
    \    maxPrime = num\n        } else if num == max {\n            if isPrime(num)\
    \ {\n                maxPrime = num\n            }\n        }\n    }\n    return\
    \ maxPrime + max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst: [0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\n\
    assert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5,\
    \ 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23,\
    \ 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32,\
    \ 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21])\
    \ == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmpq8d8ifns.swift:25:16: error: cannot find 'isPrime' in scope\n \
    \           if isPrime(num) {\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014367
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n        if isPrime(x) {\n       \
    \     sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8,\
    \ 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmpme3ojx18.swift:27:12: error: cannot find 'isPrime' in scope\n \
    \       if isPrime(x) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ num in lst {\n        if num > max {\n            max = num\n        }\n   \
    \ }\n    for num in lst {\n        if num == max {\n            sum += num\n \
    \       }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpnvgq9rhz/tmpnvgq9rhz.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad772f38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad772c2fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad772c2f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad772c2e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnvgq9rhz                        0x000056208c37e520 <unavailable> + 5408

    5    libc.so.6                          0x00002ad773124460 __libc_start_main +
    245

    6    tmpnvgq9rhz                        0x000056208c37e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp5rwd2y14/tmp5rwd2y14.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95b56d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95b53cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95b53cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95b53cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rwd2y14                        0x000055d7e0167520 <unavailable> + 5408

    5    libc.so.6                          0x00002b95b58c2460 __libc_start_main +
    245

    6    tmp5rwd2y14                        0x000055d7e01670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ i in lst {\n        if i % 2 == 0 {\n            sum += i\n        }\n     \
    \   if max < i {\n            max = i\n        }\n    }\n    return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5,\
    \ 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp7y42nc6c/tmp7y42nc6c.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3b5f520c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3b5f217b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3b5f217988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3b5f2167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7y42nc6c                        0x0000563a50d065b0 <unavailable> + 5552

    5    libc.so.6                          0x00002b3b5f70c460 __libc_start_main +
    245

    6    tmp7y42nc6c                        0x0000563a50d06169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp5rwd2y14/tmp5rwd2y14.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95b56d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95b53cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95b53cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95b53cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rwd2y14                        0x000055d7e0167520 <unavailable> + 5408

    5    libc.so.6                          0x00002b95b58c2460 __libc_start_main +
    245

    6    tmp5rwd2y14                        0x000055d7e01670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ num in lst {\n        if num > max {\n            max = num\n        }\n   \
    \ }\n    for num in lst {\n        if num == max {\n            sum += num\n \
    \       }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpnvgq9rhz/tmpnvgq9rhz.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad772f38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad772c2fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad772c2f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad772c2e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnvgq9rhz                        0x000056208c37e520 <unavailable> + 5408

    5    libc.so.6                          0x00002ad773124460 __libc_start_main +
    245

    6    tmpnvgq9rhz                        0x000056208c37e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp5rwd2y14/tmp5rwd2y14.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95b56d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95b53cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95b53cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95b53cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rwd2y14                        0x000055d7e0167520 <unavailable> + 5408

    5    libc.so.6                          0x00002b95b58c2460 __libc_start_main +
    245

    6    tmp5rwd2y14                        0x000055d7e01670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n    }\n    for x in lst {\n     \
    \   if x == 0 {\n            continue\n        }\n        if x > max {\n     \
    \       max = x\n        }\n    }\n    for x in lst {\n        if x == 0 {\n \
    \           continue\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == 0 {\n            continue\n\
    \        }\n        if x > max {\n            max = x\n        }\n    }\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n    }\n    for x in lst {\n     \
    \   if x == 0 {\n            continue\n        }\n        if x > max {\n     \
    \       max = x\n        }\n    }\n    for x in lst {\n        if x == 0 {\n \
    \           continue\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == 0 {\n            continue\n\
    \        }\n        if x > max {\n            max = x\n        }\n    }\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n    }\n    for x in lst {\n     \
    \   if x == 0 {\n            continue\n        }\n        if x > max {\n     \
    \       max = x\n        }\n    }\n    for x in lst {\n        if x == 0 {\n \
    \           continue\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == 0 {\n            continue\n\
    \        }\n        if x > max {\n            max = x\n        }\n    }\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n    }\n    for x in lst {\n     \
    \   if x == 0 {\n            continue\n        }\n        if x > max {\n     \
    \       max = x\n        }\n    }\n    for x in lst {\n        if x == 0 {\n \
    \           continue\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == 0 {\n            continue\n\
    \        }\n        if x > max {\n            max = x\n        }\n    }\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n    }\n    for x in lst {\n     \
    \   if x == 0 {\n            continue\n        }\n        if x > max {\n     \
    \       max = x\n        }\n    }\n    for x in lst {\n        if x == 0 {\n \
    \           continue\n        }\n        if x > max {\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8,\
    \ 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmpm_gdp_kh.swift:192:46: error: expected '}' at end of brace statement\n\
    assert(skjkasdkd(lst: [127, 97, 8192]) == 10)\n                              \
    \               ^\n/tmp/tmpm_gdp_kh.swift:164:18: note: to match this opening\
    \ '{'\n    for x in lst {\n                 ^\n/tmp/tmpm_gdp_kh.swift:192:46:\
    \ error: expected '}' at end of brace statement\nassert(skjkasdkd(lst: [127, 97,\
    \ 8192]) == 10)\n                                             ^\n/tmp/tmpm_gdp_kh.swift:17:35:\
    \ note: to match this opening '{'\nfunc skjkasdkd(lst: [Int]) -> Int {\n     \
    \                             ^\n/tmp/tmpm_gdp_kh.swift:172:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpm_gdp_kh.swift:19:9:\
    \ warning: initialization of variable 'sum' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var sum = 0\n    ~~~~^~~\n    _\n"
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp5rwd2y14/tmp5rwd2y14.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95b56d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95b53cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95b53cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95b53cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rwd2y14                        0x000055d7e0167520 <unavailable> + 5408

    5    libc.so.6                          0x00002b95b58c2460 __libc_start_main +
    245

    6    tmp5rwd2y14                        0x000055d7e01670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n        if x % 2 == 0 {\n       \
    \     sum += x\n        }\n    }\n    if max > 0 {\n        sum += max\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst: [0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\n\
    assert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5,\
    \ 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23,\
    \ 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32,\
    \ 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21])\
    \ == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp5mv4fu3o/tmp5mv4fu3o.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9d4109dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9d40d94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9d40d94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9d40d937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5mv4fu3o                        0x000055e1a00355b0 <unavailable> + 5552

    5    libc.so.6                          0x00002b9d41289460 __libc_start_main +
    245

    6    tmp5mv4fu3o                        0x000055e1a0035169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014367
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp5rwd2y14/tmp5rwd2y14.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95b56d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95b53cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95b53cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95b53cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rwd2y14                        0x000055d7e0167520 <unavailable> + 5408

    5    libc.so.6                          0x00002b95b58c2460 __libc_start_main +
    245

    6    tmp5rwd2y14                        0x000055d7e01670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: 1
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x > max {\n            max = x\n        }\n    }\n\
    \    for x in lst {\n        if x > max {\n            max = x\n        }\n  \
    \  }\n    for x in lst {\n        if x > max {\n            max = x\n        }\n\
    \    }\n    for x in lst {\n        if x > max {\n            max = x\n      \
    \  }\n    }\n    for x in lst {\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x > max {\n            max =\
    \ x\n        }\n    }\n    for x in lst {\n        if x > max {\n            max\
    \ = x\n        }\n    }\n    for x in lst {\n        if x > max {\n          \
    \  max = x\n        }\n    }\n    for x in lst {\n        if x > max {\n     \
    \       max = x\n        }\n    }\n    for x in lst {\n        if x > max {\n\
    \            max = x\n        }\n    }\n    for x in lst {\n        if x > max\
    \ {\n            max = x\n        }\n    }\n    for x in lst {\n        if x >\
    \ max {\n            max = x\n        }\n    }\n    for x in lst {\n        if\
    \ x > max {\n            max = x\n        }\n    }\n    for x in lst {\n     \
    \   if x > max {\n            max = x\n        }\n    }\n    for x in lst {\n\
    \        if x > max {\n            max = x\n        }\n    }\n    for x in lst\
    \ {\n        if x > max {\n            max = x\n        }\n    }\n    for x in\
    \ lst {\n        if x > max {\n            max = x\n        }\n    }\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x > max {\n            max = x\n        }\n    }\n\
    \    for x in lst {\n        if x > max {\n            max = x\n        }\n  \
    \  }\n    for x in lst {\n        if x > max {\n            max = x\n        }\n\
    \    }\n    for x in lst {\n        if x > max {\n            max = x\n      \
    \  }\n    }\n    for x in lst {\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x > max {\n            max =\
    \ x\n        }\n    }\n    for x in lst {\n        if x > max {\n            max\
    \ = x\n        }\n    }\n    for x in lst {\n        if x > max {\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5,\
    \ 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmp740f6ej2.swift:175:46: error: expected '}' at end of brace statement\n\
    assert(skjkasdkd(lst: [127, 97, 8192]) == 10)\n                              \
    \               ^\n/tmp/tmp740f6ej2.swift:150:18: note: to match this opening\
    \ '{'\n    for x in lst {\n                 ^\n/tmp/tmp740f6ej2.swift:175:46:\
    \ error: expected '}' at end of brace statement\nassert(skjkasdkd(lst: [127, 97,\
    \ 8192]) == 10)\n                                             ^\n/tmp/tmp740f6ej2.swift:17:35:\
    \ note: to match this opening '{'\nfunc skjkasdkd(lst: [Int]) -> Int {\n     \
    \                             ^\n/tmp/tmp740f6ej2.swift:155:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmp740f6ej2.swift:19:9:\
    \ warning: initialization of variable 'sum' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var sum = 0\n    ~~~~^~~\n    _\n"
  stdout: ''
  timestamp: 1660014367
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var maxPrime = 0\n \
    \   for num in lst {\n        if num > max {\n            max = num\n        \
    \    maxPrime = num\n        }\n    }\n    var sum = 0\n    for num in lst {\n\
    \        if num == maxPrime {\n            sum += num\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst: [0, 3, 2,\
    \ 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst:\
    \ [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpnlkcquuc/tmpnlkcquuc.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc9e483c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc9e17ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc9e17a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc9e1797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnlkcquuc                        0x000055d18fcc3520 <unavailable> + 5408

    5    libc.so.6                          0x00002afc9e66f460 __libc_start_main +
    245

    6    tmpnlkcquuc                        0x000055d18fcc30d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp5rwd2y14/tmp5rwd2y14.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95b56d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95b53cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95b53cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95b53cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rwd2y14                        0x000055d7e0167520 <unavailable> + 5408

    5    libc.so.6                          0x00002b95b58c2460 __libc_start_main +
    245

    6    tmp5rwd2y14                        0x000055d7e01670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ num in lst {\n        if num > max {\n            max = num\n        }\n   \
    \ }\n    for num in lst {\n        if num == max {\n            sum += num\n \
    \       }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpnvgq9rhz/tmpnvgq9rhz.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad772f38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad772c2fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad772c2f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad772c2e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnvgq9rhz                        0x000056208c37e520 <unavailable> + 5408

    5    libc.so.6                          0x00002ad773124460 __libc_start_main +
    245

    6    tmpnvgq9rhz                        0x000056208c37e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ num in lst {\n        if num > max {\n            max = num\n        }\n   \
    \ }\n    for num in lst {\n        if num == max {\n            sum += num\n \
    \       }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpnvgq9rhz/tmpnvgq9rhz.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad772f38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad772c2fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad772c2f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad772c2e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnvgq9rhz                        0x000056208c37e520 <unavailable> + 5408

    5    libc.so.6                          0x00002ad773124460 __libc_start_main +
    245

    6    tmpnvgq9rhz                        0x000056208c37e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ num in lst {\n        if num > max {\n            max = num\n        }\n   \
    \ }\n    for num in lst {\n        if num == max {\n            sum += num\n \
    \       }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpnvgq9rhz/tmpnvgq9rhz.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad772f38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad772c2fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad772c2f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad772c2e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnvgq9rhz                        0x000056208c37e520 <unavailable> + 5408

    5    libc.so.6                          0x00002ad773124460 __libc_start_main +
    245

    6    tmpnvgq9rhz                        0x000056208c37e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014366
