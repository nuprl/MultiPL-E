language: swift
name: HumanEval_26_remove_duplicates
results:
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if\
    \ !uniqueNumbers.contains(number) {\n            uniqueNumbers.append(number)\n\
    \        }\n    }\n    return uniqueNumbers\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpi7m5ro00/tmpi7m5ro00.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b201078ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2010485b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2010485988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b20104847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi7m5ro00                        0x000055a8b1390891 <unavailable> + 6289

    5    libc.so.6                          0x00002b201097a460 __libc_start_main +
    245

    6    tmpi7m5ro00                        0x000055a8b1390249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824595
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if\
    \ !uniqueNumbers.contains(number) {\n            uniqueNumbers.append(number)\n\
    \        }\n    }\n    return uniqueNumbers\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpi7m5ro00/tmpi7m5ro00.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b201078ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2010485b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2010485988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b20104847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi7m5ro00                        0x000055a8b1390891 <unavailable> + 6289

    5    libc.so.6                          0x00002b201097a460 __libc_start_main +
    245

    6    tmpi7m5ro00                        0x000055a8b1390249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824595
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpbl7thecn.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpur0t8ioo.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpur0t8ioo.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpur0t8ioo.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpur0t8ioo.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpbl7thecn.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpbl7thecn.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpbl7thecn.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpur0t8ioo.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpbl7thecn.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpur0t8ioo.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpbl7thecn.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if\
    \ !uniqueNumbers.contains(number) {\n            uniqueNumbers.append(number)\n\
    \        }\n    }\n    return uniqueNumbers\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpi7m5ro00/tmpi7m5ro00.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b201078ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2010485b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2010485988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b20104847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi7m5ro00                        0x000055a8b1390891 <unavailable> + 6289

    5    libc.so.6                          0x00002b201097a460 __libc_start_main +
    245

    6    tmpi7m5ro00                        0x000055a8b1390249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824595
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpur0t8ioo.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if\
    \ !uniqueNumbers.contains(number) {\n            uniqueNumbers.append(number)\n\
    \        }\n    }\n    return uniqueNumbers\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpi7m5ro00/tmpi7m5ro00.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b201078ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2010485b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2010485988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b20104847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi7m5ro00                        0x000055a8b1390891 <unavailable> + 6289

    5    libc.so.6                          0x00002b201097a460 __libc_start_main +
    245

    6    tmpi7m5ro00                        0x000055a8b1390249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824595
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !unique.contains(number)\
    \ {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpl1evm205/tmpl1evm205.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b769a331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b769a028b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b769a028988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b769a0277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl1evm205                        0x00005588a2031891 <unavailable> + 6289

    5    libc.so.6                          0x00002b769a51d460 __libc_start_main +
    245

    6    tmpl1evm205                        0x00005588a2031249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824595
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !unique.contains(number)\
    \ {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpl1evm205/tmpl1evm205.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b769a331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b769a028b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b769a028988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b769a0277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl1evm205                        0x00005588a2031891 <unavailable> + 6289

    5    libc.so.6                          0x00002b769a51d460 __libc_start_main +
    245

    6    tmpl1evm205                        0x00005588a2031249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824595
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpbl7thecn.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpur0t8ioo.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !unique.contains(number)\
    \ {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpl1evm205/tmpl1evm205.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b769a331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b769a028b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b769a028988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b769a0277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl1evm205                        0x00005588a2031891 <unavailable> + 6289

    5    libc.so.6                          0x00002b769a51d460 __libc_start_main +
    245

    6    tmpl1evm205                        0x00005588a2031249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824595
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniques = [Int]()\n    for number in numbers {\n        if !uniques.contains(number)\
    \ {\n            uniques.append(number)\n        }\n    }\n    return uniques\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp9irh6ocv/tmp9irh6ocv.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b897e990c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b897e687b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b897e687988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b897e6867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9irh6ocv                        0x000055d152238891 <unavailable> + 6289

    5    libc.so.6                          0x00002b897eb7c460 __libc_start_main +
    245

    6    tmp9irh6ocv                        0x000055d152238249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    var seen = [Int]()\n    for number in numbers\
    \ {\n        if seen.contains(number) {\n            continue\n        }\n   \
    \     seen.append(number)\n        result.append(number)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp15je8rbb/tmp15je8rbb.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afbd5721c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afbd5418b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afbd5418988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afbd54177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp15je8rbb                        0x00005604088b2891 <unavailable> + 6289

    5    libc.so.6                          0x00002afbd590d460 __libc_start_main +
    245

    6    tmp15je8rbb                        0x00005604088b2249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824703
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if\
    \ !uniqueNumbers.contains(number) {\n            uniqueNumbers.append(number)\n\
    \        }\n    }\n    return uniqueNumbers\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpi7m5ro00/tmpi7m5ro00.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b201078ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2010485b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2010485988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b20104847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi7m5ro00                        0x000055a8b1390891 <unavailable> + 6289

    5    libc.so.6                          0x00002b201097a460 __libc_start_main +
    245

    6    tmpi7m5ro00                        0x000055a8b1390249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824595
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpbl7thecn.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !unique.contains(number)\
    \ {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpl1evm205/tmpl1evm205.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b769a331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b769a028b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b769a028988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b769a0277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl1evm205                        0x00005588a2031891 <unavailable> + 6289

    5    libc.so.6                          0x00002b769a51d460 __libc_start_main +
    245

    6    tmpl1evm205                        0x00005588a2031249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824595
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    var seen = [Int]()\n    for number in numbers\
    \ {\n        if seen.contains(number) {\n            continue\n        }\n   \
    \     seen.append(number)\n        result.append(number)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp15je8rbb/tmp15je8rbb.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afbd5721c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afbd5418b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afbd5418988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afbd54177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp15je8rbb                        0x00005604088b2891 <unavailable> + 6289

    5    libc.so.6                          0x00002afbd590d460 __libc_start_main +
    245

    6    tmp15je8rbb                        0x00005604088b2249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpbl7thecn.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpur0t8ioo.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !unique.contains(number)\
    \ {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpl1evm205/tmpl1evm205.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b769a331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b769a028b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b769a028988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b769a0277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl1evm205                        0x00005588a2031891 <unavailable> + 6289

    5    libc.so.6                          0x00002b769a51d460 __libc_start_main +
    245

    6    tmpl1evm205                        0x00005588a2031249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824595
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpbl7thecn.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpur0t8ioo.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpbl7thecn.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if\
    \ !uniqueNumbers.contains(number) {\n            uniqueNumbers.append(number)\n\
    \        }\n    }\n    return uniqueNumbers\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpi7m5ro00/tmpi7m5ro00.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b201078ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2010485b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2010485988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b20104847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi7m5ro00                        0x000055a8b1390891 <unavailable> + 6289

    5    libc.so.6                          0x00002b201097a460 __libc_start_main +
    245

    6    tmpi7m5ro00                        0x000055a8b1390249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824595
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpur0t8ioo.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    var seen: [Int: Bool] = [:]\n    for number\
    \ in numbers {\n        if seen[number] {\n            continue\n        }\n \
    \       seen[number] = true\n        result.append(number)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp2fj10t7z.swift:10:16: error: value of optional type 'Bool?' must\
    \ be unwrapped to a value of type 'Bool'\n        if seen[number] {\n        \
    \       ^\n/tmp/tmp2fj10t7z.swift:10:16: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n        if seen[number] {\n\
    \               ^\n                        ?? <#default value#>\n/tmp/tmp2fj10t7z.swift:10:16:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        if seen[number] {\n               ^\n                       !\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpbl7thecn.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpbl7thecn.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !unique.contains(number)\
    \ {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpl1evm205/tmpl1evm205.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b769a331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b769a028b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b769a028988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b769a0277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl1evm205                        0x00005588a2031891 <unavailable> + 6289

    5    libc.so.6                          0x00002b769a51d460 __libc_start_main +
    245

    6    tmpl1evm205                        0x00005588a2031249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824595
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !unique.contains(number)\
    \ {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpl1evm205/tmpl1evm205.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b769a331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b769a028b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b769a028988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b769a0277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl1evm205                        0x00005588a2031891 <unavailable> + 6289

    5    libc.so.6                          0x00002b769a51d460 __libc_start_main +
    245

    6    tmpl1evm205                        0x00005588a2031249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824595
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpur0t8ioo.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if\
    \ !uniqueNumbers.contains(number) {\n            uniqueNumbers.append(number)\n\
    \        }\n    }\n    return uniqueNumbers\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpi7m5ro00/tmpi7m5ro00.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b201078ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2010485b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2010485988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b20104847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi7m5ro00                        0x000055a8b1390891 <unavailable> + 6289

    5    libc.so.6                          0x00002b201097a460 __libc_start_main +
    245

    6    tmpi7m5ro00                        0x000055a8b1390249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824595
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique: [Int] = []\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpc8320bhu.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !unique.contains(number)\
    \ {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpl1evm205/tmpl1evm205.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b769a331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b769a028b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b769a028988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b769a0277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl1evm205                        0x00005588a2031891 <unavailable> + 6289

    5    libc.so.6                          0x00002b769a51d460 __libc_start_main +
    245

    6    tmpl1evm205                        0x00005588a2031249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824595
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if unique.contains(number)\
    \ {\n            continue\n        }\n        unique.append(number)\n    }\n \
    \   return unique\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmpupzt7qi2/tmpupzt7qi2.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab774b45c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab77483cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab77483c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab77483b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpupzt7qi2                        0x0000558a28cc4891 <unavailable> + 6289

    5    libc.so.6                          0x00002ab774d31460 __libc_start_main +
    245

    6    tmpupzt7qi2                        0x0000558a28cc4249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824703
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniques = [Int]()\n    for number in numbers {\n        if !uniques.contains(number)\
    \ {\n            uniques.append(number)\n        }\n    }\n    return uniques\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp9irh6ocv/tmp9irh6ocv.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b897e990c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b897e687b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b897e687988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b897e6867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9irh6ocv                        0x000055d152238891 <unavailable> + 6289

    5    libc.so.6                          0x00002b897eb7c460 __libc_start_main +
    245

    6    tmp9irh6ocv                        0x000055d152238249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    var seen = [Int]()\n    for number in numbers\
    \ {\n        if seen.contains(number) {\n            continue\n        }\n   \
    \     seen.append(number)\n        result.append(number)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp15je8rbb/tmp15je8rbb.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afbd5721c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afbd5418b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afbd5418988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afbd54177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp15je8rbb                        0x00005604088b2891 <unavailable> + 6289

    5    libc.so.6                          0x00002afbd590d460 __libc_start_main +
    245

    6    tmp15je8rbb                        0x00005604088b2249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824703
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if\
    \ !uniqueNumbers.contains(number) {\n            uniqueNumbers.append(number)\n\
    \        }\n    }\n    return uniqueNumbers\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpi7m5ro00/tmpi7m5ro00.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b201078ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2010485b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2010485988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b20104847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi7m5ro00                        0x000055a8b1390891 <unavailable> + 6289

    5    libc.so.6                          0x00002b201097a460 __libc_start_main +
    245

    6    tmpi7m5ro00                        0x000055a8b1390249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824595
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpur0t8ioo.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpur0t8ioo.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique: [Int] = []\n    for number in numbers {\n        if !unique.contains(number)\
    \ {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp4wawnt55/tmp4wawnt55.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9969a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad996698b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad996698988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9966977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4wawnt55                        0x000055ff3be44841 <unavailable> + 6209

    5    libc.so.6                          0x00002ad996b8d460 __libc_start_main +
    245

    6    tmp4wawnt55                        0x000055ff3be441f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniques = [Int]()\n    for number in numbers {\n        if !uniques.contains(number)\
    \ {\n            uniques.append(number)\n        }\n    }\n    return uniques\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp9irh6ocv/tmp9irh6ocv.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b897e990c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b897e687b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b897e687988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b897e6867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9irh6ocv                        0x000055d152238891 <unavailable> + 6289

    5    libc.so.6                          0x00002b897eb7c460 __libc_start_main +
    245

    6    tmp9irh6ocv                        0x000055d152238249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !unique.contains(number)\
    \ {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpl1evm205/tmpl1evm205.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b769a331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b769a028b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b769a028988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b769a0277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl1evm205                        0x00005588a2031891 <unavailable> + 6289

    5    libc.so.6                          0x00002b769a51d460 __libc_start_main +
    245

    6    tmpl1evm205                        0x00005588a2031249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824595
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    var seen = [Int]()\n    for number in numbers\
    \ {\n        if seen.contains(number) {\n            continue\n        }\n   \
    \     seen.append(number)\n        result.append(number)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp15je8rbb/tmp15je8rbb.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afbd5721c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afbd5418b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afbd5418988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afbd54177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp15je8rbb                        0x00005604088b2891 <unavailable> + 6289

    5    libc.so.6                          0x00002afbd590d460 __libc_start_main +
    245

    6    tmp15je8rbb                        0x00005604088b2249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824703
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    var seen = [Int]()\n    for number in numbers\
    \ {\n        if seen.contains(number) {\n            continue\n        }\n   \
    \     seen.append(number)\n        result.append(number)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp15je8rbb/tmp15je8rbb.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afbd5721c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afbd5418b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afbd5418988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afbd54177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp15je8rbb                        0x00005604088b2891 <unavailable> + 6289

    5    libc.so.6                          0x00002afbd590d460 __libc_start_main +
    245

    6    tmp15je8rbb                        0x00005604088b2249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824703
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !unique.contains(number)\
    \ {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpl1evm205/tmpl1evm205.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b769a331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b769a028b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b769a028988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b769a0277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl1evm205                        0x00005588a2031891 <unavailable> + 6289

    5    libc.so.6                          0x00002b769a51d460 __libc_start_main +
    245

    6    tmpl1evm205                        0x00005588a2031249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824595
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpbl7thecn.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !unique.contains(number)\
    \ {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpl1evm205/tmpl1evm205.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b769a331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b769a028b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b769a028988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b769a0277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl1evm205                        0x00005588a2031891 <unavailable> + 6289

    5    libc.so.6                          0x00002b769a51d460 __libc_start_main +
    245

    6    tmpl1evm205                        0x00005588a2031249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824595
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !unique.contains(number)\
    \ {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpl1evm205/tmpl1evm205.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b769a331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b769a028b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b769a028988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b769a0277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl1evm205                        0x00005588a2031891 <unavailable> + 6289

    5    libc.so.6                          0x00002b769a51d460 __libc_start_main +
    245

    6    tmpl1evm205                        0x00005588a2031249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824595
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpbl7thecn.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !unique.contains(number)\
    \ {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpl1evm205/tmpl1evm205.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b769a331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b769a028b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b769a028988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b769a0277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl1evm205                        0x00005588a2031891 <unavailable> + 6289

    5    libc.so.6                          0x00002b769a51d460 __libc_start_main +
    245

    6    tmpl1evm205                        0x00005588a2031249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824595
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpur0t8ioo.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !unique.contains(number)\
    \ {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpl1evm205/tmpl1evm205.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b769a331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b769a028b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b769a028988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b769a0277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl1evm205                        0x00005588a2031891 <unavailable> + 6289

    5    libc.so.6                          0x00002b769a51d460 __libc_start_main +
    245

    6    tmpl1evm205                        0x00005588a2031249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824595
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique: [Int] = []\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpc8320bhu.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    var seen = [Int]()\n    for number in numbers\
    \ {\n        if seen.contains(number) {\n            continue\n        }\n   \
    \     seen.append(number)\n        result.append(number)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp15je8rbb/tmp15je8rbb.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afbd5721c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afbd5418b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afbd5418988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afbd54177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp15je8rbb                        0x00005604088b2891 <unavailable> + 6289

    5    libc.so.6                          0x00002afbd590d460 __libc_start_main +
    245

    6    tmp15je8rbb                        0x00005604088b2249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if\
    \ !uniqueNumbers.contains(number) {\n            uniqueNumbers.append(number)\n\
    \        }\n    }\n    return uniqueNumbers\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpi7m5ro00/tmpi7m5ro00.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b201078ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2010485b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2010485988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b20104847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi7m5ro00                        0x000055a8b1390891 <unavailable> + 6289

    5    libc.so.6                          0x00002b201097a460 __libc_start_main +
    245

    6    tmpi7m5ro00                        0x000055a8b1390249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824595
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    var seen: [Int: Bool] = [:]\n    for number\
    \ in numbers {\n        if seen[number] {\n            continue\n        }\n \
    \       seen[number] = true\n        result.append(number)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp2fj10t7z.swift:10:16: error: value of optional type 'Bool?' must\
    \ be unwrapped to a value of type 'Bool'\n        if seen[number] {\n        \
    \       ^\n/tmp/tmp2fj10t7z.swift:10:16: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n        if seen[number] {\n\
    \               ^\n                        ?? <#default value#>\n/tmp/tmp2fj10t7z.swift:10:16:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        if seen[number] {\n               ^\n                       !\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    var seen: [Int: Bool] = [:]\n    for number\
    \ in numbers {\n        if seen[number] {\n            continue\n        }\n \
    \       seen[number] = true\n        result.append(number)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp2fj10t7z.swift:10:16: error: value of optional type 'Bool?' must\
    \ be unwrapped to a value of type 'Bool'\n        if seen[number] {\n        \
    \       ^\n/tmp/tmp2fj10t7z.swift:10:16: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n        if seen[number] {\n\
    \               ^\n                        ?? <#default value#>\n/tmp/tmp2fj10t7z.swift:10:16:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        if seen[number] {\n               ^\n                       !\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !unique.contains(number)\
    \ {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpl1evm205/tmpl1evm205.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b769a331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b769a028b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b769a028988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b769a0277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl1evm205                        0x00005588a2031891 <unavailable> + 6289

    5    libc.so.6                          0x00002b769a51d460 __libc_start_main +
    245

    6    tmpl1evm205                        0x00005588a2031249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824595
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if\
    \ !uniqueNumbers.contains(number) {\n            uniqueNumbers.append(number)\n\
    \        }\n    }\n    return uniqueNumbers\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpi7m5ro00/tmpi7m5ro00.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b201078ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2010485b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2010485988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b20104847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi7m5ro00                        0x000055a8b1390891 <unavailable> + 6289

    5    libc.so.6                          0x00002b201097a460 __libc_start_main +
    245

    6    tmpi7m5ro00                        0x000055a8b1390249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824595
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpbl7thecn.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if\
    \ !uniqueNumbers.contains(number) {\n            uniqueNumbers.append(number)\n\
    \        }\n    }\n    return uniqueNumbers\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpi7m5ro00/tmpi7m5ro00.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b201078ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2010485b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2010485988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b20104847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi7m5ro00                        0x000055a8b1390891 <unavailable> + 6289

    5    libc.so.6                          0x00002b201097a460 __libc_start_main +
    245

    6    tmpi7m5ro00                        0x000055a8b1390249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824595
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniques = [Int]()\n    for number in numbers {\n        if !uniques.contains(number)\
    \ {\n            uniques.append(number)\n        }\n    }\n    return uniques\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp9irh6ocv/tmp9irh6ocv.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b897e990c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b897e687b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b897e687988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b897e6867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9irh6ocv                        0x000055d152238891 <unavailable> + 6289

    5    libc.so.6                          0x00002b897eb7c460 __libc_start_main +
    245

    6    tmp9irh6ocv                        0x000055d152238249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !unique.contains(number)\
    \ {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpl1evm205/tmpl1evm205.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b769a331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b769a028b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b769a028988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b769a0277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl1evm205                        0x00005588a2031891 <unavailable> + 6289

    5    libc.so.6                          0x00002b769a51d460 __libc_start_main +
    245

    6    tmpl1evm205                        0x00005588a2031249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824595
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    var seen = [Int]()\n    for number in numbers\
    \ {\n        if seen.contains(number) {\n            continue\n        }\n   \
    \     seen.append(number)\n        result.append(number)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp15je8rbb/tmp15je8rbb.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afbd5721c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afbd5418b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afbd5418988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afbd54177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp15je8rbb                        0x00005604088b2891 <unavailable> + 6289

    5    libc.so.6                          0x00002afbd590d460 __libc_start_main +
    245

    6    tmp15je8rbb                        0x00005604088b2249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpur0t8ioo.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if\
    \ !uniqueNumbers.contains(number) {\n            uniqueNumbers.append(number)\n\
    \        }\n    }\n    return uniqueNumbers\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpi7m5ro00/tmpi7m5ro00.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b201078ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2010485b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2010485988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b20104847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi7m5ro00                        0x000055a8b1390891 <unavailable> + 6289

    5    libc.so.6                          0x00002b201097a460 __libc_start_main +
    245

    6    tmpi7m5ro00                        0x000055a8b1390249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824595
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    var seen = [Int]()\n    for number in numbers\
    \ {\n        if seen.contains(number) {\n            continue\n        }\n   \
    \     seen.append(number)\n        result.append(number)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp15je8rbb/tmp15je8rbb.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afbd5721c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afbd5418b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afbd5418988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afbd54177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp15je8rbb                        0x00005604088b2891 <unavailable> + 6289

    5    libc.so.6                          0x00002afbd590d460 __libc_start_main +
    245

    6    tmp15je8rbb                        0x00005604088b2249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpur0t8ioo.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique: [Int] = []\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpc8320bhu.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpbl7thecn.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if\
    \ !uniqueNumbers.contains(number) {\n            uniqueNumbers.append(number)\n\
    \        }\n    }\n    return uniqueNumbers\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpi7m5ro00/tmpi7m5ro00.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b201078ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2010485b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2010485988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b20104847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi7m5ro00                        0x000055a8b1390891 <unavailable> + 6289

    5    libc.so.6                          0x00002b201097a460 __libc_start_main +
    245

    6    tmpi7m5ro00                        0x000055a8b1390249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824595
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !unique.contains(number)\
    \ {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpl1evm205/tmpl1evm205.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b769a331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b769a028b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b769a028988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b769a0277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl1evm205                        0x00005588a2031891 <unavailable> + 6289

    5    libc.so.6                          0x00002b769a51d460 __libc_start_main +
    245

    6    tmpl1evm205                        0x00005588a2031249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824595
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !unique.contains(number)\
    \ {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpl1evm205/tmpl1evm205.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b769a331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b769a028b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b769a028988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b769a0277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl1evm205                        0x00005588a2031891 <unavailable> + 6289

    5    libc.so.6                          0x00002b769a51d460 __libc_start_main +
    245

    6    tmpl1evm205                        0x00005588a2031249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824595
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpbl7thecn.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !unique.contains(number)\
    \ {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpl1evm205/tmpl1evm205.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b769a331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b769a028b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b769a028988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b769a0277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl1evm205                        0x00005588a2031891 <unavailable> + 6289

    5    libc.so.6                          0x00002b769a51d460 __libc_start_main +
    245

    6    tmpl1evm205                        0x00005588a2031249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824595
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniques = [Int]()\n    for number in numbers {\n        if !uniques.contains(number)\
    \ {\n            uniques.append(number)\n        }\n    }\n    return uniques\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp9irh6ocv/tmp9irh6ocv.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b897e990c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b897e687b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b897e687988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b897e6867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9irh6ocv                        0x000055d152238891 <unavailable> + 6289

    5    libc.so.6                          0x00002b897eb7c460 __libc_start_main +
    245

    6    tmp9irh6ocv                        0x000055d152238249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if\
    \ !uniqueNumbers.contains(number) {\n            uniqueNumbers.append(number)\n\
    \        }\n    }\n    return uniqueNumbers\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpi7m5ro00/tmpi7m5ro00.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b201078ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2010485b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2010485988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b20104847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi7m5ro00                        0x000055a8b1390891 <unavailable> + 6289

    5    libc.so.6                          0x00002b201097a460 __libc_start_main +
    245

    6    tmpi7m5ro00                        0x000055a8b1390249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824595
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if\
    \ !uniqueNumbers.contains(number) {\n            uniqueNumbers.append(number)\n\
    \        }\n    }\n    return uniqueNumbers\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpi7m5ro00/tmpi7m5ro00.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b201078ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2010485b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2010485988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b20104847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi7m5ro00                        0x000055a8b1390891 <unavailable> + 6289

    5    libc.so.6                          0x00002b201097a460 __libc_start_main +
    245

    6    tmpi7m5ro00                        0x000055a8b1390249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824595
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpur0t8ioo.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpur0t8ioo.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpur0t8ioo.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: -4
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniques = [Int]()\n    for number in numbers {\n        if !uniques.contains(number)\
    \ {\n            uniques.append(number)\n        }\n    }\n    return uniques\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp9irh6ocv/tmp9irh6ocv.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b897e990c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b897e687b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b897e687988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b897e6867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9irh6ocv                        0x000055d152238891 <unavailable> + 6289

    5    libc.so.6                          0x00002b897eb7c460 __libc_start_main +
    245

    6    tmp9irh6ocv                        0x000055d152238249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpur0t8ioo.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpbl7thecn.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpbl7thecn.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp886kcyo6.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
- exit_code: 1
  program: "\n/// From an array of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpbl7thecn.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824703
