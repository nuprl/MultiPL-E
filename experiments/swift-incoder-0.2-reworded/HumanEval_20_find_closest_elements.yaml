name: HumanEval_20_find_closest_elements
language: swift
prompt: "\n/// From a supplied array of numbers (of length at least two) select and\
  \ return two that are the closest to each\n/// other and return them in order (smaller\
  \ number, larger number).\n/// >>> find_closest_elements(numbers: [1.0, 2.0, 3.0,\
  \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers: [1.0,\
  \ 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
  \ [Double]) -> (Double, Double) {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0,\
  \ 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
  \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
  \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
  \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
  \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
completions: ["    guard numbers.count >= 2 else {\n        return (0.0,0.0)\n   \
    \ }\n    var smallest = numbers[0]\n    var largest = numbers[0]\n    for i in\
    \ 1..numbers.count {\n        if numbers[i] < smallest {\n            smallest\
    \ = numbers[i]\n        }\n        if numbers[i] > largest {\n            largest\
    \ = numbers[i]\n        }\n    }\n    return (smallest, largest)", "    var smallest\
    \ = Double(Int.max)\n    var largest = Double(Int.min)\n    for i in 0..<numbers.count\
    \ {\n        if numbers[i] < smallest {\n            smallest = numbers[i]\n \
    \       }\n        if numbers[i] > largest {\n            largest = numbers[i]\n\
    \        }\n    }\n    return (smallest, largest)", "    let sortedNumbers = numbers.sorted()\n\
    \    var closest1 = sortedNumbers[0]\n    var closest2 = sortedNumbers[0]\n  \
    \  for number in sortedNumbers {\n        if number < closest1 {\n           \
    \ closest1 = number\n        } else if number > closest2 {\n            closest2\
    \ = number\n        }\n    }\n    return (closest1, closest2)", "    let smallest\
    \ = numbers[0]\n    let largest = numbers[0]\n    for i in 1..<numbers.count {\n\
    \        if numbers[i] < smallest {\n            smallest = numbers[i]\n     \
    \   } else if numbers[i] > largest {\n            largest = numbers[i]\n     \
    \   }\n    }\n    return (smallest, largest)", "    let smallest = min(numbers)\n\
    \    let largest = max(numbers)\n    return (smallest, largest)", "    let min1\
    \ = min(numbers)\n    let max1 = max(numbers)\n    let min2 = min(min1, max1)\n\
    \    let max2 = max(min1, max1)\n    return (min2, max2)", "    let smallest =\
    \ numbers[0]\n    let largest = numbers[0]\n    for number in numbers {\n    \
    \    if number < smallest {\n            smallest = number\n        }\n      \
    \  if number > largest {\n            largest = number\n        }\n    }\n   \
    \ return (smallest, largest)", "    var smallest = numbers[0]\n    var largest\
    \ = numbers[0]\n    for number in numbers {\n        if number < smallest {\n\
    \            smallest = number\n        }\n        if number > largest {\n   \
    \         largest = number\n        }\n    }\n    return (smallest, largest)",
  "    let min1 = numbers.min()\n    let max1 = numbers.max()\n    let min2 = numbers.min()\n\
    \    let max2 = numbers.max()\n    if min1 == max1 {\n        return (min1, min2)\n\
    \    }\n    if min2 == max2 {\n        return (min2, min1)\n    }\n    if min1\
    \ < min2 {\n        return (min1, max2)\n    }\n    if min2 < min1 {\n       \
    \ return (min2, max1)\n    }\n    if max1 > max2 {\n        return (max1, max2)\n\
    \    }\n    if max2 > max1 {\n        return (max2, max1)\n    }\n    return (min1,\
    \ max2)", "    let smallest = min(numbers)\n    let largest = max(numbers)\n \
    \   return (smallest, largest)", "    guard numbers.count >= 2 else {\n      \
    \  return (0.0,0.0)\n    }\n    let min1 = numbers[0]\n    let max1 = numbers[0]\n\
    \    let min2 = numbers[0]\n    let max2 = numbers[0]\n    for i in 1..<numbers.count\
    \ {\n        let cur = numbers[i]\n        if cur < min1 {\n            min1 =\
    \ cur\n        } else if cur > max1 {\n            max1 = cur\n        }\n   \
    \     if cur < min2 {\n            min2 = cur\n        } else if cur > max2 {\n\
    \            max2 = cur\n        }\n    }\n    return (min1, max1)", "    guard\
    \ numbers.count > 1 else {\n        return (0.0,0.0)\n    }\n    let sortedNumbers\
    \ = numbers.sorted()\n    let closestToFirst = sortedNumbers[0]\n    let closestToSecond\
    \ = sortedNumbers[1]\n    return (closestToFirst, closestToSecond)", "    guard\
    \ numbers.count > 1 else {\n        return (0.0,0.0)\n    }\n    guard numbers.count\
    \ >= 2 else {\n        return (0.0,0.0)\n    }\n    var smallest = numbers[0]\n\
    \    var largest = numbers[0]\n    for i in 1..numbers.count {\n        if numbers[i]\
    \ > largest {\n            largest = numbers[i]\n        }\n        if numbers[i]\
    \ < smallest {\n            smallest = numbers[i]\n        }\n    }\n    return\
    \ (smallest, largest)", "    guard numbers.count >= 2 else {\n        return (0.0,0.0)\n\
    \    }\n    \n    let smallest = numbers[0]\n    let largest = numbers[0]\n  \
    \  \n    for number in numbers {\n        if number < smallest {\n           \
    \ smallest = number\n        }\n        if number > largest {\n            largest\
    \ = number\n        }\n    }\n    \n    return (smallest, largest)", "    let\
    \ smallest = numbers[0]\n    let largest = numbers[0]\n    for number in numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return (smallest, largest)", "    let smallest = min(numbers)\n    let largest\
    \ = max(numbers)\n    return (smallest, largest)", "    let min1 = min(numbers)\n\
    \    let max1 = max(numbers)\n    let min2 = min(numbers.dropLast())\n    let\
    \ max2 = max(numbers.dropFirst())\n    return (min1, max1), (min2, max2)", " \
    \   var smallestDifference = Double.infinity\n    var smallestDifferenceIndex\
    \ = -1\n    var smallestDifferenceValue = Double.infinity\n\n    for i in 0..<numbers.count\
    \ {\n        let difference = abs(numbers[i] - numbers[smallestDifferenceIndex])\n\
    \        if difference < smallestDifference {\n            smallestDifference\
    \ = difference\n            smallestDifferenceIndex = i\n            smallestDifferenceValue\
    \ = numbers[i]\n        }\n    }\n\n    return (numbers[smallestDifferenceIndex],\
    \ numbers[smallestDifferenceIndex])", "    let smallest = numbers[0]\n    let\
    \ largest = numbers[0]\n    for i in 1..<numbers.count {\n        if numbers[i]\
    \ < smallest {\n            smallest = numbers[i]\n        }\n        if numbers[i]\
    \ > largest {\n            largest = numbers[i]\n        }\n    }\n    return\
    \ (smallest, largest)", "    let min1 = numbers.min()\n    let max1 = numbers.max()\n\
    \    let min2 = numbers.min()\n    let max2 = numbers.max()\n    if min1 == max1\
    \ {\n        return (min1, min2)\n    }\n    if min2 == max2 {\n        return\
    \ (min2, min1)\n    }\n    if min1 < min2 {\n        return (min1, max2)\n   \
    \ }\n    return (min2, max1)", "    let min = min(numbers)\n    let max = max(numbers)\n\
    \    return (min, max)", "    let smallest = min(numbers)\n    let largest = max(numbers)\n\
    \    return (smallest, largest)", "    guard numbers.count >= 2 else {\n     \
    \   return (0.0,0.0)\n    }\n    \n    var smallest = numbers[0]\n    var largest\
    \ = numbers[0]\n    \n    for i in 1..numbers.count {\n        if numbers[i] >\
    \ largest {\n            largest = numbers[i]\n        }\n        if numbers[i]\
    \ < smallest {\n            smallest = numbers[i]\n        }\n    }\n    return\
    \ (smallest, largest)", "    guard numbers.count >= 2 else {\n        return (0.0,0.0)\n\
    \    }\n    let smallest = numbers[0]\n    let largest = numbers[0]\n    for i\
    \ in 1..<numbers.count {\n        if numbers[i] < smallest {\n            smallest\
    \ = numbers[i]\n        }\n        if numbers[i] > largest {\n            largest\
    \ = numbers[i]\n        }\n    }\n    return (smallest, largest)", "    let smallest\
    \ = numbers[0]\n    let largest = numbers[0]\n    for number in numbers {\n  \
    \      if number < smallest {\n            smallest = number\n        }\n    \
    \    if number > largest {\n            largest = number\n        }\n    }\n \
    \   return (smallest, largest)", "    let smallest = numbers[0]\n    let largest\
    \ = numbers[0]\n    for i in 1..<numbers.count {\n        if numbers[i] < smallest\
    \ {\n            smallest = numbers[i]\n        } else if numbers[i] > largest\
    \ {\n            largest = numbers[i]\n        }\n    }\n    return (smallest,\
    \ largest)", "    let min = min(numbers)\n    let max = max(numbers)\n    return\
    \ (min, max)", "    let sortedNumbers = numbers.sorted()\n    let closestIndex\
    \ = sortedNumbers.firstIndex({ $0 > sortedNumbers.last() })\n    return (sortedNumbers[closestIndex],\
    \ sortedNumbers[sortedNumbers.firstIndex({ $0 > sortedNumbers[closestIndex] })!])",
  "    guard numbers.count >= 2 else {\n        return (0.0,0.0)\n    }\n    let smallest\
    \ = numbers[0]\n    let largest = numbers[0]\n    for i in 1..<numbers.count {\n\
    \        if numbers[i] < smallest {\n            smallest = numbers[i]\n     \
    \   }\n        if numbers[i] > largest {\n            largest = numbers[i]\n \
    \       }\n    }\n    return (smallest, largest)", "    let sortedNumbers = numbers.sorted()\n\
    \    if sortedNumbers.count < 2 {\n        return (sortedNumbers[0], sortedNumbers[1])\n\
    \    }\n    let closestToFirst = sortedNumbers.first\n    let closestToSecond\
    \ = sortedNumbers.last\n    return (closestToFirst, closestToSecond)", "    let\
    \ min = min(numbers)\n    let max = max(numbers)\n    return (min, max)", "  \
    \  let smallest = min(numbers)\n    let largest = max(numbers)\n    return (smallest,\
    \ largest)", "    let min = numbers[0]\n    let max = numbers[0]\n    for number\
    \ in numbers {\n        if number < min {\n            min = number\n        }\
    \ else if number > max {\n            max = number\n        }\n    }\n    return\
    \ (min, max)", "    var smallest = Double.max\n    var largest = Double.min\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)", "    let smallest = numbers.min()\n\
    \    let largest = numbers.max()\n    return (smallest, largest)", "    let min\
    \ = min(numbers)\n    let max = max(numbers)\n    return (min, max)", "    guard\
    \ numbers.count >= 2 else {\n        return (0.0,0.0)\n    }\n    var smallest\
    \ = numbers[0]\n    var largest = numbers[0]\n    for number in numbers {\n  \
    \      if number < smallest {\n            smallest = number\n        }\n    \
    \    if number > largest {\n            largest = number\n        }\n    }\n \
    \   return (smallest, largest)", "    guard numbers.count >= 2 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 3 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 4 else { return (numbers[0], numbers[0]) }\n \
    \   guard numbers.count >= 5 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count >= 6 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ >= 7 else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 8\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 9 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 10 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count >= 11 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 12 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 13 else { return (numbers[0], numbers[0]) }\n\
    \    guard numbers.count >= 14 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count >= 15 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ >= 16 else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 17\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 18 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 19 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count >= 20 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 21 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 22 else { return (numbers[0], numbers[0]) }\n\
    \    guard numbers.count >= 23 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count >= 24 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ >= 25 else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 26\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 27 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 28 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count >= 29 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 30 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 31 else { return (numbers[0], numbers[0]) }\n\
    \    guard ", "    let smallest = min(numbers)\n    let largest = max(numbers)\n\
    \    return (smallest, largest)", "    let min1 = min(numbers)\n    let max1 =\
    \ max(numbers)\n    let min2 = min(min1, max1)\n    let max2 = max(min1, max1)\n\
    \    return (min2, max2)", "    guard numbers.count > 1 else {\n        return\
    \ (0.0,0.0)\n    }\n    let min1 = numbers[0]\n    let max1 = numbers[0]\n   \
    \ let min2 = numbers[0]\n    let max2 = numbers[0]\n    for i in 1..<numbers.count\
    \ {\n        let curr = numbers[i]\n        if curr < min1 {\n            min1\
    \ = curr\n        } else if curr > max1 {\n            max1 = curr\n        }\n\
    \        if curr < min2 {\n            min2 = curr\n        } else if curr > max2\
    \ {\n            max2 = curr\n        }\n    }\n    return (min1, max1)", "  \
    \  var smallest = numbers[0]\n    var largest = numbers[0]\n    for number in\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    return (smallest, largest)", "    let sortedNumbers = numbers.sorted()\n\
    \    var closest1 = sortedNumbers[0]\n    var closest2 = sortedNumbers[0]\n  \
    \  for number in sortedNumbers {\n        if number < closest1 {\n           \
    \ closest1 = number\n        } else if number > closest2 {\n            closest2\
    \ = number\n        }\n    }\n    return (closest1, closest2)", "    var smallest\
    \ = Double(Int.max)\n    var largest = Double(Int.min)\n    for number in numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return (smallest, largest)", "    var smallest = numbers[0]\n    var largest\
    \ = numbers[0]\n    for i in 1..<numbers.count {\n        if numbers[i] < smallest\
    \ {\n            smallest = numbers[i]\n        }\n        if numbers[i] > largest\
    \ {\n            largest = numbers[i]\n        }\n    }\n    return (smallest,\
    \ largest)", "    let min = numbers[0]\n    let max = numbers[0]\n    for i in\
    \ 1..<numbers.count {\n        if numbers[i] > max {\n            max = numbers[i]\n\
    \        }\n        if numbers[i] < min {\n            min = numbers[i]\n    \
    \    }\n    }\n    return (min, max)", "    var smallest = numbers[0]\n    var\
    \ largest = numbers[0]\n    for number in numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    return (smallest, largest)",
  "    let min = numbers[0]\n    let max = numbers[0]\n    for i in 1..<numbers.count\
    \ {\n        if numbers[i] > max {\n            max = numbers[i]\n        }\n\
    \        if numbers[i] < min {\n            min = numbers[i]\n        }\n    }\n\
    \    return (min, max)", "    let min1 = numbers.min()\n    let max1 = numbers.max()\n\
    \    let min2 = numbers.min()\n    let max2 = numbers.max()\n    if min1 < min2\
    \ {\n        return (min2, min1)\n    }\n    if max1 > max2 {\n        return\
    \ (max2, max1)\n    }\n    return (min1, max1)", "    let smallest = min(numbers)\n\
    \    let largest = max(numbers)\n    return (smallest, largest)", "    var smallest\
    \ = numbers[0]\n    var largest = numbers[0]\n    for number in numbers {\n  \
    \      if number < smallest {\n            smallest = number\n        }\n    \
    \    if number > largest {\n            largest = number\n        }\n    }\n \
    \   return (smallest, largest)", "    guard numbers.count > 1 else {\n       \
    \ return (0.0,0.0)\n    }\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for i in 1..numbers.count {\n        if numbers[i] < smallest {\n       \
    \     smallest = numbers[i]\n        }\n        if numbers[i] > largest {\n  \
    \          largest = numbers[i]\n        }\n    }\n    return (smallest, largest)",
  "    let sortedNumbers = numbers.sorted()\n    var closest1 = sortedNumbers[0]\n\
    \    var closest2 = sortedNumbers[0]\n    for number in sortedNumbers {\n    \
    \    if number < closest1 {\n            closest1 = number\n        } else if\
    \ number > closest2 {\n            closest2 = number\n        }\n    }\n    return\
    \ (closest1, closest2)", "    let smallest = numbers[0]\n    let largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)", "    let min = min(numbers)\n\
    \    let max = max(numbers)\n    return (min, max)", "    let smallest = min(numbers)\n\
    \    let largest = max(numbers)\n    return (smallest, largest)", "    let smallest\
    \ = numbers[0]\n    let largest = numbers[0]\n    for number in numbers {\n  \
    \      if number < smallest {\n            smallest = number\n        }\n    \
    \    if number > largest {\n            largest = number\n        }\n    }\n \
    \   return (smallest, largest)", "    let min1 = min(numbers)\n    let max1 =\
    \ max(numbers)\n    let min2 = min(numbers.dropFirst())\n    let max2 = max(numbers.dropFirst())\n\
    \    return (min1, max1), (min2, max2)", "    let smallest = numbers[0]\n    let\
    \ largest = numbers[0]\n    for number in numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    return (smallest, largest)",
  "    let min = min(numbers)\n    let max = max(numbers)\n    return (min, max)",
  "    let min = numbers[0]\n    let max = numbers[0]\n    for number in numbers {\n\
    \        if number < min {\n            min = number\n        } else if number\
    \ > max {\n            max = number\n        }\n    }\n    return (min, max)",
  "    let min = numbers[0]\n    let max = numbers[0]\n    for i in 1..<numbers.count\
    \ {\n        if numbers[i] > max {\n            max = numbers[i]\n        }\n\
    \        if numbers[i] < min {\n            min = numbers[i]\n        }\n    }\n\
    \    return (min, max)", "    let min = min(numbers)\n    let max = max(numbers)\n\
    \    return (min, max)", "    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)", "    let smallest = numbers[0]\n\
    \    let largest = numbers[0]\n    for i in 1..<numbers.count {\n        if numbers[i]\
    \ > largest {\n            largest = numbers[i]\n        }\n        if numbers[i]\
    \ < smallest {\n            smallest = numbers[i]\n        }\n    }\n    return\
    \ (smallest, largest)", "    var smallestDifference = Double.infinity\n    var\
    \ smallestDifferenceIndex = -1\n    var smallestDifferenceValue = Double.infinity\n\
    \    var smallestDifferenceValueIndex = -1\n    var smallestDifferenceValue2 =\
    \ Double.infinity\n    var smallestDifferenceValue2Index = -1\n    var smallestDifferenceValue3\
    \ = Double.infinity\n    var smallestDifferenceValue3Index = -1\n    var smallestDifferenceValue4\
    \ = Double.infinity\n    var smallestDifferenceValue4Index = -1\n    var smallestDifferenceValue5\
    \ = Double.infinity\n    var smallestDifferenceValue5Index = -1\n    var smallestDifferenceValue6\
    \ = Double.infinity\n    var smallestDifferenceValue6Index = -1\n    var smallestDifferenceValue7\
    \ = Double.infinity\n    var smallestDifferenceValue7Index = -1\n    var smallestDifferenceValue8\
    \ = Double.infinity\n    var smallestDifferenceValue8Index = -1\n    var smallestDifferenceValue9\
    \ = Double.infinity\n    var smallestDifferenceValue9Index = -1\n    var smallestDifferenceValue10\
    \ = Double.infinity\n    var smallestDifferenceValue10Index = -1\n    var smallestDifferenceValue11\
    \ = Double.infinity\n    var smallestDifferenceValue11Index = -1\n    var smallestDifferenceValue12\
    \ = Double.infinity\n    var smallestDifferenceValue12Index = -1\n    var smallestDifferenceValue13\
    \ = Double.infinity\n    var smallestDifferenceValue13Index = -1\n    var smallestDifferenceValue14\
    \ = Double.infinity\n    var smallestDifferenceValue14Index = -1\n    var smallestDifferenceValue15\
    \ = Double.infinity\n    var smallestDifferenceValue15Index = -1\n    var smallestDifferenceValue16\
    \ = Double.infinity\n    var smallestDifferenceValue16Index = -1\n    var smallestDifferenceValue17\
    \ = Double.infinity\n    var smallestDifferenceValue17Index = -1\n    var smallestDifferenceValue18\
    \ = Double.infinity\n    var smallestDifferenceValue18Index = -1\n    var smallestDifferenceValue19\
    \ = Double.infinity\n    var smallestDifferenceValue19Index = -1\n    var smallestDifferenceValue20\
    \ = Double.infinity\n    var smallestDifferenceValue20Index = -1\n    var smallestDifferenceValue21\
    \ = Double.infinity\n    var smallestDifferenceValue21Index = -1\n    var smallestDifferenceValue22\
    \ = Double.infinity\n    var smallestDifferenceValue22Index = -1\n    var smallestDifferenceValue23\
    \ = Double.infinity\n    var smallestDifferenceValue23Index = -1\n    var smallestDifferenceValue24\
    \ = Double.infinity\n    var smallestDifferenceValue24Index = -1\n    var smallestDifferenceValue",
  "    var smallest: Double = Double.max\n    var largest: Double = Double.min\n \
    \   for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)", "    let smallest = min(numbers)\n\
    \    let largest = max(numbers)\n    return (smallest, largest)", "    let smallest\
    \ = min(numbers)\n    let largest = max(numbers)\n    return (smallest, largest)",
  "    let smallest = numbers.min()\n    let largest = numbers.max()\n    return (smallest,\
    \ largest)", "    let smallest = min(numbers)\n    let largest = max(numbers)\n\
    \    return (smallest, largest)", "    var smallest = numbers[0]\n    var largest\
    \ = numbers[0]\n    for number in numbers {\n        if number < smallest {\n\
    \            smallest = number\n        }\n        if number > largest {\n   \
    \         largest = number\n        }\n    }\n    return (smallest, largest)",
  "    let smallest = min(numbers)\n    let largest = max(numbers)\n    return (smallest,\
    \ largest)", "    let sortedNumbers = numbers.sorted()\n    let closestIndex =\
    \ sortedNumbers.firstIndex({ $0 > sortedNumbers.last() })\n    let closestNumber\
    \ = sortedNumbers[closestIndex]\n    return (closestNumber, sortedNumbers[closestIndex\
    \ + 1])", "    let smallest = min(numbers)\n    let largest = max(numbers)\n \
    \   return (smallest, largest)", "    guard numbers.count >= 2 else { return (numbers[0],\
    \ numbers[0]) }\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for i in 1..numbers.count {\n        if numbers[i] > largest {\n        \
    \    largest = numbers[i]\n        } else if numbers[i] < smallest {\n       \
    \     smallest = numbers[i]\n        }\n    }\n    return (smallest, largest)",
  "    let min = min(numbers)\n    let max = max(numbers)\n    return (min, max)",
  "    let smallest = min(numbers)\n    let largest = max(numbers)\n    return (smallest,\
    \ largest)", "    let smallest = min(numbers)\n    let largest = max(numbers)\n\
    \    return (smallest, largest)", "    let smallest = min(numbers)\n    let largest\
    \ = max(numbers)\n    return (smallest, largest)", "    guard numbers.count >\
    \ 1 else { return (numbers[0], numbers[0]) }\n    guard numbers.count > 2 else\
    \ { return (numbers[0], numbers[1]) }\n    guard numbers.count > 3 else { return\
    \ (numbers[0], numbers[2]) }\n    guard numbers.count > 4 else { return (numbers[0],\
    \ numbers[3]) }\n    guard numbers.count > 5 else { return (numbers[0], numbers[4])\
    \ }\n    guard numbers.count > 6 else { return (numbers[0], numbers[5]) }\n  \
    \  guard numbers.count > 7 else { return (numbers[0], numbers[6]) }\n    guard\
    \ numbers.count > 8 else { return (numbers[0], numbers[7]) }\n    guard numbers.count\
    \ > 9 else { return (numbers[0], numbers[8]) }\n    guard numbers.count > 10 else\
    \ { return (numbers[0], numbers[9]) }\n    guard numbers.count > 11 else { return\
    \ (numbers[0], numbers[10]) }\n    guard numbers.count > 12 else { return (numbers[0],\
    \ numbers[11]) }\n    guard numbers.count > 13 else { return (numbers[0], numbers[12])\
    \ }\n    guard numbers.count > 14 else { return (numbers[0], numbers[13]) }\n\
    \    guard numbers.count > 15 else { return (numbers[0], numbers[14]) }\n    guard\
    \ numbers.count > 16 else { return (numbers[0], numbers[15]) }\n    guard numbers.count\
    \ > 17 else { return (numbers[0], numbers[16]) }\n    guard numbers.count > 18\
    \ else { return (numbers[0], numbers[17]) }\n    guard numbers.count > 19 else\
    \ { return (numbers[0], numbers[18]) }\n    guard numbers.count > 20 else { return\
    \ (numbers[0], numbers[19]) }\n    guard numbers.count > 21 else { return (numbers[0],\
    \ numbers[20]) }\n    guard numbers.count > 22 else { return (numbers[0], numbers[21])\
    \ }\n    guard numbers.count > 23 else { return (numbers[0], numbers[22]) }\n\
    \    guard numbers.count > 24 else { return (numbers[0], numbers[23]) }\n    guard\
    \ numbers.count > 25 else { return (numbers[0], numbers[24]) }\n    guard numbers.count\
    \ > 26 else { return (numbers[0], numbers[25]) }\n    guard numbers.count > 27\
    \ else { return (numbers[0], numbers[26]) }\n    guard numbers.count > 28 else\
    \ { return (numbers[0], numbers[27]) }\n    guard numbers.count > 29 else { return\
    \ (numbers[0], number", "    let min = min(numbers)\n    let max = max(numbers)\n\
    \    return (min, max)", "    let min1 = numbers.min()\n    let max1 = numbers.max()\n\
    \    let min2 = numbers.min()\n    let max2 = numbers.max()\n    if min1 < min2\
    \ {\n        return (min1, min2)\n    }\n    if max1 > max2 {\n        return\
    \ (max1, max2)\n    }\n    return (min2, max2)", "    var smallest = numbers[0]\n\
    \    var largest = numbers[0]\n    for number in numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    return (smallest,\
    \ largest)", "    let min1 = numbers.min()\n    let max1 = numbers.max()\n   \
    \ let min2 = numbers.min()\n    let max2 = numbers.max()\n    if min1 < min2 {\n\
    \        return (min1, min2)\n    }\n    if max1 > max2 {\n        return (max1,\
    \ max2)\n    }\n    return (min2, max2)", "    let sortedNumbers = numbers.sorted()\n\
    \    if sortedNumbers.count < 2 {\n        return (sortedNumbers[0], sortedNumbers[0])\n\
    \    }\n    let closestToFirst = sortedNumbers.first!\n    let closestToSecond\
    \ = sortedNumbers.last!\n    return (closestToFirst, closestToSecond)", "    guard\
    \ numbers.count > 1 else {\n        return (0.0,0.0)\n    }\n    var smallest\
    \ = numbers[0]\n    var largest = numbers[0]\n    for i in 1..numbers.count {\n\
    \        if numbers[i] < smallest {\n            smallest = numbers[i]\n     \
    \   }\n        if numbers[i] > largest {\n            largest = numbers[i]\n \
    \       }\n    }\n    return (smallest, largest)", "    guard numbers.count >=\
    \ 2 else {\n        return (0.0,0.0)\n    }\n    var smallest = numbers[0]\n \
    \   var largest = numbers[0]\n    for i in 1..<numbers.count {\n        if numbers[i]\
    \ < smallest {\n            smallest = numbers[i]\n        }\n        if numbers[i]\
    \ > largest {\n            largest = numbers[i]\n        }\n    }\n    return\
    \ (smallest, largest)", "    guard numbers.count >= 2 else {\n        return (0.0,0.0)\n\
    \    }\n    var smallest = numbers[0]\n    var largest = numbers[0]\n    for i\
    \ in 1..numbers.count {\n        if numbers[i] < smallest {\n            smallest\
    \ = numbers[i]\n        }\n        if numbers[i] > largest {\n            largest\
    \ = numbers[i]\n        }\n    }\n    return (smallest, largest)", "    let min1\
    \ = numbers[0]\n    let max1 = numbers[0]\n    let min2 = numbers[0]\n    let\
    \ max2 = numbers[0]\n    for number in numbers {\n        if number < min1 {\n\
    \            min1 = number\n        } else if number > max1 {\n            max1\
    \ = number\n        }\n        if number < min2 {\n            min2 = number\n\
    \        } else if number > max2 {\n            max2 = number\n        }\n   \
    \ }\n    return (min1, max1)", "    guard numbers.count >= 2 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 3 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 4 else { return (numbers[0], numbers[0]) }\n \
    \   guard numbers.count >= 5 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count >= 6 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ >= 7 else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 8\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 9 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 10 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count >= 11 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 12 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 13 else { return (numbers[0], numbers[0]) }\n\
    \    guard numbers.count >= 14 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count >= 15 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ >= 16 else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 17\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 18 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 19 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count >= 20 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 21 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 22 else { return (numbers[0], numbers[0]) }\n\
    \    guard numbers.count >= 23 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count >= 24 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ >= 25 else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 26\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 27 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 28 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count >= 29 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 30 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 31 else { return (numbers[0], numbers[0]) }\n\
    \    guard ", "    guard numbers.count >= 2 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 3 else { return (numbers[0], numbers[0]) }\n \
    \   guard numbers.count >= 4 else { return (numbers[0], numbers[0]) }\n\n    var\
    \ smallest = numbers[0]\n    var largest = numbers[0]\n    var smallestIndex =\
    \ -1\n    var largestIndex = -1\n\n    for i in 1..<numbers.count {\n        if\
    \ numbers[i] > largest {\n            largest = numbers[i]\n            largestIndex\
    \ = i\n        }\n        if numbers[i] < smallest {\n            smallest = numbers[i]\n\
    \            smallestIndex = i\n        }\n    }\n\n    return (numbers[smallestIndex],\
    \ numbers[largestIndex])", "    guard numbers.count >= 2 else { return (numbers[0],\
    \ numbers[0]) }\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for i in 1..numbers.count {\n        if numbers[i] < smallest {\n       \
    \     smallest = numbers[i]\n        }\n        if numbers[i] > largest {\n  \
    \          largest = numbers[i]\n        }\n    }\n    return (smallest, largest)",
  "    guard numbers.count > 1 else {\n        return (0.0,0.0)\n    }\n    var smallest\
    \ = numbers[0]\n    var largest = numbers[0]\n    for i in 1..<numbers.count {\n\
    \        if numbers[i] < smallest {\n            smallest = numbers[i]\n     \
    \   }\n        if numbers[i] > largest {\n            largest = numbers[i]\n \
    \       }\n    }\n    return (smallest, largest)", "    let smallest = min(numbers)\n\
    \    let largest = max(numbers)\n    return (smallest, largest)", "    let smallest\
    \ = min(numbers)\n    let largest = max(numbers)\n    return (smallest, largest)",
  "    let min1 = numbers.min()\n    let max1 = numbers.max()\n    let min2 = numbers.min()\n\
    \    let max2 = numbers.max()\n    if min1 < min2 {\n        return (min1, min2)\n\
    \    }\n    if max1 > max2 {\n        return (max1, max2)\n    }\n    return (min1,\
    \ max2)", "    let min1 = min(numbers)\n    let max1 = max(numbers)\n    let min2\
    \ = min(min1, max1)\n    let max2 = max(min1, max1)\n    return (min2, max2)",
  "    let smallest = numbers[0]\n    let largest = numbers[0]\n    for i in 1..<numbers.count\
    \ {\n        if numbers[i] < smallest {\n            smallest = numbers[i]\n \
    \       }\n        if numbers[i] > largest {\n            largest = numbers[i]\n\
    \        }\n    }\n    return (smallest, largest)", "    let smallest = min(numbers)\n\
    \    let largest = max(numbers)\n    return (smallest, largest)", "    let smallest\
    \ = min(numbers)\n    let largest = max(numbers)\n    return (smallest, largest)",
  "    guard numbers.count > 1 else {\n        return (0.0,0.0)\n    }\n    var smallest\
    \ = numbers[0]\n    var largest = numbers[0]\n    for number in numbers {\n  \
    \      if number < smallest {\n            smallest = number\n        }\n    \
    \    if number > largest {\n            largest = number\n        }\n    }\n \
    \   return (smallest, largest)", "    let smallest = min(numbers)\n    let largest\
    \ = max(numbers)\n    return (smallest, largest)", "    var smallest = Double.max\n\
    \    var largest = Double.min\n    for number in numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    return (smallest,\
    \ largest)", "    guard numbers.count > 1 else {\n        return (0.0,0.0)\n \
    \   }\n    var smallest = numbers[0]\n    var largest = numbers[0]\n    for number\
    \ in numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return (smallest, largest)", "    let min = min(numbers)\n\
    \    let max = max(numbers)\n    return (min, max)", "    guard numbers.count\
    \ > 1 else {\n        return (0.0,0.0)\n    }\n    var smallest = numbers[0]\n\
    \    var largest = numbers[0]\n    for i in 1..numbers.count {\n        if numbers[i]\
    \ < smallest {\n            smallest = numbers[i]\n        }\n        if numbers[i]\
    \ > largest {\n            largest = numbers[i]\n        }\n    }\n    return\
    \ (smallest, largest)", "    let smallest = numbers.min()\n    let largest = numbers.max()\n\
    \    return (smallest, largest)", "    guard numbers.count >= 2 else {\n     \
    \   return (0.0,0.0)\n    }\n    var smallest = numbers[0]\n    var largest =\
    \ numbers[0]\n    for number in numbers {\n        if number < smallest {\n  \
    \          smallest = number\n        }\n        if number > largest {\n     \
    \       largest = number\n        }\n    }\n    return (smallest, largest)", " \
    \   var smallest = numbers[0]\n    var largest = numbers[0]\n    for i in 1..<numbers.count\
    \ {\n        if numbers[i] < smallest {\n            smallest = numbers[i]\n \
    \       }\n        if numbers[i] > largest {\n            largest = numbers[i]\n\
    \        }\n    }\n    return (smallest, largest)", "    let min1 = min(numbers)\n\
    \    let max1 = max(numbers)\n    let min2 = min(numbers.dropLast())\n    let\
    \ max2 = max(numbers.dropLast())\n    return (min1, max1), (min2, max2)", "  \
    \  let min = numbers.min()\n    let max = numbers.max()\n    return (min, max)",
  "    let smallest = numbers[0]\n    let largest = numbers[0]\n    for number in\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    return (smallest, largest)", "    var smallest: Double = Double.max\n\
    \    var largest: Double = Double.min\n    for number in numbers {\n        if\
    \ number < smallest {\n            smallest = number\n        }\n        if number\
    \ > largest {\n            largest = number\n        }\n    }\n    return (smallest,\
    \ largest)", "    let min1 = min(numbers)\n    let max1 = max(numbers)\n    let\
    \ min2 = min(min1, max1)\n    let max2 = max(min1, max1)\n    return (min2, max2)",
  "    var smallest = numbers[0]\n    var largest = numbers[0]\n    for number in\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    return (smallest, largest)", "    let min1 = min(numbers)\n\
    \    let min2 = min(numbers)\n    if min1 < min2 {\n        return (min1, min2)\n\
    \    }\n    return (min2, min1)", "    var smallest = numbers[0]\n    var largest\
    \ = numbers[0]\n    for number in numbers {\n        if number < smallest {\n\
    \            smallest = number\n        } else if number > largest {\n       \
    \     largest = number\n        }\n    }\n    return (smallest, largest)", " \
    \   guard numbers.count >= 2 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count >= 3 else { return (numbers[0], numbers[0]) }\n\n    var smallest\
    \ = numbers[0]\n    var largest = numbers[0]\n    for i in 1..numbers.count {\n\
    \        if numbers[i] > largest {\n            largest = numbers[i]\n       \
    \ } else if numbers[i] < smallest {\n            smallest = numbers[i]\n     \
    \   }\n    }\n    return (smallest, largest)", "    let smallest = numbers[0]\n\
    \    let largest = numbers[0]\n    for i in 1..<numbers.count {\n        if numbers[i]\
    \ < smallest {\n            smallest = numbers[i]\n        }\n        if numbers[i]\
    \ > largest {\n            largest = numbers[i]\n        }\n    }\n    return\
    \ (smallest, largest)", "    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        } else if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)", "    let smallest = numbers[0]\n\
    \    let largest = numbers[0]\n    for i in 1..<numbers.count {\n        if numbers[i]\
    \ < smallest {\n            smallest = numbers[i]\n        }\n        if numbers[i]\
    \ > largest {\n            largest = numbers[i]\n        }\n    }\n    return\
    \ (smallest, largest)", "    let smallest = min(numbers)\n    let largest = max(numbers)\n\
    \    return (smallest, largest)", "    let sortedNumbers = numbers.sorted()\n\
    \    var smallestDifference = Double.infinity\n    var smallestDifferenceIndex\
    \ = -1\n    var largestDifference = Double.infinity\n    var largestDifferenceIndex\
    \ = -1\n    for i in 0..<numbers.count {\n        let difference = sortedNumbers[i]\
    \ - sortedNumbers[smallestDifferenceIndex]\n        if difference < smallestDifference\
    \ {\n            smallestDifference = difference\n            smallestDifferenceIndex\
    \ = i\n        }\n        if difference > largestDifference {\n            largestDifference\
    \ = difference\n            largestDifferenceIndex = i\n        }\n    }\n   \
    \ return (sortedNumbers[smallestDifferenceIndex], sortedNumbers[largestDifferenceIndex])",
  "    guard numbers.count >= 2 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count >= 3 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ >= 4 else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 5\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 6 else\
    \ { return (numbers[0], numbers[0]) }\n\n    var smallest = numbers[0]\n    var\
    \ largest = numbers[0]\n    var smallestIndex = -1\n    var largestIndex = -1\n\
    \n    for i in 1..<numbers.count {\n        if numbers[i] > largest {\n      \
    \      largest = numbers[i]\n            largestIndex = i\n        }\n       \
    \ if numbers[i] < smallest {\n            smallest = numbers[i]\n            smallestIndex\
    \ = i\n        }\n    }\n\n    return (smallest, largest)", "    var smallest\
    \ = numbers[0]\n    var largest = numbers[0]\n    for number in numbers {\n  \
    \      if number < smallest {\n            smallest = number\n        }\n    \
    \    if number > largest {\n            largest = number\n        }\n    }\n \
    \   return (smallest, largest)", "    guard numbers.count >= 2 else {\n      \
    \  return (0.0,0.0)\n    }\n\n    var smallest = numbers[0]\n    var largest =\
    \ numbers[0]\n    for number in numbers {\n        if number < smallest {\n  \
    \          smallest = number\n        }\n        if number > largest {\n     \
    \       largest = number\n        }\n    }\n\n    return (smallest, largest)",
  "    let min = min(numbers)\n    let max = max(numbers)\n    return (min, max)",
  "    guard numbers.count >= 2 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count >= 3 else { return (numbers[0], numbers[0]) }\n\n    var smallest\
    \ = numbers[0]\n    var largest = numbers[0]\n    var smallestIndex = -1\n   \
    \ var largestIndex = -1\n\n    for i in 1..<numbers.count {\n        let currentNumber\
    \ = numbers[i]\n        if currentNumber < smallest {\n            smallest =\
    \ currentNumber\n            smallestIndex = i\n        }\n        if currentNumber\
    \ > largest {\n            largest = currentNumber\n            largestIndex =\
    \ i\n        }\n    }\n\n    return (numbers[smallestIndex], numbers[largestIndex])",
  "    guard numbers.count > 1 else {\n        return (0.0,0.0)\n    }\n    let smallest\
    \ = numbers[0]\n    let largest = numbers[0]\n    for i in 1..<numbers.count {\n\
    \        if numbers[i] < smallest {\n            smallest = numbers[i]\n     \
    \   }\n        if numbers[i] > largest {\n            largest = numbers[i]\n \
    \       }\n    }\n    return (smallest, largest)", "    guard numbers.count >=\
    \ 2 else {\n        return (0.0,0.0)\n    }\n    guard numbers.count > 1 else\
    \ {\n        return (0.0,numbers[0])\n    }\n    guard numbers.count > 2 else\
    \ {\n        return (numbers[0], numbers[1])\n    }\n    var smallest = numbers[0]\n\
    \    var largest = numbers[0]\n    for i in 1..numbers.count {\n        if numbers[i]\
    \ > largest {\n            largest = numbers[i]\n        }\n        if numbers[i]\
    \ < smallest {\n            smallest = numbers[i]\n        }\n    }\n    return\
    \ (smallest, largest)", "    guard numbers.count >= 2 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 3 else { return (numbers[0], numbers[0])\
    \ }\n\n    var smallest = numbers[0]\n    var largest = numbers[0]\n    var smallestIndex\
    \ = -1\n    var largestIndex = -1\n\n    for i in 1..<numbers.count {\n      \
    \  let currentNumber = numbers[i]\n        if currentNumber < smallest {\n   \
    \         smallest = currentNumber\n            smallestIndex = i\n        }\n\
    \        if currentNumber > largest {\n            largest = currentNumber\n \
    \           largestIndex = i\n        }\n    }\n\n    return (numbers[smallestIndex],\
    \ numbers[largestIndex])", "    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)", "    let smallest = numbers[0]\n\
    \    let largest = numbers[0]\n    for number in numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    return (smallest,\
    \ largest)", "    let min = numbers[0]\n    let max = numbers[0]\n    for i in\
    \ 1..<numbers.count {\n        if numbers[i] > max {\n            max = numbers[i]\n\
    \        }\n        if numbers[i] < min {\n            min = numbers[i]\n    \
    \    }\n    }\n    return (min, max)", "    let min1 = numbers.min()\n    let\
    \ max1 = numbers.max()\n    let min2 = numbers.min()\n    let max2 = numbers.max()\n\
    \    if min1 == max1 {\n        return (min1, min2)\n    }\n    if min2 == max2\
    \ {\n        return (min2, min1)\n    }\n    if min1 < min2 {\n        return\
    \ (min1, max2)\n    }\n    return (min2, max1)", "    guard numbers.count >= 2\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 3 else\
    \ { return (numbers[0], numbers[0]) }\n\n    var smallest = numbers[0]\n    var\
    \ largest = numbers[0]\n    for i in 1..<numbers.count {\n        if numbers[i]\
    \ > largest {\n            largest = numbers[i]\n        } else if numbers[i]\
    \ < smallest {\n            smallest = numbers[i]\n        }\n    }\n    return\
    \ (smallest, largest)", "    let min1 = numbers.min()\n    let max1 = numbers.max()\n\
    \    if max1 < min1 {\n        return (max1, min1)\n    }\n    var min2 = numbers[0]\n\
    \    var max2 = numbers[0]\n    for i in 1..<numbers.count {\n        let current\
    \ = numbers[i]\n        if current < min2 {\n            min2 = current\n    \
    \    } else if current > max2 {\n            max2 = current\n        }\n    }\n\
    \    return (min2, max2)", "    guard numbers.count >= 2 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 3 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 4 else { return (numbers[0], numbers[0]) }\n \
    \   guard numbers.count >= 5 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count >= 6 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ >= 7 else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 8\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 9 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 10 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count >= 11 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 12 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 13 else { return (numbers[0], numbers[0]) }\n\
    \    guard numbers.count >= 14 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count >= 15 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ >= 16 else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 17\
    \ || numbers.count >= 18 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ >= 19 || numbers.count >= 20 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count >= 21 || numbers.count >= 22 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 23 || numbers.count >= 24 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 25 || numbers.count >= 26 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count >= 27 || numbers.count >=\
    \ 28 else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 29 ||\
    \ numbers.count >= 30 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ >= 31 || numbers.count >= 32 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count >= 33 || numbers.count >= 34 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 35 || numbers.count >= 36 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 37 || numbers.count >= 38 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count >= 39 || numbers.count >=\
    \ 40 else { return (number", "    let min1 = numbers.min()\n    let max1 = numbers.max()\n\
    \    let min2 = numbers.min()\n    let max2 = numbers.max()\n    if min1 < min2\
    \ {\n        return (min1, min2)\n    }\n    if max1 > max2 {\n        return\
    \ (max1, max2)\n    }\n    return (min2, max2)", "    let smallest = min(numbers)\n\
    \    let largest = max(numbers)\n    return (smallest, largest)", "    guard numbers.count\
    \ >= 2 else {\n        return (0.0,0.0)\n    }\n    \n    var smallest = numbers[0]\n\
    \    var largest = numbers[0]\n    \n    for number in numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    \n    return\
    \ (smallest, largest)", "    let min1 = min(numbers)\n    let max1 = max(numbers)\n\
    \    let min2 = min(min1, max1)\n    let max2 = max(min1, max1)\n    return (min2,\
    \ max2)", "    let min1 = min(numbers)\n    let max1 = max(numbers)\n    let min2\
    \ = min(numbers)\n    let max2 = max(numbers)\n    if min1 == max1 {\n       \
    \ return (min1, min2)\n    }\n    if min2 == max2 {\n        return (min2, min1)\n\
    \    }\n    if min1 < min2 {\n        return (min1, max2)\n    }\n    return (min2,\
    \ max1)", "    guard numbers.count >= 2 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 3 else { return (numbers[0], numbers[0]) }\n \
    \   guard numbers.count >= 4 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count >= 5 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ >= 6 else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 7\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 8 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 9 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count >= 10 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 11 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 12 else { return (numbers[0], numbers[0]) }\n\
    \    guard numbers.count >= 13 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count >= 14 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ >= 15 else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 16\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 17 || numbers.count\
    \ >= 18 else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 19\
    \ || numbers.count >= 20 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ >= 21 || numbers.count >= 22 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count >= 23 || numbers.count >= 24 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 25 || numbers.count >= 26 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 27 || numbers.count >= 28 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count >= 29 || numbers.count >=\
    \ 30 else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 31 ||\
    \ numbers.count >= 32 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ >= 33 || numbers.count >= 34 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count >= 35 || numbers.count >= 36 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 37 || numbers.count >= 38 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 39 || numbers.count >= 40 else { return\
    \ (number", "    guard numbers.count >= 2 else {\n        return (0.0,0.0)\n \
    \   }\n    var smallest = numbers[0]\n    var largest = numbers[0]\n    for i\
    \ in 1..<numbers.count {\n        if numbers[i] > largest {\n            largest\
    \ = numbers[i]\n        }\n        if numbers[i] < smallest {\n            smallest\
    \ = numbers[i]\n        }\n    }\n    return (smallest, largest)", "    guard\
    \ numbers.count > 1 else {\n        return (0.0,0.0)\n    }\n    var smallest\
    \ = numbers[0]\n    var largest = numbers[0]\n    for i in 1..<numbers.count {\n\
    \        if numbers[i] < smallest {\n            smallest = numbers[i]\n     \
    \   }\n        if numbers[i] > largest {\n            largest = numbers[i]\n \
    \       }\n    }\n    return (smallest, largest)", "    let min = min(numbers)\n\
    \    let max = max(numbers)\n    return (min, max)", "    let smallest = numbers.min()\n\
    \    let largest = numbers.max()\n    return (smallest, largest)", "    let min\
    \ = min(numbers)\n    let max = max(numbers)\n    return (min, max)", "    let\
    \ smallest = numbers[0]\n    let largest = numbers[0]\n    for number in numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return (smallest, largest)", "    guard numbers.count >= 2 else {\n     \
    \   return (0.0,0.0)\n    }\n    let sortedNumbers = numbers.sorted()\n    let\
    \ firstClosest = sortedNumbers.first!\n    let secondClosest = sortedNumbers.last!\n\
    \    return (firstClosest, secondClosest)", "    var smallest = numbers[0]\n \
    \   var largest = numbers[0]\n    for number in numbers {\n        if number <\
    \ smallest {\n            smallest = number\n        }\n        if number > largest\
    \ {\n            largest = number\n        }\n    }\n    return (smallest, largest)",
  "    guard numbers.count >= 2 else {\n        return (0.0,0.0)\n    }\n    let smallest\
    \ = numbers[0]\n    let largest = numbers[0]\n    for i in 1..<numbers.count {\n\
    \        if numbers[i] > largest {\n            largest = numbers[i]\n       \
    \ }\n        if numbers[i] < smallest {\n            smallest = numbers[i]\n \
    \       }\n    }\n    return (smallest, largest)", "    let smallest = min(numbers)\n\
    \    let largest = max(numbers)\n    return (smallest, largest)", "    let smallest\
    \ = min(numbers)\n    let largest = max(numbers)\n    return (smallest, largest)",
  "    var smallest = numbers[0]\n    var largest = numbers[0]\n    for i in 1..<numbers.count\
    \ {\n        if numbers[i] < smallest {\n            smallest = numbers[i]\n \
    \       }\n        if numbers[i] > largest {\n            largest = numbers[i]\n\
    \        }\n    }\n    return (smallest, largest)", "    var smallest = numbers[0]\n\
    \    var largest = numbers[0]\n    for number in numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    return (smallest,\
    \ largest)", "    guard numbers.count >= 2 else {\n        return (0.0,0.0)\n\
    \    }\n    let smallest = numbers[0]\n    let largest = numbers[0]\n    for i\
    \ in 1..<numbers.count {\n        if numbers[i] < smallest {\n            smallest\
    \ = numbers[i]\n        }\n        if numbers[i] > largest {\n            largest\
    \ = numbers[i]\n        }\n    }\n    return (smallest, largest)", "    let min\
    \ = min(numbers)\n    let max = max(numbers)\n    return (min, max)", "    guard\
    \ numbers.count >= 2 else {\n        return (0.0,0.0)\n    }\n    var smallest\
    \ = numbers[0]\n    var largest = numbers[0]\n    for i in 1..numbers.count {\n\
    \        if numbers[i] < smallest {\n            smallest = numbers[i]\n     \
    \   }\n        if numbers[i] > largest {\n            largest = numbers[i]\n \
    \       }\n    }\n    return (smallest, largest)", "    let min = min(numbers)\n\
    \    let max = max(numbers)\n    return (min, max)", "    let smallest = numbers[0]\n\
    \    let largest = numbers[0]\n    for number in numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    return (smallest,\
    \ largest)", "    var smallest = numbers[0]\n    var largest = numbers[0]\n  \
    \  for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)", "    let smallest = numbers[0]\n\
    \    let largest = numbers[0]\n    for i in 1..<numbers.count {\n        if numbers[i]\
    \ > largest {\n            largest = numbers[i]\n        }\n        if numbers[i]\
    \ < smallest {\n            smallest = numbers[i]\n        }\n    }\n    return\
    \ (smallest, largest)", "    let min1 = numbers.min()\n    let max1 = numbers.max()\n\
    \    let min2 = numbers.min()\n    let max2 = numbers.max()\n    if min1 < min2\
    \ {\n        return (min1, min2)\n    }\n    if max1 > max2 {\n        return\
    \ (max1, max2)\n    }\n    return (min2, max2)", "    let min = numbers.min()\n\
    \    let max = numbers.max()\n    return (min, max)", "    let min1 = min(numbers)\n\
    \    let max1 = max(numbers)\n    let min2 = min(min1, max1)\n    let max2 = max(min1,\
    \ max1)\n    return (min2, max2)"]
stop_tokens:
- "\n}"
