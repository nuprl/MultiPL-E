language: swift
name: HumanEval_74_total_match
results:
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1.count == lst2.count {\n\
    \        return lst1\n    }\n    return lst1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbvxvz6zc/tmpbvxvz6zc.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad0137ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad01071b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad01071988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad010707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbvxvz6zc                        0x000055a2f346874a <unavailable> + 5962

    5    libc.so.6                          0x00002aad01566460 __libc_start_main +
    245

    6    tmpbvxvz6zc                        0x000055a2f3468129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = lst1\n    for index\
    \ in 0..<lst1.count {\n        if lst1[index] < lst2[index] {\n            result\
    \ = lst1\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp731irr_k/tmp731irr_k.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp731irr_k                        0x00005612a0de497a <unavailable> + 6522

    5    libc.so.6                          0x00002b3ca7043460 __libc_start_main +
    245

    6    tmp731irr_k                        0x00005612a0de4359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1.count == lst2.count {\n\
    \        return lst1\n    }\n    var result = [String]()\n    for i in 0..<lst1.count\
    \ {\n        if lst1[i] < lst2[i] {\n            result.append(lst1[i])\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpi2ooo8e8/tmpi2ooo8e8.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d0effdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d0ecf4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d0ecf4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d0ecf37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi2ooo8e8                        0x00005643bb408a2a <unavailable> + 6698

    5    libc.so.6                          0x00002b4d0f1e9460 __libc_start_main +
    245

    6    tmpi2ooo8e8                        0x00005643bb408409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var arr = [String]()\n    for str\
    \ in lst1 {\n        if !contains(lst2, str) {\n            arr.append(str)\n\
    \        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp6yc76elh.swift:19:13: error: cannot find 'contains' in scope\n\
    \        if !contains(lst2, str) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659820681
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ s in lst1 {\n        for s2 in lst2 {\n            if s.count < s2.count {\n\
    \                result.append(s)\n                break\n            }\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpe2i_98t4/tmpe2i_98t4.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa5aa1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa5a714b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa5a714988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa5a7137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe2i_98t4                        0x000055df3227095a <unavailable> + 6490

    5    libc.so.6                          0x00002baa5ac09460 __libc_start_main +
    245

    6    tmpe2i_98t4                        0x000055df32270339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str in lst1 {\n        for str2 in lst2 {\n            if str == str2 {\n  \
    \              result.append(str)\n                break\n            }\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpb1fvjc2l/tmpb1fvjc2l.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b7010dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b6fe04b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b6fe04988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b6fe037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb1fvjc2l                        0x0000560be495c95a <unavailable> + 6490

    5    libc.so.6                          0x00002b9b702f9460 __libc_start_main +
    245

    6    tmpb1fvjc2l                        0x0000560be495c339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ index in 0..<min(lst1.count, lst2.count) {\n        if lst1[index] < lst2[index]\
    \ {\n            result.append(lst1[index])\n        } else {\n            result.append(lst2[index])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpq4jx932w/tmpq4jx932w.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b708b00ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b708ad05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b708ad05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b708ad047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq4jx932w                        0x000055751c8e0aba <unavailable> + 6842

    5    libc.so.6                          0x00002b708b1fa460 __libc_start_main +
    245

    6    tmpq4jx932w                        0x000055751c8e0499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst3 = [String]()\n    for\
    \ x in lst1 {\n        for y in lst2 {\n            if x == y {\n            \
    \    lst3.append(x)\n                break\n            }\n        }\n    }\n\
    \    return lst3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpr6va94ha/tmpr6va94ha.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b68fb7b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b68fb4adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b68fb4ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b68fb4ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr6va94ha                        0x00005597ec0b795a <unavailable> + 6490

    5    libc.so.6                          0x00002b68fb9a2460 __libc_start_main +
    245

    6    tmpr6va94ha                        0x00005597ec0b7339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ x in lst1 {\n        for y in lst2 {\n            if x == y {\n            \
    \    continue\n            }\n            if x.characters.count < y.characters.count\
    \ {\n                result.append(x)\n            } else {\n                result.append(y)\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpvovf9unr.swift:23:18: error: 'characters' is unavailable: Please\
    \ use String directly\n            if x.characters.count < y.characters.count\
    \ {\n                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpvovf9unr.swift:23:39: error: 'characters' is unavailable: Please\
    \ use String directly\n            if x.characters.count < y.characters.count\
    \ {\n                                      ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820681
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ index in 0..<lst1.count {\n        if lst1[index] < lst2[index] {\n        \
    \    result.append(lst1[index])\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp6rlvgqy1/tmp6rlvgqy1.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee1f686c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee1f37db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee1f37d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee1f37c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6rlvgqy1                        0x000055ff0f425a2a <unavailable> + 6698

    5    libc.so.6                          0x00002aee1f872460 __libc_start_main +
    245

    6    tmp6rlvgqy1                        0x000055ff0f425409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ s in lst1 {\n        for s2 in lst2 {\n            if s == s2 {\n          \
    \      result.append(s)\n                break\n            }\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmptiry7c5p/tmptiry7c5p.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0ca47ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0ca171b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0ca171988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0ca1707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptiry7c5p                        0x0000557352e2595a <unavailable> + 6490

    5    libc.so.6                          0x00002af0ca666460 __libc_start_main +
    245

    6    tmptiry7c5p                        0x0000557352e25339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result.append(str1)\n                break\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpevut84xj.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmpevut84xj.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659820681
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = lst1\n    for elem\
    \ in lst2 {\n        if !contains(result, elem) {\n            result = append(result,\
    \ elem)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpg41gr2ss.swift:19:13: error: cannot find 'contains' in scope\n\
    \        if !contains(result, elem) {\n            ^~~~~~~~\n/tmp/tmpg41gr2ss.swift:20:22:\
    \ error: cannot find 'append' in scope\n            result = append(result, elem)\n\
    \                     ^~~~~~\n"
  stdout: ''
  timestamp: 1659820681
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ x in lst1 {\n        for y in lst2 {\n            if x == y {\n            \
    \    continue\n            }\n            if x.count < y.count {\n           \
    \     result.append(x)\n            } else {\n                result.append(y)\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp6icy3yka/tmp6icy3yka.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b5e415c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b5e10cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b5e10c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b5e10b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6icy3yka                        0x000055bc561dcc8f <unavailable> + 7311

    5    libc.so.6                          0x00002b0b5e601460 __libc_start_main +
    245

    6    tmp6icy3yka                        0x000055bc561dc389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result.append(str1)\n                break\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpevut84xj.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmpevut84xj.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659820681
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ index in 0..<min(lst1.count, lst2.count) {\n        if lst1[index] < lst2[index]\
    \ {\n            result.append(lst1[index])\n        } else {\n            result.append(lst2[index])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpq4jx932w/tmpq4jx932w.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b708b00ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b708ad05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b708ad05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b708ad047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq4jx932w                        0x000055751c8e0aba <unavailable> + 6842

    5    libc.so.6                          0x00002b708b1fa460 __libc_start_main +
    245

    6    tmpq4jx932w                        0x000055751c8e0499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str in lst1 {\n        for str2 in lst2 {\n            if str == str2 {\n  \
    \              result.append(str)\n                break\n            }\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpb1fvjc2l/tmpb1fvjc2l.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b7010dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b6fe04b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b6fe04988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b6fe037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb1fvjc2l                        0x0000560be495c95a <unavailable> + 6490

    5    libc.so.6                          0x00002b9b702f9460 __libc_start_main +
    245

    6    tmpb1fvjc2l                        0x0000560be495c339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var arr = [String]()\n    for i\
    \ in 0 ..< lst1.count {\n        if lst1[i] < lst2[i] {\n            arr.append(lst1[i])\n\
    \        } else {\n            arr.append(lst2[i])\n        }\n    }\n    return\
    \ arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(total_match(lst1: [] as\
    \ [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpnsa6uu61/tmpnsa6uu61.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d6e511c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d6e208b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d6e208988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d6e2077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnsa6uu61                        0x00005636f3041a2a <unavailable> + 6698

    5    libc.so.6                          0x00002b4d6e6fd460 __libc_start_main +
    245

    6    tmpnsa6uu61                        0x00005636f3041409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result.append(str1)\n            } else {\n             \
    \   result.append(str2)\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp3c6041yb.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmp3c6041yb.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659820681
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ x in lst1 {\n        for y in lst2 {\n            if x < y {\n             \
    \   break\n            }\n        }\n        if x == y {\n            result.append(x)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp89181pdg.swift:24:17: error: cannot find 'y' in scope\n       \
    \ if x == y {\n                ^\n"
  stdout: ''
  timestamp: 1659820681
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result.append(str1)\n                break\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpevut84xj.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmpevut84xj.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659820681
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result.append(str2)\n            } else {\n             \
    \   result.append(str1)\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmplv9ndseu.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmplv9ndseu.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659820681
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ x in lst1 {\n        for y in lst2 {\n            if x < y {\n             \
    \   break\n            }\n        }\n        if x == y {\n            result.append(x)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp89181pdg.swift:24:17: error: cannot find 'y' in scope\n       \
    \ if x == y {\n                ^\n"
  stdout: ''
  timestamp: 1659820681
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.count < str2.count\
    \ {\n                result.append(str1)\n                break\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmptjk9lhi2/tmptjk9lhi2.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9fa05bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9f9d52b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9f9d52988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9f9d517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptjk9lhi2                        0x0000561f4181f95a <unavailable> + 6490

    5    libc.so.6                          0x00002af9fa247460 __libc_start_main +
    245

    6    tmptjk9lhi2                        0x0000561f4181f339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ index in 0..<min(lst1.count, lst2.count) {\n        if lst1[index] < lst2[index]\
    \ {\n            result.append(lst1[index])\n        } else {\n            result.append(lst2[index])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpq4jx932w/tmpq4jx932w.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b708b00ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b708ad05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b708ad05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b708ad047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq4jx932w                        0x000055751c8e0aba <unavailable> + 6842

    5    libc.so.6                          0x00002b708b1fa460 __libc_start_main +
    245

    6    tmpq4jx932w                        0x000055751c8e0499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ index in 0..<min(lst1.count, lst2.count) {\n        if lst1[index] < lst2[index]\
    \ {\n            result.append(lst1[index])\n        } else {\n            result.append(lst2[index])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpq4jx932w/tmpq4jx932w.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b708b00ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b708ad05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b708ad05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b708ad047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq4jx932w                        0x000055751c8e0aba <unavailable> + 6842

    5    libc.so.6                          0x00002b708b1fa460 __libc_start_main +
    245

    6    tmpq4jx932w                        0x000055751c8e0499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.count < str2.count\
    \ {\n                result.append(str1)\n                break\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmptjk9lhi2/tmptjk9lhi2.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9fa05bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9f9d52b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9f9d52988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9f9d517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptjk9lhi2                        0x0000561f4181f95a <unavailable> + 6490

    5    libc.so.6                          0x00002af9fa247460 __libc_start_main +
    245

    6    tmptjk9lhi2                        0x0000561f4181f339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.characters.count\
    \ < str2.characters.count {\n                result.append(str2)\n           \
    \ } else {\n                result.append(str1)\n            }\n        }\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpir3vzbk7.swift:20:21: error: 'characters' is unavailable: Please\
    \ use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpir3vzbk7.swift:20:45: error: 'characters' is unavailable:\
    \ Please use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                                            ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820681
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ index in 0..<min(lst1.count, lst2.count) {\n        if lst1[index] < lst2[index]\
    \ {\n            result.append(lst1[index])\n        } else {\n            result.append(lst2[index])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpq4jx932w/tmpq4jx932w.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b708b00ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b708ad05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b708ad05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b708ad047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq4jx932w                        0x000055751c8e0aba <unavailable> + 6842

    5    libc.so.6                          0x00002b708b1fa460 __libc_start_main +
    245

    6    tmpq4jx932w                        0x000055751c8e0499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ i in 0 ..< min(lst1.count, lst2.count) {\n        if lst1[i] < lst2[i] {\n \
    \           result.append(lst1[i])\n        } else {\n            result.append(lst2[i])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpx36oot7x/tmpx36oot7x.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad0dea1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad0de716b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad0de716988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0de7157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx36oot7x                        0x00005556a4fa6aba <unavailable> + 6842

    5    libc.so.6                          0x00002ad0dec0b460 __libc_start_main +
    245

    6    tmpx36oot7x                        0x00005556a4fa6499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ x in lst1 {\n        for y in lst2 {\n            if x == y {\n            \
    \    continue\n            }\n            if x.characters.count < y.characters.count\
    \ {\n                result.append(x)\n            } else {\n                result.append(y)\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpvovf9unr.swift:23:18: error: 'characters' is unavailable: Please\
    \ use String directly\n            if x.characters.count < y.characters.count\
    \ {\n                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpvovf9unr.swift:23:39: error: 'characters' is unavailable: Please\
    \ use String directly\n            if x.characters.count < y.characters.count\
    \ {\n                                      ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820681
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = lst1\n    for index\
    \ in 0..<lst1.count {\n        if lst1[index] != lst2[index] {\n            break\n\
    \        }\n        result.remove(at: index)\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpnjeedzwl/tmpnjeedzwl.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b970e4d4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b970e1cbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b970e1cb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b970e1ca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnjeedzwl                        0x000055ec5525b9ca <unavailable> + 6602

    5    libc.so.6                          0x00002b970e6c0460 __libc_start_main +
    245

    6    tmpnjeedzwl                        0x000055ec5525b3a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = lst1\n    for element\
    \ in lst2 {\n        if !contains(result, element) {\n            result = append(result,\
    \ element)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpm8u6o2si.swift:19:13: error: cannot find 'contains' in scope\n\
    \        if !contains(result, element) {\n            ^~~~~~~~\n/tmp/tmpm8u6o2si.swift:20:22:\
    \ error: cannot find 'append' in scope\n            result = append(result, element)\n\
    \                     ^~~~~~\n"
  stdout: ''
  timestamp: 1659820681
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1.count == lst2.count {\n\
    \        return lst1\n    }\n    var result = [String]()\n    for i in 0..<lst1.count\
    \ {\n        if lst1[i] < lst2[i] {\n            result.append(lst1[i])\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpi2ooo8e8/tmpi2ooo8e8.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d0effdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d0ecf4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d0ecf4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d0ecf37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi2ooo8e8                        0x00005643bb408a2a <unavailable> + 6698

    5    libc.so.6                          0x00002b4d0f1e9460 __libc_start_main +
    245

    6    tmpi2ooo8e8                        0x00005643bb408409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1.count == lst2.count {\n\
    \        return lst1\n    }\n    return lst1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbvxvz6zc/tmpbvxvz6zc.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad0137ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad01071b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad01071988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad010707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbvxvz6zc                        0x000055a2f346874a <unavailable> + 5962

    5    libc.so.6                          0x00002aad01566460 __libc_start_main +
    245

    6    tmpbvxvz6zc                        0x000055a2f3468129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1.count == lst2.count {\n\
    \        return lst1\n    }\n    return lst1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbvxvz6zc/tmpbvxvz6zc.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad0137ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad01071b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad01071988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad010707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbvxvz6zc                        0x000055a2f346874a <unavailable> + 5962

    5    libc.so.6                          0x00002aad01566460 __libc_start_main +
    245

    6    tmpbvxvz6zc                        0x000055a2f3468129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result += [str1]\n                break\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpg0zb23fe.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmpg0zb23fe.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ x in lst1 {\n        for y in lst2 {\n            if x == y {\n            \
    \    continue\n            }\n            if x.count < y.count {\n           \
    \     result.append(x)\n            } else {\n                result.append(y)\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp6icy3yka/tmp6icy3yka.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b5e415c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b5e10cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b5e10c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b5e10b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6icy3yka                        0x000055bc561dcc8f <unavailable> + 7311

    5    libc.so.6                          0x00002b0b5e601460 __libc_start_main +
    245

    6    tmp6icy3yka                        0x000055bc561dc389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = lst1\n    for element\
    \ in lst2 {\n        if !contains(result, element) {\n            result = append(result,\
    \ element)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpm8u6o2si.swift:19:13: error: cannot find 'contains' in scope\n\
    \        if !contains(result, element) {\n            ^~~~~~~~\n/tmp/tmpm8u6o2si.swift:20:22:\
    \ error: cannot find 'append' in scope\n            result = append(result, element)\n\
    \                     ^~~~~~\n"
  stdout: ''
  timestamp: 1659820681
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ index in 0..<lst1.count {\n        if lst1[index] < lst2[index] {\n        \
    \    result.append(lst1[index])\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp6rlvgqy1/tmp6rlvgqy1.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee1f686c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee1f37db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee1f37d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee1f37c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6rlvgqy1                        0x000055ff0f425a2a <unavailable> + 6698

    5    libc.so.6                          0x00002aee1f872460 __libc_start_main +
    245

    6    tmp6rlvgqy1                        0x000055ff0f425409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ index in 0..<min(lst1.count, lst2.count) {\n        if lst1[index] < lst2[index]\
    \ {\n            result.append(lst1[index])\n        } else {\n            result.append(lst2[index])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpq4jx932w/tmpq4jx932w.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b708b00ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b708ad05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b708ad05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b708ad047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq4jx932w                        0x000055751c8e0aba <unavailable> + 6842

    5    libc.so.6                          0x00002b708b1fa460 __libc_start_main +
    245

    6    tmpq4jx932w                        0x000055751c8e0499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str in lst1 {\n        if !contains(lst2, str) {\n            result.append(str)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpn4_gk1m6.swift:19:13: error: cannot find 'contains' in scope\n\
    \        if !contains(lst2, str) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ x in lst1 {\n        for y in lst2 {\n            if x == y {\n            \
    \    continue\n            }\n            if x.count < y.count {\n           \
    \     result.append(x)\n            } else {\n                result.append(y)\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp6icy3yka/tmp6icy3yka.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b5e415c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b5e10cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b5e10c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b5e10b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6icy3yka                        0x000055bc561dcc8f <unavailable> + 7311

    5    libc.so.6                          0x00002b0b5e601460 __libc_start_main +
    245

    6    tmp6icy3yka                        0x000055bc561dc389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result.append(str1)\n            }\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp4zsswmln.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmp4zsswmln.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ i in 0 ..< min(lst1.count, lst2.count) {\n        if lst1[i] < lst2[i] {\n \
    \           result.append(lst1[i])\n        } else {\n            result.append(lst2[i])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpx36oot7x/tmpx36oot7x.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad0dea1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad0de716b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad0de716988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0de7157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx36oot7x                        0x00005556a4fa6aba <unavailable> + 6842

    5    libc.so.6                          0x00002ad0dec0b460 __libc_start_main +
    245

    6    tmpx36oot7x                        0x00005556a4fa6499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result.append(str1)\n                break\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpevut84xj.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmpevut84xj.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659820681
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result.append(str1)\n            } else {\n             \
    \   result.append(str2)\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp3c6041yb.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmp3c6041yb.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659820681
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result.append(str1)\n            }\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp4zsswmln.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmp4zsswmln.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ x in lst1 {\n        for y in lst2 {\n            if x == y {\n            \
    \    continue\n            }\n            \n            if x.count < y.count {\n\
    \                result.append(x)\n                break\n            }\n    \
    \        \n            if x.count > y.count {\n                result.append(y)\n\
    \                break\n            }\n        }\n    }\n    \n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpsmc74s77/tmpsmc74s77.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b693a29bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6939f92b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6939f92988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6939f917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsmc74s77                        0x0000557ed9ef19aa <unavailable> + 6570

    5    libc.so.6                          0x00002b693a487460 __libc_start_main +
    245

    6    tmpsmc74s77                        0x0000557ed9ef1389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ x in lst1 {\n        for y in lst2 {\n            if x == y {\n            \
    \    continue\n            }\n            \n            if x.characters.count\
    \ < y.characters.count {\n                result.append(x)\n                break\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpetutzs2f.swift:24:18: error: 'characters' is unavailable: Please\
    \ use String directly\n            if x.characters.count < y.characters.count\
    \ {\n                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpetutzs2f.swift:24:39: error: 'characters' is unavailable: Please\
    \ use String directly\n            if x.characters.count < y.characters.count\
    \ {\n                                      ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ x in lst1 {\n        for y in lst2 {\n            if x == y {\n            \
    \    continue\n            }\n            \n            if x.count < y.count {\n\
    \                result.append(x)\n            } else {\n                result.append(y)\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpqzbymjof/tmpqzbymjof.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b23b2fcbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b23b2cc2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b23b2cc2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b23b2cc17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqzbymjof                        0x000055be51b30c8f <unavailable> + 7311

    5    libc.so.6                          0x00002b23b31b7460 __libc_start_main +
    245

    6    tmpqzbymjof                        0x000055be51b30389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    var\
    \ i = 0\n    for x in lst1 {\n        for y in lst2 {\n            if x == y {\n\
    \                result.append(x)\n                break\n            }\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpftbbt8df/tmpftbbt8df.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ae2692c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ae2389b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ae2389988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ae23887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpftbbt8df                        0x000055c5ff1e095a <unavailable> + 6490

    5    libc.so.6                          0x00002b4ae287e460 __libc_start_main +
    245

    6    tmpftbbt8df                        0x000055c5ff1e0339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result += [str1]\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(total_match(lst1: []\
    \ as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpk0v_2uwb.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmpk0v_2uwb.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ index in 0..<min(lst1.count, lst2.count) {\n        if lst1[index] < lst2[index]\
    \ {\n            result.append(lst1[index])\n        } else {\n            result.append(lst2[index])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpq4jx932w/tmpq4jx932w.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b708b00ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b708ad05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b708ad05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b708ad047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq4jx932w                        0x000055751c8e0aba <unavailable> + 6842

    5    libc.so.6                          0x00002b708b1fa460 __libc_start_main +
    245

    6    tmpq4jx932w                        0x000055751c8e0499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1.count == lst2.count {\n\
    \        return lst1\n    }\n    var result = [String]()\n    for index in 0..<lst1.count\
    \ {\n        if lst1[index] < lst2[index] {\n            result.append(lst1[index])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp1f2zbvyq/tmp1f2zbvyq.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9bcd5c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9bcd2b8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9bcd2b8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9bcd2b77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1f2zbvyq                        0x000055f64c0ada2a <unavailable> + 6698

    5    libc.so.6                          0x00002b9bcd7ad460 __libc_start_main +
    245

    6    tmp1f2zbvyq                        0x000055f64c0ad409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ x in lst1 {\n        for y in lst2 {\n            if x == y {\n            \
    \    continue\n            }\n            if x.characters.count > y.characters.count\
    \ {\n                result.append(x)\n            } else {\n                result.append(y)\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpniyvfnhh.swift:23:18: error: 'characters' is unavailable: Please\
    \ use String directly\n            if x.characters.count > y.characters.count\
    \ {\n                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpniyvfnhh.swift:23:39: error: 'characters' is unavailable: Please\
    \ use String directly\n            if x.characters.count > y.characters.count\
    \ {\n                                      ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1.count == lst2.count {\n\
    \        return lst1\n    }\n    var result = lst1\n    for index in 0..<lst1.count\
    \ {\n        if lst1[index] < lst2[index] {\n            result.remove(at: index)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpb4qh73nw/tmpb4qh73nw.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aead90b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aead8da9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aead8da9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aead8da87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb4qh73nw                        0x000055b50ae7f9ca <unavailable> + 6602

    5    libc.so.6                          0x00002aead929e460 __libc_start_main +
    245

    6    tmpb4qh73nw                        0x000055b50ae7f3a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ index in 0..<lst1.count {\n        if lst1[index] < lst2[index] {\n        \
    \    result.append(lst1[index])\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp6rlvgqy1/tmp6rlvgqy1.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee1f686c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee1f37db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee1f37d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee1f37c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6rlvgqy1                        0x000055ff0f425a2a <unavailable> + 6698

    5    libc.so.6                          0x00002aee1f872460 __libc_start_main +
    245

    6    tmp6rlvgqy1                        0x000055ff0f425409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ index in 0..<min(lst1.count, lst2.count) {\n        if lst1[index] < lst2[index]\
    \ {\n            result.append(lst1[index])\n        } else {\n            result.append(lst2[index])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpq4jx932w/tmpq4jx932w.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b708b00ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b708ad05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b708ad05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b708ad047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq4jx932w                        0x000055751c8e0aba <unavailable> + 6842

    5    libc.so.6                          0x00002b708b1fa460 __libc_start_main +
    245

    6    tmpq4jx932w                        0x000055751c8e0499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1.count == lst2.count {\n\
    \        return lst1\n    }\n    return lst1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbvxvz6zc/tmpbvxvz6zc.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad0137ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad01071b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad01071988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad010707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbvxvz6zc                        0x000055a2f346874a <unavailable> + 5962

    5    libc.so.6                          0x00002aad01566460 __libc_start_main +
    245

    6    tmpbvxvz6zc                        0x000055a2f3468129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ _ in 0..<min(lst1.count, lst2.count) {\n        result.append(lst1[0])\n   \
    \ }\n    for _ in 0..<min(lst2.count, lst1.count) {\n        result.append(lst2[0])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpodofngis/tmpodofngis.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca70e41c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca70b38b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca70b38988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca70b377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpodofngis                        0x000055eb69943a5a <unavailable> + 6746

    5    libc.so.6                          0x00002aca7102d460 __libc_start_main +
    245

    6    tmpodofngis                        0x000055eb69943439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str in lst1 {\n        for str2 in lst2 {\n            if str == str2 {\n  \
    \              result.append(str)\n                break\n            }\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpb1fvjc2l/tmpb1fvjc2l.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b7010dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b6fe04b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b6fe04988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b6fe037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb1fvjc2l                        0x0000560be495c95a <unavailable> + 6490

    5    libc.so.6                          0x00002b9b702f9460 __libc_start_main +
    245

    6    tmpb1fvjc2l                        0x0000560be495c339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1.count == lst2.count {\n\
    \        return lst1\n    }\n    if lst1.count > lst2.count {\n        return\
    \ lst2\n    }\n    return lst1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpxapf_a8l/tmpxapf_a8l.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc53cfbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc539f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc539f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc539f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxapf_a8l                        0x000055bd172b374a <unavailable> + 5962

    5    libc.so.6                          0x00002afc53ee7460 __libc_start_main +
    245

    6    tmpxapf_a8l                        0x000055bd172b3129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ index in 0..<min(lst1.count, lst2.count) {\n        if lst1[index] < lst2[index]\
    \ {\n            result.append(lst1[index])\n        } else {\n            result.append(lst2[index])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpq4jx932w/tmpq4jx932w.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b708b00ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b708ad05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b708ad05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b708ad047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq4jx932w                        0x000055751c8e0aba <unavailable> + 6842

    5    libc.so.6                          0x00002b708b1fa460 __libc_start_main +
    245

    6    tmpq4jx932w                        0x000055751c8e0499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1.count == lst2.count {\n\
    \        return lst1\n    }\n    return lst1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbvxvz6zc/tmpbvxvz6zc.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad0137ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad01071b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad01071988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad010707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbvxvz6zc                        0x000055a2f346874a <unavailable> + 5962

    5    libc.so.6                          0x00002aad01566460 __libc_start_main +
    245

    6    tmpbvxvz6zc                        0x000055a2f3468129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    var\
    \ i = 0\n    for element in lst1 {\n        if lst2.contains(element) {\n    \
    \        result.append(element)\n            i += 1\n        }\n    }\n    if\
    \ i == lst2.count {\n        return result\n    }\n    for element in lst2 {\n\
    \        if !lst1.contains(element) {\n            result.append(element)\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpkyi69v_k/tmpkyi69v_k.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc6a4c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc6a1bab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc6a1ba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc6a1b97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkyi69v_k                        0x000055c8d56c89ca <unavailable> + 6602

    5    libc.so.6                          0x00002afc6a6af460 __libc_start_main +
    245

    6    tmpkyi69v_k                        0x000055c8d56c83a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result += [str1]\n                break\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpg0zb23fe.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmpg0zb23fe.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.count < str2.count\
    \ {\n                result.append(str1)\n                break\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmptjk9lhi2/tmptjk9lhi2.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9fa05bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9f9d52b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9f9d52988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9f9d517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptjk9lhi2                        0x0000561f4181f95a <unavailable> + 6490

    5    libc.so.6                          0x00002af9fa247460 __libc_start_main +
    245

    6    tmptjk9lhi2                        0x0000561f4181f339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ s in lst1 {\n        if !contains(lst2, s) {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpmbdtuo_k.swift:19:13: error: cannot find 'contains' in scope\n\
    \        if !contains(lst2, s) {\n            ^~~~~~~~\n/tmp/tmpmbdtuo_k.swift:20:22:\
    \ error: cannot find 'append' in scope\n            result = append(result, s)\n\
    \                     ^~~~~~\n"
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    var\
    \ i = 0\n    for element in lst1 {\n        if lst2.contains(element) {\n    \
    \        result.append(element)\n            i += 1\n        }\n    }\n    for\
    \ element in lst2 {\n        if !lst1.contains(element) {\n            result.append(element)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbjm5bno3/tmpbjm5bno3.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d82a63c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d8275ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2d8275a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2d827597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbjm5bno3                        0x000055bfc348796a <unavailable> + 6506

    5    libc.so.6                          0x00002b2d82c4f460 __libc_start_main +
    245

    6    tmpbjm5bno3                        0x000055bfc3487349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str in lst1 {\n        if lst2.contains(str) {\n            result.append(str)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmphh21lkbw/tmphh21lkbw.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d026d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d023c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d023c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d023c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphh21lkbw                        0x000055647dda696a <unavailable> + 6506

    5    libc.so.6                          0x00002b6d028bc460 __libc_start_main +
    245

    6    tmphh21lkbw                        0x000055647dda6349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = lst1\n    for index\
    \ in 0..<lst1.count {\n        if lst1[index] < lst2[index] {\n            result\
    \ = lst1\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp731irr_k/tmp731irr_k.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp731irr_k                        0x00005612a0de497a <unavailable> + 6522

    5    libc.so.6                          0x00002b3ca7043460 __libc_start_main +
    245

    6    tmp731irr_k                        0x00005612a0de4359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ _ in 0..<min(lst1.count, lst2.count) {\n        result.append(lst1[0])\n   \
    \ }\n    for _ in 0..<min(lst2.count, lst1.count) {\n        result.append(lst2[0])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpodofngis/tmpodofngis.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca70e41c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca70b38b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca70b38988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca70b377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpodofngis                        0x000055eb69943a5a <unavailable> + 6746

    5    libc.so.6                          0x00002aca7102d460 __libc_start_main +
    245

    6    tmpodofngis                        0x000055eb69943439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var arr = [String]()\n    for str1\
    \ in lst1 {\n        for str2 in lst2 {\n            if str1.count < str2.count\
    \ {\n                arr.append(str1)\n            } else {\n                arr.append(str2)\n\
    \            }\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp1q1o4c7y/tmp1q1o4c7y.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad4465d4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad4462cbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad4462cb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad4462ca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1q1o4c7y                        0x0000564ea54fc95a <unavailable> + 6490

    5    libc.so.6                          0x00002ad4467c0460 __libc_start_main +
    245

    6    tmp1q1o4c7y                        0x0000564ea54fc339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result += [str1]\n                break\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpg0zb23fe.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmpg0zb23fe.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659820682
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.characters.count\
    \ < str2.characters.count {\n                result.append(str1)\n           \
    \     break\n            }\n            if str1.characters.count == str2.characters.count\
    \ {\n                result.append(str1)\n            }\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpua2clcy5.swift:20:21: error: 'characters' is unavailable: Please\
    \ use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpua2clcy5.swift:20:45: error: 'characters' is unavailable:\
    \ Please use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                                            ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpua2clcy5.swift:24:21: error: 'characters'\
    \ is unavailable: Please use String directly\n            if str1.characters.count\
    \ == str2.characters.count {\n                    ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpua2clcy5.swift:24:46: error: 'characters'\
    \ is unavailable: Please use String directly\n            if str1.characters.count\
    \ == str2.characters.count {\n                                             ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ index in 0..<min(lst1.count, lst2.count) {\n        if lst1[index] < lst2[index]\
    \ {\n            result.append(lst1[index])\n        } else {\n            result.append(lst2[index])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpq4jx932w/tmpq4jx932w.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b708b00ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b708ad05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b708ad05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b708ad047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq4jx932w                        0x000055751c8e0aba <unavailable> + 6842

    5    libc.so.6                          0x00002b708b1fa460 __libc_start_main +
    245

    6    tmpq4jx932w                        0x000055751c8e0499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst3 = [String]()\n    for\
    \ x in lst1 {\n        for y in lst2 {\n            if x == y {\n            \
    \    lst3.append(x)\n                break\n            }\n        }\n    }\n\
    \    return lst3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpr6va94ha/tmpr6va94ha.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b68fb7b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b68fb4adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b68fb4ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b68fb4ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr6va94ha                        0x00005597ec0b795a <unavailable> + 6490

    5    libc.so.6                          0x00002b68fb9a2460 __libc_start_main +
    245

    6    tmpr6va94ha                        0x00005597ec0b7339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1.count == lst2.count {\n\
    \        return lst1\n    }\n    var lst3 = [String]()\n    for i in 0..<lst1.count\
    \ {\n        if lst1[i] < lst2[i] {\n            lst3.append(lst1[i])\n      \
    \  }\n    }\n    return lst3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmponju2uke/tmponju2uke.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c6ad92c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c6aa89b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c6aa89988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c6aa887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmponju2uke                        0x00005582fa49fa2a <unavailable> + 6698

    5    libc.so.6                          0x00002b0c6af7e460 __libc_start_main +
    245

    6    tmponju2uke                        0x00005582fa49f409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    var\
    \ i = 0\n    for element in lst1 {\n        if lst2.contains(element) {\n    \
    \        result.append(element)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpncmo67xl/tmpncmo67xl.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b891ebfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b891e8f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b891e8f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b891e8f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpncmo67xl                        0x000055e0be5f496a <unavailable> + 6506

    5    libc.so.6                          0x00002b891ede8460 __libc_start_main +
    245

    6    tmpncmo67xl                        0x000055e0be5f4349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str in lst1 {\n        if lst2.contains(str) {\n            result.append(str)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmphh21lkbw/tmphh21lkbw.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d026d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d023c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d023c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d023c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphh21lkbw                        0x000055647dda696a <unavailable> + 6506

    5    libc.so.6                          0x00002b6d028bc460 __libc_start_main +
    245

    6    tmphh21lkbw                        0x000055647dda6349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.characters.count\
    \ < str2.characters.count {\n                result.append(str1)\n           \
    \     break\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpg4mftzx1.swift:20:21: error: 'characters' is unavailable: Please\
    \ use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpg4mftzx1.swift:20:45: error: 'characters' is unavailable:\
    \ Please use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                                            ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str in lst1 {\n        for str2 in lst2 {\n            if str == str2 {\n  \
    \              result.append(str)\n                break\n            }\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpb1fvjc2l/tmpb1fvjc2l.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b7010dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b6fe04b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b6fe04988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b6fe037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb1fvjc2l                        0x0000560be495c95a <unavailable> + 6490

    5    libc.so.6                          0x00002b9b702f9460 __libc_start_main +
    245

    6    tmpb1fvjc2l                        0x0000560be495c339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result.append(str2)\n            } else {\n             \
    \   result.append(str1)\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmplv9ndseu.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmplv9ndseu.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659820681
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result.append(str1)\n            } else {\n             \
    \   result.append(str2)\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp3c6041yb.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmp3c6041yb.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659820681
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result += [str1]\n                break\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpg0zb23fe.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmpg0zb23fe.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659820682
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst3 = lst1\n    for x in lst2\
    \ {\n        if lst3.contains(x) {\n            lst3.remove(x)\n        }\n  \
    \  }\n    return lst3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp0baggbmf.swift:20:18: error: no exact matches in call to instance\
    \ method 'remove'\n            lst3.remove(x)\n                 ^\n/tmp/tmp0baggbmf.swift:20:18:\
    \ note: candidate expects value of type 'Int' for parameter #1 (got 'String')\n\
    \            lst3.remove(x)\n                 ^\n/tmp/tmp0baggbmf.swift:20:18:\
    \ note: candidate expects value of type 'Array<String>.Index' (aka 'Int') for\
    \ parameter #1 (got 'String')\n            lst3.remove(x)\n                 ^\n"
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str in lst1 {\n        for str2 in lst2 {\n            if str == str2 {\n  \
    \              result.append(str)\n                break\n            }\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpb1fvjc2l/tmpb1fvjc2l.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b7010dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b6fe04b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b6fe04988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b6fe037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb1fvjc2l                        0x0000560be495c95a <unavailable> + 6490

    5    libc.so.6                          0x00002b9b702f9460 __libc_start_main +
    245

    6    tmpb1fvjc2l                        0x0000560be495c339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ x in lst1 {\n        for y in lst2 {\n            if x < y {\n             \
    \   break\n            }\n        }\n        if x == y {\n            result.append(x)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp89181pdg.swift:24:17: error: cannot find 'y' in scope\n       \
    \ if x == y {\n                ^\n"
  stdout: ''
  timestamp: 1659820681
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ x in lst1 {\n        for y in lst2 {\n            if x == y {\n            \
    \    continue\n            }\n            if x.characters.count < y.characters.count\
    \ {\n                result.append(x)\n                break\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp4ha5y621.swift:23:18: error: 'characters' is unavailable: Please\
    \ use String directly\n            if x.characters.count < y.characters.count\
    \ {\n                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp4ha5y621.swift:23:39: error: 'characters' is unavailable: Please\
    \ use String directly\n            if x.characters.count < y.characters.count\
    \ {\n                                      ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ index in 0..<min(lst1.count, lst2.count) {\n        if lst1[index] < lst2[index]\
    \ {\n            result.append(lst1[index])\n        } else {\n            result.append(lst2[index])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpq4jx932w/tmpq4jx932w.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b708b00ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b708ad05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b708ad05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b708ad047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq4jx932w                        0x000055751c8e0aba <unavailable> + 6842

    5    libc.so.6                          0x00002b708b1fa460 __libc_start_main +
    245

    6    tmpq4jx932w                        0x000055751c8e0499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ x in lst1 {\n        for y in lst2 {\n            if x == y {\n            \
    \    continue\n            }\n            \n            if x.count < y.count {\n\
    \                result.append(x)\n            } else {\n                result.append(y)\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpqzbymjof/tmpqzbymjof.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b23b2fcbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b23b2cc2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b23b2cc2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b23b2cc17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqzbymjof                        0x000055be51b30c8f <unavailable> + 7311

    5    libc.so.6                          0x00002b23b31b7460 __libc_start_main +
    245

    6    tmpqzbymjof                        0x000055be51b30389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ x in lst1 {\n        for y in lst2 {\n            if x == y {\n            \
    \    continue\n            }\n            \n            if x.characters.count\
    \ < y.characters.count {\n                result.append(x)\n            } else\
    \ {\n                result.append(y)\n            }\n        }\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp39iqren5.swift:24:18: error: 'characters' is unavailable: Please\
    \ use String directly\n            if x.characters.count < y.characters.count\
    \ {\n                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp39iqren5.swift:24:39: error: 'characters' is unavailable: Please\
    \ use String directly\n            if x.characters.count < y.characters.count\
    \ {\n                                      ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ i in 0..<min(lst1.count, lst2.count) {\n        if lst1[i] < lst2[i] {\n   \
    \         result.append(lst1[i])\n        } else {\n            result.append(lst2[i])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpmqlv1dp_/tmpmqlv1dp_.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b73f7b00c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b73f77f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b73f77f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73f77f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmqlv1dp_                        0x0000563f49012aba <unavailable> + 6842

    5    libc.so.6                          0x00002b73f7cec460 __libc_start_main +
    245

    6    tmpmqlv1dp_                        0x0000563f49012499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.count < str2.count\
    \ {\n                result.append(str1)\n                break\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmptjk9lhi2/tmptjk9lhi2.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9fa05bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9f9d52b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9f9d52988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9f9d517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptjk9lhi2                        0x0000561f4181f95a <unavailable> + 6490

    5    libc.so.6                          0x00002af9fa247460 __libc_start_main +
    245

    6    tmptjk9lhi2                        0x0000561f4181f339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ index in 0..<lst1.count {\n        if lst1[index] < lst2[index] {\n        \
    \    result.append(lst1[index])\n        } else {\n            result.append(lst2[index])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpk800_69_/tmpk800_69_.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abab23fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abab20f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abab20f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abab20f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk800_69_                        0x000055a039648a2a <unavailable> + 6698

    5    libc.so.6                          0x00002abab25e8460 __libc_start_main +
    245

    6    tmpk800_69_                        0x000055a039648409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ x in lst1 {\n        for y in lst2 {\n            if x == y {\n            \
    \    continue\n            }\n            if x.characters.count < y.characters.count\
    \ {\n                result.append(x)\n            } else {\n                result.append(y)\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpvovf9unr.swift:23:18: error: 'characters' is unavailable: Please\
    \ use String directly\n            if x.characters.count < y.characters.count\
    \ {\n                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpvovf9unr.swift:23:39: error: 'characters' is unavailable: Please\
    \ use String directly\n            if x.characters.count < y.characters.count\
    \ {\n                                      ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820681
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ x in lst1 {\n        for y in lst2 {\n            if x == y {\n            \
    \    continue\n            }\n            \n            if x.characters.count\
    \ < y.characters.count {\n                result.append(x)\n                break\n\
    \            }\n            \n            if x.characters.count == y.characters.count\
    \ {\n                result.append(x)\n            }\n        }\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpzj4ij2wg.swift:24:18: error: 'characters' is unavailable: Please\
    \ use String directly\n            if x.characters.count < y.characters.count\
    \ {\n                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpzj4ij2wg.swift:24:39: error: 'characters' is unavailable: Please\
    \ use String directly\n            if x.characters.count < y.characters.count\
    \ {\n                                      ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpzj4ij2wg.swift:29:18: error: 'characters'\
    \ is unavailable: Please use String directly\n            if x.characters.count\
    \ == y.characters.count {\n                 ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpzj4ij2wg.swift:29:40: error: 'characters'\
    \ is unavailable: Please use String directly\n            if x.characters.count\
    \ == y.characters.count {\n                                       ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ index in 0..<min(lst1.count, lst2.count) {\n        if lst1[index] < lst2[index]\
    \ {\n            result.append(lst1[index])\n        } else {\n            result.append(lst2[index])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpq4jx932w/tmpq4jx932w.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b708b00ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b708ad05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b708ad05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b708ad047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq4jx932w                        0x000055751c8e0aba <unavailable> + 6842

    5    libc.so.6                          0x00002b708b1fa460 __libc_start_main +
    245

    6    tmpq4jx932w                        0x000055751c8e0499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ index in 0..<min(lst1.count, lst2.count) {\n        if lst1[index] < lst2[index]\
    \ {\n            result.append(lst1[index])\n        } else {\n            result.append(lst2[index])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpq4jx932w/tmpq4jx932w.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b708b00ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b708ad05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b708ad05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b708ad047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq4jx932w                        0x000055751c8e0aba <unavailable> + 6842

    5    libc.so.6                          0x00002b708b1fa460 __libc_start_main +
    245

    6    tmpq4jx932w                        0x000055751c8e0499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result.append(str1)\n            }\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp4zsswmln.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmp4zsswmln.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ s in lst1 {\n        for s2 in lst2 {\n            if s == s2 {\n          \
    \      result.append(s)\n                break\n            }\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmptiry7c5p/tmptiry7c5p.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0ca47ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0ca171b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0ca171988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0ca1707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptiry7c5p                        0x0000557352e2595a <unavailable> + 6490

    5    libc.so.6                          0x00002af0ca666460 __libc_start_main +
    245

    6    tmptiry7c5p                        0x0000557352e25339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ index in 0..<min(lst1.count, lst2.count) {\n        if lst1[index] < lst2[index]\
    \ {\n            result.append(lst1[index])\n        } else {\n            result.append(lst2[index])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpq4jx932w/tmpq4jx932w.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b708b00ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b708ad05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b708ad05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b708ad047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq4jx932w                        0x000055751c8e0aba <unavailable> + 6842

    5    libc.so.6                          0x00002b708b1fa460 __libc_start_main +
    245

    6    tmpq4jx932w                        0x000055751c8e0499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result.append(str1)\n                break\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpevut84xj.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmpevut84xj.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659820681
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ x in lst1 {\n        for y in lst2 {\n            if x == y {\n            \
    \    continue\n            }\n            if x.count < y.count {\n           \
    \     result.append(x)\n            } else {\n                result.append(y)\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp6icy3yka/tmp6icy3yka.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b5e415c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b5e10cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b5e10c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b5e10b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6icy3yka                        0x000055bc561dcc8f <unavailable> + 7311

    5    libc.so.6                          0x00002b0b5e601460 __libc_start_main +
    245

    6    tmp6icy3yka                        0x000055bc561dc389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ x in lst1 {\n        for y in lst2 {\n            if x == y {\n            \
    \    continue\n            }\n            if x.count < y.count {\n           \
    \     result.append(x)\n            } else {\n                result.append(y)\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp6icy3yka/tmp6icy3yka.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b5e415c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b5e10cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b5e10c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b5e10b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6icy3yka                        0x000055bc561dcc8f <unavailable> + 7311

    5    libc.so.6                          0x00002b0b5e601460 __libc_start_main +
    245

    6    tmp6icy3yka                        0x000055bc561dc389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1.count == lst2.count {\n\
    \        return lst1\n    }\n    var result = [String]()\n    for i in 0..<lst1.count\
    \ {\n        if lst1[i] < lst2[i] {\n            result.append(lst1[i])\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpi2ooo8e8/tmpi2ooo8e8.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d0effdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d0ecf4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d0ecf4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d0ecf37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi2ooo8e8                        0x00005643bb408a2a <unavailable> + 6698

    5    libc.so.6                          0x00002b4d0f1e9460 __libc_start_main +
    245

    6    tmpi2ooo8e8                        0x00005643bb408409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ index in 0..<min(lst1.count, lst2.count) {\n        if lst1[index] < lst2[index]\
    \ {\n            result.append(lst1[index])\n        } else {\n            result.append(lst2[index])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpq4jx932w/tmpq4jx932w.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b708b00ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b708ad05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b708ad05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b708ad047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq4jx932w                        0x000055751c8e0aba <unavailable> + 6842

    5    libc.so.6                          0x00002b708b1fa460 __libc_start_main +
    245

    6    tmpq4jx932w                        0x000055751c8e0499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ index in 0..<min(lst1.count, lst2.count) {\n        if lst1[index] < lst2[index]\
    \ {\n            result.append(lst1[index])\n        } else {\n            result.append(lst2[index])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpq4jx932w/tmpq4jx932w.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b708b00ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b708ad05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b708ad05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b708ad047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq4jx932w                        0x000055751c8e0aba <unavailable> + 6842

    5    libc.so.6                          0x00002b708b1fa460 __libc_start_main +
    245

    6    tmpq4jx932w                        0x000055751c8e0499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ x in lst1 {\n        for y in lst2 {\n            if x == y {\n            \
    \    continue\n            }\n            \n            if x.count < y.count {\n\
    \                result.append(x)\n                break\n            }\n    \
    \    }\n    }\n    \n    if result.count == 0 {\n        return result\n    }\n\
    \    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpztey4q0u/tmpztey4q0u.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4110d43c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4110a3ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4110a3a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4110a397b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpztey4q0u                        0x000055746be7da0a <unavailable> + 6666

    5    libc.so.6                          0x00002b4110f2f460 __libc_start_main +
    245

    6    tmpztey4q0u                        0x000055746be7d3e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ index in 0..<lst1.count {\n        if lst1[index] < lst2[index] {\n        \
    \    result.append(lst1[index])\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp6rlvgqy1/tmp6rlvgqy1.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee1f686c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee1f37db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee1f37d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee1f37c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6rlvgqy1                        0x000055ff0f425a2a <unavailable> + 6698

    5    libc.so.6                          0x00002aee1f872460 __libc_start_main +
    245

    6    tmp6rlvgqy1                        0x000055ff0f425409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = lst1\n    for index\
    \ in 0..<lst1.count {\n        if lst1[index] < lst2[index] {\n            result\
    \ = lst1\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp731irr_k/tmp731irr_k.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp731irr_k                        0x00005612a0de497a <unavailable> + 6522

    5    libc.so.6                          0x00002b3ca7043460 __libc_start_main +
    245

    6    tmp731irr_k                        0x00005612a0de4359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.count < str2.count\
    \ {\n                result.append(str1)\n            } else {\n             \
    \   result.append(str2)\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpjsbxoy_c/tmpjsbxoy_c.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae5fc8f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae5fc5efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae5fc5ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5fc5ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjsbxoy_c                        0x00005625ce3d095a <unavailable> + 6490

    5    libc.so.6                          0x00002ae5fcae4460 __libc_start_main +
    245

    6    tmpjsbxoy_c                        0x00005625ce3d0339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.count < str2.count\
    \ {\n                result.append(str1)\n            } else {\n             \
    \   result.append(str2)\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpjsbxoy_c/tmpjsbxoy_c.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae5fc8f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae5fc5efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae5fc5ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5fc5ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjsbxoy_c                        0x00005625ce3d095a <unavailable> + 6490

    5    libc.so.6                          0x00002ae5fcae4460 __libc_start_main +
    245

    6    tmpjsbxoy_c                        0x00005625ce3d0339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result += [str1]\n                break\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpg0zb23fe.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmpg0zb23fe.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = lst1\n    for index\
    \ in 0..<lst1.count {\n        if lst1[index] < lst2[index] {\n            result.remove(at:\
    \ index)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp6wbukrn2/tmp6wbukrn2.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aef7680dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef76504b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aef76504988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aef765037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6wbukrn2                        0x0000557bea8ce9ca <unavailable> + 6602

    5    libc.so.6                          0x00002aef769f9460 __libc_start_main +
    245

    6    tmp6wbukrn2                        0x0000557bea8ce3a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result += [str1]\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(total_match(lst1: []\
    \ as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpk0v_2uwb.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmpk0v_2uwb.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659820682
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result += [str1]\n                break\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpg0zb23fe.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmpg0zb23fe.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = lst1\n    for index\
    \ in 0..<lst1.count {\n        if lst1[index] < lst2[index] {\n            result\
    \ = lst1\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp731irr_k/tmp731irr_k.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp731irr_k                        0x00005612a0de497a <unavailable> + 6522

    5    libc.so.6                          0x00002b3ca7043460 __libc_start_main +
    245

    6    tmp731irr_k                        0x00005612a0de4359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ index in 0..<min(lst1.count, lst2.count) {\n        if lst1[index] < lst2[index]\
    \ {\n            result.append(lst1[index])\n        } else {\n            result.append(lst2[index])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpq4jx932w/tmpq4jx932w.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b708b00ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b708ad05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b708ad05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b708ad047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq4jx932w                        0x000055751c8e0aba <unavailable> + 6842

    5    libc.so.6                          0x00002b708b1fa460 __libc_start_main +
    245

    6    tmpq4jx932w                        0x000055751c8e0499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ index in 0..<min(lst1.count, lst2.count) {\n        if lst1[index] < lst2[index]\
    \ {\n            result.append(lst1[index])\n        } else {\n            result.append(lst2[index])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpq4jx932w/tmpq4jx932w.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b708b00ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b708ad05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b708ad05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b708ad047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq4jx932w                        0x000055751c8e0aba <unavailable> + 6842

    5    libc.so.6                          0x00002b708b1fa460 __libc_start_main +
    245

    6    tmpq4jx932w                        0x000055751c8e0499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ x in lst1 {\n        for y in lst2 {\n            if x == y {\n            \
    \    continue\n            }\n            if x.count < y.count {\n           \
    \     result.append(x)\n            } else {\n                result.append(y)\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp6icy3yka/tmp6icy3yka.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b5e415c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b5e10cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b5e10c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b5e10b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6icy3yka                        0x000055bc561dcc8f <unavailable> + 7311

    5    libc.so.6                          0x00002b0b5e601460 __libc_start_main +
    245

    6    tmp6icy3yka                        0x000055bc561dc389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.count < str2.count\
    \ {\n                result.append(str1)\n            } else {\n             \
    \   result.append(str2)\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpjsbxoy_c/tmpjsbxoy_c.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae5fc8f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae5fc5efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae5fc5ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5fc5ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjsbxoy_c                        0x00005625ce3d095a <unavailable> + 6490

    5    libc.so.6                          0x00002ae5fcae4460 __libc_start_main +
    245

    6    tmpjsbxoy_c                        0x00005625ce3d0339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result += [str1]\n                break\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpg0zb23fe.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmpg0zb23fe.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659820682
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst3 = lst1\n    for x in lst2\
    \ {\n        if lst3.contains(x) {\n            lst3.remove(x)\n        }\n  \
    \  }\n    return lst3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp0baggbmf.swift:20:18: error: no exact matches in call to instance\
    \ method 'remove'\n            lst3.remove(x)\n                 ^\n/tmp/tmp0baggbmf.swift:20:18:\
    \ note: candidate expects value of type 'Int' for parameter #1 (got 'String')\n\
    \            lst3.remove(x)\n                 ^\n/tmp/tmp0baggbmf.swift:20:18:\
    \ note: candidate expects value of type 'Array<String>.Index' (aka 'Int') for\
    \ parameter #1 (got 'String')\n            lst3.remove(x)\n                 ^\n"
  stdout: ''
  timestamp: 1659820682
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ s in lst1 {\n        for s2 in lst2 {\n            if s < s2 {\n           \
    \     result.appendContentsOf(lst1)\n                break\n            }\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpts4tecf6.swift:21:24: error: value of type '[String]' has no member\
    \ 'appendContentsOf'\n                result.appendContentsOf(lst1)\n        \
    \        ~~~~~~ ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ x in lst1 {\n        for y in lst2 {\n            if x == y {\n            \
    \    continue\n            }\n            if x.count < y.count {\n           \
    \     result.append(x)\n            } else {\n                result.append(y)\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp6icy3yka/tmp6icy3yka.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b5e415c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b5e10cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b5e10c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b5e10b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6icy3yka                        0x000055bc561dcc8f <unavailable> + 7311

    5    libc.so.6                          0x00002b0b5e601460 __libc_start_main +
    245

    6    tmp6icy3yka                        0x000055bc561dc389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.count < str2.count\
    \ {\n                result.append(str2)\n            } else {\n             \
    \   result.append(str1)\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp9fliatiw/tmp9fliatiw.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9fe9137c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9fe8e2eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9fe8e2e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9fe8e2d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9fliatiw                        0x00005589421fd95a <unavailable> + 6490

    5    libc.so.6                          0x00002b9fe9323460 __libc_start_main +
    245

    6    tmp9fliatiw                        0x00005589421fd339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ index in 0..<min(lst1.count, lst2.count) {\n        if lst1[index] < lst2[index]\
    \ {\n            result.append(lst1[index])\n        } else {\n            result.append(lst2[index])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpq4jx932w/tmpq4jx932w.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b708b00ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b708ad05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b708ad05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b708ad047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq4jx932w                        0x000055751c8e0aba <unavailable> + 6842

    5    libc.so.6                          0x00002b708b1fa460 __libc_start_main +
    245

    6    tmpq4jx932w                        0x000055751c8e0499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.count < str2.count\
    \ {\n                result.append(str1)\n                break\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmptjk9lhi2/tmptjk9lhi2.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9fa05bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9f9d52b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9f9d52988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9f9d517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptjk9lhi2                        0x0000561f4181f95a <unavailable> + 6490

    5    libc.so.6                          0x00002af9fa247460 __libc_start_main +
    245

    6    tmptjk9lhi2                        0x0000561f4181f339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = lst1\n    for index\
    \ in 0..<lst1.count {\n        if lst1[index] < lst2[index] {\n            result.remove(at:\
    \ index)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp6wbukrn2/tmp6wbukrn2.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aef7680dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef76504b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aef76504988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aef765037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6wbukrn2                        0x0000557bea8ce9ca <unavailable> + 6602

    5    libc.so.6                          0x00002aef769f9460 __libc_start_main +
    245

    6    tmp6wbukrn2                        0x0000557bea8ce3a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result.append(str2)\n            }\n        }\n    }\n  \
    \  if result.count == 0 {\n        return result\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmprw9apf0w.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmprw9apf0w.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659820682
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    var\
    \ count = 0\n    for str1 in lst1 {\n        for str2 in lst2 {\n            if\
    \ str1.count < str2.count {\n                count += 1\n            } else {\n\
    \                count -= str1.count\n            }\n        }\n        if count\
    \ == 0 {\n            result = append(result, str1)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(total_match(lst1: []\
    \ as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmptpbancxb.swift:28:22: error: cannot find 'append' in scope\n  \
    \          result = append(result, str1)\n                     ^~~~~~\n"
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ i in 0..<min(lst1.count, lst2.count) {\n        if lst1[i] < lst2[i] {\n   \
    \         result.append(lst1[i])\n        } else {\n            result.append(lst2[i])\n\
    \        }\n    }\n    if lst1.count == lst2.count {\n        return result\n\
    \    } else {\n        return result\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp74de4fgu/tmp74de4fgu.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6185c3ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6185931b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6185931988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b61859307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp74de4fgu                        0x000055cbb5fdfaba <unavailable> + 6842

    5    libc.so.6                          0x00002b6185e26460 __libc_start_main +
    245

    6    tmp74de4fgu                        0x000055cbb5fdf499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659820683
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    var\
    \ i = 0\n    for element in lst1 {\n        if lst2.contains(element) {\n    \
    \        result.append(element)\n            i += 1\n        }\n    }\n    for\
    \ element in lst2 {\n        if !lst1.contains(element) {\n            result.append(element)\n\
    \            i += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpoj249g51/tmpoj249g51.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee89cacc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee899a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee899a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee899a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoj249g51                        0x000056396486e96a <unavailable> + 6506

    5    libc.so.6                          0x00002aee89e98460 __libc_start_main +
    245

    6    tmpoj249g51                        0x000056396486e349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ index in 0..<min(lst1.count, lst2.count) {\n        if lst1[index] < lst2[index]\
    \ {\n            result.append(lst1[index])\n        } else {\n            result.append(lst2[index])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpq4jx932w/tmpq4jx932w.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b708b00ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b708ad05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b708ad05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b708ad047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq4jx932w                        0x000055751c8e0aba <unavailable> + 6842

    5    libc.so.6                          0x00002b708b1fa460 __libc_start_main +
    245

    6    tmpq4jx932w                        0x000055751c8e0499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = lst1\n    for index\
    \ in 0..<lst1.count {\n        if lst1[index] < lst2[index] {\n            result\
    \ = lst1\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp731irr_k/tmp731irr_k.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp731irr_k                        0x00005612a0de497a <unavailable> + 6522

    5    libc.so.6                          0x00002b3ca7043460 __libc_start_main +
    245

    6    tmp731irr_k                        0x00005612a0de4359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ i in 0 ..< min(lst1.count, lst2.count) {\n        if lst1[i] < lst2[i] {\n \
    \           result.append(lst1[i])\n        } else {\n            result.append(lst2[i])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpx36oot7x/tmpx36oot7x.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad0dea1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad0de716b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad0de716988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0de7157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx36oot7x                        0x00005556a4fa6aba <unavailable> + 6842

    5    libc.so.6                          0x00002ad0dec0b460 __libc_start_main +
    245

    6    tmpx36oot7x                        0x00005556a4fa6499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result += [str1]\n                break\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpg0zb23fe.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmpg0zb23fe.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.count < str2.count\
    \ {\n                result.append(str1)\n                break\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmptjk9lhi2/tmptjk9lhi2.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9fa05bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9f9d52b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9f9d52988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9f9d517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptjk9lhi2                        0x0000561f4181f95a <unavailable> + 6490

    5    libc.so.6                          0x00002af9fa247460 __libc_start_main +
    245

    6    tmptjk9lhi2                        0x0000561f4181f339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ _ in 0..<min(lst1.count, lst2.count) {\n        result.append(lst1[0])\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpgjl3t_di/tmpgjl3t_di.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6839d31c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6839a28b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6839a28988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6839a277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgjl3t_di                        0x0000560395fcdd3f <unavailable> + 7487

    5    libc.so.6                          0x00002b6839f1d460 __libc_start_main +
    245

    6    tmpgjl3t_di                        0x0000560395fcd439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1659820683
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result.append(str1)\n            }\n        }\n    }\n  \
    \  if result.count == 0 {\n        return result\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp5bemrjnj.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmp5bemrjnj.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ index in 0..<min(lst1.count, lst2.count) {\n        if lst1[index] < lst2[index]\
    \ {\n            result.append(lst1[index])\n        } else {\n            result.append(lst2[index])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpq4jx932w/tmpq4jx932w.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b708b00ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b708ad05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b708ad05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b708ad047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq4jx932w                        0x000055751c8e0aba <unavailable> + 6842

    5    libc.so.6                          0x00002b708b1fa460 __libc_start_main +
    245

    6    tmpq4jx932w                        0x000055751c8e0499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.count < str2.count\
    \ {\n                result.append(str1)\n                break\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmptjk9lhi2/tmptjk9lhi2.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9fa05bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9f9d52b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9f9d52988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9f9d517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptjk9lhi2                        0x0000561f4181f95a <unavailable> + 6490

    5    libc.so.6                          0x00002af9fa247460 __libc_start_main +
    245

    6    tmptjk9lhi2                        0x0000561f4181f339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    var\
    \ count = 0\n    for str in lst1 {\n        for str2 in lst2 {\n            if\
    \ str == str2 {\n                count += 1\n            }\n        }\n    }\n\
    \    if count == lst1.count {\n        result = lst1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp0s_5foqa/tmp0s_5foqa.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba999153c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba998e4ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba998e4a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba998e497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0s_5foqa                        0x000056454428495a <unavailable> + 6490

    5    libc.so.6                          0x00002ba99933f460 __libc_start_main +
    245

    6    tmp0s_5foqa                        0x0000564544284339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820683
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ x in lst1 {\n        for y in lst2 {\n            if x == y {\n            \
    \    continue\n            }\n            if x.count < y.count {\n           \
    \     result.append(x)\n            } else {\n                result.append(y)\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp6icy3yka/tmp6icy3yka.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b5e415c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b5e10cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b5e10c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b5e10b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6icy3yka                        0x000055bc561dcc8f <unavailable> + 7311

    5    libc.so.6                          0x00002b0b5e601460 __libc_start_main +
    245

    6    tmp6icy3yka                        0x000055bc561dc389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str in lst1 {\n        for str2 in lst2 {\n            if str == str2 {\n  \
    \              result.append(str)\n                break\n            }\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpb1fvjc2l/tmpb1fvjc2l.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b7010dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b6fe04b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b6fe04988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b6fe037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb1fvjc2l                        0x0000560be495c95a <unavailable> + 6490

    5    libc.so.6                          0x00002b9b702f9460 __libc_start_main +
    245

    6    tmpb1fvjc2l                        0x0000560be495c339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = lst1\n    for element\
    \ in lst2 {\n        if !contains(result, element) {\n            result = append(result,\
    \ element)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpm8u6o2si.swift:19:13: error: cannot find 'contains' in scope\n\
    \        if !contains(result, element) {\n            ^~~~~~~~\n/tmp/tmpm8u6o2si.swift:20:22:\
    \ error: cannot find 'append' in scope\n            result = append(result, element)\n\
    \                     ^~~~~~\n"
  stdout: ''
  timestamp: 1659820681
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ index in 0..<min(lst1.count, lst2.count) {\n        if lst1[index] < lst2[index]\
    \ {\n            result.append(lst1[index])\n        } else {\n            result.append(lst2[index])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpq4jx932w/tmpq4jx932w.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b708b00ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b708ad05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b708ad05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b708ad047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq4jx932w                        0x000055751c8e0aba <unavailable> + 6842

    5    libc.so.6                          0x00002b708b1fa460 __libc_start_main +
    245

    6    tmpq4jx932w                        0x000055751c8e0499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ x in lst1 {\n        if !contains(lst2, x) {\n            result.append(x)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpieq673ok.swift:19:13: error: cannot find 'contains' in scope\n\
    \        if !contains(lst2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ x in lst1 {\n        for y in lst2 {\n            if x == y {\n            \
    \    continue\n            }\n            if x.count < y.count {\n           \
    \     result.append(x)\n            } else {\n                result.append(y)\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp6icy3yka/tmp6icy3yka.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b5e415c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b5e10cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b5e10c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b5e10b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6icy3yka                        0x000055bc561dcc8f <unavailable> + 7311

    5    libc.so.6                          0x00002b0b5e601460 __libc_start_main +
    245

    6    tmp6icy3yka                        0x000055bc561dc389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.count < str2.count\
    \ {\n                result.append(str2)\n            }\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpgg28zqqm/tmpgg28zqqm.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d62e0cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d62b03b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d62b03988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d62b027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgg28zqqm                        0x0000559d33a5595a <unavailable> + 6490

    5    libc.so.6                          0x00002b1d62ff8460 __libc_start_main +
    245

    6    tmpgg28zqqm                        0x0000559d33a55339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820683
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ index in 0..<min(lst1.count, lst2.count) {\n        if lst1[index] < lst2[index]\
    \ {\n            result.append(lst1[index])\n        } else {\n            result.append(lst2[index])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpq4jx932w/tmpq4jx932w.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b708b00ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b708ad05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b708ad05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b708ad047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq4jx932w                        0x000055751c8e0aba <unavailable> + 6842

    5    libc.so.6                          0x00002b708b1fa460 __libc_start_main +
    245

    6    tmpq4jx932w                        0x000055751c8e0499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = lst1\n    for index\
    \ in 0..<lst1.count {\n        if lst1[index] != lst2[index] {\n            result\
    \ = lst1\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpsr1sc2ss/tmpsr1sc2ss.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac2c67c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac2c64beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac2c64be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac2c64bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsr1sc2ss                        0x0000562521c0997a <unavailable> + 6522

    5    libc.so.6                          0x00002ac2c69b3460 __libc_start_main +
    245

    6    tmpsr1sc2ss                        0x0000562521c09359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659820683
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ x in lst1 {\n        for y in lst2 {\n            if x == y {\n            \
    \    continue\n            }\n            \n            if x.count < y.count {\n\
    \                result.append(x)\n            } else {\n                result.append(y)\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpqzbymjof/tmpqzbymjof.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b23b2fcbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b23b2cc2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b23b2cc2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b23b2cc17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqzbymjof                        0x000055be51b30c8f <unavailable> + 7311

    5    libc.so.6                          0x00002b23b31b7460 __libc_start_main +
    245

    6    tmpqzbymjof                        0x000055be51b30389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ index in 0..<min(lst1.count, lst2.count) {\n        if lst1[index] < lst2[index]\
    \ {\n            result.append(lst1[index])\n        } else {\n            result.append(lst2[index])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpq4jx932w/tmpq4jx932w.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b708b00ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b708ad05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b708ad05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b708ad047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq4jx932w                        0x000055751c8e0aba <unavailable> + 6842

    5    libc.so.6                          0x00002b708b1fa460 __libc_start_main +
    245

    6    tmpq4jx932w                        0x000055751c8e0499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = lst1\n    for index\
    \ in 0..<lst1.count {\n        if lst1[index] < lst2[index] {\n            result\
    \ = lst1\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp731irr_k/tmp731irr_k.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp731irr_k                        0x00005612a0de497a <unavailable> + 6522

    5    libc.so.6                          0x00002b3ca7043460 __libc_start_main +
    245

    6    tmp731irr_k                        0x00005612a0de4359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result.append(str1)\n                break\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpevut84xj.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmpevut84xj.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659820681
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result += [str1]\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(total_match(lst1: []\
    \ as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpk0v_2uwb.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmpk0v_2uwb.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ s in lst1 {\n        for s2 in lst2 {\n            if s == s2 {\n          \
    \      result.append(s)\n                break\n            }\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmptiry7c5p/tmptiry7c5p.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0ca47ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0ca171b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0ca171988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0ca1707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptiry7c5p                        0x0000557352e2595a <unavailable> + 6490

    5    libc.so.6                          0x00002af0ca666460 __libc_start_main +
    245

    6    tmptiry7c5p                        0x0000557352e25339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var arr = [String]()\n    for x\
    \ in lst1 {\n        for y in lst2 {\n            if x == y {\n              \
    \  arr.append(x)\n                break\n            }\n        }\n    }\n   \
    \ return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpertmt7xh/tmpertmt7xh.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b187bf39c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b187bc30b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b187bc30988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b187bc2f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpertmt7xh                        0x000055d4eec4995a <unavailable> + 6490

    5    libc.so.6                          0x00002b187c125460 __libc_start_main +
    245

    6    tmpertmt7xh                        0x000055d4eec49339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820683
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ index in 0..<min(lst1.count, lst2.count) {\n        if lst1[index] < lst2[index]\
    \ {\n            result.append(lst1[index])\n        } else {\n            result.append(lst2[index])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpq4jx932w/tmpq4jx932w.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b708b00ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b708ad05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b708ad05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b708ad047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq4jx932w                        0x000055751c8e0aba <unavailable> + 6842

    5    libc.so.6                          0x00002b708b1fa460 __libc_start_main +
    245

    6    tmpq4jx932w                        0x000055751c8e0499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    var\
    \ count = 0\n    for str1 in lst1 {\n        for str2 in lst2 {\n            if\
    \ str1.count < str2.count {\n                count += 1\n            } else {\n\
    \                count -= 1\n            }\n        }\n        if count == 0 {\n\
    \            result = append(result, str1)\n            count = 0\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpaad8py_4.swift:28:22: error: cannot find 'append' in scope\n  \
    \          result = append(result, str1)\n                     ^~~~~~\n"
  stdout: ''
  timestamp: 1659820683
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.count < str2.count\
    \ {\n                result.append(str1)\n                break\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmptjk9lhi2/tmptjk9lhi2.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9fa05bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9f9d52b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9f9d52988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9f9d517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptjk9lhi2                        0x0000561f4181f95a <unavailable> + 6490

    5    libc.so.6                          0x00002af9fa247460 __libc_start_main +
    245

    6    tmptjk9lhi2                        0x0000561f4181f339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str in lst1 {\n        if lst2.contains(str) {\n            result.append(str)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmphh21lkbw/tmphh21lkbw.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d026d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d023c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d023c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d023c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphh21lkbw                        0x000055647dda696a <unavailable> + 6506

    5    libc.so.6                          0x00002b6d028bc460 __libc_start_main +
    245

    6    tmphh21lkbw                        0x000055647dda6349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ index in 0..<lst1.count {\n        if lst1[index] < lst2[index] {\n        \
    \    result.append(lst1[index])\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp6rlvgqy1/tmp6rlvgqy1.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee1f686c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee1f37db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee1f37d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee1f37c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6rlvgqy1                        0x000055ff0f425a2a <unavailable> + 6698

    5    libc.so.6                          0x00002aee1f872460 __libc_start_main +
    245

    6    tmp6rlvgqy1                        0x000055ff0f425409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ x in lst1 {\n        for y in lst2 {\n            if x == y {\n            \
    \    continue\n            }\n            if x.count < y.count {\n           \
    \     result.append(x)\n                break\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp7lwwhfdj/tmp7lwwhfdj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b549a6c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b549a3bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b549a3bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b549a3bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7lwwhfdj                        0x0000557ef03689aa <unavailable> + 6570

    5    libc.so.6                          0x00002b549a8b1460 __libc_start_main +
    245

    6    tmp7lwwhfdj                        0x0000557ef0368389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659820683
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1.count == lst2.count {\n\
    \        return lst1\n    }\n    var result = [String]()\n    for index in 0..<lst1.count\
    \ {\n        if lst1[index] < lst2[index] {\n            result.append(lst1[index])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp1f2zbvyq/tmp1f2zbvyq.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9bcd5c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9bcd2b8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9bcd2b8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9bcd2b77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1f2zbvyq                        0x000055f64c0ada2a <unavailable> + 6698

    5    libc.so.6                          0x00002b9bcd7ad460 __libc_start_main +
    245

    6    tmp1f2zbvyq                        0x000055f64c0ad409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ index in 0..<min(lst1.count, lst2.count) {\n        if lst1[index] < lst2[index]\
    \ {\n            result.append(lst1[index])\n        } else {\n            result.append(lst2[index])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpq4jx932w/tmpq4jx932w.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b708b00ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b708ad05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b708ad05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b708ad047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq4jx932w                        0x000055751c8e0aba <unavailable> + 6842

    5    libc.so.6                          0x00002b708b1fa460 __libc_start_main +
    245

    6    tmpq4jx932w                        0x000055751c8e0499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = lst1\n    for elem\
    \ in lst2 {\n        if !contains(result, elem) {\n            result = append(result,\
    \ elem)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpg41gr2ss.swift:19:13: error: cannot find 'contains' in scope\n\
    \        if !contains(result, elem) {\n            ^~~~~~~~\n/tmp/tmpg41gr2ss.swift:20:22:\
    \ error: cannot find 'append' in scope\n            result = append(result, elem)\n\
    \                     ^~~~~~\n"
  stdout: ''
  timestamp: 1659820681
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ x in lst1 {\n        for y in lst2 {\n            if x == y {\n            \
    \    continue\n            }\n            if x.count < y.count {\n           \
    \     result.append(x)\n            } else {\n                result.append(y)\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp6icy3yka/tmp6icy3yka.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b5e415c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b5e10cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b5e10c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b5e10b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6icy3yka                        0x000055bc561dcc8f <unavailable> + 7311

    5    libc.so.6                          0x00002b0b5e601460 __libc_start_main +
    245

    6    tmp6icy3yka                        0x000055bc561dc389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ x in lst1 {\n        for y in lst2 {\n            if x == y {\n            \
    \    continue\n            }\n            if x.characters.count < y.characters.count\
    \ {\n                result.append(x)\n            } else {\n                result.append(y)\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpvovf9unr.swift:23:18: error: 'characters' is unavailable: Please\
    \ use String directly\n            if x.characters.count < y.characters.count\
    \ {\n                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpvovf9unr.swift:23:39: error: 'characters' is unavailable: Please\
    \ use String directly\n            if x.characters.count < y.characters.count\
    \ {\n                                      ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820681
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst = lst1\n    for x in lst2\
    \ {\n        if lst.contains(x) {\n            lst.remove(x)\n        }\n    }\n\
    \    return lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp06811obf.swift:20:17: error: no exact matches in call to instance\
    \ method 'remove'\n            lst.remove(x)\n                ^\n/tmp/tmp06811obf.swift:20:17:\
    \ note: candidate expects value of type 'Int' for parameter #1 (got 'String')\n\
    \            lst.remove(x)\n                ^\n/tmp/tmp06811obf.swift:20:17: note:\
    \ candidate expects value of type 'Array<String>.Index' (aka 'Int') for parameter\
    \ #1 (got 'String')\n            lst.remove(x)\n                ^\n"
  stdout: ''
  timestamp: 1659820683
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ index in 0..<lst1.count {\n        if lst1[index] < lst2[index] {\n        \
    \    result.append(lst1[index])\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp6rlvgqy1/tmp6rlvgqy1.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee1f686c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee1f37db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee1f37d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee1f37c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6rlvgqy1                        0x000055ff0f425a2a <unavailable> + 6698

    5    libc.so.6                          0x00002aee1f872460 __libc_start_main +
    245

    6    tmp6rlvgqy1                        0x000055ff0f425409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ index in 0..<min(lst1.count, lst2.count) {\n        if lst1[index] < lst2[index]\
    \ {\n            result.append(lst1[index])\n        } else {\n            result.append(lst2[index])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpq4jx932w/tmpq4jx932w.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b708b00ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b708ad05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b708ad05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b708ad047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq4jx932w                        0x000055751c8e0aba <unavailable> + 6842

    5    libc.so.6                          0x00002b708b1fa460 __libc_start_main +
    245

    6    tmpq4jx932w                        0x000055751c8e0499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.count < str2.count\
    \ {\n                result.append(str1)\n            } else {\n             \
    \   result.append(str2)\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpjsbxoy_c/tmpjsbxoy_c.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae5fc8f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae5fc5efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae5fc5ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5fc5ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjsbxoy_c                        0x00005625ce3d095a <unavailable> + 6490

    5    libc.so.6                          0x00002ae5fcae4460 __libc_start_main +
    245

    6    tmpjsbxoy_c                        0x00005625ce3d0339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = lst1\n    for index\
    \ in 0..<lst1.count {\n        if lst1[index] < lst2[index] {\n            result\
    \ = lst1\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp731irr_k/tmp731irr_k.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp731irr_k                        0x00005612a0de497a <unavailable> + 6522

    5    libc.so.6                          0x00002b3ca7043460 __libc_start_main +
    245

    6    tmp731irr_k                        0x00005612a0de4359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.count < str2.count\
    \ {\n                result.append(str1)\n                break\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmptjk9lhi2/tmptjk9lhi2.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9fa05bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9f9d52b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9f9d52988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9f9d517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptjk9lhi2                        0x0000561f4181f95a <unavailable> + 6490

    5    libc.so.6                          0x00002af9fa247460 __libc_start_main +
    245

    6    tmptjk9lhi2                        0x0000561f4181f339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ x in lst1 {\n        for y in lst2 {\n            if x == y {\n            \
    \    continue\n            }\n            if x.count < y.count {\n           \
    \     result.append(x)\n            } else {\n                result.append(y)\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp6icy3yka/tmp6icy3yka.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b5e415c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b5e10cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b5e10c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b5e10b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6icy3yka                        0x000055bc561dcc8f <unavailable> + 7311

    5    libc.so.6                          0x00002b0b5e601460 __libc_start_main +
    245

    6    tmp6icy3yka                        0x000055bc561dc389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.characters.count\
    \ < str2.characters.count {\n                result.append(str1)\n           \
    \ } else {\n                result.append(str2)\n            }\n        }\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpsf6x4al2.swift:20:21: error: 'characters' is unavailable: Please\
    \ use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpsf6x4al2.swift:20:45: error: 'characters' is unavailable:\
    \ Please use String directly\n            if str1.characters.count < str2.characters.count\
    \ {\n                                            ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820683
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ index in 0..<min(lst1.count, lst2.count) {\n        if lst1[index] < lst2[index]\
    \ {\n            result.append(lst1[index])\n        } else {\n            result.append(lst2[index])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpq4jx932w/tmpq4jx932w.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b708b00ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b708ad05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b708ad05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b708ad047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq4jx932w                        0x000055751c8e0aba <unavailable> + 6842

    5    libc.so.6                          0x00002b708b1fa460 __libc_start_main +
    245

    6    tmpq4jx932w                        0x000055751c8e0499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ s in lst1 {\n        for s2 in lst2 {\n            if s.count < s2.count {\n\
    \                result.append(s)\n                break\n            }\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpe2i_98t4/tmpe2i_98t4.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa5aa1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa5a714b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa5a714988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa5a7137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe2i_98t4                        0x000055df3227095a <unavailable> + 6490

    5    libc.so.6                          0x00002baa5ac09460 __libc_start_main +
    245

    6    tmpe2i_98t4                        0x000055df32270339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ index in 0..<min(lst1.count, lst2.count) {\n        if lst1[index] < lst2[index]\
    \ {\n            result.append(lst1[index])\n        } else {\n            result.append(lst2[index])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpq4jx932w/tmpq4jx932w.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b708b00ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b708ad05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b708ad05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b708ad047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq4jx932w                        0x000055751c8e0aba <unavailable> + 6842

    5    libc.so.6                          0x00002b708b1fa460 __libc_start_main +
    245

    6    tmpq4jx932w                        0x000055751c8e0499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    var\
    \ count = 0\n    for x in lst1 {\n        for y in lst2 {\n            if x ==\
    \ y {\n                count += 1\n            }\n        }\n    }\n    if count\
    \ == lst1.count {\n        return result\n    }\n    for x in lst2 {\n       \
    \ for y in lst1 {\n            if x == y {\n                count += 1\n     \
    \       }\n        }\n    }\n    if count == lst2.count {\n        return result\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp16chpb3l/tmp16chpb3l.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2adf9e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2adf6d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2adf6d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2adf6d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp16chpb3l                        0x000056451226d95a <unavailable> + 6490

    5    libc.so.6                          0x00002b2adfbce460 __libc_start_main +
    245

    6    tmp16chpb3l                        0x000056451226d339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820683
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ i in 0 ..< min(lst1.count, lst2.count) {\n        if lst1[i] < lst2[i] {\n \
    \           result.append(lst1[i])\n        } else {\n            result.append(lst2[i])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpx36oot7x/tmpx36oot7x.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad0dea1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad0de716b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad0de716988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0de7157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx36oot7x                        0x00005556a4fa6aba <unavailable> + 6842

    5    libc.so.6                          0x00002ad0dec0b460 __libc_start_main +
    245

    6    tmpx36oot7x                        0x00005556a4fa6499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.length < str2.length\
    \ {\n                result += [str1]\n                break\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpg0zb23fe.swift:20:21: error: value of type 'String' has no member\
    \ 'length'\n            if str1.length < str2.length {\n               ~~~~ ^~~~~~\n\
    /tmp/tmpg0zb23fe.swift:20:35: error: value of type 'String' has no member 'length'\n\
    \            if str1.length < str2.length {\n                             ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ x in lst1 {\n        for y in lst2 {\n            if x == y {\n            \
    \    continue\n            }\n            if x.count < y.count {\n           \
    \     result.append(x)\n            } else {\n                result.append(y)\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp6icy3yka/tmp6icy3yka.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b5e415c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b5e10cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b5e10c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b5e10b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6icy3yka                        0x000055bc561dcc8f <unavailable> + 7311

    5    libc.so.6                          0x00002b0b5e601460 __libc_start_main +
    245

    6    tmp6icy3yka                        0x000055bc561dc389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ index in 0..<min(lst1.count, lst2.count) {\n        if lst1[index] < lst2[index]\
    \ {\n            result.append(lst1[index])\n        } else {\n            result.append(lst2[index])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpq4jx932w/tmpq4jx932w.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b708b00ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b708ad05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b708ad05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b708ad047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq4jx932w                        0x000055751c8e0aba <unavailable> + 6842

    5    libc.so.6                          0x00002b708b1fa460 __libc_start_main +
    245

    6    tmpq4jx932w                        0x000055751c8e0499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ i in 0..<min(lst1.count, lst2.count) {\n        if lst1[i] < lst2[i] {\n   \
    \         result.append(lst1[i])\n        } else {\n            result.append(lst2[i])\n\
    \        }\n    }\n    if lst1.count == lst2.count {\n        return result\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpfb3c_kms/tmpfb3c_kms.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab303f59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab303c50b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab303c50988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab303c4f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfb3c_kms                        0x000055a065a42aba <unavailable> + 6842

    5    libc.so.6                          0x00002ab304145460 __libc_start_main +
    245

    6    tmpfb3c_kms                        0x000055a065a42499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659820683
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = lst1\n    for index\
    \ in 0..<lst1.count {\n        if lst1[index] < lst2[index] {\n            result\
    \ = lst1\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp731irr_k/tmp731irr_k.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp731irr_k                        0x00005612a0de497a <unavailable> + 6522

    5    libc.so.6                          0x00002b3ca7043460 __libc_start_main +
    245

    6    tmp731irr_k                        0x00005612a0de4359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str in lst1 {\n        for str2 in lst2 {\n            if str == str2 {\n  \
    \              result.append(str)\n                break\n            }\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpb1fvjc2l/tmpb1fvjc2l.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b7010dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b6fe04b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b6fe04988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b6fe037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb1fvjc2l                        0x0000560be495c95a <unavailable> + 6490

    5    libc.so.6                          0x00002b9b702f9460 __libc_start_main +
    245

    6    tmpb1fvjc2l                        0x0000560be495c339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ index in 0..<min(lst1.count, lst2.count) {\n        if lst1[index] < lst2[index]\
    \ {\n            result.append(lst1[index])\n        } else {\n            result.append(lst2[index])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpq4jx932w/tmpq4jx932w.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b708b00ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b708ad05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b708ad05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b708ad047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq4jx932w                        0x000055751c8e0aba <unavailable> + 6842

    5    libc.so.6                          0x00002b708b1fa460 __libc_start_main +
    245

    6    tmpq4jx932w                        0x000055751c8e0499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ str1 in lst1 {\n        for str2 in lst2 {\n            if str1.count < str2.count\
    \ {\n                result.append(str1)\n                break\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmptjk9lhi2/tmptjk9lhi2.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9fa05bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9f9d52b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9f9d52988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9f9d517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptjk9lhi2                        0x0000561f4181f95a <unavailable> + 6490

    5    libc.so.6                          0x00002af9fa247460 __libc_start_main +
    245

    6    tmptjk9lhi2                        0x0000561f4181f339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ i in 0..<min(lst1.count, lst2.count) {\n        if lst1[i] < lst2[i] {\n   \
    \         result.append(lst1[i])\n        } else {\n            result.append(lst2[i])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpmqlv1dp_/tmpmqlv1dp_.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b73f7b00c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b73f77f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b73f77f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73f77f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmqlv1dp_                        0x0000563f49012aba <unavailable> + 6842

    5    libc.so.6                          0x00002b73f7cec460 __libc_start_main +
    245

    6    tmpmqlv1dp_                        0x0000563f49012499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1.count == lst2.count {\n\
    \        return lst1\n    }\n    var lst3 = lst1\n    for index in 0..<lst2.count\
    \ {\n        if lst3[index].count < lst2[index].count {\n            lst3 = lst3[index..<lst2.count]\n\
    \        } else {\n            lst3 = lst3[index..<lst2.count]\n        }\n  \
    \  }\n    return lst3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp8vp46cuf.swift:23:24: error: cannot assign value of type 'ArraySlice<String>'\
    \ to type '[String]'\n            lst3 = lst3[index..<lst2.count]\n          \
    \         ~~~~^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8vp46cuf.swift:25:24: error: cannot\
    \ assign value of type 'ArraySlice<String>' to type '[String]'\n            lst3\
    \ = lst3[index..<lst2.count]\n                   ~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820683
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ index in 0..<min(lst1.count, lst2.count) {\n        if lst1[index] < lst2[index]\
    \ {\n            result.append(lst1[index])\n        } else {\n            result.append(lst2[index])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpq4jx932w/tmpq4jx932w.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b708b00ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b708ad05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b708ad05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b708ad047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq4jx932w                        0x000055751c8e0aba <unavailable> + 6842

    5    libc.so.6                          0x00002b708b1fa460 __libc_start_main +
    245

    6    tmpq4jx932w                        0x000055751c8e0499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659820682
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ x in lst1 {\n        for y in lst2 {\n            if x == y {\n            \
    \    continue\n            }\n            if x.count < y.count {\n           \
    \     result.append(x)\n            }\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpc8ec3yk1/tmpc8ec3yk1.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2f2e89c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2f2b80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2f2b80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2f2b7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc8ec3yk1                        0x000055a78a7139aa <unavailable> + 6570

    5    libc.so.6                          0x00002ba2f3075460 __libc_start_main +
    245

    6    tmpc8ec3yk1                        0x000055a78a713389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659820683
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var arr = [String]()\n    for x\
    \ in lst1 {\n        for y in lst2 {\n            if x == y {\n              \
    \  arr.append(x)\n                break\n            }\n        }\n    }\n   \
    \ if arr.count == lst1.count {\n        return arr\n    }\n    return []\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpvmqi1h67/tmpvmqi1h67.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae5f493bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae5f4632b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae5f4632988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5f46317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvmqi1h67                        0x000055e90ef759ba <unavailable> + 6586

    5    libc.so.6                          0x00002ae5f4b27460 __libc_start_main +
    245

    6    tmpvmqi1h67                        0x000055e90ef75399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659820683
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ x in lst1 {\n        if lst2.contains(x) {\n            result.append(x)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpgjan792l/tmpgjan792l.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9026e2cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9026b23b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9026b23988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9026b227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgjan792l                        0x000056329603696a <unavailable> + 6506

    5    libc.so.6                          0x00002b9027018460 __libc_start_main +
    245

    6    tmpgjan792l                        0x0000563296036349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659820683
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    for\
    \ index in 0..<min(lst1.count, lst2.count) {\n        if lst1[index] < lst2[index]\
    \ {\n            result.append(lst1[index])\n        } else {\n            result.append(lst2[index])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpq4jx932w/tmpq4jx932w.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b708b00ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b708ad05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b708ad05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b708ad047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq4jx932w                        0x000055751c8e0aba <unavailable> + 6842

    5    libc.so.6                          0x00002b708b1fa460 __libc_start_main +
    245

    6    tmpq4jx932w                        0x000055751c8e0499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659820682
