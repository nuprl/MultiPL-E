language: swift
name: HumanEval_108_count_nums
results:
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            count += (-x).magnitude\n\
    \        } else {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp1nbkek_v.swift:16:27: error: cannot convert value of type 'UInt'\
    \ to expected argument type 'Int'\n            count += (-x).magnitude\n     \
    \                     ^\n                     Int(          )\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x > 0 {\n            count += Int(log10(abs(x)))\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp2s12nxm3.swift:16:26: error: cannot find 'log10' in scope\n   \
    \         count += Int(log10(abs(x)))\n                         ^~~~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x >= 0 {\n            count += 1\n        } else\
    \ {\n            count += count_nums(arr: &[-x])\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpno_2goj5.swift:18:38: error: cannot convert value of type '[Int]'\
    \ to expected argument type '[Int]'\n            count += count_nums(arr: &[-x])\n\
    \                                     ^\n                                    \
    \       as [Int]\n/tmp/tmpno_2goj5.swift:18:38: error: cannot pass immutable value\
    \ of type '[Int]' as inout argument\n            count += count_nums(arr: &[-x])\n\
    \                                     ^~~~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            count += (-x) % 10\n    \
    \    } else {\n            count += x\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpx6jvq94s/tmpx6jvq94s.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e57e4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e57b44b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e57b44988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e57b437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx6jvq94s                        0x000056149ea685a0 <unavailable> + 5536

    5    libc.so.6                          0x00002b1e58039460 __libc_start_main +
    245

    6    tmpx6jvq94s                        0x000056149ea68169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x >= 0 {\n            count += x\n        } else\
    \ {\n            count += x * -1\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmptbxo2k87/tmptbxo2k87.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b88695ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b88692c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b88692c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b88692c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptbxo2k87                        0x00005628ac174510 <unavailable> + 5392

    5    libc.so.6                          0x00002b88697b8460 __libc_start_main +
    245

    6    tmptbxo2k87                        0x00005628ac1740d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x >= 0 {\n            count += count_digits(x)\n\
    \        } else {\n            count += count_digits(-x) + 1 // add 1 because\
    \ first digit is negative\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_u8yk4tc.swift:16:22: error: cannot find 'count_digits' in scope\n\
    \            count += count_digits(x)\n                     ^~~~~~~~~~~~\n/tmp/tmp_u8yk4tc.swift:18:22:\
    \ error: cannot find 'count_digits' in scope\n            count += count_digits(-x)\
    \ + 1 // add 1 because first digit is negative\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for num in arr {\n        sum += num\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp9k63ckdc/tmp9k63ckdc.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd532bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd52fb6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd52fb6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd52fb57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9k63ckdc                        0x0000559867a39510 <unavailable> + 5392

    5    libc.so.6                          0x00002acd534ab460 __libc_start_main +
    245

    6    tmp9k63ckdc                        0x0000559867a390d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x > 0 {\n            count += 1\n        }\n \
    \   }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpu2nm2ref/tmpu2nm2ref.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8200c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad81fdbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad81fdba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad81fdb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu2nm2ref                        0x000055f3e893f8ca <unavailable> + 6346

    5    libc.so.6                          0x00002ad8202af460 __libc_start_main +
    245

    6    tmpu2nm2ref                        0x000055f3e893f0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            num = -num\n        }\n\
    \        count += Int(num / 10)\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpcf8g6t5n.swift:16:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for num in arr {\n        sum += num\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp9k63ckdc/tmp9k63ckdc.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd532bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd52fb6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd52fb6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd52fb57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9k63ckdc                        0x0000559867a39510 <unavailable> + 5392

    5    libc.so.6                          0x00002acd534ab460 __libc_start_main +
    245

    6    tmp9k63ckdc                        0x0000559867a390d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            count += count_nums(arr:\
    \ (-x).toInt64().toArray())\n        } else {\n            count += 1\n      \
    \  }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprvvh0jhf.swift:16:43: error: value of type 'Int' has no member\
    \ 'toInt64'\n            count += count_nums(arr: (-x).toInt64().toArray())\n\
    \                                     ~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x >= 0 {\n            count += count_nums(arr:\
    \ arr[0..<x])\n        } else {\n            count += count_nums(arr: arr[x..<arr.count])\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpv1tb5dvd.swift:16:41: error: cannot convert value of type 'ArraySlice<Int>'\
    \ to expected argument type '[Int]'\n            count += count_nums(arr: arr[0..<x])\n\
    \                                        ^\n/tmp/tmpv1tb5dvd.swift:18:41: error:\
    \ cannot convert value of type 'ArraySlice<Int>' to expected argument type '[Int]'\n\
    \            count += count_nums(arr: arr[x..<arr.count])\n                  \
    \                      ^\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x >= 0 {\n            count += count_digits(x)\n\
    \        } else {\n            count += count_digits(-x)\n        }\n    }\n \
    \   return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpio34m23t.swift:16:22: error: cannot find 'count_digits' in scope\n\
    \            count += count_digits(x)\n                     ^~~~~~~~~~~~\n/tmp/tmpio34m23t.swift:18:22:\
    \ error: cannot find 'count_digits' in scope\n            count += count_digits(-x)\n\
    \                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x > 0 {\n            count += 1\n        }\n \
    \   }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpu2nm2ref/tmpu2nm2ref.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8200c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad81fdbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad81fdba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad81fdb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu2nm2ref                        0x000055f3e893f8ca <unavailable> + 6346

    5    libc.so.6                          0x00002ad8202af460 __libc_start_main +
    245

    6    tmpu2nm2ref                        0x000055f3e893f0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for x in arr {\n        sum += x\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpeetx7i3s/tmpeetx7i3s.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba459b04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4597fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4597fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4597fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeetx7i3s                        0x000055d8ce5f3510 <unavailable> + 5392

    5    libc.so.6                          0x00002ba459cf0460 __libc_start_main +
    245

    6    tmpeetx7i3s                        0x000055d8ce5f30d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for x in arr {\n        if x >= 0 {\n            sum += x\n        }\n   \
    \ }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmp2cswpez_/tmp2cswpez_.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b312508dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3124d84b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3124d84988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3124d837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2cswpez_                        0x000055788473c5f5 <unavailable> + 5621

    5    libc.so.6                          0x00002b3125279460 __libc_start_main +
    245

    6    tmp2cswpez_                        0x000055788473c0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for x in arr {\n        sum += x\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpeetx7i3s/tmpeetx7i3s.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba459b04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4597fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4597fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4597fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeetx7i3s                        0x000055d8ce5f3510 <unavailable> + 5392

    5    libc.so.6                          0x00002ba459cf0460 __libc_start_main +
    245

    6    tmpeetx7i3s                        0x000055d8ce5f30d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            x -= x\n        }\n     \
    \   count += Int(x) / Int(10)\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp653nls2p.swift:16:15: error: left side of mutating operator isn't\
    \ mutable: 'x' is a 'let' constant\n            x -= x\n            ~ ^\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x > 0 {\n            count += 1\n        }\n \
    \   }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpu2nm2ref/tmpu2nm2ref.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8200c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad81fdbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad81fdba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad81fdb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu2nm2ref                        0x000055f3e893f8ca <unavailable> + 6346

    5    libc.so.6                          0x00002ad8202af460 __libc_start_main +
    245

    6    tmpu2nm2ref                        0x000055f3e893f0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x >= 0 {\n            count += 1\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpn2j7vylp/tmpn2j7vylp.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba48bb8cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba48b883b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba48b883988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba48b8827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn2j7vylp                        0x0000557f42356510 <unavailable> + 5392

    5    libc.so.6                          0x00002ba48bd78460 __libc_start_main +
    245

    6    tmpn2j7vylp                        0x0000557f423560d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for x in arr {\n        if x < 0 {\n            sum += (-x) % 10\n       \
    \ } else {\n            sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmprdihftl9/tmprdihftl9.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea7073ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea70435b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea70435988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea704347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprdihftl9                        0x000056372f83f5a0 <unavailable> + 5536

    5    libc.so.6                          0x00002aea7092a460 __libc_start_main +
    245

    6    tmprdihftl9                        0x000056372f83f169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x > 0 {\n            count += 1\n        }\n \
    \   }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpu2nm2ref/tmpu2nm2ref.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8200c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad81fdbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad81fdba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad81fdb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu2nm2ref                        0x000055f3e893f8ca <unavailable> + 6346

    5    libc.so.6                          0x00002ad8202af460 __libc_start_main +
    245

    6    tmpu2nm2ref                        0x000055f3e893f0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x > 0 {\n            count += 1\n        }\n \
    \   }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpu2nm2ref/tmpu2nm2ref.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8200c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad81fdbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad81fdba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad81fdb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu2nm2ref                        0x000055f3e893f8ca <unavailable> + 6346

    5    libc.so.6                          0x00002ad8202af460 __libc_start_main +
    245

    6    tmpu2nm2ref                        0x000055f3e893f0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            count += (-x) / 10\n    \
    \    } else {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpcoumkcxt/tmpcoumkcxt.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b708b711c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b708b408b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b708b408988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b708b4077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcoumkcxt                        0x00005634a7d865a0 <unavailable> + 5536

    5    libc.so.6                          0x00002b708b8fd460 __libc_start_main +
    245

    6    tmpcoumkcxt                        0x00005634a7d86169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            x -= x\n        }\n     \
    \   if x % 10 == 0 {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpahs2w7l6.swift:16:15: error: left side of mutating operator isn't\
    \ mutable: 'x' is a 'let' constant\n            x -= x\n            ~ ^\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    guard arr.count\
    \ > 0 else { return 0 }\n    var count = 0\n    for x in arr {\n        if x >\
    \ 0 {\n            count += Int(log(x, 10))\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpc4m015iy.swift:17:26: error: cannot find 'log' in scope\n     \
    \       count += Int(log(x, 10))\n                         ^~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    guard arr.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for n in arr {\n        sum += n\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpunz077jt/tmpunz077jt.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abcae3dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abcae0d6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abcae0d6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abcae0d57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpunz077jt                        0x0000560c2392d560 <unavailable> + 5472

    5    libc.so.6                          0x00002abcae5cb460 __libc_start_main +
    245

    6    tmpunz077jt                        0x0000560c2392d129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            count += (-x) + 1\n     \
    \   } else {\n            count += 1\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpx4e10sn1/tmpx4e10sn1.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b160cbf2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b160c8e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b160c8e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b160c8e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx4e10sn1                        0x00005651c08f7510 <unavailable> + 5392

    5    libc.so.6                          0x00002b160cdde460 __libc_start_main +
    245

    6    tmpx4e10sn1                        0x00005651c08f70d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x >= 0 {\n            count += count_nums(arr:\
    \ arr[0..<x])\n        } else {\n            count += count_nums(arr: arr[x..<arr.count])\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpv1tb5dvd.swift:16:41: error: cannot convert value of type 'ArraySlice<Int>'\
    \ to expected argument type '[Int]'\n            count += count_nums(arr: arr[0..<x])\n\
    \                                        ^\n/tmp/tmpv1tb5dvd.swift:18:41: error:\
    \ cannot convert value of type 'ArraySlice<Int>' to expected argument type '[Int]'\n\
    \            count += count_nums(arr: arr[x..<arr.count])\n                  \
    \                      ^\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x > 0 {\n            count += 1\n        }\n \
    \   }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpu2nm2ref/tmpu2nm2ref.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8200c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad81fdbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad81fdba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad81fdb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu2nm2ref                        0x000055f3e893f8ca <unavailable> + 6346

    5    libc.so.6                          0x00002ad8202af460 __libc_start_main +
    245

    6    tmpu2nm2ref                        0x000055f3e893f0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            count += (-x).magnitude\n\
    \        } else {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp1nbkek_v.swift:16:27: error: cannot convert value of type 'UInt'\
    \ to expected argument type 'Int'\n            count += (-x).magnitude\n     \
    \                     ^\n                     Int(          )\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x >= 0 {\n            count += x\n        } else\
    \ {\n            count += x * -1\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmptbxo2k87/tmptbxo2k87.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b88695ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b88692c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b88692c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b88692c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptbxo2k87                        0x00005628ac174510 <unavailable> + 5392

    5    libc.so.6                          0x00002b88697b8460 __libc_start_main +
    245

    6    tmptbxo2k87                        0x00005628ac1740d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x > 0 {\n            count += 1\n        }\n \
    \   }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpu2nm2ref/tmpu2nm2ref.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8200c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad81fdbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad81fdba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad81fdb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu2nm2ref                        0x000055f3e893f8ca <unavailable> + 6346

    5    libc.so.6                          0x00002ad8202af460 __libc_start_main +
    245

    6    tmpu2nm2ref                        0x000055f3e893f0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x >= 0 {\n            count += 1\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpn2j7vylp/tmpn2j7vylp.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba48bb8cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba48b883b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba48b883988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba48b8827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn2j7vylp                        0x0000557f42356510 <unavailable> + 5392

    5    libc.so.6                          0x00002ba48bd78460 __libc_start_main +
    245

    6    tmpn2j7vylp                        0x0000557f423560d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for x in arr {\n        sum += x\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpeetx7i3s/tmpeetx7i3s.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba459b04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4597fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4597fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4597fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeetx7i3s                        0x000055d8ce5f3510 <unavailable> + 5392

    5    libc.so.6                          0x00002ba459cf0460 __libc_start_main +
    245

    6    tmpeetx7i3s                        0x000055d8ce5f30d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            count += (-x) + 1\n     \
    \   } else {\n            count += 1\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpx4e10sn1/tmpx4e10sn1.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b160cbf2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b160c8e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b160c8e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b160c8e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx4e10sn1                        0x00005651c08f7510 <unavailable> + 5392

    5    libc.so.6                          0x00002b160cdde460 __libc_start_main +
    245

    6    tmpx4e10sn1                        0x00005651c08f70d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    guard arr.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for x in arr {\n        sum += x\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmp5jvnc8sm/tmp5jvnc8sm.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b84f3e8bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84f3b82b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84f3b82988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84f3b817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5jvnc8sm                        0x000055e0444ce560 <unavailable> + 5472

    5    libc.so.6                          0x00002b84f4077460 __libc_start_main +
    245

    6    tmp5jvnc8sm                        0x000055e0444ce129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for x in arr {\n        sum += x\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpeetx7i3s/tmpeetx7i3s.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba459b04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4597fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4597fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4597fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeetx7i3s                        0x000055d8ce5f3510 <unavailable> + 5392

    5    libc.so.6                          0x00002ba459cf0460 __libc_start_main +
    245

    6    tmpeetx7i3s                        0x000055d8ce5f30d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for x in arr {\n        sum += x\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpeetx7i3s/tmpeetx7i3s.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba459b04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4597fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4597fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4597fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeetx7i3s                        0x000055d8ce5f3510 <unavailable> + 5392

    5    libc.so.6                          0x00002ba459cf0460 __libc_start_main +
    245

    6    tmpeetx7i3s                        0x000055d8ce5f30d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    guard arr.count\
    \ > 0 else {\n        return 0\n    }\n    var count = 0\n    for x in arr {\n\
    \        if x < 0 {\n            x -= (x % 10)\n        }\n        count += x\
    \ % 10\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpemt0qtvf.swift:19:15: error: left side of mutating operator isn't\
    \ mutable: 'x' is a 'let' constant\n            x -= (x % 10)\n            ~ ^\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for x in arr {\n        sum += x\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpeetx7i3s/tmpeetx7i3s.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba459b04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4597fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4597fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4597fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeetx7i3s                        0x000055d8ce5f3510 <unavailable> + 5392

    5    libc.so.6                          0x00002ba459cf0460 __libc_start_main +
    245

    6    tmpeetx7i3s                        0x000055d8ce5f30d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            count += count_nums([-x])\n\
    \        } else {\n            count += count_nums([x])\n        }\n    }\n  \
    \  return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpephq_iq_.swift:16:33: error: missing argument label 'arr:' in call\n\
    \            count += count_nums([-x])\n                                ^\n  \
    \                              arr: \n/tmp/tmpephq_iq_.swift:18:33: error: missing\
    \ argument label 'arr:' in call\n            count += count_nums([x])\n      \
    \                          ^\n                                arr: \n"
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            x -= Int(log10(abs(x)))\n\
    \        }\n        count += Int(log10(abs(x)))\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpgbdkkayy.swift:16:22: error: cannot find 'log10' in scope\n   \
    \         x -= Int(log10(abs(x)))\n                     ^~~~~\n/tmp/tmpgbdkkayy.swift:18:22:\
    \ error: cannot find 'log10' in scope\n        count += Int(log10(abs(x)))\n \
    \                    ^~~~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x > 0 {\n            count += x\n        }\n \
    \   }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmp3at4mjm5/tmp3at4mjm5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afa769cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afa766c4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afa766c4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afa766c37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3at4mjm5                        0x000055b7659d75f5 <unavailable> + 5621

    5    libc.so.6                          0x00002afa76bb9460 __libc_start_main +
    245

    6    tmp3at4mjm5                        0x000055b7659d70d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            count += (-x) + 1\n     \
    \   } else {\n            count += 1\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpx4e10sn1/tmpx4e10sn1.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b160cbf2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b160c8e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b160c8e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b160c8e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx4e10sn1                        0x00005651c08f7510 <unavailable> + 5392

    5    libc.so.6                          0x00002b160cdde460 __libc_start_main +
    245

    6    tmpx4e10sn1                        0x00005651c08f70d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            x -= x\n        }\n     \
    \   if x > 0 {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprx7ru2qy.swift:16:15: error: left side of mutating operator isn't\
    \ mutable: 'x' is a 'let' constant\n            x -= x\n            ~ ^\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for x in arr {\n        sum += x\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpeetx7i3s/tmpeetx7i3s.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba459b04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4597fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4597fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4597fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeetx7i3s                        0x000055d8ce5f3510 <unavailable> + 5392

    5    libc.so.6                          0x00002ba459cf0460 __libc_start_main +
    245

    6    tmpeetx7i3s                        0x000055d8ce5f30d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x >= 0 {\n            count += x\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpc872xw1l/tmpc872xw1l.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b267f7edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b267f4e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b267f4e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b267f4e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc872xw1l                        0x000055e724e8c5f5 <unavailable> + 5621

    5    libc.so.6                          0x00002b267f9d9460 __libc_start_main +
    245

    6    tmpc872xw1l                        0x000055e724e8c0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x > 0 {\n            count += 1\n        }\n \
    \   }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpu2nm2ref/tmpu2nm2ref.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8200c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad81fdbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad81fdba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad81fdb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu2nm2ref                        0x000055f3e893f8ca <unavailable> + 6346

    5    libc.so.6                          0x00002ad8202af460 __libc_start_main +
    245

    6    tmpu2nm2ref                        0x000055f3e893f0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x >= 0 {\n            count += x\n        } else\
    \ {\n            count += x * -1\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmptbxo2k87/tmptbxo2k87.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b88695ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b88692c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b88692c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b88692c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptbxo2k87                        0x00005628ac174510 <unavailable> + 5392

    5    libc.so.6                          0x00002b88697b8460 __libc_start_main +
    245

    6    tmptbxo2k87                        0x00005628ac1740d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for x in arr {\n        sum += x\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpeetx7i3s/tmpeetx7i3s.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba459b04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4597fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4597fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4597fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeetx7i3s                        0x000055d8ce5f3510 <unavailable> + 5392

    5    libc.so.6                          0x00002ba459cf0460 __libc_start_main +
    245

    6    tmpeetx7i3s                        0x000055d8ce5f30d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x >= 0 {\n            count += count_digits(x)\n\
    \        } else {\n            count += count_digits(-x) + 2\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpnvtaj0lt.swift:16:22: error: cannot find 'count_digits' in scope\n\
    \            count += count_digits(x)\n                     ^~~~~~~~~~~~\n/tmp/tmpnvtaj0lt.swift:18:22:\
    \ error: cannot find 'count_digits' in scope\n            count += count_digits(-x)\
    \ + 2\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x > 0 {\n            count += 1\n        }\n \
    \   }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpu2nm2ref/tmpu2nm2ref.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8200c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad81fdbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad81fdba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad81fdb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu2nm2ref                        0x000055f3e893f8ca <unavailable> + 6346

    5    libc.so.6                          0x00002ad8202af460 __libc_start_main +
    245

    6    tmpu2nm2ref                        0x000055f3e893f0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for x in arr {\n        sum += x\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpeetx7i3s/tmpeetx7i3s.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba459b04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4597fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4597fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4597fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeetx7i3s                        0x000055d8ce5f3510 <unavailable> + 5392

    5    libc.so.6                          0x00002ba459cf0460 __libc_start_main +
    245

    6    tmpeetx7i3s                        0x000055d8ce5f30d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x > 0 {\n            count += 1\n        }\n \
    \   }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpu2nm2ref/tmpu2nm2ref.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8200c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad81fdbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad81fdba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad81fdb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu2nm2ref                        0x000055f3e893f8ca <unavailable> + 6346

    5    libc.so.6                          0x00002ad8202af460 __libc_start_main +
    245

    6    tmpu2nm2ref                        0x000055f3e893f0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for x in arr {\n        sum += x\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpeetx7i3s/tmpeetx7i3s.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba459b04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4597fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4597fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4597fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeetx7i3s                        0x000055d8ce5f3510 <unavailable> + 5392

    5    libc.so.6                          0x00002ba459cf0460 __libc_start_main +
    245

    6    tmpeetx7i3s                        0x000055d8ce5f30d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            x -= Int(pow(10, Int(log10(abs(x)))))\n\
    \        }\n        if x > 0 && x % 10 == 0 {\n            count += 1\n      \
    \  }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprkjtsvt_.swift:16:22: error: cannot find 'pow' in scope\n     \
    \       x -= Int(pow(10, Int(log10(abs(x)))))\n                     ^~~\n/tmp/tmprkjtsvt_.swift:16:34:\
    \ error: cannot find 'log10' in scope\n            x -= Int(pow(10, Int(log10(abs(x)))))\n\
    \                                 ^~~~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            count += (-x).magnitude\n\
    \        } else {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp1nbkek_v.swift:16:27: error: cannot convert value of type 'UInt'\
    \ to expected argument type 'Int'\n            count += (-x).magnitude\n     \
    \                     ^\n                     Int(          )\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    guard arr.count\
    \ > 0 else { return 0 }\n    var count = 0\n    for n in arr {\n        if n >\
    \ 0 {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpwib5ijzg/tmpwib5ijzg.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae19f587c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae19f27eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae19f27e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae19f27d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwib5ijzg                        0x0000556356f2e91a <unavailable> + 6426

    5    libc.so.6                          0x00002ae19f773460 __libc_start_main +
    245

    6    tmpwib5ijzg                        0x0000556356f2e129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for num in arr {\n        sum += num\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp9k63ckdc/tmp9k63ckdc.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd532bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd52fb6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd52fb6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd52fb57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9k63ckdc                        0x0000559867a39510 <unavailable> + 5392

    5    libc.so.6                          0x00002acd534ab460 __libc_start_main +
    245

    6    tmp9k63ckdc                        0x0000559867a390d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            x -= x\n        }\n     \
    \   if x > 0 && x % 10 == 0 {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpnm5834ls.swift:16:15: error: left side of mutating operator isn't\
    \ mutable: 'x' is a 'let' constant\n            x -= x\n            ~ ^\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        count += count_digits(num)\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp5hq6dibh.swift:15:18: error: cannot find 'count_digits' in scope\n\
    \        count += count_digits(num)\n                 ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        count += count_digits(x)\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpgctohji_.swift:15:18: error: cannot find 'count_digits' in scope\n\
    \        count += count_digits(x)\n                 ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            count += count_nums(arr:\
    \ (-x).toIntArray())\n        } else {\n            count += 1\n        }\n  \
    \  }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpdtaz5coy.swift:16:43: error: value of type 'Int' has no member\
    \ 'toIntArray'\n            count += count_nums(arr: (-x).toIntArray())\n    \
    \                                 ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            count += (-x) + 1\n     \
    \   } else {\n            count += 1\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpx4e10sn1/tmpx4e10sn1.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b160cbf2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b160c8e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b160c8e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b160c8e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx4e10sn1                        0x00005651c08f7510 <unavailable> + 5392

    5    libc.so.6                          0x00002b160cdde460 __libc_start_main +
    245

    6    tmpx4e10sn1                        0x00005651c08f70d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        count += count_digits(x)\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpgctohji_.swift:15:18: error: cannot find 'count_digits' in scope\n\
    \        count += count_digits(x)\n                 ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            x -= x\n        }\n     \
    \   count += Int(log10(Float64(x)))\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp02tztq_v.swift:16:15: error: left side of mutating operator isn't\
    \ mutable: 'x' is a 'let' constant\n            x -= x\n            ~ ^\n/tmp/tmp02tztq_v.swift:18:22:\
    \ error: cannot find 'log10' in scope\n        count += Int(log10(Float64(x)))\n\
    \                     ^~~~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return count_nums_helper(arr,\
    \ arr[0], 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpz6jmlo_p.swift:13:12: error: cannot find 'count_nums_helper' in\
    \ scope\n    return count_nums_helper(arr, arr[0], 0)\n           ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for x in arr {\n        sum += x\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpeetx7i3s/tmpeetx7i3s.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba459b04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4597fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4597fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4597fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeetx7i3s                        0x000055d8ce5f3510 <unavailable> + 5392

    5    libc.so.6                          0x00002ba459cf0460 __libc_start_main +
    245

    6    tmpeetx7i3s                        0x000055d8ce5f30d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    guard arr.count\
    \ > 0 else {\n        return 0\n    }\n    var sum = 0\n    for n in arr {\n \
    \       sum += n\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpj267v09v/tmpj267v09v.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9a5fc94c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9a5f98bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9a5f98b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9a5f98a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj267v09v                        0x0000560d5a585560 <unavailable> + 5472

    5    libc.so.6                          0x00002b9a5fe80460 __libc_start_main +
    245

    6    tmpj267v09v                        0x0000560d5a585129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            num = -num\n        }\n\
    \        for d in num {\n            if d > 0 {\n                count += 1\n\
    \            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpf6jn8i7_.swift:16:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n/tmp/tmpf6jn8i7_.swift:18:18:\
    \ error: for-in loop requires 'Int' to conform to 'Sequence'\n        for d in\
    \ num {\n                 ^~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for num in arr {\n        sum += num\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp9k63ckdc/tmp9k63ckdc.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd532bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd52fb6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd52fb6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd52fb57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9k63ckdc                        0x0000559867a39510 <unavailable> + 5392

    5    libc.so.6                          0x00002acd534ab460 __libc_start_main +
    245

    6    tmp9k63ckdc                        0x0000559867a390d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return count_nums_helper(arr,\
    \ 0, 0, 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as\
    \ [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp3ej8w7bw.swift:13:12: error: cannot find 'count_nums_helper' in\
    \ scope\n    return count_nums_helper(arr, 0, 0, 0)\n           ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            num = -num\n        }\n\
    \        count += Int(num / 10)\n        num %= 10\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp03p55zhp.swift:16:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n/tmp/tmp03p55zhp.swift:19:13:\
    \ error: left side of mutating operator isn't mutable: 'num' is a 'let' constant\n\
    \        num %= 10\n        ~~~ ^\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for num in arr {\n        sum += num\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp9k63ckdc/tmp9k63ckdc.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd532bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd52fb6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd52fb6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd52fb57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9k63ckdc                        0x0000559867a39510 <unavailable> + 5392

    5    libc.so.6                          0x00002acd534ab460 __libc_start_main +
    245

    6    tmp9k63ckdc                        0x0000559867a390d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            count += (-x) / 10\n    \
    \    } else {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpcoumkcxt/tmpcoumkcxt.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b708b711c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b708b408b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b708b408988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b708b4077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcoumkcxt                        0x00005634a7d865a0 <unavailable> + 5536

    5    libc.so.6                          0x00002b708b8fd460 __libc_start_main +
    245

    6    tmpcoumkcxt                        0x00005634a7d86169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            count += (-x) + 1\n     \
    \   } else {\n            count += 1\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpx4e10sn1/tmpx4e10sn1.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b160cbf2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b160c8e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b160c8e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b160c8e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx4e10sn1                        0x00005651c08f7510 <unavailable> + 5392

    5    libc.so.6                          0x00002b160cdde460 __libc_start_main +
    245

    6    tmpx4e10sn1                        0x00005651c08f70d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x > 0 {\n            count += 1\n        }\n \
    \   }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpu2nm2ref/tmpu2nm2ref.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8200c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad81fdbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad81fdba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad81fdb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu2nm2ref                        0x000055f3e893f8ca <unavailable> + 6346

    5    libc.so.6                          0x00002ad8202af460 __libc_start_main +
    245

    6    tmpu2nm2ref                        0x000055f3e893f0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for x in arr {\n        if x < 0 {\n            sum += (-x) % 10\n       \
    \ } else {\n            sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmprdihftl9/tmprdihftl9.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea7073ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea70435b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea70435988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea704347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprdihftl9                        0x000056372f83f5a0 <unavailable> + 5536

    5    libc.so.6                          0x00002aea7092a460 __libc_start_main +
    245

    6    tmprdihftl9                        0x000056372f83f169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            count += (-x).magnitude\n\
    \        } else {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp1nbkek_v.swift:16:27: error: cannot convert value of type 'UInt'\
    \ to expected argument type 'Int'\n            count += (-x).magnitude\n     \
    \                     ^\n                     Int(          )\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            num = -num\n        }\n\
    \        count += num / 10\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpqjq9vzmz.swift:16:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    guard arr.count\
    \ > 0 else {\n        return 0\n    }\n    var count = 0\n    for x in arr {\n\
    \        if x < 0 {\n            x -= Int(pow(10, Int(log10(abs(x)))))\n     \
    \   }\n        count += Int(pow(10, Int(log10(abs(x)))))\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_2x46xng.swift:19:22: error: cannot find 'pow' in scope\n     \
    \       x -= Int(pow(10, Int(log10(abs(x)))))\n                     ^~~\n/tmp/tmp_2x46xng.swift:19:34:\
    \ error: cannot find 'log10' in scope\n            x -= Int(pow(10, Int(log10(abs(x)))))\n\
    \                                 ^~~~~\n/tmp/tmp_2x46xng.swift:21:22: error:\
    \ cannot find 'pow' in scope\n        count += Int(pow(10, Int(log10(abs(x)))))\n\
    \                     ^~~\n/tmp/tmp_2x46xng.swift:21:34: error: cannot find 'log10'\
    \ in scope\n        count += Int(pow(10, Int(log10(abs(x)))))\n              \
    \                   ^~~~~\n"
  stdout: ''
  timestamp: 1660013343
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            num = -num\n        }\n\
    \        count += num / 10\n        num %= 10\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpe78wrfpl.swift:16:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n/tmp/tmpe78wrfpl.swift:19:13:\
    \ error: left side of mutating operator isn't mutable: 'num' is a 'let' constant\n\
    \        num %= 10\n        ~~~ ^\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    guard arr.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for x in arr {\n        sum += x\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmp5jvnc8sm/tmp5jvnc8sm.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b84f3e8bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84f3b82b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84f3b82988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84f3b817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5jvnc8sm                        0x000055e0444ce560 <unavailable> + 5472

    5    libc.so.6                          0x00002b84f4077460 __libc_start_main +
    245

    6    tmp5jvnc8sm                        0x000055e0444ce129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            count += (-x) % 10\n    \
    \    } else {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp8rjhfnoi/tmp8rjhfnoi.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85bff25c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85bfc1cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b85bfc1c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85bfc1b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8rjhfnoi                        0x000055a13111d5a0 <unavailable> + 5536

    5    libc.so.6                          0x00002b85c0111460 __libc_start_main +
    245

    6    tmp8rjhfnoi                        0x000055a13111d169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013343
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x > 0 {\n            count += 1\n        }\n \
    \   }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpu2nm2ref/tmpu2nm2ref.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8200c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad81fdbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad81fdba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad81fdb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu2nm2ref                        0x000055f3e893f8ca <unavailable> + 6346

    5    libc.so.6                          0x00002ad8202af460 __libc_start_main +
    245

    6    tmpu2nm2ref                        0x000055f3e893f0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            count += (-x) % 10\n    \
    \    } else {\n            count += x\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpx6jvq94s/tmpx6jvq94s.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e57e4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e57b44b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e57b44988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e57b437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx6jvq94s                        0x000056149ea685a0 <unavailable> + 5536

    5    libc.so.6                          0x00002b1e58039460 __libc_start_main +
    245

    6    tmpx6jvq94s                        0x000056149ea68169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x >= 0 {\n            count += count_digits(x)\n\
    \        } else {\n            count += count_digits(-x) + 1 // +1 because first\
    \ digit is negative\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzt6s0yhh.swift:16:22: error: cannot find 'count_digits' in scope\n\
    \            count += count_digits(x)\n                     ^~~~~~~~~~~~\n/tmp/tmpzt6s0yhh.swift:18:22:\
    \ error: cannot find 'count_digits' in scope\n            count += count_digits(-x)\
    \ + 1 // +1 because first digit is negative\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            count += (-x).magnitude\n\
    \        } else {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp1nbkek_v.swift:16:27: error: cannot convert value of type 'UInt'\
    \ to expected argument type 'Int'\n            count += (-x).magnitude\n     \
    \                     ^\n                     Int(          )\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            count += (-x) + 1\n     \
    \   } else {\n            count += 1\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpx4e10sn1/tmpx4e10sn1.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b160cbf2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b160c8e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b160c8e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b160c8e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx4e10sn1                        0x00005651c08f7510 <unavailable> + 5392

    5    libc.so.6                          0x00002b160cdde460 __libc_start_main +
    245

    6    tmpx4e10sn1                        0x00005651c08f70d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return count_nums_helper(arr,\
    \ 0, 0, 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as\
    \ [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp3ej8w7bw.swift:13:12: error: cannot find 'count_nums_helper' in\
    \ scope\n    return count_nums_helper(arr, 0, 0, 0)\n           ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for x in arr {\n        sum += x\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpeetx7i3s/tmpeetx7i3s.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba459b04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4597fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4597fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4597fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeetx7i3s                        0x000055d8ce5f3510 <unavailable> + 5392

    5    libc.so.6                          0x00002ba459cf0460 __libc_start_main +
    245

    6    tmpeetx7i3s                        0x000055d8ce5f30d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for x in arr {\n        sum += x\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpeetx7i3s/tmpeetx7i3s.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba459b04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4597fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4597fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4597fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeetx7i3s                        0x000055d8ce5f3510 <unavailable> + 5392

    5    libc.so.6                          0x00002ba459cf0460 __libc_start_main +
    245

    6    tmpeetx7i3s                        0x000055d8ce5f30d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            num = -num\n        }\n\
    \        count += num / 10\n        num %= 10\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpe78wrfpl.swift:16:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n/tmp/tmpe78wrfpl.swift:19:13:\
    \ error: left side of mutating operator isn't mutable: 'num' is a 'let' constant\n\
    \        num %= 10\n        ~~~ ^\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            num = -num\n        }\n\
    \        count += num / 10\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpqjq9vzmz.swift:16:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x > 0 {\n            count += 1\n        }\n \
    \   }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpu2nm2ref/tmpu2nm2ref.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8200c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad81fdbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad81fdba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad81fdb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu2nm2ref                        0x000055f3e893f8ca <unavailable> + 6346

    5    libc.so.6                          0x00002ad8202af460 __libc_start_main +
    245

    6    tmpu2nm2ref                        0x000055f3e893f0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for x in arr {\n        sum += x\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpeetx7i3s/tmpeetx7i3s.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba459b04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4597fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4597fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4597fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeetx7i3s                        0x000055d8ce5f3510 <unavailable> + 5392

    5    libc.so.6                          0x00002ba459cf0460 __libc_start_main +
    245

    6    tmpeetx7i3s                        0x000055d8ce5f30d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for x in arr {\n        sum += x\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpeetx7i3s/tmpeetx7i3s.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba459b04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4597fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4597fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4597fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeetx7i3s                        0x000055d8ce5f3510 <unavailable> + 5392

    5    libc.so.6                          0x00002ba459cf0460 __libc_start_main +
    245

    6    tmpeetx7i3s                        0x000055d8ce5f30d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x >= 0 {\n            count += 1\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpn2j7vylp/tmpn2j7vylp.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba48bb8cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba48b883b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba48b883988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba48b8827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn2j7vylp                        0x0000557f42356510 <unavailable> + 5392

    5    libc.so.6                          0x00002ba48bd78460 __libc_start_main +
    245

    6    tmpn2j7vylp                        0x0000557f423560d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x > 0 {\n            count += count_digits(x)\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_47tj0qe.swift:16:22: error: cannot find 'count_digits' in scope\n\
    \            count += count_digits(x)\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            count += (-x) % 10\n    \
    \    } else {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp8rjhfnoi/tmp8rjhfnoi.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85bff25c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85bfc1cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b85bfc1c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85bfc1b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8rjhfnoi                        0x000055a13111d5a0 <unavailable> + 5536

    5    libc.so.6                          0x00002b85c0111460 __libc_start_main +
    245

    6    tmp8rjhfnoi                        0x000055a13111d169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013343
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x >= 0 {\n            count += count_nums(arr:\
    \ &[x - 1])\n        } else {\n            count += count_nums(arr: &[x + 1])\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprz31afsl.swift:16:38: error: cannot convert value of type '[Int]'\
    \ to expected argument type '[Int]'\n            count += count_nums(arr: &[x\
    \ - 1])\n                                     ^\n                            \
    \                  as [Int]\n/tmp/tmprz31afsl.swift:16:38: error: cannot pass\
    \ immutable value of type '[Int]' as inout argument\n            count += count_nums(arr:\
    \ &[x - 1])\n                                     ^~~~~~~~\n/tmp/tmprz31afsl.swift:18:38:\
    \ error: cannot convert value of type '[Int]' to expected argument type '[Int]'\n\
    \            count += count_nums(arr: &[x + 1])\n                            \
    \         ^\n                                              as [Int]\n/tmp/tmprz31afsl.swift:18:38:\
    \ error: cannot pass immutable value of type '[Int]' as inout argument\n     \
    \       count += count_nums(arr: &[x + 1])\n                                 \
    \    ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x >= 0 {\n            count += count_nums(arr:\
    \ arr[0..<x])\n        } else {\n            count += count_nums(arr: arr[x..<0])\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpao1sqe8o.swift:16:41: error: cannot convert value of type 'ArraySlice<Int>'\
    \ to expected argument type '[Int]'\n            count += count_nums(arr: arr[0..<x])\n\
    \                                        ^\n/tmp/tmpao1sqe8o.swift:18:41: error:\
    \ cannot convert value of type 'ArraySlice<Int>' to expected argument type '[Int]'\n\
    \            count += count_nums(arr: arr[x..<0])\n                          \
    \              ^\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x >= 0 {\n            count += 1\n        } else\
    \ {\n            count += count_digits(abs(x))\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprcrpdkqe.swift:18:22: error: cannot find 'count_digits' in scope\n\
    \            count += count_digits(abs(x))\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            count += (-x) / 9\n     \
    \   } else {\n            count += 1\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp4kt7gn5f/tmp4kt7gn5f.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba86653dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba866234b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba866234988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8662337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4kt7gn5f                        0x0000564f095315a0 <unavailable> + 5536

    5    libc.so.6                          0x00002ba866729460 __libc_start_main +
    245

    6    tmp4kt7gn5f                        0x0000564f09531169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013343
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            num = -num\n        }\n\
    \        count += num / 10\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpqjq9vzmz.swift:16:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            num = -num\n        }\n\
    \        count += Int(num / 10)\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpcf8g6t5n.swift:16:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            x -= x\n        }\n     \
    \   count += Int(x) / Int(10)\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp653nls2p.swift:16:15: error: left side of mutating operator isn't\
    \ mutable: 'x' is a 'let' constant\n            x -= x\n            ~ ^\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for x in arr {\n        sum += x\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpeetx7i3s/tmpeetx7i3s.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba459b04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4597fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4597fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4597fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeetx7i3s                        0x000055d8ce5f3510 <unavailable> + 5392

    5    libc.so.6                          0x00002ba459cf0460 __libc_start_main +
    245

    6    tmpeetx7i3s                        0x000055d8ce5f30d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for x in arr {\n        if x < 0 {\n            sum += (-x) % 10\n       \
    \ } else {\n            sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmprdihftl9/tmprdihftl9.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea7073ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea70435b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea70435988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea704347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprdihftl9                        0x000056372f83f5a0 <unavailable> + 5536

    5    libc.so.6                          0x00002aea7092a460 __libc_start_main +
    245

    6    tmprdihftl9                        0x000056372f83f169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            count += (-x) + 1\n     \
    \   } else {\n            count += 1\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpx4e10sn1/tmpx4e10sn1.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b160cbf2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b160c8e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b160c8e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b160c8e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx4e10sn1                        0x00005651c08f7510 <unavailable> + 5392

    5    libc.so.6                          0x00002b160cdde460 __libc_start_main +
    245

    6    tmpx4e10sn1                        0x00005651c08f70d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for x in arr {\n        sum += x\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpeetx7i3s/tmpeetx7i3s.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba459b04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4597fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4597fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4597fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeetx7i3s                        0x000055d8ce5f3510 <unavailable> + 5392

    5    libc.so.6                          0x00002ba459cf0460 __libc_start_main +
    245

    6    tmpeetx7i3s                        0x000055d8ce5f30d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        count += count_digits(num)\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp5hq6dibh.swift:15:18: error: cannot find 'count_digits' in scope\n\
    \        count += count_digits(num)\n                 ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            x -= x\n        }\n     \
    \   if x > 0 {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprx7ru2qy.swift:16:15: error: left side of mutating operator isn't\
    \ mutable: 'x' is a 'let' constant\n            x -= x\n            ~ ^\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            count += (-x) + 1\n     \
    \   } else {\n            count += 1\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpx4e10sn1/tmpx4e10sn1.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b160cbf2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b160c8e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b160c8e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b160c8e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx4e10sn1                        0x00005651c08f7510 <unavailable> + 5392

    5    libc.so.6                          0x00002b160cdde460 __libc_start_main +
    245

    6    tmpx4e10sn1                        0x00005651c08f70d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            count += count_nums(arr:\
    \ (-x).toIntArray())\n        } else {\n            count += 1\n        }\n  \
    \  }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpdtaz5coy.swift:16:43: error: value of type 'Int' has no member\
    \ 'toIntArray'\n            count += count_nums(arr: (-x).toIntArray())\n    \
    \                                 ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x > 0 {\n            count += 1\n        }\n \
    \   }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpu2nm2ref/tmpu2nm2ref.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8200c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad81fdbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad81fdba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad81fdb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu2nm2ref                        0x000055f3e893f8ca <unavailable> + 6346

    5    libc.so.6                          0x00002ad8202af460 __libc_start_main +
    245

    6    tmpu2nm2ref                        0x000055f3e893f0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x >= 0 {\n            count += count_digits(x)\n\
    \        } else {\n            count += count_digits(-x)\n        }\n    }\n \
    \   return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpio34m23t.swift:16:22: error: cannot find 'count_digits' in scope\n\
    \            count += count_digits(x)\n                     ^~~~~~~~~~~~\n/tmp/tmpio34m23t.swift:18:22:\
    \ error: cannot find 'count_digits' in scope\n            count += count_digits(-x)\n\
    \                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x >= 0 {\n            count += count_digits(x)\n\
    \        } else {\n            count += count_digits(-x)\n        }\n    }\n \
    \   return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpio34m23t.swift:16:22: error: cannot find 'count_digits' in scope\n\
    \            count += count_digits(x)\n                     ^~~~~~~~~~~~\n/tmp/tmpio34m23t.swift:18:22:\
    \ error: cannot find 'count_digits' in scope\n            count += count_digits(-x)\n\
    \                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            count += (-x) + 1\n     \
    \   } else {\n            count += 1\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpx4e10sn1/tmpx4e10sn1.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b160cbf2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b160c8e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b160c8e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b160c8e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx4e10sn1                        0x00005651c08f7510 <unavailable> + 5392

    5    libc.so.6                          0x00002b160cdde460 __libc_start_main +
    245

    6    tmpx4e10sn1                        0x00005651c08f70d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    guard arr.count\
    \ > 0 else {\n        return 0\n    }\n    var count = 0\n    for num in arr {\n\
    \        guard num >= 0 else {\n            guard num < -10 else {\n         \
    \       guard num < 0 else {\n                    guard num < 10 else {\n    \
    \                    guard num < 100 else {\n                            guard\
    \ num < 1000 else {\n                                guard num < 10000 else {\n\
    \                                    guard num < 100000 else {\n             \
    \                           guard num < 1000000 else {\n                     \
    \                       guard num < 10000000 else {\n                        \
    \                        guard num < 100000000 else {\n                      \
    \                              guard num < 1000000000 else {\n               \
    \                                         guard num < 10000000000 else {\n   \
    \                                                         guard num < 100000000000\
    \ else {\n                                                                guard\
    \ num < 1000000000000 else {\n                                               \
    \                     guard num < 10000000000000 else {\n                    \
    \                                                    guard num < 1000000000000000\
    \ else {\n                                                                   \
    \         guard num < 10000000000000000 else {\n                             \
    \                                                   guard num < 100000000000000000\
    \ else {\n                                                                   \
    \                 guard num < 1000000000000000010 else {\n                   \
    \                                                                     guard num\
    \ < 10000000000000000100 else {\n                                            \
    \                                                guard num < 100000000000000001000\
    \ else {\n                                                                   \
    \                             guard num < 1000000000000000010000 else {\n    \
    \                                                                            \
    \                    guard num < 10000000000000000100000 else {\n            \
    \                                                                            \
    \                guard num < 100000000000000001000000 else {\n               \
    \                                                                            \
    \                 guard num < 1000000000000000010000000 else {\n             \
    \                                                                            \
    \                       guard num < 10000000000000000100000000 else {\n      \
    \                                                                            \
    \                                  guard num < 100000000000000001000000000 else\
    \ {\n                                                                        \
    \                                                guard num < 1000000000000000010000000000\
    \ else {\n                                                                   \
    \                                                         guard num < 10000000000000000100000000000\
    \ else {\n                                                                   \
    \                                                             guard num < 100000000000000001000000000000\
    \ else {\n                                                                   \
    \                                                                 guard num <\
    \ 1000000000000000010000000000000 else {\n                                   \
    \                                                                            \
    \                         guard num < 100000000000000001000000000000000 else {\n\
    \                                                                            \
    \                                                                guard num < 1000000000000000010000000000000000\
    \ else {\n                                                                   \
    \                                                                            \
    \ guard num < 10000000000000000100000000000000000 else {\n                   \
    \                                                                            \
    \                                                     guard num < 100000000000000001000000000000000010\
    \ else {\n                                                                   \
    \                                                                            \
    \         guard num < 1000000000000000010000000000000000100 else {\n         \
    \                                                                            \
    \                                                                       guard\
    \ num < 10000000000000000100000000000000001000 else {\n                      \
    \                                                                            \
    \                                                              guard num < 100000000000000001000000000000000010000\
    \ else {\n                                                                   \
    \                                                                            \
    \                     guard num < 1000000000000000010000000000000000100000 else\
    \ {\n                                                                        \
    \                                                                            \
    \                    guard \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmptma50u47.swift:58:174: error: expected expression, var, let or\
    \ case in 'guard' condition\n                                                \
    \                                                                            \
    \                                            guard \n                        \
    \                                                                            \
    \                                                                         ^\n\
    /tmp/tmptma50u47.swift:81:34: error: expected '}' at end of brace statement\n\
    assert(count_nums(arr: [1]) == 1)\n                                 ^\n/tmp/tmptma50u47.swift:56:218:\
    \ note: to match this opening '{'\n                                          \
    \                                                                            \
    \                                          guard num < 100000000000000001000000000000000010000\
    \ else {\n                                                                   \
    \                                                                            \
    \                                                                          ^\n\
    /tmp/tmptma50u47.swift:81:34: error: expected '}' at end of brace statement\n\
    assert(count_nums(arr: [1]) == 1)\n                                 ^\n/tmp/tmptma50u47.swift:55:213:\
    \ note: to match this opening '{'\n                                          \
    \                                                                            \
    \                                      guard num < 10000000000000000100000000000000001000\
    \ else {\n                                                                   \
    \                                                                            \
    \                                                                     ^\n/tmp/tmptma50u47.swift:81:34:\
    \ error: expected '}' at end of brace statement\nassert(count_nums(arr: [1]) ==\
    \ 1)\n                                 ^\n/tmp/tmptma50u47.swift:54:208: note:\
    \ to match this opening '{'\n                                                \
    \                                                               "
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        count += count_digits(num)\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp5hq6dibh.swift:15:18: error: cannot find 'count_digits' in scope\n\
    \        count += count_digits(num)\n                 ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            x -= Int(log10(abs(x)))\n\
    \        }\n        count += Int(log10(x))\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp3drn6rru.swift:16:22: error: cannot find 'log10' in scope\n   \
    \         x -= Int(log10(abs(x)))\n                     ^~~~~\n/tmp/tmp3drn6rru.swift:18:22:\
    \ error: cannot find 'log10' in scope\n        count += Int(log10(x))\n      \
    \               ^~~~~\n"
  stdout: ''
  timestamp: 1660013343
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            count += count_nums(arr:\
    \ (-x).toIntArray())\n        } else {\n            count += count_nums(arr: x.toIntArray())\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpn35jklju.swift:16:43: error: value of type 'Int' has no member\
    \ 'toIntArray'\n            count += count_nums(arr: (-x).toIntArray())\n    \
    \                                 ~~~~ ^~~~~~~~~~\n/tmp/tmpn35jklju.swift:18:40:\
    \ error: value of type 'Int' has no member 'toIntArray'\n            count +=\
    \ count_nums(arr: x.toIntArray())\n                                     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013343
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x >= 0 {\n            count += count_nums(arr:\
    \ arr[0..<x])\n        }\n        if x < 0 {\n            count += count_nums(arr:\
    \ [-x..<0])\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpb_kxfhsy.swift:16:41: error: cannot convert value of type 'ArraySlice<Int>'\
    \ to expected argument type '[Int]'\n            count += count_nums(arr: arr[0..<x])\n\
    \                                        ^\n/tmp/tmpb_kxfhsy.swift:19:41: error:\
    \ cannot convert value of type 'Range<Int>' to expected element type 'Int'\n \
    \           count += count_nums(arr: [-x..<0])\n                             \
    \           ^\n"
  stdout: ''
  timestamp: 1660013343
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            num = -num\n        }\n\
    \        count += num / 10\n        num %= 10\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpe78wrfpl.swift:16:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n/tmp/tmpe78wrfpl.swift:19:13:\
    \ error: left side of mutating operator isn't mutable: 'num' is a 'let' constant\n\
    \        num %= 10\n        ~~~ ^\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            x -= Int(log10(abs(x)))\n\
    \        }\n        count += Int(log10(x))\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp3drn6rru.swift:16:22: error: cannot find 'log10' in scope\n   \
    \         x -= Int(log10(abs(x)))\n                     ^~~~~\n/tmp/tmp3drn6rru.swift:18:22:\
    \ error: cannot find 'log10' in scope\n        count += Int(log10(x))\n      \
    \               ^~~~~\n"
  stdout: ''
  timestamp: 1660013343
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        count += count_digits(x)\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpgctohji_.swift:15:18: error: cannot find 'count_digits' in scope\n\
    \        count += count_digits(x)\n                 ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            num = -num\n        }\n\
    \        if num > 0 {\n            count += num % 10\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzymu7os2.swift:16:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013343
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            num = -num\n        }\n\
    \        count += num % 10\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp28y924w5.swift:16:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013343
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x >= 0 {\n            count += x\n        } else\
    \ {\n            count += x * -1\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmptbxo2k87/tmptbxo2k87.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b88695ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b88692c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b88692c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b88692c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptbxo2k87                        0x00005628ac174510 <unavailable> + 5392

    5    libc.so.6                          0x00002b88697b8460 __libc_start_main +
    245

    6    tmptbxo2k87                        0x00005628ac1740d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            count += count_nums(arr:\
    \ (-x).toIntArray())\n        } else {\n            count += count_nums(arr: x.toIntArray())\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpn35jklju.swift:16:43: error: value of type 'Int' has no member\
    \ 'toIntArray'\n            count += count_nums(arr: (-x).toIntArray())\n    \
    \                                 ~~~~ ^~~~~~~~~~\n/tmp/tmpn35jklju.swift:18:40:\
    \ error: value of type 'Int' has no member 'toIntArray'\n            count +=\
    \ count_nums(arr: x.toIntArray())\n                                     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013343
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            count += count_nums(arr:\
    \ (-x).toInt())\n        } else {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpgzncgb3t.swift:16:43: error: value of type 'Int' has no member\
    \ 'toInt'\n            count += count_nums(arr: (-x).toInt())\n              \
    \                       ~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660013343
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            x -= x\n        }\n     \
    \   count += x\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp2sbxvdro.swift:16:15: error: left side of mutating operator isn't\
    \ mutable: 'x' is a 'let' constant\n            x -= x\n            ~ ^\n"
  stdout: ''
  timestamp: 1660013343
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for x in arr {\n        sum += x\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpeetx7i3s/tmpeetx7i3s.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba459b04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4597fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4597fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4597fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeetx7i3s                        0x000055d8ce5f3510 <unavailable> + 5392

    5    libc.so.6                          0x00002ba459cf0460 __libc_start_main +
    245

    6    tmpeetx7i3s                        0x000055d8ce5f30d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for x in arr {\n        sum += x\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpeetx7i3s/tmpeetx7i3s.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba459b04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4597fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4597fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4597fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeetx7i3s                        0x000055d8ce5f3510 <unavailable> + 5392

    5    libc.so.6                          0x00002ba459cf0460 __libc_start_main +
    245

    6    tmpeetx7i3s                        0x000055d8ce5f30d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for x in arr {\n        sum += x\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpeetx7i3s/tmpeetx7i3s.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba459b04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4597fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4597fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4597fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeetx7i3s                        0x000055d8ce5f3510 <unavailable> + 5392

    5    libc.so.6                          0x00002ba459cf0460 __libc_start_main +
    245

    6    tmpeetx7i3s                        0x000055d8ce5f30d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x > 0 {\n            count += 1\n        }\n \
    \   }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpu2nm2ref/tmpu2nm2ref.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8200c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad81fdbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad81fdba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad81fdb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu2nm2ref                        0x000055f3e893f8ca <unavailable> + 6346

    5    libc.so.6                          0x00002ad8202af460 __libc_start_main +
    245

    6    tmpu2nm2ref                        0x000055f3e893f0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            num = -num\n        }\n\
    \        count += num / 10\n        num %= 10\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpe78wrfpl.swift:16:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n/tmp/tmpe78wrfpl.swift:19:13:\
    \ error: left side of mutating operator isn't mutable: 'num' is a 'let' constant\n\
    \        num %= 10\n        ~~~ ^\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x > 0 {\n            count += 1\n        }\n \
    \   }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpu2nm2ref/tmpu2nm2ref.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8200c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad81fdbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad81fdba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad81fdb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu2nm2ref                        0x000055f3e893f8ca <unavailable> + 6346

    5    libc.so.6                          0x00002ad8202af460 __libc_start_main +
    245

    6    tmpu2nm2ref                        0x000055f3e893f0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            count += (-x) / 10\n    \
    \    } else {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpcoumkcxt/tmpcoumkcxt.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b708b711c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b708b408b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b708b408988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b708b4077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcoumkcxt                        0x00005634a7d865a0 <unavailable> + 5536

    5    libc.so.6                          0x00002b708b8fd460 __libc_start_main +
    245

    6    tmpcoumkcxt                        0x00005634a7d86169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            num = -num\n        }\n\
    \        count += num % 10\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp28y924w5.swift:16:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013343
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x > 0 {\n            count += 1\n        }\n \
    \   }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpu2nm2ref/tmpu2nm2ref.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8200c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad81fdbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad81fdba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad81fdb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu2nm2ref                        0x000055f3e893f8ca <unavailable> + 6346

    5    libc.so.6                          0x00002ad8202af460 __libc_start_main +
    245

    6    tmpu2nm2ref                        0x000055f3e893f0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            num = -num\n        }\n\
    \        count += num % 10\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp28y924w5.swift:16:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013343
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for x in arr {\n        sum += x\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpeetx7i3s/tmpeetx7i3s.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba459b04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4597fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4597fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4597fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeetx7i3s                        0x000055d8ce5f3510 <unavailable> + 5392

    5    libc.so.6                          0x00002ba459cf0460 __libc_start_main +
    245

    6    tmpeetx7i3s                        0x000055d8ce5f30d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x > 0 {\n            count += count_digits(x)\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_47tj0qe.swift:16:22: error: cannot find 'count_digits' in scope\n\
    \            count += count_digits(x)\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for x in arr {\n        if x < 0 {\n            sum += (-x).magnitude\n  \
    \      } else {\n            sum += x\n        }\n    }\n    return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpfac49xhc.swift:16:25: error: cannot convert value of type 'UInt'\
    \ to expected argument type 'Int'\n            sum += (-x).magnitude\n       \
    \                 ^\n                   Int(          )\n"
  stdout: ''
  timestamp: 1660013343
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x > 0 {\n            count += 1\n        }\n \
    \   }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpu2nm2ref/tmpu2nm2ref.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8200c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad81fdbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad81fdba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad81fdb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu2nm2ref                        0x000055f3e893f8ca <unavailable> + 6346

    5    libc.so.6                          0x00002ad8202af460 __libc_start_main +
    245

    6    tmpu2nm2ref                        0x000055f3e893f0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            x -= (x % 10)\n        }\n\
    \        if x > 0 {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpgfa8fmf5.swift:16:15: error: left side of mutating operator isn't\
    \ mutable: 'x' is a 'let' constant\n            x -= (x % 10)\n            ~ ^\n"
  stdout: ''
  timestamp: 1660013343
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for x in arr {\n        sum += x\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpeetx7i3s/tmpeetx7i3s.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba459b04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4597fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4597fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4597fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeetx7i3s                        0x000055d8ce5f3510 <unavailable> + 5392

    5    libc.so.6                          0x00002ba459cf0460 __libc_start_main +
    245

    6    tmpeetx7i3s                        0x000055d8ce5f30d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            count += (-x).magnitude\n\
    \        } else {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp1nbkek_v.swift:16:27: error: cannot convert value of type 'UInt'\
    \ to expected argument type 'Int'\n            count += (-x).magnitude\n     \
    \                     ^\n                     Int(          )\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for x in arr {\n        if x < 0 {\n            sum += (-x) % 10\n       \
    \ } else {\n            sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmprdihftl9/tmprdihftl9.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea7073ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea70435b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea70435988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea704347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprdihftl9                        0x000056372f83f5a0 <unavailable> + 5536

    5    libc.so.6                          0x00002aea7092a460 __libc_start_main +
    245

    6    tmprdihftl9                        0x000056372f83f169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            count += (-x) + 1\n     \
    \   } else {\n            count += 1\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpx4e10sn1/tmpx4e10sn1.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b160cbf2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b160c8e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b160c8e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b160c8e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx4e10sn1                        0x00005651c08f7510 <unavailable> + 5392

    5    libc.so.6                          0x00002b160cdde460 __libc_start_main +
    245

    6    tmpx4e10sn1                        0x00005651c08f70d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x > 0 {\n            count += count_digits(x)\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_47tj0qe.swift:16:22: error: cannot find 'count_digits' in scope\n\
    \            count += count_digits(x)\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            num = -num\n        }\n\
    \        count += num / 10\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpqjq9vzmz.swift:16:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: -1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for x in arr {\n        sum += x\n    }\n    if sum < 0 {\n        return\
    \ -count_nums(arr: arr.reversed()) + sum\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660013348
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            count += (-x) + 1\n     \
    \   } else {\n            count += 1\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpx4e10sn1/tmpx4e10sn1.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b160cbf2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b160c8e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b160c8e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b160c8e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx4e10sn1                        0x00005651c08f7510 <unavailable> + 5392

    5    libc.so.6                          0x00002b160cdde460 __libc_start_main +
    245

    6    tmpx4e10sn1                        0x00005651c08f70d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x >= 0 {\n            count += count_digits(x)\n\
    \        } else {\n            count += count_digits(-x)\n        }\n    }\n \
    \   return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpio34m23t.swift:16:22: error: cannot find 'count_digits' in scope\n\
    \            count += count_digits(x)\n                     ^~~~~~~~~~~~\n/tmp/tmpio34m23t.swift:18:22:\
    \ error: cannot find 'count_digits' in scope\n            count += count_digits(-x)\n\
    \                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            num = -num\n        }\n\
    \        count += num % 10\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp28y924w5.swift:16:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013343
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            count += (-x) % 10\n    \
    \    } else {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp8rjhfnoi/tmp8rjhfnoi.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85bff25c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85bfc1cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b85bfc1c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85bfc1b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8rjhfnoi                        0x000055a13111d5a0 <unavailable> + 5536

    5    libc.so.6                          0x00002b85c0111460 __libc_start_main +
    245

    6    tmp8rjhfnoi                        0x000055a13111d169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013343
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for x in arr {\n        sum += x\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpeetx7i3s/tmpeetx7i3s.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba459b04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4597fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4597fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4597fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeetx7i3s                        0x000055d8ce5f3510 <unavailable> + 5392

    5    libc.so.6                          0x00002ba459cf0460 __libc_start_main +
    245

    6    tmpeetx7i3s                        0x000055d8ce5f30d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x >= 0 {\n            count += x\n        } else\
    \ {\n            count += x * -1\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmptbxo2k87/tmptbxo2k87.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b88695ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b88692c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b88692c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b88692c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptbxo2k87                        0x00005628ac174510 <unavailable> + 5392

    5    libc.so.6                          0x00002b88697b8460 __libc_start_main +
    245

    6    tmptbxo2k87                        0x00005628ac1740d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            count += (-x) + 1\n     \
    \   } else {\n            count += 1\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpx4e10sn1/tmpx4e10sn1.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b160cbf2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b160c8e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b160c8e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b160c8e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx4e10sn1                        0x00005651c08f7510 <unavailable> + 5392

    5    libc.so.6                          0x00002b160cdde460 __libc_start_main +
    245

    6    tmpx4e10sn1                        0x00005651c08f70d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            count += count_nums(arr:\
    \ (-x).toInts())\n        } else {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp2otoh08w.swift:16:43: error: value of type 'Int' has no member\
    \ 'toInts'\n            count += count_nums(arr: (-x).toInts())\n            \
    \                         ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660013343
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x > 0 {\n            count += 1\n        }\n \
    \   }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpu2nm2ref/tmpu2nm2ref.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8200c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad81fdbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad81fdba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad81fdb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu2nm2ref                        0x000055f3e893f8ca <unavailable> + 6346

    5    libc.so.6                          0x00002ad8202af460 __libc_start_main +
    245

    6    tmpu2nm2ref                        0x000055f3e893f0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x > 0 {\n            count += 1\n        }\n \
    \   }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpu2nm2ref/tmpu2nm2ref.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8200c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad81fdbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad81fdba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad81fdb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu2nm2ref                        0x000055f3e893f8ca <unavailable> + 6346

    5    libc.so.6                          0x00002ad8202af460 __libc_start_main +
    245

    6    tmpu2nm2ref                        0x000055f3e893f0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for x in arr {\n        sum += x\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpeetx7i3s/tmpeetx7i3s.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba459b04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4597fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4597fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4597fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeetx7i3s                        0x000055d8ce5f3510 <unavailable> + 5392

    5    libc.so.6                          0x00002ba459cf0460 __libc_start_main +
    245

    6    tmpeetx7i3s                        0x000055d8ce5f30d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x > 0 {\n            count += 1\n        }\n \
    \   }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpu2nm2ref/tmpu2nm2ref.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8200c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad81fdbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad81fdba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad81fdb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu2nm2ref                        0x000055f3e893f8ca <unavailable> + 6346

    5    libc.so.6                          0x00002ad8202af460 __libc_start_main +
    245

    6    tmpu2nm2ref                        0x000055f3e893f0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            num = -num\n        }\n\
    \        count += num / 10\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpqjq9vzmz.swift:16:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for x in arr {\n        sum += x\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpeetx7i3s/tmpeetx7i3s.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba459b04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4597fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4597fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4597fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeetx7i3s                        0x000055d8ce5f3510 <unavailable> + 5392

    5    libc.so.6                          0x00002ba459cf0460 __libc_start_main +
    245

    6    tmpeetx7i3s                        0x000055d8ce5f30d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            count += (-x) + 1\n     \
    \   } else {\n            count += 1\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpx4e10sn1/tmpx4e10sn1.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b160cbf2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b160c8e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b160c8e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b160c8e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx4e10sn1                        0x00005651c08f7510 <unavailable> + 5392

    5    libc.so.6                          0x00002b160cdde460 __libc_start_main +
    245

    6    tmpx4e10sn1                        0x00005651c08f70d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for x in arr {\n        sum += x\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpeetx7i3s/tmpeetx7i3s.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba459b04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4597fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4597fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4597fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeetx7i3s                        0x000055d8ce5f3510 <unavailable> + 5392

    5    libc.so.6                          0x00002ba459cf0460 __libc_start_main +
    245

    6    tmpeetx7i3s                        0x000055d8ce5f30d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            count += (-x) % 10\n    \
    \    } else {\n            count += x\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpx6jvq94s/tmpx6jvq94s.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e57e4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e57b44b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e57b44988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e57b437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx6jvq94s                        0x000056149ea685a0 <unavailable> + 5536

    5    libc.so.6                          0x00002b1e58039460 __libc_start_main +
    245

    6    tmpx6jvq94s                        0x000056149ea68169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            x -= x\n        }\n     \
    \   if x > 9 {\n            x -= 10\n        }\n        count += x\n    }\n  \
    \  return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpyw33hlb6.swift:16:15: error: left side of mutating operator isn't\
    \ mutable: 'x' is a 'let' constant\n            x -= x\n            ~ ^\n/tmp/tmpyw33hlb6.swift:19:15:\
    \ error: left side of mutating operator isn't mutable: 'x' is a 'let' constant\n\
    \            x -= 10\n            ~ ^\n"
  stdout: ''
  timestamp: 1660013343
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            x -= x\n        }\n     \
    \   if x > 0 {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprx7ru2qy.swift:16:15: error: left side of mutating operator isn't\
    \ mutable: 'x' is a 'let' constant\n            x -= x\n            ~ ^\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            num = -num\n        }\n\
    \        count += num / 10\n        num %= 10\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpe78wrfpl.swift:16:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n/tmp/tmpe78wrfpl.swift:19:13:\
    \ error: left side of mutating operator isn't mutable: 'num' is a 'let' constant\n\
    \        num %= 10\n        ~~~ ^\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    guard arr.count\
    \ > 0 else { return 0 }\n    var count = 0\n    for x in arr {\n        guard\
    \ x >= 0 else {\n            guard x < 0 else {\n                guard x < 10\
    \ else {\n                    guard x < 100 else {\n                        guard\
    \ x < 1000 else {\n                            guard x < 10000 else {\n      \
    \                          guard x < 100000 else {\n                         \
    \           guard x < 1000000 else {\n                                       \
    \ guard x < 10000000 else {\n                                            guard\
    \ x < 100000000 else {\n                                                guard\
    \ x < 1000000000 else {\n                                                    guard\
    \ x < 10000000000 else {\n                                                   \
    \     guard x < 100000000000 else {\n                                        \
    \                    guard x < 1000000000000 else {\n                        \
    \                                        guard x < 10000000000000 else {\n   \
    \                                                                 guard x < 100000000000000\
    \ else {\n                                                                   \
    \     guard x < 1000000000000000 else {\n                                    \
    \                                        guard x < 10000000000000000 else {\n\
    \                                                                            \
    \    guard x < 100000000000000000 else {\n                                   \
    \                                                 guard x < 1000000000000000010\
    \ else {\n                                                                   \
    \                     guard x < 10000000000000000100 else {\n                \
    \                                                                            guard\
    \ x < 100000000000000001000 else {\n                                         \
    \                                                       guard x < 1000000000000000010000\
    \ else {\n                                                                   \
    \                                 guard x < 10000000000000000100000 else {\n \
    \                                                                            \
    \                           guard x < 100000000000000001000000 else {\n      \
    \                                                                            \
    \                          guard x < 1000000000000000010000000 else {\n      \
    \                                                                            \
    \                              guard x < 10000000000000000100000000 else {\n \
    \                                                                            \
    \                                       guard x < 100000000000000001000000000\
    \ else {\n                                                                   \
    \                                                     guard x < 1000000000000000010000000000\
    \ else {\n                                                                   \
    \                                                         guard x < 10000000000000000100000000000\
    \ else {\n                                                                   \
    \                                                             guard x < 100000000000000001000000000000\
    \ else {\n                                                                   \
    \                                                                 guard x < 1000000000000000010000000000000\
    \ else {\n                                                                   \
    \                                                                     guard x\
    \ < 10000000000000000100000000000000 else {\n                                \
    \                                                                            \
    \                                guard x < 100000000000000001000000000000000 else\
    \ {\n                                                                        \
    \                                                                        guard\
    \ x < 1000000000000000010000000000000000 else {\n                            \
    \                                                                            \
    \                                            guard x < 10000000000000000100000000000000000\
    \ else {\n                                                                   \
    \                                                                            \
    \         guard x < 100000000000000001000000000000000010 else {\n            \
    \                                                                            \
    \                                                                    guard x <\
    \ 1000000000000000010000000000000000100 else {\n                             \
    \                                                                            \
    \                                                       guard x < 10000000000000000100000000000000001000\
    \ else {\n                                                                   \
    \                                                                            \
    \                     guard x < 100000000000000001000000000000000010000 else {\n\
    \                                                                            \
    \                                                                            \
    \                guard x < 1000000000000000010000000000000000100000 else {\n \
    \                                                                            \
    \                                                                            \
    \                   guard x < 10000000000000000100000000000000001000000 else {\n\
    \                                                                            \
    \                                                                            \
    \                        guard x < 100000000000000001000000000000000010000000\
    \ else {\n                                                                \n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpx29esry3.swift:82:34: error: expected '}' at end of brace statement\n\
    assert(count_nums(arr: [1]) == 1)\n                                 ^\n/tmp/tmpx29esry3.swift:57:230:\
    \ note: to match this opening '{'\n                                          \
    \                                                                            \
    \                                                      guard x < 10000000000000000100000000000000001000000\
    \ else {\n                                                                   \
    \                                                                            \
    \                                                                            \
    \          ^\n/tmp/tmpx29esry3.swift:82:34: error: expected '}' at end of brace\
    \ statement\nassert(count_nums(arr: [1]) == 1)\n                             \
    \    ^\n/tmp/tmpx29esry3.swift:56:225: note: to match this opening '{'\n     \
    \                                                                            \
    \                                                                            \
    \           guard x < 1000000000000000010000000000000000100000 else {\n      \
    \                                                                            \
    \                                                                            \
    \                                                                  ^\n/tmp/tmpx29esry3.swift:82:34:\
    \ error: expected '}' at end of brace statement\nassert(count_nums(arr: [1]) ==\
    \ 1)\n                                 ^\n/tmp/tmpx29esry3.swift:55:220: note:\
    \ to match this opening '{'\n                                                \
    \                                                                            \
    \                                        guard x < 100000000000000001000000000000000010000\
    \ else {\n                                                                   \
    \                                                                            \
    \                                                                            ^\n\
    /tmp/tmpx29esry3.swift:82:34: error: expected '}' at end of brace st"
  stdout: ''
  timestamp: 1660013343
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x > 0 {\n            count += count_digits(x)\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_47tj0qe.swift:16:22: error: cannot find 'count_digits' in scope\n\
    \            count += count_digits(x)\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for x in arr {\n        sum += x\n    }\n    if sum < 0 {\n        sum *=\
    \ -1\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmp8thys9os/tmp8thys9os.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af099dedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af099ae4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af099ae4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af099ae37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8thys9os                        0x0000558d70e70510 <unavailable> + 5392

    5    libc.so.6                          0x00002af099fd9460 __libc_start_main +
    245

    6    tmp8thys9os                        0x0000558d70e700d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013343
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    guard arr.count\
    \ > 0 else {\n        return 0\n    }\n    var count = 0\n    for num in arr {\n\
    \        guard num >= 0 else {\n            guard num < 0 else {\n           \
    \     guard num < -10 else {\n                    guard num < -100 else {\n  \
    \                      guard num < -1000 else {\n                            guard\
    \ num < -10000 else {\n                                guard num < -100000 else\
    \ {\n                                    guard num < -1000000 else {\n       \
    \                                 guard num < -10000000 else {\n             \
    \                               guard num < -100000000 else {\n              \
    \                                  guard num < -1000000000 else {\n          \
    \                                          guard num < -10000000000 else {\n \
    \                                                       guard num < -100000000000\
    \ else {\n                                                            guard num\
    \ < -1000000000000 else {\n                                                  \
    \              guard num < -10000000000000 else {\n                          \
    \                                          guard num < -100000000000000 else {\n\
    \                                                                        guard\
    \ num < -1000000000000000 else {\n                                           \
    \                                 guard num < -10000000000000000 else {\n    \
    \                                                                            guard\
    \ num < -100000000000000000 else {\n                                         \
    \                                           guard num < -1000000000000000000 else\
    \ {\n                                                                        \
    \                guard num < -10000000000000000000 else {\n                  \
    \                                                                          guard\
    \ num < -100000000000000000000 else {\n                                      \
    \                                                          guard num < -1000000000000000000000\
    \ else {\n                                                                   \
    \                                 guard num < -10000000000000000000000 else {\n\
    \                                                                            \
    \                            guard num < -100000000000000000000000 else {\n  \
    \                                                                            \
    \                              guard num < -1000000000000000000000000 else {\n\
    \                                                                            \
    \                                    guard num < -10000000000000000000000000 else\
    \ {\n                                                                        \
    \                                            guard num < -100000000000000000000000000\
    \ else {\n                                                                   \
    \                                                     guard num < -1000000000000000000000000000\
    \ else {\n                                                                   \
    \                                                         guard num < -10000000000000000000000000000\
    \ else {\n                                                                   \
    \                                                             guard num < -10000000000000000000000000\
    \ else {\n                                                                   \
    \                                                                 guard num <\
    \ -10000000000000000000000000000 else {\n                                    \
    \                                                                            \
    \                        guard num < -10000000000000000000000000000 else {\n \
    \                                                                            \
    \                                                               guard num < -100000000000000000000000000000\
    \ else {\n                                                                   \
    \                                                                            \
    \ guard num < -1000000000000000000000000000000 else {\n                      \
    \                                                                            \
    \                                                  guard num < -10000000000000000000000000000000\
    \ else {\n                                                                   \
    \                                                                            \
    \         guard num < -100000000000000000000000000000000 else {\n            \
    \                                                                            \
    \                                                                    guard num\
    \ < -1000000000000000000000000000000000 else {\n                             \
    \                                                                            \
    \                                                       guard num < -10000000000000000000000000000000000\
    \ else {\n                                                                   \
    \                                                                            \
    \                     guard num < -1000000000000000000000000000000000 else {\n\
    \                                                                            \
    \                                                                            \
    \                guard num < -10000000000000000000000000000000000 else {\n   \
    \                                                                            \
    \                                                                            \
    \                 \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp4yoa1scs.swift:82:34: error: expected '}' at end of brace statement\n\
    assert(count_nums(arr: [1]) == 1)\n                                 ^\n/tmp/tmp4yoa1scs.swift:57:218:\
    \ note: to match this opening '{'\n                                          \
    \                                                                            \
    \                                              guard num < -1000000000000000000000000000000000\
    \ else {\n                                                                   \
    \                                                                            \
    \                                                                          ^\n\
    /tmp/tmp4yoa1scs.swift:82:34: error: expected '}' at end of brace statement\n\
    assert(count_nums(arr: [1]) == 1)\n                                 ^\n/tmp/tmp4yoa1scs.swift:56:215:\
    \ note: to match this opening '{'\n                                          \
    \                                                                            \
    \                                          guard num < -10000000000000000000000000000000000\
    \ else {\n                                                                   \
    \                                                                            \
    \                                                                       ^\n/tmp/tmp4yoa1scs.swift:82:34:\
    \ error: expected '}' at end of brace statement\nassert(count_nums(arr: [1]) ==\
    \ 1)\n                                 ^\n/tmp/tmp4yoa1scs.swift:55:210: note:\
    \ to match this opening '{'\n                                                \
    \                                                                            \
    \                                guard num < -1000000000000000000000000000000000\
    \ else {\n                                                                   \
    \                                                                            \
    \                                                                  ^\n/tmp/tmp4yoa1scs.swift:82:34:\
    \ error: expected '}' at end of brace statement\nassert(count_nums(arr: [1]) ==\
    \ 1)\n                      "
  stdout: ''
  timestamp: 1660013343
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for x in arr {\n        sum += x\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpeetx7i3s/tmpeetx7i3s.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba459b04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4597fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4597fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4597fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeetx7i3s                        0x000055d8ce5f3510 <unavailable> + 5392

    5    libc.so.6                          0x00002ba459cf0460 __libc_start_main +
    245

    6    tmpeetx7i3s                        0x000055d8ce5f30d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x >= 0 {\n            count += x\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpc872xw1l/tmpc872xw1l.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b267f7edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b267f4e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b267f4e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b267f4e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc872xw1l                        0x000055e724e8c5f5 <unavailable> + 5621

    5    libc.so.6                          0x00002b267f9d9460 __libc_start_main +
    245

    6    tmpc872xw1l                        0x000055e724e8c0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x > 0 {\n            count += count_digits(x)\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_47tj0qe.swift:16:22: error: cannot find 'count_digits' in scope\n\
    \            count += count_digits(x)\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            x -= x\n        }\n     \
    \   count += Int(x) / 10\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpxqvlqvin.swift:16:15: error: left side of mutating operator isn't\
    \ mutable: 'x' is a 'let' constant\n            x -= x\n            ~ ^\n"
  stdout: ''
  timestamp: 1660013343
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for x in arr {\n        if x < 0 {\n            sum += (-x) % 10\n       \
    \ } else {\n            sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmprdihftl9/tmprdihftl9.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea7073ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea70435b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea70435988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea704347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprdihftl9                        0x000056372f83f5a0 <unavailable> + 5536

    5    libc.so.6                          0x00002aea7092a460 __libc_start_main +
    245

    6    tmprdihftl9                        0x000056372f83f169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            num = -num\n        }\n\
    \        count += Int(num / 10)\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpcf8g6t5n.swift:16:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            count += (-x) + 1\n     \
    \   } else {\n            count += 1\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpx4e10sn1/tmpx4e10sn1.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b160cbf2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b160c8e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b160c8e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b160c8e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx4e10sn1                        0x00005651c08f7510 <unavailable> + 5392

    5    libc.so.6                          0x00002b160cdde460 __libc_start_main +
    245

    6    tmpx4e10sn1                        0x00005651c08f70d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x > 0 {\n            count += Int(log10(abs(x)))\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp2s12nxm3.swift:16:26: error: cannot find 'log10' in scope\n   \
    \         count += Int(log10(abs(x)))\n                         ^~~~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            num = -num\n        }\n\
    \        if num < 10 {\n            count += 1\n        } else if num < 100 {\n\
    \            count += 2\n        } else if num < 1000 {\n            count +=\
    \ 3\n        } else if num < 10000 {\n            count += 4\n        } else if\
    \ num < 100000 {\n            count += 5\n        } else if num < 1000000 {\n\
    \            count += 6\n        } else if num < 10000000 {\n            count\
    \ += 7\n        } else if num < 100000000 {\n            count += 8\n        }\
    \ else if num < 1000000000 {\n            count += 9\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmppdmmwrr4.swift:16:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013343
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            num = -num\n        }\n\
    \        count += num / 10\n        num %= 10\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpe78wrfpl.swift:16:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n/tmp/tmpe78wrfpl.swift:19:13:\
    \ error: left side of mutating operator isn't mutable: 'num' is a 'let' constant\n\
    \        num %= 10\n        ~~~ ^\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for x in arr {\n        sum += x\n    }\n    if sum < 0 {\n        sum *=\
    \ -1\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmp8thys9os/tmp8thys9os.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af099dedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af099ae4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af099ae4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af099ae37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8thys9os                        0x0000558d70e70510 <unavailable> + 5392

    5    libc.so.6                          0x00002af099fd9460 __libc_start_main +
    245

    6    tmp8thys9os                        0x0000558d70e700d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013343
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            count += count_nums(arr:\
    \ (-x).toInts())\n        } else {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp2otoh08w.swift:16:43: error: value of type 'Int' has no member\
    \ 'toInts'\n            count += count_nums(arr: (-x).toInts())\n            \
    \                         ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660013343
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            num = -num\n        }\n\
    \        if num > 0 {\n            count += num % 10\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzymu7os2.swift:16:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013343
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            num = -num\n        }\n\
    \        if num < 10 {\n            count += 1\n        } else if num < 100 {\n\
    \            count += 2\n        } else if num < 1000 {\n            count +=\
    \ 3\n        } else if num < 10000 {\n            count += 4\n        } else if\
    \ num < 100000 {\n            count += 5\n        } else if num < 1000000 {\n\
    \            count += 6\n        } else if num < 10000000 {\n            count\
    \ += 7\n        } else if num < 100000000 {\n            count += 8\n        }\
    \ else if num < 1000000000 {\n            count += 9\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmppdmmwrr4.swift:16:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013343
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x >= 0 {\n            count += 1\n        } else\
    \ {\n            count += count_digits(abs(x))\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprcrpdkqe.swift:18:22: error: cannot find 'count_digits' in scope\n\
    \            count += count_digits(abs(x))\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x > 0 {\n            count += count_digits(x)\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_47tj0qe.swift:16:22: error: cannot find 'count_digits' in scope\n\
    \            count += count_digits(x)\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            x -= (x % 10) * 10\n    \
    \    }\n        count += x % 10 == 0\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpb8rdplz_.swift:16:15: error: left side of mutating operator isn't\
    \ mutable: 'x' is a 'let' constant\n            x -= (x % 10) * 10\n         \
    \   ~ ^\n/tmp/tmpb8rdplz_.swift:18:25: error: cannot convert value of type 'Bool'\
    \ to expected argument type 'Int'\n        count += x % 10 == 0\n            \
    \            ^\n"
  stdout: ''
  timestamp: 1660013343
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for x in arr {\n        if x < 0 {\n            sum += (-x).abs\n        }\
    \ else {\n            sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_4938dx_.swift:16:25: error: value of type 'Int' has no member\
    \ 'abs'\n            sum += (-x).abs\n                   ~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660013343
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x >= 0 {\n            count += x\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpc872xw1l/tmpc872xw1l.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b267f7edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b267f4e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b267f4e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b267f4e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc872xw1l                        0x000055e724e8c5f5 <unavailable> + 5621

    5    libc.so.6                          0x00002b267f9d9460 __libc_start_main +
    245

    6    tmpc872xw1l                        0x000055e724e8c0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            num = -num\n        }\n\
    \        count += num / 10\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpqjq9vzmz.swift:16:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013342
