language: swift
name: HumanEval_34_unique
results:
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp538y17d9.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp538y17d9.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp538y17d9.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp538y17d9.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for el in l {\n        if !contains(result,\
    \ el) {\n            result.append(el)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp7q_9ir3p.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, el) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp6hj6b_n4.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var seen = [Int]()\n    var result = [Int]()\n    for x in l\
    \ {\n        if !contains(seen, x) {\n            seen.append(x)\n           \
    \ result.append(x)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3,\
    \ 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp_7q9nrs7.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(seen, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var seen = [Int]()\n    var result = [Int]()\n    for x in l\
    \ {\n        if !contains(seen, x) {\n            seen.append(x)\n           \
    \ result.append(x)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3,\
    \ 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp_7q9nrs7.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(seen, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp6hj6b_n4.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp538y17d9.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp538y17d9.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp538y17d9.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var seen = [Int]()\n    var result = [Int]()\n    for x in l\
    \ {\n        if !seen.isEmpty {\n            for y in seen {\n               \
    \ if x == y {\n                    break\n                }\n            }\n \
    \           if !seen.isEmpty {\n                continue\n            }\n    \
    \    }\n        result.append(x)\n        seen.append(x)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmp7nd3swg_/tmp7nd3swg_.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac97d9f1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac97d6e8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac97d6e8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac97d6e77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7nd3swg_                        0x000056066fa91685 <unavailable> + 5765

    5    libc.so.6                          0x00002ac97dbdd460 __libc_start_main +
    245

    6    tmp7nd3swg_                        0x000056066fa91239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp538y17d9.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp538y17d9.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp538y17d9.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp538y17d9.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp538y17d9.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp538y17d9.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp538y17d9.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp538y17d9.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var seen = [Int]()\n    var result = [Int]()\n    for x in l\
    \ {\n        if !contains(seen, x) && contains(result, x) {\n            seen.append(x)\n\
    \            result.append(x)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp9_dx0h7l.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(seen, x) && contains(result, x) {\n            ^~~~~~~~\n\
    /tmp/tmp9_dx0h7l.swift:9:34: error: cannot find 'contains' in scope\n        if\
    \ !contains(seen, x) && contains(result, x) {\n                              \
    \   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp538y17d9.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp538y17d9.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp6hj6b_n4.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp538y17d9.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp538y17d9.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp538y17d9.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp538y17d9.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp538y17d9.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp538y17d9.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for el in l {\n        if !contains(result,\
    \ el) {\n            result.append(el)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp7q_9ir3p.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, el) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var seen: [Int] = [0]\n    var result: [Int] = []\n    for x\
    \ in l {\n        if seen[x] == 0 {\n            seen[x] = 1\n            result.append(x)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b2664a61c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2664758561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2664758286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b266475813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2664757bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b2664557e83 <unavailable> + 188035

    6    tmpcbeqnuyk                        0x000055a822c517fd <unavailable> + 6141

    7    tmpcbeqnuyk                        0x000055a822c51585 <unavailable> + 5509

    8    libc.so.6                          0x00002b2664c4d460 __libc_start_main +
    245

    9    tmpcbeqnuyk                        0x000055a822c51239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp538y17d9.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    for element in l {\n        if !contains(result,\
    \ element) {\n            result.append(element)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpv8vu6d6k.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, element) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var seen = [Int]()\n    var result = [Int]()\n    for el in\
    \ l {\n        if !contains(seen, el) {\n            append(result, el)\n    \
    \        append(seen, el)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3,\
    \ 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpkbcukb2y.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(seen, el) {\n            ^~~~~~~~\n/tmp/tmpkbcukb2y.swift:10:13:\
    \ error: cannot find 'append' in scope\n            append(result, el)\n     \
    \       ^~~~~~\n/tmp/tmpkbcukb2y.swift:11:13: error: cannot find 'append' in scope\n\
    \            append(seen, el)\n            ^~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp538y17d9.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var seen: [Int] = []\n    var result: [Int] = []\n    for x\
    \ in l {\n        if !contains(seen, x) {\n            seen.append(x)\n      \
    \      result.append(x)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3,\
    \ 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpqsk85xf4.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(seen, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp538y17d9.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp538y17d9.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var seen = [Int]()\n    var result = [Int]()\n    for x in l\
    \ {\n        if !contains(seen, x) && contains(result, x) {\n            seen.append(x)\n\
    \            result.append(x)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp9_dx0h7l.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(seen, x) && contains(result, x) {\n            ^~~~~~~~\n\
    /tmp/tmp9_dx0h7l.swift:9:34: error: cannot find 'contains' in scope\n        if\
    \ !contains(seen, x) && contains(result, x) {\n                              \
    \   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp538y17d9.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp6hj6b_n4.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp6hj6b_n4.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp538y17d9.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var seen: [Int] = []\n    var result: [Int] = []\n    for x\
    \ in l {\n        if !contains(seen, x) {\n            seen.append(x)\n      \
    \      result.append(x)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3,\
    \ 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpqsk85xf4.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(seen, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp538y17d9.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp538y17d9.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp538y17d9.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp6hj6b_n4.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp538y17d9.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var seen = [Int]()\n    var result = [Int]()\n    for x in l\
    \ {\n        if !contains(seen, x) {\n            seen.append(x)\n           \
    \ result.append(x)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3,\
    \ 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp_7q9nrs7.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(seen, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp538y17d9.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp538y17d9.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp538y17d9.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp538y17d9.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp538y17d9.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp538y17d9.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp538y17d9.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp6hj6b_n4.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp538y17d9.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp538y17d9.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp538y17d9.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp538y17d9.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp538y17d9.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp538y17d9.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp6hj6b_n4.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var seen = [Int]()\n    var result = [Int]()\n    for x in l\
    \ {\n        if !contains(seen, x) {\n            seen.append(x)\n           \
    \ result.append(x)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3,\
    \ 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp_7q9nrs7.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(seen, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp538y17d9.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp538y17d9.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for el in l {\n        if !contains(result,\
    \ el) {\n            result.append(el)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp7q_9ir3p.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, el) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp538y17d9.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp538y17d9.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var seen = [Int]()\n    var result = [Int]()\n    for x in l\
    \ {\n        if !contains(seen, x) {\n            seen.append(x)\n           \
    \ result.append(x)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3,\
    \ 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp_7q9nrs7.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(seen, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp6hj6b_n4.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp538y17d9.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp538y17d9.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp538y17d9.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp538y17d9.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp538y17d9.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for el in l {\n        if !contains(result,\
    \ el) {\n            result.append(el)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp7q_9ir3p.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, el) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: -4
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var seen = [Int]()\n    var result = [Int]()\n    for x in l\
    \ {\n        if !seen.isEmpty {\n            if seen[x - 1] == x {\n         \
    \       continue\n            }\n            seen[x - 1] = x\n        } else {\n\
    \            seen.append(x)\n        }\n        result.append(x)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002af5ae81dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af5ae514561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af5ae514286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af5ae51413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af5ae513bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002af5ae313e83 <unavailable> + 188035

    6    tmpb7sqtkpb                        0x0000559601658907 <unavailable> + 6407

    7    tmpb7sqtkpb                        0x0000559601658635 <unavailable> + 5685

    8    libc.so.6                          0x00002af5aea09460 __libc_start_main +
    245

    9    tmpb7sqtkpb                        0x00005596016582e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp538y17d9.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp6hj6b_n4.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp538y17d9.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp538y17d9.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp6hj6b_n4.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp538y17d9.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp6hj6b_n4.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp538y17d9.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp538y17d9.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp538y17d9.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    for element in l {\n        if !contains(result,\
    \ element) {\n            result.append(element)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpv8vu6d6k.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, element) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpyl5uyyub.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp538y17d9.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp6hj6b_n4.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp6hj6b_n4.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp538y17d9.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp538y17d9.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp538y17d9.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for el in l {\n        if !contains(result,\
    \ el) {\n            result.append(el)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp7q_9ir3p.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, el) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp538y17d9.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    for element in l {\n        if !contains(result,\
    \ element) {\n            result.append(element)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpv8vu6d6k.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, element) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp538y17d9.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp538y17d9.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp6hj6b_n4.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(&result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp538y17d9.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "\n/// Return sorted unique elements in an array\n/// >>> unique(l: [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpj50eo2me.swift:8:13: error: cannot find 'contains' in scope\n \
    \       if !contains(result, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013736
