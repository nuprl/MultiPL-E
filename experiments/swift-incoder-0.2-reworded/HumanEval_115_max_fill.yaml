name: HumanEval_115_max_fill
language: swift
prompt: "\n/// You are given a rectangular grid of wells. Each row represents a single\
  \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each well\
  \ has a corresponding bucket that can be used to extract water from it, \n/// and\
  \ all buckets have the same capacity.\n/// Your task is to use the buckets to empty\
  \ the wells.\n/// Output the number of times you need to lower the buckets.\n///\
  \ Example 1:\n/// >>> max_fill(grid: [[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]],\
  \ capacity: 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(grid: [[0, 0, 1, 1], [0,\
  \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], capacity: 2)\n/// 5\n/// Example 3:\n///\
  \ >>> max_fill(grid: [[0, 0, 0], [0, 0, 0]], capacity: 5)\n/// 0\n/// Constraints:\n\
  /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1 <=\
  \ grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity <= 10\n\
  func max_fill(grid: [[Int]], capacity: Int) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(max_fill(grid: [[0, 0, 1, 0], [0, 1, 0,\
  \ 0], [1, 1, 1, 1]], capacity: 1) == 6)\nassert(max_fill(grid: [[0, 0, 1, 1], [0,\
  \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], capacity: 2) == 5)\nassert(max_fill(grid:\
  \ [[0, 0, 0], [0, 0, 0]], capacity: 5) == 0)\nassert(max_fill(grid: [[1, 1, 1, 1],\
  \ [1, 1, 1, 1]], capacity: 2) == 4)\nassert(max_fill(grid: [[1, 1, 1, 1], [1, 1,\
  \ 1, 1]], capacity: 9) == 2)"
completions: ["    guard grid.count == 1 else {\n        return 0\n    }\n    \n \
    \   var max = 0\n    var maxIndex = 0\n    \n    for i in 0..<grid[0].length {\n\
    \        for j in 0..<grid.count {\n            if grid[j][i] == 0 {\n       \
    \         grid[j][i] = 1\n                \n                if capacity > max\
    \ {\n                    max = capacity\n                    maxIndex = j\n  \
    \              }\n                \n                capacity -= 1\n          \
    \  }\n        }\n    }\n    \n    return maxIndex", "    var result = 0\n    for\
    \ row in grid {\n        for col in row {\n            if col == 0 {\n       \
    \         result += capacity - col\n            }\n        }\n    }\n    return\
    \ result", "    var count = 0\n    var max = 0\n    for row in grid {\n      \
    \  var maxRow = row[0]\n        for col in row {\n            if col > maxRow\
    \ {\n                maxRow = col\n            }\n        }\n        if maxRow\
    \ > max {\n            max = maxRow\n        }\n        count += maxRow == 0\n\
    \    }\n    return count", "    if grid.isEmpty {\n        return 0\n    }\n \
    \   \n    var max = 0\n    var maxIndex = 0\n    \n    for i in 0..<grid.count\
    \ {\n        for j in 0..<grid[i].count {\n            if grid[i][j] == 1 {\n\
    \                max += 1\n                if max > capacity {\n             \
    \       max = capacity\n                    maxIndex = i\n                }\n\
    \            }\n        }\n    }\n    \n    return maxIndex", "    \n    // write\
    \ your code here\n    \n    return 0", "    var result = 0\n    for row in grid\
    \ {\n        if row[0] == 0 {\n            continue\n        }\n        result\
    \ += 1\n        for col in row {\n            if col == 0 {\n                continue\n\
    \            }\n            result -= capacity\n        }\n    }\n    return result",
  "    guard grid.count > 0 else { return 0 }\n    \n    var max = 0\n    var maxCount\
    \ = 0\n    var maxIndex = 0\n    \n    for i in 0..<grid.count {\n        let\
    \ bucket = grid[i]\n        \n        if bucket == capacity {\n            max\
    \ += 1\n            maxCount += 1\n        }\n        \n        if bucket > capacity\
    \ {\n            max = max(max, maxCount)\n            maxCount = 1\n        \
    \    maxIndex = i\n        } else {\n            max = max(max, maxCount)\n  \
    \          maxCount = 1\n        }\n    }\n    \n    return max(max, maxCount)",
  "    guard capacity > 0 && capacity <= 10 else { return 0 }\n    \n    var max =\
    \ 0\n    var maxCount = 0\n    \n    for row in grid {\n        for col in row\
    \ {\n            if col == 0 {\n                max += 1\n                maxCount\
    \ += 1\n            }\n        }\n    }\n    \n    return maxCount - max", " \
    \   if grid.isEmpty() {\n        return 0\n    }\n    \n    var max = 0\n    var\
    \ min = 0\n    var count = 0\n    \n    for row in grid {\n        for col in\
    \ row {\n            if col == 0 {\n                count += 1\n             \
    \   min = count if min == 0 else min\n                max = count if max == capacity\
    \ else max\n            }\n        }\n    }\n    \n    return max - min", "  \
    \  \n    // write your code here\n    \n    return 0", "    var result = 0\n \
    \   for row in grid {\n        var buckets = [Int](capacity)\n        for bucket\
    \ in row {\n            buckets[bucket]++\n        }\n        for bucket in buckets\
    \ {\n            if bucket > 0 {\n                bucket--\n            }\n  \
    \      }\n        result += buckets.count\n    }\n    return result", "    var\
    \ result = 0\n    for row in grid {\n        var max = 0\n        for val in row\
    \ {\n            max = max(max, val)\n        }\n        if max > capacity {\n\
    \            result += capacity - max\n        } else {\n            result +=\
    \ max\n        }\n    }\n    return result", "    guard capacity > 0 else {\n\
    \        return 0\n    }\n    \n    var max = 0\n    var maxCount = 0\n    \n\
    \    for row in grid {\n        var count = 0\n        for col in row {\n    \
    \        if col == 0 {\n                count += 1\n            }\n        }\n\
    \        \n        if count > max {\n            max = count\n            maxCount\
    \ = 1\n        } else {\n            maxCount *= count\n        }\n    }\n   \
    \ \n    return maxCount * max", "    \n    let n = grid.count\n    \n    var ans\
    \ = 0\n    \n    for row in 0..<n {\n        for col in 0..<n {\n            if\
    \ grid[row][col] == 1 {\n                \n                let bucket = capacity\
    \ / n\n                \n                let lower = bucket * row\n          \
    \      let upper = bucket * (row + 1)\n                \n                let lower2\
    \ = bucket * col\n                let upper2 = bucket * (col + 1)\n          \
    \      \n                let lower3 = bucket * (row + col + 1)\n             \
    \   let upper3 = bucket * (row + col + 2)\n                \n                let\
    \ lower4 = bucket * (row + col + 2)\n                let upper4 = bucket * (row\
    \ + col + 3)\n                \n                let lower5 = bucket * (row + col\
    \ + 3)\n                let upper5 = bucket * (row + col + 4)\n              \
    \  \n                let lower6 = bucket * (row + col + 4)\n                let\
    \ upper6 = bucket * (row + col + 5)\n                \n                let lower7\
    \ = bucket * (row + col + 5)\n                let upper7 = bucket * (row + col\
    \ + 6)\n                \n                let lower8 = bucket * (row + col + 6)\n\
    \                let upper8 = bucket * (row + col + 7)\n                \n   \
    \             let lower9 = bucket * (row + col + 7)\n                let upper9\
    \ = bucket * (row + col + 8)\n                \n                let lower10 =\
    \ bucket * (row + col + 8)\n                let upper10 = bucket * (row + col\
    \ + 9)\n                \n                let lower11 = bucket * (row + col +\
    \ 9)\n                let upper11 = bucket * (row + col + 10)\n              \
    \  \n                let lower12 = bucket * (row + col + 10)\n               \
    \ let upper12 = bucket * (row + col + 11)\n                \n                let\
    \ lower13 = bucket * (row + col + 11)\n                let upper13 = bucket *\
    \ (row + col + 12)\n                \n                let lower14 = bucket * (row\
    \ + col + 12)\n                let upper14 = bucket * (row + col + 13)\n     \
    \           \n                let lower15 = bucket * (row + col + 13)\n      \
    \          let upper15 = bucket * (row + col + 14)\n                \n       \
    \         let lower16 = bucket * (row + col + 14)\n                let upper16\
    \ = bucket * (row + col + 15)\n                \n                let lower17 =\
    \ bucket * (row + col + 15)\n                let upper17 = bucket * (row + col\
    \ + 16)\n                \n                let lower18 = bucket * (row + col +\
    \ 16)\n                let upper18 = bucket * (row + col + ", "    \n    let n\
    \ = grid.count\n    \n    var max = 0\n    \n    for _ in 0..<n {\n        \n\
    \        let buckets = makeBuckets(capacity)\n        \n        for _ in 0..<n\
    \ {\n            \n            let bucket = buckets[grid[Int(arc4random_uniform(UInt32(n)))][1]]\n\
    \            \n            if bucket > 0 {\n                \n               \
    \ buckets[grid[Int(arc4random_uniform(UInt32(n)))][1]] = bucket - 1\n        \
    \        \n                if bucket > max {\n                    \n         \
    \           max = bucket\n                }\n            }\n        }\n    }\n\
    \    \n    return max", "    var max = 0\n    var count = 0\n    for row in grid\
    \ {\n        for col in row {\n            if col == 0 {\n                count\
    \ += 1\n                if count > max {\n                    max = count\n  \
    \              }\n            }\n        }\n    }\n    return max", "    if grid.isEmpty\
    \ {\n        return 0\n    }\n    \n    var max = 0\n    var maxCount = 0\n  \
    \  \n    for row in grid {\n        if row.isEmpty {\n            continue\n \
    \       }\n        \n        if row[0] > max {\n            max = row[0]\n   \
    \         maxCount = 1\n        }\n        \n        if row[0] == max {\n    \
    \        maxCount++\n        }\n    }\n    \n    return maxCount + max_fill(grid:\
    \ grid[1..<grid.count], capacity: capacity)", "    var max = 0\n    for row in\
    \ grid {\n        for col in row {\n            if col > max {\n             \
    \   max = col\n            }\n        }\n    }\n    for row in grid {\n      \
    \  for col in row {\n            if col > max {\n                max = col\n \
    \           }\n        }\n    }\n    return max", "    \n    let rowCount = grid.count\n\
    \    let colCount = grid[0].count\n    \n    var max = 0\n    \n    for row in\
    \ 0..<rowCount {\n        for col in 0..<colCount {\n            if grid[row][col]\
    \ == 1 {\n                \n                let bucket = grid[row][col]\n    \
    \            \n                if bucket > max {\n                    max = bucket\n\
    \                }\n                \n                grid[row][col] = 0\n   \
    \             \n                if bucket > capacity {\n                    \n\
    \                    grid[row][col] = 1\n                    \n              \
    \      max -= 1\n                    \n                    if max == 0 {\n   \
    \                     return 0\n                    }\n                }\n   \
    \             \n                grid[row][col] = bucket\n            }\n     \
    \   }\n    }\n    \n    return max", "    guard capacity > 0 else {\n        return\
    \ 0\n    }\n    \n    var max = 0\n    var maxCount = 0\n    \n    for row in\
    \ grid {\n        if row[0] == 0 {\n            max += 1\n        }\n        if\
    \ row[0] == 1 {\n            max -= 1\n        }\n    }\n    \n    for row in\
    \ grid {\n        if row[0] == 0 {\n            max += 1\n        }\n        if\
    \ row[0] == 1 {\n            max -= 1\n        }\n    }\n    \n    for row in\
    \ grid {\n        if row[0] == 0 {\n            max += 1\n        }\n        if\
    \ row[0] == 1 {\n            max -= 1\n        }\n    }\n    \n    for row in\
    \ grid {\n        if row[0] == 0 {\n            max += 1\n        }\n        if\
    \ row[0] == 1 {\n            max -= 1\n        }\n    }\n    \n    for row in\
    \ grid {\n        if row[0] == 0 {\n            max += 1\n        }\n        if\
    \ row[0] == 1 {\n            max -= 1\n        }\n    }\n    \n    for row in\
    \ grid {\n        if row[0] == 0 {\n            max += 1\n        }\n        if\
    \ row[0] == 1 {\n            max -= 1\n        }\n    }\n    \n    for row in\
    \ grid {\n        if row[0] == 0 {\n            max += 1\n        }\n        if\
    \ row[0] == 1 {\n            max -= 1\n        }\n    }\n    \n    for row in\
    \ grid {\n        if row[0] == 0 {\n            max += 1\n        }\n        if\
    \ row[0] == 1 {\n            max -= 1\n        }\n    }\n    \n    for row in\
    \ grid {\n        if row[0] == 0 {\n            max += 1\n        }\n        if\
    \ row[0] == 1 {\n            max -= 1\n        }\n    }\n    \n    for row in\
    \ grid {\n        if row[0] == 0 {\n            max += 1\n        }\n        if\
    \ row[0] == 1 {\n            max -= 1\n        }\n    }\n    \n    for row in\
    \ grid {\n        if row[0] == 0 {\n            max += 1\n        }\n        if\
    \ row[0] == 1 {\n            max -= 1\n        }\n    }\n    \n    for row in\
    \ grid {\n        if row[0] == 0 {\n            max += 1\n        }\n        if\
    \ row[0] == 1 {\n            max -= 1\n        }\n    }\n    \n    for row in\
    \ grid {\n        if row[0] == 0 {\n            max += 1\n        }\n        if\
    \ row[0] == 1 {\n            max -= 1\n        }\n    }\n    \n    for row in\
    \ grid {\n        if row[0] == 0 {\n            max += 1\n        }\n        if\
    \ row[0] == 1 {\n            max -= 1\n        }\n    }\n    \n    for row in\
    \ grid {\n        if row[0] == 0 {\n            max += 1\n        }\n        if\
    \ row[0] == 1 {\n            max -= 1\n        }\n    }\n    \n    for row in\
    \ grid {\n        if row[0] == 0 {\n            max += 1\n        }\n        if\
    \ row[0] == 1 {\n            ", "    guard grid.count == 1 || grid.count == grid[0].length\
    \ else {\n        return 0\n    }\n    \n    var max = 0\n    var maxIndex = 0\n\
    \    \n    for i in 0..<grid.count {\n        for j in 0..<grid[0].length {\n\
    \            if grid[i][j] == 1 {\n                grid[i][j] = 0\n          \
    \      \n                if capacity > max {\n                    max = capacity\n\
    \                    maxIndex = i\n                }\n                \n     \
    \           capacity -= 1\n            }\n        }\n    }\n    \n    return maxIndex",
  "    var count = 0\n    var max = 0\n    for row in grid {\n        for col in row\
    \ {\n            if col == 0 {\n                count += 1\n                if\
    \ count > max {\n                    max = count\n                }\n        \
    \    }\n        }\n    }\n    return max", "    \n    var max = 0\n    var maxCount\
    \ = 0\n    var maxIndex = 0\n    \n    for row in grid {\n        for col in row\
    \ {\n            if col > 0 {\n                maxCount = maxCount + 1\n     \
    \           if maxCount > max {\n                    max = maxCount\n        \
    \            maxIndex = col\n                }\n            }\n        }\n   \
    \ }\n    \n    return maxIndex", "    var max = 0\n    for row in grid {\n   \
    \     for col in row {\n            if col > max {\n                max = col\n\
    \            }\n        }\n    }\n    return max", "    var count = 0\n    for\
    \ row in grid {\n        if row[0] == 0 {\n            count += row[1]\n     \
    \   }\n    }\n    return count", "    var result = 0\n    var buckets = [Int](capacity)\n\
    \    for row in grid {\n        for bucket in row {\n            buckets[bucket]\
    \ += 1\n        }\n    }\n    for bucket in buckets {\n        if bucket > 0 {\n\
    \            result += bucket\n        }\n    }\n    return result", "    if grid.isEmpty()\
    \ {\n        return 0\n    }\n    \n    var max = 0\n    var maxIndex = 0\n  \
    \  var index = 0\n    \n    for row in grid {\n        for col in row {\n    \
    \        if col == 0 {\n                maxIndex += 1\n                max = max(max,\
    \ maxIndex)\n            }\n        }\n    }\n    \n    for row in grid {\n  \
    \      for col in row {\n            if col == 0 {\n                index += col\n\
    \            }\n        }\n    }\n    \n    return max - capacity", "    guard\
    \ grid.count == 1 || grid.count == grid[0].length else {\n        return 0\n \
    \   }\n    var max = 0\n    for row in 0..<grid.count {\n        for col in 0..<grid[row].count\
    \ {\n            if grid[row][col] == 1 {\n                max += capacity\n \
    \           }\n        }\n    }\n    return max", "    if capacity <= 0 {\n  \
    \      return 0\n    }\n    \n    var result = 0\n    \n    for row in grid {\n\
    \        if row[0] == 0 {\n            continue\n        }\n        \n       \
    \ var count = 0\n        \n        for col in row {\n            if col == 0 {\n\
    \                count += 1\n            } else {\n                count += col\n\
    \            }\n        }\n        \n        if count > capacity {\n         \
    \   result = count\n            break\n        }\n    }\n    \n    return result",
  "    \n    // write your code here\n    \n    return 0", "    \n    // write your\
    \ code here\n    \n    return 0", "    \n    // write your code here\n    \n \
    \   return 0", "    guard grid.count == 1 else {\n        return 0\n    }\n  \
    \  \n    var max = 0\n    var maxIndex = 0\n    \n    for i in 0..<grid[0].length\
    \ {\n        for j in 0..<grid.count {\n            if grid[j][i] == 0 {\n   \
    \             grid[j][i] = 1\n                \n                if capacity >\
    \ max {\n                    max = capacity\n                    maxIndex = j\n\
    \                }\n                \n                capacity -= 1\n        \
    \    }\n        }\n    }\n    \n    return maxIndex", "    \n    let n = grid.count\n\
    \    \n    if n < 1 {\n        return 0\n    }\n    \n    var max = 0\n    \n\
    \    for _ in 0..<n {\n        \n        let buckets = [Int](repeating: 0, count:\
    \ capacity)\n        \n        for _ in 0..<n {\n            buckets[grid[Int(arc4random_uniform(UInt32(n)))][Int(arc4random_uniform(UInt32(n)))]]\
    \ += 1\n        }\n        \n        for _ in 0..<capacity {\n            max\
    \ += buckets[Int(arc4random_uniform(UInt32(capacity)))]\n        }\n    }\n  \
    \  \n    return max", "    var result = 0\n    for row in grid {\n        var\
    \ max = 0\n        for cell in row {\n            if cell > max {\n          \
    \      max = cell\n            }\n        }\n        result += max - capacity\n\
    \    }\n    return result", "    var result = 0\n    for row in grid {\n     \
    \   var max = 0\n        for cell in row {\n            if cell > max {\n    \
    \            max = cell\n            }\n        }\n        if max > capacity {\n\
    \            result += capacity - max\n        } else {\n            result +=\
    \ max\n        }\n    }\n    return result", "    var max = 0\n    for row in\
    \ grid {\n        for bucket in row {\n            if bucket > max {\n       \
    \         max = bucket\n            }\n        }\n    }\n    return max", "  \
    \  var max = 0\n    var count = 0\n    for row in grid {\n        for col in row\
    \ {\n            if col == 0 {\n                count += 1\n                if\
    \ count > max {\n                    max = count\n                }\n        \
    \    }\n        }\n    }\n    return max", "    \n    // Your code here\n    \n\
    \    return 0", "    \n    // write your code here\n    \n    return 0", "   \
    \ \n    // write your code here\n    \n    return 0", "    var result = 0\n  \
    \  for row in grid {\n        for well in row {\n            if well > 0 {\n \
    \               result += capacity - well\n            }\n        }\n    }\n \
    \   return result", "    \n    let n = grid.count\n    \n    // init buckets\n\
    \    var buckets = [Int](capacity)\n    \n    // init counters\n    var counters\
    \ = [Int](capacity)\n    \n    // init max counter\n    var maxCounter = 0\n \
    \   \n    // init max counter\n    var maxCounter = 0\n    \n    // init max counter\n\
    \    var maxCounter = 0\n    \n    // init max counter\n    var maxCounter = 0\n\
    \    \n    // init max counter\n    var maxCounter = 0\n    \n    // init max\
    \ counter\n    var maxCounter = 0\n    \n    // init max counter\n    var maxCounter\
    \ = 0\n    \n    // init max counter\n    var maxCounter = 0\n    \n    // init\
    \ max counter\n    var maxCounter = 0\n    \n    // init max counter\n    var\
    \ maxCounter = 0\n    \n    // init max counter\n    var maxCounter = 0\n    \n\
    \    // init max counter\n    var maxCounter = 0\n    \n    // init max counter\n\
    \    var maxCounter = 0\n    \n    // init max counter\n    var maxCounter = 0\n\
    \    \n    // init max counter\n    var maxCounter = 0\n    \n    // init max\
    \ counter\n    var maxCounter = 0\n    \n    // init max counter\n    var maxCounter\
    \ = 0\n    \n    // init max counter\n    var maxCounter = 0\n    \n    // init\
    \ max counter\n    var maxCounter = 0\n    \n    // init max counter\n    var\
    \ maxCounter = 0\n    \n    // init max counter\n    var maxCounter = 0\n    \n\
    \    // init max counter\n    var maxCounter = 0\n    \n    // init max counter\n\
    \    var maxCounter = 0\n    \n    // init max counter\n    var maxCounter = 0\n\
    \    \n    // init max counter\n    var maxCounter = 0\n    \n    // init max\
    \ counter\n    var maxCounter = 0\n    \n    // init max counter\n    var maxCounter\
    \ = 0\n    \n    // init max counter\n    var maxCounter = 0\n    \n    // init\
    \ max counter\n    var maxCounter = 0\n    \n    // init max counter\n    var\
    \ maxCounter = 0\n    \n    // init max counter\n    var maxCounter = 0\n    \n\
    \    // init max counter\n    var maxCounter = 0\n    \n    // init max counter\n\
    \    var maxCounter = 0\n    \n    // init max counter\n    var maxCounter = 0\n\
    \    \n    // init max counter\n    var maxCounter = 0\n    \n    // init max\
    \ counter\n    var maxCounter = 0\n    \n    // init max counter\n    var maxCounter\
    \ = 0\n    \n    // init max counter\n    var maxCounter = 0\n    \n    // init\
    \ max counter\n    var maxCounter = 0\n    \n    // init max ", "    \n    let\
    \ rowCount = grid.count\n    let colCount = grid[0].count\n    \n    var max =\
    \ 0\n    \n    for row in 0..<rowCount {\n        for col in 0..<colCount {\n\
    \            let bucket = grid[row][col]\n            if bucket > 0 {\n      \
    \          max += bucket\n                grid[row][col] = 0\n            }\n\
    \        }\n    }\n    \n    return max", "    var result = 0\n    for _ in 0..<capacity\
    \ {\n        for _ in 0..<grid.count {\n            if grid[Int(_)][Int(_)] <=\
    \ 0 {\n                grid[Int(_)][Int(_)] = capacity\n                result\
    \ += capacity\n            }\n        }\n    }\n    return result", "    var result\
    \ = 0\n    var min = 0\n    for row in grid {\n        var max = 0\n        for\
    \ cell in row {\n            max = max(max, cell)\n        }\n        if max >\
    \ min {\n            result += max - min\n        }\n        min = max\n    }\n\
    \    return result", "    if grid.isEmpty {\n        return 0\n    }\n    \n \
    \   var max = 0\n    var maxIndex = 0\n    \n    for i in 0..<grid.count {\n \
    \       for j in 0..<grid[i].count {\n            if grid[i][j] == 0 {\n     \
    \           grid[i][j] = capacity\n                \n                if max <\
    \ capacity {\n                    max = capacity\n                    maxIndex\
    \ = i\n                }\n                \n                grid[i][j] = 0\n \
    \           }\n        }\n    }\n    \n    return maxIndex", "    var result =\
    \ 0\n    for row in grid {\n        for bucket in row {\n            if bucket\
    \ > capacity {\n                result += capacity - bucket\n            } else\
    \ {\n                result += bucket\n            }\n        }\n    }\n    return\
    \ result", "    \n    // write your code here\n    var max = 0\n    var count\
    \ = 0\n    for row in grid {\n        for col in row {\n            if col ==\
    \ 0 {\n                count += 1\n            } else {\n                count\
    \ = 0\n            }\n            if count > max {\n                max = count\n\
    \            }\n        }\n    }\n    return max", "    if grid.isEmpty {\n  \
    \      return 0\n    }\n    var max = 0\n    var maxIndex = 0\n    for i in 0..<grid.count\
    \ {\n        for j in 0..<grid[i].count {\n            if grid[i][j] == 0 {\n\
    \                grid[i][j] = capacity\n                max += capacity\n    \
    \            maxIndex = i\n            }\n        }\n    }\n    return max", " \
    \   \n    // init result\n    var result = 0\n    \n    // init bucket array\n\
    \    var buckets = make([][]int, capacity)\n    \n    // init bucket count\n \
    \   var count = 0\n    \n    // init bucket index\n    var bucketIndex = 0\n \
    \   \n    // init bucket capacity\n    var bucketCapacity = 0\n    \n    // init\
    \ bucket max capacity\n    var bucketMaxCapacity = 0\n    \n    // init bucket\
    \ min capacity\n    var bucketMinCapacity = 0\n    \n    // init bucket sum\n\
    \    var bucketSum = 0\n    \n    // init bucket max sum\n    var bucketMaxSum\
    \ = 0\n    \n    // init bucket min sum\n    var bucketMinSum = 0\n    \n    //\
    \ init bucket sum\n    var bucketSum = 0\n    \n    // init bucket max sum\n \
    \   var bucketMaxSum = 0\n    \n    // init bucket min sum\n    var bucketMinSum\
    \ = 0\n    \n    // init bucket sum\n    var bucketSum = 0\n    \n    // init\
    \ bucket max sum\n    var bucketMaxSum = 0\n    \n    // init bucket min sum\n\
    \    var bucketMinSum = 0\n    \n    // init bucket sum\n    var bucketSum = 0\n\
    \    \n    // init bucket max sum\n    var bucketMaxSum = 0\n    \n    // init\
    \ bucket min sum\n    var bucketMinSum = 0\n    \n    // init bucket sum\n   \
    \ var bucketSum = 0\n    \n    // init bucket max sum\n    var bucketMaxSum =\
    \ 0\n    \n    // init bucket min sum\n    var bucketMinSum = 0\n    \n    //\
    \ init bucket sum\n    var bucketSum = 0\n    \n    // init bucket max sum\n \
    \   var bucketMaxSum = 0\n    \n    // init bucket min sum\n    var bucketMinSum\
    \ = 0\n    \n    // init bucket sum\n    var bucketSum = 0\n    \n    // init\
    \ bucket max sum\n    var bucketMaxSum = 0\n    \n    // init bucket min sum\n\
    \    var bucketMinSum = 0\n    \n    // init bucket sum\n    var bucketSum = 0\n\
    \    \n    // init bucket max sum\n    var bucketMaxSum = 0\n    \n    // init\
    \ bucket min sum\n    var bucketMinSum = 0\n    \n    // init bucket sum\n   \
    \ var bucketSum = 0\n    \n    // init bucket max sum\n    var bucketMaxSum =\
    \ 0\n    \n    // init bucket min sum\n    var bucketMinSum = 0\n    \n    //\
    \ init bucket sum\n    var bucketSum = 0\n    \n    // init bucket max sum\n \
    \   var bucketMaxSum = 0\n    \n    // init bucket min sum\n    var bucketMinSum\
    \ = 0\n    \n    // init bucket sum\n    var bucketSum = 0\n    \n    // init\
    \ bucket max sum\n    var bucket", "    var result = 0\n    var buckets = make([][]int,\
    \ capacity)\n    for row in grid {\n        var bucket = buckets[row[0]]\n   \
    \     for _, val := range row {\n            bucket += val\n            if bucket\
    \ > capacity {\n                bucket = bucket % capacity\n            }\n  \
    \      }\n        buckets[row[0]] = bucket\n        if bucket > 0 {\n        \
    \    result += bucket - 1\n        }\n    }\n    return result", "    \n    //\
    \ write your code here\n    \n    return 0", "    \n    // Your code here\n  \
    \  \n    return 0", "    \n    // write your code here\n    \n    return 0", " \
    \   var result = 0\n    for row in grid {\n        for bucket in row {\n     \
    \       if bucket > capacity {\n                result += capacity - bucket\n\
    \            } else {\n                result += bucket\n            }\n     \
    \   }\n    }\n    return result", "    \n    // write your code here\n    \n \
    \   return 0", "    var max = 0\n    for row in grid {\n        for bucket in\
    \ row {\n            if bucket > max {\n                max = bucket\n       \
    \     }\n        }\n    }\n    return max", "    var result = 0\n    for row in\
    \ grid {\n        for bucket in row {\n            if bucket > capacity {\n  \
    \              result += capacity - bucket\n            } else {\n           \
    \     result += bucket\n            }\n        }\n    }\n    return result", " \
    \   var result = 0\n    var minCapacity = capacity\n    for row in grid {\n  \
    \      for col in row {\n            if col == 1 {\n                minCapacity\
    \ = minCapacity - col\n            }\n        }\n    }\n    for row in grid {\n\
    \        for col in row {\n            if col == 1 {\n                result +=\
    \ minCapacity\n            }\n        }\n    }\n    return result", "    guard\
    \ grid.count == 1 else {\n        return 0\n    }\n    \n    var max = 0\n   \
    \ var maxIndex = 0\n    \n    for row in 0..<grid.count {\n        for col in\
    \ 0..<grid[row].count {\n            if grid[row][col] == 1 {\n              \
    \  grid[row][col] = 0\n                \n                if capacity > 0 {\n \
    \                   capacity -= 1\n                }\n                \n     \
    \           if capacity > max {\n                    max = capacity\n        \
    \            maxIndex = row\n                }\n            }\n        }\n   \
    \ }\n    \n    return maxIndex", "    if grid.isEmpty {\n        return 0\n  \
    \  }\n    var max = 0\n    var maxCount = 0\n    var buckets = [Int](capacity)\n\
    \    for row in grid {\n        for bucket in row {\n            buckets[bucket]\
    \ += 1 // count the bucket in the row\n        }\n    }\n    for bucket in buckets\
    \ {\n        if bucket > max {\n            max = bucket\n            maxCount\
    \ = 1\n        } else {\n            if buckets[bucket] > maxCount {\n       \
    \         max = bucket\n                maxCount = buckets[bucket]\n         \
    \   }\n        }\n    }\n    return maxCount", "    var max = 0\n    var maxCount\
    \ = 0\n    for row in grid {\n        if row[0] == 0 {\n            continue\n\
    \        }\n        var count = 0\n        for j in 0..<row[0] {\n           \
    \ if row[j] == 1 {\n                count += 1\n            }\n        }\n   \
    \     if count > max {\n            max = count\n            maxCount = 1\n  \
    \      } else {\n            maxCount *= count\n        }\n    }\n    if maxCount\
    \ > capacity {\n        return 0\n    }\n    for row in grid {\n        if row[0]\
    \ == 0 {\n            continue\n        }\n        var count = 0\n        for\
    \ j in 0..<row[0] {\n            if row[j] == 1 {\n                count += 1\n\
    \            }\n        }\n        if count > max {\n            max = count\n\
    \            maxCount = 1\n        } else {\n            maxCount *= count\n \
    \       }\n    }\n    return maxCount", "    var max = 0\n    var count = 0\n\
    \    for row in grid {\n        for col in row {\n            if col == 0 {\n\
    \                count += 1\n            }\n            if count > max {\n   \
    \             max = count\n            }\n            count = 0\n        }\n \
    \   }\n    return max", "    var result = 0\n    var buckets = [Int](capacity)\n\
    \    for row in grid {\n        for bucket in row {\n            buckets[bucket]\
    \ += 1\n        }\n    }\n    for bucket in buckets {\n        if bucket > 0 {\n\
    \            result += bucket\n        }\n    }\n    return result", "    var\
    \ count = 0\n    for row in grid {\n        if row[0] == 0 {\n            count\
    \ += row[1]\n        }\n    }\n    return count", "    \n    let rowCount = grid.count\n\
    \    let colCount = grid[0].count\n    \n    var maxCount = 0\n    \n    for row\
    \ in 0..<rowCount {\n        for col in 0..<colCount {\n            if grid[row][col]\
    \ == 1 {\n                maxCount = max(maxCount, max_fill(grid: grid[row..<min(row+capacity,\
    \ rowCount), col..<colCount], capacity: capacity))\n            }\n        }\n\
    \    }\n    \n    return maxCount", "    var result = 0\n    var buckets = make([][]int,\
    \ capacity)\n    for row in grid {\n        for bucket in bucket {\n         \
    \   buckets[bucket]++\n        }\n    }\n    for bucket in buckets {\n       \
    \ if bucket > 0 {\n            result += bucket\n        }\n    }\n    return\
    \ result", "    \n    // write your code here\n    \n    return 0", "    guard\
    \ grid.count == 1 else {\n        return 0\n    }\n    \n    var max = 0\n   \
    \ var maxIndex = 0\n    \n    for i in 0..<grid[0].length {\n        for j in\
    \ 0..<grid.count {\n            if grid[j][i] == 1 {\n                grid[j][i]\
    \ = 0\n                \n                if capacity > max {\n               \
    \     max = capacity\n                    maxIndex = j\n                }\n  \
    \              \n                capacity -= 1\n            }\n        }\n   \
    \ }\n    \n    return maxIndex", "    \n    // write your code here\n    var count\
    \ = 0\n    for row in grid {\n        for col in row {\n            if col ==\
    \ 0 {\n                count += 1\n            }\n        }\n    }\n    return\
    \ count", "    if grid.count == 0 {\n        return 0\n    }\n    \n    var max\
    \ = 0\n    var maxCount = 0\n    var maxIndex = 0\n    \n    for i in 0..<grid.count\
    \ {\n        var count = 0\n        for j in 0..<grid[i].count {\n           \
    \ if grid[i][j] == 1 {\n                count += 1\n            }\n        }\n\
    \        if count > max {\n            max = count\n            maxCount = 1\n\
    \            maxIndex = i\n        } else {\n            if count == max {\n \
    \               maxCount += 1\n            }\n        }\n    }\n    \n    if maxCount\
    \ > capacity {\n        return 0\n    }\n    \n    for i in 0..<grid.count {\n\
    \        for j in 0..<grid[i].count {\n            if grid[i][j] == 1 {\n    \
    \            grid[i][j] = 0\n                grid[maxIndex][j] = 1\n         \
    \       \n                let newMax = max_fill(grid: grid, capacity: capacity)\n\
    \                \n                if newMax > 0 {\n                    grid[i][j]\
    \ = 1\n                    grid[maxIndex][j] = 0\n                    \n     \
    \               max = newMax\n                    maxCount = 1\n             \
    \       maxIndex = i\n                }\n            }\n        }\n    }\n   \
    \ \n    return max", "    var result = 0\n    for row in grid {\n        if row[0]\
    \ == 0 {\n            result += 1\n        }\n    }\n    for row in grid {\n \
    \       if row[0] == 0 {\n            result += row[1]\n        }\n    }\n   \
    \ for row in grid {\n        if row[0] == 0 {\n            result += row[1]\n\
    \        }\n    }\n    for row in grid {\n        if row[0] == 0 {\n         \
    \   result += row[1]\n        }\n    }\n    for row in grid {\n        if row[0]\
    \ == 0 {\n            result += row[1]\n        }\n    }\n    for row in grid\
    \ {\n        if row[0] == 0 {\n            result += row[1]\n        }\n    }\n\
    \    for row in grid {\n        if row[0] == 0 {\n            result += row[1]\n\
    \        }\n    }\n    for row in grid {\n        if row[0] == 0 {\n         \
    \   result += row[1]\n        }\n    }\n    for row in grid {\n        if row[0]\
    \ == 0 {\n            result += row[1]\n        }\n    }\n    for row in grid\
    \ {\n        if row[0] == 0 {\n            result += row[1]\n        }\n    }\n\
    \    for row in grid {\n        if row[0] == 0 {\n            result += row[1]\n\
    \        }\n    }\n    for row in grid {\n        if row[0] == 0 {\n         \
    \   result += row[1]\n        }\n    }\n    for row in grid {\n        if row[0]\
    \ == 0 {\n            result += row[1]\n        }\n    }\n    for row in grid\
    \ {\n        if row[0] == 0 {\n            result += row[1]\n        }\n    }\n\
    \    for row in grid {\n        if row[0] == 0 {\n            result += row[1]\n\
    \        }\n    }\n    for row in grid {\n        if row[0] == 0 {\n         \
    \   result += row[1]\n        }\n    }\n    for row in grid {\n        if row[0]\
    \ == 0 {\n            result += row[1]\n        }\n    }\n    for row in grid\
    \ {\n        if row[0] == 0 {\n            result += row[1]\n        }\n    }\n\
    \    for row in grid {\n        if row[0] == 0 {\n            result += row[1]\n\
    \        }\n    }\n    for row in grid {\n        if row[0] == 0 {\n         \
    \   result += row[1]\n        }\n    }\n    for row in grid {\n        if row[0]\
    \ == 0 {\n            result += row[1]\n        }\n    }\n    for row in grid\
    \ {\n        if row[0] == 0 {\n            result += row[1]\n        }\n    }\n\
    \    for row in grid {\n        if row[0] == 0 {\n            result += row[1]\n\
    \        }\n    }\n    for row in grid {\n        if row[0] == 0 {\n         \
    \   result += row[1]\n        }\n    }\n    for row in grid {\n        if row[0]\
    \ == 0 {\n            result += row[1]\n        }\n    }\n    for row in grid\
    \ {\n        if row[0] == 0 {\n            result += row[1]\n        }\n    }\n\
    \    for row in grid {\n        if row[0] == 0 {\n            result += row[1]\n",
  "    if grid.isEmpty {\n        return 0\n    }\n    \n    var max = 0\n    var\
    \ buckets = make([][]int, capacity)\n    for row in grid {\n        for bucket\
    \ in row {\n            buckets[bucket] = append(buckets[bucket], 0)\n       \
    \ }\n    }\n    for bucket in buckets {\n        max = max(max, bucket.count)\n\
    \    }\n    return max", "    guard grid.count > 0 else {\n        return 0\n\
    \    }\n    \n    var max = 0\n    var maxIndex = 0\n    \n    for i in 0..<grid.count\
    \ {\n        for j in 0..<grid[i].count {\n            if grid[i][j] == 0 {\n\
    \                grid[i][j] = capacity\n                max += capacity\n    \
    \            maxIndex = i\n            }\n        }\n    }\n    \n    for i in\
    \ 0..<grid.count {\n        for j in 0..<grid[i].count {\n            if grid[i][j]\
    \ == capacity {\n                grid[i][j] = 0\n                max -= 1\n  \
    \              maxIndex = i\n            }\n        }\n    }\n    \n    return\
    \ max", "    \n    // Your code here\n    \n    return 0", "    var result = 0\n\
    \    var buckets = [Int](capacity)\n    for row in grid {\n        var bucket\
    \ = 0\n        for _ in row {\n            bucket += buckets[bucket]\n       \
    \ }\n        buckets[bucket]--\n        result += bucket\n    }\n    return result",
  "    var count = 0\n    for row in grid {\n        var max = 0\n        for _ in\
    \ row {\n            max += capacity\n        }\n        for _ in row {\n    \
    \        max -= capacity\n        }\n        if max > 0 {\n            count +=\
    \ 1\n        }\n    }\n    return count", "    if grid.isEmpty() {\n        return\
    \ 0\n    }\n    var max = 0\n    var maxIndex = 0\n    var index = 0\n    var\
    \ buckets = make([][]int, capacity)\n    for row in grid {\n        for col in\
    \ row {\n            if col == 1 {\n                buckets[index%capacity] =\
    \ append(buckets[index%capacity], 0)\n                index++\n            }\n\
    \        }\n    }\n    for row in grid {\n        for col in row {\n         \
    \   if col == 0 {\n                for bucket in buckets {\n                 \
    \   bucket[bucket.index(col)] = -1\n                }\n            }\n       \
    \ }\n    }\n    for bucket in buckets {\n        if bucket.max() > max {\n   \
    \         max = bucket.max()\n            maxIndex = index\n        }\n    }\n\
    \    return maxIndex", "    var result = 0\n    var buckets = make([][]int, capacity)\n\
    \    for row in grid {\n        var bucket = buckets[row[0]]\n        for _, v\
    \ in row.enumerated() {\n            if v == 1 {\n                bucket += 1\n\
    \            }\n        }\n        if bucket > capacity {\n            result\
    \ = 1\n            break\n        }\n        buckets[row[0]] = bucket\n    }\n\
    \    return result", "    if grid.isEmpty {\n        return 0\n    }\n    \n \
    \   var max = 0\n    var min = 0\n    var i = 0\n    var j = 0\n    var count\
    \ = 0\n    \n    for row in grid {\n        i += 1\n        \n        if i ==\
    \ 1 {\n            min = row[0]\n        }\n        \n        for col in row {\n\
    \            j += 1\n            \n            if j == 1 {\n                max\
    \ = col\n            }\n            \n            if col == 0 {\n            \
    \    count += capacity - max - min\n                max = 0\n                min\
    \ = 0\n            }\n        }\n    }\n    \n    return count", "    \n    //\
    \ write your code here\n    \n    return 0", "    var max = 0\n    for row in\
    \ grid {\n        for col in row {\n            if col > max {\n             \
    \   max = col\n            }\n        }\n    }\n    for row in grid {\n      \
    \  for col in row {\n            if col > max {\n                max = col\n \
    \           }\n        }\n    }\n    for row in grid {\n        for col in row\
    \ {\n            if col > max {\n                max = col\n            }\n  \
    \      }\n    }\n    for row in grid {\n        for col in row {\n           \
    \ if col > max {\n                max = col\n            }\n        }\n    }\n\
    \    for row in grid {\n        for col in row {\n            if col > max {\n\
    \                max = col\n            }\n        }\n    }\n    for row in grid\
    \ {\n        for col in row {\n            if col > max {\n                max\
    \ = col\n            }\n        }\n    }\n    for row in grid {\n        for col\
    \ in row {\n            if col > max {\n                max = col\n          \
    \  }\n        }\n    }\n    for row in grid {\n        for col in row {\n    \
    \        if col > max {\n                max = col\n            }\n        }\n\
    \    }\n    for row in grid {\n        for col in row {\n            if col >\
    \ max {\n                max = col\n            }\n        }\n    }\n    for row\
    \ in grid {\n        for col in row {\n            if col > max {\n          \
    \      max = col\n            }\n        }\n    }\n    for row in grid {\n   \
    \     for col in row {\n            if col > max {\n                max = col\n\
    \            }\n        }\n    }\n    for row in grid {\n        for col in row\
    \ {\n            if col > max {\n                max = col\n            }\n  \
    \      }\n    }\n    for row in grid {\n        for col in row {\n           \
    \ if col > max {\n                max = col\n            }\n        }\n    }\n\
    \    for row in grid {\n        for col in row {\n            if col > max {\n\
    \                max = col\n            }\n        }\n    }\n    for row in grid\
    \ {\n        for col in row {\n            if col > max {\n                max\
    \ = col\n            }\n        }\n    }\n    for row in grid {\n        for col\
    \ in row {\n            if col > max {\n                max = col\n          \
    \  }\n        }\n    }\n    for row in grid {\n        for col in row {\n    \
    \        if col > max {\n                max = col\n            }\n        }\n\
    \    }\n    for row in grid {\n        for col in row {\n            if col >\
    \ max {\n                max = col\n            }\n        }\n    }\n    for row\
    \ in grid {\n        for col in row {\n            if col > max {\n          \
    \      max = col\n            }\n        }\n    }\n    for row in grid {\n   \
    \     for col in row {\n            if col > max ", "    if grid.isEmpty() {\n\
    \        return 0\n    }\n    \n    var max = 0\n    var buckets = make([][]int,\
    \ capacity)\n    for row in grid {\n        for bucket in row {\n            buckets[bucket]\
    \ = buckets[bucket] + 1\n        }\n    }\n    for bucket in buckets {\n     \
    \   if bucket > max {\n            max = bucket\n        }\n    }\n    return\
    \ max", "    \n    // write your code here\n    \n    return 0", "    var result\
    \ = 0\n    for row in grid {\n        var max = 0\n        for _ in row {\n  \
    \          max += capacity\n        }\n        if max > result {\n           \
    \ result = max\n        }\n    }\n    return result", "    var count = 0\n   \
    \ var max = 0\n    for row in grid {\n        for col in row {\n            if\
    \ col == 0 {\n                count += 1\n                if count > max {\n \
    \                   max = count\n                }\n            }\n        }\n\
    \    }\n    return max", "    var count = 0\n    var minCapacity = capacity\n\
    \    for row in grid {\n        for col in row {\n            if col == 1 {\n\
    \                count += 1\n                if count > minCapacity {\n      \
    \              minCapacity = count\n                }\n            }\n       \
    \ }\n    }\n    return minCapacity", "    if grid.isEmpty() {\n        return\
    \ 0\n    }\n    \n    var max = 0\n    var maxIndex = 0\n    \n    for row in\
    \ grid {\n        for col in row {\n            if col > max {\n             \
    \   max = col\n                maxIndex = col\n            }\n        }\n    }\n\
    \    \n    for row in grid {\n        for col in row {\n            if col ==\
    \ maxIndex {\n                col -= capacity\n            }\n        }\n    }\n\
    \    \n    return maxIndex", "    if grid.isEmpty {\n        return 0\n    }\n\
    \    \n    var max = 0\n    var index = 0\n    var bucket = make([][Int], capacity)\n\
    \    for row in grid {\n        for col in row {\n            if col == 0 {\n\
    \                bucket[index] = col\n                index++\n            }\n\
    \        }\n    }\n    for row in grid {\n        for col in row {\n         \
    \   if col == 0 {\n                max += bucket[col]\n            }\n       \
    \ }\n    }\n    return max", "    var result = 0\n    for row in grid {\n    \
    \    for col in row {\n            if col == 0 {\n                result += capacity\n\
    \            } else {\n                result -= capacity\n            }\n   \
    \     }\n    }\n    return result", "    guard grid.count == 1 else {\n      \
    \  return 0\n    }\n    \n    var count = 0\n    \n    var max = 0\n    \n   \
    \ for row in 0..<grid.count {\n        for col in 0..<grid[row].count {\n    \
    \        if grid[row][col] == 1 {\n                max += 1\n            }\n \
    \       }\n    }\n    \n    if max > capacity {\n        return 0\n    }\n   \
    \ \n    for row in 0..<grid.count {\n        for col in 0..<grid[row].count {\n\
    \            if grid[row][col] == 1 {\n                grid[row][col] = 0\n  \
    \              count += max_fill(grid: grid, capacity: capacity)\n           \
    \     grid[row][col] = 1\n            }\n        }\n    }\n    \n    return count",
  "    var max = 0\n    var i = 0\n    var j = 0\n    for row in grid {\n        i\
    \ += 1\n        for col in row {\n            j += 1\n            if col == 0\
    \ {\n                max += capacity - j\n            }\n        }\n    }\n  \
    \  return max", "    var result = 0\n    for row in grid {\n        var buckets\
    \ = [Int](capacity)\n        for row in row {\n            buckets[row]++\n  \
    \      }\n        buckets.sort()\n        for bucket in buckets {\n          \
    \  if bucket > 0 {\n                bucket--\n                result += bucket\n\
    \            }\n        }\n    }\n    return result", "    var max = 0\n    var\
    \ index = 0\n    var buckets = make([][]int, capacity)\n    for row in grid {\n\
    \        for col in row {\n            buckets[col%capacity] = append(buckets[col%capacity],\
    \ index)\n        }\n        index++\n    }\n    for bucket in buckets {\n   \
    \     max = max(max, bucket.count)\n    }\n    return max", "    var result =\
    \ 0\n    for row in grid {\n        var max = 0\n        for col in row {\n  \
    \          if col > max {\n                max = col\n            }\n        }\n\
    \        result += max - capacity\n    }\n    return result", "    \n    // write\
    \ your code here\n    \n    return 0", "    var result = 0\n    for row in grid\
    \ {\n        for bucket in row {\n            if bucket > capacity {\n       \
    \         result += capacity - bucket\n            }\n        }\n    }\n    return\
    \ result", "    \n    // write your code here\n    \n    return 0", "    if grid.count\
    \ == 0 {\n        return 0\n    }\n    \n    var max = 0\n    var maxCount = 0\n\
    \    \n    for row in 0..<grid.count {\n        for col in 0..<grid[row].count\
    \ {\n            if grid[row][col] == 1 {\n                max += capacity\n \
    \               maxCount++\n            }\n        }\n    }\n    \n    return\
    \ maxCount > max ? maxCount : max", "    var count = 0\n    for row in grid {\n\
    \        for col in row {\n            if col == 0 {\n                count +=\
    \ min_fill(grid: grid, row: row, col: col, capacity: capacity)\n            }\n\
    \        }\n    }\n    return count", "    \n    // write your code here\n   \
    \ \n    var count = 0\n    \n    for row in grid {\n        if row[0] == 0 {\n\
    \            count += row[1]\n        }\n    }\n    \n    return count", "   \
    \ \n    // write your code here\n    \n    return 0", "    \n    var count = 0\n\
    \    \n    for row in grid {\n        for col in row {\n            if col ==\
    \ 0 {\n                count += capacity\n            }\n        }\n    }\n  \
    \  \n    return count", "    \n    // write your code here\n    \n    return 0",
  "    var result = 0\n    var buckets = make([][]int, capacity)\n    for row in grid\
    \ {\n        for bucket in bucket {\n            if bucket > 0 {\n           \
    \     buckets[bucket-1][bucket-1]++\n            }\n        }\n    }\n    for\
    \ bucket in buckets {\n        result += bucket.max()\n    }\n    return result",
  "    \n    var count = 0\n    var max = 0\n    \n    for row in grid {\n       \
    \ for col in row {\n            if col == 0 {\n                count += 1\n  \
    \          } else {\n                count = 0\n            }\n            if\
    \ count > max {\n                max = count\n            }\n        }\n    }\n\
    \    return max", "    if grid.length == 0 || grid[0].length == 0 {\n        return\
    \ 0\n    }\n    \n    var max = 0\n    var maxCount = 0\n    var min = 0\n   \
    \ var minCount = 0\n    \n    for row in 0..<grid.length {\n        for col in\
    \ 0..<grid[row].length {\n            if grid[row][col] == 1 {\n             \
    \   \n                if capacity > max {\n                    max = capacity\n\
    \                    maxCount = 1\n                }\n                \n     \
    \           if capacity < min {\n                    min = capacity\n        \
    \            minCount = 1\n                }\n                \n             \
    \   if capacity == max {\n                    maxCount++\n                }\n\
    \                \n                if capacity == min {\n                    minCount++\n\
    \                }\n                \n                if maxCount > minCount {\n\
    \                    maxCount--\n                    minCount--\n            \
    \    }\n                \n                if maxCount > minCount {\n         \
    \           maxCount--\n                    minCount--\n                }\n  \
    \              \n                if maxCount > minCount {\n                  \
    \  maxCount--\n                    minCount--\n                }\n           \
    \     \n                if maxCount > minCount {\n                    maxCount--\n\
    \                    minCount--\n                }\n                \n       \
    \         if maxCount > minCount {\n                    maxCount--\n         \
    \           minCount--\n                }\n                \n                if\
    \ maxCount > minCount {\n                    maxCount--\n                    minCount--\n\
    \                }\n                \n                if maxCount > minCount {\n\
    \                    maxCount--\n                    minCount--\n            \
    \    }\n                \n                if maxCount > minCount {\n         \
    \           maxCount--\n                    minCount--\n                }\n  \
    \              \n                if maxCount > minCount {\n                  \
    \  maxCount--\n                    minCount--\n                }\n           \
    \     \n                if maxCount > minCount {\n                    maxCount--\n\
    \                    minCount--\n                }\n                \n       \
    \         if maxCount > minCount {\n                    maxCount--\n         \
    \           minCount--\n                }\n                \n                if\
    \ maxCount > minCount {\n                    maxCount--\n                    minCount--\n\
    \                }\n                \n                if maxCount > minCount {\n\
    \                    maxCount--\n                    minCount--\n            \
    \    }\n                \n                if maxCount > minCount {\n         \
    \           maxCount--\n                    minCount--\n                }\n  \
    \              \n                if maxCount > minCount {\n                  \
    \  maxCount--\n                    minCount--\n                }\n           \
    \     \n                if maxCount > minCount {\n                    maxCount--\n\
    \                    minCount--\n                }\n                \n       \
    \         if maxCount > minCount {\n                    maxCount--\n         \
    \           minCount--\n                }\n                \n                if\
    \ maxCount ", "    \n    // write your code here\n    \n    return 0", "    if\
    \ grid.isEmpty() {\n        return 0\n    }\n    \n    var max = 0\n    var count\
    \ = 0\n    \n    for row in grid {\n        for col in row {\n            if col\
    \ == 0 {\n                count += 1\n            } else {\n                count\
    \ = 0\n            }\n            if count > max {\n                max = count\n\
    \            }\n        }\n    }\n    \n    return max", "    \n    // write your\
    \ code here\n    \n    return 0", "    guard grid.count > 0 else { return 0 }\n\
    \    \n    var max = 0\n    var maxCount = 0\n    var maxIndex = 0\n    \n   \
    \ for i in 0..<grid.count {\n        for j in 0..<grid[i].count {\n          \
    \  if grid[i][j] == 1 {\n                grid[i][j] = 0\n                \n  \
    \              if capacity > max {\n                    max = capacity\n     \
    \               maxCount = 1\n                    maxIndex = i\n             \
    \   } else {\n                    maxCount += 1\n                }\n         \
    \   }\n        }\n    }\n    \n    return maxCount", "    if grid.length == 0\
    \ || grid[0].length == 0 {\n        return 0\n    }\n    var max = 0\n    var\
    \ maxCount = 0\n    var buckets = make([][]int, capacity)\n    for row in grid\
    \ {\n        for col in row {\n            buckets[col%capacity] = append(buckets[col%capacity],\
    \ 0)\n        }\n    }\n    for row in grid {\n        for col in row {\n    \
    \        buckets[col%capacity][row%capacity] = -1\n        }\n    }\n    for row\
    \ in grid {\n        for col in row {\n            if buckets[col%capacity][row%capacity]\
    \ == -1 {\n                buckets[col%capacity][row%capacity] = col\n       \
    \         maxCount++\n            }\n        }\n    }\n    for bucket in buckets\
    \ {\n        if bucket[0] > max {\n            max = bucket[0]\n        }\n  \
    \  }\n    return maxCount", "    if grid.length == 0 || grid[0].length == 0 {\n\
    \        return 0\n    }\n    \n    var max = 0\n    var maxCount = 0\n    \n\
    \    for row in 0..<grid.length {\n        for col in 0..<grid[row].length {\n\
    \            if grid[row][col] == 1 {\n                max += capacity\n     \
    \           maxCount++\n            }\n        }\n    }\n    \n    return maxCount",
  "    \n    // Your code here\n    \n    return 0", "    var max = 0\n    var buckets\
    \ = make([][]int, capacity)\n    for row in grid {\n        for bucket in bucket\
    \ {\n            if bucket > 0 {\n                buckets[bucket-1][bucket-1]++\n\
    \            }\n        }\n    }\n    for bucket in buckets {\n        if bucket\
    \ > 0 {\n            max = max(max, buckets[bucket-1][bucket-1])\n        }\n\
    \    }\n    return max", "    if grid.count == 0 {\n        return 0\n    }\n\
    \    \n    var max = 0\n    var maxIndex = 0\n    \n    for row in 0..<grid.count\
    \ {\n        for col in 0..<grid[row].count {\n            if grid[row][col] ==\
    \ 0 {\n                grid[row][col] = capacity\n                \n         \
    \       if capacity > max {\n                    max = capacity\n            \
    \        maxIndex = row\n                }\n                \n               \
    \ capacity -= 1\n            }\n        }\n    }\n    \n    return maxIndex",
  "    if grid.count == 0 {\n        return 0\n    }\n    \n    var max = 0\n    var\
    \ maxIndex = 0\n    \n    for i in 0..<grid.count {\n        for j in 0..<grid[i].count\
    \ {\n            if grid[i][j] == 1 {\n                grid[i][j] = 0\n      \
    \          \n                if capacity > max {\n                    max = capacity\n\
    \                    maxIndex = i\n                }\n                \n     \
    \           capacity -= 1\n            }\n        }\n    }\n    \n    return maxIndex",
  "    \n    // write your code here\n    \n    return 0", "    \n    // TODO: Write\
    \ your code here\n    \n    return 0", "    if grid.isEmpty() {\n        return\
    \ 0\n    }\n    var max = 0\n    var maxIndex = 0\n    for row in grid {\n   \
    \     if row[0] == 0 {\n            continue\n        }\n        for col in row\
    \ {\n            if col == 0 {\n                continue\n            }\n    \
    \        if col > max {\n                max = col\n                maxIndex =\
    \ col\n            }\n        }\n    }\n    for row in grid {\n        if row[0]\
    \ == 0 {\n            continue\n        }\n        for col in row {\n        \
    \    if col == 0 {\n                continue\n            }\n            if col\
    \ > max {\n                max = col\n                maxIndex = col\n       \
    \     }\n        }\n    }\n    return maxIndex", "    guard capacity > 0 else\
    \ {\n        return 0\n    }\n    \n    var max = 0\n    var maxCount = 0\n  \
    \  var maxCountIndex = 0\n    \n    for i in 0..<grid.count {\n        var count\
    \ = 0\n        for j in 0..<grid[i].count {\n            if grid[i][j] == 1 {\n\
    \                count += 1\n            }\n        }\n        if count > max\
    \ {\n            max = count\n            maxCountIndex = i\n        }\n    }\n\
    \    \n    for i in 0..<grid.count {\n        for j in 0..<grid[i].count {\n \
    \           if grid[i][j] == 1 {\n                grid[i][j] = 0\n           \
    \ }\n        }\n    }\n    \n    for i in 0..<grid.count {\n        for j in 0..<grid[i].count\
    \ {\n            if grid[i][j] == 0 {\n                grid[i][j] = 1\n      \
    \      }\n        }\n    }\n    \n    for i in 0..<grid.count {\n        for j\
    \ in 0..<grid[i].count {\n            if grid[i][j] == 1 {\n                grid[i][j]\
    \ = 0\n            }\n        }\n    }\n    \n    for i in 0..<grid.count {\n\
    \        for j in 0..<grid[i].count {\n            if grid[i][j] == 0 {\n    \
    \            grid[i][j] = 1\n            }\n        }\n    }\n    \n    for i\
    \ in 0..<grid.count {\n        for j in 0..<grid[i].count {\n            if grid[i][j]\
    \ == 1 {\n                grid[i][j] = 0\n            }\n        }\n    }\n  \
    \  \n    for i in 0..<grid.count {\n        for j in 0..<grid[i].count {\n   \
    \         if grid[i][j] == 0 {\n                grid[i][j] = 1\n            }\n\
    \        }\n    }\n    \n    for i in 0..<grid.count {\n        for j in 0..<grid[i].count\
    \ {\n            if grid[i][j] == 1 {\n                grid[i][j] = 0\n      \
    \      }\n        }\n    }\n    \n    for i in 0..<grid.count {\n        for j\
    \ in 0..<grid[i].count {\n            if grid[i][j] == 0 {\n                grid[i][j]\
    \ = 1\n            }\n        }\n    }\n    \n    for i in 0..<grid.count {\n\
    \        for j in 0..<grid[i].count {\n            if grid[i][j] == 1 {\n    \
    \            grid[i][j] = 0\n            }\n        }\n    }\n    \n    for i\
    \ in 0..<grid.count {\n        for j in 0..<grid[i].count {\n            if grid[i][j]\
    \ == 0 {\n                grid[i][j] = 1\n            }\n        }\n    }\n  \
    \  \n    for i in 0..<grid.count {\n        for j in 0..<grid[i].count {\n   \
    \         if grid[i][j] == 1 {\n                grid[i][j] = 0\n            }\n\
    \        }\n    }\n    \n    for i in 0..<grid.count {\n        for j in 0..<grid[i].count\
    \ {\n            if ", "    var result = 0\n    for row in grid {\n        for\
    \ bucket in row {\n            if bucket > capacity {\n                result\
    \ += capacity - bucket\n            } else {\n                result += bucket\n\
    \            }\n        }\n    }\n    return result", "    if grid.isEmpty() {\n\
    \        return 0\n    }\n    \n    var max = 0\n    var maxIndex = 0\n    \n\
    \    for row in grid {\n        if row[0] == 0 {\n            continue\n     \
    \   }\n        \n        var count = 0\n        for index in 0..<row[0] {\n  \
    \          if row[index] == 1 {\n                count += 1\n            }\n \
    \       }\n        \n        if count > max {\n            max = count\n     \
    \       maxIndex = row[0]\n        }\n    }\n    \n    for index in 0..<capacity\
    \ {\n        if grid[maxIndex][index] == 1 {\n            grid[maxIndex][index]\
    \ = 0\n            max -= 1\n        }\n    }\n    \n    return max", "    \n\
    \    // write your code here\n    \n    var count = 0\n    \n    for row in grid\
    \ {\n        if row[0] == 0 {\n            count += row[1]\n        }\n    }\n\
    \    \n    return count", "    var count = 0\n    for row in grid {\n        for\
    \ bucket in row {\n            if bucket > capacity {\n                count +=\
    \ capacity - bucket\n            }\n        }\n    }\n    return count", "   \
    \ var max = 0\n    for row in grid {\n        for col in row {\n            if\
    \ col > max {\n                max = col\n            }\n        }\n    }\n  \
    \  for row in grid {\n        for col in row {\n            if col > max {\n \
    \               max = col\n            }\n        }\n    }\n    for row in grid\
    \ {\n        for col in row {\n            if col > max {\n                max\
    \ = col\n            }\n        }\n    }\n    for row in grid {\n        for col\
    \ in row {\n            if col > max {\n                max = col\n          \
    \  }\n        }\n    }\n    for row in grid {\n        for col in row {\n    \
    \        if col > max {\n                max = col\n            }\n        }\n\
    \    }\n    return max", "    \n    var max = 0\n    var count = 0\n    \n   \
    \ for row in grid {\n        for col in row {\n            if col == 0 {\n   \
    \             count += 1\n                if count > max {\n                 \
    \   max = count\n                }\n            }\n        }\n    }\n    \n  \
    \  return max", "    \n    var result = 0\n    \n    for row in grid {\n     \
    \   if row[0] == 0 {\n            result += row[1]\n        }\n    }\n    \n \
    \   return result", "    \n    // TODO: Write your code here\n    \n    return\
    \ 0", "    var max = 0\n    var count = 0\n    for row in grid {\n        if row[0]\
    \ == 0 {\n            count += row[1]\n        }\n        if row[0] == 1 {\n \
    \           count -= row[1]\n        }\n        if count > capacity {\n      \
    \      max = count\n            count = 0\n        }\n    }\n    return max",
  "    \n    // write your code here\n    \n    return 0", "    var result = 0\n \
    \   for row in grid {\n        for col in row {\n            if col == 0 {\n \
    \               result += capacity\n            }\n        }\n    }\n    return\
    \ result", "    var max = 0\n    var count = 0\n    for row in grid {\n      \
    \  for col in row {\n            if col == 0 {\n                count += 1\n \
    \           } else {\n                count = 0\n            }\n            if\
    \ count > max {\n                max = count\n            }\n        }\n    }\n\
    \    return max", "    \n    // write your code here\n    var result = 0\n   \
    \ \n    for row in grid {\n        var max = 0\n        for col in row {\n   \
    \         if col > max {\n                max = col\n            }\n        }\n\
    \        result += max - capacity\n    }\n    \n    return result", "    \n  \
    \  var count = 0\n    \n    for row in grid {\n        for col in row {\n    \
    \        if col == 0 {\n                count += capacity - col\n            }\n\
    \        }\n    }\n    \n    return count", "    \n    // write your code here\n\
    \    \n    return 0", "    var result = 0\n    for _ in 0..<capacity.toInt()*capacity.toInt()\
    \ {\n        result += 1\n    }\n    for row in 0..<grid.count {\n        for\
    \ col in 0..<grid[row].count {\n            if grid[row][col] == 1 {\n       \
    \         for _ in 0..<capacity.toInt() {\n                    grid[row][col]\
    \ = 0\n                    result += 1\n                }\n            }\n   \
    \     }\n    }\n    return result", "    \n    // write your code here\n    \n\
    \    return 0", "    \n    var count = 0\n    var minCapacity = capacity\n   \
    \ var minBucket = 0\n    var maxBucket = 0\n    var minWell = 0\n    var maxWell\
    \ = 0\n    \n    for _ in 0..<grid.count {\n        minBucket = maxBucket\n  \
    \      minWell = maxWell\n        maxBucket = minBucket + grid[minBucket]!\n \
    \       maxWell = minWell + grid[maxBucket]!\n        \n        for _ in 0..<grid[minBucket]!\
    \ {\n            minBucket++\n            minWell = maxWell\n            maxBucket\
    \ = minBucket + grid[minBucket]!\n            maxWell = minWell + grid[maxBucket]!\n\
    \        }\n        \n        for _ in 0..<grid[maxBucket]! {\n            maxBucket--\n\
    \            minWell = maxWell\n            maxBucket = minBucket + grid[minBucket]!\n\
    \            maxWell = minWell + grid[maxBucket]!\n        }\n        \n     \
    \   if minBucket < minCapacity {\n            minCapacity = minBucket\n      \
    \  }\n        if maxBucket > minCapacity {\n            minCapacity = maxBucket\n\
    \        }\n        if minWell < minCapacity {\n            minCapacity = minWell\n\
    \        }\n        if maxWell > minCapacity {\n            minCapacity = maxWell\n\
    \        }\n        \n        if minCapacity == capacity {\n            count\
    \ += 1\n        }\n    }\n    \n    return count", "    \n    // write your code\
    \ here\n    var max = 0\n    var count = 0\n    for row in grid {\n        if\
    \ row[0] == 0 {\n            count += row[1]\n        }\n        if row[0] ==\
    \ 1 {\n            count -= row[1]\n        }\n        if count > capacity {\n\
    \            max = count\n            count = 0\n        }\n    }\n    return\
    \ max", "    if grid.isEmpty() {\n        return 0\n    }\n    \n    var max =\
    \ 0\n    var maxIndex = 0\n    \n    for row in 0..<grid.count {\n        for\
    \ col in 0..<grid[row].count {\n            if grid[row][col] == 1 {\n       \
    \         max += 1\n                if max > capacity {\n                    maxIndex\
    \ = row\n                    break\n                }\n            }\n       \
    \ }\n    }\n    \n    return maxIndex", "    guard capacity > 0 else {\n     \
    \   return 0\n    }\n    \n    var max = 0\n    var maxCount = 0\n    \n    for\
    \ row in grid {\n        var count = 0\n        for cell in row {\n          \
    \  if cell == 1 {\n                count += 1\n            }\n        }\n    \
    \    if count > max {\n            max = count\n            maxCount = 1\n   \
    \     } else {\n            maxCount += 1\n        }\n    }\n    \n    for row\
    \ in grid {\n        var count = 0\n        for cell in row {\n            if\
    \ cell == 0 {\n                count += 1\n            }\n        }\n        if\
    \ count > max {\n            max = count\n            maxCount = 1\n        }\
    \ else {\n            maxCount += 1\n        }\n    }\n    \n    return maxCount",
  "    if grid.isEmpty() {\n        return 0\n    }\n    \n    var max = 0\n    var\
    \ maxIndex = 0\n    \n    for i in 0..<grid.count {\n        for j in 0..<grid[i].count\
    \ {\n            if grid[i][j] == 0 {\n                grid[i][j] = capacity\n\
    \                max += capacity\n                maxIndex = i\n            }\n\
    \        }\n    }\n    \n    for i in 0..<grid.count {\n        for j in 0..<grid[i].count\
    \ {\n            if grid[i][j] == capacity {\n                grid[i][j] = 0\n\
    \                max -= 1\n                maxIndex = i\n            }\n     \
    \   }\n    }\n    \n    return max", "    var result = 0\n    var buckets = [Int](capacity)\n\
    \    for row in grid {\n        for bucket in row {\n            buckets[bucket]++\n\
    \        }\n    }\n    for bucket in buckets {\n        if bucket > 0 {\n    \
    \        result += bucket\n        }\n    }\n    return result", "    if grid.length\
    \ == 0 || grid[0].length == 0 {\n        return 0\n    }\n    \n    var max =\
    \ 0\n    var maxCount = 0\n    \n    for row in 0..<grid.length {\n        for\
    \ col in 0..<grid[row].length {\n            if grid[row][col] == 1 {\n      \
    \          max += capacity\n                maxCount++\n            }\n      \
    \  }\n    }\n    \n    return maxCount", "    guard grid.count == 1 else {\n \
    \       return 0\n    }\n    \n    var max = 0\n    var maxCount = 0\n    \n \
    \   for row in 0..<grid.count {\n        for col in 0..<grid[row].count {\n  \
    \          if grid[row][col] == 1 {\n                max += 1\n              \
    \  maxCount += 1\n            }\n        }\n    }\n    \n    if maxCount > capacity\
    \ {\n        return 0\n    }\n    \n    return max", "    if grid.length == 0\
    \ || grid[0].length == 0 {\n        return 0\n    }\n    var max = 0\n    var\
    \ maxCount = 0\n    for row in grid {\n        for col in row {\n            if\
    \ col == 0 {\n                max += 1\n                maxCount += 1\n      \
    \      }\n        }\n    }\n    if maxCount > capacity {\n        return maxCount\n\
    \    }\n    for row in grid {\n        for col in row {\n            if col ==\
    \ 0 {\n                max -= 1\n            }\n        }\n    }\n    return max",
  "    var max = 0\n    var maxIndex = 0\n    for row in grid {\n        for col in\
    \ row {\n            if col > 0 {\n                max += col\n              \
    \  if max > capacity {\n                    max = capacity\n                 \
    \   maxIndex = col.index\n                }\n            }\n        }\n    }\n\
    \    return maxIndex", "    guard capacity > 0 else {\n        return 0\n    }\n\
    \    \n    var max = 0\n    var maxIndex = 0\n    \n    for i in 0..<grid.count\
    \ {\n        for j in 0..<grid[i].count {\n            if grid[i][j] == 1 {\n\
    \                max += 1\n                if max > capacity {\n             \
    \       maxIndex = i\n                    break\n                }\n         \
    \   }\n        }\n    }\n    \n    return maxIndex", "    \n    var count = 0\n\
    \    var max = 0\n    var min = 0\n    \n    for row in grid {\n        for col\
    \ in row {\n            if col == 0 {\n                count += 1\n          \
    \      max = max(max, count)\n                min = min(min, count)\n        \
    \    }\n        }\n    }\n    \n    if capacity == 0 {\n        return 0\n   \
    \ }\n    \n    if capacity < min {\n        return capacity\n    }\n    \n   \
    \ if capacity > max {\n        return max\n    }\n    \n    return capacity",
  "    if grid.isEmpty() {\n        return 0\n    }\n    \n    var max = 0\n    var\
    \ buckets = make([][]int, capacity)\n    for row in grid {\n        for bucket\
    \ in bucket {\n            if bucket > 0 {\n                buckets[bucket][0]\
    \ = buckets[bucket][0] + 1\n                if buckets[bucket][0] > max {\n  \
    \                  max = buckets[bucket][0]\n                }\n            }\n\
    \        }\n    }\n    return max", "    guard grid.count > 0 else { return 0\
    \ }\n    guard capacity > 0 else { return 0 }\n    guard grid.count == grid[0].count\
    \ else { return 0 }\n    \n    var count = 0\n    \n    for row in 0..<grid.count\
    \ {\n        for col in 0..<grid[row].count {\n            if grid[row][col] ==\
    \ 1 {\n                count += min_fill(grid: &grid, row: row, col: col, capacity:\
    \ capacity)\n            }\n        }\n    }\n    \n    return count", "    \n\
    \    // TODO: write your code here\n    \n    return 0", "    \n    var result\
    \ = 0\n    \n    for row in 0..<grid.count {\n        for col in 0..<grid[row].count\
    \ {\n            if grid[row][col] == 1 {\n                result += capacity\n\
    \            }\n        }\n    }\n    \n    return result", "    if grid.isEmpty()\
    \ {\n        return 0\n    }\n    \n    var max = 0\n    var buckets = make([][]int,\
    \ capacity)\n    for row in grid {\n        for bucket in row {\n            buckets[bucket]++\n\
    \        }\n    }\n    for bucket in buckets {\n        if bucket > max {\n  \
    \          max = bucket\n        }\n    }\n    return max", "    \n    // Your\
    \ code here\n    \n    return 0", "    var max = 0\n    var maxCount = 0\n   \
    \ for row in grid {\n        if row[0] > max {\n            max = row[0]\n   \
    \         maxCount = 1\n        }\n        if row[0] > 0 && row[1] > 0 && row[2]\
    \ > 0 && row[3] > 0 {\n            if row[0] > max {\n                max = row[0]\n\
    \                maxCount = 1\n            }\n            if row[1] > max {\n\
    \                max = row[1]\n                maxCount = 1\n            }\n \
    \           if row[2] > max {\n                max = row[2]\n                maxCount\
    \ = 1\n            }\n            if row[3] > max {\n                max = row[3]\n\
    \                maxCount = 1\n            }\n        }\n    }\n    if maxCount\
    \ > capacity {\n        return maxCount\n    }\n    return 0", "    \n    // TODO:\
    \ implement the function\n    \n    return 0", "    \n    var count = 0\n    var\
    \ max = 0\n    \n    for row in grid {\n        for col in row {\n           \
    \ if col == 0 {\n                count += 1\n                if count > max {\n\
    \                    max = count\n                }\n            }\n        }\n\
    \    }\n    \n    return max", "    var result = 0\n    for _ in 0..<capacity\
    \ {\n        result += max_fill_helper(grid, capacity)\n    }\n    return result",
  "    if grid.isEmpty() {\n        return 0\n    }\n    \n    var max = 0\n    var\
    \ index = 0\n    var buckets = make([][]int, capacity)\n    for row in grid {\n\
    \        for col in row {\n            if col == 0 {\n                buckets[index%capacity]\
    \ = append(buckets[index%capacity], 0)\n            }\n            buckets[index%capacity][index%capacity]\
    \ = col\n            index++\n        }\n    }\n    for bucket in buckets {\n\
    \        if max < len(bucket) {\n            max = len(bucket)\n        }\n  \
    \  }\n    return max", "    \n    // write your code here\n    \n    return 0",
  "    var result = 0\n    var buckets = make([][]int, capacity)\n    for row in grid\
    \ {\n        for bucket in bucket {\n            buckets[bucket] = buckets[bucket]\
    \ + 1\n        }\n    }\n    for bucket in buckets {\n        if bucket > 0 {\n\
    \            result = max(result, bucket)\n        }\n    }\n    return result",
  "    var result = 0\n    for row in grid {\n        if row[0] == 0 {\n         \
    \   result += row[1]\n        }\n    }\n    for row in grid {\n        if row[0]\
    \ == 1 {\n            result += row[1]\n        }\n    }\n    for row in grid\
    \ {\n        if row[0] == 0 {\n            result += row[1]\n        }\n    }\n\
    \    for row in grid {\n        if row[0] == 1 {\n            result += row[1]\n\
    \        }\n    }\n    for row in grid {\n        if row[0] == 0 {\n         \
    \   result += row[1]\n        }\n    }\n    for row in grid {\n        if row[0]\
    \ == 1 {\n            result += row[1]\n        }\n    }\n    for row in grid\
    \ {\n        if row[0] == 0 {\n            result += row[1]\n        }\n    }\n\
    \    for row in grid {\n        if row[0] == 1 {\n            result += row[1]\n\
    \        }\n    }\n    for row in grid {\n        if row[0] == 0 {\n         \
    \   result += row[1]\n        }\n    }\n    for row in grid {\n        if row[0]\
    \ == 1 {\n            result += row[1]\n        }\n    }\n    for row in grid\
    \ {\n        if row[0] == 0 {\n            result += row[1]\n        }\n    }\n\
    \    for row in grid {\n        if row[0] == 1 {\n            result += row[1]\n\
    \        }\n    }\n    for row in grid {\n        if row[0] == 0 {\n         \
    \   result += row[1]\n        }\n    }\n    for row in grid {\n        if row[0]\
    \ == 1 {\n            result += row[1]\n        }\n    }\n    for row in grid\
    \ {\n        if row[0] == 0 {\n            result += row[1]\n        }\n    }\n\
    \    for row in grid {\n        if row[0] == 1 {\n            result += row[1]\n\
    \        }\n    }\n    for row in grid {\n        if row[0] == 0 {\n         \
    \   result += row[1]\n        }\n    }\n    for row in grid {\n        if row[0]\
    \ == 1 {\n            result += row[1]\n        }\n    }\n    for row in grid\
    \ {\n        if row[0] == 0 {\n            result += row[1]\n        }\n    }\n\
    \    for row in grid {\n        if row[0] == 1 {\n            result += row[1]\n\
    \        }\n    }\n    for row in grid {\n        if row[0] == 0 {\n         \
    \   result += row[1]\n        }\n    }\n    for row in grid {\n        if row[0]\
    \ == 1 {\n            result += row[1]\n        }\n    }\n    for row in grid\
    \ {\n        if row[0] == 0 {\n            result += row[1]\n        }\n    }\n\
    \    for row in grid {\n        if row[0] == 1 {\n            result += row[1]\n\
    \        }\n    }\n    for row in grid {\n        if row[0] == 0 {\n         \
    \   result += row[1]\n        }\n    }\n    for row in grid {\n        if row[0]\
    \ == 1 {\n            result += row[1]\n        }\n    }\n    for row in grid\
    \ {\n        if row[0] == 0 {\n            result += row[1]", "    \n    // write\
    \ your code here\n    \n    return 0", "    \n    // init result and counter\n\
    \    var result = 0\n    var counter = 0\n    \n    // init bucket array\n   \
    \ var buckets = [Int](capacity)\n    \n    // init bucket index\n    var bucketIndex\
    \ = 0\n    \n    // init bucket capacity\n    var bucketCapacity = 0\n    \n \
    \   // init bucket sum\n    var bucketSum = 0\n    \n    // init bucket index\n\
    \    var bucketIndex = 0\n    \n    // init bucket capacity\n    var bucketCapacity\
    \ = 0\n    \n    // init bucket sum\n    var bucketSum = 0\n    \n    // init\
    \ bucket index\n    var bucketIndex = 0\n    \n    // init bucket capacity\n \
    \   var bucketCapacity = 0\n    \n    // init bucket sum\n    var bucketSum =\
    \ 0\n    \n    // init bucket index\n    var bucketIndex = 0\n    \n    // init\
    \ bucket capacity\n    var bucketCapacity = 0\n    \n    // init bucket sum\n\
    \    var bucketSum = 0\n    \n    // init bucket index\n    var bucketIndex =\
    \ 0\n    \n    // init bucket capacity\n    var bucketCapacity = 0\n    \n   \
    \ // init bucket sum\n    var bucketSum = 0\n    \n    // init bucket index\n\
    \    var bucketIndex = 0\n    \n    // init bucket capacity\n    var bucketCapacity\
    \ = 0\n    \n    // init bucket sum\n    var bucketSum = 0\n    \n    // init\
    \ bucket index\n    var bucketIndex = 0\n    \n    // init bucket capacity\n \
    \   var bucketCapacity = 0\n    \n    // init bucket sum\n    var bucketSum =\
    \ 0\n    \n    // init bucket index\n    var bucketIndex = 0\n    \n    // init\
    \ bucket capacity\n    var bucketCapacity = 0\n    \n    // init bucket sum\n\
    \    var bucketSum = 0\n    \n    // init bucket index\n    var bucketIndex =\
    \ 0\n    \n    // init bucket capacity\n    var bucketCapacity = 0\n    \n   \
    \ // init bucket sum\n    var bucketSum = 0\n    \n    // init bucket index\n\
    \    var bucketIndex = 0\n    \n    // init bucket capacity\n    var bucketCapacity\
    \ = 0\n    \n    // init bucket sum\n    var bucketSum = 0\n    \n    // init\
    \ bucket index\n    var bucketIndex = 0\n    \n    // init bucket capacity\n \
    \   var bucketCapacity = 0\n    \n    // init bucket sum\n    var bucketSum =\
    \ 0\n    \n    // init bucket index\n    var bucketIndex = 0\n    \n    // init\
    \ bucket capacity\n    var bucketCapacity = 0\n    \n    // init bucket sum\n\
    \    var bucketSum = 0\n    \n    // init bucket index\n    var bucketIndex =\
    \ 0\n    \n    // init bucket capacity\n    var bucketCapacity = 0\n    \n   \
    \ // init bucket sum\n    var bucketSum = 0\n    \n    // init bucket index\n\
    \    var bucketIndex = 0\n    ", "    var result = 0\n    var buckets = [Int](capacity)\n\
    \    for row in grid {\n        for bucket in bucket {\n            buckets[bucket]\
    \ += 1\n        }\n    }\n    for bucket in buckets {\n        if bucket > 0 {\n\
    \            result += bucket\n        }\n    }\n    return result", "    var\
    \ result = 0\n    var buckets = make([][]int, capacity)\n    for _, row := range\
    \ grid {\n        for _, cell := range row {\n            if cell == 1 {\n   \
    \             buckets[cell%capacity]++\n            }\n        }\n    }\n    for\
    \ i := 0; i < capacity; i++ {\n        if buckets[i] != 0 {\n            result\
    \ += buckets[i]\n        }\n    }\n    return result", "    \n    // write your\
    \ code here\n    \n    return 0", "    \n    var count = 0\n    \n    for row\
    \ in grid {\n        for col in row {\n            if col == 0 {\n           \
    \     count += 1\n            }\n        }\n    }\n    \n    return count", " \
    \   if grid.isEmpty() {\n        return 0\n    }\n    \n    var max = 0\n    var\
    \ count = 0\n    \n    for row in grid {\n        if row.isEmpty() {\n       \
    \     continue\n        }\n        \n        for col in row {\n            if\
    \ col == 0 {\n                count += 1\n            } else {\n             \
    \   count = 0\n            }\n            \n            if count > max {\n   \
    \             max = count\n            }\n        }\n    }\n    \n    return max",
  "    if capacity == 0 {\n        return 0\n    }\n    \n    var max = 0\n    var\
    \ maxIndex = 0\n    \n    for row in grid {\n        if row[0] == 0 {\n      \
    \      continue\n        }\n        \n        var index = 0\n        \n      \
    \  for _ in 0..<row[0] {\n            index += 1\n        }\n        \n      \
    \  if index > max {\n            max = index\n            maxIndex = index\n \
    \       }\n    }\n    \n    for row in grid {\n        if row[0] == 0 {\n    \
    \        continue\n        }\n        \n        var index = 0\n        \n    \
    \    for _ in 0..<row[0] {\n            index += 1\n        }\n        \n    \
    \    if index > max {\n            max = index\n            maxIndex = index\n\
    \        }\n    }\n    \n    return maxIndex", "    var max = 0\n    var count\
    \ = 0\n    for row in grid {\n        for col in row {\n            if col ==\
    \ 0 {\n                count += 1\n                if count > max {\n        \
    \            max = count\n                }\n            }\n        }\n    }\n\
    \    return max", "    guard grid.count == 1 else {\n        return 0\n    }\n\
    \    \n    var max = 0\n    var maxIndex = 0\n    var maxBucket = 0\n    \n  \
    \  for i in 0..<grid[0].length {\n        for j in 0..<grid.count {\n        \
    \    if grid[j][i] == 1 {\n                max += 1\n                maxIndex\
    \ = j\n                maxBucket = i\n            }\n        }\n    }\n    \n\
    \    for i in 0..<capacity {\n        if maxBucket == i {\n            max -=\
    \ 1\n        }\n    }\n    \n    return max", "    \n    // write your code here\n\
    \    \n    return 0", "    \n    // write your code here\n    \n    return 0",
  "    \n    // write your code here\n    \n    return 0", "    \n    var count =\
    \ 0\n    \n    for row in grid {\n        var max = 0\n        for cell in row\
    \ {\n            if cell > max {\n                max = cell\n            }\n\
    \        }\n        \n        if max > capacity {\n            count += capacity\
    \ - max\n        }\n    }\n    \n    return count", "    \n    // write your code\
    \ here\n    \n    return 0", "    var result = 0\n    for row in grid {\n    \
    \    for bucket in row {\n            if bucket > capacity {\n               \
    \ result += capacity - bucket\n            } else {\n                result +=\
    \ bucket\n            }\n        }\n    }\n    return result", "    var max =\
    \ 0\n    for row in grid {\n        for col in row {\n            if col > max\
    \ {\n                max = col\n            }\n        }\n    }\n    return max",
  "    \n    // write your code here\n    \n    return 0", "    var count = 0\n  \
    \  var max = 0\n    for row in grid {\n        for col in row {\n            if\
    \ col == 0 {\n                count += 1\n                if count > max {\n \
    \                   max = count\n                }\n            }\n        }\n\
    \    }\n    return max", "    \n    // write your code here\n    \n    return\
    \ 0", "    \n    var max = 0\n    var count = 0\n    \n    for row in grid {\n\
    \        for col in row {\n            if col == 0 {\n                count +=\
    \ 1\n            } else {\n                count = 0\n            }\n        \
    \    \n            if count > max {\n                max = count\n           \
    \ }\n        }\n    }\n    \n    return max", "    var count = 0\n    for row\
    \ in grid {\n        var max = 0\n        for _ in row {\n            max += capacity\n\
    \        }\n        for _ in row {\n            max -= 1\n            if max <\
    \ 0 {\n                max = 0\n            }\n        }\n        count += max\
    \ - capacity\n    }\n    return count", "    \n    var max = 0\n    var count\
    \ = 0\n    var buckets = [Int](capacity)\n    \n    for row in grid {\n      \
    \  for col in row {\n            buckets[col]++\n        }\n    }\n    \n    for\
    \ bucket in buckets {\n        if bucket > max {\n            max = bucket\n \
    \       }\n    }\n    \n    for bucket in buckets {\n        if bucket < max {\n\
    \            count += bucket - max\n        }\n    }\n    \n    return count",
  "    if grid.isEmpty() {\n        return 0\n    }\n    \n    var max = 0\n    var\
    \ index = 0\n    \n    for row in grid {\n        for col in row {\n         \
    \   if col == 0 {\n                index++\n            }\n        }\n       \
    \ \n        if index > max {\n            max = index\n        }\n        index\
    \ = 0\n    }\n    \n    return max", "    var result = 0\n    for row in grid\
    \ {\n        for bucket in row {\n            if bucket > capacity {\n       \
    \         result += capacity - bucket\n            } else {\n                result\
    \ += bucket\n            }\n        }\n    }\n    return result", "    var max\
    \ = 0\n    var maxIndex = 0\n    var index = 0\n    for row in grid {\n      \
    \  if row[0] == 0 {\n            max = row[0]\n            maxIndex = index\n\
    \        }\n        index += 1\n    }\n    for row in grid {\n        if row[0]\
    \ == 0 {\n            max = row[0]\n            maxIndex = index\n        }\n\
    \        index += 1\n    }\n    for row in grid {\n        if row[0] == 0 {\n\
    \            max = row[0]\n            maxIndex = index\n        }\n        index\
    \ += 1\n    }\n    for row in grid {\n        if row[0] == 0 {\n            max\
    \ = row[0]\n            maxIndex = index\n        }\n        index += 1\n    }\n\
    \    for row in grid {\n        if row[0] == 0 {\n            max = row[0]\n \
    \           maxIndex = index\n        }\n        index += 1\n    }\n    for row\
    \ in grid {\n        if row[0] == 0 {\n            max = row[0]\n            maxIndex\
    \ = index\n        }\n        index += 1\n    }\n    for row in grid {\n     \
    \   if row[0] == 0 {\n            max = row[0]\n            maxIndex = index\n\
    \        }\n        index += 1\n    }\n    for row in grid {\n        if row[0]\
    \ == 0 {\n            max = row[0]\n            maxIndex = index\n        }\n\
    \        index += 1\n    }\n    for row in grid {\n        if row[0] == 0 {\n\
    \            max = row[0]\n            maxIndex = index\n        }\n        index\
    \ += 1\n    }\n    for row in grid {\n        if row[0] == 0 {\n            max\
    \ = row[0]\n            maxIndex = index\n        }\n        index += 1\n    }\n\
    \    for row in grid {\n        if row[0] == 0 {\n            max = row[0]\n \
    \           maxIndex = index\n        }\n        index += 1\n    }\n    for row\
    \ in grid {\n        if row[0] == 0 {\n            max = row[0]\n            maxIndex\
    \ = index\n        }\n        index += 1\n    }\n    for row in grid {\n     \
    \   if row[0] == 0 {\n            max = row[0]\n            maxIndex = index\n\
    \        }\n        index += 1\n    }\n    for row in grid {\n        if row[0]\
    \ == 0 {\n            max = row[0]\n            maxIndex = index\n        }\n\
    \        index += 1\n    }\n    for row in grid {\n        if row[0] == 0 {\n\
    \            max = row[0]\n            maxIndex = index\n        }\n        index\
    \ += 1\n    }\n    for row in grid {\n        if row[0] == 0 {\n            max\
    \ = row[0]\n            maxIndex = index\n        }\n        index += 1\n    }\n\
    \    for row in grid {\n        if row[0] == 0 {\n            max = row[0]\n \
    \           maxIndex = index\n        }\n        index += 1\n    }\n    for row\
    \ in grid {\n        if row[0] == 0 {\n            max = row[0]\n            maxIndex\
    \ = index\n        }\n        index += 1\n    }\n    for row in grid {\n     \
    \   if row[0] == 0 {\n            max = row", "    var result = 0\n    var min\
    \ = 0\n    for row in grid {\n        var minRow = row[0]\n        var maxRow\
    \ = row[0]\n        for cell in row {\n            if cell > maxRow {\n      \
    \          maxRow = cell\n            }\n            if cell < minRow {\n    \
    \            minRow = cell\n            }\n        }\n        if maxRow - minRow\
    \ > capacity {\n            result += capacity - maxRow + minRow - min\n     \
    \   }\n    }\n    return result", "    var result = 0\n    var minCapacity = capacity\n\
    \    for row in grid {\n        for col in row {\n            if col == 1 {\n\
    \                minCapacity = minCapacity - 1\n            }\n        }\n   \
    \ }\n    for row in grid {\n        for col in row {\n            if col == 1\
    \ {\n                result += minCapacity\n            }\n        }\n    }\n\
    \    return result", "    if capacity == 0 {\n        return 0\n    }\n    \n\
    \    var max = 0\n    var buckets = make([][]int, capacity)\n    \n    for row\
    \ in grid {\n        for bucket in bucket {\n            if bucket > 0 {\n   \
    \             buckets[bucket]++\n            }\n        }\n    }\n    \n    for\
    \ bucket in buckets {\n        if bucket > max {\n            max = bucket\n \
    \       }\n    }\n    \n    return max", "    if capacity <= 0 {\n        return\
    \ 0\n    }\n    var max = 0\n    var count = 0\n    for row in grid {\n      \
    \  if row[0] > max {\n            max = row[0]\n        }\n        if row[1] >\
    \ max {\n            max = row[1]\n        }\n        if row[2] > max {\n    \
    \        max = row[2]\n        }\n        if row[3] > max {\n            max =\
    \ row[3]\n        }\n    }\n    for row in grid {\n        if row[0] > max {\n\
    \            max = row[0]\n        }\n        if row[1] > max {\n            max\
    \ = row[1]\n        }\n        if row[2] > max {\n            max = row[2]\n \
    \       }\n        if row[3] > max {\n            max = row[3]\n        }\n  \
    \  }\n    for row in grid {\n        if row[0] > max {\n            max = row[0]\n\
    \        }\n        if row[1] > max {\n            max = row[1]\n        }\n \
    \       if row[2] > max {\n            max = row[2]\n        }\n        if row[3]\
    \ > max {\n            max = row[3]\n        }\n    }\n    for row in grid {\n\
    \        if row[0] > max {\n            max = row[0]\n        }\n        if row[1]\
    \ > max {\n            max = row[1]\n        }\n        if row[2] > max {\n  \
    \          max = row[2]\n        }\n        if row[3] > max {\n            max\
    \ = row[3]\n        }\n    }\n    for row in grid {\n        if row[0] > max {\n\
    \            max = row[0]\n        }\n        if row[1] > max {\n            max\
    \ = row[1]\n        }\n        if row[2] > max {\n            max = row[2]\n \
    \       }\n        if row[3] > max {\n            max = row[3]\n        }\n  \
    \  }\n    for row in grid {\n        if row[0] > max {\n            max = row[0]\n\
    \        }\n        if row[1] > max {\n            max = row[1]\n        }\n \
    \       if row[2] > max {\n            max = row[2]\n        }\n        if row[3]\
    \ > max {\n            max = row[3]\n        }\n    }\n    for row in grid {\n\
    \        if row[0] > max {\n            max = row[0]\n        }\n        if row[1]\
    \ > max {\n            max = row[1]\n        }\n        if row[2] > max {\n  \
    \          max = row[2]\n        }\n        if row[3] > max {\n            max\
    \ = row[3]\n        }\n    }\n    for row in grid {\n        if row[0] > max {\n\
    \            max = row[0]\n        }\n        if row[1] > max {\n            max\
    \ = row[1]\n        }\n        if row[2] > max {\n            max = row[2]\n \
    \       }\n        if row[3] > max {\n            ", "    \n    var max = 0\n\
    \    var maxCount = 0\n    var buckets = [Int](capacity)\n    \n    for row in\
    \ grid {\n        for col in row {\n            if col == 1 {\n              \
    \  buckets[col-1] += 1\n            }\n        }\n    }\n    \n    for bucket\
    \ in buckets {\n        if bucket > max {\n            max = bucket\n        \
    \    maxCount = 1\n        } else {\n            if bucket == max {\n        \
    \        maxCount += 1\n            }\n        }\n    }\n    \n    return maxCount",
  "    guard grid.count == 1 else {\n        return 0\n    }\n    \n    var max =\
    \ 0\n    var count = 0\n    \n    for row in grid {\n        for col in row {\n\
    \            if col == 0 {\n                count += 1\n            } else {\n\
    \                count = 0\n            }\n            \n            if count\
    \ > max {\n                max = count\n            }\n        }\n    }\n    \n\
    \    return max", "    var max = 0\n    for row in grid {\n        for col in\
    \ row {\n            if col == 0 {\n                max += capacity\n        \
    \    } else {\n                max += col\n            }\n        }\n    }\n \
    \   return max", "    guard grid.count == 1 else {\n        return -1\n    }\n\
    \    \n    var max = 0\n    var bucket = [0]\n    \n    for row in grid {\n  \
    \      if row[0] == 0 {\n            bucket[0] += capacity\n        } else {\n\
    \            bucket[0] -= capacity\n        }\n        \n        if bucket[0]\
    \ > max {\n            max = bucket[0]\n        }\n    }\n    \n    return max",
  "    if grid.isEmpty {\n        return 0\n    }\n    \n    var max = 0\n    var\
    \ buckets = make([]*Int, capacity)\n    for row in grid {\n        buckets[row[0]]\
    \ = row[1]\n        max = max(max, row[1])\n    }\n    \n    for bucket in buckets\
    \ {\n        if bucket > 0 {\n            bucket = bucket - 1\n        }\n   \
    \     max = max(max, bucket)\n    }\n    return max"]
stop_tokens:
- "\n}"
