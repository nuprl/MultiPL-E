language: swift
name: HumanEval_160_do_algebra
results:
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Invalid operator\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp1965_ov2.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmp1965_ov2.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operandValue = operand[index]\n        let operatorValue = operator[index]\n\
    \        switch operatorValue {\n        case \"+\":\n            result += operandValue\n\
    \        case \"-\":\n            result -= operandValue\n        case \"*\":\n\
    \            result *= operandValue\n        case \"//\":\n            result\
    \ /= operandValue\n        case \"**\":\n            result **= operandValue\n\
    \        default:\n            fatalError(\"Invalid operator: \\(operatorValue)\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpt2xyu_ur.swift:24:29: error: expected initial value after '='\n\
    \        let operatorValue = operator[index]\n                            ^\n\
    /tmp/tmpt2xyu_ur.swift:24:28: error: consecutive statements on a line must be\
    \ separated by ';'\n        let operatorValue = operator[index]\n            \
    \               ^\n                           ;\n/tmp/tmpt2xyu_ur.swift:24:37:\
    \ error: '[' is not allowed in operator names\n        let operatorValue = operator[index]\n\
    \                                    ^\n/tmp/tmpt2xyu_ur.swift:35:20: error: cannot\
    \ find operator '**=' in scope\n            result **= operandValue\n        \
    \           ^~~\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    \n    // Initialize result to 0\n  \
    \  var result = 0\n    \n    // Loop through each operator in operator array\n\
    \    for index in 0..<operator.count {\n        \n        // Initialize operator\
    \ to current operator\n        let operator = operator[index]\n        \n    \
    \    // Initialize operand to current operand\n        let operand = operand[index]\n\
    \        \n        // Evaluate current operator and operand\n        switch operator\
    \ {\n        case \"+\":\n            result += operand\n        case \"-\":\n\
    \            result -= operand\n        case \"*\":\n            result *= operand\n\
    \        case \"//\":\n            result /= operand\n        case \"**\":\n \
    \           result **= operand\n        default:\n            fatalError(\"Invalid\
    \ operator: \\(operator)\")\n        }\n    }\n    \n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp424gdxl9.swift:26:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmp424gdxl9.swift:26:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmp424gdxl9.swift:29:13: error: keyword 'operator'\
    \ cannot be used as an identifier here\n        let operator = operator[index]\n\
    \            ^\n/tmp/tmp424gdxl9.swift:29:13: note: if this name is unavoidable,\
    \ use backticks to escape it\n        let operator = operator[index]\n       \
    \     ^~~~~~~~\n            `operator`\n/tmp/tmp424gdxl9.swift:29:24: error: expected\
    \ initial value after '='\n        let operator = operator[index]\n          \
    \             ^\n/tmp/tmp424gdxl9.swift:29:23: error: consecutive statements on\
    \ a line must be separated by ';'\n        let operator = operator[index]\n  \
    \                    ^\n                      ;\n/tmp/tmp424gdxl9.swift:29:32:\
    \ error: '[' is not allowed in operator names\n        let operator = operator[index]\n\
    \                               ^\n/tmp/tmp424gdxl9.swift:35:16: error: expected\
    \ expression in 'switch' statement\n        switch operator {\n              \
    \ ^\n/tmp/tmp424gdxl9.swift:35:25: error: expected operator name in operator declaration\n\
    \        switch operator {\n                        ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operator.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpdkmv50cu.swift:22:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmpdkmv50cu.swift:22:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmpdkmv50cu.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[index] {\n               ^\n\
    /tmp/tmpdkmv50cu.swift:23:24: error: '[' is not allowed in operator names\n  \
    \      switch operator[index] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operator.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpdkmv50cu.swift:22:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmpdkmv50cu.swift:22:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmpdkmv50cu.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[index] {\n               ^\n\
    /tmp/tmpdkmv50cu.swift:23:24: error: '[' is not allowed in operator names\n  \
    \      switch operator[index] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    \n    for index\
    \ in 0..<operand.count {\n        switch operator[index] {\n        case \"+\"\
    :\n            result += operand[index]\n        case \"-\":\n            result\
    \ -= operand[index]\n        case \"*\":\n            result *= operand[index]\n\
    \        case \"//\":\n            result /= operand[index]\n        case \"**\"\
    :\n            result **= operand[index]\n        default:\n            fatalError(\"\
    Invalid operator: \\(operator[index])\")\n        }\n    }\n    \n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp5oghacey.swift:24:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmp5oghacey.swift:24:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operator.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Invalid operator:\
    \ \\(operator[index])\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmponvtmv4p.swift:22:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmponvtmv4p.swift:22:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmponvtmv4p.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[index] {\n               ^\n\
    /tmp/tmponvtmv4p.swift:23:24: error: '[' is not allowed in operator names\n  \
    \      switch operator[index] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmppwepw1fj.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmppwepw1fj.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operator.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpdkmv50cu.swift:22:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmpdkmv50cu.swift:22:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmpdkmv50cu.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[index] {\n               ^\n\
    /tmp/tmpdkmv50cu.swift:23:24: error: '[' is not allowed in operator names\n  \
    \      switch operator[index] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Unknown operator:\
    \ \\(operator[index])\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpbzmu7h7m.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmpbzmu7h7m.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    var i = 0\n    for\
    \ _ in 0..<operand.count {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i]\n        case \"-\":\n            result -=\
    \ operand[i]\n        case \"*\":\n            result *= operand[i]\n        case\
    \ \"//\":\n            result /= operand[i]\n        case \"**\":\n          \
    \  result **= operand[i]\n        default:\n            fatalError(\"Invalid operator:\
    \ \\(operator[i])\")\n        }\n        i += 1\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwpbgvyl0.swift:24:16: error: expected expression in 'switch' statement\n\
    \        switch operator[i] {\n               ^\n/tmp/tmpwpbgvyl0.swift:24:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Invalid operator:\
    \ \\(operator[index])\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpx08dahp1.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmpx08dahp1.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operandValue = operand[index]\n        switch operator[index]\
    \ {\n        case \"+\":\n            result += operandValue\n        case \"\
    -\":\n            result -= operandValue\n        case \"*\":\n            result\
    \ *= operandValue\n        case \"//\":\n            result /= operandValue\n\
    \        case \"**\":\n            result **= operandValue\n        default:\n\
    \            fatalError(\"Invalid operator\")\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp229u5yp3.swift:24:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmp229u5yp3.swift:24:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Invalid operator\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp1965_ov2.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmp1965_ov2.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmppwepw1fj.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmppwepw1fj.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    var i = 0\n    var\
    \ j = 0\n    var k = 0\n    var operator_index = 0\n    var operand1_index = 0\n\
    \    var operand2_index = 0\n    var operator_index2 = 0\n    var operand1 = 0\n\
    \    var operand2 = 0\n    var operator = \"\"\n    var operator2 = \"\"\n   \
    \ var operator_index2 = -1\n    var operand1_index2 = -1\n    var operand2_index2\
    \ = -1\n    var operator_index3 = -1\n    var operand1_index3 = -1\n    var operand2_index3\
    \ = -1\n    var operator_index4 = -1\n    var operand1_index4 = -1\n    var operand2_index4\
    \ = -1\n    var operator_index5 = -1\n    var operand1_index5 = -1\n    var operand2_index5\
    \ = -1\n    var operator_index6 = -1\n    var operand1_index6 = -1\n    var operand2_index6\
    \ = -1\n    var operator_index7 = -1\n    var operand1_index7 = -1\n    var operand2_index7\
    \ = -1\n    var operator_index8 = -1\n    var operand1_index8 = -1\n    var operand2_index8\
    \ = -1\n    var operator_index9 = -1\n    var operand1_index9 = -1\n    var operand2_index9\
    \ = -1\n    var operator_index10 = -1\n    var operand1_index10 = -1\n    var\
    \ operand2_index10 = -1\n    var operator_index11 = -1\n    var operand1_index11\
    \ = -1\n    var operand2_index11 = -1\n    var operator_index12 = -1\n    var\
    \ operand1_index12 = -1\n    var operand2_index12 = -1\n    var operator_index13\
    \ = -1\n    var operand1_index13 = -1\n    var operand2_index13 = -1\n    var\
    \ operator_index14 = -1\n    var operand1_index14 = -1\n    var operand2_index14\
    \ = -1\n    var operator_index15 = -1\n    var operand1_index15 = -1\n    var\
    \ operand2_index15 = -1\n    var operator_index16 = -1\n    var operand1_index16\
    \ = -1\n    var operand2_index16 = -1\n    var operator_index17 = -1\n    var\
    \ operand1_index17 = -1\n    var operand2_index17 = -1\n    var operator_index18\
    \ = -1\n    var operand1_index18 = -1\n    var operand2_index18 = -1\n    var\
    \ operator_index19 = -1\n    var operand1_index19 = -1\n    var operand2_index19\
    \ = -1\n    var operator_index20 = -1\n    var operand1_index20 = -1\n    var\
    \ operand2_index20 = -1\n    var operator_index21 = -1\n    var operand1_index21\
    \ = -1\n    var operand2_index21 = -1\n    var operator_index22 = -1\n    var\
    \ operand1_index22 = -1\n    var operand2_index22 = -1\n    var operator_index23\
    \ = -1\n    var operand1_index23 = -1\n    var operand2_index23 = -1\n    var\
    \ operator_index24 = -1\n    var operand1_index24 = -1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpfavlc1tl.swift:31:9: error: keyword 'operator' cannot be used as\
    \ an identifier here\n    var operator = \"\"\n        ^\n/tmp/tmpfavlc1tl.swift:31:9:\
    \ note: if this name is unavoidable, use backticks to escape it\n    var operator\
    \ = \"\"\n        ^~~~~~~~\n        `operator`\n/tmp/tmpfavlc1tl.swift:33:9: error:\
    \ invalid redeclaration of 'operator_index2'\n    var operator_index2 = -1\n \
    \       ^\n/tmp/tmpfavlc1tl.swift:28:9: note: 'operator_index2' previously declared\
    \ here\n    var operator_index2 = 0\n        ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    var i = 0\n    for\
    \ _ in 0..<operand.count {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i]\n        case \"-\":\n            result -=\
    \ operand[i]\n        case \"*\":\n            result *= operand[i]\n        case\
    \ \"//\":\n            result /= operand[i]\n        case \"**\":\n          \
    \  result **= operand[i]\n        default:\n            fatalError(\"Unknown operator:\
    \ \\(operator[i])\")\n        }\n        i += 1\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp65trm6rp.swift:24:16: error: expected expression in 'switch' statement\n\
    \        switch operator[i] {\n               ^\n/tmp/tmp65trm6rp.swift:24:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    var i = 0\n    while\
    \ i < operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i]\n        case \"-\":\n            result -= operand[i]\n\
    \        case \"*\":\n            result *= operand[i]\n        case \"//\":\n\
    \            result /= operand[i]\n        case \"**\":\n            result **=\
    \ operand[i]\n        default:\n            break\n        }\n        i += 1\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpfhrfddo0.swift:23:15: error: expected expression after operator\n\
    \    while i < operator.count {\n              ^\n/tmp/tmpfhrfddo0.swift:23:23:\
    \ error: '.' is not allowed in operator names\n    while i < operator.count {\n\
    \                      ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Invalid operator\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp1965_ov2.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmp1965_ov2.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    var i = 0\n    for\
    \ _ in 0..<operand.count {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i]\n        case \"-\":\n            result -=\
    \ operand[i]\n        case \"*\":\n            result *= operand[i]\n        case\
    \ \"//\":\n            result /= operand[i]\n        case \"**\":\n          \
    \  result **= operand[i]\n        default:\n            break\n        }\n   \
    \     i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp1sxj0sgl.swift:24:16: error: expected expression in 'switch' statement\n\
    \        switch operator[i] {\n               ^\n/tmp/tmp1sxj0sgl.swift:24:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let value = operand[index]\n        let operator = operator[index]\n\
    \        switch operator {\n        case \"+\":\n            result += value\n\
    \        case \"-\":\n            result -= value\n        case \"*\":\n     \
    \       result *= value\n        case \"//\":\n            result /= value\n \
    \       case \"**\":\n            result **= value\n        default:\n       \
    \     fatalError(\"Invalid operator\")\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpzetj554c.swift:24:13: error: keyword 'operator' cannot be used\
    \ as an identifier here\n        let operator = operator[index]\n            ^\n\
    /tmp/tmpzetj554c.swift:24:13: note: if this name is unavoidable, use backticks\
    \ to escape it\n        let operator = operator[index]\n            ^~~~~~~~\n\
    \            `operator`\n/tmp/tmpzetj554c.swift:24:24: error: expected initial\
    \ value after '='\n        let operator = operator[index]\n                  \
    \     ^\n/tmp/tmpzetj554c.swift:24:23: error: consecutive statements on a line\
    \ must be separated by ';'\n        let operator = operator[index]\n         \
    \             ^\n                      ;\n/tmp/tmpzetj554c.swift:24:32: error:\
    \ '[' is not allowed in operator names\n        let operator = operator[index]\n\
    \                               ^\n/tmp/tmpzetj554c.swift:25:16: error: expected\
    \ expression in 'switch' statement\n        switch operator {\n              \
    \ ^\n/tmp/tmpzetj554c.swift:25:25: error: expected operator name in operator declaration\n\
    \        switch operator {\n                        ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operation = operator[index]\n        let operand1 = operand[index]\n\
    \        let operand2 = operand[index + 1]\n        switch operation {\n     \
    \   case \"+\":\n            result += operand1\n        case \"-\":\n       \
    \     result -= operand1\n        case \"*\":\n            result *= operand1\n\
    \        case \"//\":\n            result /= operand1\n        case \"**\":\n\
    \            result **= operand1\n        default:\n            fatalError(\"\
    Unknown operation: \\(operation)\")\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp0d42uolr.swift:23:25: error: expected initial value after '='\n\
    \        let operation = operator[index]\n                        ^\n/tmp/tmp0d42uolr.swift:23:24:\
    \ error: consecutive statements on a line must be separated by ';'\n        let\
    \ operation = operator[index]\n                       ^\n                    \
    \   ;\n/tmp/tmp0d42uolr.swift:23:33: error: '[' is not allowed in operator names\n\
    \        let operation = operator[index]\n                                ^\n\
    /tmp/tmp0d42uolr.swift:36:20: error: cannot find operator '**=' in scope\n   \
    \         result **= operand1\n                   ^~~\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operator.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpdkmv50cu.swift:22:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmpdkmv50cu.swift:22:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmpdkmv50cu.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[index] {\n               ^\n\
    /tmp/tmpdkmv50cu.swift:23:24: error: '[' is not allowed in operator names\n  \
    \      switch operator[index] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmppwepw1fj.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmppwepw1fj.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operand1 = operand[index]\n        let operand2 = operand[index\
    \ + 1]\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand1\n        case \"-\":\n            result -= operand1\n        case\
    \ \"*\":\n            result *= operand1\n        case \"//\":\n            result\
    \ /= operand1\n        case \"**\":\n            result **= operand1\n       \
    \ default:\n            fatalError(\"Invalid operator\")\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmptjrg3don.swift:25:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmptjrg3don.swift:25:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operator.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Invalid operator\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp220cir9b.swift:22:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmp220cir9b.swift:22:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmp220cir9b.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[index] {\n               ^\n\
    /tmp/tmp220cir9b.swift:23:24: error: '[' is not allowed in operator names\n  \
    \      switch operator[index] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"unknown operator\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmptx7n9kka.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmptx7n9kka.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Unknown operator:\
    \ \\(operator[index])\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpbzmu7h7m.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmpbzmu7h7m.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operandValue = operand[index]\n        let operatorValue = operator[index]\n\
    \        switch operatorValue {\n        case \"+\":\n            result += operandValue\n\
    \        case \"-\":\n            result -= operandValue\n        case \"*\":\n\
    \            result *= operandValue\n        case \"//\":\n            result\
    \ /= operandValue\n        case \"**\":\n            result **= operandValue\n\
    \        default:\n            break\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpmwif7tdr.swift:24:29: error: expected initial value after '='\n\
    \        let operatorValue = operator[index]\n                            ^\n\
    /tmp/tmpmwif7tdr.swift:24:28: error: consecutive statements on a line must be\
    \ separated by ';'\n        let operatorValue = operator[index]\n            \
    \               ^\n                           ;\n/tmp/tmpmwif7tdr.swift:24:37:\
    \ error: '[' is not allowed in operator names\n        let operatorValue = operator[index]\n\
    \                                    ^\n/tmp/tmpmwif7tdr.swift:35:20: error: cannot\
    \ find operator '**=' in scope\n            result **= operandValue\n        \
    \           ^~~\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    var i = 0\n    for\
    \ _ in 0..<operand.count {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i]\n        case \"-\":\n            result -=\
    \ operand[i]\n        case \"*\":\n            result *= operand[i]\n        case\
    \ \"//\":\n            result /= operand[i]\n        case \"**\":\n          \
    \  result **= operand[i]\n        default:\n            break\n        }\n   \
    \     i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp1sxj0sgl.swift:24:16: error: expected expression in 'switch' statement\n\
    \        switch operator[i] {\n               ^\n/tmp/tmp1sxj0sgl.swift:24:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result: Int = 0\n    for index in\
    \ 0..<operand.count {\n        switch operator[index] {\n        case \"+\":\n\
    \            result += operand[index]\n        case \"-\":\n            result\
    \ -= operand[index]\n        case \"*\":\n            result *= operand[index]\n\
    \        case \"//\":\n            result /= operand[index]\n        case \"**\"\
    :\n            result **= operand[index]\n        default:\n            fatalError(\"\
    Invalid operator: \\(operator[index])\")\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpcdoqdjx8.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmpcdoqdjx8.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result: Int = 0\n    var index =\
    \ 0\n    while index < operator.count {\n        switch operator[index] {\n  \
    \      case \"+\":\n            result += operand[index]\n        case \"-\":\n\
    \            result -= operand[index]\n        case \"*\":\n            result\
    \ *= operand[index]\n        case \"//\":\n            result /= operand[index]\n\
    \        case \"**\":\n            result **= operand[index]\n        default:\n\
    \            fatalError(\"Unexpected operator: \\(operator[index])\")\n      \
    \  }\n        index += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpunocscx1.swift:23:19: error: expected expression after operator\n\
    \    while index < operator.count {\n                  ^\n/tmp/tmpunocscx1.swift:23:27:\
    \ error: '.' is not allowed in operator names\n    while index < operator.count\
    \ {\n                          ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmppwepw1fj.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmppwepw1fj.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operandValue = operand[index]\n        let operatorValue = operator[index]\n\
    \        switch operatorValue {\n        case \"+\":\n            result += operandValue\n\
    \        case \"-\":\n            result -= operandValue\n        case \"*\":\n\
    \            result *= operandValue\n        case \"//\":\n            result\
    \ /= operandValue\n        case \"**\":\n            result **= operandValue\n\
    \        default:\n            fatalError(\"Unknown operator: \\(operatorValue)\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpih3_926s.swift:24:29: error: expected initial value after '='\n\
    \        let operatorValue = operator[index]\n                            ^\n\
    /tmp/tmpih3_926s.swift:24:28: error: consecutive statements on a line must be\
    \ separated by ';'\n        let operatorValue = operator[index]\n            \
    \               ^\n                           ;\n/tmp/tmpih3_926s.swift:24:37:\
    \ error: '[' is not allowed in operator names\n        let operatorValue = operator[index]\n\
    \                                    ^\n/tmp/tmpih3_926s.swift:35:20: error: cannot\
    \ find operator '**=' in scope\n            result **= operandValue\n        \
    \           ^~~\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Invalid operator\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp1965_ov2.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmp1965_ov2.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    var i = 0\n    for\
    \ _ in 0..<operand.count {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i]\n        case \"-\":\n            result -=\
    \ operand[i]\n        case \"*\":\n            result *= operand[i]\n        case\
    \ \"//\":\n            result /= operand[i]\n        case \"**\":\n          \
    \  result **= operand[i]\n        default:\n            fatalError(\"Invalid operator\"\
    )\n        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpxzg72_at.swift:24:16: error: expected expression in 'switch' statement\n\
    \        switch operator[i] {\n               ^\n/tmp/tmpxzg72_at.swift:24:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operandValue = operand[index]\n        let operatorValue = operator[index]\n\
    \        switch operatorValue {\n        case \"+\":\n            result += operandValue\n\
    \        case \"-\":\n            result -= operandValue\n        case \"*\":\n\
    \            result *= operandValue\n        case \"//\":\n            result\
    \ /= operandValue\n        case \"**\":\n            result **= operandValue\n\
    \        default:\n            fatalError(\"Invalid operator\")\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpnfzxpyrg.swift:24:29: error: expected initial value after '='\n\
    \        let operatorValue = operator[index]\n                            ^\n\
    /tmp/tmpnfzxpyrg.swift:24:28: error: consecutive statements on a line must be\
    \ separated by ';'\n        let operatorValue = operator[index]\n            \
    \               ^\n                           ;\n/tmp/tmpnfzxpyrg.swift:24:37:\
    \ error: '[' is not allowed in operator names\n        let operatorValue = operator[index]\n\
    \                                    ^\n/tmp/tmpnfzxpyrg.swift:35:20: error: cannot\
    \ find operator '**=' in scope\n            result **= operandValue\n        \
    \           ^~~\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Invalid operator\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp1965_ov2.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmp1965_ov2.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result: Int = 0\n    for index in\
    \ 0..<operator.count {\n        switch operator[index] {\n        case \"+\":\n\
    \            result += operand[index]\n        case \"-\":\n            result\
    \ -= operand[index]\n        case \"*\":\n            result *= operand[index]\n\
    \        case \"//\":\n            result /= operand[index]\n        case \"**\"\
    :\n            result *= operand[index]\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp4l26br4r.swift:22:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmp4l26br4r.swift:22:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmp4l26br4r.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[index] {\n               ^\n\
    /tmp/tmp4l26br4r.swift:23:24: error: '[' is not allowed in operator names\n  \
    \      switch operator[index] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Invalid operator:\
    \ \\(operator[index])\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpx08dahp1.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmpx08dahp1.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operandValue = operand[index]\n        let operatorValue = operator[index]\n\
    \        switch operatorValue {\n        case \"+\":\n            result += operandValue\n\
    \        case \"-\":\n            result -= operandValue\n        case \"*\":\n\
    \            result *= operandValue\n        case \"//\":\n            result\
    \ /= operandValue\n        case \"**\":\n            result **= operandValue\n\
    \        default:\n            fatalError(\"Invalid operator\")\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpnfzxpyrg.swift:24:29: error: expected initial value after '='\n\
    \        let operatorValue = operator[index]\n                            ^\n\
    /tmp/tmpnfzxpyrg.swift:24:28: error: consecutive statements on a line must be\
    \ separated by ';'\n        let operatorValue = operator[index]\n            \
    \               ^\n                           ;\n/tmp/tmpnfzxpyrg.swift:24:37:\
    \ error: '[' is not allowed in operator names\n        let operatorValue = operator[index]\n\
    \                                    ^\n/tmp/tmpnfzxpyrg.swift:35:20: error: cannot\
    \ find operator '**=' in scope\n            result **= operandValue\n        \
    \           ^~~\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result: Int = 0\n    var stack =\
    \ [Int]()\n    for _ in 0..<operand.count {\n        stack.append(0)\n    }\n\
    \    for _ in 0..<operator.count {\n        stack.append(0)\n    }\n    for _\
    \ in 0..<operand.count {\n        switch operator[stack.count - 1] {\n       \
    \ case \"+\":\n            stack[stack.count - 1] += operand[stack.count - 1]\n\
    \        case \"-\":\n            stack[stack.count - 1] -= operand[stack.count\
    \ - 1]\n        case \"*\":\n            stack[stack.count - 1] *= operand[stack.count\
    \ - 1]\n        case \"//\":\n            stack[stack.count - 1] /= operand[stack.count\
    \ - 1]\n        case \"**\":\n            stack[stack.count - 1] **= operand[stack.count\
    \ - 1]\n        default:\n            break\n        }\n    }\n    result = stack[stack.count\
    \ - 1]\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpq2edbuf_.swift:26:18: error: expected expression after operator\n\
    \    for _ in 0..<operator.count {\n                 ^\n/tmp/tmpq2edbuf_.swift:26:18:\
    \ error: expected '{' to start the body of for-each loop\n    for _ in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpq2edbuf_.swift:30:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[stack.count - 1] {\n        \
    \       ^\n/tmp/tmpq2edbuf_.swift:30:24: error: '[' is not allowed in operator\
    \ names\n        switch operator[stack.count - 1] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    \n    for index\
    \ in 0..<operand.count {\n        switch operator[index] {\n        case \"+\"\
    :\n            result += operand[index]\n        case \"-\":\n            result\
    \ -= operand[index]\n        case \"*\":\n            result *= operand[index]\n\
    \        case \"//\":\n            result /= operand[index]\n        case \"**\"\
    :\n            result **= operand[index]\n        default:\n            break\n\
    \        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4,\
    \ 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2,\
    \ 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3,\
    \ 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpt270xmr0.swift:24:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmpt270xmr0.swift:24:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    \n    var result = 0\n    \n    for\
    \ index in 0..<operator.count {\n        switch operator[index] {\n        case\
    \ \"+\":\n            result += operand[index]\n        case \"-\":\n        \
    \    result -= operand[index]\n        case \"*\":\n            result *= operand[index]\n\
    \        case \"//\":\n            result /= operand[index]\n        case \"**\"\
    :\n            result **= operand[index]\n        default:\n            fatalError(\"\
    Unknown operator: \\(operator[index])\")\n        }\n    }\n    \n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp4ntqu_to.swift:24:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmp4ntqu_to.swift:24:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmp4ntqu_to.swift:25:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[index] {\n               ^\n\
    /tmp/tmp4ntqu_to.swift:25:24: error: '[' is not allowed in operator names\n  \
    \      switch operator[index] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operandValue = operand[index]\n        let operatorValue = operator[index]\n\
    \        switch operatorValue {\n        case \"+\":\n            result += operandValue\n\
    \        case \"-\":\n            result -= operandValue\n        case \"*\":\n\
    \            result *= operandValue\n        case \"//\":\n            result\
    \ /= operandValue\n        case \"**\":\n            result **= operandValue\n\
    \        default:\n            fatalError(\"Invalid operator: \\(operatorValue)\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpt2xyu_ur.swift:24:29: error: expected initial value after '='\n\
    \        let operatorValue = operator[index]\n                            ^\n\
    /tmp/tmpt2xyu_ur.swift:24:28: error: consecutive statements on a line must be\
    \ separated by ';'\n        let operatorValue = operator[index]\n            \
    \               ^\n                           ;\n/tmp/tmpt2xyu_ur.swift:24:37:\
    \ error: '[' is not allowed in operator names\n        let operatorValue = operator[index]\n\
    \                                    ^\n/tmp/tmpt2xyu_ur.swift:35:20: error: cannot\
    \ find operator '**=' in scope\n            result **= operandValue\n        \
    \           ^~~\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Unknown operator:\
    \ \\(operator[index])\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpbzmu7h7m.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmpbzmu7h7m.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    var i = 0\n    var\
    \ j = 0\n    var operator_index = 0\n    var operand1_index = 0\n    var operand2_index\
    \ = 0\n    var operator_string = \"\"\n    var operand1_string = \"\"\n    var\
    \ operand2_string = \"\"\n    var operator_string_index = 0\n    var operand1_string_index\
    \ = 0\n    var operand2_string_index = 0\n    var operator_string_index2 = 0\n\
    \    var operand1_string_index2 = 0\n    var operand2_string_index2 = 0\n    var\
    \ operator_string_index3 = 0\n    var operand1_string_index3 = 0\n    var operand2_string_index3\
    \ = 0\n    var operator_string_index4 = 0\n    var operand1_string_index4 = 0\n\
    \    var operand2_string_index4 = 0\n    var operator_string_index5 = 0\n    var\
    \ operand1_string_index5 = 0\n    var operand2_string_index5 = 0\n    var operator_string_index6\
    \ = 0\n    var operand1_string_index6 = 0\n    var operand2_string_index6 = 0\n\
    \    var operator_string_index7 = 0\n    var operand1_string_index7 = 0\n    var\
    \ operand2_string_index7 = 0\n    var operator_string_index8 = 0\n    var operand1_string_index8\
    \ = 0\n    var operand2_string_index8 = 0\n    var operator_string_index9 = 0\n\
    \    var operand1_string_index9 = 0\n    var operand2_string_index9 = 0\n    var\
    \ operator_string_index10 = 0\n    var operand1_string_index10 = 0\n    var operand2_string_index10\
    \ = 0\n    var operator_string_index11 = 0\n    var operand1_string_index11 =\
    \ 0\n    var operand2_string_index11 = 0\n    var operator_string_index12 = 0\n\
    \    var operand1_string_index12 = 0\n    var operand2_string_index12 = 0\n  \
    \  var operator_string_index13 = 0\n    var operand1_string_index13 = 0\n    var\
    \ operand2_string_index13 = 0\n    var operator_string_index14 = 0\n    var operand1_string_index14\
    \ = 0\n    var operand2_string_index14 = 0\n    var operator_string_index15 =\
    \ 0\n    var operand1_string_index15 = 0\n    var operand2_string_index15 = 0\n\
    \    var operator_string_index16 = 0\n    var operand1_string_index16 = 0\n  \
    \  var operand2_string_index16 = 0\n    var operator_string_index17 = 0\n    var\
    \ operand1_string_index17 = 0\n    var operand2_string_index17 = 0\n    var operator_string_index18\
    \ = 0\n    var operand1_string_index18 = 0\n    var operand2_string_index18 =\
    \ 0\n    var operator_string_index19 = 0\n    var operand1_string_index19 = 0\n\
    \    var operand2_string_index19 = 0\n    var operator_string_index20 = 0\n  \
    \  var operand1_string_index20 = 0\n    var operand2_string_index20 = 0\n    var\
    \ operator_string_index21 = 0\n    var operand1_\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpog08ogia.swift:91:9: error: type annotation missing in pattern\n\
    \    var operand1_\n        ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    \n    for index\
    \ in 0..<operator.count {\n        switch operator[index] {\n        case \"+\"\
    :\n            result += operand[index]\n        case \"-\":\n            result\
    \ -= operand[index]\n        case \"*\":\n            result *= operand[index]\n\
    \        case \"//\":\n            result /= operand[index]\n        case \"**\"\
    :\n            result **= operand[index]\n        default:\n            fatalError(\"\
    Invalid operator\")\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwpggk6re.swift:23:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmpwpggk6re.swift:23:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmpwpggk6re.swift:24:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[index] {\n               ^\n\
    /tmp/tmpwpggk6re.swift:24:24: error: '[' is not allowed in operator names\n  \
    \      switch operator[index] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    var i = 0\n    while\
    \ i < operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i]\n        case \"-\":\n            result -= operand[i]\n\
    \        case \"*\":\n            result *= operand[i]\n        case \"//\":\n\
    \            result /= operand[i]\n        case \"**\":\n            result **=\
    \ operand[i]\n        default:\n            fatalError(\"Invalid operator: \\\
    (operator[i])\")\n        }\n        i += 1\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpylsz526m.swift:23:15: error: expected expression after operator\n\
    \    while i < operator.count {\n              ^\n/tmp/tmpylsz526m.swift:23:23:\
    \ error: '.' is not allowed in operator names\n    while i < operator.count {\n\
    \                      ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    var i = 0\n    var\
    \ j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o\
    \ = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t =\
    \ 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n\
    \    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n \
    \   var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n  \
    \  var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n   \
    \ var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var\
    \ t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y\
    \ = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d =\
    \ 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n\
    \    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n \
    \   var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n  \
    \  var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n   \
    \ var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var\
    \ d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i\
    \ = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n =\
    \ 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n\
    \    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n \
    \   var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n  \
    \  var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n   \
    \ var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var\
    \ n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s\
    \ = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x =\
    \ 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n\
    \    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpvqaeqanu.swift:48:9: error: invalid redeclaration of 'i'\n    var\
    \ i = 0\n        ^\n/tmp/tmpvqaeqanu.swift:22:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmpvqaeqanu.swift:49:9: error: invalid\
    \ redeclaration of 'j'\n    var j = 0\n        ^\n/tmp/tmpvqaeqanu.swift:23:9:\
    \ note: 'j' previously declared here\n    var j = 0\n        ^\n/tmp/tmpvqaeqanu.swift:50:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmpvqaeqanu.swift:24:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmpvqaeqanu.swift:51:9:\
    \ error: invalid redeclaration of 'l'\n    var l = 0\n        ^\n/tmp/tmpvqaeqanu.swift:25:9:\
    \ note: 'l' previously declared here\n    var l = 0\n        ^\n/tmp/tmpvqaeqanu.swift:52:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 0\n        ^\n/tmp/tmpvqaeqanu.swift:26:9:\
    \ note: 'm' previously declared here\n    var m = 0\n        ^\n/tmp/tmpvqaeqanu.swift:53:9:\
    \ error: invalid redeclaration of 'n'\n    var n = 0\n        ^\n/tmp/tmpvqaeqanu.swift:27:9:\
    \ note: 'n' previously declared here\n    var n = 0\n        ^\n/tmp/tmpvqaeqanu.swift:54:9:\
    \ error: invalid redeclaration of 'o'\n    var o = 0\n        ^\n/tmp/tmpvqaeqanu.swift:28:9:\
    \ note: 'o' previously declared here\n    var o = 0\n        ^\n/tmp/tmpvqaeqanu.swift:55:9:\
    \ error: invalid redeclaration of 'p'\n    var p = 0\n        ^\n/tmp/tmpvqaeqanu.swift:29:9:\
    \ note: 'p' previously declared here\n    var p = 0\n        ^\n/tmp/tmpvqaeqanu.swift:56:9:\
    \ error: invalid redeclaration of 'q'\n    var q = 0\n        ^\n/tmp/tmpvqaeqanu.swift:30:9:\
    \ note: 'q' previously declared here\n    var q = 0\n        ^\n/tmp/tmpvqaeqanu.swift:57:9:\
    \ error: invalid redeclaration of 'r'\n    var r = 0\n        ^\n/tmp/tmpvqaeqanu.swift:31:9:\
    \ note: 'r' previously declared here\n    var r = 0\n        ^\n/tmp/tmpvqaeqanu.swift:58:9:\
    \ error: invalid redeclaration of 's'\n    var s = 0\n        ^\n/tmp/tmpvqaeqanu.swift:32:9:\
    \ note: 's' previously declared here\n    var s = 0\n        ^\n/tmp/tmpvqaeqanu.swift:59:9:\
    \ error: invalid redeclaration of 't'\n    var t = 0\n        ^\n/tmp/tmpvqae"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operandValue = operand[index]\n        let operatorValue = operator[index]\n\
    \        switch operatorValue {\n        case \"+\":\n            result += operandValue\n\
    \        case \"-\":\n            result -= operandValue\n        case \"*\":\n\
    \            result *= operandValue\n        case \"//\":\n            result\
    \ /= operandValue\n        case \"**\":\n            result **= operandValue\n\
    \        default:\n            fatalError(\"Invalid operator: \\(operatorValue)\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpt2xyu_ur.swift:24:29: error: expected initial value after '='\n\
    \        let operatorValue = operator[index]\n                            ^\n\
    /tmp/tmpt2xyu_ur.swift:24:28: error: consecutive statements on a line must be\
    \ separated by ';'\n        let operatorValue = operator[index]\n            \
    \               ^\n                           ;\n/tmp/tmpt2xyu_ur.swift:24:37:\
    \ error: '[' is not allowed in operator names\n        let operatorValue = operator[index]\n\
    \                                    ^\n/tmp/tmpt2xyu_ur.swift:35:20: error: cannot\
    \ find operator '**=' in scope\n            result **= operandValue\n        \
    \           ^~~\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Invalid operator:\
    \ \\(operator[index])\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpx08dahp1.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmpx08dahp1.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operator.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Invalid operator:\
    \ \\(operator[index])\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmponvtmv4p.swift:22:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmponvtmv4p.swift:22:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmponvtmv4p.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[index] {\n               ^\n\
    /tmp/tmponvtmv4p.swift:23:24: error: '[' is not allowed in operator names\n  \
    \      switch operator[index] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operandValue = operand[index]\n        let operatorValue = operator[index]\n\
    \        switch operatorValue {\n        case \"+\":\n            result += operandValue\n\
    \        case \"-\":\n            result -= operandValue\n        case \"*\":\n\
    \            result *= operandValue\n        case \"/\":\n            result /=\
    \ operandValue\n        case \"**\":\n            result **= operandValue\n  \
    \      default:\n            break\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpy541rc2o.swift:24:29: error: expected initial value after '='\n\
    \        let operatorValue = operator[index]\n                            ^\n\
    /tmp/tmpy541rc2o.swift:24:28: error: consecutive statements on a line must be\
    \ separated by ';'\n        let operatorValue = operator[index]\n            \
    \               ^\n                           ;\n/tmp/tmpy541rc2o.swift:24:37:\
    \ error: '[' is not allowed in operator names\n        let operatorValue = operator[index]\n\
    \                                    ^\n/tmp/tmpy541rc2o.swift:35:20: error: cannot\
    \ find operator '**=' in scope\n            result **= operandValue\n        \
    \           ^~~\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operator.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Invalid operator:\
    \ \\(operator[index])\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmponvtmv4p.swift:22:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmponvtmv4p.swift:22:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmponvtmv4p.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[index] {\n               ^\n\
    /tmp/tmponvtmv4p.swift:23:24: error: '[' is not allowed in operator names\n  \
    \      switch operator[index] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Invalid operator:\
    \ \\(operator[index])\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpx08dahp1.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmpx08dahp1.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result: Int = 0\n    \n    for index\
    \ in 0..<operator.count {\n        switch operator[index] {\n        case \"+\"\
    :\n            result += operand[index]\n        case \"-\":\n            result\
    \ -= operand[index]\n        case \"*\":\n            result *= operand[index]\n\
    \        case \"//\":\n            result /= operand[index]\n        case \"**\"\
    :\n            result **= operand[index]\n        default:\n            fatalError(\"\
    Invalid operator\")\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmph1adgtbh.swift:23:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmph1adgtbh.swift:23:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmph1adgtbh.swift:24:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[index] {\n               ^\n\
    /tmp/tmph1adgtbh.swift:24:24: error: '[' is not allowed in operator names\n  \
    \      switch operator[index] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Invalid operator\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp1965_ov2.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmp1965_ov2.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    var i = 0\n    var\
    \ j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o\
    \ = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t =\
    \ 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n\
    \    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n \
    \   var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n  \
    \  var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n   \
    \ var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var\
    \ t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y\
    \ = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d =\
    \ 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n\
    \    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n \
    \   var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n  \
    \  var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n   \
    \ var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var\
    \ d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i\
    \ = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n =\
    \ 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n\
    \    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n \
    \   var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n  \
    \  var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n   \
    \ var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var\
    \ n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s\
    \ = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x =\
    \ 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n\
    \    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpvqaeqanu.swift:48:9: error: invalid redeclaration of 'i'\n    var\
    \ i = 0\n        ^\n/tmp/tmpvqaeqanu.swift:22:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmpvqaeqanu.swift:49:9: error: invalid\
    \ redeclaration of 'j'\n    var j = 0\n        ^\n/tmp/tmpvqaeqanu.swift:23:9:\
    \ note: 'j' previously declared here\n    var j = 0\n        ^\n/tmp/tmpvqaeqanu.swift:50:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmpvqaeqanu.swift:24:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmpvqaeqanu.swift:51:9:\
    \ error: invalid redeclaration of 'l'\n    var l = 0\n        ^\n/tmp/tmpvqaeqanu.swift:25:9:\
    \ note: 'l' previously declared here\n    var l = 0\n        ^\n/tmp/tmpvqaeqanu.swift:52:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 0\n        ^\n/tmp/tmpvqaeqanu.swift:26:9:\
    \ note: 'm' previously declared here\n    var m = 0\n        ^\n/tmp/tmpvqaeqanu.swift:53:9:\
    \ error: invalid redeclaration of 'n'\n    var n = 0\n        ^\n/tmp/tmpvqaeqanu.swift:27:9:\
    \ note: 'n' previously declared here\n    var n = 0\n        ^\n/tmp/tmpvqaeqanu.swift:54:9:\
    \ error: invalid redeclaration of 'o'\n    var o = 0\n        ^\n/tmp/tmpvqaeqanu.swift:28:9:\
    \ note: 'o' previously declared here\n    var o = 0\n        ^\n/tmp/tmpvqaeqanu.swift:55:9:\
    \ error: invalid redeclaration of 'p'\n    var p = 0\n        ^\n/tmp/tmpvqaeqanu.swift:29:9:\
    \ note: 'p' previously declared here\n    var p = 0\n        ^\n/tmp/tmpvqaeqanu.swift:56:9:\
    \ error: invalid redeclaration of 'q'\n    var q = 0\n        ^\n/tmp/tmpvqaeqanu.swift:30:9:\
    \ note: 'q' previously declared here\n    var q = 0\n        ^\n/tmp/tmpvqaeqanu.swift:57:9:\
    \ error: invalid redeclaration of 'r'\n    var r = 0\n        ^\n/tmp/tmpvqaeqanu.swift:31:9:\
    \ note: 'r' previously declared here\n    var r = 0\n        ^\n/tmp/tmpvqaeqanu.swift:58:9:\
    \ error: invalid redeclaration of 's'\n    var s = 0\n        ^\n/tmp/tmpvqaeqanu.swift:32:9:\
    \ note: 's' previously declared here\n    var s = 0\n        ^\n/tmp/tmpvqaeqanu.swift:59:9:\
    \ error: invalid redeclaration of 't'\n    var t = 0\n        ^\n/tmp/tmpvqae"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operator.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Unknown operator:\
    \ \\(operator[index])\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpe258gs18.swift:22:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmpe258gs18.swift:22:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmpe258gs18.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[index] {\n               ^\n\
    /tmp/tmpe258gs18.swift:23:24: error: '[' is not allowed in operator names\n  \
    \      switch operator[index] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operandValue = operand[index]\n        let operatorValue = operator[index]\n\
    \        switch operatorValue {\n        case \"+\":\n            result += operandValue\n\
    \        case \"-\":\n            result -= operandValue\n        case \"*\":\n\
    \            result *= operandValue\n        case \"//\":\n            result\
    \ /= operandValue\n        case \"**\":\n            result **= operandValue\n\
    \        default:\n            fatalError(\"Invalid operator\")\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpnfzxpyrg.swift:24:29: error: expected initial value after '='\n\
    \        let operatorValue = operator[index]\n                            ^\n\
    /tmp/tmpnfzxpyrg.swift:24:28: error: consecutive statements on a line must be\
    \ separated by ';'\n        let operatorValue = operator[index]\n            \
    \               ^\n                           ;\n/tmp/tmpnfzxpyrg.swift:24:37:\
    \ error: '[' is not allowed in operator names\n        let operatorValue = operator[index]\n\
    \                                    ^\n/tmp/tmpnfzxpyrg.swift:35:20: error: cannot\
    \ find operator '**=' in scope\n            result **= operandValue\n        \
    \           ^~~\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Invalid operator\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp1965_ov2.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmp1965_ov2.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operand1 = operand[index]\n        let operand2 = operand[index\
    \ + 1]\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand1\n        case \"-\":\n            result -= operand1\n        case\
    \ \"*\":\n            result *= operand1\n        case \"//\":\n            result\
    \ /= operand1\n        case \"**\":\n            result **= operand1\n       \
    \ default:\n            fatalError(\"unknown operator: \\(operator[index])\")\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp3_svvr29.swift:25:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmp3_svvr29.swift:25:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"unknown operator\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmptx7n9kka.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmptx7n9kka.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    var i = 0\n    var\
    \ j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o\
    \ = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t =\
    \ 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n\
    \    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n \
    \   var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n  \
    \  var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n   \
    \ var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var\
    \ t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y\
    \ = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d =\
    \ 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n\
    \    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n \
    \   var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n  \
    \  var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n   \
    \ var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var\
    \ d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i\
    \ = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n =\
    \ 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n\
    \    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n \
    \   var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n  \
    \  var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n   \
    \ var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var\
    \ n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s\
    \ = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x =\
    \ 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n\
    \    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpvqaeqanu.swift:48:9: error: invalid redeclaration of 'i'\n    var\
    \ i = 0\n        ^\n/tmp/tmpvqaeqanu.swift:22:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmpvqaeqanu.swift:49:9: error: invalid\
    \ redeclaration of 'j'\n    var j = 0\n        ^\n/tmp/tmpvqaeqanu.swift:23:9:\
    \ note: 'j' previously declared here\n    var j = 0\n        ^\n/tmp/tmpvqaeqanu.swift:50:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmpvqaeqanu.swift:24:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmpvqaeqanu.swift:51:9:\
    \ error: invalid redeclaration of 'l'\n    var l = 0\n        ^\n/tmp/tmpvqaeqanu.swift:25:9:\
    \ note: 'l' previously declared here\n    var l = 0\n        ^\n/tmp/tmpvqaeqanu.swift:52:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 0\n        ^\n/tmp/tmpvqaeqanu.swift:26:9:\
    \ note: 'm' previously declared here\n    var m = 0\n        ^\n/tmp/tmpvqaeqanu.swift:53:9:\
    \ error: invalid redeclaration of 'n'\n    var n = 0\n        ^\n/tmp/tmpvqaeqanu.swift:27:9:\
    \ note: 'n' previously declared here\n    var n = 0\n        ^\n/tmp/tmpvqaeqanu.swift:54:9:\
    \ error: invalid redeclaration of 'o'\n    var o = 0\n        ^\n/tmp/tmpvqaeqanu.swift:28:9:\
    \ note: 'o' previously declared here\n    var o = 0\n        ^\n/tmp/tmpvqaeqanu.swift:55:9:\
    \ error: invalid redeclaration of 'p'\n    var p = 0\n        ^\n/tmp/tmpvqaeqanu.swift:29:9:\
    \ note: 'p' previously declared here\n    var p = 0\n        ^\n/tmp/tmpvqaeqanu.swift:56:9:\
    \ error: invalid redeclaration of 'q'\n    var q = 0\n        ^\n/tmp/tmpvqaeqanu.swift:30:9:\
    \ note: 'q' previously declared here\n    var q = 0\n        ^\n/tmp/tmpvqaeqanu.swift:57:9:\
    \ error: invalid redeclaration of 'r'\n    var r = 0\n        ^\n/tmp/tmpvqaeqanu.swift:31:9:\
    \ note: 'r' previously declared here\n    var r = 0\n        ^\n/tmp/tmpvqaeqanu.swift:58:9:\
    \ error: invalid redeclaration of 's'\n    var s = 0\n        ^\n/tmp/tmpvqaeqanu.swift:32:9:\
    \ note: 's' previously declared here\n    var s = 0\n        ^\n/tmp/tmpvqaeqanu.swift:59:9:\
    \ error: invalid redeclaration of 't'\n    var t = 0\n        ^\n/tmp/tmpvqae"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmppwepw1fj.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmppwepw1fj.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operandValue = operand[index]\n        let operatorValue = operator[index]\n\
    \        switch operatorValue {\n        case \"+\":\n            result += operandValue\n\
    \        case \"-\":\n            result -= operandValue\n        case \"*\":\n\
    \            result *= operandValue\n        case \"/\":\n            result /=\
    \ operandValue\n        case \"**\":\n            result **= operandValue\n  \
    \      default:\n            break\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpy541rc2o.swift:24:29: error: expected initial value after '='\n\
    \        let operatorValue = operator[index]\n                            ^\n\
    /tmp/tmpy541rc2o.swift:24:28: error: consecutive statements on a line must be\
    \ separated by ';'\n        let operatorValue = operator[index]\n            \
    \               ^\n                           ;\n/tmp/tmpy541rc2o.swift:24:37:\
    \ error: '[' is not allowed in operator names\n        let operatorValue = operator[index]\n\
    \                                    ^\n/tmp/tmpy541rc2o.swift:35:20: error: cannot\
    \ find operator '**=' in scope\n            result **= operandValue\n        \
    \           ^~~\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"unknown operator\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmptx7n9kka.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmptx7n9kka.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operandValue = operand[index]\n        let operatorValue = operator[index]\n\
    \        switch operatorValue {\n        case \"+\":\n            result += operandValue\n\
    \        case \"-\":\n            result -= operandValue\n        case \"*\":\n\
    \            result *= operandValue\n        case \"//\":\n            result\
    \ /= operandValue\n        case \"**\":\n            result **= operandValue\n\
    \        default:\n            break\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpmwif7tdr.swift:24:29: error: expected initial value after '='\n\
    \        let operatorValue = operator[index]\n                            ^\n\
    /tmp/tmpmwif7tdr.swift:24:28: error: consecutive statements on a line must be\
    \ separated by ';'\n        let operatorValue = operator[index]\n            \
    \               ^\n                           ;\n/tmp/tmpmwif7tdr.swift:24:37:\
    \ error: '[' is not allowed in operator names\n        let operatorValue = operator[index]\n\
    \                                    ^\n/tmp/tmpmwif7tdr.swift:35:20: error: cannot\
    \ find operator '**=' in scope\n            result **= operandValue\n        \
    \           ^~~\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operandValue = operand[index]\n        switch operator[index]\
    \ {\n        case \"+\":\n            result += operandValue\n        case \"\
    -\":\n            result -= operandValue\n        case \"*\":\n            result\
    \ *= operandValue\n        case \"//\":\n            result /= operandValue\n\
    \        case \"**\":\n            result **= operandValue\n        default:\n\
    \            fatalError(\"Invalid operator: \\(operator[index])\")\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpf8kz3ytg.swift:24:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmpf8kz3ytg.swift:24:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    \n    for index\
    \ in 0..<operator.count {\n        switch operator[index] {\n        case \"+\"\
    :\n            result += operand[index]\n        case \"-\":\n            result\
    \ -= operand[index]\n        case \"*\":\n            result *= operand[index]\n\
    \        case \"//\":\n            result /= operand[index]\n        case \"**\"\
    :\n            result **= operand[index]\n        default:\n            break\n\
    \        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4,\
    \ 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2,\
    \ 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3,\
    \ 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpanoiq36z.swift:23:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmpanoiq36z.swift:23:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmpanoiq36z.swift:24:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[index] {\n               ^\n\
    /tmp/tmpanoiq36z.swift:24:24: error: '[' is not allowed in operator names\n  \
    \      switch operator[index] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    var i = 0\n    for\
    \ _ in 0..<operand.count {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i]\n        case \"-\":\n            result -=\
    \ operand[i]\n        case \"*\":\n            result *= operand[i]\n        case\
    \ \"//\":\n            result /= operand[i]\n        case \"**\":\n          \
    \  result **= operand[i]\n        default:\n            break\n        }\n   \
    \     i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp1sxj0sgl.swift:24:16: error: expected expression in 'switch' statement\n\
    \        switch operator[i] {\n               ^\n/tmp/tmp1sxj0sgl.swift:24:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    var i = 0\n    var\
    \ j = 0\n    var k = 0\n    var operatorIndex = 0\n    var operandIndex = 0\n\
    \    var operatorLength = operator.count\n    var operandLength = operand.count\n\
    \    \n    for (i; i < operatorLength; i++ {\n        \n        switch (operator[i])\
    \ {\n        case \"+\":\n            result += operand[operandIndex]\n      \
    \      operandIndex++\n            break\n        case \"-\":\n            result\
    \ -= operand[operandIndex]\n            operandIndex++\n            break\n  \
    \      case \"*\":\n            result *= operand[operandIndex]\n            operandIndex++\n\
    \            break\n        case \"//\":\n            result /= operand[operandIndex]\n\
    \            operandIndex++\n            break\n        case \"**\":\n       \
    \     result **= operand[operandIndex]\n            operandIndex++\n         \
    \   break\n        default:\n            break\n        }\n    }\n    \n    for\
    \ (k; k < operandLength; k++ {\n        \n        switch (operand[k]) {\n    \
    \    default:\n            break\n        }\n    }\n    \n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpfu0t5v7t.swift:27:26: error: expected initial value after '='\n\
    \    var operatorLength = operator.count\n                         ^\n/tmp/tmpfu0t5v7t.swift:27:25:\
    \ error: consecutive statements on a line must be separated by ';'\n    var operatorLength\
    \ = operator.count\n                        ^\n                        ;\n/tmp/tmpfu0t5v7t.swift:27:34:\
    \ error: '.' is not allowed in operator names\n    var operatorLength = operator.count\n\
    \                                 ^\n/tmp/tmpfu0t5v7t.swift:30:5: error: C-style\
    \ for statement has been removed in Swift 3\n    for (i; i < operatorLength; i++\
    \ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpfu0t5v7t.swift:66:18: error:\
    \ expected '{' to start the body of for-each loop\n    return result\n       \
    \          ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Invalid operator\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp1965_ov2.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmp1965_ov2.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmppwepw1fj.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmppwepw1fj.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operandValue = operand[index]\n        switch operator[index]\
    \ {\n        case \"+\":\n            result += operandValue\n        case \"\
    -\":\n            result -= operandValue\n        case \"*\":\n            result\
    \ *= operandValue\n        case \"//\":\n            result /= operandValue\n\
    \        case \"**\":\n            result **= operandValue\n        default:\n\
    \            fatalError(\"Invalid operator: \\(operator[index])\")\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpf8kz3ytg.swift:24:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmpf8kz3ytg.swift:24:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    \n    // Iterate\
    \ through each operator in operator array\n    for operator in operator {\n  \
    \      switch operator {\n        case \"+\":\n            result = result + operand[0]\n\
    \        case \"-\":\n            result = result - operand[0]\n        case \"\
    *\":\n            result = result * operand[0]\n        case \"//\":\n       \
    \     result = result / operand[0]\n        case \"**\":\n            result =\
    \ result ** operand[0]\n        default:\n            break\n        }\n    }\n\
    \    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpazycjo9l.swift:24:9: error: expected pattern\n    for operator\
    \ in operator {\n        ^\n/tmp/tmpazycjo9l.swift:24:9: error: expected Sequence\
    \ expression for for-each loop\n    for operator in operator {\n        ^\n/tmp/tmpazycjo9l.swift:24:9:\
    \ error: expected '{' to start the body of for-each loop\n    for operator in\
    \ operator {\n        ^\n/tmp/tmpazycjo9l.swift:25:16: error: expected expression\
    \ in 'switch' statement\n        switch operator {\n               ^\n/tmp/tmpazycjo9l.swift:25:25:\
    \ error: expected operator name in operator declaration\n        switch operator\
    \ {\n                        ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    \n    var result = 0\n    \n    for\
    \ index in 0..<operand.count {\n        switch operator[index] {\n        case\
    \ \"+\":\n            result += operand[index]\n        case \"-\":\n        \
    \    result -= operand[index]\n        case \"*\":\n            result *= operand[index]\n\
    \        case \"//\":\n            result /= operand[index]\n        case \"**\"\
    :\n            result **= operand[index]\n        default:\n            fatalError(\"\
    Unknown operator: \\(operator[index])\")\n        }\n    }\n    \n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpi_uwvl86.swift:25:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmpi_uwvl86.swift:25:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    \n    for index\
    \ in 0..<operator.count {\n        switch operator[index] {\n        case \"+\"\
    :\n            result += operand[index]\n        case \"-\":\n            result\
    \ -= operand[index]\n        case \"*\":\n            result *= operand[index]\n\
    \        case \"//\":\n            result /= operand[index]\n        case \"**\"\
    :\n            result **= operand[index]\n        default:\n            break\n\
    \        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4,\
    \ 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2,\
    \ 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3,\
    \ 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpanoiq36z.swift:23:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmpanoiq36z.swift:23:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmpanoiq36z.swift:24:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[index] {\n               ^\n\
    /tmp/tmpanoiq36z.swift:24:24: error: '[' is not allowed in operator names\n  \
    \      switch operator[index] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    var i = 0\n    while\
    \ i < operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i]\n        case \"-\":\n            result -= operand[i]\n\
    \        case \"*\":\n            result *= operand[i]\n        case \"//\":\n\
    \            result /= operand[i]\n        case \"**\":\n            result **=\
    \ operand[i]\n        default:\n            fatalError(\"Invalid operator: \\\
    (operator[i])\")\n        }\n        i += 1\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpylsz526m.swift:23:15: error: expected expression after operator\n\
    \    while i < operator.count {\n              ^\n/tmp/tmpylsz526m.swift:23:23:\
    \ error: '.' is not allowed in operator names\n    while i < operator.count {\n\
    \                      ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result: Int = 0\n    for index in\
    \ 0..<operand.count {\n        let operand1 = operand[index]\n        let operand2\
    \ = operand[index + 1]\n        switch operator[index] {\n        case \"+\":\n\
    \            result += operand1\n        case \"-\":\n            result -= operand1\n\
    \        case \"*\":\n            result *= operand1\n        case \"//\":\n \
    \           result /= operand1\n        case \"**\":\n            result **= operand1\n\
    \        default:\n            break\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp29pzgikr.swift:25:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmp29pzgikr.swift:25:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    var i = 0\n    var\
    \ j = 0\n    for _ in 0..<operator.count {\n        switch operator[i] {\n   \
    \     case \"+\":\n            result += operand[j]\n            i += 1\n    \
    \        j += 1\n        case \"-\":\n            result -= operand[j]\n     \
    \       i += 1\n            j += 1\n        case \"*\":\n            result *=\
    \ operand[j]\n            i += 1\n            j += 1\n        case \"//\":\n \
    \           result /= operand[j]\n            i += 1\n            j += 1\n   \
    \     case \"**\":\n            result **= operand[j]\n            i += 1\n  \
    \          j += 1\n        default:\n            fatalError(\"Invalid operator\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp49y_uid7.swift:24:18: error: expected expression after operator\n\
    \    for _ in 0..<operator.count {\n                 ^\n/tmp/tmp49y_uid7.swift:24:18:\
    \ error: expected '{' to start the body of for-each loop\n    for _ in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmp49y_uid7.swift:25:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmp49y_uid7.swift:25:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Invalid operator\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp1965_ov2.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmp1965_ov2.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operandValue = operand[index]\n        let operatorValue = operator[index]\n\
    \        switch operatorValue {\n        case \"+\":\n            result += operandValue\n\
    \        case \"-\":\n            result -= operandValue\n        case \"*\":\n\
    \            result *= operandValue\n        case \"//\":\n            result\
    \ /= operandValue\n        case \"**\":\n            result **= operandValue\n\
    \        default:\n            break\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpmwif7tdr.swift:24:29: error: expected initial value after '='\n\
    \        let operatorValue = operator[index]\n                            ^\n\
    /tmp/tmpmwif7tdr.swift:24:28: error: consecutive statements on a line must be\
    \ separated by ';'\n        let operatorValue = operator[index]\n            \
    \               ^\n                           ;\n/tmp/tmpmwif7tdr.swift:24:37:\
    \ error: '[' is not allowed in operator names\n        let operatorValue = operator[index]\n\
    \                                    ^\n/tmp/tmpmwif7tdr.swift:35:20: error: cannot\
    \ find operator '**=' in scope\n            result **= operandValue\n        \
    \           ^~~\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Invalid operator\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp1965_ov2.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmp1965_ov2.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result: Int = 0\n    var i = 0\n\
    \    for _ in 0..<operand.count {\n        switch operator[i] {\n        case\
    \ \"+\":\n            result += operand[i]\n        case \"-\":\n            result\
    \ -= operand[i]\n        case \"*\":\n            result *= operand[i]\n     \
    \   case \"//\":\n            result /= operand[i]\n        case \"**\":\n   \
    \         result **= operand[i]\n        default:\n            fatalError(\"Invalid\
    \ operator: \\(operator[i])\")\n        }\n        i += 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpyzuixo4z.swift:24:16: error: expected expression in 'switch' statement\n\
    \        switch operator[i] {\n               ^\n/tmp/tmpyzuixo4z.swift:24:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operator.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpdkmv50cu.swift:22:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmpdkmv50cu.swift:22:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmpdkmv50cu.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[index] {\n               ^\n\
    /tmp/tmpdkmv50cu.swift:23:24: error: '[' is not allowed in operator names\n  \
    \      switch operator[index] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operandValue = operand[index]\n        let operatorValue = operator[index]\n\
    \        switch operatorValue {\n        case \"+\":\n            result += operandValue\n\
    \        case \"-\":\n            result -= operandValue\n        case \"*\":\n\
    \            result *= operandValue\n        case \"//\":\n            result\
    \ /= operandValue\n        case \"**\":\n            result **= operandValue\n\
    \        default:\n            break\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpmwif7tdr.swift:24:29: error: expected initial value after '='\n\
    \        let operatorValue = operator[index]\n                            ^\n\
    /tmp/tmpmwif7tdr.swift:24:28: error: consecutive statements on a line must be\
    \ separated by ';'\n        let operatorValue = operator[index]\n            \
    \               ^\n                           ;\n/tmp/tmpmwif7tdr.swift:24:37:\
    \ error: '[' is not allowed in operator names\n        let operatorValue = operator[index]\n\
    \                                    ^\n/tmp/tmpmwif7tdr.swift:35:20: error: cannot\
    \ find operator '**=' in scope\n            result **= operandValue\n        \
    \           ^~~\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Invalid operator\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp1965_ov2.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmp1965_ov2.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operator.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"/\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpbrst83yi.swift:22:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmpbrst83yi.swift:22:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmpbrst83yi.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[index] {\n               ^\n\
    /tmp/tmpbrst83yi.swift:23:24: error: '[' is not allowed in operator names\n  \
    \      switch operator[index] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    var i = 0\n    var\
    \ j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o\
    \ = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t =\
    \ 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n\
    \    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n \
    \   var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n  \
    \  var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n   \
    \ var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var\
    \ t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y\
    \ = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d =\
    \ 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n\
    \    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n \
    \   var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n  \
    \  var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n   \
    \ var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var\
    \ d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i\
    \ = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n =\
    \ 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n\
    \    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n \
    \   var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n  \
    \  var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n   \
    \ var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var\
    \ n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s\
    \ = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x =\
    \ 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n\
    \    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpvqaeqanu.swift:48:9: error: invalid redeclaration of 'i'\n    var\
    \ i = 0\n        ^\n/tmp/tmpvqaeqanu.swift:22:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmpvqaeqanu.swift:49:9: error: invalid\
    \ redeclaration of 'j'\n    var j = 0\n        ^\n/tmp/tmpvqaeqanu.swift:23:9:\
    \ note: 'j' previously declared here\n    var j = 0\n        ^\n/tmp/tmpvqaeqanu.swift:50:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmpvqaeqanu.swift:24:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmpvqaeqanu.swift:51:9:\
    \ error: invalid redeclaration of 'l'\n    var l = 0\n        ^\n/tmp/tmpvqaeqanu.swift:25:9:\
    \ note: 'l' previously declared here\n    var l = 0\n        ^\n/tmp/tmpvqaeqanu.swift:52:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 0\n        ^\n/tmp/tmpvqaeqanu.swift:26:9:\
    \ note: 'm' previously declared here\n    var m = 0\n        ^\n/tmp/tmpvqaeqanu.swift:53:9:\
    \ error: invalid redeclaration of 'n'\n    var n = 0\n        ^\n/tmp/tmpvqaeqanu.swift:27:9:\
    \ note: 'n' previously declared here\n    var n = 0\n        ^\n/tmp/tmpvqaeqanu.swift:54:9:\
    \ error: invalid redeclaration of 'o'\n    var o = 0\n        ^\n/tmp/tmpvqaeqanu.swift:28:9:\
    \ note: 'o' previously declared here\n    var o = 0\n        ^\n/tmp/tmpvqaeqanu.swift:55:9:\
    \ error: invalid redeclaration of 'p'\n    var p = 0\n        ^\n/tmp/tmpvqaeqanu.swift:29:9:\
    \ note: 'p' previously declared here\n    var p = 0\n        ^\n/tmp/tmpvqaeqanu.swift:56:9:\
    \ error: invalid redeclaration of 'q'\n    var q = 0\n        ^\n/tmp/tmpvqaeqanu.swift:30:9:\
    \ note: 'q' previously declared here\n    var q = 0\n        ^\n/tmp/tmpvqaeqanu.swift:57:9:\
    \ error: invalid redeclaration of 'r'\n    var r = 0\n        ^\n/tmp/tmpvqaeqanu.swift:31:9:\
    \ note: 'r' previously declared here\n    var r = 0\n        ^\n/tmp/tmpvqaeqanu.swift:58:9:\
    \ error: invalid redeclaration of 's'\n    var s = 0\n        ^\n/tmp/tmpvqaeqanu.swift:32:9:\
    \ note: 's' previously declared here\n    var s = 0\n        ^\n/tmp/tmpvqaeqanu.swift:59:9:\
    \ error: invalid redeclaration of 't'\n    var t = 0\n        ^\n/tmp/tmpvqae"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    var i = 0\n    for\
    \ _ in 0..<operand.count {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i]\n        case \"-\":\n            result -=\
    \ operand[i]\n        case \"*\":\n            result *= operand[i]\n        case\
    \ \"//\":\n            result /= operand[i]\n        case \"**\":\n          \
    \  result **= operand[i]\n        default:\n            fatalError(\"Invalid operator:\
    \ \\(operator[i])\")\n        }\n        i += 1\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwpbgvyl0.swift:24:16: error: expected expression in 'switch' statement\n\
    \        switch operator[i] {\n               ^\n/tmp/tmpwpbgvyl0.swift:24:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operator.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpdkmv50cu.swift:22:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmpdkmv50cu.swift:22:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmpdkmv50cu.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[index] {\n               ^\n\
    /tmp/tmpdkmv50cu.swift:23:24: error: '[' is not allowed in operator names\n  \
    \      switch operator[index] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result: Int = 0\n    var i = 0\n\
    \    while i < operator.count {\n        switch operator[i] {\n        case \"\
    +\":\n            result += operand[i]\n        case \"-\":\n            result\
    \ -= operand[i]\n        case \"*\":\n            result *= operand[i]\n     \
    \   case \"//\":\n            result /= operand[i]\n        case \"**\":\n   \
    \         result **= operand[i]\n        default:\n            fatalError(\"unknown\
    \ operator\")\n        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp2cg0j5o_.swift:23:15: error: expected expression after operator\n\
    \    while i < operator.count {\n              ^\n/tmp/tmp2cg0j5o_.swift:23:23:\
    \ error: '.' is not allowed in operator names\n    while i < operator.count {\n\
    \                      ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmppwepw1fj.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmppwepw1fj.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    \n    for index\
    \ in 0..<operand.count {\n        switch operator[index] {\n        case \"+\"\
    :\n            result += operand[index]\n        case \"-\":\n            result\
    \ -= operand[index]\n        case \"*\":\n            result *= operand[index]\n\
    \        case \"//\":\n            result /= operand[index]\n        case \"**\"\
    :\n            result **= operand[index]\n        default:\n            fatalError(\"\
    Invalid operator: \\(operator[index])\")\n        }\n    }\n    \n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp5oghacey.swift:24:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmp5oghacey.swift:24:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result: Int = 0\n    for index in\
    \ 0..<operand.count {\n        switch operator[index] {\n        case \"+\":\n\
    \            result += operand[index]\n        case \"-\":\n            result\
    \ -= operand[index]\n        case \"*\":\n            result *= operand[index]\n\
    \        case \"//\":\n            result /= operand[index]\n        case \"**\"\
    :\n            result **= operand[index]\n        default:\n            fatalError(\"\
    Invalid operator\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpu21fkyuv.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmpu21fkyuv.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operandValue = operand[index]\n        let operatorValue = operator[index]\n\
    \        switch operatorValue {\n        case \"+\":\n            result += operandValue\n\
    \        case \"-\":\n            result -= operandValue\n        case \"*\":\n\
    \            result *= operandValue\n        case \"//\":\n            result\
    \ /= operandValue\n        case \"**\":\n            result **= operandValue\n\
    \        default:\n            break\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpmwif7tdr.swift:24:29: error: expected initial value after '='\n\
    \        let operatorValue = operator[index]\n                            ^\n\
    /tmp/tmpmwif7tdr.swift:24:28: error: consecutive statements on a line must be\
    \ separated by ';'\n        let operatorValue = operator[index]\n            \
    \               ^\n                           ;\n/tmp/tmpmwif7tdr.swift:24:37:\
    \ error: '[' is not allowed in operator names\n        let operatorValue = operator[index]\n\
    \                                    ^\n/tmp/tmpmwif7tdr.swift:35:20: error: cannot\
    \ find operator '**=' in scope\n            result **= operandValue\n        \
    \           ^~~\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Invalid operator\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp1965_ov2.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmp1965_ov2.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    var i = 0\n    var\
    \ j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o\
    \ = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t =\
    \ 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n\
    \    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n \
    \   var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n  \
    \  var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n   \
    \ var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var\
    \ t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y\
    \ = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d =\
    \ 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n\
    \    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n \
    \   var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n  \
    \  var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n   \
    \ var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var\
    \ d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i\
    \ = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n =\
    \ 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n\
    \    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n \
    \   var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n  \
    \  var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n   \
    \ var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var\
    \ n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s\
    \ = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x =\
    \ 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n\
    \    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpvqaeqanu.swift:48:9: error: invalid redeclaration of 'i'\n    var\
    \ i = 0\n        ^\n/tmp/tmpvqaeqanu.swift:22:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmpvqaeqanu.swift:49:9: error: invalid\
    \ redeclaration of 'j'\n    var j = 0\n        ^\n/tmp/tmpvqaeqanu.swift:23:9:\
    \ note: 'j' previously declared here\n    var j = 0\n        ^\n/tmp/tmpvqaeqanu.swift:50:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmpvqaeqanu.swift:24:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmpvqaeqanu.swift:51:9:\
    \ error: invalid redeclaration of 'l'\n    var l = 0\n        ^\n/tmp/tmpvqaeqanu.swift:25:9:\
    \ note: 'l' previously declared here\n    var l = 0\n        ^\n/tmp/tmpvqaeqanu.swift:52:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 0\n        ^\n/tmp/tmpvqaeqanu.swift:26:9:\
    \ note: 'm' previously declared here\n    var m = 0\n        ^\n/tmp/tmpvqaeqanu.swift:53:9:\
    \ error: invalid redeclaration of 'n'\n    var n = 0\n        ^\n/tmp/tmpvqaeqanu.swift:27:9:\
    \ note: 'n' previously declared here\n    var n = 0\n        ^\n/tmp/tmpvqaeqanu.swift:54:9:\
    \ error: invalid redeclaration of 'o'\n    var o = 0\n        ^\n/tmp/tmpvqaeqanu.swift:28:9:\
    \ note: 'o' previously declared here\n    var o = 0\n        ^\n/tmp/tmpvqaeqanu.swift:55:9:\
    \ error: invalid redeclaration of 'p'\n    var p = 0\n        ^\n/tmp/tmpvqaeqanu.swift:29:9:\
    \ note: 'p' previously declared here\n    var p = 0\n        ^\n/tmp/tmpvqaeqanu.swift:56:9:\
    \ error: invalid redeclaration of 'q'\n    var q = 0\n        ^\n/tmp/tmpvqaeqanu.swift:30:9:\
    \ note: 'q' previously declared here\n    var q = 0\n        ^\n/tmp/tmpvqaeqanu.swift:57:9:\
    \ error: invalid redeclaration of 'r'\n    var r = 0\n        ^\n/tmp/tmpvqaeqanu.swift:31:9:\
    \ note: 'r' previously declared here\n    var r = 0\n        ^\n/tmp/tmpvqaeqanu.swift:58:9:\
    \ error: invalid redeclaration of 's'\n    var s = 0\n        ^\n/tmp/tmpvqaeqanu.swift:32:9:\
    \ note: 's' previously declared here\n    var s = 0\n        ^\n/tmp/tmpvqaeqanu.swift:59:9:\
    \ error: invalid redeclaration of 't'\n    var t = 0\n        ^\n/tmp/tmpvqae"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    var i = 0\n    for\
    \ _ in 0..<operand.count {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i]\n        case \"-\":\n            result -=\
    \ operand[i]\n        case \"*\":\n            result *= operand[i]\n        case\
    \ \"//\":\n            result /= operand[i]\n        case \"**\":\n          \
    \  result **= operand[i]\n        default:\n            fatalError(\"Invalid operator\"\
    )\n        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpxzg72_at.swift:24:16: error: expected expression in 'switch' statement\n\
    \        switch operator[i] {\n               ^\n/tmp/tmpxzg72_at.swift:24:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmppwepw1fj.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmppwepw1fj.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    var i = 0\n    for\
    \ _ in 0..<operand.count {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i]\n        case \"-\":\n            result -=\
    \ operand[i]\n        case \"*\":\n            result *= operand[i]\n        case\
    \ \"//\":\n            result /= operand[i]\n        case \"**\":\n          \
    \  result **= operand[i]\n        default:\n            break\n        }\n   \
    \     i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp1sxj0sgl.swift:24:16: error: expected expression in 'switch' statement\n\
    \        switch operator[i] {\n               ^\n/tmp/tmp1sxj0sgl.swift:24:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result: Int = 0\n    var i = 0\n\
    \    for _ in 0..<operand.count {\n        switch operator[i] {\n        case\
    \ \"+\":\n            result += operand[i]\n        case \"-\":\n            result\
    \ -= operand[i]\n        case \"*\":\n            result *= operand[i]\n     \
    \   case \"//\":\n            result /= operand[i]\n        case \"**\":\n   \
    \         result **= operand[i]\n        default:\n            fatalError(\"Unexpected\
    \ operator: \\(operator[i])\")\n        }\n        i += 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpj1pl742a.swift:24:16: error: expected expression in 'switch' statement\n\
    \        switch operator[i] {\n               ^\n/tmp/tmpj1pl742a.swift:24:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmppwepw1fj.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmppwepw1fj.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmppwepw1fj.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmppwepw1fj.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result: Int = 0\n    for index in\
    \ 0..<operator.count {\n        switch operator[index] {\n        case \"+\":\n\
    \            result += operand[index]\n        case \"-\":\n            result\
    \ -= operand[index]\n        case \"*\":\n            result *= operand[index]\n\
    \        case \"//\":\n            result /= operand[index]\n        case \"**\"\
    :\n            result **= operand[index]\n        default:\n            fatalError(\"\
    Invalid operator\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpkltvolxs.swift:22:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmpkltvolxs.swift:22:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmpkltvolxs.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[index] {\n               ^\n\
    /tmp/tmpkltvolxs.swift:23:24: error: '[' is not allowed in operator names\n  \
    \      switch operator[index] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Invalid operator\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp1965_ov2.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmp1965_ov2.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmppwepw1fj.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmppwepw1fj.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result: Int = 0\n    for index in\
    \ 0..<operator.count {\n        switch operator[index] {\n        case \"+\":\n\
    \            result += operand[index]\n        case \"-\":\n            result\
    \ -= operand[index]\n        case \"*\":\n            result *= operand[index]\n\
    \        case \"//\":\n            result /= operand[index]\n        case \"**\"\
    :\n            result **= operand[index]\n        default:\n            fatalError(\"\
    Invalid operator\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpkltvolxs.swift:22:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmpkltvolxs.swift:22:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmpkltvolxs.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[index] {\n               ^\n\
    /tmp/tmpkltvolxs.swift:23:24: error: '[' is not allowed in operator names\n  \
    \      switch operator[index] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    var i = 0\n    for\
    \ _ in 0..<operand.count {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i]\n        case \"-\":\n            result -=\
    \ operand[i]\n        case \"*\":\n            result *= operand[i]\n        case\
    \ \"//\":\n            result /= operand[i]\n        case \"**\":\n          \
    \  result **= operand[i]\n        default:\n            break\n        }\n   \
    \     i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp1sxj0sgl.swift:24:16: error: expected expression in 'switch' statement\n\
    \        switch operator[i] {\n               ^\n/tmp/tmp1sxj0sgl.swift:24:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    var i = 0\n    var\
    \ j = 0\n    var k = 0\n    var operator_index = 0\n    var operand1_index = 0\n\
    \    var operand2_index = 0\n    var operator_string = \"\"\n    var operand1_string\
    \ = \"\"\n    var operand2_string = \"\"\n    var operator_string_index = 0\n\
    \    var operand1_string_index = 0\n    var operand2_string_index = 0\n    var\
    \ operator_string_index2 = 0\n    var operand1_string_index2 = 0\n    var operand2_string_index2\
    \ = 0\n    var operator_string_index3 = 0\n    var operand1_string_index3 = 0\n\
    \    var operand2_string_index3 = 0\n    var operator_string_index4 = 0\n    var\
    \ operand1_string_index4 = 0\n    var operand2_string_index4 = 0\n    var operator_string_index5\
    \ = 0\n    var operand1_string_index5 = 0\n    var operand2_string_index5 = 0\n\
    \    var operator_string_index6 = 0\n    var operand1_string_index6 = 0\n    var\
    \ operand2_string_index6 = 0\n    var operator_string_index7 = 0\n    var operand1_string_index7\
    \ = 0\n    var operand2_string_index7 = 0\n    var operator_string_index8 = 0\n\
    \    var operand1_string_index8 = 0\n    var operand2_string_index8 = 0\n    var\
    \ operator_string_index9 = 0\n    var operand1_string_index9 = 0\n    var operand2_string_index9\
    \ = 0\n    var operator_string_index10 = 0\n    var operand1_string_index10 =\
    \ 0\n    var operand2_string_index10 = 0\n    var operator_string_index11 = 0\n\
    \    var operand1_string_index11 = 0\n    var operand2_string_index11 = 0\n  \
    \  var operator_string_index12 = 0\n    var operand1_string_index12 = 0\n    var\
    \ operand2_string_index12 = 0\n    var operator_string_index13 = 0\n    var operand1_string_index13\
    \ = 0\n    var operand2_string_index13 = 0\n    var operator_string_index14 =\
    \ 0\n    var operand1_string_index14 = 0\n    var operand2_string_index14 = 0\n\
    \    var operator_string_index15 = 0\n    var operand1_string_index15 = 0\n  \
    \  var operand2_string_index15 = 0\n    var operator_string_index16 = 0\n    var\
    \ operand1_string_index16 = 0\n    var operand2_string_index16 = 0\n    var operator_string_index17\
    \ = 0\n    var operand1_string_index17 = 0\n    var operand2_string_index17 =\
    \ 0\n    var operator_string_index18 = 0\n    var operand1_string_index18 = 0\n\
    \    var operand2_string_index18 = 0\n    var operator_string_index19 = 0\n  \
    \  var operand1_string_index19 = 0\n    var operand2_string_index19 = 0\n    var\
    \ operator_string_index20 = 0\n    var operand1_string_index20 = 0\n    var operand2_string_index20\
    \ = 0\n    var operator_string_index21 = 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4,\
    \ 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2,\
    \ 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3,\
    \ 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpj2nw0prl.swift:21:9: warning: initialization of variable 'result'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var result = 0\n    ~~~~^~~~~~\n    _\n/tmp/tmpj2nw0prl.swift:22:9: warning:\
    \ initialization of variable 'i' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var i = 0\n    ~~~~^\n    _\n/tmp/tmpj2nw0prl.swift:23:9:\
    \ warning: initialization of variable 'j' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var j = 0\n    ~~~~^\n    _\n/tmp/tmpj2nw0prl.swift:24:9:\
    \ warning: initialization of variable 'k' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var k = 0\n    ~~~~^\n    _\n/tmp/tmpj2nw0prl.swift:25:9:\
    \ warning: initialization of variable 'operator_index' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var operator_index = 0\n\
    \    ~~~~^~~~~~~~~~~~~~\n    _\n/tmp/tmpj2nw0prl.swift:26:9: warning: initialization\
    \ of variable 'operand1_index' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var operand1_index = 0\n    ~~~~^~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpj2nw0prl.swift:27:9: warning: initialization of variable 'operand2_index'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var operand2_index = 0\n    ~~~~^~~~~~~~~~~~~~\n    _\n/tmp/tmpj2nw0prl.swift:28:9:\
    \ warning: initialization of variable 'operator_string' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var operator_string = \"\
    \"\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpj2nw0prl.swift:29:9: warning: initialization\
    \ of variable 'operand1_string' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var operand1_string = \"\"\n    ~~~~^~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpj2nw0prl.swift:30:9: warning: initialization of variable 'operand2_string'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var operand2_string = \"\"\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpj2nw0prl.swift:31:9:\
    \ warning: initialization of variable 'o"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmppwepw1fj.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmppwepw1fj.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    var i = 0\n    var\
    \ j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o\
    \ = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t =\
    \ 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n\
    \    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n \
    \   var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n  \
    \  var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n   \
    \ var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var\
    \ t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y\
    \ = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d =\
    \ 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n\
    \    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n \
    \   var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n  \
    \  var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n   \
    \ var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var\
    \ d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i\
    \ = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n =\
    \ 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n\
    \    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n \
    \   var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n  \
    \  var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n   \
    \ var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var\
    \ n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s\
    \ = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x =\
    \ 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n\
    \    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpvqaeqanu.swift:48:9: error: invalid redeclaration of 'i'\n    var\
    \ i = 0\n        ^\n/tmp/tmpvqaeqanu.swift:22:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmpvqaeqanu.swift:49:9: error: invalid\
    \ redeclaration of 'j'\n    var j = 0\n        ^\n/tmp/tmpvqaeqanu.swift:23:9:\
    \ note: 'j' previously declared here\n    var j = 0\n        ^\n/tmp/tmpvqaeqanu.swift:50:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmpvqaeqanu.swift:24:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmpvqaeqanu.swift:51:9:\
    \ error: invalid redeclaration of 'l'\n    var l = 0\n        ^\n/tmp/tmpvqaeqanu.swift:25:9:\
    \ note: 'l' previously declared here\n    var l = 0\n        ^\n/tmp/tmpvqaeqanu.swift:52:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 0\n        ^\n/tmp/tmpvqaeqanu.swift:26:9:\
    \ note: 'm' previously declared here\n    var m = 0\n        ^\n/tmp/tmpvqaeqanu.swift:53:9:\
    \ error: invalid redeclaration of 'n'\n    var n = 0\n        ^\n/tmp/tmpvqaeqanu.swift:27:9:\
    \ note: 'n' previously declared here\n    var n = 0\n        ^\n/tmp/tmpvqaeqanu.swift:54:9:\
    \ error: invalid redeclaration of 'o'\n    var o = 0\n        ^\n/tmp/tmpvqaeqanu.swift:28:9:\
    \ note: 'o' previously declared here\n    var o = 0\n        ^\n/tmp/tmpvqaeqanu.swift:55:9:\
    \ error: invalid redeclaration of 'p'\n    var p = 0\n        ^\n/tmp/tmpvqaeqanu.swift:29:9:\
    \ note: 'p' previously declared here\n    var p = 0\n        ^\n/tmp/tmpvqaeqanu.swift:56:9:\
    \ error: invalid redeclaration of 'q'\n    var q = 0\n        ^\n/tmp/tmpvqaeqanu.swift:30:9:\
    \ note: 'q' previously declared here\n    var q = 0\n        ^\n/tmp/tmpvqaeqanu.swift:57:9:\
    \ error: invalid redeclaration of 'r'\n    var r = 0\n        ^\n/tmp/tmpvqaeqanu.swift:31:9:\
    \ note: 'r' previously declared here\n    var r = 0\n        ^\n/tmp/tmpvqaeqanu.swift:58:9:\
    \ error: invalid redeclaration of 's'\n    var s = 0\n        ^\n/tmp/tmpvqaeqanu.swift:32:9:\
    \ note: 's' previously declared here\n    var s = 0\n        ^\n/tmp/tmpvqaeqanu.swift:59:9:\
    \ error: invalid redeclaration of 't'\n    var t = 0\n        ^\n/tmp/tmpvqae"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Invalid operator\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp1965_ov2.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmp1965_ov2.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: -4
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    \n    // Your code here\n    \n    return\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(do_algebra(operator: [\"**\"\
    , \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"\
    +\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: Exception
  stderr: 'tmpecndbhh_/tmpecndbhh_.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3388a08c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33886ffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b33886ff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b33886fe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpecndbhh_                        0x000055936379a47b <unavailable> + 5243

    5    libc.so.6                          0x00002b3388bf4460 __libc_start_main +
    245

    6    tmpecndbhh_                        0x000055936379a029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    \n    var result = 0\n    \n    for\
    \ index in 0..<operand.count {\n        switch operator[index] {\n        case\
    \ \"+\":\n            result += operand[index]\n        case \"-\":\n        \
    \    result -= operand[index]\n        case \"*\":\n            result *= operand[index]\n\
    \        case \"//\":\n            result /= operand[index]\n        case \"**\"\
    :\n            result **= operand[index]\n        default:\n            break\n\
    \        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4,\
    \ 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2,\
    \ 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3,\
    \ 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpsnty_v84.swift:25:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmpsnty_v84.swift:25:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    \n    var result = 0\n    \n    for\
    \ index in 0..<operator.count {\n        \n        var operator = operator[index]\n\
    \        var operand = operand[index]\n        \n        switch operator {\n \
    \           \n        case \"+\":\n            result += operand\n        case\
    \ \"-\":\n            result -= operand\n        case \"*\":\n            result\
    \ *= operand\n        case \"//\":\n            result /= operand\n        case\
    \ \"**\":\n            result **= operand\n            \n        default:\n  \
    \          break\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp5xlcjt1o.swift:24:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmp5xlcjt1o.swift:24:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmp5xlcjt1o.swift:26:13: error: keyword 'operator'\
    \ cannot be used as an identifier here\n        var operator = operator[index]\n\
    \            ^\n/tmp/tmp5xlcjt1o.swift:26:13: note: if this name is unavoidable,\
    \ use backticks to escape it\n        var operator = operator[index]\n       \
    \     ^~~~~~~~\n            `operator`\n/tmp/tmp5xlcjt1o.swift:26:24: error: expected\
    \ initial value after '='\n        var operator = operator[index]\n          \
    \             ^\n/tmp/tmp5xlcjt1o.swift:26:23: error: consecutive statements on\
    \ a line must be separated by ';'\n        var operator = operator[index]\n  \
    \                    ^\n                      ;\n/tmp/tmp5xlcjt1o.swift:26:32:\
    \ error: '[' is not allowed in operator names\n        var operator = operator[index]\n\
    \                               ^\n/tmp/tmp5xlcjt1o.swift:29:16: error: expected\
    \ expression in 'switch' statement\n        switch operator {\n              \
    \ ^\n/tmp/tmp5xlcjt1o.swift:29:25: error: expected operator name in operator declaration\n\
    \        switch operator {\n                        ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmppwepw1fj.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmppwepw1fj.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmppwepw1fj.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmppwepw1fj.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Invalid operator\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp1965_ov2.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmp1965_ov2.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    var index = 0\n\
    \    var operator_index = 0\n    var operator_index2 = 0\n    var operator_index3\
    \ = 0\n    var operator_index4 = 0\n    var operator_index5 = 0\n    var operator_index6\
    \ = 0\n    var operator_index7 = 0\n    var operator_index8 = 0\n    var operator_index9\
    \ = 0\n    var operator_index10 = 0\n    var operator_index11 = 0\n    var operator_index12\
    \ = 0\n    var operator_index13 = 0\n    var operator_index14 = 0\n    var operator_index15\
    \ = 0\n    var operator_index16 = 0\n    var operator_index17 = 0\n    var operator_index18\
    \ = 0\n    var operator_index19 = 0\n    var operator_index20 = 0\n    var operator_index21\
    \ = 0\n    var operator_index22 = 0\n    var operator_index23 = 0\n    var operator_index24\
    \ = 0\n    var operator_index25 = 0\n    var operator_index26 = 0\n    var operator_index27\
    \ = 0\n    var operator_index28 = 0\n    var operator_index29 = 0\n    var operator_index30\
    \ = 0\n    var operator_index31 = 0\n    var operator_index32 = 0\n    var operator_index33\
    \ = 0\n    var operator_index34 = 0\n    var operator_index35 = 0\n    var operator_index36\
    \ = 0\n    var operator_index37 = 0\n    var operator_index38 = 0\n    var operator_index39\
    \ = 0\n    var operator_index40 = 0\n    var operator_index41 = 0\n    var operator_index42\
    \ = 0\n    var operator_index43 = 0\n    var operator_index44 = 0\n    var operator_index45\
    \ = 0\n    var operator_index46 = 0\n    var operator_index47 = 0\n    var operator_index48\
    \ = 0\n    var operator_index49 = 0\n    var operator_index50 = 0\n    var operator_index51\
    \ = 0\n    var operator_index52 = 0\n    var operator_index53 = 0\n    var operator_index54\
    \ = 0\n    var operator_index55 = 0\n    var operator_index56 = 0\n    var operator_index57\
    \ = 0\n    var operator_index58 = 0\n    var operator_index59 = 0\n    var operator_index60\
    \ = 0\n    var operator_index61 = 0\n    var operator_index62 = 0\n    var operator_index63\
    \ = 0\n    var operator_index64 = 0\n    var operator_index65 = 0\n    var operator_index66\
    \ = 0\n    var operator_index67 = 0\n    var operator_index68 = 0\n    var operator_index69\
    \ = 0\n    var operator_index70 = 0\n    var operator_index71 = 0\n    var operator_index72\
    \ = 0\n    var operator_index73 = 0\n    var operator_index74 = 0\n    var operator_index75\
    \ = 0\n    var operator_index76 = 0\n    var operator_index77 = 0\n    var operator_index78\
    \ = 0\n    var operator_index79 = 0\n    var operator_index80 = 0\n    var operator_index81\
    \ = 0\n    var operator_index82 = 0\n    var operator_index83 = 0\n    var operator_index84\
    \ = 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmppd3q5y3p.swift:107:8: error: expected pattern\n    var \n     \
    \  ^\n/tmp/tmppd3q5y3p.swift:21:9: warning: initialization of variable 'result'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var result = 0\n    ~~~~^~~~~~\n    _\n/tmp/tmppd3q5y3p.swift:22:9: warning:\
    \ initialization of variable 'index' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var index = 0\n    ~~~~^~~~~\n    _\n/tmp/tmppd3q5y3p.swift:23:9:\
    \ warning: initialization of variable 'operator_index' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var operator_index = 0\n\
    \    ~~~~^~~~~~~~~~~~~~\n    _\n/tmp/tmppd3q5y3p.swift:24:9: warning: initialization\
    \ of variable 'operator_index2' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var operator_index2 = 0\n    ~~~~^~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmppd3q5y3p.swift:25:9: warning: initialization of variable 'operator_index3'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var operator_index3 = 0\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmppd3q5y3p.swift:26:9:\
    \ warning: initialization of variable 'operator_index4' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var operator_index4 = 0\n\
    \    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmppd3q5y3p.swift:27:9: warning: initialization\
    \ of variable 'operator_index5' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var operator_index5 = 0\n    ~~~~^~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmppd3q5y3p.swift:28:9: warning: initialization of variable 'operator_index6'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var operator_index6 = 0\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmppd3q5y3p.swift:29:9:\
    \ warning: initialization of variable 'operator_index7' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var operator_index7 = 0\n\
    \    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmppd3q5y3p.swift:30:9: warning: initialization\
    \ of variable 'operator_index8' was never used; consider re"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    var i = 0\n    for\
    \ _ in 0..<operand.count {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i]\n        case \"-\":\n            result -=\
    \ operand[i]\n        case \"*\":\n            result *= operand[i]\n        case\
    \ \"//\":\n            result /= operand[i]\n        case \"**\":\n          \
    \  result **= operand[i]\n        default:\n            fatalError(\"unknown operator\"\
    )\n        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpykevpzv4.swift:24:16: error: expected expression in 'switch' statement\n\
    \        switch operator[i] {\n               ^\n/tmp/tmpykevpzv4.swift:24:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operandValue = operand[index]\n        let operatorValue = operator[index]\n\
    \        switch operatorValue {\n        case \"+\":\n            result += operandValue\n\
    \        case \"-\":\n            result -= operandValue\n        case \"*\":\n\
    \            result *= operandValue\n        case \"//\":\n            result\
    \ /= operandValue\n        case \"**\":\n            result **= operandValue\n\
    \        default:\n            break\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpmwif7tdr.swift:24:29: error: expected initial value after '='\n\
    \        let operatorValue = operator[index]\n                            ^\n\
    /tmp/tmpmwif7tdr.swift:24:28: error: consecutive statements on a line must be\
    \ separated by ';'\n        let operatorValue = operator[index]\n            \
    \               ^\n                           ;\n/tmp/tmpmwif7tdr.swift:24:37:\
    \ error: '[' is not allowed in operator names\n        let operatorValue = operator[index]\n\
    \                                    ^\n/tmp/tmpmwif7tdr.swift:35:20: error: cannot\
    \ find operator '**=' in scope\n            result **= operandValue\n        \
    \           ^~~\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operandValue = operand[index]\n        switch operator[index]\
    \ {\n        case \"+\":\n            result += operandValue\n        case \"\
    -\":\n            result -= operandValue\n        case \"*\":\n            result\
    \ *= operandValue\n        case \"/\":\n            result /= operandValue\n \
    \       case \"**\":\n            result **= operandValue\n        default:\n\
    \            break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpp3fxkiuu.swift:24:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmpp3fxkiuu.swift:24:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: -4
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    \n    // TODO: Write your code here\n\
    \    \n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: Exception
  stderr: 'tmp_946jfrm/tmp_946jfrm.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94d0e6cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94d0b63b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94d0b63988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94d0b627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_946jfrm                        0x000055d5c6efe47b <unavailable> + 5243

    5    libc.so.6                          0x00002b94d1058460 __libc_start_main +
    245

    6    tmp_946jfrm                        0x000055d5c6efe029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operator.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"unknown operator\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpli9fb4sv.swift:22:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmpli9fb4sv.swift:22:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmpli9fb4sv.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[index] {\n               ^\n\
    /tmp/tmpli9fb4sv.swift:23:24: error: '[' is not allowed in operator names\n  \
    \      switch operator[index] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operator.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Invalid operator\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp220cir9b.swift:22:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmp220cir9b.swift:22:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmp220cir9b.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[index] {\n               ^\n\
    /tmp/tmp220cir9b.swift:23:24: error: '[' is not allowed in operator names\n  \
    \      switch operator[index] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operator.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpdkmv50cu.swift:22:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmpdkmv50cu.swift:22:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmpdkmv50cu.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[index] {\n               ^\n\
    /tmp/tmpdkmv50cu.swift:23:24: error: '[' is not allowed in operator names\n  \
    \      switch operator[index] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Invalid operator\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp1965_ov2.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmp1965_ov2.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operandValue = operand[index]\n        let operatorValue = operator[index]\n\
    \        switch operatorValue {\n        case \"+\":\n            result += operandValue\n\
    \        case \"-\":\n            result -= operandValue\n        case \"*\":\n\
    \            result *= operandValue\n        case \"//\":\n            result\
    \ /= operandValue\n        case \"**\":\n            result **= operandValue\n\
    \        default:\n            fatalError(\"Invalid operator: \\(operatorValue)\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpt2xyu_ur.swift:24:29: error: expected initial value after '='\n\
    \        let operatorValue = operator[index]\n                            ^\n\
    /tmp/tmpt2xyu_ur.swift:24:28: error: consecutive statements on a line must be\
    \ separated by ';'\n        let operatorValue = operator[index]\n            \
    \               ^\n                           ;\n/tmp/tmpt2xyu_ur.swift:24:37:\
    \ error: '[' is not allowed in operator names\n        let operatorValue = operator[index]\n\
    \                                    ^\n/tmp/tmpt2xyu_ur.swift:35:20: error: cannot\
    \ find operator '**=' in scope\n            result **= operandValue\n        \
    \           ^~~\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operandValue = operand[index]\n        switch operator[index]\
    \ {\n        case \"+\":\n            result += operandValue\n        case \"\
    -\":\n            result -= operandValue\n        case \"*\":\n            result\
    \ *= operandValue\n        case \"//\":\n            result /= operandValue\n\
    \        case \"**\":\n            result **= operandValue\n        default:\n\
    \            fatalError(\"Unknown operator: \\(operator[index])\")\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp05vn3bl0.swift:24:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmp05vn3bl0.swift:24:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmppwepw1fj.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmppwepw1fj.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operator.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Invalid operator:\
    \ \\(operator[index])\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmponvtmv4p.swift:22:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmponvtmv4p.swift:22:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmponvtmv4p.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[index] {\n               ^\n\
    /tmp/tmponvtmv4p.swift:23:24: error: '[' is not allowed in operator names\n  \
    \      switch operator[index] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let value = operand[index]\n        switch operator[index] {\n  \
    \      case \"+\":\n            result += value\n        case \"-\":\n       \
    \     result -= value\n        case \"*\":\n            result *= value\n    \
    \    case \"//\":\n            result /= value\n        case \"**\":\n       \
    \     result **= value\n        default:\n            fatalError(\"Invalid operator\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpa7o0ogbx.swift:24:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmpa7o0ogbx.swift:24:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Invalid operator\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp1965_ov2.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmp1965_ov2.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operandValue = operand[index]\n        let operatorValue = operator[index]\n\
    \        switch operatorValue {\n        case \"+\":\n            result += operandValue\n\
    \        case \"-\":\n            result -= operandValue\n        case \"*\":\n\
    \            result *= operandValue\n        case \"/\":\n            result /=\
    \ operandValue\n        case \"**\":\n            result **= operandValue\n  \
    \      default:\n            fatalError(\"Invalid operator: \\(operatorValue)\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpy9ixha9_.swift:24:29: error: expected initial value after '='\n\
    \        let operatorValue = operator[index]\n                            ^\n\
    /tmp/tmpy9ixha9_.swift:24:28: error: consecutive statements on a line must be\
    \ separated by ';'\n        let operatorValue = operator[index]\n            \
    \               ^\n                           ;\n/tmp/tmpy9ixha9_.swift:24:37:\
    \ error: '[' is not allowed in operator names\n        let operatorValue = operator[index]\n\
    \                                    ^\n/tmp/tmpy9ixha9_.swift:35:20: error: cannot\
    \ find operator '**=' in scope\n            result **= operandValue\n        \
    \           ^~~\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Unknown operator:\
    \ \\(operator[index])\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpbzmu7h7m.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmpbzmu7h7m.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operator.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpdkmv50cu.swift:22:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmpdkmv50cu.swift:22:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmpdkmv50cu.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[index] {\n               ^\n\
    /tmp/tmpdkmv50cu.swift:23:24: error: '[' is not allowed in operator names\n  \
    \      switch operator[index] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    var i = 0\n    var\
    \ j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o\
    \ = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t =\
    \ 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n\
    \    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n \
    \   var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n  \
    \  var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n   \
    \ var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var\
    \ t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y\
    \ = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d =\
    \ 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n\
    \    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n \
    \   var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n  \
    \  var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n   \
    \ var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var\
    \ d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i\
    \ = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n =\
    \ 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n\
    \    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n \
    \   var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n  \
    \  var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n   \
    \ var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var\
    \ n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s\
    \ = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x =\
    \ 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n\
    \    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpvqaeqanu.swift:48:9: error: invalid redeclaration of 'i'\n    var\
    \ i = 0\n        ^\n/tmp/tmpvqaeqanu.swift:22:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmpvqaeqanu.swift:49:9: error: invalid\
    \ redeclaration of 'j'\n    var j = 0\n        ^\n/tmp/tmpvqaeqanu.swift:23:9:\
    \ note: 'j' previously declared here\n    var j = 0\n        ^\n/tmp/tmpvqaeqanu.swift:50:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmpvqaeqanu.swift:24:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmpvqaeqanu.swift:51:9:\
    \ error: invalid redeclaration of 'l'\n    var l = 0\n        ^\n/tmp/tmpvqaeqanu.swift:25:9:\
    \ note: 'l' previously declared here\n    var l = 0\n        ^\n/tmp/tmpvqaeqanu.swift:52:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 0\n        ^\n/tmp/tmpvqaeqanu.swift:26:9:\
    \ note: 'm' previously declared here\n    var m = 0\n        ^\n/tmp/tmpvqaeqanu.swift:53:9:\
    \ error: invalid redeclaration of 'n'\n    var n = 0\n        ^\n/tmp/tmpvqaeqanu.swift:27:9:\
    \ note: 'n' previously declared here\n    var n = 0\n        ^\n/tmp/tmpvqaeqanu.swift:54:9:\
    \ error: invalid redeclaration of 'o'\n    var o = 0\n        ^\n/tmp/tmpvqaeqanu.swift:28:9:\
    \ note: 'o' previously declared here\n    var o = 0\n        ^\n/tmp/tmpvqaeqanu.swift:55:9:\
    \ error: invalid redeclaration of 'p'\n    var p = 0\n        ^\n/tmp/tmpvqaeqanu.swift:29:9:\
    \ note: 'p' previously declared here\n    var p = 0\n        ^\n/tmp/tmpvqaeqanu.swift:56:9:\
    \ error: invalid redeclaration of 'q'\n    var q = 0\n        ^\n/tmp/tmpvqaeqanu.swift:30:9:\
    \ note: 'q' previously declared here\n    var q = 0\n        ^\n/tmp/tmpvqaeqanu.swift:57:9:\
    \ error: invalid redeclaration of 'r'\n    var r = 0\n        ^\n/tmp/tmpvqaeqanu.swift:31:9:\
    \ note: 'r' previously declared here\n    var r = 0\n        ^\n/tmp/tmpvqaeqanu.swift:58:9:\
    \ error: invalid redeclaration of 's'\n    var s = 0\n        ^\n/tmp/tmpvqaeqanu.swift:32:9:\
    \ note: 's' previously declared here\n    var s = 0\n        ^\n/tmp/tmpvqaeqanu.swift:59:9:\
    \ error: invalid redeclaration of 't'\n    var t = 0\n        ^\n/tmp/tmpvqae"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operandValue = operand[index]\n        let operatorValue = operator[index]\n\
    \        switch operatorValue {\n        case \"+\":\n            result += operandValue\n\
    \        case \"-\":\n            result -= operandValue\n        case \"*\":\n\
    \            result *= operandValue\n        case \"//\":\n            result\
    \ /= operandValue\n        case \"**\":\n            result **= operandValue\n\
    \        default:\n            fatalError(\"Invalid operator: \\(operatorValue)\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpt2xyu_ur.swift:24:29: error: expected initial value after '='\n\
    \        let operatorValue = operator[index]\n                            ^\n\
    /tmp/tmpt2xyu_ur.swift:24:28: error: consecutive statements on a line must be\
    \ separated by ';'\n        let operatorValue = operator[index]\n            \
    \               ^\n                           ;\n/tmp/tmpt2xyu_ur.swift:24:37:\
    \ error: '[' is not allowed in operator names\n        let operatorValue = operator[index]\n\
    \                                    ^\n/tmp/tmpt2xyu_ur.swift:35:20: error: cannot\
    \ find operator '**=' in scope\n            result **= operandValue\n        \
    \           ^~~\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    \n    for index\
    \ in 0..<operator.count {\n        switch operator[index] {\n        case \"+\"\
    : result = result + operand[index]\n        case \"-\": result = result - operand[index]\n\
    \        case \"*\": result = result * operand[index]\n        case \"//\": result\
    \ = result / operand[index]\n        case \"**\": result = result ** operand[index]\n\
    \        default: break\n        }\n    }\n    \n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpomtdpkig.swift:23:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmpomtdpkig.swift:23:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmpomtdpkig.swift:24:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[index] {\n               ^\n\
    /tmp/tmpomtdpkig.swift:24:24: error: '[' is not allowed in operator names\n  \
    \      switch operator[index] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Invalid operator:\
    \ \\(operator[index])\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpx08dahp1.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmpx08dahp1.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operator.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpdkmv50cu.swift:22:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmpdkmv50cu.swift:22:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmpdkmv50cu.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[index] {\n               ^\n\
    /tmp/tmpdkmv50cu.swift:23:24: error: '[' is not allowed in operator names\n  \
    \      switch operator[index] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmppwepw1fj.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmppwepw1fj.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmppwepw1fj.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmppwepw1fj.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    var i = 0\n    var\
    \ j = 0\n    var k = 0\n    for k in 0..<operand.count {\n        switch operator[k]\
    \ {\n        case \"+\":\n            result += operand[i]\n            i += 1\n\
    \        case \"-\":\n            result -= operand[i]\n            i += 1\n \
    \       case \"*\":\n            result *= operand[i]\n            i += 1\n  \
    \      case \"//\":\n            result /= operand[i]\n            i += 1\n  \
    \      case \"**\":\n            result **= operand[i]\n            i += 1\n \
    \       default:\n            break\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmph8stlt97.swift:26:16: error: expected expression in 'switch' statement\n\
    \        switch operator[k] {\n               ^\n/tmp/tmph8stlt97.swift:26:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[k] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operator.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Unknown operator:\
    \ \\(operator[index])\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpe258gs18.swift:22:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmpe258gs18.swift:22:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmpe258gs18.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[index] {\n               ^\n\
    /tmp/tmpe258gs18.swift:23:24: error: '[' is not allowed in operator names\n  \
    \      switch operator[index] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Invalid operator\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp1965_ov2.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmp1965_ov2.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    var i = 0\n    for\
    \ _ in 0..<operand.count {\n        if i == operator.count {\n            break\n\
    \        }\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i]\n        case \"-\":\n            result -= operand[i]\n     \
    \   case \"*\":\n            result *= operand[i]\n        case \"//\":\n    \
    \        result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        default:\n            break\n        }\n        i += 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpyqn2q7qe.swift:24:17: error: expected expression after operator\n\
    \        if i == operator.count {\n                ^\n/tmp/tmpyqn2q7qe.swift:24:25:\
    \ error: '.' is not allowed in operator names\n        if i == operator.count\
    \ {\n                        ^\n/tmp/tmpyqn2q7qe.swift:27:16: error: expected\
    \ expression in 'switch' statement\n        switch operator[i] {\n           \
    \    ^\n/tmp/tmpyqn2q7qe.swift:27:24: error: '[' is not allowed in operator names\n\
    \        switch operator[i] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    var i = 0\n    while\
    \ i < operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i]\n        case \"-\":\n            result -= operand[i]\n\
    \        case \"*\":\n            result *= operand[i]\n        case \"//\":\n\
    \            result /= operand[i]\n        case \"**\":\n            result **=\
    \ operand[i]\n        default:\n            fatalError(\"Invalid operator\")\n\
    \        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpzbq76o_b.swift:23:15: error: expected expression after operator\n\
    \    while i < operator.count {\n              ^\n/tmp/tmpzbq76o_b.swift:23:23:\
    \ error: '.' is not allowed in operator names\n    while i < operator.count {\n\
    \                      ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmppwepw1fj.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmppwepw1fj.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    \n    // Initialize result to zero\n\
    \    var result = 0\n    \n    // Iterate through each operator in operator array\n\
    \    for operator in operator {\n        \n        // Initialize a variable to\
    \ store the current operator\n        var currentOperator = operator\n       \
    \ \n        // Iterate through each operand in operand array\n        for operand\
    \ in operand {\n            \n            // If the current operand is less than\
    \ zero, break\n            if operand < 0 {\n                break\n         \
    \   }\n            \n            // If the current operator is equal to '+', then\
    \ add the current operand to the result\n            if currentOperator == \"\
    +\" {\n                result += operand\n            }\n            \n      \
    \      // If the current operator is '-', subtract the current operand from the\
    \ result\n            else if currentOperator == \"-\" {\n                result\
    \ -= operand\n            }\n            \n            // If the current operator\
    \ is '*', multiply the current operand to the result\n            else if currentOperator\
    \ == \"*\" {\n                result *= operand\n            }\n            \n\
    \            // If the current operator is '//', floor the current operand to\
    \ the result\n            else if currentOperator == \"//\" {\n              \
    \  result = floor(operand)\n            }\n            \n            // If the\
    \ current operator is '**', raise the operand to the power of ten\n          \
    \  else if currentOperator == \"**\" {\n                result = pow(operand,\
    \ 10)\n            }\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpen4lh4db.swift:26:9: error: expected pattern\n    for operator\
    \ in operator {\n        ^\n/tmp/tmpen4lh4db.swift:26:9: error: expected Sequence\
    \ expression for for-each loop\n    for operator in operator {\n        ^\n/tmp/tmpen4lh4db.swift:26:9:\
    \ error: expected '{' to start the body of for-each loop\n    for operator in\
    \ operator {\n        ^\n/tmp/tmpen4lh4db.swift:29:31: error: expected initial\
    \ value after '='\n        var currentOperator = operator\n                  \
    \            ^\n/tmp/tmpen4lh4db.swift:29:30: error: consecutive statements on\
    \ a line must be separated by ';'\n        var currentOperator = operator\n  \
    \                           ^\n                             ;\n/tmp/tmpen4lh4db.swift:29:39:\
    \ error: expected operator name in operator declaration\n        var currentOperator\
    \ = operator\n                                      ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    var i = 0\n    var\
    \ j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o\
    \ = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t =\
    \ 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n\
    \    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n \
    \   var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n  \
    \  var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n   \
    \ var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var\
    \ t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y\
    \ = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d =\
    \ 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n\
    \    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n \
    \   var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n  \
    \  var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n   \
    \ var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var\
    \ d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i\
    \ = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n =\
    \ 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n\
    \    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n \
    \   var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n  \
    \  var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n   \
    \ var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var\
    \ n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s\
    \ = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x =\
    \ 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n\
    \    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpvqaeqanu.swift:48:9: error: invalid redeclaration of 'i'\n    var\
    \ i = 0\n        ^\n/tmp/tmpvqaeqanu.swift:22:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmpvqaeqanu.swift:49:9: error: invalid\
    \ redeclaration of 'j'\n    var j = 0\n        ^\n/tmp/tmpvqaeqanu.swift:23:9:\
    \ note: 'j' previously declared here\n    var j = 0\n        ^\n/tmp/tmpvqaeqanu.swift:50:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmpvqaeqanu.swift:24:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmpvqaeqanu.swift:51:9:\
    \ error: invalid redeclaration of 'l'\n    var l = 0\n        ^\n/tmp/tmpvqaeqanu.swift:25:9:\
    \ note: 'l' previously declared here\n    var l = 0\n        ^\n/tmp/tmpvqaeqanu.swift:52:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 0\n        ^\n/tmp/tmpvqaeqanu.swift:26:9:\
    \ note: 'm' previously declared here\n    var m = 0\n        ^\n/tmp/tmpvqaeqanu.swift:53:9:\
    \ error: invalid redeclaration of 'n'\n    var n = 0\n        ^\n/tmp/tmpvqaeqanu.swift:27:9:\
    \ note: 'n' previously declared here\n    var n = 0\n        ^\n/tmp/tmpvqaeqanu.swift:54:9:\
    \ error: invalid redeclaration of 'o'\n    var o = 0\n        ^\n/tmp/tmpvqaeqanu.swift:28:9:\
    \ note: 'o' previously declared here\n    var o = 0\n        ^\n/tmp/tmpvqaeqanu.swift:55:9:\
    \ error: invalid redeclaration of 'p'\n    var p = 0\n        ^\n/tmp/tmpvqaeqanu.swift:29:9:\
    \ note: 'p' previously declared here\n    var p = 0\n        ^\n/tmp/tmpvqaeqanu.swift:56:9:\
    \ error: invalid redeclaration of 'q'\n    var q = 0\n        ^\n/tmp/tmpvqaeqanu.swift:30:9:\
    \ note: 'q' previously declared here\n    var q = 0\n        ^\n/tmp/tmpvqaeqanu.swift:57:9:\
    \ error: invalid redeclaration of 'r'\n    var r = 0\n        ^\n/tmp/tmpvqaeqanu.swift:31:9:\
    \ note: 'r' previously declared here\n    var r = 0\n        ^\n/tmp/tmpvqaeqanu.swift:58:9:\
    \ error: invalid redeclaration of 's'\n    var s = 0\n        ^\n/tmp/tmpvqaeqanu.swift:32:9:\
    \ note: 's' previously declared here\n    var s = 0\n        ^\n/tmp/tmpvqaeqanu.swift:59:9:\
    \ error: invalid redeclaration of 't'\n    var t = 0\n        ^\n/tmp/tmpvqae"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Invalid operator\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp1965_ov2.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmp1965_ov2.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmppwepw1fj.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmppwepw1fj.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    var i = 0\n    for\
    \ _ in 0..<operand.count {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i]\n        case \"-\":\n            result -=\
    \ operand[i]\n        case \"*\":\n            result *= operand[i]\n        case\
    \ \"//\":\n            result /= operand[i]\n        case \"**\":\n          \
    \  result **= operand[i]\n        default:\n            fatalError(\"Invalid operator\"\
    )\n        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpxzg72_at.swift:24:16: error: expected expression in 'switch' statement\n\
    \        switch operator[i] {\n               ^\n/tmp/tmpxzg72_at.swift:24:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmppwepw1fj.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmppwepw1fj.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    var i = 0\n    for\
    \ _ in 0..<operand.count {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i]\n        case \"-\":\n            result -=\
    \ operand[i]\n        case \"*\":\n            result *= operand[i]\n        case\
    \ \"//\":\n            result /= operand[i]\n        case \"**\":\n          \
    \  result **= operand[i]\n        default:\n            fatalError(\"Unknown operator:\
    \ \\(operator[i])\")\n        }\n        i += 1\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp65trm6rp.swift:24:16: error: expected expression in 'switch' statement\n\
    \        switch operator[i] {\n               ^\n/tmp/tmp65trm6rp.swift:24:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result: Int = 0\n    for index in\
    \ 0..<operator.count {\n        switch operator[index] {\n        case \"+\":\n\
    \            result += operand[index]\n        case \"-\":\n            result\
    \ -= operand[index]\n        case \"*\":\n            result *= operand[index]\n\
    \        case \"//\":\n            result /= operand[index]\n        case \"**\"\
    :\n            result **= operand[index]\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpmohwub9u.swift:22:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmpmohwub9u.swift:22:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmpmohwub9u.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[index] {\n               ^\n\
    /tmp/tmpmohwub9u.swift:23:24: error: '[' is not allowed in operator names\n  \
    \      switch operator[index] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let value = operand[index]\n        let operator = operator[index]\n\
    \        switch operator {\n        case \"+\":\n            result += value\n\
    \        case \"-\":\n            result -= value\n        case \"*\":\n     \
    \       result *= value\n        case \"//\":\n            result /= value\n \
    \       case \"**\":\n            result **= value\n        default:\n       \
    \     break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp_pz6v9_p.swift:24:13: error: keyword 'operator' cannot be used\
    \ as an identifier here\n        let operator = operator[index]\n            ^\n\
    /tmp/tmp_pz6v9_p.swift:24:13: note: if this name is unavoidable, use backticks\
    \ to escape it\n        let operator = operator[index]\n            ^~~~~~~~\n\
    \            `operator`\n/tmp/tmp_pz6v9_p.swift:24:24: error: expected initial\
    \ value after '='\n        let operator = operator[index]\n                  \
    \     ^\n/tmp/tmp_pz6v9_p.swift:24:23: error: consecutive statements on a line\
    \ must be separated by ';'\n        let operator = operator[index]\n         \
    \             ^\n                      ;\n/tmp/tmp_pz6v9_p.swift:24:32: error:\
    \ '[' is not allowed in operator names\n        let operator = operator[index]\n\
    \                               ^\n/tmp/tmp_pz6v9_p.swift:25:16: error: expected\
    \ expression in 'switch' statement\n        switch operator {\n              \
    \ ^\n/tmp/tmp_pz6v9_p.swift:25:25: error: expected operator name in operator declaration\n\
    \        switch operator {\n                        ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result: Int = 0\n    var i = 0\n\
    \    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n \
    \   var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n  \
    \  var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n   \
    \ var y = 0\n    var z = 0\n    var A = 0\n    var B = 0\n    var C = 0\n    var\
    \ D = 0\n    var E = 0\n    var F = 0\n    var G = 0\n    var H = 0\n    var I\
    \ = 0\n    var J = 0\n    var K = 0\n    var L = 0\n    var M = 0\n    var N =\
    \ 0\n    var O = 0\n    var P = 0\n    var Q = 0\n    var R = 0\n    var S = 0\n\
    \    var T = 0\n    var U = 0\n    var V = 0\n    var W = 0\n    var X = 0\n \
    \   var Y = 0\n    var Z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n  \
    \  var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n   \
    \ var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var\
    \ n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s\
    \ = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x =\
    \ 0\n    var y = 0\n    var z = 0\n    var A = 0\n    var B = 0\n    var C = 0\n\
    \    var D = 0\n    var E = 0\n    var F = 0\n    var G = 0\n    var H = 0\n \
    \   var I = 0\n    var J = 0\n    var K = 0\n    var L = 0\n    var M = 0\n  \
    \  var N = 0\n    var O = 0\n    var P = 0\n    var Q = 0\n    var R = 0\n   \
    \ var S = 0\n    var T = 0\n    var U = 0\n    var V = 0\n    var W = 0\n    var\
    \ X = 0\n    var Y = 0\n    var Z = 0\n    var a = 0\n    var b = 0\n    var c\
    \ = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h =\
    \ 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n\
    \    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n \
    \   var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n  \
    \  var x = 0\n    var y = 0\n    var z = 0\n    var A = 0\n    var B = 0\n   \
    \ var C = 0\n    var D = 0\n    var E = 0\n    var F = 0\n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpmw3vfel4.swift:74:9: error: invalid redeclaration of 'i'\n    var\
    \ i = 0\n        ^\n/tmp/tmpmw3vfel4.swift:22:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmpmw3vfel4.swift:75:9: error: invalid\
    \ redeclaration of 'j'\n    var j = 0\n        ^\n/tmp/tmpmw3vfel4.swift:23:9:\
    \ note: 'j' previously declared here\n    var j = 0\n        ^\n/tmp/tmpmw3vfel4.swift:76:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmpmw3vfel4.swift:24:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmpmw3vfel4.swift:77:9:\
    \ error: invalid redeclaration of 'l'\n    var l = 0\n        ^\n/tmp/tmpmw3vfel4.swift:25:9:\
    \ note: 'l' previously declared here\n    var l = 0\n        ^\n/tmp/tmpmw3vfel4.swift:78:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 0\n        ^\n/tmp/tmpmw3vfel4.swift:26:9:\
    \ note: 'm' previously declared here\n    var m = 0\n        ^\n/tmp/tmpmw3vfel4.swift:79:9:\
    \ error: invalid redeclaration of 'n'\n    var n = 0\n        ^\n/tmp/tmpmw3vfel4.swift:27:9:\
    \ note: 'n' previously declared here\n    var n = 0\n        ^\n/tmp/tmpmw3vfel4.swift:80:9:\
    \ error: invalid redeclaration of 'o'\n    var o = 0\n        ^\n/tmp/tmpmw3vfel4.swift:28:9:\
    \ note: 'o' previously declared here\n    var o = 0\n        ^\n/tmp/tmpmw3vfel4.swift:81:9:\
    \ error: invalid redeclaration of 'p'\n    var p = 0\n        ^\n/tmp/tmpmw3vfel4.swift:29:9:\
    \ note: 'p' previously declared here\n    var p = 0\n        ^\n/tmp/tmpmw3vfel4.swift:82:9:\
    \ error: invalid redeclaration of 'q'\n    var q = 0\n        ^\n/tmp/tmpmw3vfel4.swift:30:9:\
    \ note: 'q' previously declared here\n    var q = 0\n        ^\n/tmp/tmpmw3vfel4.swift:83:9:\
    \ error: invalid redeclaration of 'r'\n    var r = 0\n        ^\n/tmp/tmpmw3vfel4.swift:31:9:\
    \ note: 'r' previously declared here\n    var r = 0\n        ^\n/tmp/tmpmw3vfel4.swift:84:9:\
    \ error: invalid redeclaration of 's'\n    var s = 0\n        ^\n/tmp/tmpmw3vfel4.swift:32:9:\
    \ note: 's' previously declared here\n    var s = 0\n        ^\n/tmp/tmpmw3vfel4.swift:85:9:\
    \ error: invalid redeclaration of 't'\n    var t = 0\n        ^\n/tmp/tmpmw3v"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Invalid operator\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp1965_ov2.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmp1965_ov2.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result: Int = 0\n    \n    for index\
    \ in 0..<operator.count {\n        switch operator[index] {\n        case \"+\"\
    :\n            result += operand[index]\n        case \"-\":\n            result\
    \ -= operand[index]\n        case \"*\":\n            result *= operand[index]\n\
    \        case \"//\":\n            result /= operand[index]\n        case \"**\"\
    :\n            result **= operand[index]\n        default:\n            fatalError(\"\
    Invalid operator: \\(operator[index])\")\n        }\n    }\n    \n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpiu9ysfgh.swift:23:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmpiu9ysfgh.swift:23:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmpiu9ysfgh.swift:24:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[index] {\n               ^\n\
    /tmp/tmpiu9ysfgh.swift:24:24: error: '[' is not allowed in operator names\n  \
    \      switch operator[index] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    var i = 0\n    for\
    \ _ in 0..<operand.count {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i]\n        case \"-\":\n            result -=\
    \ operand[i]\n        case \"*\":\n            result *= operand[i]\n        case\
    \ \"//\":\n            result /= operand[i]\n        case \"**\":\n          \
    \  result **= operand[i]\n        default:\n            fatalError(\"Invalid operator:\
    \ \\(operator[i])\")\n        }\n        i += 1\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwpbgvyl0.swift:24:16: error: expected expression in 'switch' statement\n\
    \        switch operator[i] {\n               ^\n/tmp/tmpwpbgvyl0.swift:24:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operator.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Unknown operator:\
    \ \\(operator[index])\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpe258gs18.swift:22:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmpe258gs18.swift:22:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmpe258gs18.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[index] {\n               ^\n\
    /tmp/tmpe258gs18.swift:23:24: error: '[' is not allowed in operator names\n  \
    \      switch operator[index] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    var index = 0\n\
    \    var operatorIndex = 0\n    var operandIndex = 0\n    while index < operator.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[operandIndex]\n            operandIndex += 1\n        case \"-\"\
    :\n            result -= operand[operandIndex]\n            operandIndex += 1\n\
    \        case \"*\":\n            result *= operand[operandIndex]\n          \
    \  operandIndex += 1\n        case \"//\":\n            result /= operand[operandIndex]\n\
    \            operandIndex += 1\n        case \"**\":\n            result **= operand[operandIndex]\n\
    \            operandIndex += 1\n        default:\n            fatalError(\"Unexpected\
    \ operator: \\(operator[index])\")\n        }\n        index += 1\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpa4j8ol1d.swift:25:19: error: expected expression after operator\n\
    \    while index < operator.count {\n                  ^\n/tmp/tmpa4j8ol1d.swift:25:27:\
    \ error: '.' is not allowed in operator names\n    while index < operator.count\
    \ {\n                          ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operator.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpdkmv50cu.swift:22:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmpdkmv50cu.swift:22:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmpdkmv50cu.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[index] {\n               ^\n\
    /tmp/tmpdkmv50cu.swift:23:24: error: '[' is not allowed in operator names\n  \
    \      switch operator[index] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let value = operand[index]\n        let operator = operator[index]\n\
    \        switch operator {\n        case \"+\":\n            result += value\n\
    \        case \"-\":\n            result -= value\n        case \"*\":\n     \
    \       result *= value\n        case \"//\":\n            result /= value\n \
    \       case \"**\":\n            result **= value\n        default:\n       \
    \     fatalError(\"Invalid operator\")\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpzetj554c.swift:24:13: error: keyword 'operator' cannot be used\
    \ as an identifier here\n        let operator = operator[index]\n            ^\n\
    /tmp/tmpzetj554c.swift:24:13: note: if this name is unavoidable, use backticks\
    \ to escape it\n        let operator = operator[index]\n            ^~~~~~~~\n\
    \            `operator`\n/tmp/tmpzetj554c.swift:24:24: error: expected initial\
    \ value after '='\n        let operator = operator[index]\n                  \
    \     ^\n/tmp/tmpzetj554c.swift:24:23: error: consecutive statements on a line\
    \ must be separated by ';'\n        let operator = operator[index]\n         \
    \             ^\n                      ;\n/tmp/tmpzetj554c.swift:24:32: error:\
    \ '[' is not allowed in operator names\n        let operator = operator[index]\n\
    \                               ^\n/tmp/tmpzetj554c.swift:25:16: error: expected\
    \ expression in 'switch' statement\n        switch operator {\n              \
    \ ^\n/tmp/tmpzetj554c.swift:25:25: error: expected operator name in operator declaration\n\
    \        switch operator {\n                        ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Invalid operator\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp1965_ov2.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmp1965_ov2.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    var i = 0\n    for\
    \ _ in 0..<operand.count {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i]\n        case \"-\":\n            result -=\
    \ operand[i]\n        case \"*\":\n            result *= operand[i]\n        case\
    \ \"//\":\n            result /= operand[i]\n        case \"**\":\n          \
    \  result **= operand[i]\n        default:\n            fatalError(\"Invalid operator\"\
    )\n        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpxzg72_at.swift:24:16: error: expected expression in 'switch' statement\n\
    \        switch operator[i] {\n               ^\n/tmp/tmpxzg72_at.swift:24:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operator.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpdkmv50cu.swift:22:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmpdkmv50cu.swift:22:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmpdkmv50cu.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[index] {\n               ^\n\
    /tmp/tmpdkmv50cu.swift:23:24: error: '[' is not allowed in operator names\n  \
    \      switch operator[index] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Invalid operator\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp1965_ov2.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmp1965_ov2.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result: Int = 0\n    var i = 0\n\
    \    var j = 0\n    var k = 0\n    var operatorIndex = 0\n    var operandIndex\
    \ = 0\n    var operatorLength = operator.count\n    var operandLength = operand.count\n\
    \    \n    while i < operatorLength && j < operandLength {\n        switch operatorIndex\
    \ {\n        case 0:\n            switch operandIndex {\n            case 0:\n\
    \                result = operand[j] + operand[k]\n                i += 1\n  \
    \              j += 1\n            case 1:\n                result = operand[j]\
    \ - operand[k]\n                i += 1\n                j += 1\n            case\
    \ 2:\n                result = operand[j] * operand[k]\n                i += 1\n\
    \                j += 1\n            case 3:\n                result = operand[j]\
    \ / operand[k]\n                i += 1\n                j += 1\n            case\
    \ 4:\n                result = operand[j] % operand[k]\n                i += 1\n\
    \                j += 1\n            case 5:\n                result = operand[j]\
    \ ** operand[k]\n                i += 1\n                j += 1\n            default:\n\
    \                break\n            }\n        case 1:\n            switch operandIndex\
    \ {\n            case 0:\n                result = operand[j] + operand[k]\n \
    \               i += 1\n                j += 1\n            case 1:\n        \
    \        result = operand[j] - operand[k]\n                i += 1\n          \
    \      j += 1\n            case 2:\n                result = operand[j] * operand[k]\n\
    \                i += 1\n                j += 1\n            case 3:\n       \
    \         result = operand[j] / operand[k]\n                i += 1\n         \
    \       j += 1\n            case 4:\n                result = operand[j] % operand[k]\n\
    \                i += 1\n                j += 1\n            case 5:\n       \
    \         result = operand[j] ** operand[k]\n                i += 1\n        \
    \        j += 1\n            default:\n                break\n            }\n\
    \        case 2:\n            switch operandIndex {\n            case 0:\n   \
    \             result = operand[j] + operand[k]\n                i += 1\n     \
    \           j += 1\n            case 1:\n                result = operand[j] -\
    \ operand[k]\n                i += 1\n                j += 1\n            case\
    \ 2:\n                result = operand[j] * operand[k]\n                i += 1\n\
    \                j += 1\n            case 3:\n                result = operand[j]\
    \ / operand[k]\n                i += 1\n                j += 1\n            case\
    \ 4:\n                result = operand[j] % operand[k]\n                i += 1\n\
    \                j += 1\n            case 5:\n                result = operand[j]\
    \ ** operand[k]\n                i += 1\n                j += 1\n            default:\n\
    \                break\n            }\n        case 3:\n            switch operandIndex\
    \ {\n            case 0:\n                result = operand[j] + operand[k]\n \
    \               i += 1\n                j += 1\n            case 1:\n        \
    \        result = operand[j] - operand[k]\n                i += 1\n          \
    \      j += 1\n            case 2:\n                result = operand[j] * operand[k]\n\
    \                i += 1\n                j += 1\n            case 3:\n       \
    \         result = operand[j] / operand[k]\n                i += 1\n         \
    \       j += 1\n            case 4:\n                result = operand[j] % operand[k]\n\
    \                i += 1\n                j += 1\n            case 5:\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmprwkfkw7y.swift:27:26: error: expected initial value after '='\n\
    \    var operatorLength = operator.count\n                         ^\n/tmp/tmprwkfkw7y.swift:27:25:\
    \ error: consecutive statements on a line must be separated by ';'\n    var operatorLength\
    \ = operator.count\n                        ^\n                        ;\n/tmp/tmprwkfkw7y.swift:27:34:\
    \ error: '.' is not allowed in operator names\n    var operatorLength = operator.count\n\
    \                                 ^\n/tmp/tmprwkfkw7y.swift:141:13: error: 'case'\
    \ label in a 'switch' must have at least one executable statement\n          \
    \  case 5:\n            ^~~~~~~\n                    break\n/tmp/tmprwkfkw7y.swift:159:67:\
    \ error: expected '}' at end of 'switch' statement\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)\n                               \
    \                                   ^\n/tmp/tmprwkfkw7y.swift:31:30: note: to\
    \ match this opening '{'\n        switch operatorIndex {\n                   \
    \          ^\n/tmp/tmprwkfkw7y.swift:159:67: error: expected '}' at end of brace\
    \ statement\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4])\
    \ == 8)\n                                                                  ^\n\
    /tmp/tmprwkfkw7y.swift:30:51: note: to match this opening '{'\n    while i < operatorLength\
    \ && j < operandLength {\n                                                  ^\n\
    /tmp/tmprwkfkw7y.swift:159:67: error: expected '}' at end of brace statement\n\
    assert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)\n     \
    \                                                             ^\n/tmp/tmprwkfkw7y.swift:20:60:\
    \ note: to match this opening '{'\nfunc do_algebra(operator: [String], operand:\
    \ [Int]) -> Int {\n                                                          \
    \ ^\n/tmp/tmprwkfkw7y.swift:55:37: error: cannot find operator '**' in scope\n\
    \                result = operand[j] ** operand[k]\n                         \
    \           ^~\n/tmp/tmprwkfkw7y.swift:84:37: error: cannot find operator '**'\
    \ in scope\n                result = operand[j] ** operand[k]\n    "
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operator.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Invalid operator\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp220cir9b.swift:22:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmp220cir9b.swift:22:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmp220cir9b.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[index] {\n               ^\n\
    /tmp/tmp220cir9b.swift:23:24: error: '[' is not allowed in operator names\n  \
    \      switch operator[index] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    var i = 0\n    var\
    \ j = 0\n    var k = 0\n    for k in 0..<operand.count {\n        switch operator[k]\
    \ {\n        case \"+\":\n            result = result + operand[k]\n        case\
    \ \"-\":\n            result = result - operand[k]\n        case \"*\":\n    \
    \        result = result * operand[k]\n        case \"//\":\n            result\
    \ = result / operand[k]\n        case \"**\":\n            result = result **\
    \ operand[k]\n        default:\n            break\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmprj5zojt5.swift:26:16: error: expected expression in 'switch' statement\n\
    \        switch operator[k] {\n               ^\n/tmp/tmprj5zojt5.swift:26:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[k] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operandValue = operand[index]\n        let operatorValue = operator[index]\n\
    \        switch operatorValue {\n        case \"+\":\n            result += operandValue\n\
    \        case \"-\":\n            result -= operandValue\n        case \"*\":\n\
    \            result *= operandValue\n        case \"//\":\n            result\
    \ /= operandValue\n        case \"**\":\n            result **= operandValue\n\
    \        default:\n            break\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpmwif7tdr.swift:24:29: error: expected initial value after '='\n\
    \        let operatorValue = operator[index]\n                            ^\n\
    /tmp/tmpmwif7tdr.swift:24:28: error: consecutive statements on a line must be\
    \ separated by ';'\n        let operatorValue = operator[index]\n            \
    \               ^\n                           ;\n/tmp/tmpmwif7tdr.swift:24:37:\
    \ error: '[' is not allowed in operator names\n        let operatorValue = operator[index]\n\
    \                                    ^\n/tmp/tmpmwif7tdr.swift:35:20: error: cannot\
    \ find operator '**=' in scope\n            result **= operandValue\n        \
    \           ^~~\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmppwepw1fj.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmppwepw1fj.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Invalid operator\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp1965_ov2.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmp1965_ov2.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operator.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Unknown operator:\
    \ \\(operator[index])\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpe258gs18.swift:22:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmpe258gs18.swift:22:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmpe258gs18.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[index] {\n               ^\n\
    /tmp/tmpe258gs18.swift:23:24: error: '[' is not allowed in operator names\n  \
    \      switch operator[index] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Unknown operator:\
    \ \\(operator[index])\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpbzmu7h7m.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmpbzmu7h7m.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    var index = 0\n\
    \    while index < operator.count {\n        switch operator[index] {\n      \
    \  case \"+\":\n            result += operand[index]\n        case \"-\":\n  \
    \          result -= operand[index]\n        case \"*\":\n            result *=\
    \ operand[index]\n        case \"//\":\n            result /= operand[index]\n\
    \        case \"**\":\n            result **= operand[index]\n        default:\n\
    \            fatalError(\"Invalid operator\")\n        }\n        index += 1\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpag3h81e_.swift:23:19: error: expected expression after operator\n\
    \    while index < operator.count {\n                  ^\n/tmp/tmpag3h81e_.swift:23:27:\
    \ error: '.' is not allowed in operator names\n    while index < operator.count\
    \ {\n                          ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"unknown operator:\
    \ \\(operator[index])\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpabbzx17a.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmpabbzx17a.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result: Int = 0\n    var i = 0\n\
    \    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n \
    \   var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n  \
    \  var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n   \
    \ var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var\
    \ d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i\
    \ = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n =\
    \ 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n\
    \    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n \
    \   var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n  \
    \  var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n   \
    \ var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var\
    \ n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s\
    \ = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x =\
    \ 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n\
    \    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n \
    \   var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n  \
    \  var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n   \
    \ var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var\
    \ x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c\
    \ = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h =\
    \ 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n\
    \    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n \
    \   var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n  \
    \  var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n   \
    \ var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpgeiba_5g.swift:48:9: error: invalid redeclaration of 'i'\n    var\
    \ i = 0\n        ^\n/tmp/tmpgeiba_5g.swift:22:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmpgeiba_5g.swift:49:9: error: invalid\
    \ redeclaration of 'j'\n    var j = 0\n        ^\n/tmp/tmpgeiba_5g.swift:23:9:\
    \ note: 'j' previously declared here\n    var j = 0\n        ^\n/tmp/tmpgeiba_5g.swift:50:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmpgeiba_5g.swift:24:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmpgeiba_5g.swift:51:9:\
    \ error: invalid redeclaration of 'l'\n    var l = 0\n        ^\n/tmp/tmpgeiba_5g.swift:25:9:\
    \ note: 'l' previously declared here\n    var l = 0\n        ^\n/tmp/tmpgeiba_5g.swift:52:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 0\n        ^\n/tmp/tmpgeiba_5g.swift:26:9:\
    \ note: 'm' previously declared here\n    var m = 0\n        ^\n/tmp/tmpgeiba_5g.swift:53:9:\
    \ error: invalid redeclaration of 'n'\n    var n = 0\n        ^\n/tmp/tmpgeiba_5g.swift:27:9:\
    \ note: 'n' previously declared here\n    var n = 0\n        ^\n/tmp/tmpgeiba_5g.swift:54:9:\
    \ error: invalid redeclaration of 'o'\n    var o = 0\n        ^\n/tmp/tmpgeiba_5g.swift:28:9:\
    \ note: 'o' previously declared here\n    var o = 0\n        ^\n/tmp/tmpgeiba_5g.swift:55:9:\
    \ error: invalid redeclaration of 'p'\n    var p = 0\n        ^\n/tmp/tmpgeiba_5g.swift:29:9:\
    \ note: 'p' previously declared here\n    var p = 0\n        ^\n/tmp/tmpgeiba_5g.swift:56:9:\
    \ error: invalid redeclaration of 'q'\n    var q = 0\n        ^\n/tmp/tmpgeiba_5g.swift:30:9:\
    \ note: 'q' previously declared here\n    var q = 0\n        ^\n/tmp/tmpgeiba_5g.swift:57:9:\
    \ error: invalid redeclaration of 'r'\n    var r = 0\n        ^\n/tmp/tmpgeiba_5g.swift:31:9:\
    \ note: 'r' previously declared here\n    var r = 0\n        ^\n/tmp/tmpgeiba_5g.swift:58:9:\
    \ error: invalid redeclaration of 's'\n    var s = 0\n        ^\n/tmp/tmpgeiba_5g.swift:32:9:\
    \ note: 's' previously declared here\n    var s = 0\n        ^\n/tmp/tmpgeiba_5g.swift:59:9:\
    \ error: invalid redeclaration of 't'\n    var t = 0\n        ^\n/tmp/tmpgeib"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    \n    // Loop through\
    \ the operator array\n    for index in 0..<operator.count {\n        \n      \
    \  // Get the operator and operand\n        let operator = operator[index]\n \
    \       let operand = operand[index..<operand.count]\n        \n        // Perform\
    \ the operation\n        switch operator {\n        case \"+\":\n            result\
    \ += operand[0]\n        case \"-\":\n            result -= operand[0]\n     \
    \   case \"*\":\n            result *= operand[0]\n        case \"//\":\n    \
    \        result /= operand[0]\n        case \"**\":\n            result **= operand[0]\n\
    \        default:\n            break\n        }\n    }\n    \n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp9cmjx22n.swift:24:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmp9cmjx22n.swift:24:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmp9cmjx22n.swift:27:13: error: keyword 'operator'\
    \ cannot be used as an identifier here\n        let operator = operator[index]\n\
    \            ^\n/tmp/tmp9cmjx22n.swift:27:13: note: if this name is unavoidable,\
    \ use backticks to escape it\n        let operator = operator[index]\n       \
    \     ^~~~~~~~\n            `operator`\n/tmp/tmp9cmjx22n.swift:27:24: error: expected\
    \ initial value after '='\n        let operator = operator[index]\n          \
    \             ^\n/tmp/tmp9cmjx22n.swift:27:23: error: consecutive statements on\
    \ a line must be separated by ';'\n        let operator = operator[index]\n  \
    \                    ^\n                      ;\n/tmp/tmp9cmjx22n.swift:27:32:\
    \ error: '[' is not allowed in operator names\n        let operator = operator[index]\n\
    \                               ^\n/tmp/tmp9cmjx22n.swift:31:16: error: expected\
    \ expression in 'switch' statement\n        switch operator {\n              \
    \ ^\n/tmp/tmp9cmjx22n.swift:31:25: error: expected operator name in operator declaration\n\
    \        switch operator {\n                        ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result: Int = 0\n    for index in\
    \ 0..<operand.count {\n        switch operator[index] {\n        case \"+\":\n\
    \            result += operand[index]\n        case \"-\":\n            result\
    \ -= operand[index]\n        case \"*\":\n            result *= operand[index]\n\
    \        case \"//\":\n            result /= operand[index]\n        case \"**\"\
    :\n            result **= operand[index]\n        default:\n            fatalError(\"\
    Invalid operator\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpu21fkyuv.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmpu21fkyuv.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    var i = 0\n    while\
    \ i < operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i]\n        case \"-\":\n            result -= operand[i]\n\
    \        case \"*\":\n            result *= operand[i]\n        case \"//\":\n\
    \            result /= operand[i]\n        case \"**\":\n            result **=\
    \ operand[i]\n        default:\n            break\n        }\n        i += 1\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpfhrfddo0.swift:23:15: error: expected expression after operator\n\
    \    while i < operator.count {\n              ^\n/tmp/tmpfhrfddo0.swift:23:23:\
    \ error: '.' is not allowed in operator names\n    while i < operator.count {\n\
    \                      ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operand1 = operand[index]\n        let operand2 = operand[index\
    \ + 1]\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand1\n        case \"-\":\n            result -= operand1\n        case\
    \ \"*\":\n            result *= operand1\n        case \"//\":\n            result\
    \ /= operand1\n        case \"**\":\n            result **= operand1\n       \
    \ default:\n            fatalError(\"Invalid operator\")\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmptjrg3don.swift:25:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmptjrg3don.swift:25:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result: Int = 0\n    \n    for index\
    \ in 0..<operator.count {\n        switch operator[index] {\n        case \"+\"\
    :\n            result += operand[index]\n        case \"-\":\n            result\
    \ -= operand[index]\n        case \"*\":\n            result *= operand[index]\n\
    \        case \"//\":\n            result /= operand[index]\n        case \"**\"\
    :\n            result **= operand[index]\n        default:\n            fatalError(\"\
    Invalid operator\")\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmph1adgtbh.swift:23:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmph1adgtbh.swift:23:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmph1adgtbh.swift:24:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[index] {\n               ^\n\
    /tmp/tmph1adgtbh.swift:24:24: error: '[' is not allowed in operator names\n  \
    \      switch operator[index] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operator.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"/\"\
    :\n            result /= operand[index]\n        case \"//\":\n            result\
    \ /= operand[index]\n        case \"**\":\n            result *= operand[index]\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp5wf1iwiw.swift:22:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmp5wf1iwiw.swift:22:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmp5wf1iwiw.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[index] {\n               ^\n\
    /tmp/tmp5wf1iwiw.swift:23:24: error: '[' is not allowed in operator names\n  \
    \      switch operator[index] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    \n    for index\
    \ in 0..<operand.count {\n        switch operator[index] {\n        case \"+\"\
    :\n            result += operand[index]\n        case \"-\":\n            result\
    \ -= operand[index]\n        case \"*\":\n            result *= operand[index]\n\
    \        case \"//\":\n            result /= operand[index]\n        case \"**\"\
    :\n            result **= operand[index]\n        default:\n            fatalError(\"\
    Unknown operator: \\(operator[index])\")\n        }\n    }\n    \n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp_1yy33tj.swift:24:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmp_1yy33tj.swift:24:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmppwepw1fj.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmppwepw1fj.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operand1 = operand[index]\n        let operand2 = operand[index\
    \ + 1]\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand1\n        case \"-\":\n            result -= operand1\n        case\
    \ \"*\":\n            result *= operand1\n        case \"//\":\n            result\
    \ /= operand1\n        case \"**\":\n            result **= operand1\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpud4p99vg.swift:25:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmpud4p99vg.swift:25:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operator.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpdkmv50cu.swift:22:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmpdkmv50cu.swift:22:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmpdkmv50cu.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[index] {\n               ^\n\
    /tmp/tmpdkmv50cu.swift:23:24: error: '[' is not allowed in operator names\n  \
    \      switch operator[index] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operandValue = operand[index]\n        let operatorValue = operator[index]\n\
    \        switch operatorValue {\n        case \"+\":\n            result += operandValue\n\
    \        case \"-\":\n            result -= operandValue\n        case \"*\":\n\
    \            result *= operandValue\n        case \"//\":\n            result\
    \ /= operandValue\n        case \"**\":\n            result **= operandValue\n\
    \        default:\n            fatalError(\"Unknown operator: \\(operatorValue)\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpih3_926s.swift:24:29: error: expected initial value after '='\n\
    \        let operatorValue = operator[index]\n                            ^\n\
    /tmp/tmpih3_926s.swift:24:28: error: consecutive statements on a line must be\
    \ separated by ';'\n        let operatorValue = operator[index]\n            \
    \               ^\n                           ;\n/tmp/tmpih3_926s.swift:24:37:\
    \ error: '[' is not allowed in operator names\n        let operatorValue = operator[index]\n\
    \                                    ^\n/tmp/tmpih3_926s.swift:35:20: error: cannot\
    \ find operator '**=' in scope\n            result **= operandValue\n        \
    \           ^~~\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Invalid operator\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp1965_ov2.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmp1965_ov2.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operator.count\
    \ {\n        let operator = operator[index]\n        let operand1 = operand[index]\n\
    \        let operand2 = operand[index + 1]\n        switch operator {\n      \
    \  case \"+\":\n            result += operand1\n        case \"-\":\n        \
    \    result -= operand1\n        case \"*\":\n            result *= operand1\n\
    \        case \"//\":\n            result /= operand1\n        case \"**\":\n\
    \            result **= operand1\n        default:\n            break\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpntp50a3h.swift:22:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmpntp50a3h.swift:22:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmpntp50a3h.swift:23:13: error: keyword 'operator'\
    \ cannot be used as an identifier here\n        let operator = operator[index]\n\
    \            ^\n/tmp/tmpntp50a3h.swift:23:13: note: if this name is unavoidable,\
    \ use backticks to escape it\n        let operator = operator[index]\n       \
    \     ^~~~~~~~\n            `operator`\n/tmp/tmpntp50a3h.swift:23:24: error: expected\
    \ initial value after '='\n        let operator = operator[index]\n          \
    \             ^\n/tmp/tmpntp50a3h.swift:23:23: error: consecutive statements on\
    \ a line must be separated by ';'\n        let operator = operator[index]\n  \
    \                    ^\n                      ;\n/tmp/tmpntp50a3h.swift:23:32:\
    \ error: '[' is not allowed in operator names\n        let operator = operator[index]\n\
    \                               ^\n/tmp/tmpntp50a3h.swift:26:16: error: expected\
    \ expression in 'switch' statement\n        switch operator {\n              \
    \ ^\n/tmp/tmpntp50a3h.swift:26:25: error: expected operator name in operator declaration\n\
    \        switch operator {\n                        ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    var index = 0\n\
    \    while index < operator.count {\n        switch operator[index] {\n      \
    \  case \"+\":\n            result += operand[index]\n        case \"-\":\n  \
    \          result -= operand[index]\n        case \"*\":\n            result *=\
    \ operand[index]\n        case \"//\":\n            result /= operand[index]\n\
    \        case \"**\":\n            result **= operand[index]\n        default:\n\
    \            fatalError(\"Invalid operator: \\(operator[index])\")\n        }\n\
    \        index += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4,\
    \ 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2,\
    \ 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3,\
    \ 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpjx3jlswu.swift:23:19: error: expected expression after operator\n\
    \    while index < operator.count {\n                  ^\n/tmp/tmpjx3jlswu.swift:23:27:\
    \ error: '.' is not allowed in operator names\n    while index < operator.count\
    \ {\n                          ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmppwepw1fj.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmppwepw1fj.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operator.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"unknown operator\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpli9fb4sv.swift:22:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmpli9fb4sv.swift:22:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmpli9fb4sv.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[index] {\n               ^\n\
    /tmp/tmpli9fb4sv.swift:23:24: error: '[' is not allowed in operator names\n  \
    \      switch operator[index] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012341
