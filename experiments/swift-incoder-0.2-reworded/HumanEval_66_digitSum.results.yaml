language: swift
name: HumanEval_66_digitSum
results:
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxwb_io0w.swift:21:16: error: no exact matches in call to initializer\
    \ \n        sum += Int(c)\n               ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxwb_io0w.swift:21:16: error: no exact matches in call to initializer\
    \ \n        sum += Int(c)\n               ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += Int(c - '0')\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmptts52z8b.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmptts52z8b.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmptts52z8b.swift:22:28: error:\
    \ single-quoted string literal found, use '\"'\n            sum += Int(c - '0')\n\
    \                           ^~~\n                           \"0\"\n/tmp/tmptts52z8b.swift:22:26:\
    \ error: binary operator '-' cannot be applied to two 'Character' operands\n \
    \           sum += Int(c - '0')\n                       ~ ^ ~~~\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    let digits = s.unicodeScalars.filter({$0.value\
    \ > 48 && $0.value < 58})\n    return digits.reduce(0,{$0 + $1.value})\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpudq7i9ii.swift:20:19: error: cannot convert return expression of\
    \ type 'UInt32' to return type 'Int'\n    return digits.reduce(0,{$0 + $1.value})\n\
    \           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~\n           Int(                \
    \            )\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0, combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpyob24lxq.swift:19:20: error: extraneous argument label 'combine:'\
    \ in call\n    return s.reduce(0, combine: +)\n                   ^   ~~~~~~~~~\n\
    \                       \n/tmp/tmpyob24lxq.swift:19:33: error: cannot convert\
    \ value of type '(Int) -> Int' to expected argument type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int')\n    return s.reduce(0,\
    \ combine: +)\n                                ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxwb_io0w.swift:21:16: error: no exact matches in call to initializer\
    \ \n        sum += Int(c)\n               ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += Int(c - '0')\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmptts52z8b.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmptts52z8b.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmptts52z8b.swift:22:28: error:\
    \ single-quoted string literal found, use '\"'\n            sum += Int(c - '0')\n\
    \                           ^~~\n                           \"0\"\n/tmp/tmptts52z8b.swift:22:26:\
    \ error: binary operator '-' cannot be applied to two 'Character' operands\n \
    \           sum += Int(c - '0')\n                       ~ ^ ~~~\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c.isUpper() {\n            sum += Int(c)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\n\
    assert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpyzq1zq0t.swift:21:14: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if c.isUpper() {\n           ~ ^~~~~~~\n/tmp/tmpyzq1zq0t.swift:22:20:\
    \ error: no exact matches in call to initializer \n            sum += Int(c)\n\
    \                   ^\nSwift.Int:7:12: note: candidate expects value of type 'Float16'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n   \
    \        ^\nSwift.Int:10:12: note: candidate expects value of type 'Float' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Float)\n         \
    \  ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Double)\n           ^\nSwift.Int:14:12:\
    \ note: candidate expects value of type 'Float80' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float80)\n           ^\nSwift.Int:28:12: note: candidate\
    \ expects value of type 'Builtin.Int64' for parameter #1 (got 'Character')\n \
    \   public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12: note:\
    \ candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0, combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpyob24lxq.swift:19:20: error: extraneous argument label 'combine:'\
    \ in call\n    return s.reduce(0, combine: +)\n                   ^   ~~~~~~~~~\n\
    \                       \n/tmp/tmpyob24lxq.swift:19:33: error: cannot convert\
    \ value of type '(Int) -> Int' to expected argument type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int')\n    return s.reduce(0,\
    \ combine: +)\n                                ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += Int(c - '0')\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmptts52z8b.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmptts52z8b.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmptts52z8b.swift:22:28: error:\
    \ single-quoted string literal found, use '\"'\n            sum += Int(c - '0')\n\
    \                           ^~~\n                           \"0\"\n/tmp/tmptts52z8b.swift:22:26:\
    \ error: binary operator '-' cannot be applied to two 'Character' operands\n \
    \           sum += Int(c - '0')\n                       ~ ^ ~~~\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxwb_io0w.swift:21:16: error: no exact matches in call to initializer\
    \ \n        sum += Int(c)\n               ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c.isUpper() {\n            sum += Int(c)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\n\
    assert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpyzq1zq0t.swift:21:14: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if c.isUpper() {\n           ~ ^~~~~~~\n/tmp/tmpyzq1zq0t.swift:22:20:\
    \ error: no exact matches in call to initializer \n            sum += Int(c)\n\
    \                   ^\nSwift.Int:7:12: note: candidate expects value of type 'Float16'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n   \
    \        ^\nSwift.Int:10:12: note: candidate expects value of type 'Float' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Float)\n         \
    \  ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Double)\n           ^\nSwift.Int:14:12:\
    \ note: candidate expects value of type 'Float80' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float80)\n           ^\nSwift.Int:28:12: note: candidate\
    \ expects value of type 'Builtin.Int64' for parameter #1 (got 'Character')\n \
    \   public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12: note:\
    \ candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxwb_io0w.swift:21:16: error: no exact matches in call to initializer\
    \ \n        sum += Int(c)\n               ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += Int(c - '0')\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmptts52z8b.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmptts52z8b.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmptts52z8b.swift:22:28: error:\
    \ single-quoted string literal found, use '\"'\n            sum += Int(c - '0')\n\
    \                           ^~~\n                           \"0\"\n/tmp/tmptts52z8b.swift:22:26:\
    \ error: binary operator '-' cannot be applied to two 'Character' operands\n \
    \           sum += Int(c - '0')\n                       ~ ^ ~~~\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s.characters\
    \ {\n        if c >= '0' && c <= '9' {\n            sum += Int(c - '0')\n    \
    \    }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpgfzroikl.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpgfzroikl.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpgfzroikl.swift:22:28: error:\
    \ single-quoted string literal found, use '\"'\n            sum += Int(c - '0')\n\
    \                           ^~~\n                           \"0\"\n/tmp/tmpgfzroikl.swift:20:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpgfzroikl.swift:22:26: error: binary operator '-' cannot\
    \ be applied to two 'Character' operands\n            sum += Int(c - '0')\n  \
    \                     ~ ^ ~~~\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s.characters\
    \ {\n        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") ==\
    \ 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") ==\
    \ 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpnqny6ggp.swift:20:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpnqny6ggp.swift:21:16:\
    \ error: no exact matches in call to initializer \n        sum += Int(c)\n   \
    \            ^\nSwift.Int:7:12: note: candidate expects value of type 'Float16'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n   \
    \        ^\nSwift.Int:10:12: note: candidate expects value of type 'Float' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Float)\n         \
    \  ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Double)\n           ^\nSwift.Int:14:12:\
    \ note: candidate expects value of type 'Float80' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float80)\n           ^\nSwift.Int:28:12: note: candidate\
    \ expects value of type 'Builtin.Int64' for parameter #1 (got 'Character')\n \
    \   public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12: note:\
    \ candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxwb_io0w.swift:21:16: error: no exact matches in call to initializer\
    \ \n        sum += Int(c)\n               ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0, combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpyob24lxq.swift:19:20: error: extraneous argument label 'combine:'\
    \ in call\n    return s.reduce(0, combine: +)\n                   ^   ~~~~~~~~~\n\
    \                       \n/tmp/tmpyob24lxq.swift:19:33: error: cannot convert\
    \ value of type '(Int) -> Int' to expected argument type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int')\n    return s.reduce(0,\
    \ combine: +)\n                                ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s.characters\
    \ {\n        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpe3w_zjbb.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpe3w_zjbb.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpe3w_zjbb.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpe3w_zjbb.swift:20:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpe3w_zjbb.swift:22:17: error: binary operator '+=' cannot\
    \ be applied to operands of type 'Int' and '_'\n            sum += c - '0'\n \
    \               ^\nSwift.SIMD:1:11: note: candidate requires that 'Int' conform\
    \ to 'SIMD' (requirement specified as 'Self' : 'SIMD')\nextension SIMD where Self.Scalar\
    \ : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxwb_io0w.swift:21:16: error: no exact matches in call to initializer\
    \ \n        sum += Int(c)\n               ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += Int(c - '0')\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmptts52z8b.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmptts52z8b.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmptts52z8b.swift:22:28: error:\
    \ single-quoted string literal found, use '\"'\n            sum += Int(c - '0')\n\
    \                           ^~~\n                           \"0\"\n/tmp/tmptts52z8b.swift:22:26:\
    \ error: binary operator '-' cannot be applied to two 'Character' operands\n \
    \           sum += Int(c - '0')\n                       ~ ^ ~~~\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s.characters\
    \ {\n        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") ==\
    \ 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") ==\
    \ 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpnqny6ggp.swift:20:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpnqny6ggp.swift:21:16:\
    \ error: no exact matches in call to initializer \n        sum += Int(c)\n   \
    \            ^\nSwift.Int:7:12: note: candidate expects value of type 'Float16'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n   \
    \        ^\nSwift.Int:10:12: note: candidate expects value of type 'Float' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Float)\n         \
    \  ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Double)\n           ^\nSwift.Int:14:12:\
    \ note: candidate expects value of type 'Float80' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float80)\n           ^\nSwift.Int:28:12: note: candidate\
    \ expects value of type 'Builtin.Int64' for parameter #1 (got 'Character')\n \
    \   public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12: note:\
    \ candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxwb_io0w.swift:21:16: error: no exact matches in call to initializer\
    \ \n        sum += Int(c)\n               ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0, combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpyob24lxq.swift:19:20: error: extraneous argument label 'combine:'\
    \ in call\n    return s.reduce(0, combine: +)\n                   ^   ~~~~~~~~~\n\
    \                       \n/tmp/tmpyob24lxq.swift:19:33: error: cannot convert\
    \ value of type '(Int) -> Int' to expected argument type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int')\n    return s.reduce(0,\
    \ combine: +)\n                                ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { (sum, ch) in\n\
    \        switch ch {\n        case \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"\
    6\", \"7\", \"8\", \"9\":\n            return sum + Int(ch)\n        default:\n\
    \            return sum\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpghufqw7f.swift:22:26: error: no exact matches in call to initializer\
    \ \n            return sum + Int(ch)\n                         ^\nSwift.Int:7:12:\
    \ note: candidate expects value of type 'Float16' for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n    public init(_ source: Float16)\n           ^\nSwift.Int:10:12:\
    \ note: candidate expects value of type 'Float' for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n    public init(_ source: Float)\n           ^\nSwift.Int:12:12:\
    \ note: candidate expects value of type 'Double' for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n    public init(_ source: Double)\n           ^\nSwift.Int:14:12:\
    \ note: candidate expects value of type 'Float80' for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { (sum, char)\
    \ -> Int in\n        let code = Int(char)\n        return sum + code - '0'\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\n\
    assert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpnmti4mis.swift:21:29: error: single-quoted string literal found,\
    \ use '\"'\n        return sum + code - '0'\n                            ^~~\n\
    \                            \"0\"\n/tmp/tmpnmti4mis.swift:20:20: error: no exact\
    \ matches in call to initializer \n        let code = Int(char)\n            \
    \       ^\nSwift.Int:7:12: note: candidate expects value of type 'Float16' for\
    \ parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source:\
    \ Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value of type\
    \ 'Float' for parameter #1 (got 'String.Element' (aka 'Character'))\n    public\
    \ init(_ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects\
    \ value of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\nSwift.FixedWidthInteger:3:23: note: candidate\
    \ expects value of type 'String' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    @inlinable public init?(_ description: String)\n                      ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    let len = s.characters.count\n \
    \   var sum = 0\n    for i in 0..<len {\n        let c = s.characters[i]\n   \
    \     if c >= '0' && c <= '9' {\n            sum += Int(c) - 48\n        }\n \
    \   }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpacnok56e.swift:23:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpacnok56e.swift:23:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpacnok56e.swift:19:17: error:\
    \ 'characters' is unavailable: Please use String directly\n    let len = s.characters.count\n\
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpacnok56e.swift:22:17: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        let c = s.characters[i]\n\
    \                ^~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpacnok56e.swift:22:19: error: 'characters' is\
    \ unavailable: Please use String directly\n        let c = s.characters[i]\n \
    \                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpacnok56e.swift:24:20: error: no exact matches in call to initializer\
    \ \n            sum += Int(c) - 48\n                   ^\nSwift.Int:7:12: note:\
    \ candidate expects value of type 'Float16' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate\
    \ expects value of type 'Float' for parameter #1 (got 'Character')\n    public\
    \ init(_ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects\
    \ value of type 'Double' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Double)\n           ^\nSwift.Int:14:12: note: candidate expects value\
    \ of type 'Float80' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float80)\n           ^\nSwift.Int:28:12: note: candidate expects value of type\
    \ 'Builtin.Int64' for parameter #1 (g"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0, combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpyob24lxq.swift:19:20: error: extraneous argument label 'combine:'\
    \ in call\n    return s.reduce(0, combine: +)\n                   ^   ~~~~~~~~~\n\
    \                       \n/tmp/tmpyob24lxq.swift:19:33: error: cannot convert\
    \ value of type '(Int) -> Int' to expected argument type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int')\n    return s.reduce(0,\
    \ combine: +)\n                                ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s.characters\
    \ {\n        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpe3w_zjbb.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpe3w_zjbb.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpe3w_zjbb.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpe3w_zjbb.swift:20:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpe3w_zjbb.swift:22:17: error: binary operator '+=' cannot\
    \ be applied to operands of type 'Int' and '_'\n            sum += c - '0'\n \
    \               ^\nSwift.SIMD:1:11: note: candidate requires that 'Int' conform\
    \ to 'SIMD' (requirement specified as 'Self' : 'SIMD')\nextension SIMD where Self.Scalar\
    \ : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxwb_io0w.swift:21:16: error: no exact matches in call to initializer\
    \ \n        sum += Int(c)\n               ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s.characters\
    \ {\n        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") ==\
    \ 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") ==\
    \ 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpnqny6ggp.swift:20:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpnqny6ggp.swift:21:16:\
    \ error: no exact matches in call to initializer \n        sum += Int(c)\n   \
    \            ^\nSwift.Int:7:12: note: candidate expects value of type 'Float16'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n   \
    \        ^\nSwift.Int:10:12: note: candidate expects value of type 'Float' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Float)\n         \
    \  ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Double)\n           ^\nSwift.Int:14:12:\
    \ note: candidate expects value of type 'Float80' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float80)\n           ^\nSwift.Int:28:12: note: candidate\
    \ expects value of type 'Builtin.Int64' for parameter #1 (got 'Character')\n \
    \   public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12: note:\
    \ candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += Int(c - '0')\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmptts52z8b.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmptts52z8b.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmptts52z8b.swift:22:28: error:\
    \ single-quoted string literal found, use '\"'\n            sum += Int(c - '0')\n\
    \                           ^~~\n                           \"0\"\n/tmp/tmptts52z8b.swift:22:26:\
    \ error: binary operator '-' cannot be applied to two 'Character' operands\n \
    \           sum += Int(c - '0')\n                       ~ ^ ~~~\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s.characters\
    \ {\n        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") ==\
    \ 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") ==\
    \ 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpnqny6ggp.swift:20:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpnqny6ggp.swift:21:16:\
    \ error: no exact matches in call to initializer \n        sum += Int(c)\n   \
    \            ^\nSwift.Int:7:12: note: candidate expects value of type 'Float16'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n   \
    \        ^\nSwift.Int:10:12: note: candidate expects value of type 'Float' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Float)\n         \
    \  ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Double)\n           ^\nSwift.Int:14:12:\
    \ note: candidate expects value of type 'Float80' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float80)\n           ^\nSwift.Int:28:12: note: candidate\
    \ expects value of type 'Builtin.Int64' for parameter #1 (got 'Character')\n \
    \   public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12: note:\
    \ candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0, combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpyob24lxq.swift:19:20: error: extraneous argument label 'combine:'\
    \ in call\n    return s.reduce(0, combine: +)\n                   ^   ~~~~~~~~~\n\
    \                       \n/tmp/tmpyob24lxq.swift:19:33: error: cannot convert\
    \ value of type '(Int) -> Int' to expected argument type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int')\n    return s.reduce(0,\
    \ combine: +)\n                                ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += Int(c - '0')\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmptts52z8b.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmptts52z8b.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmptts52z8b.swift:22:28: error:\
    \ single-quoted string literal found, use '\"'\n            sum += Int(c - '0')\n\
    \                           ^~~\n                           \"0\"\n/tmp/tmptts52z8b.swift:22:26:\
    \ error: binary operator '-' cannot be applied to two 'Character' operands\n \
    \           sum += Int(c - '0')\n                       ~ ^ ~~~\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += Int(c) - 48\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxrkpxfyb.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxrkpxfyb.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxrkpxfyb.swift:22:20: error:\
    \ no exact matches in call to initializer \n            sum += Int(c) - 48\n \
    \                  ^\nSwift.Int:7:12: note: candidate expects value of type 'Float16'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n   \
    \        ^\nSwift.Int:10:12: note: candidate expects value of type 'Float' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Float)\n         \
    \  ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Double)\n           ^\nSwift.Int:14:12:\
    \ note: candidate expects value of type 'Float80' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float80)\n           ^\nSwift.Int:28:12: note: candidate\
    \ expects value of type 'Builtin.Int64' for parameter #1 (got 'Character')\n \
    \   public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12: note:\
    \ candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s.characters\
    \ {\n        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpe3w_zjbb.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpe3w_zjbb.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpe3w_zjbb.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpe3w_zjbb.swift:20:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpe3w_zjbb.swift:22:17: error: binary operator '+=' cannot\
    \ be applied to operands of type 'Int' and '_'\n            sum += c - '0'\n \
    \               ^\nSwift.SIMD:1:11: note: candidate requires that 'Int' conform\
    \ to 'SIMD' (requirement specified as 'Self' : 'SIMD')\nextension SIMD where Self.Scalar\
    \ : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0, combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpyob24lxq.swift:19:20: error: extraneous argument label 'combine:'\
    \ in call\n    return s.reduce(0, combine: +)\n                   ^   ~~~~~~~~~\n\
    \                       \n/tmp/tmpyob24lxq.swift:19:33: error: cannot convert\
    \ value of type '(Int) -> Int' to expected argument type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int')\n    return s.reduce(0,\
    \ combine: +)\n                                ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s.characters\
    \ {\n        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpe3w_zjbb.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpe3w_zjbb.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpe3w_zjbb.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpe3w_zjbb.swift:20:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpe3w_zjbb.swift:22:17: error: binary operator '+=' cannot\
    \ be applied to operands of type 'Int' and '_'\n            sum += c - '0'\n \
    \               ^\nSwift.SIMD:1:11: note: candidate requires that 'Int' conform\
    \ to 'SIMD' (requirement specified as 'Self' : 'SIMD')\nextension SIMD where Self.Scalar\
    \ : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    let result = s.reduce(0, combine:\
    \ +)\n    return result % 10\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpplr3be42.swift:19:26: error: extraneous argument label 'combine:'\
    \ in call\n    let result = s.reduce(0, combine: +)\n                        \
    \ ^   ~~~~~~~~~\n                             \n/tmp/tmpplr3be42.swift:19:39:\
    \ error: cannot convert value of type '(Int) -> Int' to expected argument type\
    \ '(Int, String.Element) throws -> Int' (aka '(Int, Character) throws -> Int')\n\
    \    let result = s.reduce(0, combine: +)\n                                  \
    \    ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0, combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpyob24lxq.swift:19:20: error: extraneous argument label 'combine:'\
    \ in call\n    return s.reduce(0, combine: +)\n                   ^   ~~~~~~~~~\n\
    \                       \n/tmp/tmpyob24lxq.swift:19:33: error: cannot convert\
    \ value of type '(Int) -> Int' to expected argument type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int')\n    return s.reduce(0,\
    \ combine: +)\n                                ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s.characters\
    \ {\n        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpe3w_zjbb.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpe3w_zjbb.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpe3w_zjbb.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpe3w_zjbb.swift:20:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpe3w_zjbb.swift:22:17: error: binary operator '+=' cannot\
    \ be applied to operands of type 'Int' and '_'\n            sum += c - '0'\n \
    \               ^\nSwift.SIMD:1:11: note: candidate requires that 'Int' conform\
    \ to 'SIMD' (requirement specified as 'Self' : 'SIMD')\nextension SIMD where Self.Scalar\
    \ : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0, combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpyob24lxq.swift:19:20: error: extraneous argument label 'combine:'\
    \ in call\n    return s.reduce(0, combine: +)\n                   ^   ~~~~~~~~~\n\
    \                       \n/tmp/tmpyob24lxq.swift:19:33: error: cannot convert\
    \ value of type '(Int) -> Int' to expected argument type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int')\n    return s.reduce(0,\
    \ combine: +)\n                                ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0, combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpyob24lxq.swift:19:20: error: extraneous argument label 'combine:'\
    \ in call\n    return s.reduce(0, combine: +)\n                   ^   ~~~~~~~~~\n\
    \                       \n/tmp/tmpyob24lxq.swift:19:33: error: cannot convert\
    \ value of type '(Int) -> Int' to expected argument type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int')\n    return s.reduce(0,\
    \ combine: +)\n                                ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s.characters\
    \ {\n        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpe3w_zjbb.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpe3w_zjbb.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpe3w_zjbb.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpe3w_zjbb.swift:20:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpe3w_zjbb.swift:22:17: error: binary operator '+=' cannot\
    \ be applied to operands of type 'Int' and '_'\n            sum += c - '0'\n \
    \               ^\nSwift.SIMD:1:11: note: candidate requires that 'Int' conform\
    \ to 'SIMD' (requirement specified as 'Self' : 'SIMD')\nextension SIMD where Self.Scalar\
    \ : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxwb_io0w.swift:21:16: error: no exact matches in call to initializer\
    \ \n        sum += Int(c)\n               ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c.isUpper() {\n            sum += Int(c)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\n\
    assert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpyzq1zq0t.swift:21:14: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if c.isUpper() {\n           ~ ^~~~~~~\n/tmp/tmpyzq1zq0t.swift:22:20:\
    \ error: no exact matches in call to initializer \n            sum += Int(c)\n\
    \                   ^\nSwift.Int:7:12: note: candidate expects value of type 'Float16'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n   \
    \        ^\nSwift.Int:10:12: note: candidate expects value of type 'Float' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Float)\n         \
    \  ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Double)\n           ^\nSwift.Int:14:12:\
    \ note: candidate expects value of type 'Float80' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float80)\n           ^\nSwift.Int:28:12: note: candidate\
    \ expects value of type 'Builtin.Int64' for parameter #1 (got 'Character')\n \
    \   public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12: note:\
    \ candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0, combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpyob24lxq.swift:19:20: error: extraneous argument label 'combine:'\
    \ in call\n    return s.reduce(0, combine: +)\n                   ^   ~~~~~~~~~\n\
    \                       \n/tmp/tmpyob24lxq.swift:19:33: error: cannot convert\
    \ value of type '(Int) -> Int' to expected argument type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int')\n    return s.reduce(0,\
    \ combine: +)\n                                ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0, combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpyob24lxq.swift:19:20: error: extraneous argument label 'combine:'\
    \ in call\n    return s.reduce(0, combine: +)\n                   ^   ~~~~~~~~~\n\
    \                       \n/tmp/tmpyob24lxq.swift:19:33: error: cannot convert\
    \ value of type '(Int) -> Int' to expected argument type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int')\n    return s.reduce(0,\
    \ combine: +)\n                                ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    let result = s.reduce(0, combine:\
    \ {\n        (sum, character) in\n        switch character {\n        case \"\
    0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\":\n        \
    \    return sum + Int(character)\n        default:\n            return sum\n \
    \       }\n    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s:\
    \ \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s:\
    \ \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s:\
    \ \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp3zhg96cm.swift:23:26: error: no exact matches in call to initializer\
    \ \n            return sum + Int(character)\n                         ^\n/tmp/tmp3zhg96cm.swift:23:26:\
    \ note: candidate has partially matching parameter list (Float16)\n          \
    \  return sum + Int(character)\n                         ^\n/tmp/tmp3zhg96cm.swift:23:26:\
    \ note: candidate has partially matching parameter list (Float)\n            return\
    \ sum + Int(character)\n                         ^\n/tmp/tmp3zhg96cm.swift:23:26:\
    \ note: candidate has partially matching parameter list (Double)\n           \
    \ return sum + Int(character)\n                         ^\n/tmp/tmp3zhg96cm.swift:23:26:\
    \ note: candidate has partially matching parameter list (Float80)\n          \
    \  return sum + Int(character)\n                         ^\n/tmp/tmp3zhg96cm.swift:23:26:\
    \ note: candidate has partially matching parameter list (Builtin.Int64)\n    \
    \        return sum + Int(character)\n                         ^\n/tmp/tmp3zhg96cm.swift:23:26:\
    \ note: candidate has partially matching parameter list (Builtin.Word)\n     \
    \       return sum + Int(character)\n                         ^\n/tmp/tmp3zhg96cm.swift:19:26:\
    \ error: extraneous argument label 'combine:' in call\n    let result = s.reduce(0,\
    \ combine: {\n                         ^   ~~~~~~~~~\n                       \
    \      \n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxwb_io0w.swift:21:16: error: no exact matches in call to initializer\
    \ \n        sum += Int(c)\n               ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxwb_io0w.swift:21:16: error: no exact matches in call to initializer\
    \ \n        sum += Int(c)\n               ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxwb_io0w.swift:21:16: error: no exact matches in call to initializer\
    \ \n        sum += Int(c)\n               ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0, combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpyob24lxq.swift:19:20: error: extraneous argument label 'combine:'\
    \ in call\n    return s.reduce(0, combine: +)\n                   ^   ~~~~~~~~~\n\
    \                       \n/tmp/tmpyob24lxq.swift:19:33: error: cannot convert\
    \ value of type '(Int) -> Int' to expected argument type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int')\n    return s.reduce(0,\
    \ combine: +)\n                                ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += Int(c - '0')\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmptts52z8b.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmptts52z8b.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmptts52z8b.swift:22:28: error:\
    \ single-quoted string literal found, use '\"'\n            sum += Int(c - '0')\n\
    \                           ^~~\n                           \"0\"\n/tmp/tmptts52z8b.swift:22:26:\
    \ error: binary operator '-' cannot be applied to two 'Character' operands\n \
    \           sum += Int(c - '0')\n                       ~ ^ ~~~\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxwb_io0w.swift:21:16: error: no exact matches in call to initializer\
    \ \n        sum += Int(c)\n               ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c.isUpper() {\n            sum += Int(c)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\n\
    assert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpyzq1zq0t.swift:21:14: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if c.isUpper() {\n           ~ ^~~~~~~\n/tmp/tmpyzq1zq0t.swift:22:20:\
    \ error: no exact matches in call to initializer \n            sum += Int(c)\n\
    \                   ^\nSwift.Int:7:12: note: candidate expects value of type 'Float16'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n   \
    \        ^\nSwift.Int:10:12: note: candidate expects value of type 'Float' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Float)\n         \
    \  ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Double)\n           ^\nSwift.Int:14:12:\
    \ note: candidate expects value of type 'Float80' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float80)\n           ^\nSwift.Int:28:12: note: candidate\
    \ expects value of type 'Builtin.Int64' for parameter #1 (got 'Character')\n \
    \   public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12: note:\
    \ candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    let digits = s.unicodeScalars.filter\
    \ { $0.value > 0 }\n    return digits.reduce(0) { $0 + $0.value }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp_j42slcm.swift:20:25: error: missing argument label 'into:' in\
    \ call\n    return digits.reduce(0) { $0 + $0.value }\n                      \
    \  ^\n                         into: \n/tmp/tmp_j42slcm.swift:20:19: error: cannot\
    \ convert return expression of type '(_) -> _' to return type 'Int'\n    return\
    \ digits.reduce(0) { $0 + $0.value }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxwb_io0w.swift:21:16: error: no exact matches in call to initializer\
    \ \n        sum += Int(c)\n               ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxwb_io0w.swift:21:16: error: no exact matches in call to initializer\
    \ \n        sum += Int(c)\n               ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    let digits = s.unicodeScalars.filter\
    \ { $0.value > 0 }\n    return digits.reduce(0) { $0 + Int($1) }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmph6svoca7.swift:20:36: error: no exact matches in call to initializer\
    \ \n    return digits.reduce(0) { $0 + Int($1) }\n                           \
    \        ^\nSwift.FixedWidthInteger:3:23: note: candidate requires that 'Unicode.Scalar'\
    \ conform to 'BinaryFloatingPoint' (requirement specified as 'T' : 'BinaryFloatingPoint')\n\
    \    @inlinable public init<T>(_ source: T) where T : BinaryFloatingPoint\n  \
    \                    ^\nSwift.SignedInteger:2:23: note: candidate requires that\
    \ 'Unicode.Scalar' conform to 'BinaryInteger' (requirement specified as 'T' :\
    \ 'BinaryInteger')\n    @inlinable public init<T>(_ source: T) where T : BinaryInteger\n\
    \                      ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += Int(c - '0')\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmptts52z8b.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmptts52z8b.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmptts52z8b.swift:22:28: error:\
    \ single-quoted string literal found, use '\"'\n            sum += Int(c - '0')\n\
    \                           ^~~\n                           \"0\"\n/tmp/tmptts52z8b.swift:22:26:\
    \ error: binary operator '-' cannot be applied to two 'Character' operands\n \
    \           sum += Int(c - '0')\n                       ~ ^ ~~~\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0, combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpyob24lxq.swift:19:20: error: extraneous argument label 'combine:'\
    \ in call\n    return s.reduce(0, combine: +)\n                   ^   ~~~~~~~~~\n\
    \                       \n/tmp/tmpyob24lxq.swift:19:33: error: cannot convert\
    \ value of type '(Int) -> Int' to expected argument type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int')\n    return s.reduce(0,\
    \ combine: +)\n                                ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    let result = s.reduce(0) { $0 +\
    \ Int($1) }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpymihzewu.swift:19:37: error: no exact matches in call to initializer\
    \ \n    let result = s.reduce(0) { $0 + Int($1) }\n                          \
    \          ^\nSwift.Int:7:12: note: candidate expects value of type 'Float16'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Float)\n           ^\nSwift.Int:12:12: note: candidate\
    \ expects value of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += Int(c - '0')\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmptts52z8b.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmptts52z8b.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmptts52z8b.swift:22:28: error:\
    \ single-quoted string literal found, use '\"'\n            sum += Int(c - '0')\n\
    \                           ^~~\n                           \"0\"\n/tmp/tmptts52z8b.swift:22:26:\
    \ error: binary operator '-' cannot be applied to two 'Character' operands\n \
    \           sum += Int(c - '0')\n                       ~ ^ ~~~\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxwb_io0w.swift:21:16: error: no exact matches in call to initializer\
    \ \n        sum += Int(c)\n               ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0, combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpyob24lxq.swift:19:20: error: extraneous argument label 'combine:'\
    \ in call\n    return s.reduce(0, combine: +)\n                   ^   ~~~~~~~~~\n\
    \                       \n/tmp/tmpyob24lxq.swift:19:33: error: cannot convert\
    \ value of type '(Int) -> Int' to expected argument type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int')\n    return s.reduce(0,\
    \ combine: +)\n                                ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s.characters\
    \ {\n        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpe3w_zjbb.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpe3w_zjbb.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpe3w_zjbb.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpe3w_zjbb.swift:20:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpe3w_zjbb.swift:22:17: error: binary operator '+=' cannot\
    \ be applied to operands of type 'Int' and '_'\n            sum += c - '0'\n \
    \               ^\nSwift.SIMD:1:11: note: candidate requires that 'Int' conform\
    \ to 'SIMD' (requirement specified as 'Self' : 'SIMD')\nextension SIMD where Self.Scalar\
    \ : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += Int(c - '0')\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmptts52z8b.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmptts52z8b.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmptts52z8b.swift:22:28: error:\
    \ single-quoted string literal found, use '\"'\n            sum += Int(c - '0')\n\
    \                           ^~~\n                           \"0\"\n/tmp/tmptts52z8b.swift:22:26:\
    \ error: binary operator '-' cannot be applied to two 'Character' operands\n \
    \           sum += Int(c - '0')\n                       ~ ^ ~~~\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += Int(c - '0')\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmptts52z8b.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmptts52z8b.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmptts52z8b.swift:22:28: error:\
    \ single-quoted string literal found, use '\"'\n            sum += Int(c - '0')\n\
    \                           ^~~\n                           \"0\"\n/tmp/tmptts52z8b.swift:22:26:\
    \ error: binary operator '-' cannot be applied to two 'Character' operands\n \
    \           sum += Int(c - '0')\n                       ~ ^ ~~~\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { (sum, ch) in\n\
    \        switch ch {\n        case \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"\
    6\", \"7\", \"8\", \"9\":\n            return sum + Int(ch)\n        default:\n\
    \            return sum\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpghufqw7f.swift:22:26: error: no exact matches in call to initializer\
    \ \n            return sum + Int(ch)\n                         ^\nSwift.Int:7:12:\
    \ note: candidate expects value of type 'Float16' for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n    public init(_ source: Float16)\n           ^\nSwift.Int:10:12:\
    \ note: candidate expects value of type 'Float' for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n    public init(_ source: Float)\n           ^\nSwift.Int:12:12:\
    \ note: candidate expects value of type 'Double' for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n    public init(_ source: Double)\n           ^\nSwift.Int:14:12:\
    \ note: candidate expects value of type 'Float80' for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    let result = s.reduce(0) { (sum,\
    \ char) -> Int in\n        let code = Int(char)\n        return sum + code - '0'\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpi5hetviq.swift:21:29: error: single-quoted string literal found,\
    \ use '\"'\n        return sum + code - '0'\n                            ^~~\n\
    \                            \"0\"\n/tmp/tmpi5hetviq.swift:20:20: error: no exact\
    \ matches in call to initializer \n        let code = Int(char)\n            \
    \       ^\nSwift.Int:7:12: note: candidate expects value of type 'Float16' for\
    \ parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source:\
    \ Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value of type\
    \ 'Float' for parameter #1 (got 'String.Element' (aka 'Character'))\n    public\
    \ init(_ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects\
    \ value of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\nSwift.FixedWidthInteger:3:23: note: candidate\
    \ expects value of type 'String' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    @inlinable public init?(_ description: String)\n                      ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxwb_io0w.swift:21:16: error: no exact matches in call to initializer\
    \ \n        sum += Int(c)\n               ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxwb_io0w.swift:21:16: error: no exact matches in call to initializer\
    \ \n        sum += Int(c)\n               ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0, combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpyob24lxq.swift:19:20: error: extraneous argument label 'combine:'\
    \ in call\n    return s.reduce(0, combine: +)\n                   ^   ~~~~~~~~~\n\
    \                       \n/tmp/tmpyob24lxq.swift:19:33: error: cannot convert\
    \ value of type '(Int) -> Int' to expected argument type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int')\n    return s.reduce(0,\
    \ combine: +)\n                                ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s.characters\
    \ {\n        if c >= '0' && c <= '9' {\n            sum += Int(c - '0')\n    \
    \    }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpgfzroikl.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpgfzroikl.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpgfzroikl.swift:22:28: error:\
    \ single-quoted string literal found, use '\"'\n            sum += Int(c - '0')\n\
    \                           ^~~\n                           \"0\"\n/tmp/tmpgfzroikl.swift:20:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpgfzroikl.swift:22:26: error: binary operator '-' cannot\
    \ be applied to two 'Character' operands\n            sum += Int(c - '0')\n  \
    \                     ~ ^ ~~~\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0, combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpyob24lxq.swift:19:20: error: extraneous argument label 'combine:'\
    \ in call\n    return s.reduce(0, combine: +)\n                   ^   ~~~~~~~~~\n\
    \                       \n/tmp/tmpyob24lxq.swift:19:33: error: cannot convert\
    \ value of type '(Int) -> Int' to expected argument type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int')\n    return s.reduce(0,\
    \ combine: +)\n                                ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c.isUpper() {\n            sum += Int(c)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\n\
    assert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpyzq1zq0t.swift:21:14: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if c.isUpper() {\n           ~ ^~~~~~~\n/tmp/tmpyzq1zq0t.swift:22:20:\
    \ error: no exact matches in call to initializer \n            sum += Int(c)\n\
    \                   ^\nSwift.Int:7:12: note: candidate expects value of type 'Float16'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n   \
    \        ^\nSwift.Int:10:12: note: candidate expects value of type 'Float' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Float)\n         \
    \  ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Double)\n           ^\nSwift.Int:14:12:\
    \ note: candidate expects value of type 'Float80' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float80)\n           ^\nSwift.Int:28:12: note: candidate\
    \ expects value of type 'Builtin.Int64' for parameter #1 (got 'Character')\n \
    \   public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12: note:\
    \ candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0, combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpyob24lxq.swift:19:20: error: extraneous argument label 'combine:'\
    \ in call\n    return s.reduce(0, combine: +)\n                   ^   ~~~~~~~~~\n\
    \                       \n/tmp/tmpyob24lxq.swift:19:33: error: cannot convert\
    \ value of type '(Int) -> Int' to expected argument type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int')\n    return s.reduce(0,\
    \ combine: +)\n                                ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxwb_io0w.swift:21:16: error: no exact matches in call to initializer\
    \ \n        sum += Int(c)\n               ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c.isUpper() {\n            sum += Int(c)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\n\
    assert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpyzq1zq0t.swift:21:14: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if c.isUpper() {\n           ~ ^~~~~~~\n/tmp/tmpyzq1zq0t.swift:22:20:\
    \ error: no exact matches in call to initializer \n            sum += Int(c)\n\
    \                   ^\nSwift.Int:7:12: note: candidate expects value of type 'Float16'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n   \
    \        ^\nSwift.Int:10:12: note: candidate expects value of type 'Float' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Float)\n         \
    \  ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Double)\n           ^\nSwift.Int:14:12:\
    \ note: candidate expects value of type 'Float80' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float80)\n           ^\nSwift.Int:28:12: note: candidate\
    \ expects value of type 'Builtin.Int64' for parameter #1 (got 'Character')\n \
    \   public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12: note:\
    \ candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0, combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpyob24lxq.swift:19:20: error: extraneous argument label 'combine:'\
    \ in call\n    return s.reduce(0, combine: +)\n                   ^   ~~~~~~~~~\n\
    \                       \n/tmp/tmpyob24lxq.swift:19:33: error: cannot convert\
    \ value of type '(Int) -> Int' to expected argument type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int')\n    return s.reduce(0,\
    \ combine: +)\n                                ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += Int(c - '0')\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmptts52z8b.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmptts52z8b.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmptts52z8b.swift:22:28: error:\
    \ single-quoted string literal found, use '\"'\n            sum += Int(c - '0')\n\
    \                           ^~~\n                           \"0\"\n/tmp/tmptts52z8b.swift:22:26:\
    \ error: binary operator '-' cannot be applied to two 'Character' operands\n \
    \           sum += Int(c - '0')\n                       ~ ^ ~~~\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s.characters\
    \ {\n        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpe3w_zjbb.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpe3w_zjbb.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpe3w_zjbb.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpe3w_zjbb.swift:20:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpe3w_zjbb.swift:22:17: error: binary operator '+=' cannot\
    \ be applied to operands of type 'Int' and '_'\n            sum += c - '0'\n \
    \               ^\nSwift.SIMD:1:11: note: candidate requires that 'Int' conform\
    \ to 'SIMD' (requirement specified as 'Self' : 'SIMD')\nextension SIMD where Self.Scalar\
    \ : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    let chars = s.characters\n    var\
    \ sum = 0\n    for c in chars {\n        if c >= '0' && c <= '9' {\n         \
    \   sum += Int(c) - 48\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\")\
    \ == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpqpgk8xif.swift:22:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpqpgk8xif.swift:22:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpqpgk8xif.swift:19:19: error:\
    \ 'characters' is unavailable: Please use String directly\n    let chars = s.characters\n\
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpqpgk8xif.swift:23:20: error: no exact matches in call to initializer\
    \ \n            sum += Int(c) - 48\n                   ^\nSwift.Int:7:12: note:\
    \ candidate expects value of type 'Float16' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate\
    \ expects value of type 'Float' for parameter #1 (got 'Character')\n    public\
    \ init(_ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects\
    \ value of type 'Double' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Double)\n           ^\nSwift.Int:14:12: note: candidate expects value\
    \ of type 'Float80' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float80)\n           ^\nSwift.Int:28:12: note: candidate expects value of type\
    \ 'Builtin.Int64' for parameter #1 (got 'Character')\n    public init(_ _value:\
    \ Builtin.Int64)\n           ^\nSwift.Int:61:12: note: candidate expects value\
    \ of type 'Builtin.Word' for parameter #1 (got 'Character')\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0, combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpyob24lxq.swift:19:20: error: extraneous argument label 'combine:'\
    \ in call\n    return s.reduce(0, combine: +)\n                   ^   ~~~~~~~~~\n\
    \                       \n/tmp/tmpyob24lxq.swift:19:33: error: cannot convert\
    \ value of type '(Int) -> Int' to expected argument type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int')\n    return s.reduce(0,\
    \ combine: +)\n                                ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s.characters\
    \ {\n        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") ==\
    \ 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") ==\
    \ 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpnqny6ggp.swift:20:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpnqny6ggp.swift:21:16:\
    \ error: no exact matches in call to initializer \n        sum += Int(c)\n   \
    \            ^\nSwift.Int:7:12: note: candidate expects value of type 'Float16'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n   \
    \        ^\nSwift.Int:10:12: note: candidate expects value of type 'Float' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Float)\n         \
    \  ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Double)\n           ^\nSwift.Int:14:12:\
    \ note: candidate expects value of type 'Float80' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float80)\n           ^\nSwift.Int:28:12: note: candidate\
    \ expects value of type 'Builtin.Int64' for parameter #1 (got 'Character')\n \
    \   public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12: note:\
    \ candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0, combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpyob24lxq.swift:19:20: error: extraneous argument label 'combine:'\
    \ in call\n    return s.reduce(0, combine: +)\n                   ^   ~~~~~~~~~\n\
    \                       \n/tmp/tmpyob24lxq.swift:19:33: error: cannot convert\
    \ value of type '(Int) -> Int' to expected argument type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int')\n    return s.reduce(0,\
    \ combine: +)\n                                ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c.isUpper() {\n            sum += Int(c)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\n\
    assert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpyzq1zq0t.swift:21:14: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if c.isUpper() {\n           ~ ^~~~~~~\n/tmp/tmpyzq1zq0t.swift:22:20:\
    \ error: no exact matches in call to initializer \n            sum += Int(c)\n\
    \                   ^\nSwift.Int:7:12: note: candidate expects value of type 'Float16'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n   \
    \        ^\nSwift.Int:10:12: note: candidate expects value of type 'Float' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Float)\n         \
    \  ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Double)\n           ^\nSwift.Int:14:12:\
    \ note: candidate expects value of type 'Float80' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float80)\n           ^\nSwift.Int:28:12: note: candidate\
    \ expects value of type 'Builtin.Int64' for parameter #1 (got 'Character')\n \
    \   public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12: note:\
    \ candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c.isUpper() {\n            sum += Int(c)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\n\
    assert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpyzq1zq0t.swift:21:14: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if c.isUpper() {\n           ~ ^~~~~~~\n/tmp/tmpyzq1zq0t.swift:22:20:\
    \ error: no exact matches in call to initializer \n            sum += Int(c)\n\
    \                   ^\nSwift.Int:7:12: note: candidate expects value of type 'Float16'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n   \
    \        ^\nSwift.Int:10:12: note: candidate expects value of type 'Float' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Float)\n         \
    \  ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Double)\n           ^\nSwift.Int:14:12:\
    \ note: candidate expects value of type 'Float80' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float80)\n           ^\nSwift.Int:28:12: note: candidate\
    \ expects value of type 'Builtin.Int64' for parameter #1 (got 'Character')\n \
    \   public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12: note:\
    \ candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0, combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpyob24lxq.swift:19:20: error: extraneous argument label 'combine:'\
    \ in call\n    return s.reduce(0, combine: +)\n                   ^   ~~~~~~~~~\n\
    \                       \n/tmp/tmpyob24lxq.swift:19:33: error: cannot convert\
    \ value of type '(Int) -> Int' to expected argument type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int')\n    return s.reduce(0,\
    \ combine: +)\n                                ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    let digits = s.characters\n    \
    \    .map { $0 }\n        .filter { (c) -> Bool in\n            c >= '0' && c\
    \ <= '9'\n        }\n        .map { Int($0) }\n        .sum()\n    return digits\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp8hto6pdd.swift:22:18: error: single-quoted string literal found,\
    \ use '\"'\n            c >= '0' && c <= '9'\n                 ^~~\n         \
    \        \"0\"\n/tmp/tmp8hto6pdd.swift:22:30: error: single-quoted string literal\
    \ found, use '\"'\n            c >= '0' && c <= '9'\n                        \
    \     ^~~\n                             \"9\"\n/tmp/tmp8hto6pdd.swift:24:16: error:\
    \ no exact matches in call to initializer \n        .map { Int($0) }\n       \
    \        ^\n/tmp/tmp8hto6pdd.swift:24:16: note: found candidate with type '(Float16)\
    \ -> Int'\n        .map { Int($0) }\n               ^\n/tmp/tmp8hto6pdd.swift:24:16:\
    \ note: found candidate with type '(Float) -> Int'\n        .map { Int($0) }\n\
    \               ^\n/tmp/tmp8hto6pdd.swift:24:16: note: found candidate with type\
    \ '(Double) -> Int'\n        .map { Int($0) }\n               ^\n/tmp/tmp8hto6pdd.swift:24:16:\
    \ note: found candidate with type '(Float80) -> Int'\n        .map { Int($0) }\n\
    \               ^\n/tmp/tmp8hto6pdd.swift:24:16: note: found candidate with type\
    \ '(Builtin.Int64) -> Int'\n        .map { Int($0) }\n               ^\n/tmp/tmp8hto6pdd.swift:24:16:\
    \ note: found candidate with type '(Builtin.Word) -> Int'\n        .map { Int($0)\
    \ }\n               ^\n/tmp/tmp8hto6pdd.swift:24:16: note: found candidate with\
    \ type '(String) -> Int?'\n        .map { Int($0) }\n               ^\n/tmp/tmp8hto6pdd.swift:25:10:\
    \ error: reference to member 'sum' cannot be resolved without a contextual type\n\
    \        .sum()\n         ^\n"
  stdout: ''
  timestamp: 1659824816
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s.characters\
    \ {\n        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpe3w_zjbb.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpe3w_zjbb.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpe3w_zjbb.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpe3w_zjbb.swift:20:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpe3w_zjbb.swift:22:17: error: binary operator '+=' cannot\
    \ be applied to operands of type 'Int' and '_'\n            sum += c - '0'\n \
    \               ^\nSwift.SIMD:1:11: note: candidate requires that 'Int' conform\
    \ to 'SIMD' (requirement specified as 'Self' : 'SIMD')\nextension SIMD where Self.Scalar\
    \ : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxwb_io0w.swift:21:16: error: no exact matches in call to initializer\
    \ \n        sum += Int(c)\n               ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxwb_io0w.swift:21:16: error: no exact matches in call to initializer\
    \ \n        sum += Int(c)\n               ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s.characters\
    \ {\n        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpe3w_zjbb.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpe3w_zjbb.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpe3w_zjbb.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpe3w_zjbb.swift:20:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpe3w_zjbb.swift:22:17: error: binary operator '+=' cannot\
    \ be applied to operands of type 'Int' and '_'\n            sum += c - '0'\n \
    \               ^\nSwift.SIMD:1:11: note: candidate requires that 'Int' conform\
    \ to 'SIMD' (requirement specified as 'Self' : 'SIMD')\nextension SIMD where Self.Scalar\
    \ : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxwb_io0w.swift:21:16: error: no exact matches in call to initializer\
    \ \n        sum += Int(c)\n               ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxwb_io0w.swift:21:16: error: no exact matches in call to initializer\
    \ \n        sum += Int(c)\n               ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0, combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpyob24lxq.swift:19:20: error: extraneous argument label 'combine:'\
    \ in call\n    return s.reduce(0, combine: +)\n                   ^   ~~~~~~~~~\n\
    \                       \n/tmp/tmpyob24lxq.swift:19:33: error: cannot convert\
    \ value of type '(Int) -> Int' to expected argument type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int')\n    return s.reduce(0,\
    \ combine: +)\n                                ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxwb_io0w.swift:21:16: error: no exact matches in call to initializer\
    \ \n        sum += Int(c)\n               ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxwb_io0w.swift:21:16: error: no exact matches in call to initializer\
    \ \n        sum += Int(c)\n               ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxwb_io0w.swift:21:16: error: no exact matches in call to initializer\
    \ \n        sum += Int(c)\n               ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxwb_io0w.swift:21:16: error: no exact matches in call to initializer\
    \ \n        sum += Int(c)\n               ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0, combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpyob24lxq.swift:19:20: error: extraneous argument label 'combine:'\
    \ in call\n    return s.reduce(0, combine: +)\n                   ^   ~~~~~~~~~\n\
    \                       \n/tmp/tmpyob24lxq.swift:19:33: error: cannot convert\
    \ value of type '(Int) -> Int' to expected argument type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int')\n    return s.reduce(0,\
    \ combine: +)\n                                ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s.characters\
    \ {\n        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpe3w_zjbb.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpe3w_zjbb.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpe3w_zjbb.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpe3w_zjbb.swift:20:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpe3w_zjbb.swift:22:17: error: binary operator '+=' cannot\
    \ be applied to operands of type 'Int' and '_'\n            sum += c - '0'\n \
    \               ^\nSwift.SIMD:1:11: note: candidate requires that 'Int' conform\
    \ to 'SIMD' (requirement specified as 'Self' : 'SIMD')\nextension SIMD where Self.Scalar\
    \ : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxwb_io0w.swift:21:16: error: no exact matches in call to initializer\
    \ \n        sum += Int(c)\n               ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxwb_io0w.swift:21:16: error: no exact matches in call to initializer\
    \ \n        sum += Int(c)\n               ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s.characters\
    \ {\n        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpe3w_zjbb.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpe3w_zjbb.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpe3w_zjbb.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpe3w_zjbb.swift:20:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpe3w_zjbb.swift:22:17: error: binary operator '+=' cannot\
    \ be applied to operands of type 'Int' and '_'\n            sum += c - '0'\n \
    \               ^\nSwift.SIMD:1:11: note: candidate requires that 'Int' conform\
    \ to 'SIMD' (requirement specified as 'Self' : 'SIMD')\nextension SIMD where Self.Scalar\
    \ : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0, combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpyob24lxq.swift:19:20: error: extraneous argument label 'combine:'\
    \ in call\n    return s.reduce(0, combine: +)\n                   ^   ~~~~~~~~~\n\
    \                       \n/tmp/tmpyob24lxq.swift:19:33: error: cannot convert\
    \ value of type '(Int) -> Int' to expected argument type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int')\n    return s.reduce(0,\
    \ combine: +)\n                                ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxwb_io0w.swift:21:16: error: no exact matches in call to initializer\
    \ \n        sum += Int(c)\n               ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    let sum = s.reduce(0) { $0 + Int($1)\
    \ }\n    return sum % 10\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp0ln7w94h.swift:19:34: error: no exact matches in call to initializer\
    \ \n    let sum = s.reduce(0) { $0 + Int($1) }\n                             \
    \    ^\nSwift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxwb_io0w.swift:21:16: error: no exact matches in call to initializer\
    \ \n        sum += Int(c)\n               ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0, combine: +)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpyob24lxq.swift:19:20: error: extraneous argument label 'combine:'\
    \ in call\n    return s.reduce(0, combine: +)\n                   ^   ~~~~~~~~~\n\
    \                       \n/tmp/tmpyob24lxq.swift:19:33: error: cannot convert\
    \ value of type '(Int) -> Int' to expected argument type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int')\n    return s.reduce(0,\
    \ combine: +)\n                                ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c.isUpper() {\n            sum += Int(c)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\n\
    assert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpyzq1zq0t.swift:21:14: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if c.isUpper() {\n           ~ ^~~~~~~\n/tmp/tmpyzq1zq0t.swift:22:20:\
    \ error: no exact matches in call to initializer \n            sum += Int(c)\n\
    \                   ^\nSwift.Int:7:12: note: candidate expects value of type 'Float16'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n   \
    \        ^\nSwift.Int:10:12: note: candidate expects value of type 'Float' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Float)\n         \
    \  ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Double)\n           ^\nSwift.Int:14:12:\
    \ note: candidate expects value of type 'Float80' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float80)\n           ^\nSwift.Int:28:12: note: candidate\
    \ expects value of type 'Builtin.Int64' for parameter #1 (got 'Character')\n \
    \   public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12: note:\
    \ candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s.characters\
    \ {\n        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpe3w_zjbb.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpe3w_zjbb.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpe3w_zjbb.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpe3w_zjbb.swift:20:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpe3w_zjbb.swift:22:17: error: binary operator '+=' cannot\
    \ be applied to operands of type 'Int' and '_'\n            sum += c - '0'\n \
    \               ^\nSwift.SIMD:1:11: note: candidate requires that 'Int' conform\
    \ to 'SIMD' (requirement specified as 'Self' : 'SIMD')\nextension SIMD where Self.Scalar\
    \ : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    let len = s.count\n    var sum =\
    \ 0\n    for i in 0..<len {\n        let c = s[i]\n        if c >= 'a' && c <=\
    \ 'z' {\n            sum += c - 'a'\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpzt8rx7rn.swift:23:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= 'a' && c <= 'z' {\n                ^~~\n         \
    \       \"a\"\n/tmp/tmpzt8rx7rn.swift:23:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= 'a' && c <= 'z' {\n                       \
    \     ^~~\n                            \"z\"\n/tmp/tmpzt8rx7rn.swift:24:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - 'a'\n \
    \                      ^~~\n                       \"a\"\n/tmp/tmpzt8rx7rn.swift:22:17:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        let c = s[i]\n                ^~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpzt8rx7rn.swift:24:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - 'a'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824804
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s.characters\
    \ {\n        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpe3w_zjbb.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpe3w_zjbb.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpe3w_zjbb.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpe3w_zjbb.swift:20:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpe3w_zjbb.swift:22:17: error: binary operator '+=' cannot\
    \ be applied to operands of type 'Int' and '_'\n            sum += c - '0'\n \
    \               ^\nSwift.SIMD:1:11: note: candidate requires that 'Int' conform\
    \ to 'SIMD' (requirement specified as 'Self' : 'SIMD')\nextension SIMD where Self.Scalar\
    \ : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s.characters\
    \ {\n        if c >= '0' && c <= '9' {\n            sum += Int(c - '0')\n    \
    \    }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpgfzroikl.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpgfzroikl.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpgfzroikl.swift:22:28: error:\
    \ single-quoted string literal found, use '\"'\n            sum += Int(c - '0')\n\
    \                           ^~~\n                           \"0\"\n/tmp/tmpgfzroikl.swift:20:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpgfzroikl.swift:22:26: error: binary operator '-' cannot\
    \ be applied to two 'Character' operands\n            sum += Int(c - '0')\n  \
    \                     ~ ^ ~~~\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        sum += Int(c)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxwb_io0w.swift:21:16: error: no exact matches in call to initializer\
    \ \n        sum += Int(c)\n               ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c >= '0' && c <= '9' {\n            sum += c - '0'\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpxjo75fg0.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c >= '0' && c <= '9' {\n                ^~~\n         \
    \       \"0\"\n/tmp/tmpxjo75fg0.swift:21:29: error: single-quoted string literal\
    \ found, use '\"'\n        if c >= '0' && c <= '9' {\n                       \
    \     ^~~\n                            \"9\"\n/tmp/tmpxjo75fg0.swift:22:24: error:\
    \ single-quoted string literal found, use '\"'\n            sum += c - '0'\n \
    \                      ^~~\n                       \"0\"\n/tmp/tmpxjo75fg0.swift:22:17:\
    \ error: binary operator '+=' cannot be applied to operands of type 'Int' and\
    \ '_'\n            sum += c - '0'\n                ^\nSwift.SIMD:1:11: note: candidate\
    \ requires that 'Int' conform to 'SIMD' (requirement specified as 'Self' : 'SIMD')\n\
    extension SIMD where Self.Scalar : FloatingPoint {\n          ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c.isUpper() {\n            sum += Int(c)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\n\
    assert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpyzq1zq0t.swift:21:14: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if c.isUpper() {\n           ~ ^~~~~~~\n/tmp/tmpyzq1zq0t.swift:22:20:\
    \ error: no exact matches in call to initializer \n            sum += Int(c)\n\
    \                   ^\nSwift.Int:7:12: note: candidate expects value of type 'Float16'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n   \
    \        ^\nSwift.Int:10:12: note: candidate expects value of type 'Float' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Float)\n         \
    \  ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Double)\n           ^\nSwift.Int:14:12:\
    \ note: candidate expects value of type 'Float80' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float80)\n           ^\nSwift.Int:28:12: note: candidate\
    \ expects value of type 'Builtin.Int64' for parameter #1 (got 'Character')\n \
    \   public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12: note:\
    \ candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + Int($1)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp45bsyof8.swift:19:31: error: no exact matches in call to initializer\
    \ \n    return s.reduce(0) { $0 + Int($1) }\n                              ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824803
