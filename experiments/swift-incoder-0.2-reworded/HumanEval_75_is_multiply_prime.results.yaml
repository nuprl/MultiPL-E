language: swift
name: HumanEval_75_is_multiply_prime
results:
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 100 {\n      \
    \  return false\n    }\n    var primes = [Int]()\n    var primes_count = 100\n\
    \    var primes_count_max = 300\n    var primes_count_min = 3\n    var primes_count_step\
    \ = 1\n    var primes_count_max = primes_count_max\n    var primes_count_min =\
    \ primes_count_min\n    var primes_count_step = primes_count_step\n    var primes_count_max\
    \ = primes_count_max\n    var primes_count_min = primes_count_min\n    var primes_count_step\
    \ = primes_count_step\n    var primes_count_max = primes_count_max\n    var primes_count_min\
    \ = primes_count_min\n    var primes_count_step = primes_count_step\n    var primes_count_max\
    \ = primes_count_max\n    var primes_count_min = primes_count_min\n    var primes_count_step\
    \ = primes_count_step\n    var primes_count_max = primes_count_max\n    var primes_count_min\
    \ = primes_count_min\n    var primes_count_step = primes_count_step\n    var primes_count_max\
    \ = primes_count_max\n    var primes_count_min = primes_count_min\n    var primes_count_step\
    \ = primes_count_step\n    var primes_count_max = primes_count_max\n    var primes_count_min\
    \ = primes_count_min\n    var primes_count_step = primes_count_step\n    var primes_count_max\
    \ = primes_count_max\n    var primes_count_min = primes_count_min\n    var primes_count_step\
    \ = primes_count_step\n    var primes_count_max = primes_count_max\n    var primes_count_min\
    \ = primes_count_min\n    var primes_count_step = primes_count_step\n    var primes_count_max\
    \ = primes_count_max\n    var primes_count_min = primes_count_min\n    var primes_count_step\
    \ = primes_count_step\n    var primes_count_max = primes_count_max\n    var primes_count_min\
    \ = primes_count_min\n    var primes_count_step = primes_count_step\n    var primes_count_max\
    \ = primes_count_max\n    var primes_count_min = primes_count_min\n    var primes_count_step\
    \ = primes_count_step\n    var primes_count_max = primes_count_max\n    var primes_count_min\
    \ = primes_count_min\n    var primes_count_step = primes_count_step\n    var primes_count_max\
    \ = primes_count_max\n    var primes_count_min = primes_count_min\n    var primes_count_step\
    \ = primes_count_step\n    var primes_count_max = primes_count_max\n    var primes_count_min\
    \ = primes_count_min\n    var primes_count_step = primes_count_step\n    var primes_count_max\
    \ = primes_count_max\n    var primes_count_min = prime\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpwgz26pky.swift:18:9: error: invalid redeclaration of 'primes_count_max'\n\
    \    var primes_count_max = primes_count_max\n        ^\n/tmp/tmpwgz26pky.swift:15:9:\
    \ note: 'primes_count_max' previously declared here\n    var primes_count_max\
    \ = 300\n        ^\n/tmp/tmpwgz26pky.swift:19:9: error: invalid redeclaration\
    \ of 'primes_count_min'\n    var primes_count_min = primes_count_min\n       \
    \ ^\n/tmp/tmpwgz26pky.swift:16:9: note: 'primes_count_min' previously declared\
    \ here\n    var primes_count_min = 3\n        ^\n/tmp/tmpwgz26pky.swift:20:9:\
    \ error: invalid redeclaration of 'primes_count_step'\n    var primes_count_step\
    \ = primes_count_step\n        ^\n/tmp/tmpwgz26pky.swift:17:9: note: 'primes_count_step'\
    \ previously declared here\n    var primes_count_step = 1\n        ^\n/tmp/tmpwgz26pky.swift:64:28:\
    \ error: cannot find 'prime' in scope\n    var primes_count_min = prime\n    \
    \                       ^~~~~\n"
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 100 {\n      \
    \  return false\n    }\n    var primes = [Int]()\n    var prime: Int = 0\n   \
    \ var isPrime = true\n    var isMultiplyPrime = true\n    var isMultiplyPrime2\
    \ = true\n    var isMultiplyPrime3 = true\n    var isMultiplyPrime4 = true\n \
    \   var isMultiplyPrime5 = true\n    var isMultiplyPrime6 = true\n    var isMultiplyPrime7\
    \ = true\n    var isMultiplyPrime8 = true\n    var isMultiplyPrime9 = true\n \
    \   var isMultiplyPrime10 = true\n    var isMultiplyPrime11 = true\n    var isMultiplyPrime12\
    \ = true\n    var isMultiplyPrime13 = true\n    var isMultiplyPrime14 = true\n\
    \    var isMultiplyPrime15 = true\n    var isMultiplyPrime16 = true\n    var isMultiplyPrime17\
    \ = true\n    var isMultiplyPrime18 = true\n    var isMultiplyPrime19 = true\n\
    \    var isMultiplyPrime20 = true\n    var isMultiplyPrime21 = true\n    var isMultiplyPrime22\
    \ = true\n    var isMultiplyPrime23 = true\n    var isMultiplyPrime24 = true\n\
    \    var isMultiplyPrime25 = true\n    var isMultiplyPrime26 = true\n    var isMultiplyPrime27\
    \ = true\n    var isMultiplyPrime28 = true\n    var isMultiplyPrime29 = true\n\
    \    var isMultiplyPrime30 = true\n    var isMultiplyPrime31 = true\n    var isMultiplyPrime32\
    \ = true\n    var isMultiplyPrime33 = true\n    var isMultiplyPrime34 = true\n\
    \    var isMultiplyPrime35 = true\n    var isMultiplyPrime36 = true\n    var isMultiplyPrime37\
    \ = true\n    var isMultiplyPrime38 = true\n    var isMultiplyPrime39 = true\n\
    \    var isMultiplyPrime40 = true\n    var isMultiplyPrime41 = true\n    var isMultiplyPrime42\
    \ = true\n    var isMultiplyPrime43 = true\n    var isMultiplyPrime44 = true\n\
    \    var isMultiplyPrime45 = true\n    var isMultiplyPrime46 = true\n    var isMultiplyPrime47\
    \ = true\n    var isMultiplyPrime48 = true\n    var isMultiplyPrime49 = true\n\
    \    var isMultiplyPrime50 = true\n    var isMultiplyPrime51 = true\n    var isMultiplyPrime52\
    \ = true\n    var isMultiplyPrime5\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpgaej_dkw.swift:68:9: error: type annotation missing in pattern\n\
    \    var isMultiplyPrime5\n        ^\n"
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    \n    if a < 100 {\n        \n        let primes = primes(a: a)\n       \
    \ \n        for prime in primes {\n            \n            if a % prime == 0\
    \ {\n                \n                result = true\n                break\n\
    \            }\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpa3foe9lw.swift:14:22: error: use of local variable 'primes' before\
    \ its declaration\n        let primes = primes(a: a)\n                     ^\n\
    /tmp/tmpa3foe9lw.swift:14:13: note: 'primes' declared here\n        let primes\
    \ = primes(a: a)\n            ^\n"
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    var primes = [Int]()\n    \n    for var i = 2; i < a; i++ {\n        if a\
    \ % i == 0 {\n            primes.append(i)\n        }\n    }\n    \n    if primes.count\
    \ > 2 {\n        result = true\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpg6gdzeny.swift:13:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 2; i < a; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824577
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    \n    let primes = [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97]\n    \n    for i in 0..<primes.count {\n        if a % primes[i]\
    \ == 0 {\n            return false\n        }\n    }\n    \n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpiqhnc05d/tmpiqhnc05d.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afa68ae9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afa687e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afa687e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afa687df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiqhnc05d                        0x000055f05abc4567 <unavailable> + 5479

    5    libc.so.6                          0x00002afa68cd5460 __libc_start_main +
    245

    6    tmpiqhnc05d                        0x000055f05abc41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 100 {\n      \
    \  return false\n    }\n    var primes = [Int]()\n    var primes_count = 100\n\
    \    var primes_sum = 0\n    var primes_sum2 = 0\n    var primes_sum3 = 0\n  \
    \  var primes_sum4 = 0\n    var primes_sum5 = 0\n    var primes_sum6 = 0\n   \
    \ var primes_sum7 = 0\n    var primes_sum8 = 0\n    var primes_sum9 = 0\n    var\
    \ primes_sum10 = 0\n    var primes_sum11 = 0\n    var primes_sum12 = 0\n    var\
    \ primes_sum13 = 0\n    var primes_sum14 = 0\n    var primes_sum15 = 0\n    var\
    \ primes_sum16 = 0\n    var primes_sum17 = 0\n    var primes_sum18 = 0\n    var\
    \ primes_sum19 = 0\n    var primes_sum20 = 0\n    var primes_sum21 = 0\n    var\
    \ primes_sum22 = 0\n    var primes_sum23 = 0\n    var primes_sum24 = 0\n    var\
    \ primes_sum25 = 0\n    var primes_sum26 = 0\n    var primes_sum27 = 0\n    var\
    \ primes_sum28 = 0\n    var primes_sum29 = 0\n    var primes_sum30 = 0\n    var\
    \ primes_sum31 = 0\n    var primes_sum32 = 0\n    var primes_sum33 = 0\n    var\
    \ primes_sum34 = 0\n    var primes_sum35 = 0\n    var primes_sum36 = 0\n    var\
    \ primes_sum37 = 0\n    var primes_sum38 = 0\n    var primes_sum39 = 0\n    var\
    \ primes_sum40 = 0\n    var primes_sum41 = 0\n    var primes_sum42 = 0\n    var\
    \ primes_sum43 = 0\n    var primes_sum44 = 0\n    var primes_sum45 = 0\n    var\
    \ primes_sum46 = 0\n    var primes_sum47 = 0\n    var primes_sum48 = 0\n    var\
    \ primes_sum49 = 0\n    var primes_sum50 = 0\n    var primes_sum51 = 0\n    var\
    \ primes_sum52 = 0\n    var primes_sum53 = 0\n    var primes_sum54 = 0\n    var\
    \ primes_sum55 = 0\n    var primes_sum56 = 0\n    var primes_sum57 = 0\n    var\
    \ primes_sum58 = 0\n    var primes_sum59 = 0\n    var primes_sum60 = 0\n    var\
    \ primes_sum61 = 0\n    var primes_sum62 = 0\n    var primes_sum63 = 0\n    var\
    \ primes_sum64 = 0\n    var primes_sum65 = 0\n    var primes_sum66 = 0\n    var\
    \ primes_sum67 = 0\n    var primes_sum68 = 0\n    var primes_sum69 = 0\n    var\
    \ primes_sum70 = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmphawwsyhz.swift:13:9: warning: initialization of variable 'primes'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes = [Int]()\n    ~~~~^~~~~~\n    _\n/tmp/tmphawwsyhz.swift:14:9:\
    \ warning: initialization of variable 'primes_count' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var primes_count = 100\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:15:9: warning: initialization\
    \ of variable 'primes_sum' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var primes_sum = 0\n    ~~~~^~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:16:9:\
    \ warning: initialization of variable 'primes_sum2' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum2 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmphawwsyhz.swift:17:9: warning: initialization of variable 'primes_sum3'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum3 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:18:9:\
    \ warning: initialization of variable 'primes_sum4' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum4 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmphawwsyhz.swift:19:9: warning: initialization of variable 'primes_sum5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum5 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:20:9:\
    \ warning: initialization of variable 'primes_sum6' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum6 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmphawwsyhz.swift:21:9: warning: initialization of variable 'primes_sum7'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum7 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:22:9:\
    \ warning: initialization of variable 'primes_sum8' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum8 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmphawwsyhz.swift:23:9: warnin"
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 100 {\n      \
    \  return false\n    }\n    \n    var primes = [Int]()\n    var primes_count =\
    \ 100\n    var primes_sum = 0\n    \n    for _ in 0..<primes_count {\n       \
    \ primes.append(0)\n    }\n    \n    for _ in 0..<primes_count {\n        primes[Int(arc4random_uniform(UInt32(primes_sum)))]\
    \ += 1\n    }\n    \n    for _ in 0..<primes_count {\n        if primes[Int(arc4random_uniform(UInt32(primes_sum)))]\
    \ == 2 {\n            primes[Int(arc4random_uniform(UInt32(primes_sum)))] += 1\n\
    \        }\n    }\n    \n    for _ in 0..<primes_count {\n        if primes[Int(arc4random_uniform(UInt32(primes_sum)))]\
    \ == 3 {\n            primes[Int(arc4random_uniform(UInt32(primes_sum)))] += 1\n\
    \        }\n    }\n    \n    for _ in 0..<primes_count {\n        if primes[Int(arc4random_uniform(UInt32(primes_sum)))]\
    \ == 5 {\n            primes[Int(arc4random_uniform(UInt32(primes_sum)))] += 1\n\
    \        }\n    }\n    \n    for _ in 0..<primes_count {\n        if primes[Int(arc4random_uniform(UInt32(primes_sum)))]\
    \ == 7 {\n            primes[Int(arc4random_uniform(UInt32(primes_sum)))] += 1\n\
    \        }\n    }\n    \n    for _ in 0..<primes_count {\n        if primes[Int(arc4random_uniform(UInt32(primes_sum)))]\
    \ == 11 {\n            primes[Int(arc4random_uniform(UInt32(primes_sum)))] +=\
    \ 1\n        }\n    }\n    \n    for _ in 0..<primes_count {\n        if primes[Int(arc4random_uniform(UInt32(primes_sum)))]\
    \ == 13 {\n            primes[Int(arc4random_uniform(UInt32(primes_sum)))] +=\
    \ 1\n        }\n    }\n    \n    for _ in 0..<primes_count {\n        if primes[Int(arc4random_uniform(UInt32(primes_sum)))]\
    \ == 17 {\n            primes[Int(arc4random_uniform(UInt32(primes_sum)))] +=\
    \ 1\n        }\n    }\n    \n    for _ in 0..<primes_count {\n        if primes[Int(arc4random_uniform(UInt32(primes_sum)))]\
    \ == 19 {\n            primes[Int(arc4random_uniform(UInt32(primes_sum)))] +=\
    \ 1\n        }\n    }\n    \n    for _ in 0..<primes_count {\n        if primes[Int(\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp1061gwh0.swift:76:1: error: expected expression in list of expressions\n\
    }\n^\n/tmp/tmp1061gwh0.swift:100:43: error: expected '}' at end of brace statement\n\
    assert(is_multiply_prime(a: 1001) == true)\n                                 \
    \         ^\n/tmp/tmp1061gwh0.swift:9:40: note: to match this opening '{'\nfunc\
    \ is_multiply_prime(a: Int) -> Bool {\n                                      \
    \ ^\n/tmp/tmp1061gwh0.swift:23:20: error: cannot find 'arc4random_uniform' in\
    \ scope\n        primes[Int(arc4random_uniform(UInt32(primes_sum)))] += 1\n  \
    \                 ^~~~~~~~~~~~~~~~~~\n/tmp/tmp1061gwh0.swift:27:23: error: cannot\
    \ find 'arc4random_uniform' in scope\n        if primes[Int(arc4random_uniform(UInt32(primes_sum)))]\
    \ == 2 {\n                      ^~~~~~~~~~~~~~~~~~\n/tmp/tmp1061gwh0.swift:28:24:\
    \ error: cannot find 'arc4random_uniform' in scope\n            primes[Int(arc4random_uniform(UInt32(primes_sum)))]\
    \ += 1\n                       ^~~~~~~~~~~~~~~~~~\n/tmp/tmp1061gwh0.swift:33:23:\
    \ error: cannot find 'arc4random_uniform' in scope\n        if primes[Int(arc4random_uniform(UInt32(primes_sum)))]\
    \ == 3 {\n                      ^~~~~~~~~~~~~~~~~~\n/tmp/tmp1061gwh0.swift:34:24:\
    \ error: cannot find 'arc4random_uniform' in scope\n            primes[Int(arc4random_uniform(UInt32(primes_sum)))]\
    \ += 1\n                       ^~~~~~~~~~~~~~~~~~\n/tmp/tmp1061gwh0.swift:39:23:\
    \ error: cannot find 'arc4random_uniform' in scope\n        if primes[Int(arc4random_uniform(UInt32(primes_sum)))]\
    \ == 5 {\n                      ^~~~~~~~~~~~~~~~~~\n/tmp/tmp1061gwh0.swift:40:24:\
    \ error: cannot find 'arc4random_uniform' in scope\n            primes[Int(arc4random_uniform(UInt32(primes_sum)))]\
    \ += 1\n                       ^~~~~~~~~~~~~~~~~~\n/tmp/tmp1061gwh0.swift:45:23:\
    \ error: cannot find 'arc4random_uniform' in scope\n        if primes[Int(arc4random_uniform(UInt32(primes_sum)))]\
    \ == 7 {\n                      ^~~~~~~~~~~~~~~~~~\n/tmp/tmp1061gwh0.swift:46:24:\
    \ error: cannot find 'arc4random_uniform' in scope\n            primes[Int(arc4random_uniform(UInt32(primes_sum)))]\
    \ += "
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 100 {\n      \
    \  return false\n    }\n    var primes = [Int]()\n    var primes_count = Int(0)\n\
    \    var is_multiply = true\n    for n in 2..<Int(sqrt(a)) {\n        if a % n\
    \ == 0 {\n            primes.append(n)\n            primes_count += 1\n      \
    \  }\n    }\n    if primes_count == 3 {\n        for n in 2..<Int(sqrt(a)) {\n\
    \            if a % n == 0 {\n                primes.append(n)\n             \
    \   primes_count += 1\n            }\n        }\n    }\n    if primes_count !=\
    \ 3 {\n        is_multiply = false\n    }\n    return is_multiply\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp20sikvj2.swift:16:22: error: cannot find 'sqrt' in scope\n    for\
    \ n in 2..<Int(sqrt(a)) {\n                     ^~~~\n/tmp/tmp20sikvj2.swift:23:26:\
    \ error: cannot find 'sqrt' in scope\n        for n in 2..<Int(sqrt(a)) {\n  \
    \                       ^~~~\n"
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 100 {\n      \
    \  return false\n    }\n    \n    var primes = [Int]()\n    var prime: Int = 0\n\
    \    var isPrime = true\n    \n    for prime in 2...Int(sqrt(a)) {\n        if\
    \ a % prime == 0 {\n            isPrime = false\n            break\n        }\n\
    \        \n        if prime > Int(sqrt(a)) {\n            break\n        }\n \
    \       \n        primes.append(prime)\n    }\n    \n    if isPrime {\n      \
    \  return true\n    }\n    \n    for prime in primes {\n        if a % prime ==\
    \ 0 {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpe57fxi1k.swift:18:26: error: cannot find 'sqrt' in scope\n    for\
    \ prime in 2...Int(sqrt(a)) {\n                         ^~~~\n"
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = true\n \
    \   var primes = [Int]()\n    var prime_numbers = [Int]()\n    var prime_numbers_count\
    \ = Int()\n    var prime_numbers_count_max = Int()\n    var prime_numbers_count_min\
    \ = Int()\n    var prime_numbers_count_max_prime = Int()\n    var prime_numbers_count_min_prime\
    \ = Int()\n    var prime_numbers_count_max_prime_prime = Int()\n    var prime_numbers_count_min_prime_prime\
    \ = Int()\n    var prime_numbers_count_max_prime_prime_prime = Int()\n    var\
    \ prime_numbers_count_min_prime_prime_prime = Int()\n    var prime_numbers_count_max_prime_prime_prime_prime\
    \ = Int()\n    var prime_numbers_count_min_prime_prime_prime_prime = Int()\n \
    \   var prime_numbers_count_max_prime_prime_prime_prime_prime = Int()\n    var\
    \ prime_numbers_count_min_prime_prime_prime_prime_prime = Int()\n    var prime_numbers_count_max_prime_prime_prime_prime_prime_prime\
    \ = Int()\n    var prime_numbers_count_min_prime_prime_prime_prime_prime_prime\
    \ = Int()\n    var prime_numbers_count_max_prime_prime_prime_prime_prime_prime_prime\
    \ = Int()\n    var prime_numbers_count_min_prime_prime_prime_prime_prime_prime_prime\
    \ = Int()\n    var prime_numbers_count_max_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Int()\n    var prime_numbers_count_min_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Int()\n    var prime_numbers_count_max_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Int()\n    var prime_numbers_count_min_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Int()\n    var prime_numbers_count_max_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Int()\n    var prime_numbers_count_min_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Int()\n    var prime_numbers_count_max_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Int()\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp929_tumg.swift:37:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp929_tumg.swift:34:9: error: invalid redeclaration of 'prime_numbers_count_max_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime'\n\
    \    var prime_numbers_count_max_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Int()\n        ^\n/tmp/tmp929_tumg.swift:32:9: note: 'prime_numbers_count_max_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime'\
    \ previously declared here\n    var prime_numbers_count_max_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Int()\n        ^\n"
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 100 {\n      \
    \  return false\n    }\n    var primes = [Int]()\n    var primes_count = Int(0)\n\
    \    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var\
    \ primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max\
    \ = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n\
    \    var primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n    var\
    \ primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min\
    \ = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n\
    \    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var\
    \ primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max\
    \ = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n\
    \    var primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n    var\
    \ primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min\
    \ = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n\
    \    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var\
    \ primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max\
    \ = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n\
    \    var primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n    var\
    \ primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min\
    \ = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n\
    \    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var\
    \ primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max\
    \ = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n\
    \    var primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n    var\
    \ primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min\
    \ = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n\
    \    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var\
    \ primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max\
    \ = Int(0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7785icct.swift:17:9: error: invalid redeclaration of 'primes_count_max'\n\
    \    var primes_count_max = Int(0)\n        ^\n/tmp/tmp7785icct.swift:15:9: note:\
    \ 'primes_count_max' previously declared here\n    var primes_count_max = Int(0)\n\
    \        ^\n/tmp/tmp7785icct.swift:18:9: error: invalid redeclaration of 'primes_count_min'\n\
    \    var primes_count_min = Int(0)\n        ^\n/tmp/tmp7785icct.swift:16:9: note:\
    \ 'primes_count_min' previously declared here\n    var primes_count_min = Int(0)\n\
    \        ^\n/tmp/tmp7785icct.swift:19:9: error: invalid redeclaration of 'primes_count_max'\n\
    \    var primes_count_max = Int(0)\n        ^\n/tmp/tmp7785icct.swift:15:9: note:\
    \ 'primes_count_max' previously declared here\n    var primes_count_max = Int(0)\n\
    \        ^\n/tmp/tmp7785icct.swift:20:9: error: invalid redeclaration of 'primes_count_min'\n\
    \    var primes_count_min = Int(0)\n        ^\n/tmp/tmp7785icct.swift:16:9: note:\
    \ 'primes_count_min' previously declared here\n    var primes_count_min = Int(0)\n\
    \        ^\n/tmp/tmp7785icct.swift:21:9: error: invalid redeclaration of 'primes_count_max'\n\
    \    var primes_count_max = Int(0)\n        ^\n/tmp/tmp7785icct.swift:15:9: note:\
    \ 'primes_count_max' previously declared here\n    var primes_count_max = Int(0)\n\
    \        ^\n/tmp/tmp7785icct.swift:22:9: error: invalid redeclaration of 'primes_count_min'\n\
    \    var primes_count_min = Int(0)\n        ^\n/tmp/tmp7785icct.swift:16:9: note:\
    \ 'primes_count_min' previously declared here\n    var primes_count_min = Int(0)\n\
    \        ^\n/tmp/tmp7785icct.swift:23:9: error: invalid redeclaration of 'primes_count_max'\n\
    \    var primes_count_max = Int(0)\n        ^\n/tmp/tmp7785icct.swift:15:9: note:\
    \ 'primes_count_max' previously declared here\n    var primes_count_max = Int(0)\n\
    \        ^\n/tmp/tmp7785icct.swift:24:9: error: invalid redeclaration of 'primes_count_min'\n\
    \    var primes_count_min = Int(0)\n        ^\n/tmp/tmp7785icct.swift:16:9: note:\
    \ 'primes_count_min' previously declared here\n    var primes_count_min = Int(0)\n\
    \        ^\n/tmp/tmp7785icct.swift:25:9: error: invalid redeclaration of 'primes_cou"
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 100 {\n      \
    \  return false\n    }\n    \n    var primes = [Int]()\n    \n    for n in 2...Int(ceil(sqrt(a)))\
    \ {\n        if a % n == 0 {\n            primes.append(n)\n        }\n    }\n\
    \    \n    if primes.count < 3 {\n        return false\n    }\n    \n    for n\
    \ in 2...3 {\n        if primes.contains(n) {\n            return false\n    \
    \    }\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpejeq1mkg.swift:16:22: error: cannot find 'ceil' in scope\n    for\
    \ n in 2...Int(ceil(sqrt(a))) {\n                     ^~~~\n/tmp/tmpejeq1mkg.swift:16:27:\
    \ error: cannot find 'sqrt' in scope\n    for n in 2...Int(ceil(sqrt(a))) {\n\
    \                          ^~~~\n"
  stdout: ''
  timestamp: 1659824577
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    \n    let primes = [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97]\n    \n    for prime in primes {\n        if a % prime == 0\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmp5xv9fw7i/tmp5xv9fw7i.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad589398c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad58908fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad58908f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad58908e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5xv9fw7i                        0x000055a342cb5527 <unavailable> + 5415

    5    libc.so.6                          0x00002ad589584460 __libc_start_main +
    245

    6    tmp5xv9fw7i                        0x000055a342cb5169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659824577
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    \n    let primes = Array(1...100).filter({\
    \ $0 % 2 == 0 })\n    \n    if primes.contains(a) {\n        return true\n   \
    \ }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmp06umdz_a/tmp06umdz_a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b028cfa5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b028cc9cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b028cc9c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b028cc9b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp06umdz_a                        0x00005612a80b0601 <unavailable> + 5633

    5    libc.so.6                          0x00002b028d191460 __libc_start_main +
    245

    6    tmp06umdz_a                        0x00005612a80b0159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 100 {\n      \
    \  return false\n    }\n    var primes = [Int]()\n    var primes_count = Int(0)\n\
    \    var is_multiply_prime = false\n    for n in 2..100 {\n        if primes_count\
    \ == 0 {\n            primes.append(n)\n        }\n        for p in primes.indices\
    \ {\n            if n % p == 0 {\n                primes.removeAtIndex(p)\n  \
    \              primes_count = Int(0)\n                break\n            }\n \
    \           primes_count = Int(primes_count + 1)\n        }\n        if primes_count\
    \ == 3 {\n            is_multiply_prime = true\n            break\n        }\n\
    \    }\n    return is_multiply_prime\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpe5su805f.swift:16:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for n in 2..100 {\n              ^~\n             \
    \ ...\n"
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 100 {\n      \
    \  return false\n    }\n    var primes = [Int]()\n    var primes_count = 100\n\
    \    for _ in 0..<primes_count {\n        primes.append(0)\n    }\n    primes[0]\
    \ = 1\n    for var i = 2; i < primes_count; i++ {\n        for var j = 2; j <\
    \ primes_count; j++ {\n            if ((primes[j] * primes[i]) == a) {\n     \
    \           primes[j] += 1\n                break\n            }\n        }\n\
    \    }\n    return primes.contains(2)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmptwiqdxvy.swift:19:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 2; i < primes_count; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmptwiqdxvy.swift:20:9: error: C-style for statement has been removed in\
    \ Swift 3\n        for var j = 2; j < primes_count; j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 100 {\n      \
    \  return false\n    }\n    \n    var primes = [Int]()\n    var primes_count =\
    \ 0\n    \n    for n in 2...Int(sqrt(a)) {\n        if a % n == 0 {\n        \
    \    primes.append(n)\n            primes_count += 1\n        }\n    }\n    \n\
    \    if primes_count == 3 {\n        return true\n    }\n    \n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpbrmonx5y.swift:17:22: error: cannot find 'sqrt' in scope\n    for\
    \ n in 2...Int(sqrt(a)) {\n                     ^~~~\n"
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 100 {\n      \
    \  return false\n    }\n    \n    var primes = [Int]()\n    var primes_count =\
    \ Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n\
    \    \n    for var i = 2; i < a; i++ {\n        if a % i == 0 {\n            primes.append(i)\n\
    \            primes_count += 1\n            if primes_count > primes_count_max\
    \ {\n                primes_count_max = primes_count\n            }\n        \
    \    if primes_count < primes_count_min {\n                primes_count_min =\
    \ primes_count\n            }\n        }\n    }\n    \n    if primes_count_min\
    \ == primes_count_max {\n        return true\n    }\n    \n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp87nqolxw.swift:19:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 2; i < a; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    var primes = [Int]()\n    var primes_count = 100\n    var primes_count_max\
    \ = 300\n    var primes_count_min = 3\n    var primes_count_step = 2\n    var\
    \ primes_count_max = primes_count_min + primes_count_step\n    var primes_count_min\
    \ = primes_count_max\n    var primes_count_step = primes_count_min + primes_count_step\n\
    \    var primes_count_max = primes_count_min + primes_count_step\n    var primes_count_min\
    \ = primes_count_max\n    var primes_count_step = primes_count_min + primes_count_step\n\
    \    var primes_count_max = primes_count_min + primes_count_step\n    var primes_count_min\
    \ = primes_count_max\n    var primes_count_step = primes_count_min + primes_count_step\n\
    \    var primes_count_max = primes_count_min + primes_count_step\n    var primes_count_min\
    \ = primes_count_max\n    var primes_count_step = primes_count_min + primes_count_step\n\
    \    var primes_count_max = primes_count_min + primes_count_step\n    var primes_count_min\
    \ = primes_count_max\n    var primes_count_step = primes_count_min + primes_count_step\n\
    \    var primes_count_max = primes_count_min + primes_count_step\n    var primes_count_min\
    \ = primes_count_max\n    var primes_count_step = primes_count_min + primes_count_step\n\
    \    var primes_count_max = primes_count_min + primes_count_step\n    var primes_count_min\
    \ = primes_count_max\n    var primes_count_step = primes_count_min + primes_count_step\n\
    \    var primes_count_max = primes_count_min + primes_count_step\n    var primes_count_min\
    \ = primes_count_max\n    var primes_count_step = primes_count_min + primes_count_step\n\
    \    var primes_count_max = primes_count_min + primes_count_step\n    var primes_count_min\
    \ = primes_count_max\n    var primes_count_step = primes_count_min + primes_count_step\n\
    \    var primes_count_max = primes_count_min + primes_count_step\n    var primes_count_min\
    \ = primes_count_max\n    var primes_count_step = primes_count_min + primes_count_step\n\
    \    var primes_count_max = primes_count_min + primes_count_step\n    var primes_count_min\
    \ = primes_count_max\n    var primes_count_step = primes_count_min + primes_count_step\n\
    \    var primes_count_max = primes_count_min + primes_count_step\n    var primes_count_min\
    \ = primes_count_max\n    var primes_count_step = primes_count_\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_ooi1g69.swift:16:9: error: invalid redeclaration of 'primes_count_max'\n\
    \    var primes_count_max = primes_count_min + primes_count_step\n        ^\n\
    /tmp/tmp_ooi1g69.swift:13:9: note: 'primes_count_max' previously declared here\n\
    \    var primes_count_max = 300\n        ^\n/tmp/tmp_ooi1g69.swift:51:29: error:\
    \ cannot find 'primes_count_' in scope\n    var primes_count_step = primes_count_\n\
    \                            ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = true\n \
    \   \n    for n in 2..100 {\n        if a % n == 0 {\n            result = false\n\
    \            break\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp6s4na06l.swift:12:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for n in 2..100 {\n              ^~\n             \
    \ ...\n"
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = true\n \
    \   for _ in 0..<100 {\n        if a % 3 == 0 || a % 5 == 0 {\n            result\
    \ = false\n            break\n        }\n        a = a / 3\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpbmw7n4dn.swift:16:9: error: cannot assign to value: 'a' is a 'let'\
    \ constant\n        a = a / 3\n        ^\n"
  stdout: ''
  timestamp: 1659824577
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 100 {\n      \
    \  return false\n    }\n    \n    var primes = [Int]()\n    \n    for i in 1...a\
    \ {\n        if a % i == 0 {\n            primes.append(i)\n        }\n    }\n\
    \    \n    if primes.count == 3 {\n        return true\n    }\n    \n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a: 5)\
    \ == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmpj18blo9m/tmpj18blo9m.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7058aa6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b705879db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b705879d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b705879c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj18blo9m                        0x000055ff3a059507 <unavailable> + 5383

    5    libc.so.6                          0x00002b7058c92460 __libc_start_main +
    245

    6    tmpj18blo9m                        0x000055ff3a059149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824577
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 100 {\n      \
    \  return false\n    }\n    \n    var primes = [Int]()\n    \n    for i in 1...a\
    \ {\n        if a % i == 0 {\n            primes.append(i)\n        }\n    }\n\
    \    \n    if primes.count == 3 {\n        return true\n    }\n    \n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a: 5)\
    \ == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmpj18blo9m/tmpj18blo9m.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7058aa6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b705879db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b705879d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b705879c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj18blo9m                        0x000055ff3a059507 <unavailable> + 5383

    5    libc.so.6                          0x00002b7058c92460 __libc_start_main +
    245

    6    tmpj18blo9m                        0x000055ff3a059149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var primes = [Int]()\n\
    \    var primes_count = 100\n    var primes_sum = 0\n    var primes_sum2 = 0\n\
    \    var primes_sum3 = 0\n    var primes_sum4 = 0\n    var primes_sum5 = 0\n \
    \   var primes_sum6 = 0\n    var primes_sum7 = 0\n    var primes_sum8 = 0\n  \
    \  var primes_sum9 = 0\n    var primes_sum10 = 0\n    var primes_sum11 = 0\n \
    \   var primes_sum12 = 0\n    var primes_sum13 = 0\n    var primes_sum14 = 0\n\
    \    var primes_sum15 = 0\n    var primes_sum16 = 0\n    var primes_sum17 = 0\n\
    \    var primes_sum18 = 0\n    var primes_sum19 = 0\n    var primes_sum20 = 0\n\
    \    var primes_sum21 = 0\n    var primes_sum22 = 0\n    var primes_sum23 = 0\n\
    \    var primes_sum24 = 0\n    var primes_sum25 = 0\n    var primes_sum26 = 0\n\
    \    var primes_sum27 = 0\n    var primes_sum28 = 0\n    var primes_sum29 = 0\n\
    \    var primes_sum30 = 0\n    var primes_sum31 = 0\n    var primes_sum32 = 0\n\
    \    var primes_sum33 = 0\n    var primes_sum34 = 0\n    var primes_sum35 = 0\n\
    \    var primes_sum36 = 0\n    var primes_sum37 = 0\n    var primes_sum38 = 0\n\
    \    var primes_sum39 = 0\n    var primes_sum40 = 0\n    var primes_sum41 = 0\n\
    \    var primes_sum42 = 0\n    var primes_sum43 = 0\n    var primes_sum44 = 0\n\
    \    var primes_sum45 = 0\n    var primes_sum46 = 0\n    var primes_sum47 = 0\n\
    \    var primes_sum48 = 0\n    var primes_sum49 = 0\n    var primes_sum50 = 0\n\
    \    var primes_sum51 = 0\n    var primes_sum52 = 0\n    var primes_sum53 = 0\n\
    \    var primes_sum54 = 0\n    var primes_sum55 = 0\n    var primes_sum56 = 0\n\
    \    var primes_sum57 = 0\n    var primes_sum58 = 0\n    var primes_sum59 = 0\n\
    \    var primes_sum60 = 0\n    var primes_sum61 = 0\n    var primes_sum62 = 0\n\
    \    var primes_sum63 = 0\n    var primes_sum64 = 0\n    var primes_sum65 = 0\n\
    \    var primes_sum66 = 0\n    var primes_sum67 = 0\n    var primes_sum68 = 0\n\
    \    var primes_sum69 = 0\n    var primes_sum70 = 0\n    var primes_sum71 = 0\n\
    \    var primes_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7b6uvaj2.swift:83:9: error: type annotation missing in pattern\n\
    \    var primes_\n        ^\n"
  stdout: ''
  timestamp: 1659824577
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = true\n \
    \   for number in 1...a {\n        if number % 3 != 0 || number % 5 != 0 {\n \
    \           result = false\n            break\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpeoar4byt/tmpeoar4byt.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad814577c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad81426eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad81426e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad81426d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeoar4byt                        0x00005573c35503a7 <unavailable> + 5031

    5    libc.so.6                          0x00002ad814763460 __libc_start_main +
    245

    6    tmpeoar4byt                        0x00005573c354ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = true\n \
    \   for _ in 0..<100 {\n        if a % 3 == 0 || a % 5 == 0 {\n            result\
    \ = false\n            break\n        }\n        a += 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpof1025kj.swift:16:11: error: left side of mutating operator isn't\
    \ mutable: 'a' is a 'let' constant\n        a += 1\n        ~ ^\n"
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 100 {\n      \
    \  return false\n    }\n    var primes = [Int]()\n    var primes_count = Int(0)\n\
    \    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var\
    \ primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max\
    \ = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n\
    \    var primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n    var\
    \ primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min\
    \ = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n\
    \    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var\
    \ primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max\
    \ = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n\
    \    var primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n    var\
    \ primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min\
    \ = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n\
    \    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var\
    \ primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max\
    \ = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n\
    \    var primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n    var\
    \ primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min\
    \ = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n\
    \    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var\
    \ primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max\
    \ = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n\
    \    var primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n    var\
    \ primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min\
    \ = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n\
    \    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var\
    \ primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max\
    \ = Int(0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7785icct.swift:17:9: error: invalid redeclaration of 'primes_count_max'\n\
    \    var primes_count_max = Int(0)\n        ^\n/tmp/tmp7785icct.swift:15:9: note:\
    \ 'primes_count_max' previously declared here\n    var primes_count_max = Int(0)\n\
    \        ^\n/tmp/tmp7785icct.swift:18:9: error: invalid redeclaration of 'primes_count_min'\n\
    \    var primes_count_min = Int(0)\n        ^\n/tmp/tmp7785icct.swift:16:9: note:\
    \ 'primes_count_min' previously declared here\n    var primes_count_min = Int(0)\n\
    \        ^\n/tmp/tmp7785icct.swift:19:9: error: invalid redeclaration of 'primes_count_max'\n\
    \    var primes_count_max = Int(0)\n        ^\n/tmp/tmp7785icct.swift:15:9: note:\
    \ 'primes_count_max' previously declared here\n    var primes_count_max = Int(0)\n\
    \        ^\n/tmp/tmp7785icct.swift:20:9: error: invalid redeclaration of 'primes_count_min'\n\
    \    var primes_count_min = Int(0)\n        ^\n/tmp/tmp7785icct.swift:16:9: note:\
    \ 'primes_count_min' previously declared here\n    var primes_count_min = Int(0)\n\
    \        ^\n/tmp/tmp7785icct.swift:21:9: error: invalid redeclaration of 'primes_count_max'\n\
    \    var primes_count_max = Int(0)\n        ^\n/tmp/tmp7785icct.swift:15:9: note:\
    \ 'primes_count_max' previously declared here\n    var primes_count_max = Int(0)\n\
    \        ^\n/tmp/tmp7785icct.swift:22:9: error: invalid redeclaration of 'primes_count_min'\n\
    \    var primes_count_min = Int(0)\n        ^\n/tmp/tmp7785icct.swift:16:9: note:\
    \ 'primes_count_min' previously declared here\n    var primes_count_min = Int(0)\n\
    \        ^\n/tmp/tmp7785icct.swift:23:9: error: invalid redeclaration of 'primes_count_max'\n\
    \    var primes_count_max = Int(0)\n        ^\n/tmp/tmp7785icct.swift:15:9: note:\
    \ 'primes_count_max' previously declared here\n    var primes_count_max = Int(0)\n\
    \        ^\n/tmp/tmp7785icct.swift:24:9: error: invalid redeclaration of 'primes_count_min'\n\
    \    var primes_count_min = Int(0)\n        ^\n/tmp/tmp7785icct.swift:16:9: note:\
    \ 'primes_count_min' previously declared here\n    var primes_count_min = Int(0)\n\
    \        ^\n/tmp/tmp7785icct.swift:25:9: error: invalid redeclaration of 'primes_cou"
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    \n    if a < 100 {\n\
    \        return false\n    }\n    \n    var primes = [Int]()\n    var prime: Int\n\
    \    \n    for prime in 2...Int(ceil(sqrt(a))) {\n        if a % prime == 0 {\n\
    \            primes.append(prime)\n        }\n    }\n    \n    if primes.count\
    \ < 3 {\n        return false\n    }\n    \n    for prime in 2...3 {\n       \
    \ if primes.contains(prime) {\n            return false\n        }\n    }\n  \
    \  \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpdaehfqyg.swift:18:26: error: cannot find 'ceil' in scope\n    for\
    \ prime in 2...Int(ceil(sqrt(a))) {\n                         ^~~~\n/tmp/tmpdaehfqyg.swift:18:31:\
    \ error: cannot find 'sqrt' in scope\n    for prime in 2...Int(ceil(sqrt(a)))\
    \ {\n                              ^~~~\n"
  stdout: ''
  timestamp: 1659824577
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    \n    for n in 1...100 {\n        if a % n == 0 {\n            if a % n ==\
    \ 0 {\n                if a % n == 0 {\n                    result = true\n  \
    \              }\n            }\n        }\n    }\n    \n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpjh238i1t/tmpjh238i1t.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3694bb1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36948a8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36948a8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36948a77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjh238i1t                        0x0000557567b78333 <unavailable> + 4915

    5    libc.so.6                          0x00002b3694d9d460 __libc_start_main +
    245

    6    tmpjh238i1t                        0x0000557567b77fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var primes = [Int]()\n\
    \    var primes_count = 100\n    var primes_sum = 0\n    var primes_sum2 = 0\n\
    \    var primes_sum3 = 0\n    var primes_sum4 = 0\n    var primes_sum5 = 0\n \
    \   var primes_sum6 = 0\n    var primes_sum7 = 0\n    var primes_sum8 = 0\n  \
    \  var primes_sum9 = 0\n    var primes_sum10 = 0\n    var primes_sum11 = 0\n \
    \   var primes_sum12 = 0\n    var primes_sum13 = 0\n    var primes_sum14 = 0\n\
    \    var primes_sum15 = 0\n    var primes_sum16 = 0\n    var primes_sum17 = 0\n\
    \    var primes_sum18 = 0\n    var primes_sum19 = 0\n    var primes_sum20 = 0\n\
    \    var primes_sum21 = 0\n    var primes_sum22 = 0\n    var primes_sum23 = 0\n\
    \    var primes_sum24 = 0\n    var primes_sum25 = 0\n    var primes_sum26 = 0\n\
    \    var primes_sum27 = 0\n    var primes_sum28 = 0\n    var primes_sum29 = 0\n\
    \    var primes_sum30 = 0\n    var primes_sum31 = 0\n    var primes_sum32 = 0\n\
    \    var primes_sum33 = 0\n    var primes_sum34 = 0\n    var primes_sum35 = 0\n\
    \    var primes_sum36 = 0\n    var primes_sum37 = 0\n    var primes_sum38 = 0\n\
    \    var primes_sum39 = 0\n    var primes_sum40 = 0\n    var primes_sum41 = 0\n\
    \    var primes_sum42 = 0\n    var primes_sum43 = 0\n    var primes_sum44 = 0\n\
    \    var primes_sum45 = 0\n    var primes_sum46 = 0\n    var primes_sum47 = 0\n\
    \    var primes_sum48 = 0\n    var primes_sum49 = 0\n    var primes_sum50 = 0\n\
    \    var primes_sum51 = 0\n    var primes_sum52 = 0\n    var primes_sum53 = 0\n\
    \    var primes_sum54 = 0\n    var primes_sum55 = 0\n    var primes_sum56 = 0\n\
    \    var primes_sum57 = 0\n    var primes_sum58 = 0\n    var primes_sum59 = 0\n\
    \    var primes_sum60 = 0\n    var primes_sum61 = 0\n    var primes_sum62 = 0\n\
    \    var primes_sum63 = 0\n    var primes_sum64 = 0\n    var primes_sum65 = 0\n\
    \    var primes_sum66 = 0\n    var primes_sum67 = 0\n    var primes_sum68 = 0\n\
    \    var primes_sum69 = 0\n    var primes_sum70 = 0\n    var primes_sum71 = 0\n\
    \    var primes_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7b6uvaj2.swift:83:9: error: type annotation missing in pattern\n\
    \    var primes_\n        ^\n"
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 100 {\n      \
    \  return false\n    }\n    \n    var primes = [Int]()\n    \n    for n in 2...Int(ceil(sqrt(a)))\
    \ {\n        if a % n == 0 {\n            primes.append(n)\n        }\n    }\n\
    \    \n    if primes.count == 0 {\n        return false\n    }\n    \n    for\
    \ n in 2...Int(ceil(sqrt(a))) {\n        if a % primes.last! == 0 {\n        \
    \    return false\n        }\n    }\n    \n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp51uru3a3.swift:16:22: error: cannot find 'ceil' in scope\n    for\
    \ n in 2...Int(ceil(sqrt(a))) {\n                     ^~~~\n/tmp/tmp51uru3a3.swift:16:27:\
    \ error: cannot find 'sqrt' in scope\n    for n in 2...Int(ceil(sqrt(a))) {\n\
    \                          ^~~~\n/tmp/tmp51uru3a3.swift:26:22: error: cannot find\
    \ 'ceil' in scope\n    for n in 2...Int(ceil(sqrt(a))) {\n                   \
    \  ^~~~\n/tmp/tmp51uru3a3.swift:26:27: error: cannot find 'sqrt' in scope\n  \
    \  for n in 2...Int(ceil(sqrt(a))) {\n                          ^~~~\n"
  stdout: ''
  timestamp: 1659824577
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = true\n \
    \   var i = 2\n    while i <= 100 {\n        if a % i == 0 {\n            result\
    \ = false\n            break\n        }\n        i += 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpya1joz8p/tmpya1joz8p.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a4784dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a47544b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1a47544988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1a475437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpya1joz8p                        0x00005622b8a862b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b1a47a39460 __libc_start_main +
    245

    6    tmpya1joz8p                        0x00005622b8a85ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = true\n \
    \   var primes = [Int]()\n    var prime: Int\n    var i: Int\n    var j: Int\n\
    \    var k: Int\n    for i = 2; i < a; i++ {\n        prime = true\n        for\
    \ j = 2; j < i; j++ {\n            if i % j == 0 {\n                prime = false\n\
    \                break\n            }\n        }\n        if prime {\n       \
    \     primes.append(i)\n        }\n    }\n    for i = 2; i < a; i++ {\n      \
    \  for j = i + 1; j < a; j++ {\n            for k = j + 1; k < a; k++ {\n    \
    \            if i == j && i == k && j == k {\n                    continue\n \
    \               }\n                if is_multiply_prime(i) * is_multiply_prime(j)\
    \ * is_multiply_prime(k) == a {\n                    result = false\n        \
    \            break\n                }\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpumun30_v.swift:16:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 2; i < a; i++ {\n    ^   ~~~~~~~~~~~~~~~~~\n/tmp/tmpumun30_v.swift:18:9:\
    \ error: C-style for statement has been removed in Swift 3\n        for j = 2;\
    \ j < i; j++ {\n        ^   ~~~~~~~~~~~~~~~~~\n/tmp/tmpumun30_v.swift:28:5: error:\
    \ C-style for statement has been removed in Swift 3\n    for i = 2; i < a; i++\
    \ {\n    ^   ~~~~~~~~~~~~~~~~~\n/tmp/tmpumun30_v.swift:29:9: error: C-style for\
    \ statement has been removed in Swift 3\n        for j = i + 1; j < a; j++ {\n\
    \        ^   ~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpumun30_v.swift:30:13: error: C-style\
    \ for statement has been removed in Swift 3\n            for k = j + 1; k < a;\
    \ k++ {\n            ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    var primes = [Int]()\n    var prime = 2 // first prime number\n    var prime_found\
    \ = false\n    var prime_found2 = false\n    var prime_found3 = false\n    var\
    \ prime_found4 = false\n    var prime_found5 = false\n    var prime_found6 = false\n\
    \    var prime_found7 = false\n    var prime_found8 = false\n    var prime_found9\
    \ = false\n    var prime_found10 = false\n    var prime_found11 = false\n    var\
    \ prime_found12 = false\n    var prime_found13 = false\n    var prime_found14\
    \ = false\n    var prime_found15 = false\n    var prime_found16 = false\n    var\
    \ prime_found17 = false\n    var prime_found18 = false\n    var prime_found19\
    \ = false\n    var prime_found20 = false\n    var prime_found21 = false\n    var\
    \ prime_found22 = false\n    var prime_found23 = false\n    var prime_found24\
    \ = false\n    var prime_found25 = false\n    var prime_found26 = false\n    var\
    \ prime_found27 = false\n    var prime_found28 = false\n    var prime_found29\
    \ = false\n    var prime_found30 = false\n    var prime_found31 = false\n    var\
    \ prime_found32 = false\n    var prime_found33 = false\n    var prime_found34\
    \ = false\n    var prime_found35 = false\n    var prime_found36 = false\n    var\
    \ prime_found37 = false\n    var prime_found38 = false\n    var prime_found39\
    \ = false\n    var prime_found40 = false\n    var prime_found41 = false\n    var\
    \ prime_found42 = false\n    var prime_found43 = false\n    var prime_found44\
    \ = false\n    var prime_found45 = false\n    var prime_found46 = false\n    var\
    \ prime_found47 = false\n    var prime_found48 = false\n    var prime_found49\
    \ = false\n    var prime_found50 = false\n    var prime_found51 = false\n    var\
    \ prime_found52 = false\n    var prime_found53 = false\n    var prime_found54\
    \ = false\n    var prime_found55 = false\n    var prime_found56 = false\n    var\
    \ prime_found57 = false\n    var prime_found58 = false\n    var prime_found59\
    \ = false\n    var prime_found60 = false\n    var prime_found61 = false\n    var\
    \ prime_found62 = false\n    var prime_found63 = false\n    var prime_found64\
    \ = false\n    var prime_found65 = false\n    var prime_found66 = false\n    var\
    \ prime_found67 = false\n    var prime_found68 = false\n    var prime_found\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp3gcm039f.swift:81:9: error: type annotation missing in pattern\n\
    \    var prime_found\n        ^\n"
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var primes = [Int]()\n\
    \    var primes_count = 100\n    var primes_sum = 0\n    var primes_sum2 = 0\n\
    \    var primes_sum3 = 0\n    var primes_sum4 = 0\n    var primes_sum5 = 0\n \
    \   var primes_sum6 = 0\n    var primes_sum7 = 0\n    var primes_sum8 = 0\n  \
    \  var primes_sum9 = 0\n    var primes_sum10 = 0\n    var primes_sum11 = 0\n \
    \   var primes_sum12 = 0\n    var primes_sum13 = 0\n    var primes_sum14 = 0\n\
    \    var primes_sum15 = 0\n    var primes_sum16 = 0\n    var primes_sum17 = 0\n\
    \    var primes_sum18 = 0\n    var primes_sum19 = 0\n    var primes_sum20 = 0\n\
    \    var primes_sum21 = 0\n    var primes_sum22 = 0\n    var primes_sum23 = 0\n\
    \    var primes_sum24 = 0\n    var primes_sum25 = 0\n    var primes_sum26 = 0\n\
    \    var primes_sum27 = 0\n    var primes_sum28 = 0\n    var primes_sum29 = 0\n\
    \    var primes_sum30 = 0\n    var primes_sum31 = 0\n    var primes_sum32 = 0\n\
    \    var primes_sum33 = 0\n    var primes_sum34 = 0\n    var primes_sum35 = 0\n\
    \    var primes_sum36 = 0\n    var primes_sum37 = 0\n    var primes_sum38 = 0\n\
    \    var primes_sum39 = 0\n    var primes_sum40 = 0\n    var primes_sum41 = 0\n\
    \    var primes_sum42 = 0\n    var primes_sum43 = 0\n    var primes_sum44 = 0\n\
    \    var primes_sum45 = 0\n    var primes_sum46 = 0\n    var primes_sum47 = 0\n\
    \    var primes_sum48 = 0\n    var primes_sum49 = 0\n    var primes_sum50 = 0\n\
    \    var primes_sum51 = 0\n    var primes_sum52 = 0\n    var primes_sum53 = 0\n\
    \    var primes_sum54 = 0\n    var primes_sum55 = 0\n    var primes_sum56 = 0\n\
    \    var primes_sum57 = 0\n    var primes_sum58 = 0\n    var primes_sum59 = 0\n\
    \    var primes_sum60 = 0\n    var primes_sum61 = 0\n    var primes_sum62 = 0\n\
    \    var primes_sum63 = 0\n    var primes_sum64 = 0\n    var primes_sum65 = 0\n\
    \    var primes_sum66 = 0\n    var primes_sum67 = 0\n    var primes_sum68 = 0\n\
    \    var primes_sum69 = 0\n    var primes_sum70 = 0\n    var primes_sum71 = 0\n\
    \    var primes_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7b6uvaj2.swift:83:9: error: type annotation missing in pattern\n\
    \    var primes_\n        ^\n"
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 100 {\n      \
    \  return false\n    }\n    \n    var primes = [Int]()\n    var primes_count =\
    \ 100\n    \n    for _ in 0..<primes_count {\n        primes.append(0)\n    }\n\
    \    \n    var primes_count = 100\n    \n    for _ in 0..<primes_count {\n   \
    \     if primes[Int(arc4random_uniform(primes_count - 1))] == 0 {\n          \
    \  primes[Int(arc4random_uniform(primes_count - 1))] = 1\n        }\n    }\n \
    \   \n    var primes_count = 100\n    \n    for _ in 0..<primes_count {\n    \
    \    if primes[Int(arc4random_uniform(primes_count - 1))] == 0 {\n           \
    \ primes[Int(arc4random_uniform(primes_count - 1))] = 1\n        }\n    }\n  \
    \  \n    var primes_count = 100\n    \n    for _ in 0..<primes_count {\n     \
    \   if primes[Int(arc4random_uniform(primes_count - 1))] == 0 {\n            primes[Int(arc4random_uniform(primes_count\
    \ - 1))] = 1\n        }\n    }\n    \n    var primes_count = 100\n    \n    for\
    \ _ in 0..<primes_count {\n        if primes[Int(arc4random_uniform(primes_count\
    \ - 1))] == 0 {\n            primes[Int(arc4random_uniform(primes_count - 1))]\
    \ = 1\n        }\n    }\n    \n    var primes_count = 100\n    \n    for _ in\
    \ 0..<primes_count {\n        if primes[Int(arc4random_uniform(primes_count -\
    \ 1))] == 0 {\n            primes[Int(arc4random_uniform(primes_count - 1))] =\
    \ 1\n        }\n    }\n    \n    var primes_count = 100\n    \n    for _ in 0..<primes_count\
    \ {\n        if primes[Int(arc4random_uniform(primes_count - 1))] == 0 {\n   \
    \         primes[Int(arc4random_uniform(primes_count - 1))] = 1\n        }\n \
    \   }\n    \n    var primes_count = 100\n    \n    for _ in 0..<primes_count {\n\
    \        if primes[Int(arc4random_uniform(primes_count - 1))] == 0 {\n       \
    \     primes[Int(arc4random_uniform(primes_count - 1))] = 1\n        }\n    }\n\
    \    \n    var primes_count = 100\n    \n    for _ in 0..<primes_count {\n   \
    \     if primes[Int(arc4random_uniform(primes_count - 1))] == 0 {\n          \
    \  primes[Int(arc4random_uniform(primes_count - 1))] = 1\n        }\n    }\n \
    \   \n    var primes_count = 100\n    \n    for \n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpwd1ij_rq.swift:87:8: error: expected pattern\n    for \n      \
    \ ^\n/tmp/tmpwd1ij_rq.swift:87:8: error: expected Sequence expression for for-each\
    \ loop\n    for \n       ^\n/tmp/tmpwd1ij_rq.swift:87:8: error: expected '{' to\
    \ start the body of for-each loop\n    for \n       ^\n/tmp/tmpwd1ij_rq.swift:21:9:\
    \ error: invalid redeclaration of 'primes_count'\n    var primes_count = 100\n\
    \        ^\n/tmp/tmpwd1ij_rq.swift:15:9: note: 'primes_count' previously declared\
    \ here\n    var primes_count = 100\n        ^\n/tmp/tmpwd1ij_rq.swift:29:9: error:\
    \ invalid redeclaration of 'primes_count'\n    var primes_count = 100\n      \
    \  ^\n/tmp/tmpwd1ij_rq.swift:15:9: note: 'primes_count' previously declared here\n\
    \    var primes_count = 100\n        ^\n/tmp/tmpwd1ij_rq.swift:37:9: error: invalid\
    \ redeclaration of 'primes_count'\n    var primes_count = 100\n        ^\n/tmp/tmpwd1ij_rq.swift:15:9:\
    \ note: 'primes_count' previously declared here\n    var primes_count = 100\n\
    \        ^\n/tmp/tmpwd1ij_rq.swift:45:9: error: invalid redeclaration of 'primes_count'\n\
    \    var primes_count = 100\n        ^\n/tmp/tmpwd1ij_rq.swift:15:9: note: 'primes_count'\
    \ previously declared here\n    var primes_count = 100\n        ^\n/tmp/tmpwd1ij_rq.swift:53:9:\
    \ error: invalid redeclaration of 'primes_count'\n    var primes_count = 100\n\
    \        ^\n/tmp/tmpwd1ij_rq.swift:15:9: note: 'primes_count' previously declared\
    \ here\n    var primes_count = 100\n        ^\n/tmp/tmpwd1ij_rq.swift:61:9: error:\
    \ invalid redeclaration of 'primes_count'\n    var primes_count = 100\n      \
    \  ^\n/tmp/tmpwd1ij_rq.swift:15:9: note: 'primes_count' previously declared here\n\
    \    var primes_count = 100\n        ^\n/tmp/tmpwd1ij_rq.swift:69:9: error: invalid\
    \ redeclaration of 'primes_count'\n    var primes_count = 100\n        ^\n/tmp/tmpwd1ij_rq.swift:15:9:\
    \ note: 'primes_count' previously declared here\n    var primes_count = 100\n\
    \        ^\n/tmp/tmpwd1ij_rq.swift:77:9: error: invalid redeclaration of 'primes_count'\n\
    \    var primes_count = 100\n        ^\n/tmp/tmpwd1ij_rq.swift:15:9: note: 'primes_count'\
    \ previously declared here\n    var pri"
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    \n    var result = false\n\
    \    \n    if a < 100 {\n        \n        let primes = primes(a: a)\n       \
    \ \n        for prime in primes {\n            \n            if a % prime == 0\
    \ {\n                \n                result = true\n                \n     \
    \           break\n            }\n        }\n    }\n    \n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpe9vdhxcs.swift:15:22: error: use of local variable 'primes' before\
    \ its declaration\n        let primes = primes(a: a)\n                     ^\n\
    /tmp/tmpe9vdhxcs.swift:15:13: note: 'primes' declared here\n        let primes\
    \ = primes(a: a)\n            ^\n"
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 100 {\n      \
    \  return false\n    }\n    \n    var primes = [Int]()\n    var primes_count =\
    \ 100\n    var primes_sum = 0\n    \n    for _ in 0..<primes_count {\n       \
    \ primes.append(0)\n    }\n    \n    for _ in 0..<primes_count {\n        primes[Int(arc4random_uniform(primes_count))]\
    \ += 1\n    }\n    \n    for _ in 0..<primes_count {\n        primes_sum += primes[Int(arc4random_uniform(primes_count))]\n\
    \    }\n    \n    for _ in 0..<primes_count {\n        if primes[Int(arc4random_uniform(primes_count))]\
    \ == 0 {\n            primes[Int(arc4random_uniform(primes_count))] += 1\n   \
    \     }\n    }\n    \n    for _ in 0..<primes_count {\n        if primes[Int(arc4random_uniform(primes_count))]\
    \ == primes_sum {\n            return true\n        }\n    }\n    \n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a: 5)\
    \ == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmps_axl56v.swift:23:20: error: cannot find 'arc4random_uniform' in\
    \ scope\n        primes[Int(arc4random_uniform(primes_count))] += 1\n        \
    \           ^~~~~~~~~~~~~~~~~~\n/tmp/tmps_axl56v.swift:27:34: error: cannot find\
    \ 'arc4random_uniform' in scope\n        primes_sum += primes[Int(arc4random_uniform(primes_count))]\n\
    \                                 ^~~~~~~~~~~~~~~~~~\n/tmp/tmps_axl56v.swift:31:23:\
    \ error: cannot find 'arc4random_uniform' in scope\n        if primes[Int(arc4random_uniform(primes_count))]\
    \ == 0 {\n                      ^~~~~~~~~~~~~~~~~~\n/tmp/tmps_axl56v.swift:32:24:\
    \ error: cannot find 'arc4random_uniform' in scope\n            primes[Int(arc4random_uniform(primes_count))]\
    \ += 1\n                       ^~~~~~~~~~~~~~~~~~\n/tmp/tmps_axl56v.swift:37:23:\
    \ error: cannot find 'arc4random_uniform' in scope\n        if primes[Int(arc4random_uniform(primes_count))]\
    \ == primes_sum {\n                      ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824577
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 100 {\n      \
    \  return false\n    }\n    var primes = [Int]()\n    var prime: Int = 0\n   \
    \ var isPrime = true\n    for _ in 0..<100 {\n        prime = a / primes[primes.count-1]\n\
    \        primes.append(prime)\n        if a % prime == 0 {\n            isPrime\
    \ = false\n            break\n        }\n    }\n    return isPrime\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmppjrvy9g9/tmppjrvy9g9.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab222957c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab22264eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab22264e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab22264d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppjrvy9g9                        0x00005622dffe6557 <unavailable> + 5463

    5    libc.so.6                          0x00002ab222b43460 __libc_start_main +
    245

    6    tmppjrvy9g9                        0x00005622dffe6199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659824577
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    \n    if a < 100 {\n        var primes = [Int]()\n        \n        for i\
    \ in 1...a {\n            if a % i == 0 {\n                primes.append(i)\n\
    \            }\n        }\n        \n        if primes.count >= 3 {\n        \
    \    result = true\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpjg91viyb/tmpjg91viyb.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53842a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5383f97b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5383f97988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5383f967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjg91viyb                        0x000055e2ab0105f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b538448c460 __libc_start_main +
    245

    6    tmpjg91viyb                        0x000055e2ab010149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 100 {\n      \
    \  return false\n    }\n    var primes = [Int]()\n    var primes_count = Int(0)\n\
    \    var is_multiply_prime = false\n    var prime_found = false\n    var prime_found2\
    \ = false\n    var prime_found3 = false\n    var prime_found4 = false\n    var\
    \ prime_found5 = false\n    var prime_found6 = false\n    var prime_found7 = false\n\
    \    var prime_found8 = false\n    var prime_found9 = false\n    var prime_found10\
    \ = false\n    var prime_found11 = false\n    var prime_found12 = false\n    var\
    \ prime_found13 = false\n    var prime_found14 = false\n    var prime_found15\
    \ = false\n    var prime_found16 = false\n    var prime_found17 = false\n    var\
    \ prime_found18 = false\n    var prime_found19 = false\n    var prime_found20\
    \ = false\n    var prime_found21 = false\n    var prime_found22 = false\n    var\
    \ prime_found23 = false\n    var prime_found24 = false\n    var prime_found25\
    \ = false\n    var prime_found26 = false\n    var prime_found27 = false\n    var\
    \ prime_found28 = false\n    var prime_found29 = false\n    var prime_found30\
    \ = false\n    var prime_found31 = false\n    var prime_found32 = false\n    var\
    \ prime_found33 = false\n    var prime_found34 = false\n    var prime_found35\
    \ = false\n    var prime_found36 = false\n    var prime_found37 = false\n    var\
    \ prime_found38 = false\n    var prime_found39 = false\n    var prime_found40\
    \ = false\n    var prime_found41 = false\n    var prime_found42 = false\n    var\
    \ prime_found43 = false\n    var prime_found44 = false\n    var prime_found45\
    \ = false\n    var prime_found46 = false\n    var prime_found47 = false\n    var\
    \ prime_found48 = false\n    var prime_found49 = false\n    var prime_found50\
    \ = false\n    var prime_found51 = false\n    var prime_found52 = false\n    var\
    \ prime_found53 = false\n    var prime_found54 = false\n    var prime_found55\
    \ = false\n    var prime_found56 = false\n    var prime_found57 = false\n    var\
    \ prime_found58 = false\n    var prime_found59 = false\n    var prime_found60\
    \ = false\n    var prime_found61 = false\n    var prime_found62 = false\n    var\
    \ prime_found63 = false\n    var prime_found64 = false\n    var prime_found65\
    \ = false\n    var prime_found66 = false\n    var prime_found67 = false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpb0uwr2f0.swift:13:9: warning: initialization of variable 'primes'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes = [Int]()\n    ~~~~^~~~~~\n    _\n/tmp/tmpb0uwr2f0.swift:14:9:\
    \ warning: initialization of variable 'primes_count' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var primes_count = Int(0)\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpb0uwr2f0.swift:15:9: warning: initialization\
    \ of variable 'is_multiply_prime' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var is_multiply_prime = false\n    ~~~~^~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpb0uwr2f0.swift:16:9: warning: initialization of variable 'prime_found'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var prime_found = false\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpb0uwr2f0.swift:17:9:\
    \ warning: initialization of variable 'prime_found2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var prime_found2 = false\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpb0uwr2f0.swift:18:9: warning: initialization\
    \ of variable 'prime_found3' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var prime_found3 = false\n    ~~~~^~~~~~~~~~~~\n\
    \    _\n/tmp/tmpb0uwr2f0.swift:19:9: warning: initialization of variable 'prime_found4'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var prime_found4 = false\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpb0uwr2f0.swift:20:9:\
    \ warning: initialization of variable 'prime_found5' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var prime_found5 = false\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpb0uwr2f0.swift:21:9: warning: initialization\
    \ of variable 'prime_found6' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var prime_found6 = false\n    ~~~~^~~~~~~~~~~~\n\
    \    _\n/tmp/tmpb0uwr2f0.swift:22:9: warning: initialization of variable 'prime_found7'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var prime_fou"
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = true\n \
    \   for _ in 0..<100 {\n        if a % 3 == 0 || a % 5 == 0 {\n            result\
    \ = false\n            break\n        }\n        a += 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpof1025kj.swift:16:11: error: left side of mutating operator isn't\
    \ mutable: 'a' is a 'let' constant\n        a += 1\n        ~ ^\n"
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    var primes = [Int]()\n    var prime = 2 // first prime number\n    var limit\
    \ = Int(sqrt(Double(a))) // limit of prime numbers\n    for _ in 0..limit {\n\
    \        if a % prime == 0 {\n            primes.append(prime)\n        }\n  \
    \      prime += 1\n    }\n    for prime in primes {\n        if a % prime == 0\
    \ {\n            result = true\n            break\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpfbk1b7ct.swift:13:21: error: cannot find 'sqrt' in scope\n    var\
    \ limit = Int(sqrt(Double(a))) // limit of prime numbers\n                   \
    \ ^~~~\n/tmp/tmpfbk1b7ct.swift:14:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for _ in 0..limit {\n              ^~\n           \
    \   ...\n"
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var primes = [Int]()\n\
    \    var prime_numbers = [Int]()\n    var is_multiply_prime = false\n    var is_multiply_prime_2\
    \ = false\n    var is_multiply_prime_3 = false\n    var is_multiply_prime_4 =\
    \ false\n    var is_multiply_prime_5 = false\n    var is_multiply_prime_6 = false\n\
    \    var is_multiply_prime_7 = false\n    var is_multiply_prime_8 = false\n  \
    \  var is_multiply_prime_9 = false\n    var is_multiply_prime_10 = false\n   \
    \ var is_multiply_prime_11 = false\n    var is_multiply_prime_12 = false\n   \
    \ var is_multiply_prime_13 = false\n    var is_multiply_prime_14 = false\n   \
    \ var is_multiply_prime_15 = false\n    var is_multiply_prime_16 = false\n   \
    \ var is_multiply_prime_17 = false\n    var is_multiply_prime_18 = false\n   \
    \ var is_multiply_prime_19 = false\n    var is_multiply_prime_20 = false\n   \
    \ var is_multiply_prime_21 = false\n    var is_multiply_prime_22 = false\n   \
    \ var is_multiply_prime_23 = false\n    var is_multiply_prime_24 = false\n   \
    \ var is_multiply_prime_25 = false\n    var is_multiply_prime_26 = false\n   \
    \ var is_multiply_prime_27 = false\n    var is_multiply_prime_28 = false\n   \
    \ var is_multiply_prime_29 = false\n    var is_multiply_prime_30 = false\n   \
    \ var is_multiply_prime_31 = false\n    var is_multiply_prime_32 = false\n   \
    \ var is_multiply_prime_33 = false\n    var is_multiply_prime_34 = false\n   \
    \ var is_multiply_prime_35 = false\n    var is_multiply_prime_36 = false\n   \
    \ var is_multiply_prime_37 = false\n    var is_multiply_prime_38 = false\n   \
    \ var is_multiply_prime_39 = false\n    var is_multiply_prime_40 = false\n   \
    \ var is_multiply_prime_41 = false\n    var is_multiply_prime_42 = false\n   \
    \ var is_multiply_prime_43 = false\n    var is_multiply_prime_44 = false\n   \
    \ var is_multiply_prime_45 = false\n    var is_multiply_prime_46 = false\n   \
    \ var is_multiply_prime_47 = false\n    var is_multiply_prime_48 = false\n   \
    \ var is_multiply_prime_49 = false\n    var is_multiply_prime_50 = false\n   \
    \ var is_multiply_prime_51 = false\n    var is_multiply_prime_52 = false\n   \
    \ var is_multiply_prime_53 = false\n    var is_multiply_prime_54 = false\n   \
    \ var is_multiply_prime_55 = false\n    var is_multi\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpyrviiiif.swift:67:9: error: type annotation missing in pattern\n\
    \    var is_multi\n        ^\n"
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 100 {\n      \
    \  return false\n    }\n    var primes = [Int]()\n    var primes_count = Int(0)\n\
    \    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var\
    \ primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max\
    \ = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n\
    \    var primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n    var\
    \ primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min\
    \ = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n\
    \    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var\
    \ primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max\
    \ = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n\
    \    var primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n    var\
    \ primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min\
    \ = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n\
    \    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var\
    \ primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max\
    \ = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n\
    \    var primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n    var\
    \ primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min\
    \ = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n\
    \    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var\
    \ primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max\
    \ = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n\
    \    var primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n    var\
    \ primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min\
    \ = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n\
    \    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var\
    \ primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max\
    \ = Int(0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7785icct.swift:17:9: error: invalid redeclaration of 'primes_count_max'\n\
    \    var primes_count_max = Int(0)\n        ^\n/tmp/tmp7785icct.swift:15:9: note:\
    \ 'primes_count_max' previously declared here\n    var primes_count_max = Int(0)\n\
    \        ^\n/tmp/tmp7785icct.swift:18:9: error: invalid redeclaration of 'primes_count_min'\n\
    \    var primes_count_min = Int(0)\n        ^\n/tmp/tmp7785icct.swift:16:9: note:\
    \ 'primes_count_min' previously declared here\n    var primes_count_min = Int(0)\n\
    \        ^\n/tmp/tmp7785icct.swift:19:9: error: invalid redeclaration of 'primes_count_max'\n\
    \    var primes_count_max = Int(0)\n        ^\n/tmp/tmp7785icct.swift:15:9: note:\
    \ 'primes_count_max' previously declared here\n    var primes_count_max = Int(0)\n\
    \        ^\n/tmp/tmp7785icct.swift:20:9: error: invalid redeclaration of 'primes_count_min'\n\
    \    var primes_count_min = Int(0)\n        ^\n/tmp/tmp7785icct.swift:16:9: note:\
    \ 'primes_count_min' previously declared here\n    var primes_count_min = Int(0)\n\
    \        ^\n/tmp/tmp7785icct.swift:21:9: error: invalid redeclaration of 'primes_count_max'\n\
    \    var primes_count_max = Int(0)\n        ^\n/tmp/tmp7785icct.swift:15:9: note:\
    \ 'primes_count_max' previously declared here\n    var primes_count_max = Int(0)\n\
    \        ^\n/tmp/tmp7785icct.swift:22:9: error: invalid redeclaration of 'primes_count_min'\n\
    \    var primes_count_min = Int(0)\n        ^\n/tmp/tmp7785icct.swift:16:9: note:\
    \ 'primes_count_min' previously declared here\n    var primes_count_min = Int(0)\n\
    \        ^\n/tmp/tmp7785icct.swift:23:9: error: invalid redeclaration of 'primes_count_max'\n\
    \    var primes_count_max = Int(0)\n        ^\n/tmp/tmp7785icct.swift:15:9: note:\
    \ 'primes_count_max' previously declared here\n    var primes_count_max = Int(0)\n\
    \        ^\n/tmp/tmp7785icct.swift:24:9: error: invalid redeclaration of 'primes_count_min'\n\
    \    var primes_count_min = Int(0)\n        ^\n/tmp/tmp7785icct.swift:16:9: note:\
    \ 'primes_count_min' previously declared here\n    var primes_count_min = Int(0)\n\
    \        ^\n/tmp/tmp7785icct.swift:25:9: error: invalid redeclaration of 'primes_cou"
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    var primes = [Int]()\n    var primes_count = 100\n    var primes_count_max\
    \ = 100\n    var primes_count_min = 3\n    var primes_count_max = 100\n    var\
    \ primes_count_min = 3\n    var primes_count_max = 100\n    var primes_count_min\
    \ = 3\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_max\
    \ = 100\n    var primes_count_min = 3\n    var primes_count_max = 100\n    var\
    \ primes_count_min = 3\n    var primes_count_max = 100\n    var primes_count_min\
    \ = 3\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_max\
    \ = 100\n    var primes_count_min = 3\n    var primes_count_max = 100\n    var\
    \ primes_count_min = 3\n    var primes_count_max = 100\n    var primes_count_min\
    \ = 3\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_max\
    \ = 100\n    var primes_count_min = 3\n    var primes_count_max = 100\n    var\
    \ primes_count_min = 3\n    var primes_count_max = 100\n    var primes_count_min\
    \ = 3\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_max\
    \ = 100\n    var primes_count_min = 3\n    var primes_count_max = 100\n    var\
    \ primes_count_min = 3\n    var primes_count_max = 100\n    var primes_count_min\
    \ = 3\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_max\
    \ = 100\n    var primes_count_min = 3\n    var primes_count_max = 100\n    var\
    \ primes_count_min = 3\n    var primes_count_max = 100\n    var primes_count_min\
    \ = 3\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_max\
    \ = 100\n    var primes_count_min = 3\n    var primes_count_max = 100\n    var\
    \ primes_count_min = 3\n    var primes_count_max = 100\n    var primes_count_min\
    \ = 3\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_max\
    \ = 100\n    var primes_count_min = 3\n    var primes_count_max = 100\n    var\
    \ primes_count_min = 3\n    var primes_count_max = 100\n    var primes_count_min\
    \ = 3\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_max\
    \ = 100\n    var primes_count_min = 3\n    var primes_count_max = 100\n    var\
    \ primes_count_min = 3\n    var primes_count_max = 100\n    var primes_count_min\
    \ = 3\n    var primes_count_max = \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpl4jlp2cs.swift:83:27: error: expected initial value after '='\n\
    \    var primes_count_max = \n                          ^\n/tmp/tmpl4jlp2cs.swift:15:9:\
    \ error: invalid redeclaration of 'primes_count_max'\n    var primes_count_max\
    \ = 100\n        ^\n/tmp/tmpl4jlp2cs.swift:13:9: note: 'primes_count_max' previously\
    \ declared here\n    var primes_count_max = 100\n        ^\n/tmp/tmpl4jlp2cs.swift:16:9:\
    \ error: invalid redeclaration of 'primes_count_min'\n    var primes_count_min\
    \ = 3\n        ^\n/tmp/tmpl4jlp2cs.swift:14:9: note: 'primes_count_min' previously\
    \ declared here\n    var primes_count_min = 3\n        ^\n/tmp/tmpl4jlp2cs.swift:17:9:\
    \ error: invalid redeclaration of 'primes_count_max'\n    var primes_count_max\
    \ = 100\n        ^\n/tmp/tmpl4jlp2cs.swift:13:9: note: 'primes_count_max' previously\
    \ declared here\n    var primes_count_max = 100\n        ^\n/tmp/tmpl4jlp2cs.swift:18:9:\
    \ error: invalid redeclaration of 'primes_count_min'\n    var primes_count_min\
    \ = 3\n        ^\n/tmp/tmpl4jlp2cs.swift:14:9: note: 'primes_count_min' previously\
    \ declared here\n    var primes_count_min = 3\n        ^\n/tmp/tmpl4jlp2cs.swift:19:9:\
    \ error: invalid redeclaration of 'primes_count_max'\n    var primes_count_max\
    \ = 100\n        ^\n/tmp/tmpl4jlp2cs.swift:13:9: note: 'primes_count_max' previously\
    \ declared here\n    var primes_count_max = 100\n        ^\n/tmp/tmpl4jlp2cs.swift:20:9:\
    \ error: invalid redeclaration of 'primes_count_min'\n    var primes_count_min\
    \ = 3\n        ^\n/tmp/tmpl4jlp2cs.swift:14:9: note: 'primes_count_min' previously\
    \ declared here\n    var primes_count_min = 3\n        ^\n/tmp/tmpl4jlp2cs.swift:21:9:\
    \ error: invalid redeclaration of 'primes_count_max'\n    var primes_count_max\
    \ = 100\n        ^\n/tmp/tmpl4jlp2cs.swift:13:9: note: 'primes_count_max' previously\
    \ declared here\n    var primes_count_max = 100\n        ^\n/tmp/tmpl4jlp2cs.swift:22:9:\
    \ error: invalid redeclaration of 'primes_count_min'\n    var primes_count_min\
    \ = 3\n        ^\n/tmp/tmpl4jlp2cs.swift:14:9: note: 'primes_count_min' previously\
    \ declared here\n    var primes_count_min = 3\n        ^\n/tmp/tmpl4"
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var primes = [Int]()\n\
    \    var isPrime = [Bool]()\n    var isMultiply = [Bool]()\n    var isMultiplyPrime\
    \ = [Bool]()\n    var isMultiplyPrimePrime = [Bool]()\n    var isMultiplyPrimePrimePrime\
    \ = [Bool]()\n    var isMultiplyPrimePrimePrimePrime = [Bool]()\n    var isMultiplyPrimePrimePrimePrimePrime\
    \ = [Bool]()\n    var isMultiplyPrimePrimePrimePrimePrimePrime = [Bool]()\n  \
    \  var isMultiplyPrimePrimePrimePrimePrimePrimePrime = [Bool]()\n    var isMultiplyPrimePrimePrimePrimePrimePrimePrimePrime\
    \ = [Bool]()\n    var isMultiplyPrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = [Bool]()\n    var isMultiplyPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = [Bool]()\n    var isMultiplyPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = [Bool]()\n    var isMultiplyPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = [Bool]()\n    var isMultiplyPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = [Bool]()\n    var isMultiplyPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = [Bool]()\n    var isMultiplyPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = [Bool]()\n    var isMultiplyPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = [Bool]()\n    var isMultiplyPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = [Bool]()\n    var isMultiplyPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp6xl5qdnv.swift:24:9: error: invalid redeclaration of 'isMultiplyPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime'\n\
    \    var isMultiplyPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = [Bool]()\n\
    \        ^\n/tmp/tmp6xl5qdnv.swift:23:9: note: 'isMultiplyPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime'\
    \ previously declared here\n    var isMultiplyPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = [Bool]()\n        ^\n/tmp/tmp6xl5qdnv.swift:30:9: error: type annotation missing\
    \ in pattern\n    var isMultiplyPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 100 {\n      \
    \  return false\n    }\n    var primes = [Int]()\n    var primes_count = 100\n\
    \    var primes_sum = 0\n    var primes_sum2 = 0\n    var primes_sum3 = 0\n  \
    \  var primes_sum4 = 0\n    var primes_sum5 = 0\n    var primes_sum6 = 0\n   \
    \ var primes_sum7 = 0\n    var primes_sum8 = 0\n    var primes_sum9 = 0\n    var\
    \ primes_sum10 = 0\n    var primes_sum11 = 0\n    var primes_sum12 = 0\n    var\
    \ primes_sum13 = 0\n    var primes_sum14 = 0\n    var primes_sum15 = 0\n    var\
    \ primes_sum16 = 0\n    var primes_sum17 = 0\n    var primes_sum18 = 0\n    var\
    \ primes_sum19 = 0\n    var primes_sum20 = 0\n    var primes_sum21 = 0\n    var\
    \ primes_sum22 = 0\n    var primes_sum23 = 0\n    var primes_sum24 = 0\n    var\
    \ primes_sum25 = 0\n    var primes_sum26 = 0\n    var primes_sum27 = 0\n    var\
    \ primes_sum28 = 0\n    var primes_sum29 = 0\n    var primes_sum30 = 0\n    var\
    \ primes_sum31 = 0\n    var primes_sum32 = 0\n    var primes_sum33 = 0\n    var\
    \ primes_sum34 = 0\n    var primes_sum35 = 0\n    var primes_sum36 = 0\n    var\
    \ primes_sum37 = 0\n    var primes_sum38 = 0\n    var primes_sum39 = 0\n    var\
    \ primes_sum40 = 0\n    var primes_sum41 = 0\n    var primes_sum42 = 0\n    var\
    \ primes_sum43 = 0\n    var primes_sum44 = 0\n    var primes_sum45 = 0\n    var\
    \ primes_sum46 = 0\n    var primes_sum47 = 0\n    var primes_sum48 = 0\n    var\
    \ primes_sum49 = 0\n    var primes_sum50 = 0\n    var primes_sum51 = 0\n    var\
    \ primes_sum52 = 0\n    var primes_sum53 = 0\n    var primes_sum54 = 0\n    var\
    \ primes_sum55 = 0\n    var primes_sum56 = 0\n    var primes_sum57 = 0\n    var\
    \ primes_sum58 = 0\n    var primes_sum59 = 0\n    var primes_sum60 = 0\n    var\
    \ primes_sum61 = 0\n    var primes_sum62 = 0\n    var primes_sum63 = 0\n    var\
    \ primes_sum64 = 0\n    var primes_sum65 = 0\n    var primes_sum66 = 0\n    var\
    \ primes_sum67 = 0\n    var primes_sum68 = 0\n    var primes_sum69 = 0\n    var\
    \ primes_sum70 = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmphawwsyhz.swift:13:9: warning: initialization of variable 'primes'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes = [Int]()\n    ~~~~^~~~~~\n    _\n/tmp/tmphawwsyhz.swift:14:9:\
    \ warning: initialization of variable 'primes_count' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var primes_count = 100\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:15:9: warning: initialization\
    \ of variable 'primes_sum' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var primes_sum = 0\n    ~~~~^~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:16:9:\
    \ warning: initialization of variable 'primes_sum2' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum2 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmphawwsyhz.swift:17:9: warning: initialization of variable 'primes_sum3'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum3 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:18:9:\
    \ warning: initialization of variable 'primes_sum4' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum4 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmphawwsyhz.swift:19:9: warning: initialization of variable 'primes_sum5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum5 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:20:9:\
    \ warning: initialization of variable 'primes_sum6' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum6 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmphawwsyhz.swift:21:9: warning: initialization of variable 'primes_sum7'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum7 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:22:9:\
    \ warning: initialization of variable 'primes_sum8' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum8 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmphawwsyhz.swift:23:9: warnin"
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var isMultiplyPrime =\
    \ false\n    var isMultiplyPrime2 = false\n    var isMultiplyPrime3 = false\n\
    \    var isMultiplyPrime4 = false\n    var isMultiplyPrime5 = false\n    var isMultiplyPrime6\
    \ = false\n    var isMultiplyPrime7 = false\n    var isMultiplyPrime8 = false\n\
    \    var isMultiplyPrime9 = false\n    var isMultiplyPrime10 = false\n    var\
    \ isMultiplyPrime11 = false\n    var isMultiplyPrime12 = false\n    var isMultiplyPrime13\
    \ = false\n    var isMultiplyPrime14 = false\n    var isMultiplyPrime15 = false\n\
    \    var isMultiplyPrime16 = false\n    var isMultiplyPrime17 = false\n    var\
    \ isMultiplyPrime18 = false\n    var isMultiplyPrime19 = false\n    var isMultiplyPrime20\
    \ = false\n    var isMultiplyPrime21 = false\n    var isMultiplyPrime22 = false\n\
    \    var isMultiplyPrime23 = false\n    var isMultiplyPrime24 = false\n    var\
    \ isMultiplyPrime25 = false\n    var isMultiplyPrime26 = false\n    var isMultiplyPrime27\
    \ = false\n    var isMultiplyPrime28 = false\n    var isMultiplyPrime29 = false\n\
    \    var isMultiplyPrime30 = false\n    var isMultiplyPrime31 = false\n    var\
    \ isMultiplyPrime32 = false\n    var isMultiplyPrime33 = false\n    var isMultiplyPrime34\
    \ = false\n    var isMultiplyPrime35 = false\n    var isMultiplyPrime36 = false\n\
    \    var isMultiplyPrime37 = false\n    var isMultiplyPrime38 = false\n    var\
    \ isMultiplyPrime39 = false\n    var isMultiplyPrime40 = false\n    var isMultiplyPrime41\
    \ = false\n    var isMultiplyPrime42 = false\n    var isMultiplyPrime43 = false\n\
    \    var isMultiplyPrime44 = false\n    var isMultiplyPrime45 = false\n    var\
    \ isMultiplyPrime46 = false\n    var isMultiplyPrime47 = false\n    var isMultiplyPrime48\
    \ = false\n    var isMultiplyPrime49 = false\n    var isMultiplyPrime50 = false\n\
    \    var isMultiplyPrime51 = false\n    var isMultiplyPrime52 = false\n    var\
    \ isMultiplyPrime53 = false\n    var isMultiplyPrime54 = false\n    var isMultiplyPrime55\
    \ = false\n    var isMultiplyPrime56 = false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpdgv3yl0t.swift:10:9: warning: initialization of variable 'isMultiplyPrime'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime = false\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpdgv3yl0t.swift:11:9:\
    \ warning: initialization of variable 'isMultiplyPrime2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime2 =\
    \ false\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpdgv3yl0t.swift:12:9: warning:\
    \ initialization of variable 'isMultiplyPrime3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime3 = false\n  \
    \  ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpdgv3yl0t.swift:13:9: warning: initialization\
    \ of variable 'isMultiplyPrime4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime4 = false\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpdgv3yl0t.swift:14:9: warning: initialization of variable 'isMultiplyPrime5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime5 = false\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpdgv3yl0t.swift:15:9:\
    \ warning: initialization of variable 'isMultiplyPrime6' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime6 =\
    \ false\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpdgv3yl0t.swift:16:9: warning:\
    \ initialization of variable 'isMultiplyPrime7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime7 = false\n  \
    \  ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpdgv3yl0t.swift:17:9: warning: initialization\
    \ of variable 'isMultiplyPrime8' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime8 = false\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpdgv3yl0t.swift:18:9: warning: initialization of variable 'isMultiplyPrime9'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime9 = false\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpdgv3yl0t.swift:19:9:\
    \ warning: initialization of variab"
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = true\n \
    \   var primes = [Int]()\n    var primes_count = 100\n    var primes_sum = 0\n\
    \    var primes_sum2 = 0\n    var primes_sum3 = 0\n    var primes_sum4 = 0\n \
    \   var primes_sum5 = 0\n    var primes_sum6 = 0\n    var primes_sum7 = 0\n  \
    \  var primes_sum8 = 0\n    var primes_sum9 = 0\n    var primes_sum10 = 0\n  \
    \  var primes_sum11 = 0\n    var primes_sum12 = 0\n    var primes_sum13 = 0\n\
    \    var primes_sum14 = 0\n    var primes_sum15 = 0\n    var primes_sum16 = 0\n\
    \    var primes_sum17 = 0\n    var primes_sum18 = 0\n    var primes_sum19 = 0\n\
    \    var primes_sum20 = 0\n    var primes_sum21 = 0\n    var primes_sum22 = 0\n\
    \    var primes_sum23 = 0\n    var primes_sum24 = 0\n    var primes_sum25 = 0\n\
    \    var primes_sum26 = 0\n    var primes_sum27 = 0\n    var primes_sum28 = 0\n\
    \    var primes_sum29 = 0\n    var primes_sum30 = 0\n    var primes_sum31 = 0\n\
    \    var primes_sum32 = 0\n    var primes_sum33 = 0\n    var primes_sum34 = 0\n\
    \    var primes_sum35 = 0\n    var primes_sum36 = 0\n    var primes_sum37 = 0\n\
    \    var primes_sum38 = 0\n    var primes_sum39 = 0\n    var primes_sum40 = 0\n\
    \    var primes_sum41 = 0\n    var primes_sum42 = 0\n    var primes_sum43 = 0\n\
    \    var primes_sum44 = 0\n    var primes_sum45 = 0\n    var primes_sum46 = 0\n\
    \    var primes_sum47 = 0\n    var primes_sum48 = 0\n    var primes_sum49 = 0\n\
    \    var primes_sum50 = 0\n    var primes_sum51 = 0\n    var primes_sum52 = 0\n\
    \    var primes_sum53 = 0\n    var primes_sum54 = 0\n    var primes_sum55 = 0\n\
    \    var primes_sum56 = 0\n    var primes_sum57 = 0\n    var primes_sum58 = 0\n\
    \    var primes_sum59 = 0\n    var primes_sum60 = 0\n    var primes_sum61 = 0\n\
    \    var primes_sum62 = 0\n    var primes_sum63 = 0\n    var primes_sum64 = 0\n\
    \    var primes_sum65 = 0\n    var primes_sum66 = 0\n    var primes_sum67 = 0\n\
    \    var primes_sum68 = 0\n    var primes_sum69 = 0\n    var primes_sum70 = 0\n\
    \    var primes_sum71 = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp2ne11d5h.swift:10:9: warning: initialization of variable 'result'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var result = true\n    ~~~~^~~~~~\n    _\n/tmp/tmp2ne11d5h.swift:11:9: warning:\
    \ initialization of variable 'primes' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var primes = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n/tmp/tmp2ne11d5h.swift:12:9: warning: initialization of variable 'primes_count'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_count = 100\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmp2ne11d5h.swift:13:9:\
    \ warning: initialization of variable 'primes_sum' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum = 0\n    ~~~~^~~~~~~~~~\n\
    \    _\n/tmp/tmp2ne11d5h.swift:14:9: warning: initialization of variable 'primes_sum2'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum2 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmp2ne11d5h.swift:15:9:\
    \ warning: initialization of variable 'primes_sum3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum3 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmp2ne11d5h.swift:16:9: warning: initialization of variable 'primes_sum4'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum4 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmp2ne11d5h.swift:17:9:\
    \ warning: initialization of variable 'primes_sum5' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum5 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmp2ne11d5h.swift:18:9: warning: initialization of variable 'primes_sum6'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum6 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmp2ne11d5h.swift:19:9:\
    \ warning: initialization of variable 'primes_sum7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum7 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmp2ne11d5h.swift:20:9: warning: initializ"
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result: Bool = false\n\
    \    \n    if a < 100 {\n        var primes = [Int]()\n        \n        for var\
    \ i = 2; i < a; i++ {\n            if a % i == 0 {\n                primes.append(i)\n\
    \            }\n        }\n        \n        for var i = 0; i < primes.count;\
    \ i++ {\n            if primes[i] == 3 {\n                result = true\n    \
    \            break\n            }\n        }\n    }\n    \n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpj4ye1w41.swift:15:9: error: C-style for statement has been removed\
    \ in Swift 3\n        for var i = 2; i < a; i++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpj4ye1w41.swift:21:9: error: C-style for statement has been removed in\
    \ Swift 3\n        for var i = 0; i < primes.count; i++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 100 {\n      \
    \  return false\n    }\n    var primes = [Int]()\n    var primes_count = 100\n\
    \    var primes_sum = 0\n    var primes_sum2 = 0\n    var primes_sum3 = 0\n  \
    \  var primes_sum4 = 0\n    var primes_sum5 = 0\n    var primes_sum6 = 0\n   \
    \ var primes_sum7 = 0\n    var primes_sum8 = 0\n    var primes_sum9 = 0\n    var\
    \ primes_sum10 = 0\n    var primes_sum11 = 0\n    var primes_sum12 = 0\n    var\
    \ primes_sum13 = 0\n    var primes_sum14 = 0\n    var primes_sum15 = 0\n    var\
    \ primes_sum16 = 0\n    var primes_sum17 = 0\n    var primes_sum18 = 0\n    var\
    \ primes_sum19 = 0\n    var primes_sum20 = 0\n    var primes_sum21 = 0\n    var\
    \ primes_sum22 = 0\n    var primes_sum23 = 0\n    var primes_sum24 = 0\n    var\
    \ primes_sum25 = 0\n    var primes_sum26 = 0\n    var primes_sum27 = 0\n    var\
    \ primes_sum28 = 0\n    var primes_sum29 = 0\n    var primes_sum30 = 0\n    var\
    \ primes_sum31 = 0\n    var primes_sum32 = 0\n    var primes_sum33 = 0\n    var\
    \ primes_sum34 = 0\n    var primes_sum35 = 0\n    var primes_sum36 = 0\n    var\
    \ primes_sum37 = 0\n    var primes_sum38 = 0\n    var primes_sum39 = 0\n    var\
    \ primes_sum40 = 0\n    var primes_sum41 = 0\n    var primes_sum42 = 0\n    var\
    \ primes_sum43 = 0\n    var primes_sum44 = 0\n    var primes_sum45 = 0\n    var\
    \ primes_sum46 = 0\n    var primes_sum47 = 0\n    var primes_sum48 = 0\n    var\
    \ primes_sum49 = 0\n    var primes_sum50 = 0\n    var primes_sum51 = 0\n    var\
    \ primes_sum52 = 0\n    var primes_sum53 = 0\n    var primes_sum54 = 0\n    var\
    \ primes_sum55 = 0\n    var primes_sum56 = 0\n    var primes_sum57 = 0\n    var\
    \ primes_sum58 = 0\n    var primes_sum59 = 0\n    var primes_sum60 = 0\n    var\
    \ primes_sum61 = 0\n    var primes_sum62 = 0\n    var primes_sum63 = 0\n    var\
    \ primes_sum64 = 0\n    var primes_sum65 = 0\n    var primes_sum66 = 0\n    var\
    \ primes_sum67 = 0\n    var primes_sum68 = 0\n    var primes_sum69 = 0\n    var\
    \ primes_sum70 = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmphawwsyhz.swift:13:9: warning: initialization of variable 'primes'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes = [Int]()\n    ~~~~^~~~~~\n    _\n/tmp/tmphawwsyhz.swift:14:9:\
    \ warning: initialization of variable 'primes_count' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var primes_count = 100\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:15:9: warning: initialization\
    \ of variable 'primes_sum' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var primes_sum = 0\n    ~~~~^~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:16:9:\
    \ warning: initialization of variable 'primes_sum2' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum2 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmphawwsyhz.swift:17:9: warning: initialization of variable 'primes_sum3'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum3 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:18:9:\
    \ warning: initialization of variable 'primes_sum4' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum4 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmphawwsyhz.swift:19:9: warning: initialization of variable 'primes_sum5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum5 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:20:9:\
    \ warning: initialization of variable 'primes_sum6' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum6 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmphawwsyhz.swift:21:9: warning: initialization of variable 'primes_sum7'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum7 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:22:9:\
    \ warning: initialization of variable 'primes_sum8' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum8 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmphawwsyhz.swift:23:9: warnin"
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var primes = [Int]()\n\
    \    var primes_count = Int()\n    var is_multiply_prime = false\n    var is_multiply_prime_2\
    \ = false\n    var is_multiply_prime_3 = false\n    var is_multiply_prime_4 =\
    \ false\n    var is_multiply_prime_5 = false\n    var is_multiply_prime_6 = false\n\
    \    var is_multiply_prime_7 = false\n    var is_multiply_prime_8 = false\n  \
    \  var is_multiply_prime_9 = false\n    var is_multiply_prime_10 = false\n   \
    \ var is_multiply_prime_11 = false\n    var is_multiply_prime_12 = false\n   \
    \ var is_multiply_prime_13 = false\n    var is_multiply_prime_14 = false\n   \
    \ var is_multiply_prime_15 = false\n    var is_multiply_prime_16 = false\n   \
    \ var is_multiply_prime_17 = false\n    var is_multiply_prime_18 = false\n   \
    \ var is_multiply_prime_19 = false\n    var is_multiply_prime_20 = false\n   \
    \ var is_multiply_prime_21 = false\n    var is_multiply_prime_22 = false\n   \
    \ var is_multiply_prime_23 = false\n    var is_multiply_prime_24 = false\n   \
    \ var is_multiply_prime_25 = false\n    var is_multiply_prime_26 = false\n   \
    \ var is_multiply_prime_27 = false\n    var is_multiply_prime_28 = false\n   \
    \ var is_multiply_prime_29 = false\n    var is_multiply_prime_30 = false\n   \
    \ var is_multiply_prime_31 = false\n    var is_multiply_prime_32 = false\n   \
    \ var is_multiply_prime_33 = false\n    var is_multiply_prime_34 = false\n   \
    \ var is_multiply_prime_35 = false\n    var is_multiply_prime_36 = false\n   \
    \ var is_multiply_prime_37 = false\n    var is_multiply_prime_38 = false\n   \
    \ var is_multiply_prime_39 = false\n    var is_multiply_prime_40 = false\n   \
    \ var is_multiply_prime_41 = false\n    var is_multiply_prime_42 = false\n   \
    \ var is_multiply_prime_43 = false\n    var is_multiply_prime_44 = false\n   \
    \ var is_multiply_prime_45 = false\n    var is_multiply_prime_46 = false\n   \
    \ var is_multiply_prime_47 = false\n    var is_multiply_prime_48 = false\n   \
    \ var is_multiply_prime_49 = false\n    var is_multiply_prime_50 = false\n   \
    \ var is_multiply_prime_51 = false\n    var is_multiply_prime_52 = false\n   \
    \ var is_multiply_prime_53 = false\n    var is_multiply_prime_54 = false\n   \
    \ var is_multiply_prime_55 = false\n    var is_multiply_prime\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpj_b10qlr.swift:67:9: error: type annotation missing in pattern\n\
    \    var is_multiply_prime\n        ^\n"
  stdout: ''
  timestamp: 1659824577
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = true\n \
    \   var primes = [Int]()\n    \n    for number in stride(from: 2, through: a,\
    \ by: 1) {\n        if number == 1 {\n            continue\n        }\n      \
    \  \n        for prime in stride(from: 2, through: number, by: 1) {\n        \
    \    if number % prime == 0 {\n                result = false\n              \
    \  break\n            }\n        }\n        \n        if result {\n          \
    \  break\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmp_anisrr6/tmp_anisrr6.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b930b831c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b930b528b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b930b528988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b930b5277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_anisrr6                        0x000055f91c179537 <unavailable> + 5431

    5    libc.so.6                          0x00002b930ba1d460 __libc_start_main +
    245

    6    tmp_anisrr6                        0x000055f91c179179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1659824578
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 100 {\n      \
    \  return false\n    }\n    var primes = [Int]()\n    var prime: Int\n    var\
    \ prime_found = false\n    var i: Int\n    var j: Int\n    for i = 2; i < a; i++\
    \ {\n        prime_found = false\n        for j = i; j < a; j++ {\n          \
    \  if i % j == 0 {\n                prime_found = true\n                break\n\
    \            }\n        }\n        if prime_found == false {\n            primes.append(i)\n\
    \        }\n    }\n    for prime in primes {\n        if a % prime == 0 {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp6n27_u_5.swift:18:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 2; i < a; i++ {\n    ^   ~~~~~~~~~~~~~~~~~\n/tmp/tmp6n27_u_5.swift:20:9:\
    \ error: C-style for statement has been removed in Swift 3\n        for j = i;\
    \ j < a; j++ {\n        ^   ~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    \n    if a < 100 {\n        for var i = 2; i < a; i++ {\n            if a\
    \ % i == 0 {\n                result = true\n                break\n         \
    \   }\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7n6g5sed.swift:13:9: error: C-style for statement has been removed\
    \ in Swift 3\n        for var i = 2; i < a; i++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824577
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    \n    let primes = [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97]\n    \n    for i in 0..<primes.count {\n        if a % primes[i]\
    \ == 0 {\n            return false\n        }\n    }\n    \n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpiqhnc05d/tmpiqhnc05d.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afa68ae9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afa687e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afa687e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afa687df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiqhnc05d                        0x000055f05abc4567 <unavailable> + 5479

    5    libc.so.6                          0x00002afa68cd5460 __libc_start_main +
    245

    6    tmpiqhnc05d                        0x000055f05abc41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 100 {\n      \
    \  return false\n    }\n    var primes = [Int]()\n    var prime: Int = 0\n   \
    \ var isPrime: Bool = false\n    var isMultiplication: Bool = false\n    var isMultiplyPrime:\
    \ Bool = false\n    var isMultiplyPrime2: Bool = false\n    var isMultiplyPrime3:\
    \ Bool = false\n    var isMultiplyPrime4: Bool = false\n    var isMultiplyPrime5:\
    \ Bool = false\n    var isMultiplyPrime6: Bool = false\n    var isMultiplyPrime7:\
    \ Bool = false\n    var isMultiplyPrime8: Bool = false\n    var isMultiplyPrime9:\
    \ Bool = false\n    var isMultiplyPrime10: Bool = false\n    var isMultiplyPrime11:\
    \ Bool = false\n    var isMultiplyPrime12: Bool = false\n    var isMultiplyPrime13:\
    \ Bool = false\n    var isMultiplyPrime14: Bool = false\n    var isMultiplyPrime15:\
    \ Bool = false\n    var isMultiplyPrime16: Bool = false\n    var isMultiplyPrime17:\
    \ Bool = false\n    var isMultiplyPrime18: Bool = false\n    var isMultiplyPrime19:\
    \ Bool = false\n    var isMultiplyPrime20: Bool = false\n    var isMultiplyPrime21:\
    \ Bool = false\n    var isMultiplyPrime22: Bool = false\n    var isMultiplyPrime23:\
    \ Bool = false\n    var isMultiplyPrime24: Bool = false\n    var isMultiplyPrime25:\
    \ Bool = false\n    var isMultiplyPrime26: Bool = false\n    var isMultiplyPrime27:\
    \ Bool = false\n    var isMultiplyPrime28: Bool = false\n    var isMultiplyPrime29:\
    \ Bool = false\n    var isMultiplyPrime30: Bool = false\n    var isMultiplyPrime31:\
    \ Bool = false\n    var isMultiplyPrime32: Bool = false\n    var isMultiplyPrime33:\
    \ Bool = false\n    var isMultiplyPrime34: Bool = false\n    var isMultiplyPrime35:\
    \ Bool = false\n    var isMultiplyPrime36: Bool = false\n    var isMultiplyPrime37:\
    \ Bool = false\n    var isMultiplyPrime38: Bool = false\n    var isMultiplyPrime39:\
    \ Bool = false\n    var isMultiplyPrime40: Bool = false\n    var isMultiplyPrime41:\
    \ Bool = false\n    var isMultiplyPrime42: Bool = false\n    var isMultiplyPrime43:\
    \ Bool = false\n    var isMulti\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpdfbutehv.swift:60:9: error: type annotation missing in pattern\n\
    \    var isMulti\n        ^\n"
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 100 {\n      \
    \  return false\n    }\n    var primes = [Int]()\n    var primes_count = 0\n \
    \   var primes_sum = 0\n    var primes_sum2 = 0\n    var primes_sum3 = 0\n   \
    \ var primes_sum4 = 0\n    var primes_sum5 = 0\n    var primes_sum6 = 0\n    var\
    \ primes_sum7 = 0\n    var primes_sum8 = 0\n    var primes_sum9 = 0\n    var primes_sum10\
    \ = 0\n    var primes_sum11 = 0\n    var primes_sum12 = 0\n    var primes_sum13\
    \ = 0\n    var primes_sum14 = 0\n    var primes_sum15 = 0\n    var primes_sum16\
    \ = 0\n    var primes_sum17 = 0\n    var primes_sum18 = 0\n    var primes_sum19\
    \ = 0\n    var primes_sum20 = 0\n    var primes_sum21 = 0\n    var primes_sum22\
    \ = 0\n    var primes_sum23 = 0\n    var primes_sum24 = 0\n    var primes_sum25\
    \ = 0\n    var primes_sum26 = 0\n    var primes_sum27 = 0\n    var primes_sum28\
    \ = 0\n    var primes_sum29 = 0\n    var primes_sum30 = 0\n    var primes_sum31\
    \ = 0\n    var primes_sum32 = 0\n    var primes_sum33 = 0\n    var primes_sum34\
    \ = 0\n    var primes_sum35 = 0\n    var primes_sum36 = 0\n    var primes_sum37\
    \ = 0\n    var primes_sum38 = 0\n    var primes_sum39 = 0\n    var primes_sum40\
    \ = 0\n    var primes_sum41 = 0\n    var primes_sum42 = 0\n    var primes_sum43\
    \ = 0\n    var primes_sum44 = 0\n    var primes_sum45 = 0\n    var primes_sum46\
    \ = 0\n    var primes_sum47 = 0\n    var primes_sum48 = 0\n    var primes_sum49\
    \ = 0\n    var primes_sum50 = 0\n    var primes_sum51 = 0\n    var primes_sum52\
    \ = 0\n    var primes_sum53 = 0\n    var primes_sum54 = 0\n    var primes_sum55\
    \ = 0\n    var primes_sum56 = 0\n    var primes_sum57 = 0\n    var primes_sum58\
    \ = 0\n    var primes_sum59 = 0\n    var primes_sum60 = 0\n    var primes_sum61\
    \ = 0\n    var primes_sum62 = 0\n    var primes_sum63 = 0\n    var primes_sum64\
    \ = 0\n    var primes_sum65 = 0\n    var primes_sum66 = 0\n    var primes_sum67\
    \ = 0\n    var primes_sum68 = 0\n    var primes_sum69 = 0\n    var primes_sum70\
    \ = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a: 5)\
    \ == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp8ywzi8bg.swift:13:9: warning: initialization of variable 'primes'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes = [Int]()\n    ~~~~^~~~~~\n    _\n/tmp/tmp8ywzi8bg.swift:14:9:\
    \ warning: initialization of variable 'primes_count' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var primes_count = 0\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmp8ywzi8bg.swift:15:9: warning: initialization\
    \ of variable 'primes_sum' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var primes_sum = 0\n    ~~~~^~~~~~~~~~\n    _\n/tmp/tmp8ywzi8bg.swift:16:9:\
    \ warning: initialization of variable 'primes_sum2' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum2 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmp8ywzi8bg.swift:17:9: warning: initialization of variable 'primes_sum3'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum3 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmp8ywzi8bg.swift:18:9:\
    \ warning: initialization of variable 'primes_sum4' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum4 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmp8ywzi8bg.swift:19:9: warning: initialization of variable 'primes_sum5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum5 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmp8ywzi8bg.swift:20:9:\
    \ warning: initialization of variable 'primes_sum6' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum6 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmp8ywzi8bg.swift:21:9: warning: initialization of variable 'primes_sum7'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum7 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmp8ywzi8bg.swift:22:9:\
    \ warning: initialization of variable 'primes_sum8' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum8 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmp8ywzi8bg.swift:23:9: warning:"
  stdout: ''
  timestamp: 1659824577
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var primes = [Int]()\n\
    \    var isMultiplyPrime = true\n    for number in 1...a {\n        if number\
    \ % 2 == 0 {\n            for prime in primes {\n                if number % prime\
    \ == 0 {\n                    isMultiplyPrime = false\n                    break\n\
    \                }\n            }\n        } else {\n            for prime in\
    \ primes {\n                if number % prime == 0 {\n                    isMultiplyPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \   }\n        if isMultiplyPrime {\n            primes.append(number)\n     \
    \   }\n    }\n    return isMultiplyPrime\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpz82gm8pe/tmpz82gm8pe.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b318e08bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b318dd82b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b318dd82988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b318dd817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz82gm8pe                        0x000055c9fad79617 <unavailable> + 5655

    5    libc.so.6                          0x00002b318e277460 __libc_start_main +
    245

    6    tmpz82gm8pe                        0x000055c9fad79259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824578
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    \n    if a < 100 {\n\
    \        return false\n    }\n    \n    var primes = [Int]()\n    \n    for n\
    \ in 2...a / 2 {\n        if a % n == 0 {\n            primes.append(n)\n    \
    \    }\n    }\n    \n    for n in 2...a / 2 {\n        if primes.contains(n) {\n\
    \            return false\n        }\n    }\n    \n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpeo_l32fm/tmpeo_l32fm.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b96b1ebbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b96b1bb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b96b1bb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b96b1bb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeo_l32fm                        0x00005580377a8517 <unavailable> + 5399

    5    libc.so.6                          0x00002b96b20a7460 __libc_start_main +
    245

    6    tmpeo_l32fm                        0x00005580377a8159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1659824578
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 100 {\n      \
    \  return false\n    }\n    var primes = [Int]()\n    var primes_count = 0\n \
    \   var is_multiply_prime = true\n    for n in 2..100 {\n        if primes_count\
    \ > 0 {\n            if n % primes[primes_count-1] == 0 {\n                is_multiply_prime\
    \ = false\n                break\n            }\n        }\n        if n % a ==\
    \ 0 {\n            is_multiply_prime = false\n            break\n        }\n \
    \       primes.append(n)\n        primes_count += 1\n    }\n    return is_multiply_prime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpok6__n7a.swift:16:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for n in 2..100 {\n              ^~\n             \
    \ ...\n"
  stdout: ''
  timestamp: 1659824577
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 100 {\n      \
    \  return false\n    }\n    var primes = [Int]()\n    var prime_number = 0\n \
    \   var is_multiply_prime = true\n    for number in 1...a {\n        if number\
    \ % 2 == 0 {\n            continue\n        }\n        for prime in 2...number\
    \ {\n            if number % prime == 0 {\n                is_multiply_prime =\
    \ false\n                break\n            }\n        }\n        if is_multiply_prime\
    \ {\n            primes.append(number)\n        }\n    }\n    if primes.count\
    \ < 3 {\n        return false\n    }\n    for prime in 2...a {\n        if primes.contains(prime)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpcsszheeu/tmpcsszheeu.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b913a085c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9139d7cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9139d7c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9139d7b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcsszheeu                        0x000056405e75f567 <unavailable> + 5479

    5    libc.so.6                          0x00002b913a271460 __libc_start_main +
    245

    6    tmpcsszheeu                        0x000056405e75f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824578
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 100 {\n      \
    \  return false\n    }\n    var primes = [Int]()\n    var primes_count = 100\n\
    \    var primes_sum = 0\n    var primes_sum2 = 0\n    var primes_sum3 = 0\n  \
    \  var primes_sum4 = 0\n    var primes_sum5 = 0\n    var primes_sum6 = 0\n   \
    \ var primes_sum7 = 0\n    var primes_sum8 = 0\n    var primes_sum9 = 0\n    var\
    \ primes_sum10 = 0\n    var primes_sum11 = 0\n    var primes_sum12 = 0\n    var\
    \ primes_sum13 = 0\n    var primes_sum14 = 0\n    var primes_sum15 = 0\n    var\
    \ primes_sum16 = 0\n    var primes_sum17 = 0\n    var primes_sum18 = 0\n    var\
    \ primes_sum19 = 0\n    var primes_sum20 = 0\n    var primes_sum21 = 0\n    var\
    \ primes_sum22 = 0\n    var primes_sum23 = 0\n    var primes_sum24 = 0\n    var\
    \ primes_sum25 = 0\n    var primes_sum26 = 0\n    var primes_sum27 = 0\n    var\
    \ primes_sum28 = 0\n    var primes_sum29 = 0\n    var primes_sum30 = 0\n    var\
    \ primes_sum31 = 0\n    var primes_sum32 = 0\n    var primes_sum33 = 0\n    var\
    \ primes_sum34 = 0\n    var primes_sum35 = 0\n    var primes_sum36 = 0\n    var\
    \ primes_sum37 = 0\n    var primes_sum38 = 0\n    var primes_sum39 = 0\n    var\
    \ primes_sum40 = 0\n    var primes_sum41 = 0\n    var primes_sum42 = 0\n    var\
    \ primes_sum43 = 0\n    var primes_sum44 = 0\n    var primes_sum45 = 0\n    var\
    \ primes_sum46 = 0\n    var primes_sum47 = 0\n    var primes_sum48 = 0\n    var\
    \ primes_sum49 = 0\n    var primes_sum50 = 0\n    var primes_sum51 = 0\n    var\
    \ primes_sum52 = 0\n    var primes_sum53 = 0\n    var primes_sum54 = 0\n    var\
    \ primes_sum55 = 0\n    var primes_sum56 = 0\n    var primes_sum57 = 0\n    var\
    \ primes_sum58 = 0\n    var primes_sum59 = 0\n    var primes_sum60 = 0\n    var\
    \ primes_sum61 = 0\n    var primes_sum62 = 0\n    var primes_sum63 = 0\n    var\
    \ primes_sum64 = 0\n    var primes_sum65 = 0\n    var primes_sum66 = 0\n    var\
    \ primes_sum67 = 0\n    var primes_sum68 = 0\n    var primes_sum69 = 0\n    var\
    \ primes_sum70 = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmphawwsyhz.swift:13:9: warning: initialization of variable 'primes'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes = [Int]()\n    ~~~~^~~~~~\n    _\n/tmp/tmphawwsyhz.swift:14:9:\
    \ warning: initialization of variable 'primes_count' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var primes_count = 100\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:15:9: warning: initialization\
    \ of variable 'primes_sum' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var primes_sum = 0\n    ~~~~^~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:16:9:\
    \ warning: initialization of variable 'primes_sum2' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum2 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmphawwsyhz.swift:17:9: warning: initialization of variable 'primes_sum3'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum3 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:18:9:\
    \ warning: initialization of variable 'primes_sum4' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum4 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmphawwsyhz.swift:19:9: warning: initialization of variable 'primes_sum5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum5 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:20:9:\
    \ warning: initialization of variable 'primes_sum6' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum6 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmphawwsyhz.swift:21:9: warning: initialization of variable 'primes_sum7'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum7 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:22:9:\
    \ warning: initialization of variable 'primes_sum8' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum8 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmphawwsyhz.swift:23:9: warnin"
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    \n    if a <= 100 {\n        var primes = [Int]()\n        \n        for\
    \ var i = 2; i < a; i++ {\n            if a % i == 0 {\n                primes.append(i)\n\
    \            }\n        }\n        \n        if primes.count >= 3 {\n        \
    \    result = true\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpuozr5zko.swift:15:9: error: C-style for statement has been removed\
    \ in Swift 3\n        for var i = 2; i < a; i++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824578
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    var primes = [Int]()\n    var prime = 2 // first prime number\n    primes.append(prime)\n\
    \    \n    while prime < 100 {\n        if a % prime == 0 {\n            result\
    \ = true\n            break\n        }\n        \n        for _ in 0..<primes.count\
    \ {\n            if a % primes[_] == 0 {\n                result = true\n    \
    \            break\n            }\n        }\n        \n        primes.append(prime)\n\
    \        prime += 2\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpa7tbfrrt.swift:22:27: error: '_' can only appear in a pattern or\
    \ on the left side of an assignment\n            if a % primes[_] == 0 {\n   \
    \                       ^\n"
  stdout: ''
  timestamp: 1659824578
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = true\n \
    \   var i = 2\n    while i <= 100 {\n        if a % i == 0 {\n            result\
    \ = false\n            break\n        }\n        i += 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpya1joz8p/tmpya1joz8p.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a4784dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a47544b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1a47544988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1a475437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpya1joz8p                        0x00005622b8a862b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b1a47a39460 __libc_start_main +
    245

    6    tmpya1joz8p                        0x00005622b8a85ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824577
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    \n    if a < 100 {\n        var primes = [Int]()\n        var prime = 2 //\
    \ first prime number\n        \n        while prime < 100 {\n            primes.append(prime)\n\
    \            prime += 2\n        }\n        \n        for prime in primes {\n\
    \            if a % prime == 0 {\n                result = true\n            \
    \    break\n            }\n        }\n    }\n    \n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmp1xyv3ali/tmp1xyv3ali.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae13b107c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae13adfeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae13adfe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae13adfd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1xyv3ali                        0x000056367e229601 <unavailable> + 5633

    5    libc.so.6                          0x00002ae13b2f3460 __libc_start_main +
    245

    6    tmp1xyv3ali                        0x000056367e229159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1659824578
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    guard a >= 100 else {\
    \ return false }\n    \n    var isMultiplyPrime = true\n    var primes = [Int]()\n\
    \    \n    for number in 1...a / 2 {\n        guard number % 2 == 0 else { return\
    \ false }\n        \n        for prime in 2...number / 2 {\n            if number\
    \ % prime == 0 {\n                isMultiplyPrime = false\n                break\n\
    \            }\n        }\n        \n        if isMultiplyPrime {\n          \
    \  primes.append(number)\n        }\n    }\n    \n    return isMultiplyPrime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpy5jtytpt/tmpy5jtytpt.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abfdd857c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abfdd54eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abfdd54e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abfdd54d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5jtytpt                        0x000056354ac8e457 <unavailable> + 5207

    5    libc.so.6                          0x00002abfdda43460 __libc_start_main +
    245

    6    tmpy5jtytpt                        0x000056354ac8e099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1659824578
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = true\n \
    \   \n    for i in 2..100 {\n        if a % i == 0 {\n            result = false\n\
    \            break\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp5m_c8s1_.swift:12:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 2..100 {\n              ^~\n             \
    \ ...\n"
  stdout: ''
  timestamp: 1659824578
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var primes = [Int]()\n\
    \    var isMultiplyPrime = true\n    var isPrime = true\n    var isPrime2 = true\n\
    \    var isPrime3 = true\n    var isPrime4 = true\n    var isPrime5 = true\n \
    \   var isPrime6 = true\n    var isPrime7 = true\n    var isPrime8 = true\n  \
    \  var isPrime9 = true\n    var isPrime10 = true\n    var isPrime11 = true\n \
    \   var isPrime12 = true\n    var isPrime13 = true\n    var isPrime14 = true\n\
    \    var isPrime15 = true\n    var isPrime16 = true\n    var isPrime17 = true\n\
    \    var isPrime18 = true\n    var isPrime19 = true\n    var isPrime20 = true\n\
    \    var isPrime21 = true\n    var isPrime22 = true\n    var isPrime23 = true\n\
    \    var isPrime24 = true\n    var isPrime25 = true\n    var isPrime26 = true\n\
    \    var isPrime27 = true\n    var isPrime28 = true\n    var isPrime29 = true\n\
    \    var isPrime30 = true\n    var isPrime31 = true\n    var isPrime32 = true\n\
    \    var isPrime33 = true\n    var isPrime34 = true\n    var isPrime35 = true\n\
    \    var isPrime36 = true\n    var isPrime37 = true\n    var isPrime38 = true\n\
    \    var isPrime39 = true\n    var isPrime40 = true\n    var isPrime41 = true\n\
    \    var isPrime42 = true\n    var isPrime43 = true\n    var isPrime44 = true\n\
    \    var isPrime45 = true\n    var isPrime46 = true\n    var isPrime47 = true\n\
    \    var isPrime48 = true\n    var isPrime49 = true\n    var isPrime50 = true\n\
    \    var isPrime51 = true\n    var isPrime52 = true\n    var isPrime53 = true\n\
    \    var isPrime54 = true\n    var isPrime55 = true\n    var isPrime56 = true\n\
    \    var isPrime57 = true\n    var isPrime58 = true\n    var isPrime59 = true\n\
    \    var isPrime60 = true\n    var isPrime61 = true\n    var isPrime62 = true\n\
    \    var isPrime63 = true\n    var isPrime64 = true\n    var isPrime65 = true\n\
    \    var isPrime66 = true\n    var isPrime67 = true\n    var isPrime68 = true\n\
    \    var isPrime69 = true\n    var is\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpjf927jvf.swift:81:9: error: expected pattern\n    var is\n    \
    \    ^\n/tmp/tmpjf927jvf.swift:10:9: warning: initialization of variable 'primes'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes = [Int]()\n    ~~~~^~~~~~\n    _\n/tmp/tmpjf927jvf.swift:11:9:\
    \ warning: initialization of variable 'isMultiplyPrime' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime = true\n\
    \    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpjf927jvf.swift:12:9: warning: initialization\
    \ of variable 'isPrime' was never used; consider replacing with assignment to\
    \ '_' or removing it\n    var isPrime = true\n    ~~~~^~~~~~~\n    _\n/tmp/tmpjf927jvf.swift:13:9:\
    \ warning: initialization of variable 'isPrime2' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime2 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmpjf927jvf.swift:14:9: warning: initialization of variable 'isPrime3'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime3 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpjf927jvf.swift:15:9:\
    \ warning: initialization of variable 'isPrime4' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime4 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmpjf927jvf.swift:16:9: warning: initialization of variable 'isPrime5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime5 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpjf927jvf.swift:17:9:\
    \ warning: initialization of variable 'isPrime6' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime6 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmpjf927jvf.swift:18:9: warning: initialization of variable 'isPrime7'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime7 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpjf927jvf.swift:19:9:\
    \ warning: initialization of variable 'isPrime8' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime8 = true\n    ~~~~^~~~~~~~\n\
    \    _"
  stdout: ''
  timestamp: 1659824578
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = true\n \
    \   var primes = [Int]()\n    primes.append(2)\n    primes.append(3)\n    primes.append(5)\n\
    \    primes.append(7)\n    primes.append(11)\n    primes.append(13)\n    primes.append(17)\n\
    \    primes.append(19)\n    primes.append(23)\n    primes.append(29)\n    primes.append(31)\n\
    \    primes.append(37)\n    primes.append(43)\n    primes.append(51)\n    primes.append(59)\n\
    \    primes.append(61)\n    primes.append(67)\n    primes.append(73)\n    primes.append(79)\n\
    \    primes.append(83)\n    primes.append(89)\n    primes.append(97)\n    primes.append(101)\n\
    \    primes.append(103)\n    primes.append(107)\n    primes.append(109)\n    primes.append(113)\n\
    \    primes.append(127)\n    primes.append(131)\n    primes.append(137)\n    primes.append(139)\n\
    \    primes.append(149)\n    primes.append(151)\n    primes.append(157)\n    primes.append(163)\n\
    \    primes.append(167)\n    primes.append(173)\n    primes.append(179)\n    primes.append(181)\n\
    \    primes.append(191)\n    primes.append(193)\n    primes.append(197)\n    primes.append(199)\n\
    \    primes.append(211)\n    primes.append(223)\n    primes.append(227)\n    primes.append(229)\n\
    \    primes.append(233)\n    primes.append(239)\n    primes.append(241)\n    primes.append(243)\n\
    \    primes.append(247)\n    primes.append(247)\n    primes.append(251)\n    primes.append(257)\n\
    \    primes.append(263)\n    primes.append(269)\n    primes.append(271)\n    primes.append(273)\n\
    \    primes.append(277)\n    primes.append(281)\n    primes.append(283)\n    primes.append(293)\n\
    \    primes.append(307)\n    primes.append(311)\n    primes.append(313)\n    primes.append(317)\n\
    \    primes.append(331)\n    primes.append(333)\n    primes.append(337)\n    primes.append(347)\n\
    \    primes.append(349)\n    primes.append(353)\n    primes.append(359)\n    primes.append(367)\n\
    \    primes.append(373)\n    primes.append(379)\n    primes.append(383)\n    primes.append(389)\n\
    \    primes.append(397)\n    primes.append(409)\n    primes.append(419)\n    primes.append(421)\n\
    \    primes.append(431)\n    primes.append(433\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpbrrw_ww2.swift:97:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpbrrw_ww2.swift:96:18: note: to match this opening '('\n    primes.append(433\n\
    \                 ^\n/tmp/tmpbrrw_ww2.swift:10:9: warning: initialization of variable\
    \ 'result' was never used; consider replacing with assignment to '_' or removing\
    \ it\n    var result = true\n    ~~~~^~~~~~\n    _\n"
  stdout: ''
  timestamp: 1659824578
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = true\n \
    \   var primes = [Int]()\n    var primes_count = 100\n    var primes_count_max\
    \ = 100\n    var primes_count_min = 3\n    var primes_count_step = 2\n    var\
    \ primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_step\
    \ = 2\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_step\
    \ = 2\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_step\
    \ = 2\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_step\
    \ = 2\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_step\
    \ = 2\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_step\
    \ = 2\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_step\
    \ = 2\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_step\
    \ = 2\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_step\
    \ = 2\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_step\
    \ = 2\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_step\
    \ = 2\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_step\
    \ = 2\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_step\
    \ = 2\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_step\
    \ = 2\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_step\
    \ = 2\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_step\
    \ = 2\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_step\
    \ = 2\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_step\
    \ = 2\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_step\
    \ = 2\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_step\
    \ = 2\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_step\
    \ = 2\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_step\
    \ = 2\n    var primes_count_max = 100\n    var primes_count_min\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpnw2qvtg2.swift:16:9: error: invalid redeclaration of 'primes_count_max'\n\
    \    var primes_count_max = 100\n        ^\n/tmp/tmpnw2qvtg2.swift:13:9: note:\
    \ 'primes_count_max' previously declared here\n    var primes_count_max = 100\n\
    \        ^\n/tmp/tmpnw2qvtg2.swift:17:9: error: invalid redeclaration of 'primes_count_min'\n\
    \    var primes_count_min = 3\n        ^\n/tmp/tmpnw2qvtg2.swift:14:9: note: 'primes_count_min'\
    \ previously declared here\n    var primes_count_min = 3\n        ^\n/tmp/tmpnw2qvtg2.swift:18:9:\
    \ error: invalid redeclaration of 'primes_count_step'\n    var primes_count_step\
    \ = 2\n        ^\n/tmp/tmpnw2qvtg2.swift:15:9: note: 'primes_count_step' previously\
    \ declared here\n    var primes_count_step = 2\n        ^\n/tmp/tmpnw2qvtg2.swift:19:9:\
    \ error: invalid redeclaration of 'primes_count_max'\n    var primes_count_max\
    \ = 100\n        ^\n/tmp/tmpnw2qvtg2.swift:13:9: note: 'primes_count_max' previously\
    \ declared here\n    var primes_count_max = 100\n        ^\n/tmp/tmpnw2qvtg2.swift:20:9:\
    \ error: invalid redeclaration of 'primes_count_min'\n    var primes_count_min\
    \ = 3\n        ^\n/tmp/tmpnw2qvtg2.swift:14:9: note: 'primes_count_min' previously\
    \ declared here\n    var primes_count_min = 3\n        ^\n/tmp/tmpnw2qvtg2.swift:21:9:\
    \ error: invalid redeclaration of 'primes_count_step'\n    var primes_count_step\
    \ = 2\n        ^\n/tmp/tmpnw2qvtg2.swift:15:9: note: 'primes_count_step' previously\
    \ declared here\n    var primes_count_step = 2\n        ^\n/tmp/tmpnw2qvtg2.swift:22:9:\
    \ error: invalid redeclaration of 'primes_count_max'\n    var primes_count_max\
    \ = 100\n        ^\n/tmp/tmpnw2qvtg2.swift:13:9: note: 'primes_count_max' previously\
    \ declared here\n    var primes_count_max = 100\n        ^\n/tmp/tmpnw2qvtg2.swift:23:9:\
    \ error: invalid redeclaration of 'primes_count_min'\n    var primes_count_min\
    \ = 3\n        ^\n/tmp/tmpnw2qvtg2.swift:14:9: note: 'primes_count_min' previously\
    \ declared here\n    var primes_count_min = 3\n        ^\n/tmp/tmpnw2qvtg2.swift:24:9:\
    \ error: invalid redeclaration of 'primes_count_step'\n    var primes_count_step\
    \ = 2\n        ^\n/tmp/tmpnw2"
  stdout: ''
  timestamp: 1659824578
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var primes = [Int]()\n\
    \    var primes_count = 100\n    var primes_sum = 0\n    var primes_sum2 = 0\n\
    \    var primes_sum3 = 0\n    var primes_sum4 = 0\n    var primes_sum5 = 0\n \
    \   var primes_sum6 = 0\n    var primes_sum7 = 0\n    var primes_sum8 = 0\n  \
    \  var primes_sum9 = 0\n    var primes_sum10 = 0\n    var primes_sum11 = 0\n \
    \   var primes_sum12 = 0\n    var primes_sum13 = 0\n    var primes_sum14 = 0\n\
    \    var primes_sum15 = 0\n    var primes_sum16 = 0\n    var primes_sum17 = 0\n\
    \    var primes_sum18 = 0\n    var primes_sum19 = 0\n    var primes_sum20 = 0\n\
    \    var primes_sum21 = 0\n    var primes_sum22 = 0\n    var primes_sum23 = 0\n\
    \    var primes_sum24 = 0\n    var primes_sum25 = 0\n    var primes_sum26 = 0\n\
    \    var primes_sum27 = 0\n    var primes_sum28 = 0\n    var primes_sum29 = 0\n\
    \    var primes_sum30 = 0\n    var primes_sum31 = 0\n    var primes_sum32 = 0\n\
    \    var primes_sum33 = 0\n    var primes_sum34 = 0\n    var primes_sum35 = 0\n\
    \    var primes_sum36 = 0\n    var primes_sum37 = 0\n    var primes_sum38 = 0\n\
    \    var primes_sum39 = 0\n    var primes_sum40 = 0\n    var primes_sum41 = 0\n\
    \    var primes_sum42 = 0\n    var primes_sum43 = 0\n    var primes_sum44 = 0\n\
    \    var primes_sum45 = 0\n    var primes_sum46 = 0\n    var primes_sum47 = 0\n\
    \    var primes_sum48 = 0\n    var primes_sum49 = 0\n    var primes_sum50 = 0\n\
    \    var primes_sum51 = 0\n    var primes_sum52 = 0\n    var primes_sum53 = 0\n\
    \    var primes_sum54 = 0\n    var primes_sum55 = 0\n    var primes_sum56 = 0\n\
    \    var primes_sum57 = 0\n    var primes_sum58 = 0\n    var primes_sum59 = 0\n\
    \    var primes_sum60 = 0\n    var primes_sum61 = 0\n    var primes_sum62 = 0\n\
    \    var primes_sum63 = 0\n    var primes_sum64 = 0\n    var primes_sum65 = 0\n\
    \    var primes_sum66 = 0\n    var primes_sum67 = 0\n    var primes_sum68 = 0\n\
    \    var primes_sum69 = 0\n    var primes_sum70 = 0\n    var primes_sum71 = 0\n\
    \    var primes_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7b6uvaj2.swift:83:9: error: type annotation missing in pattern\n\
    \    var primes_\n        ^\n"
  stdout: ''
  timestamp: 1659824577
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 100 {\n      \
    \  return false\n    }\n    \n    var primes = [Int]()\n    \n    for i in 1...a\
    \ {\n        if a % i == 0 {\n            primes.append(i)\n        }\n    }\n\
    \    \n    return primes.count >= 3\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmp2lzt693w/tmp2lzt693w.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26b78f7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26b75eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26b75ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26b75ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2lzt693w                        0x000055c90c34a507 <unavailable> + 5383

    5    libc.so.6                          0x00002b26b7ae3460 __libc_start_main +
    245

    6    tmp2lzt693w                        0x000055c90c34a149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824578
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var primes = [Int]()\n\
    \    var primes_count = 100\n    var is_multiply_prime = false\n    \n    for\
    \ _ in 0..<primes_count {\n        primes.append(0)\n    }\n    \n    for prime\
    \ in 0..<primes_count {\n        if a % prime == 0 {\n            primes[prime]\
    \ = primes[prime] + 1\n        }\n    }\n    \n    for prime in 0..<primes_count\
    \ {\n        if primes[prime] == 3 {\n            is_multiply_prime = true\n \
    \       }\n    }\n    \n    return is_multiply_prime\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder
    operation

    Current stack trace:

    0    libswiftCore.so                    0x00002ad2b3d94c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad2b3a8b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad2b3a8b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad2b3a8b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad2b3a8abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp8cwqev2d                        0x000055b9b5c2ab23 <unavailable> + 6947

    6    tmp8cwqev2d                        0x000055b9b5c2a42b <unavailable> + 5163

    7    libc.so.6                          0x00002ad2b3f80460 __libc_start_main +
    245

    8    tmp8cwqev2d                        0x000055b9b5c2a149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824578
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var primes = [Int]()\n\
    \    var primes_count = 100\n    var is_multiply_prime = false\n    \n    for\
    \ _ in 0..<primes_count {\n        primes.append(0)\n    }\n    \n    for prime\
    \ in primes {\n        if a % prime == 0 {\n            is_multiply_prime = true\n\
    \            break\n        }\n    }\n    \n    return is_multiply_prime\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder
    operation

    Current stack trace:

    0    libswiftCore.so                    0x00002b8644dd4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8644acb561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8644acb286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8644acb13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8644acabb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp09n70bkc                        0x00005589bb708c43 <unavailable> + 7235

    6    tmp09n70bkc                        0x00005589bb70853b <unavailable> + 5435

    7    libc.so.6                          0x00002b8644fc0460 __libc_start_main +
    245

    8    tmp09n70bkc                        0x00005589bb708259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824578
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = true\n \
    \   var primes = [Int]()\n    var prime: Int\n    var i: Int\n    for i = 2; i\
    \ <= a / 2; i += 1 {\n        prime = i\n        while prime > 1 {\n         \
    \   if a % prime == 0 {\n                result = false\n                break\n\
    \            }\n            prime = primes[prime - 1]\n        }\n        primes.append(prime)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_4u4vv14.swift:14:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 2; i <= a / 2; i += 1 {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824578
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var isMultiplyPrime =\
    \ false\n    var isMultiplyPrime2 = false\n    var isMultiplyPrime3 = false\n\
    \    var isMultiplyPrime4 = false\n    var isMultiplyPrime5 = false\n    var isMultiplyPrime6\
    \ = false\n    var isMultiplyPrime7 = false\n    var isMultiplyPrime8 = false\n\
    \    var isMultiplyPrime9 = false\n    var isMultiplyPrime10 = false\n    var\
    \ isMultiplyPrime11 = false\n    var isMultiplyPrime12 = false\n    var isMultiplyPrime13\
    \ = false\n    var isMultiplyPrime14 = false\n    var isMultiplyPrime15 = false\n\
    \    var isMultiplyPrime16 = false\n    var isMultiplyPrime17 = false\n    var\
    \ isMultiplyPrime18 = false\n    var isMultiplyPrime19 = false\n    var isMultiplyPrime20\
    \ = false\n    var isMultiplyPrime21 = false\n    var isMultiplyPrime22 = false\n\
    \    var isMultiplyPrime23 = false\n    var isMultiplyPrime24 = false\n    var\
    \ isMultiplyPrime25 = false\n    var isMultiplyPrime26 = false\n    var isMultiplyPrime27\
    \ = false\n    var isMultiplyPrime28 = false\n    var isMultiplyPrime29 = false\n\
    \    var isMultiplyPrime30 = false\n    var isMultiplyPrime31 = false\n    var\
    \ isMultiplyPrime32 = false\n    var isMultiplyPrime33 = false\n    var isMultiplyPrime34\
    \ = false\n    var isMultiplyPrime35 = false\n    var isMultiplyPrime36 = false\n\
    \    var isMultiplyPrime37 = false\n    var isMultiplyPrime38 = false\n    var\
    \ isMultiplyPrime39 = false\n    var isMultiplyPrime40 = false\n    var isMultiplyPrime41\
    \ = false\n    var isMultiplyPrime42 = false\n    var isMultiplyPrime43 = false\n\
    \    var isMultiplyPrime44 = false\n    var isMultiplyPrime45 = false\n    var\
    \ isMultiplyPrime46 = false\n    var isMultiplyPrime47 = false\n    var isMultiplyPrime48\
    \ = false\n    var isMultiplyPrime49 = false\n    var isMultiplyPrime50 = false\n\
    \    var isMultiplyPrime51 = false\n    var isMultiplyPrime52 = false\n    var\
    \ isMultiplyPrime53 = false\n    var isMultiplyPrime54 = false\n    var isMultiplyPrime55\
    \ = false\n    var isMultiplyPrime56 = false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpdgv3yl0t.swift:10:9: warning: initialization of variable 'isMultiplyPrime'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime = false\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpdgv3yl0t.swift:11:9:\
    \ warning: initialization of variable 'isMultiplyPrime2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime2 =\
    \ false\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpdgv3yl0t.swift:12:9: warning:\
    \ initialization of variable 'isMultiplyPrime3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime3 = false\n  \
    \  ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpdgv3yl0t.swift:13:9: warning: initialization\
    \ of variable 'isMultiplyPrime4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime4 = false\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpdgv3yl0t.swift:14:9: warning: initialization of variable 'isMultiplyPrime5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime5 = false\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpdgv3yl0t.swift:15:9:\
    \ warning: initialization of variable 'isMultiplyPrime6' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime6 =\
    \ false\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpdgv3yl0t.swift:16:9: warning:\
    \ initialization of variable 'isMultiplyPrime7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime7 = false\n  \
    \  ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpdgv3yl0t.swift:17:9: warning: initialization\
    \ of variable 'isMultiplyPrime8' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime8 = false\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpdgv3yl0t.swift:18:9: warning: initialization of variable 'isMultiplyPrime9'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime9 = false\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpdgv3yl0t.swift:19:9:\
    \ warning: initialization of variab"
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = true\n \
    \   \n    for var i = 2; i < a; i++ {\n        if a % i == 0 {\n            result\
    \ = false\n            break\n        }\n    }\n    \n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpi4ewkmuw.swift:12:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 2; i < a; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824578
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var primes = [Int]()\n\
    \    var isMultiplyPrime = true\n    var isPrime = true\n    var isPrime2 = true\n\
    \    var isPrime3 = true\n    var isPrime4 = true\n    var isPrime5 = true\n \
    \   var isPrime6 = true\n    var isPrime7 = true\n    var isPrime8 = true\n  \
    \  var isPrime9 = true\n    var isPrime10 = true\n    var isPrime11 = true\n \
    \   var isPrime12 = true\n    var isPrime13 = true\n    var isPrime14 = true\n\
    \    var isPrime15 = true\n    var isPrime16 = true\n    var isPrime17 = true\n\
    \    var isPrime18 = true\n    var isPrime19 = true\n    var isPrime20 = true\n\
    \    var isPrime21 = true\n    var isPrime22 = true\n    var isPrime23 = true\n\
    \    var isPrime24 = true\n    var isPrime25 = true\n    var isPrime26 = true\n\
    \    var isPrime27 = true\n    var isPrime28 = true\n    var isPrime29 = true\n\
    \    var isPrime30 = true\n    var isPrime31 = true\n    var isPrime32 = true\n\
    \    var isPrime33 = true\n    var isPrime34 = true\n    var isPrime35 = true\n\
    \    var isPrime36 = true\n    var isPrime37 = true\n    var isPrime38 = true\n\
    \    var isPrime39 = true\n    var isPrime40 = true\n    var isPrime41 = true\n\
    \    var isPrime42 = true\n    var isPrime43 = true\n    var isPrime44 = true\n\
    \    var isPrime45 = true\n    var isPrime46 = true\n    var isPrime47 = true\n\
    \    var isPrime48 = true\n    var isPrime49 = true\n    var isPrime50 = true\n\
    \    var isPrime51 = true\n    var isPrime52 = true\n    var isPrime53 = true\n\
    \    var isPrime54 = true\n    var isPrime55 = true\n    var isPrime56 = true\n\
    \    var isPrime57 = true\n    var isPrime58 = true\n    var isPrime59 = true\n\
    \    var isPrime60 = true\n    var isPrime61 = true\n    var isPrime62 = true\n\
    \    var isPrime63 = true\n    var isPrime64 = true\n    var isPrime65 = true\n\
    \    var isPrime66 = true\n    var isPrime67 = true\n    var isPrime68 = true\n\
    \    var isPrime69 = true\n    var is\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpjf927jvf.swift:81:9: error: expected pattern\n    var is\n    \
    \    ^\n/tmp/tmpjf927jvf.swift:10:9: warning: initialization of variable 'primes'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes = [Int]()\n    ~~~~^~~~~~\n    _\n/tmp/tmpjf927jvf.swift:11:9:\
    \ warning: initialization of variable 'isMultiplyPrime' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime = true\n\
    \    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpjf927jvf.swift:12:9: warning: initialization\
    \ of variable 'isPrime' was never used; consider replacing with assignment to\
    \ '_' or removing it\n    var isPrime = true\n    ~~~~^~~~~~~\n    _\n/tmp/tmpjf927jvf.swift:13:9:\
    \ warning: initialization of variable 'isPrime2' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime2 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmpjf927jvf.swift:14:9: warning: initialization of variable 'isPrime3'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime3 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpjf927jvf.swift:15:9:\
    \ warning: initialization of variable 'isPrime4' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime4 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmpjf927jvf.swift:16:9: warning: initialization of variable 'isPrime5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime5 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpjf927jvf.swift:17:9:\
    \ warning: initialization of variable 'isPrime6' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime6 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmpjf927jvf.swift:18:9: warning: initialization of variable 'isPrime7'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime7 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpjf927jvf.swift:19:9:\
    \ warning: initialization of variable 'isPrime8' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime8 = true\n    ~~~~^~~~~~~~\n\
    \    _"
  stdout: ''
  timestamp: 1659824578
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 100 {\n      \
    \  return false\n    }\n    var primes = [Int]()\n    var prime: Int = 0\n   \
    \ var prime_found = false\n    var prime_found2 = false\n    var prime_found3\
    \ = false\n    var prime_found4 = false\n    var prime_found5 = false\n    var\
    \ prime_found6 = false\n    var prime_found7 = false\n    var prime_found8 = false\n\
    \    var prime_found9 = false\n    var prime_found10 = false\n    var prime_found11\
    \ = false\n    var prime_found12 = false\n    var prime_found13 = false\n    var\
    \ prime_found14 = false\n    var prime_found15 = false\n    var prime_found16\
    \ = false\n    var prime_found17 = false\n    var prime_found18 = false\n    var\
    \ prime_found19 = false\n    var prime_found20 = false\n    var prime_found21\
    \ = false\n    var prime_found22 = false\n    var prime_found23 = false\n    var\
    \ prime_found24 = false\n    var prime_found25 = false\n    var prime_found26\
    \ = false\n    var prime_found27 = false\n    var prime_found28 = false\n    var\
    \ prime_found29 = false\n    var prime_found30 = false\n    var prime_found31\
    \ = false\n    var prime_found32 = false\n    var prime_found33 = false\n    var\
    \ prime_found34 = false\n    var prime_found35 = false\n    var prime_found36\
    \ = false\n    var prime_found37 = false\n    var prime_found38 = false\n    var\
    \ prime_found39 = false\n    var prime_found40 = false\n    var prime_found41\
    \ = false\n    var prime_found42 = false\n    var prime_found43 = false\n    var\
    \ prime_found44 = false\n    var prime_found45 = false\n    var prime_found46\
    \ = false\n    var prime_found47 = false\n    var prime_found48 = false\n    var\
    \ prime_found49 = false\n    var prime_found50 = false\n    var prime_found51\
    \ = false\n    var prime_found52 = false\n    var prime_found53 = false\n    var\
    \ prime_found54 = false\n    var prime_found55 = false\n    var prime_found56\
    \ = false\n    var prime_found57 = false\n    var prime_found58 = false\n    var\
    \ prime_found59 = false\n    var prime_found60 = false\n    var prime_found61\
    \ = false\n    var prime_found62 = false\n    var prime_found63 = false\n    var\
    \ prime_found64 = false\n    var prime_found65 = false\n    var prime_found66\
    \ = false\n    var prime_found67 = false\n    var prime_found68 = false\n\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp4_fso0vy.swift:13:9: warning: initialization of variable 'primes'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes = [Int]()\n    ~~~~^~~~~~\n    _\n/tmp/tmp4_fso0vy.swift:14:9:\
    \ warning: variable 'prime' was never used; consider replacing with '_' or removing\
    \ it\n    var prime: Int = 0\n        ^~~~~\n        _\n/tmp/tmp4_fso0vy.swift:15:9:\
    \ warning: initialization of variable 'prime_found' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var prime_found = false\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmp4_fso0vy.swift:16:9: warning: initialization of variable 'prime_found2'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var prime_found2 = false\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmp4_fso0vy.swift:17:9:\
    \ warning: initialization of variable 'prime_found3' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var prime_found3 = false\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmp4_fso0vy.swift:18:9: warning: initialization\
    \ of variable 'prime_found4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var prime_found4 = false\n    ~~~~^~~~~~~~~~~~\n\
    \    _\n/tmp/tmp4_fso0vy.swift:19:9: warning: initialization of variable 'prime_found5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var prime_found5 = false\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmp4_fso0vy.swift:20:9:\
    \ warning: initialization of variable 'prime_found6' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var prime_found6 = false\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmp4_fso0vy.swift:21:9: warning: initialization\
    \ of variable 'prime_found7' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var prime_found7 = false\n    ~~~~^~~~~~~~~~~~\n\
    \    _\n/tmp/tmp4_fso0vy.swift:22:9: warning: initialization of variable 'prime_found8'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var prime_found8 = false\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmp4_fso0vy.swift:23"
  stdout: ''
  timestamp: 1659824578
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var primes = [Int]()\n\
    \    var primes_count = 100\n    var primes_count_copy = primes_count\n    var\
    \ primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpn1f9a66g.swift:13:9: error: invalid redeclaration of 'primes_count_copy'\n\
    \    var primes_count_copy = primes_count\n        ^\n/tmp/tmpn1f9a66g.swift:12:9:\
    \ note: 'primes_count_copy' previously declared here\n    var primes_count_copy\
    \ = primes_count\n        ^\n/tmp/tmpn1f9a66g.swift:14:9: error: invalid redeclaration\
    \ of 'primes_count_copy'\n    var primes_count_copy = primes_count\n        ^\n\
    /tmp/tmpn1f9a66g.swift:12:9: note: 'primes_count_copy' previously declared here\n\
    \    var primes_count_copy = primes_count\n        ^\n/tmp/tmpn1f9a66g.swift:15:9:\
    \ error: invalid redeclaration of 'primes_count_copy'\n    var primes_count_copy\
    \ = primes_count\n        ^\n/tmp/tmpn1f9a66g.swift:12:9: note: 'primes_count_copy'\
    \ previously declared here\n    var primes_count_copy = primes_count\n       \
    \ ^\n/tmp/tmpn1f9a66g.swift:16:9: error: invalid redeclaration of 'primes_count_copy'\n\
    \    var primes_count_copy = primes_count\n        ^\n/tmp/tmpn1f9a66g.swift:12:9:\
    \ note: 'primes_count_copy' previously declared here\n    var primes_count_copy\
    \ = primes_count\n        ^\n/tmp/tmpn1f9a66g.swift:17:9: error: invalid redeclaration\
    \ of 'primes_count_copy'\n    var primes_count_copy = primes_count\n        ^\n\
    /tmp/tmpn1f9a66g.swift:12:9: note: 'primes_count_copy' previously declared here\n\
    \    var primes_count_copy = primes_count\n        ^\n/tmp/tmpn1f9a66g.swift:18:9:\
    \ error: invalid redeclaration of 'primes_count_copy'\n    var primes_count_copy\
    \ = primes_count\n        ^\n/tmp/tmpn1f9a66g.swift:12:9: note: 'primes_count_copy'\
    \ previously declared here\n    var primes_count_copy = primes_count\n       \
    \ ^\n/tmp/tmpn1f9a66g.swift:19:9: error: invalid redeclaration of 'primes_count_copy'\n\
    \    var primes_count_copy = primes_count\n        ^\n/tmp/tmpn1f9a66g.swift:12:9:\
    \ note: 'primes_count_copy' previously declared here\n    var primes_count_copy\
    \ = primes_count\n        ^\n/tmp/tmpn1f9a66g.swift:20:9: error: invalid redeclaration\
    \ of 'primes_count_copy'\n    var primes_count_copy = primes_count\n        ^\n\
    /tmp/tmpn1f9a66g.swift:12:9: note: 'primes_count_copy' previously declared "
  stdout: ''
  timestamp: 1659824578
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 100 {\n      \
    \  return false\n    }\n    var primes = [Int]()\n    var primes_count = 100\n\
    \    var primes_sum = 0\n    var primes_sum2 = 0\n    var primes_sum3 = 0\n  \
    \  var primes_sum4 = 0\n    var primes_sum5 = 0\n    var primes_sum6 = 0\n   \
    \ var primes_sum7 = 0\n    var primes_sum8 = 0\n    var primes_sum9 = 0\n    var\
    \ primes_sum10 = 0\n    var primes_sum11 = 0\n    var primes_sum12 = 0\n    var\
    \ primes_sum13 = 0\n    var primes_sum14 = 0\n    var primes_sum15 = 0\n    var\
    \ primes_sum16 = 0\n    var primes_sum17 = 0\n    var primes_sum18 = 0\n    var\
    \ primes_sum19 = 0\n    var primes_sum20 = 0\n    var primes_sum21 = 0\n    var\
    \ primes_sum22 = 0\n    var primes_sum23 = 0\n    var primes_sum24 = 0\n    var\
    \ primes_sum25 = 0\n    var primes_sum26 = 0\n    var primes_sum27 = 0\n    var\
    \ primes_sum28 = 0\n    var primes_sum29 = 0\n    var primes_sum30 = 0\n    var\
    \ primes_sum31 = 0\n    var primes_sum32 = 0\n    var primes_sum33 = 0\n    var\
    \ primes_sum34 = 0\n    var primes_sum35 = 0\n    var primes_sum36 = 0\n    var\
    \ primes_sum37 = 0\n    var primes_sum38 = 0\n    var primes_sum39 = 0\n    var\
    \ primes_sum40 = 0\n    var primes_sum41 = 0\n    var primes_sum42 = 0\n    var\
    \ primes_sum43 = 0\n    var primes_sum44 = 0\n    var primes_sum45 = 0\n    var\
    \ primes_sum46 = 0\n    var primes_sum47 = 0\n    var primes_sum48 = 0\n    var\
    \ primes_sum49 = 0\n    var primes_sum50 = 0\n    var primes_sum51 = 0\n    var\
    \ primes_sum52 = 0\n    var primes_sum53 = 0\n    var primes_sum54 = 0\n    var\
    \ primes_sum55 = 0\n    var primes_sum56 = 0\n    var primes_sum57 = 0\n    var\
    \ primes_sum58 = 0\n    var primes_sum59 = 0\n    var primes_sum60 = 0\n    var\
    \ primes_sum61 = 0\n    var primes_sum62 = 0\n    var primes_sum63 = 0\n    var\
    \ primes_sum64 = 0\n    var primes_sum65 = 0\n    var primes_sum66 = 0\n    var\
    \ primes_sum67 = 0\n    var primes_sum68 = 0\n    var primes_sum69 = 0\n    var\
    \ primes_sum70 = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmphawwsyhz.swift:13:9: warning: initialization of variable 'primes'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes = [Int]()\n    ~~~~^~~~~~\n    _\n/tmp/tmphawwsyhz.swift:14:9:\
    \ warning: initialization of variable 'primes_count' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var primes_count = 100\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:15:9: warning: initialization\
    \ of variable 'primes_sum' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var primes_sum = 0\n    ~~~~^~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:16:9:\
    \ warning: initialization of variable 'primes_sum2' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum2 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmphawwsyhz.swift:17:9: warning: initialization of variable 'primes_sum3'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum3 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:18:9:\
    \ warning: initialization of variable 'primes_sum4' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum4 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmphawwsyhz.swift:19:9: warning: initialization of variable 'primes_sum5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum5 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:20:9:\
    \ warning: initialization of variable 'primes_sum6' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum6 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmphawwsyhz.swift:21:9: warning: initialization of variable 'primes_sum7'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum7 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:22:9:\
    \ warning: initialization of variable 'primes_sum8' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum8 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmphawwsyhz.swift:23:9: warnin"
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    var primes = [Int]()\n    var primes_count = 100\n    var primes_sum = 0\n\
    \    var primes_sum2 = 0\n    var primes_sum3 = 0\n    var primes_sum4 = 0\n \
    \   var primes_sum5 = 0\n    var primes_sum6 = 0\n    var primes_sum7 = 0\n  \
    \  var primes_sum8 = 0\n    var primes_sum9 = 0\n    var primes_sum10 = 0\n  \
    \  var primes_sum11 = 0\n    var primes_sum12 = 0\n    var primes_sum13 = 0\n\
    \    var primes_sum14 = 0\n    var primes_sum15 = 0\n    var primes_sum16 = 0\n\
    \    var primes_sum17 = 0\n    var primes_sum18 = 0\n    var primes_sum19 = 0\n\
    \    var primes_sum20 = 0\n    var primes_sum21 = 0\n    var primes_sum22 = 0\n\
    \    var primes_sum23 = 0\n    var primes_sum24 = 0\n    var primes_sum25 = 0\n\
    \    var primes_sum26 = 0\n    var primes_sum27 = 0\n    var primes_sum28 = 0\n\
    \    var primes_sum29 = 0\n    var primes_sum30 = 0\n    var primes_sum31 = 0\n\
    \    var primes_sum32 = 0\n    var primes_sum33 = 0\n    var primes_sum34 = 0\n\
    \    var primes_sum35 = 0\n    var primes_sum36 = 0\n    var primes_sum37 = 0\n\
    \    var primes_sum38 = 0\n    var primes_sum39 = 0\n    var primes_sum40 = 0\n\
    \    var primes_sum41 = 0\n    var primes_sum42 = 0\n    var primes_sum43 = 0\n\
    \    var primes_sum44 = 0\n    var primes_sum45 = 0\n    var primes_sum46 = 0\n\
    \    var primes_sum47 = 0\n    var primes_sum48 = 0\n    var primes_sum49 = 0\n\
    \    var primes_sum50 = 0\n    var primes_sum51 = 0\n    var primes_sum52 = 0\n\
    \    var primes_sum53 = 0\n    var primes_sum54 = 0\n    var primes_sum55 = 0\n\
    \    var primes_sum56 = 0\n    var primes_sum57 = 0\n    var primes_sum58 = 0\n\
    \    var primes_sum59 = 0\n    var primes_sum60 = 0\n    var primes_sum61 = 0\n\
    \    var primes_sum62 = 0\n    var primes_sum63 = 0\n    var primes_sum64 = 0\n\
    \    var primes_sum65 = 0\n    var primes_sum66 = 0\n    var primes_sum67 = 0\n\
    \    var primes_sum68 = 0\n    var primes_sum69 = 0\n    var primes_sum70 = 0\n\
    \    var primes_sum71 = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmppeenxtca.swift:10:9: warning: initialization of variable 'result'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var result = false\n    ~~~~^~~~~~\n    _\n/tmp/tmppeenxtca.swift:11:9: warning:\
    \ initialization of variable 'primes' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var primes = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n/tmp/tmppeenxtca.swift:12:9: warning: initialization of variable 'primes_count'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_count = 100\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmppeenxtca.swift:13:9:\
    \ warning: initialization of variable 'primes_sum' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum = 0\n    ~~~~^~~~~~~~~~\n\
    \    _\n/tmp/tmppeenxtca.swift:14:9: warning: initialization of variable 'primes_sum2'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum2 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmppeenxtca.swift:15:9:\
    \ warning: initialization of variable 'primes_sum3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum3 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmppeenxtca.swift:16:9: warning: initialization of variable 'primes_sum4'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum4 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmppeenxtca.swift:17:9:\
    \ warning: initialization of variable 'primes_sum5' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum5 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmppeenxtca.swift:18:9: warning: initialization of variable 'primes_sum6'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum6 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmppeenxtca.swift:19:9:\
    \ warning: initialization of variable 'primes_sum7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum7 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmppeenxtca.swift:20:9: warning: initiali"
  stdout: ''
  timestamp: 1659824578
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 100 {\n      \
    \  return false\n    }\n    var primes = [Int]()\n    var prime: Int = 0\n   \
    \ var i: Int = 0\n    for i = 2; i < a; i++ {\n        if a % i == 0 {\n     \
    \       primes.append(i)\n        }\n    }\n    for prime in primes {\n      \
    \  if a % prime == 0 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a: 5)\
    \ == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpsrtg98zw.swift:16:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 2; i < a; i++ {\n    ^   ~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824578
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 100 {\n      \
    \  return false\n    }\n    \n    var primes = [Int]()\n    \n    for n in 2..<100\
    \ {\n        if a % n == 0 {\n            primes.append(n)\n        }\n    }\n\
    \    \n    return primes.contains(3) && primes.contains(5)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpy4h9benu/tmpy4h9benu.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeff9c0ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeff9905b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeff9905988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeff99047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy4h9benu                        0x000055ce07b8f517 <unavailable> + 5399

    5    libc.so.6                          0x00002aeff9dfa460 __libc_start_main +
    245

    6    tmpy4h9benu                        0x000055ce07b8f159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1659824578
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var primes = [Int]()\n\
    \    var primes_count = 100\n    var primes_sum = 0\n    var primes_sum2 = 0\n\
    \    var primes_sum3 = 0\n    var primes_sum4 = 0\n    var primes_sum5 = 0\n \
    \   var primes_sum6 = 0\n    var primes_sum7 = 0\n    var primes_sum8 = 0\n  \
    \  var primes_sum9 = 0\n    var primes_sum10 = 0\n    var primes_sum11 = 0\n \
    \   var primes_sum12 = 0\n    var primes_sum13 = 0\n    var primes_sum14 = 0\n\
    \    var primes_sum15 = 0\n    var primes_sum16 = 0\n    var primes_sum17 = 0\n\
    \    var primes_sum18 = 0\n    var primes_sum19 = 0\n    var primes_sum20 = 0\n\
    \    var primes_sum21 = 0\n    var primes_sum22 = 0\n    var primes_sum23 = 0\n\
    \    var primes_sum24 = 0\n    var primes_sum25 = 0\n    var primes_sum26 = 0\n\
    \    var primes_sum27 = 0\n    var primes_sum28 = 0\n    var primes_sum29 = 0\n\
    \    var primes_sum30 = 0\n    var primes_sum31 = 0\n    var primes_sum32 = 0\n\
    \    var primes_sum33 = 0\n    var primes_sum34 = 0\n    var primes_sum35 = 0\n\
    \    var primes_sum36 = 0\n    var primes_sum37 = 0\n    var primes_sum38 = 0\n\
    \    var primes_sum39 = 0\n    var primes_sum40 = 0\n    var primes_sum41 = 0\n\
    \    var primes_sum42 = 0\n    var primes_sum43 = 0\n    var primes_sum44 = 0\n\
    \    var primes_sum45 = 0\n    var primes_sum46 = 0\n    var primes_sum47 = 0\n\
    \    var primes_sum48 = 0\n    var primes_sum49 = 0\n    var primes_sum50 = 0\n\
    \    var primes_sum51 = 0\n    var primes_sum52 = 0\n    var primes_sum53 = 0\n\
    \    var primes_sum54 = 0\n    var primes_sum55 = 0\n    var primes_sum56 = 0\n\
    \    var primes_sum57 = 0\n    var primes_sum58 = 0\n    var primes_sum59 = 0\n\
    \    var primes_sum60 = 0\n    var primes_sum61 = 0\n    var primes_sum62 = 0\n\
    \    var primes_sum63 = 0\n    var primes_sum64 = 0\n    var primes_sum65 = 0\n\
    \    var primes_sum66 = 0\n    var primes_sum67 = 0\n    var primes_sum68 = 0\n\
    \    var primes_sum69 = 0\n    var primes_sum70 = 0\n    var primes_sum71 = 0\n\
    \    var primes_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7b6uvaj2.swift:83:9: error: type annotation missing in pattern\n\
    \    var primes_\n        ^\n"
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 100 {\n      \
    \  return false\n    }\n    var primes = [Int]()\n    var primes_count = 100\n\
    \    var primes_sum = 0\n    var primes_sum2 = 0\n    var primes_sum3 = 0\n  \
    \  var primes_sum4 = 0\n    var primes_sum5 = 0\n    var primes_sum6 = 0\n   \
    \ var primes_sum7 = 0\n    var primes_sum8 = 0\n    var primes_sum9 = 0\n    var\
    \ primes_sum10 = 0\n    var primes_sum11 = 0\n    var primes_sum12 = 0\n    var\
    \ primes_sum13 = 0\n    var primes_sum14 = 0\n    var primes_sum15 = 0\n    var\
    \ primes_sum16 = 0\n    var primes_sum17 = 0\n    var primes_sum18 = 0\n    var\
    \ primes_sum19 = 0\n    var primes_sum20 = 0\n    var primes_sum21 = 0\n    var\
    \ primes_sum22 = 0\n    var primes_sum23 = 0\n    var primes_sum24 = 0\n    var\
    \ primes_sum25 = 0\n    var primes_sum26 = 0\n    var primes_sum27 = 0\n    var\
    \ primes_sum28 = 0\n    var primes_sum29 = 0\n    var primes_sum30 = 0\n    var\
    \ primes_sum31 = 0\n    var primes_sum32 = 0\n    var primes_sum33 = 0\n    var\
    \ primes_sum34 = 0\n    var primes_sum35 = 0\n    var primes_sum36 = 0\n    var\
    \ primes_sum37 = 0\n    var primes_sum38 = 0\n    var primes_sum39 = 0\n    var\
    \ primes_sum40 = 0\n    var primes_sum41 = 0\n    var primes_sum42 = 0\n    var\
    \ primes_sum43 = 0\n    var primes_sum44 = 0\n    var primes_sum45 = 0\n    var\
    \ primes_sum46 = 0\n    var primes_sum47 = 0\n    var primes_sum48 = 0\n    var\
    \ primes_sum49 = 0\n    var primes_sum50 = 0\n    var primes_sum51 = 0\n    var\
    \ primes_sum52 = 0\n    var primes_sum53 = 0\n    var primes_sum54 = 0\n    var\
    \ primes_sum55 = 0\n    var primes_sum56 = 0\n    var primes_sum57 = 0\n    var\
    \ primes_sum58 = 0\n    var primes_sum59 = 0\n    var primes_sum60 = 0\n    var\
    \ primes_sum61 = 0\n    var primes_sum62 = 0\n    var primes_sum63 = 0\n    var\
    \ primes_sum64 = 0\n    var primes_sum65 = 0\n    var primes_sum66 = 0\n    var\
    \ primes_sum67 = 0\n    var primes_sum68 = 0\n    var primes_sum69 = 0\n    var\
    \ primes_sum70 = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmphawwsyhz.swift:13:9: warning: initialization of variable 'primes'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes = [Int]()\n    ~~~~^~~~~~\n    _\n/tmp/tmphawwsyhz.swift:14:9:\
    \ warning: initialization of variable 'primes_count' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var primes_count = 100\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:15:9: warning: initialization\
    \ of variable 'primes_sum' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var primes_sum = 0\n    ~~~~^~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:16:9:\
    \ warning: initialization of variable 'primes_sum2' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum2 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmphawwsyhz.swift:17:9: warning: initialization of variable 'primes_sum3'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum3 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:18:9:\
    \ warning: initialization of variable 'primes_sum4' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum4 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmphawwsyhz.swift:19:9: warning: initialization of variable 'primes_sum5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum5 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:20:9:\
    \ warning: initialization of variable 'primes_sum6' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum6 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmphawwsyhz.swift:21:9: warning: initialization of variable 'primes_sum7'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum7 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:22:9:\
    \ warning: initialization of variable 'primes_sum8' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum8 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmphawwsyhz.swift:23:9: warnin"
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 100 {\n      \
    \  return false\n    }\n    var primes = [Int]()\n    var primes_count = 0\n \
    \   var primes_sum = 0\n    var primes_sum2 = 0\n    var primes_sum3 = 0\n   \
    \ var primes_sum4 = 0\n    var primes_sum5 = 0\n    var primes_sum6 = 0\n    var\
    \ primes_sum7 = 0\n    var primes_sum8 = 0\n    var primes_sum9 = 0\n    var primes_sum10\
    \ = 0\n    var primes_sum11 = 0\n    var primes_sum12 = 0\n    var primes_sum13\
    \ = 0\n    var primes_sum14 = 0\n    var primes_sum15 = 0\n    var primes_sum16\
    \ = 0\n    var primes_sum17 = 0\n    var primes_sum18 = 0\n    var primes_sum19\
    \ = 0\n    var primes_sum20 = 0\n    var primes_sum21 = 0\n    var primes_sum22\
    \ = 0\n    var primes_sum23 = 0\n    var primes_sum24 = 0\n    var primes_sum25\
    \ = 0\n    var primes_sum26 = 0\n    var primes_sum27 = 0\n    var primes_sum28\
    \ = 0\n    var primes_sum29 = 0\n    var primes_sum30 = 0\n    var primes_sum31\
    \ = 0\n    var primes_sum32 = 0\n    var primes_sum33 = 0\n    var primes_sum34\
    \ = 0\n    var primes_sum35 = 0\n    var primes_sum36 = 0\n    var primes_sum37\
    \ = 0\n    var primes_sum38 = 0\n    var primes_sum39 = 0\n    var primes_sum40\
    \ = 0\n    var primes_sum41 = 0\n    var primes_sum42 = 0\n    var primes_sum43\
    \ = 0\n    var primes_sum44 = 0\n    var primes_sum45 = 0\n    var primes_sum46\
    \ = 0\n    var primes_sum47 = 0\n    var primes_sum48 = 0\n    var primes_sum49\
    \ = 0\n    var primes_sum50 = 0\n    var primes_sum51 = 0\n    var primes_sum52\
    \ = 0\n    var primes_sum53 = 0\n    var primes_sum54 = 0\n    var primes_sum55\
    \ = 0\n    var primes_sum56 = 0\n    var primes_sum57 = 0\n    var primes_sum58\
    \ = 0\n    var primes_sum59 = 0\n    var primes_sum60 = 0\n    var primes_sum61\
    \ = 0\n    var primes_sum62 = 0\n    var primes_sum63 = 0\n    var primes_sum64\
    \ = 0\n    var primes_sum65 = 0\n    var primes_sum66 = 0\n    var primes_sum67\
    \ = 0\n    var primes_sum68 = 0\n    var primes_sum69 = 0\n    var primes_sum70\
    \ = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a: 5)\
    \ == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp8ywzi8bg.swift:13:9: warning: initialization of variable 'primes'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes = [Int]()\n    ~~~~^~~~~~\n    _\n/tmp/tmp8ywzi8bg.swift:14:9:\
    \ warning: initialization of variable 'primes_count' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var primes_count = 0\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmp8ywzi8bg.swift:15:9: warning: initialization\
    \ of variable 'primes_sum' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var primes_sum = 0\n    ~~~~^~~~~~~~~~\n    _\n/tmp/tmp8ywzi8bg.swift:16:9:\
    \ warning: initialization of variable 'primes_sum2' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum2 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmp8ywzi8bg.swift:17:9: warning: initialization of variable 'primes_sum3'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum3 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmp8ywzi8bg.swift:18:9:\
    \ warning: initialization of variable 'primes_sum4' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum4 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmp8ywzi8bg.swift:19:9: warning: initialization of variable 'primes_sum5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum5 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmp8ywzi8bg.swift:20:9:\
    \ warning: initialization of variable 'primes_sum6' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum6 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmp8ywzi8bg.swift:21:9: warning: initialization of variable 'primes_sum7'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum7 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmp8ywzi8bg.swift:22:9:\
    \ warning: initialization of variable 'primes_sum8' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum8 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmp8ywzi8bg.swift:23:9: warning:"
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var primes = [Int]()\n\
    \    var primes_count = 100\n    var primes_sum = 0\n    var primes_sum2 = 0\n\
    \    var primes_sum3 = 0\n    var primes_sum4 = 0\n    var primes_sum5 = 0\n \
    \   var primes_sum6 = 0\n    var primes_sum7 = 0\n    var primes_sum8 = 0\n  \
    \  var primes_sum9 = 0\n    var primes_sum10 = 0\n    var primes_sum11 = 0\n \
    \   var primes_sum12 = 0\n    var primes_sum13 = 0\n    var primes_sum14 = 0\n\
    \    var primes_sum15 = 0\n    var primes_sum16 = 0\n    var primes_sum17 = 0\n\
    \    var primes_sum18 = 0\n    var primes_sum19 = 0\n    var primes_sum20 = 0\n\
    \    var primes_sum21 = 0\n    var primes_sum22 = 0\n    var primes_sum23 = 0\n\
    \    var primes_sum24 = 0\n    var primes_sum25 = 0\n    var primes_sum26 = 0\n\
    \    var primes_sum27 = 0\n    var primes_sum28 = 0\n    var primes_sum29 = 0\n\
    \    var primes_sum30 = 0\n    var primes_sum31 = 0\n    var primes_sum32 = 0\n\
    \    var primes_sum33 = 0\n    var primes_sum34 = 0\n    var primes_sum35 = 0\n\
    \    var primes_sum36 = 0\n    var primes_sum37 = 0\n    var primes_sum38 = 0\n\
    \    var primes_sum39 = 0\n    var primes_sum40 = 0\n    var primes_sum41 = 0\n\
    \    var primes_sum42 = 0\n    var primes_sum43 = 0\n    var primes_sum44 = 0\n\
    \    var primes_sum45 = 0\n    var primes_sum46 = 0\n    var primes_sum47 = 0\n\
    \    var primes_sum48 = 0\n    var primes_sum49 = 0\n    var primes_sum50 = 0\n\
    \    var primes_sum51 = 0\n    var primes_sum52 = 0\n    var primes_sum53 = 0\n\
    \    var primes_sum54 = 0\n    var primes_sum55 = 0\n    var primes_sum56 = 0\n\
    \    var primes_sum57 = 0\n    var primes_sum58 = 0\n    var primes_sum59 = 0\n\
    \    var primes_sum60 = 0\n    var primes_sum61 = 0\n    var primes_sum62 = 0\n\
    \    var primes_sum63 = 0\n    var primes_sum64 = 0\n    var primes_sum65 = 0\n\
    \    var primes_sum66 = 0\n    var primes_sum67 = 0\n    var primes_sum68 = 0\n\
    \    var primes_sum69 = 0\n    var primes_sum70 = 0\n    var primes_sum71 = 0\n\
    \    var primes_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7b6uvaj2.swift:83:9: error: type annotation missing in pattern\n\
    \    var primes_\n        ^\n"
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var isMultiplyPrime =\
    \ true\n    var isMultiplyPrime2 = true\n    var isMultiplyPrime3 = true\n   \
    \ var isMultiplyPrime4 = true\n    var isMultiplyPrime5 = true\n    var isMultiplyPrime6\
    \ = true\n    var isMultiplyPrime7 = true\n    var isMultiplyPrime8 = true\n \
    \   var isMultiplyPrime9 = true\n    var isMultiplyPrime10 = true\n    var isMultiplyPrime11\
    \ = true\n    var isMultiplyPrime12 = true\n    var isMultiplyPrime13 = true\n\
    \    var isMultiplyPrime14 = true\n    var isMultiplyPrime15 = true\n    var isMultiplyPrime16\
    \ = true\n    var isMultiplyPrime17 = true\n    var isMultiplyPrime18 = true\n\
    \    var isMultiplyPrime19 = true\n    var isMultiplyPrime20 = true\n    var isMultiplyPrime21\
    \ = true\n    var isMultiplyPrime22 = true\n    var isMultiplyPrime23 = true\n\
    \    var isMultiplyPrime24 = true\n    var isMultiplyPrime25 = true\n    var isMultiplyPrime26\
    \ = true\n    var isMultiplyPrime27 = true\n    var isMultiplyPrime28 = true\n\
    \    var isMultiplyPrime29 = true\n    var isMultiplyPrime30 = true\n    var isMultiplyPrime31\
    \ = true\n    var isMultiplyPrime32 = true\n    var isMultiplyPrime33 = true\n\
    \    var isMultiplyPrime34 = true\n    var isMultiplyPrime35 = true\n    var isMultiplyPrime36\
    \ = true\n    var isMultiplyPrime37 = true\n    var isMultiplyPrime38 = true\n\
    \    var isMultiplyPrime39 = true\n    var isMultiplyPrime40 = true\n    var isMultiplyPrime41\
    \ = true\n    var isMultiplyPrime42 = true\n    var isMultiplyPrime43 = true\n\
    \    var isMultiplyPrime44 = true\n    var isMultiplyPrime45 = true\n    var isMultiplyPrime46\
    \ = true\n    var isMultiplyPrime47 = true\n    var isMultiplyPrime48 = true\n\
    \    var isMultiplyPrime49 = true\n    var isMultiplyPrime50 = true\n    var isMultiplyPrime51\
    \ = true\n    var isMultiplyPrime52 = true\n    var isMultiplyPrime53 = true\n\
    \    var isMultiplyPrime54 = true\n    var isMultiplyPrime55 = true\n    var isMultiplyPrime56\
    \ = true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpaj_uqgea.swift:10:9: warning: initialization of variable 'isMultiplyPrime'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime = true\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpaj_uqgea.swift:11:9:\
    \ warning: initialization of variable 'isMultiplyPrime2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime2 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpaj_uqgea.swift:12:9: warning:\
    \ initialization of variable 'isMultiplyPrime3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime3 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpaj_uqgea.swift:13:9: warning: initialization\
    \ of variable 'isMultiplyPrime4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime4 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpaj_uqgea.swift:14:9: warning: initialization of variable 'isMultiplyPrime5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime5 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpaj_uqgea.swift:15:9:\
    \ warning: initialization of variable 'isMultiplyPrime6' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime6 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpaj_uqgea.swift:16:9: warning:\
    \ initialization of variable 'isMultiplyPrime7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime7 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpaj_uqgea.swift:17:9: warning: initialization\
    \ of variable 'isMultiplyPrime8' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime8 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpaj_uqgea.swift:18:9: warning: initialization of variable 'isMultiplyPrime9'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime9 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpaj_uqgea.swift:19:9:\
    \ warning: initialization of variable 'isMul"
  stdout: ''
  timestamp: 1659824578
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var isMultiplyPrime =\
    \ true\n    var isMultiplyPrime2 = true\n    var isMultiplyPrime3 = true\n   \
    \ var isMultiplyPrime4 = true\n    var isMultiplyPrime5 = true\n    var isMultiplyPrime6\
    \ = true\n    var isMultiplyPrime7 = true\n    var isMultiplyPrime8 = true\n \
    \   var isMultiplyPrime9 = true\n    var isMultiplyPrime10 = true\n    var isMultiplyPrime11\
    \ = true\n    var isMultiplyPrime12 = true\n    var isMultiplyPrime13 = true\n\
    \    var isMultiplyPrime14 = true\n    var isMultiplyPrime15 = true\n    var isMultiplyPrime16\
    \ = true\n    var isMultiplyPrime17 = true\n    var isMultiplyPrime18 = true\n\
    \    var isMultiplyPrime19 = true\n    var isMultiplyPrime20 = true\n    var isMultiplyPrime21\
    \ = true\n    var isMultiplyPrime22 = true\n    var isMultiplyPrime23 = true\n\
    \    var isMultiplyPrime24 = true\n    var isMultiplyPrime25 = true\n    var isMultiplyPrime26\
    \ = true\n    var isMultiplyPrime27 = true\n    var isMultiplyPrime28 = true\n\
    \    var isMultiplyPrime29 = true\n    var isMultiplyPrime30 = true\n    var isMultiplyPrime31\
    \ = true\n    var isMultiplyPrime32 = true\n    var isMultiplyPrime33 = true\n\
    \    var isMultiplyPrime34 = true\n    var isMultiplyPrime35 = true\n    var isMultiplyPrime36\
    \ = true\n    var isMultiplyPrime37 = true\n    var isMultiplyPrime38 = true\n\
    \    var isMultiplyPrime39 = true\n    var isMultiplyPrime40 = true\n    var isMultiplyPrime41\
    \ = true\n    var isMultiplyPrime42 = true\n    var isMultiplyPrime43 = true\n\
    \    var isMultiplyPrime44 = true\n    var isMultiplyPrime45 = true\n    var isMultiplyPrime46\
    \ = true\n    var isMultiplyPrime47 = true\n    var isMultiplyPrime48 = true\n\
    \    var isMultiplyPrime49 = true\n    var isMultiplyPrime50 = true\n    var isMultiplyPrime51\
    \ = true\n    var isMultiplyPrime52 = true\n    var isMultiplyPrime53 = true\n\
    \    var isMultiplyPrime54 = true\n    var isMultiplyPrime55 = true\n    var isMultiplyPrime56\
    \ = true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpaj_uqgea.swift:10:9: warning: initialization of variable 'isMultiplyPrime'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime = true\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpaj_uqgea.swift:11:9:\
    \ warning: initialization of variable 'isMultiplyPrime2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime2 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpaj_uqgea.swift:12:9: warning:\
    \ initialization of variable 'isMultiplyPrime3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime3 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpaj_uqgea.swift:13:9: warning: initialization\
    \ of variable 'isMultiplyPrime4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime4 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpaj_uqgea.swift:14:9: warning: initialization of variable 'isMultiplyPrime5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime5 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpaj_uqgea.swift:15:9:\
    \ warning: initialization of variable 'isMultiplyPrime6' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime6 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpaj_uqgea.swift:16:9: warning:\
    \ initialization of variable 'isMultiplyPrime7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime7 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpaj_uqgea.swift:17:9: warning: initialization\
    \ of variable 'isMultiplyPrime8' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime8 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpaj_uqgea.swift:18:9: warning: initialization of variable 'isMultiplyPrime9'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime9 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpaj_uqgea.swift:19:9:\
    \ warning: initialization of variable 'isMul"
  stdout: ''
  timestamp: 1659824578
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var primes = [Int]()\n\
    \    var prime_numbers = [Int]()\n    var prime_numbers_count = Int()\n    var\
    \ prime_numbers_count_max = Int()\n    var prime_numbers_count_min = Int()\n \
    \   var prime_numbers_count_max_prime = Int()\n    var prime_numbers_count_min_prime\
    \ = Int()\n    var prime_numbers_count_max_prime_prime = Int()\n    var prime_numbers_count_min_prime_prime\
    \ = Int()\n    var prime_numbers_count_max_prime_prime_prime = Int()\n    var\
    \ prime_numbers_count_min_prime_prime_prime = Int()\n    var prime_numbers_count_max_prime_prime_prime_prime\
    \ = Int()\n    var prime_numbers_count_min_prime_prime_prime_prime = Int()\n \
    \   var prime_numbers_count_max_prime_prime_prime_prime_prime = Int()\n    var\
    \ prime_numbers_count_min_prime_prime_prime_prime_prime = Int()\n    var prime_numbers_count_max_prime_prime_prime_prime_prime_prime\
    \ = Int()\n    var prime_numbers_count_min_prime_prime_prime_prime_prime_prime\
    \ = Int()\n    var prime_numbers_count_max_prime_prime_prime_prime_prime_prime_prime\
    \ = Int()\n    var prime_numbers_count_min_prime_prime_prime_prime_prime_prime_prime\
    \ = Int()\n    var prime_numbers_count_max_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Int()\n    var prime_numbers_count_min_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Int()\n    var prime_numbers_count_max_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Int()\n    var prime_numbers_count_min_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Int()\n    var prime_numbers_count_max_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Int()\n    var prime_numbers_count_min_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Int()\n    var prime_numbers_count_max_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Int()\n    var prime_numbers_count_min_\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpodzam0r9.swift:33:9: error: invalid redeclaration of 'prime_numbers_count_max_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime'\n\
    \    var prime_numbers_count_max_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Int()\n        ^\n/tmp/tmpodzam0r9.swift:31:9: note: 'prime_numbers_count_max_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime'\
    \ previously declared here\n    var prime_numbers_count_max_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Int()\n        ^\n/tmp/tmpodzam0r9.swift:36:9: error: type annotation missing\
    \ in pattern\n    var prime_numbers_count_min_\n        ^\n"
  stdout: ''
  timestamp: 1659824578
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var isMultiplyPrime =\
    \ true\n    var isMultiplyPrime2 = true\n    var isMultiplyPrime3 = true\n   \
    \ var isMultiplyPrime4 = true\n    var isMultiplyPrime5 = true\n    var isMultiplyPrime6\
    \ = true\n    var isMultiplyPrime7 = true\n    var isMultiplyPrime8 = true\n \
    \   var isMultiplyPrime9 = true\n    var isMultiplyPrime10 = true\n    var isMultiplyPrime11\
    \ = true\n    var isMultiplyPrime12 = true\n    var isMultiplyPrime13 = true\n\
    \    var isMultiplyPrime14 = true\n    var isMultiplyPrime15 = true\n    var isMultiplyPrime16\
    \ = true\n    var isMultiplyPrime17 = true\n    var isMultiplyPrime18 = true\n\
    \    var isMultiplyPrime19 = true\n    var isMultiplyPrime20 = true\n    var isMultiplyPrime21\
    \ = true\n    var isMultiplyPrime22 = true\n    var isMultiplyPrime23 = true\n\
    \    var isMultiplyPrime24 = true\n    var isMultiplyPrime25 = true\n    var isMultiplyPrime26\
    \ = true\n    var isMultiplyPrime27 = true\n    var isMultiplyPrime28 = true\n\
    \    var isMultiplyPrime29 = true\n    var isMultiplyPrime30 = true\n    var isMultiplyPrime31\
    \ = true\n    var isMultiplyPrime32 = true\n    var isMultiplyPrime33 = true\n\
    \    var isMultiplyPrime34 = true\n    var isMultiplyPrime35 = true\n    var isMultiplyPrime36\
    \ = true\n    var isMultiplyPrime37 = true\n    var isMultiplyPrime38 = true\n\
    \    var isMultiplyPrime39 = true\n    var isMultiplyPrime40 = true\n    var isMultiplyPrime41\
    \ = true\n    var isMultiplyPrime42 = true\n    var isMultiplyPrime43 = true\n\
    \    var isMultiplyPrime44 = true\n    var isMultiplyPrime45 = true\n    var isMultiplyPrime46\
    \ = true\n    var isMultiplyPrime47 = true\n    var isMultiplyPrime48 = true\n\
    \    var isMultiplyPrime49 = true\n    var isMultiplyPrime50 = true\n    var isMultiplyPrime51\
    \ = true\n    var isMultiplyPrime52 = true\n    var isMultiplyPrime53 = true\n\
    \    var isMultiplyPrime54 = true\n    var isMultiplyPrime55 = true\n    var isMultiplyPrime56\
    \ = true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpaj_uqgea.swift:10:9: warning: initialization of variable 'isMultiplyPrime'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime = true\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpaj_uqgea.swift:11:9:\
    \ warning: initialization of variable 'isMultiplyPrime2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime2 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpaj_uqgea.swift:12:9: warning:\
    \ initialization of variable 'isMultiplyPrime3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime3 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpaj_uqgea.swift:13:9: warning: initialization\
    \ of variable 'isMultiplyPrime4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime4 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpaj_uqgea.swift:14:9: warning: initialization of variable 'isMultiplyPrime5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime5 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpaj_uqgea.swift:15:9:\
    \ warning: initialization of variable 'isMultiplyPrime6' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime6 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpaj_uqgea.swift:16:9: warning:\
    \ initialization of variable 'isMultiplyPrime7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime7 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpaj_uqgea.swift:17:9: warning: initialization\
    \ of variable 'isMultiplyPrime8' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime8 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpaj_uqgea.swift:18:9: warning: initialization of variable 'isMultiplyPrime9'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime9 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpaj_uqgea.swift:19:9:\
    \ warning: initialization of variable 'isMul"
  stdout: ''
  timestamp: 1659824578
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var isMultiplyPrime =\
    \ true\n    var isMultiplyPrime2 = true\n    var isMultiplyPrime3 = true\n   \
    \ var isMultiplyPrime4 = true\n    var isMultiplyPrime5 = true\n    var isMultiplyPrime6\
    \ = true\n    var isMultiplyPrime7 = true\n    var isMultiplyPrime8 = true\n \
    \   var isMultiplyPrime9 = true\n    var isMultiplyPrime10 = true\n    var isMultiplyPrime11\
    \ = true\n    var isMultiplyPrime12 = true\n    var isMultiplyPrime13 = true\n\
    \    var isMultiplyPrime14 = true\n    var isMultiplyPrime15 = true\n    var isMultiplyPrime16\
    \ = true\n    var isMultiplyPrime17 = true\n    var isMultiplyPrime18 = true\n\
    \    var isMultiplyPrime19 = true\n    var isMultiplyPrime20 = true\n    var isMultiplyPrime21\
    \ = true\n    var isMultiplyPrime22 = true\n    var isMultiplyPrime23 = true\n\
    \    var isMultiplyPrime24 = true\n    var isMultiplyPrime25 = true\n    var isMultiplyPrime26\
    \ = true\n    var isMultiplyPrime27 = true\n    var isMultiplyPrime28 = true\n\
    \    var isMultiplyPrime29 = true\n    var isMultiplyPrime30 = true\n    var isMultiplyPrime31\
    \ = true\n    var isMultiplyPrime32 = true\n    var isMultiplyPrime33 = true\n\
    \    var isMultiplyPrime34 = true\n    var isMultiplyPrime35 = true\n    var isMultiplyPrime36\
    \ = true\n    var isMultiplyPrime37 = true\n    var isMultiplyPrime38 = true\n\
    \    var isMultiplyPrime39 = true\n    var isMultiplyPrime40 = true\n    var isMultiplyPrime41\
    \ = true\n    var isMultiplyPrime42 = true\n    var isMultiplyPrime43 = true\n\
    \    var isMultiplyPrime44 = true\n    var isMultiplyPrime45 = true\n    var isMultiplyPrime46\
    \ = true\n    var isMultiplyPrime47 = true\n    var isMultiplyPrime48 = true\n\
    \    var isMultiplyPrime49 = true\n    var isMultiplyPrime50 = true\n    var isMultiplyPrime51\
    \ = true\n    var isMultiplyPrime52 = true\n    var isMultiplyPrime53 = true\n\
    \    var isMultiplyPrime54 = true\n    var isMultiplyPrime55 = true\n    var isMultiplyPrime56\
    \ = true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpaj_uqgea.swift:10:9: warning: initialization of variable 'isMultiplyPrime'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime = true\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpaj_uqgea.swift:11:9:\
    \ warning: initialization of variable 'isMultiplyPrime2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime2 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpaj_uqgea.swift:12:9: warning:\
    \ initialization of variable 'isMultiplyPrime3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime3 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpaj_uqgea.swift:13:9: warning: initialization\
    \ of variable 'isMultiplyPrime4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime4 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpaj_uqgea.swift:14:9: warning: initialization of variable 'isMultiplyPrime5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime5 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpaj_uqgea.swift:15:9:\
    \ warning: initialization of variable 'isMultiplyPrime6' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime6 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpaj_uqgea.swift:16:9: warning:\
    \ initialization of variable 'isMultiplyPrime7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime7 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpaj_uqgea.swift:17:9: warning: initialization\
    \ of variable 'isMultiplyPrime8' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime8 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpaj_uqgea.swift:18:9: warning: initialization of variable 'isMultiplyPrime9'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime9 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpaj_uqgea.swift:19:9:\
    \ warning: initialization of variable 'isMul"
  stdout: ''
  timestamp: 1659824578
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var primes = [Int]()\n\
    \    var primes_count = 100\n    var primes_sum = 0\n    var is_multiply_prime\
    \ = false\n    \n    for _ in 0..<primes_count {\n        primes.append(0)\n \
    \   }\n    \n    for _ in 0..<primes_count {\n        primes[Int(arc4random_uniform(UInt32(primes_sum)))]\
    \ += 1\n    }\n    \n    for _ in 0..<primes_count {\n        primes_sum += primes[Int(arc4random_uniform(UInt32(primes_sum)))]\n\
    \    }\n    \n    for _ in 0..<primes_count {\n        if primes[Int(arc4random_uniform(UInt32(primes_sum)))]\
    \ == 3 {\n            is_multiply_prime = true\n        }\n    }\n    \n    return\
    \ is_multiply_prime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpypcdclta.swift:20:20: error: cannot find 'arc4random_uniform' in\
    \ scope\n        primes[Int(arc4random_uniform(UInt32(primes_sum)))] += 1\n  \
    \                 ^~~~~~~~~~~~~~~~~~\n/tmp/tmpypcdclta.swift:24:34: error: cannot\
    \ find 'arc4random_uniform' in scope\n        primes_sum += primes[Int(arc4random_uniform(UInt32(primes_sum)))]\n\
    \                                 ^~~~~~~~~~~~~~~~~~\n/tmp/tmpypcdclta.swift:28:23:\
    \ error: cannot find 'arc4random_uniform' in scope\n        if primes[Int(arc4random_uniform(UInt32(primes_sum)))]\
    \ == 3 {\n                      ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824578
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a <= 100 {\n     \
    \   return true\n    }\n    \n    var primes = [Int]()\n    \n    for i in 1...Int(ceil(sqrt(a)))\
    \ {\n        if a % i == 0 {\n            primes.append(i)\n        }\n    }\n\
    \    \n    return primes.count >= 3\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpcgnzhl80.swift:16:22: error: cannot find 'ceil' in scope\n    for\
    \ i in 1...Int(ceil(sqrt(a))) {\n                     ^~~~\n/tmp/tmpcgnzhl80.swift:16:27:\
    \ error: cannot find 'sqrt' in scope\n    for i in 1...Int(ceil(sqrt(a))) {\n\
    \                          ^~~~\n"
  stdout: ''
  timestamp: 1659824578
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 100 {\n      \
    \  return false\n    }\n    var primes = [Int]()\n    var primes_count = 100\n\
    \    var primes_sum = 0\n    var primes_sum2 = 0\n    var primes_sum3 = 0\n  \
    \  var primes_sum4 = 0\n    var primes_sum5 = 0\n    var primes_sum6 = 0\n   \
    \ var primes_sum7 = 0\n    var primes_sum8 = 0\n    var primes_sum9 = 0\n    var\
    \ primes_sum10 = 0\n    var primes_sum11 = 0\n    var primes_sum12 = 0\n    var\
    \ primes_sum13 = 0\n    var primes_sum14 = 0\n    var primes_sum15 = 0\n    var\
    \ primes_sum16 = 0\n    var primes_sum17 = 0\n    var primes_sum18 = 0\n    var\
    \ primes_sum19 = 0\n    var primes_sum20 = 0\n    var primes_sum21 = 0\n    var\
    \ primes_sum22 = 0\n    var primes_sum23 = 0\n    var primes_sum24 = 0\n    var\
    \ primes_sum25 = 0\n    var primes_sum26 = 0\n    var primes_sum27 = 0\n    var\
    \ primes_sum28 = 0\n    var primes_sum29 = 0\n    var primes_sum30 = 0\n    var\
    \ primes_sum31 = 0\n    var primes_sum32 = 0\n    var primes_sum33 = 0\n    var\
    \ primes_sum34 = 0\n    var primes_sum35 = 0\n    var primes_sum36 = 0\n    var\
    \ primes_sum37 = 0\n    var primes_sum38 = 0\n    var primes_sum39 = 0\n    var\
    \ primes_sum40 = 0\n    var primes_sum41 = 0\n    var primes_sum42 = 0\n    var\
    \ primes_sum43 = 0\n    var primes_sum44 = 0\n    var primes_sum45 = 0\n    var\
    \ primes_sum46 = 0\n    var primes_sum47 = 0\n    var primes_sum48 = 0\n    var\
    \ primes_sum49 = 0\n    var primes_sum50 = 0\n    var primes_sum51 = 0\n    var\
    \ primes_sum52 = 0\n    var primes_sum53 = 0\n    var primes_sum54 = 0\n    var\
    \ primes_sum55 = 0\n    var primes_sum56 = 0\n    var primes_sum57 = 0\n    var\
    \ primes_sum58 = 0\n    var primes_sum59 = 0\n    var primes_sum60 = 0\n    var\
    \ primes_sum61 = 0\n    var primes_sum62 = 0\n    var primes_sum63 = 0\n    var\
    \ primes_sum64 = 0\n    var primes_sum65 = 0\n    var primes_sum66 = 0\n    var\
    \ primes_sum67 = 0\n    var primes_sum68 = 0\n    var primes_sum69 = 0\n    var\
    \ primes_sum70 = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmphawwsyhz.swift:13:9: warning: initialization of variable 'primes'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes = [Int]()\n    ~~~~^~~~~~\n    _\n/tmp/tmphawwsyhz.swift:14:9:\
    \ warning: initialization of variable 'primes_count' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var primes_count = 100\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:15:9: warning: initialization\
    \ of variable 'primes_sum' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var primes_sum = 0\n    ~~~~^~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:16:9:\
    \ warning: initialization of variable 'primes_sum2' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum2 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmphawwsyhz.swift:17:9: warning: initialization of variable 'primes_sum3'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum3 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:18:9:\
    \ warning: initialization of variable 'primes_sum4' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum4 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmphawwsyhz.swift:19:9: warning: initialization of variable 'primes_sum5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum5 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:20:9:\
    \ warning: initialization of variable 'primes_sum6' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum6 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmphawwsyhz.swift:21:9: warning: initialization of variable 'primes_sum7'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum7 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:22:9:\
    \ warning: initialization of variable 'primes_sum8' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum8 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmphawwsyhz.swift:23:9: warnin"
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 100 {\n      \
    \  return false\n    }\n    var primes = [Int]()\n    var primes_count = 100\n\
    \    var primes_sum = 0\n    var primes_sum2 = 0\n    var primes_sum3 = 0\n  \
    \  var primes_sum4 = 0\n    var primes_sum5 = 0\n    var primes_sum6 = 0\n   \
    \ var primes_sum7 = 0\n    var primes_sum8 = 0\n    var primes_sum9 = 0\n    var\
    \ primes_sum10 = 0\n    var primes_sum11 = 0\n    var primes_sum12 = 0\n    var\
    \ primes_sum13 = 0\n    var primes_sum14 = 0\n    var primes_sum15 = 0\n    var\
    \ primes_sum16 = 0\n    var primes_sum17 = 0\n    var primes_sum18 = 0\n    var\
    \ primes_sum19 = 0\n    var primes_sum20 = 0\n    var primes_sum21 = 0\n    var\
    \ primes_sum22 = 0\n    var primes_sum23 = 0\n    var primes_sum24 = 0\n    var\
    \ primes_sum25 = 0\n    var primes_sum26 = 0\n    var primes_sum27 = 0\n    var\
    \ primes_sum28 = 0\n    var primes_sum29 = 0\n    var primes_sum30 = 0\n    var\
    \ primes_sum31 = 0\n    var primes_sum32 = 0\n    var primes_sum33 = 0\n    var\
    \ primes_sum34 = 0\n    var primes_sum35 = 0\n    var primes_sum36 = 0\n    var\
    \ primes_sum37 = 0\n    var primes_sum38 = 0\n    var primes_sum39 = 0\n    var\
    \ primes_sum40 = 0\n    var primes_sum41 = 0\n    var primes_sum42 = 0\n    var\
    \ primes_sum43 = 0\n    var primes_sum44 = 0\n    var primes_sum45 = 0\n    var\
    \ primes_sum46 = 0\n    var primes_sum47 = 0\n    var primes_sum48 = 0\n    var\
    \ primes_sum49 = 0\n    var primes_sum50 = 0\n    var primes_sum51 = 0\n    var\
    \ primes_sum52 = 0\n    var primes_sum53 = 0\n    var primes_sum54 = 0\n    var\
    \ primes_sum55 = 0\n    var primes_sum56 = 0\n    var primes_sum57 = 0\n    var\
    \ primes_sum58 = 0\n    var primes_sum59 = 0\n    var primes_sum60 = 0\n    var\
    \ primes_sum61 = 0\n    var primes_sum62 = 0\n    var primes_sum63 = 0\n    var\
    \ primes_sum64 = 0\n    var primes_sum65 = 0\n    var primes_sum66 = 0\n    var\
    \ primes_sum67 = 0\n    var primes_sum68 = 0\n    var primes_sum69 = 0\n    var\
    \ primes_sum70 = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmphawwsyhz.swift:13:9: warning: initialization of variable 'primes'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes = [Int]()\n    ~~~~^~~~~~\n    _\n/tmp/tmphawwsyhz.swift:14:9:\
    \ warning: initialization of variable 'primes_count' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var primes_count = 100\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:15:9: warning: initialization\
    \ of variable 'primes_sum' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var primes_sum = 0\n    ~~~~^~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:16:9:\
    \ warning: initialization of variable 'primes_sum2' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum2 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmphawwsyhz.swift:17:9: warning: initialization of variable 'primes_sum3'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum3 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:18:9:\
    \ warning: initialization of variable 'primes_sum4' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum4 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmphawwsyhz.swift:19:9: warning: initialization of variable 'primes_sum5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum5 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:20:9:\
    \ warning: initialization of variable 'primes_sum6' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum6 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmphawwsyhz.swift:21:9: warning: initialization of variable 'primes_sum7'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum7 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:22:9:\
    \ warning: initialization of variable 'primes_sum8' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum8 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmphawwsyhz.swift:23:9: warnin"
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    \n    if a < 100 {\n        for var i = 2; i < a; i++ {\n            if a\
    \ % i == 0 {\n                result = true\n                break\n         \
    \   }\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7n6g5sed.swift:13:9: error: C-style for statement has been removed\
    \ in Swift 3\n        for var i = 2; i < a; i++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = true\n \
    \   var primes = [Int]()\n    \n    for var i = 2; i < a; i++ {\n        if primes.contains(i)\
    \ {\n            continue\n        }\n        \n        for var j = i + i; j <\
    \ a; j += i {\n            if primes.contains(j) {\n                continue\n\
    \            }\n            \n            if j % i == 0 {\n                result\
    \ = false\n                break\n            }\n        }\n        \n       \
    \ if result {\n            break\n        }\n        \n        primes.append(i)\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpvesyss0l.swift:13:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 2; i < a; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpvesyss0l.swift:18:9: error: C-style for statement has been removed in\
    \ Swift 3\n        for var j = i + i; j < a; j += i {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824578
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var primes = [Int]()\n\
    \    var primes_count = 100\n    var is_multiply_prime = false\n    \n    for\
    \ var i = 2; i < primes_count; i++ {\n        if a % i == 0 {\n            primes.append(i)\n\
    \        }\n    }\n    \n    if primes.count < 3 {\n        return false\n   \
    \ }\n    \n    for var i = 0; i < primes.count; i++ {\n        for var j = i +\
    \ 1; j < primes.count; j++ {\n            for var k = j + 1; k < primes.count;\
    \ k++ {\n                if primes[i] * primes[j] * primes[k] == a {\n       \
    \             is_multiply_prime = true\n                    break\n          \
    \      }\n            }\n        }\n    }\n    \n    return is_multiply_prime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpalc2wgl9.swift:14:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 2; i < primes_count; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpalc2wgl9.swift:24:5: error: C-style for statement has been removed in\
    \ Swift 3\n    for var i = 0; i < primes.count; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpalc2wgl9.swift:25:9: error: C-style for statement has been removed in\
    \ Swift 3\n        for var j = i + 1; j < primes.count; j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpalc2wgl9.swift:26:13: error: C-style for statement has been removed in\
    \ Swift 3\n            for var k = j + 1; k < primes.count; k++ {\n          \
    \  ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824578
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var primes = [Int]()\n\
    \    var primes_count = Int()\n    var is_multiply_prime = Bool()\n    \n    for\
    \ i in 1...100 {\n        if a % i == 0 {\n            primes.append(i)\n    \
    \        primes_count = primes_count + 1\n        }\n    }\n    \n    if primes_count\
    \ == 3 {\n        is_multiply_prime = true\n    } else {\n        is_multiply_prime\
    \ = false\n    }\n    \n    return is_multiply_prime\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmppl0lnph5/tmppl0lnph5.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19be1b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19bdea7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19bdea7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19bdea67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppl0lnph5                        0x0000564958f44457 <unavailable> + 5207

    5    libc.so.6                          0x00002b19be39c460 __libc_start_main +
    245

    6    tmppl0lnph5                        0x0000564958f44099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1659824578
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    guard a >= 100 else {\n\
    \        return false\n    }\n    \n    var primes = [Int]()\n    var primes_count\
    \ = 100\n    var primes_sum = 0\n    \n    for _ in 0..<primes_count {\n     \
    \   primes.append(0)\n    }\n    \n    for _ in 0..<primes_count {\n        if\
    \ primes[Int(arc4random_uniform(primes_count))] == 0 {\n            primes[Int(arc4random_uniform(primes_count))]\
    \ = 1\n            primes_sum += Int(arc4random_uniform(primes_count))\n     \
    \   }\n    }\n    \n    for _ in 0..<primes_count {\n        if primes[Int(arc4random_uniform(primes_count))]\
    \ == 1 {\n            for _ in 0..<primes_count {\n                if primes[Int(arc4random_uniform(primes_count))]\
    \ == 1 {\n                    primes[Int(arc4random_uniform(primes_count))] =\
    \ 0\n                    break\n                }\n            }\n        }\n\
    \    }\n    \n    if primes_sum == a {\n        return true\n    } else {\n  \
    \      return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp90xsti4u.swift:23:23: error: cannot find 'arc4random_uniform' in\
    \ scope\n        if primes[Int(arc4random_uniform(primes_count))] == 0 {\n   \
    \                   ^~~~~~~~~~~~~~~~~~\n/tmp/tmp90xsti4u.swift:24:24: error: cannot\
    \ find 'arc4random_uniform' in scope\n            primes[Int(arc4random_uniform(primes_count))]\
    \ = 1\n                       ^~~~~~~~~~~~~~~~~~\n/tmp/tmp90xsti4u.swift:25:31:\
    \ error: cannot find 'arc4random_uniform' in scope\n            primes_sum +=\
    \ Int(arc4random_uniform(primes_count))\n                              ^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp90xsti4u.swift:30:23: error: cannot find 'arc4random_uniform' in scope\n\
    \        if primes[Int(arc4random_uniform(primes_count))] == 1 {\n           \
    \           ^~~~~~~~~~~~~~~~~~\n/tmp/tmp90xsti4u.swift:32:31: error: cannot find\
    \ 'arc4random_uniform' in scope\n                if primes[Int(arc4random_uniform(primes_count))]\
    \ == 1 {\n                              ^~~~~~~~~~~~~~~~~~\n/tmp/tmp90xsti4u.swift:33:32:\
    \ error: cannot find 'arc4random_uniform' in scope\n                    primes[Int(arc4random_uniform(primes_count))]\
    \ = 0\n                               ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824578
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = true\n \
    \   var i = 2\n    while i <= 100 {\n        if a % i == 0 {\n            result\
    \ = false\n            break\n        }\n        i += 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpya1joz8p/tmpya1joz8p.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a4784dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a47544b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1a47544988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1a475437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpya1joz8p                        0x00005622b8a862b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b1a47a39460 __libc_start_main +
    245

    6    tmpya1joz8p                        0x00005622b8a85ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 100 {\n      \
    \  return false\n    }\n    var primes = [Int]()\n    var primes_count = 100\n\
    \    var primes_sum = 0\n    var primes_sum2 = 0\n    var primes_sum3 = 0\n  \
    \  var primes_sum4 = 0\n    var primes_sum5 = 0\n    var primes_sum6 = 0\n   \
    \ var primes_sum7 = 0\n    var primes_sum8 = 0\n    var primes_sum9 = 0\n    var\
    \ primes_sum10 = 0\n    var primes_sum11 = 0\n    var primes_sum12 = 0\n    var\
    \ primes_sum13 = 0\n    var primes_sum14 = 0\n    var primes_sum15 = 0\n    var\
    \ primes_sum16 = 0\n    var primes_sum17 = 0\n    var primes_sum18 = 0\n    var\
    \ primes_sum19 = 0\n    var primes_sum20 = 0\n    var primes_sum21 = 0\n    var\
    \ primes_sum22 = 0\n    var primes_sum23 = 0\n    var primes_sum24 = 0\n    var\
    \ primes_sum25 = 0\n    var primes_sum26 = 0\n    var primes_sum27 = 0\n    var\
    \ primes_sum28 = 0\n    var primes_sum29 = 0\n    var primes_sum30 = 0\n    var\
    \ primes_sum31 = 0\n    var primes_sum32 = 0\n    var primes_sum33 = 0\n    var\
    \ primes_sum34 = 0\n    var primes_sum35 = 0\n    var primes_sum36 = 0\n    var\
    \ primes_sum37 = 0\n    var primes_sum38 = 0\n    var primes_sum39 = 0\n    var\
    \ primes_sum40 = 0\n    var primes_sum41 = 0\n    var primes_sum42 = 0\n    var\
    \ primes_sum43 = 0\n    var primes_sum44 = 0\n    var primes_sum45 = 0\n    var\
    \ primes_sum46 = 0\n    var primes_sum47 = 0\n    var primes_sum48 = 0\n    var\
    \ primes_sum49 = 0\n    var primes_sum50 = 0\n    var primes_sum51 = 0\n    var\
    \ primes_sum52 = 0\n    var primes_sum53 = 0\n    var primes_sum54 = 0\n    var\
    \ primes_sum55 = 0\n    var primes_sum56 = 0\n    var primes_sum57 = 0\n    var\
    \ primes_sum58 = 0\n    var primes_sum59 = 0\n    var primes_sum60 = 0\n    var\
    \ primes_sum61 = 0\n    var primes_sum62 = 0\n    var primes_sum63 = 0\n    var\
    \ primes_sum64 = 0\n    var primes_sum65 = 0\n    var primes_sum66 = 0\n    var\
    \ primes_sum67 = 0\n    var primes_sum68 = 0\n    var primes_sum69 = 0\n    var\
    \ primes_sum70 = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmphawwsyhz.swift:13:9: warning: initialization of variable 'primes'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes = [Int]()\n    ~~~~^~~~~~\n    _\n/tmp/tmphawwsyhz.swift:14:9:\
    \ warning: initialization of variable 'primes_count' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var primes_count = 100\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:15:9: warning: initialization\
    \ of variable 'primes_sum' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var primes_sum = 0\n    ~~~~^~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:16:9:\
    \ warning: initialization of variable 'primes_sum2' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum2 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmphawwsyhz.swift:17:9: warning: initialization of variable 'primes_sum3'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum3 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:18:9:\
    \ warning: initialization of variable 'primes_sum4' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum4 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmphawwsyhz.swift:19:9: warning: initialization of variable 'primes_sum5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum5 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:20:9:\
    \ warning: initialization of variable 'primes_sum6' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum6 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmphawwsyhz.swift:21:9: warning: initialization of variable 'primes_sum7'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum7 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:22:9:\
    \ warning: initialization of variable 'primes_sum8' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum8 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmphawwsyhz.swift:23:9: warnin"
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var primes = [Int]()\n\
    \    var primes_count = 100\n    var primes_sum = 0\n    var primes_sum2 = 0\n\
    \    var primes_sum3 = 0\n    var primes_sum4 = 0\n    var primes_sum5 = 0\n \
    \   var primes_sum6 = 0\n    var primes_sum7 = 0\n    var primes_sum8 = 0\n  \
    \  var primes_sum9 = 0\n    var primes_sum10 = 0\n    var primes_sum11 = 0\n \
    \   var primes_sum12 = 0\n    var primes_sum13 = 0\n    var primes_sum14 = 0\n\
    \    var primes_sum15 = 0\n    var primes_sum16 = 0\n    var primes_sum17 = 0\n\
    \    var primes_sum18 = 0\n    var primes_sum19 = 0\n    var primes_sum20 = 0\n\
    \    var primes_sum21 = 0\n    var primes_sum22 = 0\n    var primes_sum23 = 0\n\
    \    var primes_sum24 = 0\n    var primes_sum25 = 0\n    var primes_sum26 = 0\n\
    \    var primes_sum27 = 0\n    var primes_sum28 = 0\n    var primes_sum29 = 0\n\
    \    var primes_sum30 = 0\n    var primes_sum31 = 0\n    var primes_sum32 = 0\n\
    \    var primes_sum33 = 0\n    var primes_sum34 = 0\n    var primes_sum35 = 0\n\
    \    var primes_sum36 = 0\n    var primes_sum37 = 0\n    var primes_sum38 = 0\n\
    \    var primes_sum39 = 0\n    var primes_sum40 = 0\n    var primes_sum41 = 0\n\
    \    var primes_sum42 = 0\n    var primes_sum43 = 0\n    var primes_sum44 = 0\n\
    \    var primes_sum45 = 0\n    var primes_sum46 = 0\n    var primes_sum47 = 0\n\
    \    var primes_sum48 = 0\n    var primes_sum49 = 0\n    var primes_sum50 = 0\n\
    \    var primes_sum51 = 0\n    var primes_sum52 = 0\n    var primes_sum53 = 0\n\
    \    var primes_sum54 = 0\n    var primes_sum55 = 0\n    var primes_sum56 = 0\n\
    \    var primes_sum57 = 0\n    var primes_sum58 = 0\n    var primes_sum59 = 0\n\
    \    var primes_sum60 = 0\n    var primes_sum61 = 0\n    var primes_sum62 = 0\n\
    \    var primes_sum63 = 0\n    var primes_sum64 = 0\n    var primes_sum65 = 0\n\
    \    var primes_sum66 = 0\n    var primes_sum67 = 0\n    var primes_sum68 = 0\n\
    \    var primes_sum69 = 0\n    var primes_sum70 = 0\n    var primes_sum71 = 0\n\
    \    var primes_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7b6uvaj2.swift:83:9: error: type annotation missing in pattern\n\
    \    var primes_\n        ^\n"
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = true\n \
    \   var primes = [Int]()\n    var prime = 2 // first prime number\n    var prime_found\
    \ = false\n    var prime_found2 = false\n    var prime_found3 = false\n    var\
    \ prime_found4 = false\n    var prime_found5 = false\n    var prime_found6 = false\n\
    \    var prime_found7 = false\n    var prime_found8 = false\n    var prime_found9\
    \ = false\n    var prime_found10 = false\n    var prime_found11 = false\n    var\
    \ prime_found12 = false\n    var prime_found13 = false\n    var prime_found14\
    \ = false\n    var prime_found15 = false\n    var prime_found16 = false\n    var\
    \ prime_found17 = false\n    var prime_found18 = false\n    var prime_found19\
    \ = false\n    var prime_found20 = false\n    var prime_found21 = false\n    var\
    \ prime_found22 = false\n    var prime_found23 = false\n    var prime_found24\
    \ = false\n    var prime_found25 = false\n    var prime_found26 = false\n    var\
    \ prime_found27 = false\n    var prime_found28 = false\n    var prime_found29\
    \ = false\n    var prime_found30 = false\n    var prime_found31 = false\n    var\
    \ prime_found32 = false\n    var prime_found33 = false\n    var prime_found34\
    \ = false\n    var prime_found35 = false\n    var prime_found36 = false\n    var\
    \ prime_found37 = false\n    var prime_found38 = false\n    var prime_found39\
    \ = false\n    var prime_found40 = false\n    var prime_found41 = false\n    var\
    \ prime_found42 = false\n    var prime_found43 = false\n    var prime_found44\
    \ = false\n    var prime_found45 = false\n    var prime_found46 = false\n    var\
    \ prime_found47 = false\n    var prime_found48 = false\n    var prime_found49\
    \ = false\n    var prime_found50 = false\n    var prime_found51 = false\n    var\
    \ prime_found52 = false\n    var prime_found53 = false\n    var prime_found54\
    \ = false\n    var prime_found55 = false\n    var prime_found56 = false\n    var\
    \ prime_found57 = false\n    var prime_found58 = false\n    var prime_found59\
    \ = false\n    var prime_found60 = false\n    var prime_found61 = false\n    var\
    \ prime_found62 = false\n    var prime_found63 = false\n    var prime_found64\
    \ = false\n    var prime_found65 = false\n    var prime_found66 = false\n    var\
    \ prime_found67 = false\n    var prime_found68 = false\n    var prime_found\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpq8528n7u.swift:81:9: error: type annotation missing in pattern\n\
    \    var prime_found\n        ^\n"
  stdout: ''
  timestamp: 1659824578
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 100 {\n      \
    \  return false\n    }\n    \n    var primes = [Int]()\n    var primes_count =\
    \ Int(0)\n    var primes_count_max = Int(0)\n    \n    for n in 2..<Int(sqrt(a))\
    \ {\n        if a % n == 0 {\n            primes.append(n)\n            primes_count\
    \ += 1\n        }\n    }\n    \n    if primes_count == 0 {\n        return false\n\
    \    }\n    \n    for n in 2..<Int(sqrt(a)) {\n        if a % primes[Int(primes_count)]\
    \ == 0 {\n            primes_count_max += 1\n        }\n    }\n    \n    if primes_count_max\
    \ == 3 {\n        return true\n    }\n    \n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpft06id9e.swift:18:22: error: cannot find 'sqrt' in scope\n    for\
    \ n in 2..<Int(sqrt(a)) {\n                     ^~~~\n/tmp/tmpft06id9e.swift:29:22:\
    \ error: cannot find 'sqrt' in scope\n    for n in 2..<Int(sqrt(a)) {\n      \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1659824578
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    \n    var isMultiplyPrime\
    \ = true\n    \n    for number in stride(from: 2, through: a, by: 2) {\n     \
    \   if a % number == 0 {\n            isMultiplyPrime = false\n            break\n\
    \        }\n    }\n    \n    return isMultiplyPrime\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpy1otgw8_/tmpy1otgw8_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6734595c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b673428cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b673428c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b673428b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy1otgw8_                        0x000055d574830473 <unavailable> + 5235

    5    libc.so.6                          0x00002b6734781460 __libc_start_main +
    245

    6    tmpy1otgw8_                        0x000055d574830129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824578
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    \n    if a < 100 {\n\
    \        return false\n    }\n    \n    var primes = [Int]()\n    var primes_count\
    \ = Int(0)\n    \n    for n in 2..<Int(sqrt(a)) {\n        if a % n == 0 {\n \
    \           primes.append(n)\n            primes_count = primes_count + 1\n  \
    \      }\n    }\n    \n    if primes_count == 3 {\n        return true\n    }\n\
    \    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmps21shdkt.swift:18:22: error: cannot find 'sqrt' in scope\n    for\
    \ n in 2..<Int(sqrt(a)) {\n                     ^~~~\n"
  stdout: ''
  timestamp: 1659824578
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var primes = [Int]()\n\
    \    var primes_count = 100\n    var primes_sum = 0\n    var primes_sum2 = 0\n\
    \    var primes_sum3 = 0\n    var primes_sum4 = 0\n    var primes_sum5 = 0\n \
    \   var primes_sum6 = 0\n    var primes_sum7 = 0\n    var primes_sum8 = 0\n  \
    \  var primes_sum9 = 0\n    var primes_sum10 = 0\n    var primes_sum11 = 0\n \
    \   var primes_sum12 = 0\n    var primes_sum13 = 0\n    var primes_sum14 = 0\n\
    \    var primes_sum15 = 0\n    var primes_sum16 = 0\n    var primes_sum17 = 0\n\
    \    var primes_sum18 = 0\n    var primes_sum19 = 0\n    var primes_sum20 = 0\n\
    \    var primes_sum21 = 0\n    var primes_sum22 = 0\n    var primes_sum23 = 0\n\
    \    var primes_sum24 = 0\n    var primes_sum25 = 0\n    var primes_sum26 = 0\n\
    \    var primes_sum27 = 0\n    var primes_sum28 = 0\n    var primes_sum29 = 0\n\
    \    var primes_sum30 = 0\n    var primes_sum31 = 0\n    var primes_sum32 = 0\n\
    \    var primes_sum33 = 0\n    var primes_sum34 = 0\n    var primes_sum35 = 0\n\
    \    var primes_sum36 = 0\n    var primes_sum37 = 0\n    var primes_sum38 = 0\n\
    \    var primes_sum39 = 0\n    var primes_sum40 = 0\n    var primes_sum41 = 0\n\
    \    var primes_sum42 = 0\n    var primes_sum43 = 0\n    var primes_sum44 = 0\n\
    \    var primes_sum45 = 0\n    var primes_sum46 = 0\n    var primes_sum47 = 0\n\
    \    var primes_sum48 = 0\n    var primes_sum49 = 0\n    var primes_sum50 = 0\n\
    \    var primes_sum51 = 0\n    var primes_sum52 = 0\n    var primes_sum53 = 0\n\
    \    var primes_sum54 = 0\n    var primes_sum55 = 0\n    var primes_sum56 = 0\n\
    \    var primes_sum57 = 0\n    var primes_sum58 = 0\n    var primes_sum59 = 0\n\
    \    var primes_sum60 = 0\n    var primes_sum61 = 0\n    var primes_sum62 = 0\n\
    \    var primes_sum63 = 0\n    var primes_sum64 = 0\n    var primes_sum65 = 0\n\
    \    var primes_sum66 = 0\n    var primes_sum67 = 0\n    var primes_sum68 = 0\n\
    \    var primes_sum69 = 0\n    var primes_sum70 = 0\n    var primes_sum71 = 0\n\
    \    var primes_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7b6uvaj2.swift:83:9: error: type annotation missing in pattern\n\
    \    var primes_\n        ^\n"
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 100 {\n      \
    \  return false\n    }\n    var primes = [Int]()\n    var primes_count = 0\n \
    \   var primes_sum = 0\n    var primes_sum2 = 0\n    var primes_sum3 = 0\n   \
    \ var primes_sum4 = 0\n    var primes_sum5 = 0\n    var primes_sum6 = 0\n    var\
    \ primes_sum7 = 0\n    var primes_sum8 = 0\n    var primes_sum9 = 0\n    var primes_sum10\
    \ = 0\n    var primes_sum11 = 0\n    var primes_sum12 = 0\n    var primes_sum13\
    \ = 0\n    var primes_sum14 = 0\n    var primes_sum15 = 0\n    var primes_sum16\
    \ = 0\n    var primes_sum17 = 0\n    var primes_sum18 = 0\n    var primes_sum19\
    \ = 0\n    var primes_sum20 = 0\n    var primes_sum21 = 0\n    var primes_sum22\
    \ = 0\n    var primes_sum23 = 0\n    var primes_sum24 = 0\n    var primes_sum25\
    \ = 0\n    var primes_sum26 = 0\n    var primes_sum27 = 0\n    var primes_sum28\
    \ = 0\n    var primes_sum29 = 0\n    var primes_sum30 = 0\n    var primes_sum31\
    \ = 0\n    var primes_sum32 = 0\n    var primes_sum33 = 0\n    var primes_sum34\
    \ = 0\n    var primes_sum35 = 0\n    var primes_sum36 = 0\n    var primes_sum37\
    \ = 0\n    var primes_sum38 = 0\n    var primes_sum39 = 0\n    var primes_sum40\
    \ = 0\n    var primes_sum41 = 0\n    var primes_sum42 = 0\n    var primes_sum43\
    \ = 0\n    var primes_sum44 = 0\n    var primes_sum45 = 0\n    var primes_sum46\
    \ = 0\n    var primes_sum47 = 0\n    var primes_sum48 = 0\n    var primes_sum49\
    \ = 0\n    var primes_sum50 = 0\n    var primes_sum51 = 0\n    var primes_sum52\
    \ = 0\n    var primes_sum53 = 0\n    var primes_sum54 = 0\n    var primes_sum55\
    \ = 0\n    var primes_sum56 = 0\n    var primes_sum57 = 0\n    var primes_sum58\
    \ = 0\n    var primes_sum59 = 0\n    var primes_sum60 = 0\n    var primes_sum61\
    \ = 0\n    var primes_sum62 = 0\n    var primes_sum63 = 0\n    var primes_sum64\
    \ = 0\n    var primes_sum65 = 0\n    var primes_sum66 = 0\n    var primes_sum67\
    \ = 0\n    var primes_sum68 = 0\n    var primes_sum69 = 0\n    var primes_sum70\
    \ = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a: 5)\
    \ == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp8ywzi8bg.swift:13:9: warning: initialization of variable 'primes'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes = [Int]()\n    ~~~~^~~~~~\n    _\n/tmp/tmp8ywzi8bg.swift:14:9:\
    \ warning: initialization of variable 'primes_count' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var primes_count = 0\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmp8ywzi8bg.swift:15:9: warning: initialization\
    \ of variable 'primes_sum' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var primes_sum = 0\n    ~~~~^~~~~~~~~~\n    _\n/tmp/tmp8ywzi8bg.swift:16:9:\
    \ warning: initialization of variable 'primes_sum2' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum2 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmp8ywzi8bg.swift:17:9: warning: initialization of variable 'primes_sum3'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum3 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmp8ywzi8bg.swift:18:9:\
    \ warning: initialization of variable 'primes_sum4' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum4 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmp8ywzi8bg.swift:19:9: warning: initialization of variable 'primes_sum5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum5 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmp8ywzi8bg.swift:20:9:\
    \ warning: initialization of variable 'primes_sum6' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum6 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmp8ywzi8bg.swift:21:9: warning: initialization of variable 'primes_sum7'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum7 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmp8ywzi8bg.swift:22:9:\
    \ warning: initialization of variable 'primes_sum8' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum8 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmp8ywzi8bg.swift:23:9: warning:"
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 100 {\n      \
    \  return false\n    }\n    var primes = [Int]()\n    var primes_count = Int(0)\n\
    \    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var\
    \ primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max\
    \ = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n\
    \    var primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n    var\
    \ primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min\
    \ = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n\
    \    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var\
    \ primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max\
    \ = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n\
    \    var primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n    var\
    \ primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min\
    \ = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n\
    \    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var\
    \ primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max\
    \ = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n\
    \    var primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n    var\
    \ primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min\
    \ = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n\
    \    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var\
    \ primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max\
    \ = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n\
    \    var primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n    var\
    \ primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min\
    \ = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n\
    \    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var\
    \ primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max\
    \ = Int(0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7785icct.swift:17:9: error: invalid redeclaration of 'primes_count_max'\n\
    \    var primes_count_max = Int(0)\n        ^\n/tmp/tmp7785icct.swift:15:9: note:\
    \ 'primes_count_max' previously declared here\n    var primes_count_max = Int(0)\n\
    \        ^\n/tmp/tmp7785icct.swift:18:9: error: invalid redeclaration of 'primes_count_min'\n\
    \    var primes_count_min = Int(0)\n        ^\n/tmp/tmp7785icct.swift:16:9: note:\
    \ 'primes_count_min' previously declared here\n    var primes_count_min = Int(0)\n\
    \        ^\n/tmp/tmp7785icct.swift:19:9: error: invalid redeclaration of 'primes_count_max'\n\
    \    var primes_count_max = Int(0)\n        ^\n/tmp/tmp7785icct.swift:15:9: note:\
    \ 'primes_count_max' previously declared here\n    var primes_count_max = Int(0)\n\
    \        ^\n/tmp/tmp7785icct.swift:20:9: error: invalid redeclaration of 'primes_count_min'\n\
    \    var primes_count_min = Int(0)\n        ^\n/tmp/tmp7785icct.swift:16:9: note:\
    \ 'primes_count_min' previously declared here\n    var primes_count_min = Int(0)\n\
    \        ^\n/tmp/tmp7785icct.swift:21:9: error: invalid redeclaration of 'primes_count_max'\n\
    \    var primes_count_max = Int(0)\n        ^\n/tmp/tmp7785icct.swift:15:9: note:\
    \ 'primes_count_max' previously declared here\n    var primes_count_max = Int(0)\n\
    \        ^\n/tmp/tmp7785icct.swift:22:9: error: invalid redeclaration of 'primes_count_min'\n\
    \    var primes_count_min = Int(0)\n        ^\n/tmp/tmp7785icct.swift:16:9: note:\
    \ 'primes_count_min' previously declared here\n    var primes_count_min = Int(0)\n\
    \        ^\n/tmp/tmp7785icct.swift:23:9: error: invalid redeclaration of 'primes_count_max'\n\
    \    var primes_count_max = Int(0)\n        ^\n/tmp/tmp7785icct.swift:15:9: note:\
    \ 'primes_count_max' previously declared here\n    var primes_count_max = Int(0)\n\
    \        ^\n/tmp/tmp7785icct.swift:24:9: error: invalid redeclaration of 'primes_count_min'\n\
    \    var primes_count_min = Int(0)\n        ^\n/tmp/tmp7785icct.swift:16:9: note:\
    \ 'primes_count_min' previously declared here\n    var primes_count_min = Int(0)\n\
    \        ^\n/tmp/tmp7785icct.swift:25:9: error: invalid redeclaration of 'primes_cou"
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var isMultiplyPrime =\
    \ true\n    var isMultiplyPrime2 = true\n    var isMultiplyPrime3 = true\n   \
    \ var isMultiplyPrime4 = true\n    var isMultiplyPrime5 = true\n    var isMultiplyPrime6\
    \ = true\n    var isMultiplyPrime7 = true\n    var isMultiplyPrime8 = true\n \
    \   var isMultiplyPrime9 = true\n    var isMultiplyPrime10 = true\n    var isMultiplyPrime11\
    \ = true\n    var isMultiplyPrime12 = true\n    var isMultiplyPrime13 = true\n\
    \    var isMultiplyPrime14 = true\n    var isMultiplyPrime15 = true\n    var isMultiplyPrime16\
    \ = true\n    var isMultiplyPrime17 = true\n    var isMultiplyPrime18 = true\n\
    \    var isMultiplyPrime19 = true\n    var isMultiplyPrime20 = true\n    var isMultiplyPrime21\
    \ = true\n    var isMultiplyPrime22 = true\n    var isMultiplyPrime23 = true\n\
    \    var isMultiplyPrime24 = true\n    var isMultiplyPrime25 = true\n    var isMultiplyPrime26\
    \ = true\n    var isMultiplyPrime27 = true\n    var isMultiplyPrime28 = true\n\
    \    var isMultiplyPrime29 = true\n    var isMultiplyPrime30 = true\n    var isMultiplyPrime31\
    \ = true\n    var isMultiplyPrime32 = true\n    var isMultiplyPrime33 = true\n\
    \    var isMultiplyPrime34 = true\n    var isMultiplyPrime35 = true\n    var isMultiplyPrime36\
    \ = true\n    var isMultiplyPrime37 = true\n    var isMultiplyPrime38 = true\n\
    \    var isMultiplyPrime39 = true\n    var isMultiplyPrime40 = true\n    var isMultiplyPrime41\
    \ = true\n    var isMultiplyPrime42 = true\n    var isMultiplyPrime43 = true\n\
    \    var isMultiplyPrime44 = true\n    var isMultiplyPrime45 = true\n    var isMultiplyPrime46\
    \ = true\n    var isMultiplyPrime47 = true\n    var isMultiplyPrime48 = true\n\
    \    var isMultiplyPrime49 = true\n    var isMultiplyPrime50 = true\n    var isMultiplyPrime51\
    \ = true\n    var isMultiplyPrime52 = true\n    var isMultiplyPrime53 = true\n\
    \    var isMultiplyPrime54 = true\n    var isMultiplyPrime55 = true\n    var isMultiplyPrime56\
    \ = true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpaj_uqgea.swift:10:9: warning: initialization of variable 'isMultiplyPrime'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime = true\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpaj_uqgea.swift:11:9:\
    \ warning: initialization of variable 'isMultiplyPrime2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime2 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpaj_uqgea.swift:12:9: warning:\
    \ initialization of variable 'isMultiplyPrime3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime3 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpaj_uqgea.swift:13:9: warning: initialization\
    \ of variable 'isMultiplyPrime4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime4 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpaj_uqgea.swift:14:9: warning: initialization of variable 'isMultiplyPrime5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime5 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpaj_uqgea.swift:15:9:\
    \ warning: initialization of variable 'isMultiplyPrime6' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime6 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpaj_uqgea.swift:16:9: warning:\
    \ initialization of variable 'isMultiplyPrime7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime7 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpaj_uqgea.swift:17:9: warning: initialization\
    \ of variable 'isMultiplyPrime8' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime8 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpaj_uqgea.swift:18:9: warning: initialization of variable 'isMultiplyPrime9'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime9 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpaj_uqgea.swift:19:9:\
    \ warning: initialization of variable 'isMul"
  stdout: ''
  timestamp: 1659824578
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = true\n \
    \   var primes = [Int]()\n    var primes_count = 100\n    var primes_count_max\
    \ = 100\n    var primes_count_min = 3\n    var primes_count_max = 100\n    var\
    \ primes_count_min = 3\n    var primes_count_max = 100\n    var primes_count_min\
    \ = 3\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_max\
    \ = 100\n    var primes_count_min = 3\n    var primes_count_max = 100\n    var\
    \ primes_count_min = 3\n    var primes_count_max = 100\n    var primes_count_min\
    \ = 3\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_max\
    \ = 100\n    var primes_count_min = 3\n    var primes_count_max = 100\n    var\
    \ primes_count_min = 3\n    var primes_count_max = 100\n    var primes_count_min\
    \ = 3\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_max\
    \ = 100\n    var primes_count_min = 3\n    var primes_count_max = 100\n    var\
    \ primes_count_min = 3\n    var primes_count_max = 100\n    var primes_count_min\
    \ = 3\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_max\
    \ = 100\n    var primes_count_min = 3\n    var primes_count_max = 100\n    var\
    \ primes_count_min = 3\n    var primes_count_max = 100\n    var primes_count_min\
    \ = 3\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_max\
    \ = 100\n    var primes_count_min = 3\n    var primes_count_max = 100\n    var\
    \ primes_count_min = 3\n    var primes_count_max = 100\n    var primes_count_min\
    \ = 3\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_max\
    \ = 100\n    var primes_count_min = 3\n    var primes_count_max = 100\n    var\
    \ primes_count_min = 3\n    var primes_count_max = 100\n    var primes_count_min\
    \ = 3\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_max\
    \ = 100\n    var primes_count_min = 3\n    var primes_count_max = 100\n    var\
    \ primes_count_min = 3\n    var primes_count_max = 100\n    var primes_count_min\
    \ = 3\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_max\
    \ = 100\n    var primes_count_min = 3\n    var primes_count_max = 100\n    var\
    \ primes_count_min = 3\n    var primes_count_max = 100\n    var primes_count_min\
    \ = 3\n    var primes_count_max = \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpj8py0nq7.swift:83:27: error: expected initial value after '='\n\
    \    var primes_count_max = \n                          ^\n/tmp/tmpj8py0nq7.swift:15:9:\
    \ error: invalid redeclaration of 'primes_count_max'\n    var primes_count_max\
    \ = 100\n        ^\n/tmp/tmpj8py0nq7.swift:13:9: note: 'primes_count_max' previously\
    \ declared here\n    var primes_count_max = 100\n        ^\n/tmp/tmpj8py0nq7.swift:16:9:\
    \ error: invalid redeclaration of 'primes_count_min'\n    var primes_count_min\
    \ = 3\n        ^\n/tmp/tmpj8py0nq7.swift:14:9: note: 'primes_count_min' previously\
    \ declared here\n    var primes_count_min = 3\n        ^\n/tmp/tmpj8py0nq7.swift:17:9:\
    \ error: invalid redeclaration of 'primes_count_max'\n    var primes_count_max\
    \ = 100\n        ^\n/tmp/tmpj8py0nq7.swift:13:9: note: 'primes_count_max' previously\
    \ declared here\n    var primes_count_max = 100\n        ^\n/tmp/tmpj8py0nq7.swift:18:9:\
    \ error: invalid redeclaration of 'primes_count_min'\n    var primes_count_min\
    \ = 3\n        ^\n/tmp/tmpj8py0nq7.swift:14:9: note: 'primes_count_min' previously\
    \ declared here\n    var primes_count_min = 3\n        ^\n/tmp/tmpj8py0nq7.swift:19:9:\
    \ error: invalid redeclaration of 'primes_count_max'\n    var primes_count_max\
    \ = 100\n        ^\n/tmp/tmpj8py0nq7.swift:13:9: note: 'primes_count_max' previously\
    \ declared here\n    var primes_count_max = 100\n        ^\n/tmp/tmpj8py0nq7.swift:20:9:\
    \ error: invalid redeclaration of 'primes_count_min'\n    var primes_count_min\
    \ = 3\n        ^\n/tmp/tmpj8py0nq7.swift:14:9: note: 'primes_count_min' previously\
    \ declared here\n    var primes_count_min = 3\n        ^\n/tmp/tmpj8py0nq7.swift:21:9:\
    \ error: invalid redeclaration of 'primes_count_max'\n    var primes_count_max\
    \ = 100\n        ^\n/tmp/tmpj8py0nq7.swift:13:9: note: 'primes_count_max' previously\
    \ declared here\n    var primes_count_max = 100\n        ^\n/tmp/tmpj8py0nq7.swift:22:9:\
    \ error: invalid redeclaration of 'primes_count_min'\n    var primes_count_min\
    \ = 3\n        ^\n/tmp/tmpj8py0nq7.swift:14:9: note: 'primes_count_min' previously\
    \ declared here\n    var primes_count_min = 3\n        ^\n/tmp/tmpj8"
  stdout: ''
  timestamp: 1659824578
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    var primes = [Int]()\n    \n    for n in 2..100 {\n        if n % 2 == 0\
    \ {\n            if a == n {\n                result = true\n                break\n\
    \            }\n        }\n        \n        for p in primes {\n            if\
    \ n % p == 0 {\n                break\n            }\n        }\n        \n  \
    \      if !result {\n            primes.append(n)\n        }\n    }\n    \n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpjmpcnz9l.swift:13:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for n in 2..100 {\n              ^~\n             \
    \ ...\n"
  stdout: ''
  timestamp: 1659824578
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var primes = [Int]()\n\
    \    var prime: Int\n    var result: Int\n    \n    for prime in 2...100 {\n \
    \       if a % prime == 0 {\n            primes.append(prime)\n        }\n   \
    \ }\n    \n    for prime in primes {\n        result = a * prime\n        if result\
    \ < 100 {\n            return true\n        }\n    }\n    \n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmp4uxb_kq1/tmp4uxb_kq1.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b355c32ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b355c025b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b355c025988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b355c0247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4uxb_kq1                        0x0000559d28a9c5a3 <unavailable> + 5539

    5    libc.so.6                          0x00002b355c51a460 __libc_start_main +
    245

    6    tmp4uxb_kq1                        0x0000559d28a9c259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824578
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 100 {\n      \
    \  return false\n    }\n    \n    var primes = [Int]()\n    \n    var prime: Int\n\
    \    var count: Int\n    \n    for prime in 2...100 {\n        count = 0\n   \
    \     for _ in 2...prime {\n            if prime % _ == 0 {\n                count\
    \ += 1\n            }\n        }\n        if count == 3 {\n            primes.append(prime)\n\
    \        }\n    }\n    \n    return primes.contains(a)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpunx446vf.swift:22:24: error: '_' can only appear in a pattern or\
    \ on the left side of an assignment\n            if prime % _ == 0 {\n       \
    \                ^\n"
  stdout: ''
  timestamp: 1659824578
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 100 {\n      \
    \  return false\n    }\n    var primes = [Int]()\n    var prime: Int\n    var\
    \ i: Int\n    for i = 2; i < a; i++ {\n        prime = i\n        for j = i; j\
    \ < a; j++ {\n            if i % j == 0 {\n                prime = false\n   \
    \             break\n            }\n        }\n        if prime {\n          \
    \  primes.append(i)\n        }\n    }\n    return primes.count >= 3\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmphig0di85.swift:16:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 2; i < a; i++ {\n    ^   ~~~~~~~~~~~~~~~~~\n/tmp/tmphig0di85.swift:18:9:\
    \ error: C-style for statement has been removed in Swift 3\n        for j = i;\
    \ j < a; j++ {\n        ^   ~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824578
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = true\n \
    \   var primes = [Int]()\n    var prime: Int\n    var i: Int\n    for i = 2; i\
    \ <= a / 2; i += 1 {\n        prime = i\n        while prime > 1 {\n         \
    \   if a % prime == 0 {\n                result = false\n                break\n\
    \            }\n            prime = primes.last! + 1\n        }\n        primes.append(prime)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpfm1nplvc.swift:14:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 2; i <= a / 2; i += 1 {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824578
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a <= 100 {\n     \
    \   return true\n    }\n    \n    var isMultiplyPrime = true\n    \n    for number\
    \ in stride(from: 2, through: a, by: 2) {\n        if a % number == 0 {\n    \
    \        isMultiplyPrime = false\n            break\n        }\n    }\n    \n\
    \    return isMultiplyPrime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmpvis35s8e/tmpvis35s8e.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae27833ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae278035b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae278035988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae2780347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvis35s8e                        0x000055a65a6a8473 <unavailable> + 5235

    5    libc.so.6                          0x00002ae27852a460 __libc_start_main +
    245

    6    tmpvis35s8e                        0x000055a65a6a8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824578
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var primes = [Int]()\n\
    \    var primes_count = 100\n    var primes_sum = 0\n    var primes_sum2 = 0\n\
    \    var primes_sum3 = 0\n    var primes_sum4 = 0\n    var primes_sum5 = 0\n \
    \   var primes_sum6 = 0\n    var primes_sum7 = 0\n    var primes_sum8 = 0\n  \
    \  var primes_sum9 = 0\n    var primes_sum10 = 0\n    var primes_sum11 = 0\n \
    \   var primes_sum12 = 0\n    var primes_sum13 = 0\n    var primes_sum14 = 0\n\
    \    var primes_sum15 = 0\n    var primes_sum16 = 0\n    var primes_sum17 = 0\n\
    \    var primes_sum18 = 0\n    var primes_sum19 = 0\n    var primes_sum20 = 0\n\
    \    var primes_sum21 = 0\n    var primes_sum22 = 0\n    var primes_sum23 = 0\n\
    \    var primes_sum24 = 0\n    var primes_sum25 = 0\n    var primes_sum26 = 0\n\
    \    var primes_sum27 = 0\n    var primes_sum28 = 0\n    var primes_sum29 = 0\n\
    \    var primes_sum30 = 0\n    var primes_sum31 = 0\n    var primes_sum32 = 0\n\
    \    var primes_sum33 = 0\n    var primes_sum34 = 0\n    var primes_sum35 = 0\n\
    \    var primes_sum36 = 0\n    var primes_sum37 = 0\n    var primes_sum38 = 0\n\
    \    var primes_sum39 = 0\n    var primes_sum40 = 0\n    var primes_sum41 = 0\n\
    \    var primes_sum42 = 0\n    var primes_sum43 = 0\n    var primes_sum44 = 0\n\
    \    var primes_sum45 = 0\n    var primes_sum46 = 0\n    var primes_sum47 = 0\n\
    \    var primes_sum48 = 0\n    var primes_sum49 = 0\n    var primes_sum50 = 0\n\
    \    var primes_sum51 = 0\n    var primes_sum52 = 0\n    var primes_sum53 = 0\n\
    \    var primes_sum54 = 0\n    var primes_sum55 = 0\n    var primes_sum56 = 0\n\
    \    var primes_sum57 = 0\n    var primes_sum58 = 0\n    var primes_sum59 = 0\n\
    \    var primes_sum60 = 0\n    var primes_sum61 = 0\n    var primes_sum62 = 0\n\
    \    var primes_sum63 = 0\n    var primes_sum64 = 0\n    var primes_sum65 = 0\n\
    \    var primes_sum66 = 0\n    var primes_sum67 = 0\n    var primes_sum68 = 0\n\
    \    var primes_sum69 = 0\n    var primes_sum70 = 0\n    var primes_sum71 = 0\n\
    \    var primes_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7b6uvaj2.swift:83:9: error: type annotation missing in pattern\n\
    \    var primes_\n        ^\n"
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var primes = [Int]()\n\
    \    var isMultiplyPrime = true\n    var isPrime = true\n    var isPrime2 = true\n\
    \    var isPrime3 = true\n    var isPrime4 = true\n    var isPrime5 = true\n \
    \   var isPrime6 = true\n    var isPrime7 = true\n    var isPrime8 = true\n  \
    \  var isPrime9 = true\n    var isPrime10 = true\n    var isPrime11 = true\n \
    \   var isPrime12 = true\n    var isPrime13 = true\n    var isPrime14 = true\n\
    \    var isPrime15 = true\n    var isPrime16 = true\n    var isPrime17 = true\n\
    \    var isPrime18 = true\n    var isPrime19 = true\n    var isPrime20 = true\n\
    \    var isPrime21 = true\n    var isPrime22 = true\n    var isPrime23 = true\n\
    \    var isPrime24 = true\n    var isPrime25 = true\n    var isPrime26 = true\n\
    \    var isPrime27 = true\n    var isPrime28 = true\n    var isPrime29 = true\n\
    \    var isPrime30 = true\n    var isPrime31 = true\n    var isPrime32 = true\n\
    \    var isPrime33 = true\n    var isPrime34 = true\n    var isPrime35 = true\n\
    \    var isPrime36 = true\n    var isPrime37 = true\n    var isPrime38 = true\n\
    \    var isPrime39 = true\n    var isPrime40 = true\n    var isPrime41 = true\n\
    \    var isPrime42 = true\n    var isPrime43 = true\n    var isPrime44 = true\n\
    \    var isPrime45 = true\n    var isPrime46 = true\n    var isPrime47 = true\n\
    \    var isPrime48 = true\n    var isPrime49 = true\n    var isPrime50 = true\n\
    \    var isPrime51 = true\n    var isPrime52 = true\n    var isPrime53 = true\n\
    \    var isPrime54 = true\n    var isPrime55 = true\n    var isPrime56 = true\n\
    \    var isPrime57 = true\n    var isPrime58 = true\n    var isPrime59 = true\n\
    \    var isPrime60 = true\n    var isPrime61 = true\n    var isPrime62 = true\n\
    \    var isPrime63 = true\n    var isPrime64 = true\n    var isPrime65 = true\n\
    \    var isPrime66 = true\n    var isPrime67 = true\n    var isPrime68 = true\n\
    \    var isPrime69 = true\n    var is\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpjf927jvf.swift:81:9: error: expected pattern\n    var is\n    \
    \    ^\n/tmp/tmpjf927jvf.swift:10:9: warning: initialization of variable 'primes'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes = [Int]()\n    ~~~~^~~~~~\n    _\n/tmp/tmpjf927jvf.swift:11:9:\
    \ warning: initialization of variable 'isMultiplyPrime' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime = true\n\
    \    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpjf927jvf.swift:12:9: warning: initialization\
    \ of variable 'isPrime' was never used; consider replacing with assignment to\
    \ '_' or removing it\n    var isPrime = true\n    ~~~~^~~~~~~\n    _\n/tmp/tmpjf927jvf.swift:13:9:\
    \ warning: initialization of variable 'isPrime2' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime2 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmpjf927jvf.swift:14:9: warning: initialization of variable 'isPrime3'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime3 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpjf927jvf.swift:15:9:\
    \ warning: initialization of variable 'isPrime4' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime4 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmpjf927jvf.swift:16:9: warning: initialization of variable 'isPrime5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime5 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpjf927jvf.swift:17:9:\
    \ warning: initialization of variable 'isPrime6' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime6 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmpjf927jvf.swift:18:9: warning: initialization of variable 'isPrime7'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime7 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpjf927jvf.swift:19:9:\
    \ warning: initialization of variable 'isPrime8' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime8 = true\n    ~~~~^~~~~~~~\n\
    \    _"
  stdout: ''
  timestamp: 1659824578
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 100 {\n      \
    \  return false\n    }\n    \n    var primes = [Int]()\n    \n    for number in\
    \ 2...a / 2 {\n        if number % 2 == 0 {\n            continue\n        }\n\
    \        \n        for prime in 2...number / 2 {\n            if number % prime\
    \ == 0 {\n                break\n            }\n            \n            if prime\
    \ > number / 2 {\n                primes.append(prime)\n            }\n      \
    \  }\n    }\n    \n    return primes.contains(3) && primes.contains(5)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpyl7_ljeu/tmpyl7_ljeu.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adb06531c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adb06228b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adb06228988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adb062277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyl7_ljeu                        0x0000565449c70517 <unavailable> + 5399

    5    libc.so.6                          0x00002adb0671d460 __libc_start_main +
    245

    6    tmpyl7_ljeu                        0x0000565449c70159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1659824578
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = true\n \
    \   var primes = [Int]()\n    var primes_count = 100\n    var primes_sum = 0\n\
    \    var primes_sum2 = 0\n    var primes_sum3 = 0\n    var primes_sum4 = 0\n \
    \   var primes_sum5 = 0\n    var primes_sum6 = 0\n    var primes_sum7 = 0\n  \
    \  var primes_sum8 = 0\n    var primes_sum9 = 0\n    var primes_sum10 = 0\n  \
    \  var primes_sum11 = 0\n    var primes_sum12 = 0\n    var primes_sum13 = 0\n\
    \    var primes_sum14 = 0\n    var primes_sum15 = 0\n    var primes_sum16 = 0\n\
    \    var primes_sum17 = 0\n    var primes_sum18 = 0\n    var primes_sum19 = 0\n\
    \    var primes_sum20 = 0\n    var primes_sum21 = 0\n    var primes_sum22 = 0\n\
    \    var primes_sum23 = 0\n    var primes_sum24 = 0\n    var primes_sum25 = 0\n\
    \    var primes_sum26 = 0\n    var primes_sum27 = 0\n    var primes_sum28 = 0\n\
    \    var primes_sum29 = 0\n    var primes_sum30 = 0\n    var primes_sum31 = 0\n\
    \    var primes_sum32 = 0\n    var primes_sum33 = 0\n    var primes_sum34 = 0\n\
    \    var primes_sum35 = 0\n    var primes_sum36 = 0\n    var primes_sum37 = 0\n\
    \    var primes_sum38 = 0\n    var primes_sum39 = 0\n    var primes_sum40 = 0\n\
    \    var primes_sum41 = 0\n    var primes_sum42 = 0\n    var primes_sum43 = 0\n\
    \    var primes_sum44 = 0\n    var primes_sum45 = 0\n    var primes_sum46 = 0\n\
    \    var primes_sum47 = 0\n    var primes_sum48 = 0\n    var primes_sum49 = 0\n\
    \    var primes_sum50 = 0\n    var primes_sum51 = 0\n    var primes_sum52 = 0\n\
    \    var primes_sum53 = 0\n    var primes_sum54 = 0\n    var primes_sum55 = 0\n\
    \    var primes_sum56 = 0\n    var primes_sum57 = 0\n    var primes_sum58 = 0\n\
    \    var primes_sum59 = 0\n    var primes_sum60 = 0\n    var primes_sum61 = 0\n\
    \    var primes_sum62 = 0\n    var primes_sum63 = 0\n    var primes_sum64 = 0\n\
    \    var primes_sum65 = 0\n    var primes_sum66 = 0\n    var primes_sum67 = 0\n\
    \    var primes_sum68 = 0\n    var primes_sum69 = 0\n    var primes_sum70 = 0\n\
    \    var primes_sum71 = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp2ne11d5h.swift:10:9: warning: initialization of variable 'result'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var result = true\n    ~~~~^~~~~~\n    _\n/tmp/tmp2ne11d5h.swift:11:9: warning:\
    \ initialization of variable 'primes' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var primes = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n/tmp/tmp2ne11d5h.swift:12:9: warning: initialization of variable 'primes_count'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_count = 100\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmp2ne11d5h.swift:13:9:\
    \ warning: initialization of variable 'primes_sum' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum = 0\n    ~~~~^~~~~~~~~~\n\
    \    _\n/tmp/tmp2ne11d5h.swift:14:9: warning: initialization of variable 'primes_sum2'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum2 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmp2ne11d5h.swift:15:9:\
    \ warning: initialization of variable 'primes_sum3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum3 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmp2ne11d5h.swift:16:9: warning: initialization of variable 'primes_sum4'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum4 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmp2ne11d5h.swift:17:9:\
    \ warning: initialization of variable 'primes_sum5' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum5 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmp2ne11d5h.swift:18:9: warning: initialization of variable 'primes_sum6'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum6 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmp2ne11d5h.swift:19:9:\
    \ warning: initialization of variable 'primes_sum7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum7 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmp2ne11d5h.swift:20:9: warning: initializ"
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 100 {\n      \
    \  return false\n    }\n    var primes = [Int]()\n    var primes_count = Int(0)\n\
    \    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var\
    \ primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max\
    \ = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n\
    \    var primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n    var\
    \ primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min\
    \ = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n\
    \    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var\
    \ primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max\
    \ = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n\
    \    var primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n    var\
    \ primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min\
    \ = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n\
    \    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var\
    \ primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max\
    \ = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n\
    \    var primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n    var\
    \ primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min\
    \ = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n\
    \    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var\
    \ primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max\
    \ = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n\
    \    var primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n    var\
    \ primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min\
    \ = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n\
    \    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var\
    \ primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max\
    \ = Int(0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7785icct.swift:17:9: error: invalid redeclaration of 'primes_count_max'\n\
    \    var primes_count_max = Int(0)\n        ^\n/tmp/tmp7785icct.swift:15:9: note:\
    \ 'primes_count_max' previously declared here\n    var primes_count_max = Int(0)\n\
    \        ^\n/tmp/tmp7785icct.swift:18:9: error: invalid redeclaration of 'primes_count_min'\n\
    \    var primes_count_min = Int(0)\n        ^\n/tmp/tmp7785icct.swift:16:9: note:\
    \ 'primes_count_min' previously declared here\n    var primes_count_min = Int(0)\n\
    \        ^\n/tmp/tmp7785icct.swift:19:9: error: invalid redeclaration of 'primes_count_max'\n\
    \    var primes_count_max = Int(0)\n        ^\n/tmp/tmp7785icct.swift:15:9: note:\
    \ 'primes_count_max' previously declared here\n    var primes_count_max = Int(0)\n\
    \        ^\n/tmp/tmp7785icct.swift:20:9: error: invalid redeclaration of 'primes_count_min'\n\
    \    var primes_count_min = Int(0)\n        ^\n/tmp/tmp7785icct.swift:16:9: note:\
    \ 'primes_count_min' previously declared here\n    var primes_count_min = Int(0)\n\
    \        ^\n/tmp/tmp7785icct.swift:21:9: error: invalid redeclaration of 'primes_count_max'\n\
    \    var primes_count_max = Int(0)\n        ^\n/tmp/tmp7785icct.swift:15:9: note:\
    \ 'primes_count_max' previously declared here\n    var primes_count_max = Int(0)\n\
    \        ^\n/tmp/tmp7785icct.swift:22:9: error: invalid redeclaration of 'primes_count_min'\n\
    \    var primes_count_min = Int(0)\n        ^\n/tmp/tmp7785icct.swift:16:9: note:\
    \ 'primes_count_min' previously declared here\n    var primes_count_min = Int(0)\n\
    \        ^\n/tmp/tmp7785icct.swift:23:9: error: invalid redeclaration of 'primes_count_max'\n\
    \    var primes_count_max = Int(0)\n        ^\n/tmp/tmp7785icct.swift:15:9: note:\
    \ 'primes_count_max' previously declared here\n    var primes_count_max = Int(0)\n\
    \        ^\n/tmp/tmp7785icct.swift:24:9: error: invalid redeclaration of 'primes_count_min'\n\
    \    var primes_count_min = Int(0)\n        ^\n/tmp/tmp7785icct.swift:16:9: note:\
    \ 'primes_count_min' previously declared here\n    var primes_count_min = Int(0)\n\
    \        ^\n/tmp/tmp7785icct.swift:25:9: error: invalid redeclaration of 'primes_cou"
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 100 {\n      \
    \  return false\n    }\n    var primes = [Int]()\n    var primes_count = 100\n\
    \    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_max\
    \ = 100\n    var primes_count_min = 3\n    var primes_count_max = 100\n    var\
    \ primes_count_min = 3\n    var primes_count_max = 100\n    var primes_count_min\
    \ = 3\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_max\
    \ = 100\n    var primes_count_min = 3\n    var primes_count_max = 100\n    var\
    \ primes_count_min = 3\n    var primes_count_max = 100\n    var primes_count_min\
    \ = 3\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_max\
    \ = 100\n    var primes_count_min = 3\n    var primes_count_max = 100\n    var\
    \ primes_count_min = 3\n    var primes_count_max = 100\n    var primes_count_min\
    \ = 3\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_max\
    \ = 100\n    var primes_count_min = 3\n    var primes_count_max = 100\n    var\
    \ primes_count_min = 3\n    var primes_count_max = 100\n    var primes_count_min\
    \ = 3\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_max\
    \ = 100\n    var primes_count_min = 3\n    var primes_count_max = 100\n    var\
    \ primes_count_min = 3\n    var primes_count_max = 100\n    var primes_count_min\
    \ = 3\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_max\
    \ = 100\n    var primes_count_min = 3\n    var primes_count_max = 100\n    var\
    \ primes_count_min = 3\n    var primes_count_max = 100\n    var primes_count_min\
    \ = 3\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_max\
    \ = 100\n    var primes_count_min = 3\n    var primes_count_max = 100\n    var\
    \ primes_count_min = 3\n    var primes_count_max = 100\n    var primes_count_min\
    \ = 3\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_max\
    \ = 100\n    var primes_count_min = 3\n    var primes_count_max = 100\n    var\
    \ primes_count_min = 3\n    var primes_count_max = 100\n    var primes_count_min\
    \ = 3\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_max\
    \ = 100\n    var primes_count_min = 3\n    var primes_count_max = 100\n    var\
    \ primes_count_min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpy496yn7l.swift:17:9: error: invalid redeclaration of 'primes_count_max'\n\
    \    var primes_count_max = 100\n        ^\n/tmp/tmpy496yn7l.swift:15:9: note:\
    \ 'primes_count_max' previously declared here\n    var primes_count_max = 100\n\
    \        ^\n/tmp/tmpy496yn7l.swift:18:9: error: invalid redeclaration of 'primes_count_min'\n\
    \    var primes_count_min = 3\n        ^\n/tmp/tmpy496yn7l.swift:16:9: note: 'primes_count_min'\
    \ previously declared here\n    var primes_count_min = 3\n        ^\n/tmp/tmpy496yn7l.swift:19:9:\
    \ error: invalid redeclaration of 'primes_count_max'\n    var primes_count_max\
    \ = 100\n        ^\n/tmp/tmpy496yn7l.swift:15:9: note: 'primes_count_max' previously\
    \ declared here\n    var primes_count_max = 100\n        ^\n/tmp/tmpy496yn7l.swift:20:9:\
    \ error: invalid redeclaration of 'primes_count_min'\n    var primes_count_min\
    \ = 3\n        ^\n/tmp/tmpy496yn7l.swift:16:9: note: 'primes_count_min' previously\
    \ declared here\n    var primes_count_min = 3\n        ^\n/tmp/tmpy496yn7l.swift:21:9:\
    \ error: invalid redeclaration of 'primes_count_max'\n    var primes_count_max\
    \ = 100\n        ^\n/tmp/tmpy496yn7l.swift:15:9: note: 'primes_count_max' previously\
    \ declared here\n    var primes_count_max = 100\n        ^\n/tmp/tmpy496yn7l.swift:22:9:\
    \ error: invalid redeclaration of 'primes_count_min'\n    var primes_count_min\
    \ = 3\n        ^\n/tmp/tmpy496yn7l.swift:16:9: note: 'primes_count_min' previously\
    \ declared here\n    var primes_count_min = 3\n        ^\n/tmp/tmpy496yn7l.swift:23:9:\
    \ error: invalid redeclaration of 'primes_count_max'\n    var primes_count_max\
    \ = 100\n        ^\n/tmp/tmpy496yn7l.swift:15:9: note: 'primes_count_max' previously\
    \ declared here\n    var primes_count_max = 100\n        ^\n/tmp/tmpy496yn7l.swift:24:9:\
    \ error: invalid redeclaration of 'primes_count_min'\n    var primes_count_min\
    \ = 3\n        ^\n/tmp/tmpy496yn7l.swift:16:9: note: 'primes_count_min' previously\
    \ declared here\n    var primes_count_min = 3\n        ^\n/tmp/tmpy496yn7l.swift:25:9:\
    \ error: invalid redeclaration of 'primes_count_max'\n    var primes_count_max\
    \ = 100\n        ^\n/tmp/tmpy496yn7"
  stdout: ''
  timestamp: 1659824578
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 100 {\n      \
    \  return false\n    }\n    var primes = [Int]()\n    var primes_count = Int()\n\
    \    var is_multiply = true\n    var is_multiply_prime = true\n    var is_multiply_prime_2\
    \ = true\n    var is_multiply_prime_3 = true\n    var is_multiply_prime_5 = true\n\
    \    var is_multiply_prime_7 = true\n    var is_multiply_prime_9 = true\n    var\
    \ is_multiply_prime_11 = true\n    var is_multiply_prime_13 = true\n    var is_multiply_prime_17\
    \ = true\n    var is_multiply_prime_19 = true\n    var is_multiply_prime_23 =\
    \ true\n    var is_multiply_prime_29 = true\n    var is_multiply_prime_31 = true\n\
    \    var is_multiply_prime_37 = true\n    var is_multiply_prime_41 = true\n  \
    \  var is_multiply_prime_43 = true\n    var is_multiply_prime_47 = true\n    var\
    \ is_multiply_prime_53 = true\n    var is_multiply_prime_59 = true\n    var is_multiply_prime_61\
    \ = true\n    var is_multiply_prime_67 = true\n    var is_multiply_prime_71 =\
    \ true\n    var is_multiply_prime_73 = true\n    var is_multiply_prime_79 = true\n\
    \    var is_multiply_prime_83 = true\n    var is_multiply_prime_89 = true\n  \
    \  var is_multiply_prime_93 = true\n    var is_multiply_prime_97 = true\n    var\
    \ is_multiply_prime_101 = true\n    var is_multiply_prime_103 = true\n    var\
    \ is_multiply_prime_107 = true\n    var is_multiply_prime_109 = true\n    var\
    \ is_multiply_prime_113 = true\n    var is_multiply_prime_115 = true\n    var\
    \ is_multiply_prime_117 = true\n    var is_multiply_prime_121 = true\n    var\
    \ is_multiply_prime_123 = true\n    var is_multiply_prime_125 = true\n    var\
    \ is_multiply_prime_127 = true\n    var is_multiply_prime_129 = true\n    var\
    \ is_multiply_prime_131 = true\n    var is_multiply_prime_133 = true\n    var\
    \ is_multiply_prime_135 = true\n    var is_multiply_prime_137 = true\n    var\
    \ is_multiply_prime_139 = true\n    var is_multiply_prime_141 = true\n    var\
    \ is_multiply_prime_143 = true\n    var is_multiply_prime_145 = true\n    var\
    \ is_multiply_prime_147 = true\n    var is_multiply_prime_149 = true\n    var\
    \ is_multiply_prime_151 = true\n    var is_\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7o_sa6in.swift:67:9: error: type annotation missing in pattern\n\
    \    var is_\n        ^\n"
  stdout: ''
  timestamp: 1659824578
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 100 {\n      \
    \  return false\n    }\n    var primes = [Int]()\n    var primes_count = Int(0)\n\
    \    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var\
    \ primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max\
    \ = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n\
    \    var primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n    var\
    \ primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min\
    \ = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n\
    \    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var\
    \ primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max\
    \ = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n\
    \    var primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n    var\
    \ primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min\
    \ = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n\
    \    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var\
    \ primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max\
    \ = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n\
    \    var primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n    var\
    \ primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min\
    \ = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n\
    \    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var\
    \ primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max\
    \ = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n\
    \    var primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n    var\
    \ primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min\
    \ = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n\
    \    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var\
    \ primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max\
    \ = Int(0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7785icct.swift:17:9: error: invalid redeclaration of 'primes_count_max'\n\
    \    var primes_count_max = Int(0)\n        ^\n/tmp/tmp7785icct.swift:15:9: note:\
    \ 'primes_count_max' previously declared here\n    var primes_count_max = Int(0)\n\
    \        ^\n/tmp/tmp7785icct.swift:18:9: error: invalid redeclaration of 'primes_count_min'\n\
    \    var primes_count_min = Int(0)\n        ^\n/tmp/tmp7785icct.swift:16:9: note:\
    \ 'primes_count_min' previously declared here\n    var primes_count_min = Int(0)\n\
    \        ^\n/tmp/tmp7785icct.swift:19:9: error: invalid redeclaration of 'primes_count_max'\n\
    \    var primes_count_max = Int(0)\n        ^\n/tmp/tmp7785icct.swift:15:9: note:\
    \ 'primes_count_max' previously declared here\n    var primes_count_max = Int(0)\n\
    \        ^\n/tmp/tmp7785icct.swift:20:9: error: invalid redeclaration of 'primes_count_min'\n\
    \    var primes_count_min = Int(0)\n        ^\n/tmp/tmp7785icct.swift:16:9: note:\
    \ 'primes_count_min' previously declared here\n    var primes_count_min = Int(0)\n\
    \        ^\n/tmp/tmp7785icct.swift:21:9: error: invalid redeclaration of 'primes_count_max'\n\
    \    var primes_count_max = Int(0)\n        ^\n/tmp/tmp7785icct.swift:15:9: note:\
    \ 'primes_count_max' previously declared here\n    var primes_count_max = Int(0)\n\
    \        ^\n/tmp/tmp7785icct.swift:22:9: error: invalid redeclaration of 'primes_count_min'\n\
    \    var primes_count_min = Int(0)\n        ^\n/tmp/tmp7785icct.swift:16:9: note:\
    \ 'primes_count_min' previously declared here\n    var primes_count_min = Int(0)\n\
    \        ^\n/tmp/tmp7785icct.swift:23:9: error: invalid redeclaration of 'primes_count_max'\n\
    \    var primes_count_max = Int(0)\n        ^\n/tmp/tmp7785icct.swift:15:9: note:\
    \ 'primes_count_max' previously declared here\n    var primes_count_max = Int(0)\n\
    \        ^\n/tmp/tmp7785icct.swift:24:9: error: invalid redeclaration of 'primes_count_min'\n\
    \    var primes_count_min = Int(0)\n        ^\n/tmp/tmp7785icct.swift:16:9: note:\
    \ 'primes_count_min' previously declared here\n    var primes_count_min = Int(0)\n\
    \        ^\n/tmp/tmp7785icct.swift:25:9: error: invalid redeclaration of 'primes_cou"
  stdout: ''
  timestamp: 1659824577
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 100 {\n      \
    \  return false\n    }\n    \n    var primes = [Int]()\n    \n    for n in 2...100\
    \ {\n        if a % n == 0 {\n            primes.append(n)\n        }\n    }\n\
    \    \n    if primes.count < 3 {\n        return false\n    }\n    \n    for n\
    \ in 2...100 {\n        if a % primes.last! == 0 {\n            return false\n\
    \        }\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmprr4ub1zr/tmprr4ub1zr.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae19cb56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae19c84db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae19c84d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae19c84c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprr4ub1zr                        0x000055c22ca6a597 <unavailable> + 5527

    5    libc.so.6                          0x00002ae19cd42460 __libc_start_main +
    245

    6    tmprr4ub1zr                        0x000055c22ca6a1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1659824578
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var isMultiplyPrime =\
    \ true\n    var isMultiplyPrime2 = true\n    var isMultiplyPrime3 = true\n   \
    \ var isMultiplyPrime4 = true\n    var isMultiplyPrime5 = true\n    var isMultiplyPrime6\
    \ = true\n    var isMultiplyPrime7 = true\n    var isMultiplyPrime8 = true\n \
    \   var isMultiplyPrime9 = true\n    var isMultiplyPrime10 = true\n    var isMultiplyPrime11\
    \ = true\n    var isMultiplyPrime12 = true\n    var isMultiplyPrime13 = true\n\
    \    var isMultiplyPrime14 = true\n    var isMultiplyPrime15 = true\n    var isMultiplyPrime16\
    \ = true\n    var isMultiplyPrime17 = true\n    var isMultiplyPrime18 = true\n\
    \    var isMultiplyPrime19 = true\n    var isMultiplyPrime20 = true\n    var isMultiplyPrime21\
    \ = true\n    var isMultiplyPrime22 = true\n    var isMultiplyPrime23 = true\n\
    \    var isMultiplyPrime24 = true\n    var isMultiplyPrime25 = true\n    var isMultiplyPrime26\
    \ = true\n    var isMultiplyPrime27 = true\n    var isMultiplyPrime28 = true\n\
    \    var isMultiplyPrime29 = true\n    var isMultiplyPrime30 = true\n    var isMultiplyPrime31\
    \ = true\n    var isMultiplyPrime32 = true\n    var isMultiplyPrime33 = true\n\
    \    var isMultiplyPrime34 = true\n    var isMultiplyPrime35 = true\n    var isMultiplyPrime36\
    \ = true\n    var isMultiplyPrime37 = true\n    var isMultiplyPrime38 = true\n\
    \    var isMultiplyPrime39 = true\n    var isMultiplyPrime40 = true\n    var isMultiplyPrime41\
    \ = true\n    var isMultiplyPrime42 = true\n    var isMultiplyPrime43 = true\n\
    \    var isMultiplyPrime44 = true\n    var isMultiplyPrime45 = true\n    var isMultiplyPrime46\
    \ = true\n    var isMultiplyPrime47 = true\n    var isMultiplyPrime48 = true\n\
    \    var isMultiplyPrime49 = true\n    var isMultiplyPrime50 = true\n    var isMultiplyPrime51\
    \ = true\n    var isMultiplyPrime52 = true\n    var isMultiplyPrime53 = true\n\
    \    var isMultiplyPrime54 = true\n    var isMultiplyPrime55 = true\n    var isMultiplyPrime56\
    \ = true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpaj_uqgea.swift:10:9: warning: initialization of variable 'isMultiplyPrime'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime = true\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpaj_uqgea.swift:11:9:\
    \ warning: initialization of variable 'isMultiplyPrime2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime2 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpaj_uqgea.swift:12:9: warning:\
    \ initialization of variable 'isMultiplyPrime3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime3 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpaj_uqgea.swift:13:9: warning: initialization\
    \ of variable 'isMultiplyPrime4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime4 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpaj_uqgea.swift:14:9: warning: initialization of variable 'isMultiplyPrime5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime5 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpaj_uqgea.swift:15:9:\
    \ warning: initialization of variable 'isMultiplyPrime6' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime6 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpaj_uqgea.swift:16:9: warning:\
    \ initialization of variable 'isMultiplyPrime7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime7 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpaj_uqgea.swift:17:9: warning: initialization\
    \ of variable 'isMultiplyPrime8' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime8 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpaj_uqgea.swift:18:9: warning: initialization of variable 'isMultiplyPrime9'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime9 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpaj_uqgea.swift:19:9:\
    \ warning: initialization of variable 'isMul"
  stdout: ''
  timestamp: 1659824578
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    var primes = [Int]()\n    var prime: Int\n    var i: Int\n    var j: Int\n\
    \    var k: Int\n    var m: Int\n    var n: Int\n    var p: Int\n    var q: Int\n\
    \    var r: Int\n    var s: Int\n    var t: Int\n    var u: Int\n    var v: Int\n\
    \    var w: Int\n    var x: Int\n    var y: Int\n    var z: Int\n    var a: Int\n\
    \    var b: Int\n    var c: Int\n    var d: Int\n    var e: Int\n    var f: Int\n\
    \    var g: Int\n    var h: Int\n    var i: Int\n    var j: Int\n    var k: Int\n\
    \    var m: Int\n    var n: Int\n    var p: Int\n    var q: Int\n    var r: Int\n\
    \    var s: Int\n    var t: Int\n    var u: Int\n    var v: Int\n    var w: Int\n\
    \    var x: Int\n    var y: Int\n    var z: Int\n    var a: Int\n    var b: Int\n\
    \    var c: Int\n    var d: Int\n    var e: Int\n    var f: Int\n    var g: Int\n\
    \    var h: Int\n    var i: Int\n    var j: Int\n    var k: Int\n    var m: Int\n\
    \    var n: Int\n    var p: Int\n    var q: Int\n    var r: Int\n    var s: Int\n\
    \    var t: Int\n    var u: Int\n    var v: Int\n    var w: Int\n    var x: Int\n\
    \    var y: Int\n    var z: Int\n    var a: Int\n    var b: Int\n    var c: Int\n\
    \    var d: Int\n    var e: Int\n    var f: Int\n    var g: Int\n    var h: Int\n\
    \    var i: Int\n    var j: Int\n    var k: Int\n    var m: Int\n    var n: Int\n\
    \    var p: Int\n    var q: Int\n    var r: Int\n    var s: Int\n    var t: Int\n\
    \    var u: Int\n    var v: Int\n    var w: Int\n    var x: Int\n    var y: Int\n\
    \    var z: Int\n    var a: Int\n    var b: Int\n    var c: Int\n    var d: Int\n\
    \    var e: Int\n    var f: Int\n    var g: Int\n    var h: Int\n    var i: Int\n\
    \    var j: Int\n    var k: Int\n    var m: Int\n    var n: Int\n    var p: Int\n\
    \    var q: Int\n    var r: Int\n    var s: Int\n    var t: Int\n    var u: Int\n\
    \    var v: Int\n    var w: Int\n    var x: Int\n    var y: Int\n    var z: Int\n\
    \    var a: Int\n    var b: Int\n    var c: Int\n    var d: Int\n    var e: Int\n\
    \    var f: Int\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpley2p4zf.swift:37:9: error: invalid redeclaration of 'i'\n    var\
    \ i: Int\n        ^\n/tmp/tmpley2p4zf.swift:13:9: note: 'i' previously declared\
    \ here\n    var i: Int\n        ^\n/tmp/tmpley2p4zf.swift:38:9: error: invalid\
    \ redeclaration of 'j'\n    var j: Int\n        ^\n/tmp/tmpley2p4zf.swift:14:9:\
    \ note: 'j' previously declared here\n    var j: Int\n        ^\n/tmp/tmpley2p4zf.swift:39:9:\
    \ error: invalid redeclaration of 'k'\n    var k: Int\n        ^\n/tmp/tmpley2p4zf.swift:15:9:\
    \ note: 'k' previously declared here\n    var k: Int\n        ^\n/tmp/tmpley2p4zf.swift:40:9:\
    \ error: invalid redeclaration of 'm'\n    var m: Int\n        ^\n/tmp/tmpley2p4zf.swift:16:9:\
    \ note: 'm' previously declared here\n    var m: Int\n        ^\n/tmp/tmpley2p4zf.swift:41:9:\
    \ error: invalid redeclaration of 'n'\n    var n: Int\n        ^\n/tmp/tmpley2p4zf.swift:17:9:\
    \ note: 'n' previously declared here\n    var n: Int\n        ^\n/tmp/tmpley2p4zf.swift:42:9:\
    \ error: invalid redeclaration of 'p'\n    var p: Int\n        ^\n/tmp/tmpley2p4zf.swift:18:9:\
    \ note: 'p' previously declared here\n    var p: Int\n        ^\n/tmp/tmpley2p4zf.swift:43:9:\
    \ error: invalid redeclaration of 'q'\n    var q: Int\n        ^\n/tmp/tmpley2p4zf.swift:19:9:\
    \ note: 'q' previously declared here\n    var q: Int\n        ^\n/tmp/tmpley2p4zf.swift:44:9:\
    \ error: invalid redeclaration of 'r'\n    var r: Int\n        ^\n/tmp/tmpley2p4zf.swift:20:9:\
    \ note: 'r' previously declared here\n    var r: Int\n        ^\n/tmp/tmpley2p4zf.swift:45:9:\
    \ error: invalid redeclaration of 's'\n    var s: Int\n        ^\n/tmp/tmpley2p4zf.swift:21:9:\
    \ note: 's' previously declared here\n    var s: Int\n        ^\n/tmp/tmpley2p4zf.swift:46:9:\
    \ error: invalid redeclaration of 't'\n    var t: Int\n        ^\n/tmp/tmpley2p4zf.swift:22:9:\
    \ note: 't' previously declared here\n    var t: Int\n        ^\n/tmp/tmpley2p4zf.swift:47:9:\
    \ error: invalid redeclaration of 'u'\n    var u: Int\n        ^\n/tmp/tmpley2p4zf.swift:23:9:\
    \ note: 'u' previously declared here\n    var u: Int\n        ^\n/tmp/tmpley2p4zf.swift:48:9:\
    \ error: invalid redeclaration of 'v'\n    var v: Int"
  stdout: ''
  timestamp: 1659824578
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var isMultiplyPrime =\
    \ true\n    var isMultiplyPrime2 = true\n    var isMultiplyPrime3 = true\n   \
    \ var isMultiplyPrime4 = true\n    var isMultiplyPrime5 = true\n    var isMultiplyPrime6\
    \ = true\n    var isMultiplyPrime7 = true\n    var isMultiplyPrime8 = true\n \
    \   var isMultiplyPrime9 = true\n    var isMultiplyPrime10 = true\n    var isMultiplyPrime11\
    \ = true\n    var isMultiplyPrime12 = true\n    var isMultiplyPrime13 = true\n\
    \    var isMultiplyPrime14 = true\n    var isMultiplyPrime15 = true\n    var isMultiplyPrime16\
    \ = true\n    var isMultiplyPrime17 = true\n    var isMultiplyPrime18 = true\n\
    \    var isMultiplyPrime19 = true\n    var isMultiplyPrime20 = true\n    var isMultiplyPrime21\
    \ = true\n    var isMultiplyPrime22 = true\n    var isMultiplyPrime23 = true\n\
    \    var isMultiplyPrime24 = true\n    var isMultiplyPrime25 = true\n    var isMultiplyPrime26\
    \ = true\n    var isMultiplyPrime27 = true\n    var isMultiplyPrime28 = true\n\
    \    var isMultiplyPrime29 = true\n    var isMultiplyPrime30 = true\n    var isMultiplyPrime31\
    \ = true\n    var isMultiplyPrime32 = true\n    var isMultiplyPrime33 = true\n\
    \    var isMultiplyPrime34 = true\n    var isMultiplyPrime35 = true\n    var isMultiplyPrime36\
    \ = true\n    var isMultiplyPrime37 = true\n    var isMultiplyPrime38 = true\n\
    \    var isMultiplyPrime39 = true\n    var isMultiplyPrime40 = true\n    var isMultiplyPrime41\
    \ = true\n    var isMultiplyPrime42 = true\n    var isMultiplyPrime43 = true\n\
    \    var isMultiplyPrime44 = true\n    var isMultiplyPrime45 = true\n    var isMultiplyPrime46\
    \ = true\n    var isMultiplyPrime47 = true\n    var isMultiplyPrime48 = true\n\
    \    var isMultiplyPrime49 = true\n    var isMultiplyPrime50 = true\n    var isMultiplyPrime51\
    \ = true\n    var isMultiplyPrime52 = true\n    var isMultiplyPrime53 = true\n\
    \    var isMultiplyPrime54 = true\n    var isMultiplyPrime55 = true\n    var isMultiplyPrime56\
    \ = true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpaj_uqgea.swift:10:9: warning: initialization of variable 'isMultiplyPrime'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime = true\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpaj_uqgea.swift:11:9:\
    \ warning: initialization of variable 'isMultiplyPrime2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime2 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpaj_uqgea.swift:12:9: warning:\
    \ initialization of variable 'isMultiplyPrime3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime3 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpaj_uqgea.swift:13:9: warning: initialization\
    \ of variable 'isMultiplyPrime4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime4 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpaj_uqgea.swift:14:9: warning: initialization of variable 'isMultiplyPrime5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime5 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpaj_uqgea.swift:15:9:\
    \ warning: initialization of variable 'isMultiplyPrime6' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime6 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpaj_uqgea.swift:16:9: warning:\
    \ initialization of variable 'isMultiplyPrime7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime7 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpaj_uqgea.swift:17:9: warning: initialization\
    \ of variable 'isMultiplyPrime8' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime8 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpaj_uqgea.swift:18:9: warning: initialization of variable 'isMultiplyPrime9'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime9 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpaj_uqgea.swift:19:9:\
    \ warning: initialization of variable 'isMul"
  stdout: ''
  timestamp: 1659824578
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = true\n \
    \   for _ in 0..<100 {\n        if a % 3 == 0 || a % 5 == 0 {\n            result\
    \ = false\n            break\n        }\n        a += 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpof1025kj.swift:16:11: error: left side of mutating operator isn't\
    \ mutable: 'a' is a 'let' constant\n        a += 1\n        ~ ^\n"
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    guard a >= 100 else {\n\
    \        return false\n    }\n    \n    var result = true\n    \n    for i in\
    \ 2..<Int(ceil(sqrt(Double(a)))) {\n        if a % i == 0 {\n            result\
    \ = false\n            break\n        }\n    }\n    \n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpqb6o31_l.swift:16:22: error: cannot find 'ceil' in scope\n    for\
    \ i in 2..<Int(ceil(sqrt(Double(a)))) {\n                     ^~~~\n/tmp/tmpqb6o31_l.swift:16:27:\
    \ error: cannot find 'sqrt' in scope\n    for i in 2..<Int(ceil(sqrt(Double(a))))\
    \ {\n                          ^~~~\n"
  stdout: ''
  timestamp: 1659824578
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 100 {\n      \
    \  return false\n    }\n    var primes = [Int]()\n    var primes_count = Int(0)\n\
    \    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var\
    \ primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max\
    \ = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n\
    \    var primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n    var\
    \ primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min\
    \ = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n\
    \    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var\
    \ primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max\
    \ = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n\
    \    var primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n    var\
    \ primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min\
    \ = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n\
    \    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var\
    \ primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max\
    \ = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n\
    \    var primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n    var\
    \ primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min\
    \ = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n\
    \    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var\
    \ primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max\
    \ = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n\
    \    var primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n    var\
    \ primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min\
    \ = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n\
    \    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var\
    \ primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max\
    \ = Int(0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7785icct.swift:17:9: error: invalid redeclaration of 'primes_count_max'\n\
    \    var primes_count_max = Int(0)\n        ^\n/tmp/tmp7785icct.swift:15:9: note:\
    \ 'primes_count_max' previously declared here\n    var primes_count_max = Int(0)\n\
    \        ^\n/tmp/tmp7785icct.swift:18:9: error: invalid redeclaration of 'primes_count_min'\n\
    \    var primes_count_min = Int(0)\n        ^\n/tmp/tmp7785icct.swift:16:9: note:\
    \ 'primes_count_min' previously declared here\n    var primes_count_min = Int(0)\n\
    \        ^\n/tmp/tmp7785icct.swift:19:9: error: invalid redeclaration of 'primes_count_max'\n\
    \    var primes_count_max = Int(0)\n        ^\n/tmp/tmp7785icct.swift:15:9: note:\
    \ 'primes_count_max' previously declared here\n    var primes_count_max = Int(0)\n\
    \        ^\n/tmp/tmp7785icct.swift:20:9: error: invalid redeclaration of 'primes_count_min'\n\
    \    var primes_count_min = Int(0)\n        ^\n/tmp/tmp7785icct.swift:16:9: note:\
    \ 'primes_count_min' previously declared here\n    var primes_count_min = Int(0)\n\
    \        ^\n/tmp/tmp7785icct.swift:21:9: error: invalid redeclaration of 'primes_count_max'\n\
    \    var primes_count_max = Int(0)\n        ^\n/tmp/tmp7785icct.swift:15:9: note:\
    \ 'primes_count_max' previously declared here\n    var primes_count_max = Int(0)\n\
    \        ^\n/tmp/tmp7785icct.swift:22:9: error: invalid redeclaration of 'primes_count_min'\n\
    \    var primes_count_min = Int(0)\n        ^\n/tmp/tmp7785icct.swift:16:9: note:\
    \ 'primes_count_min' previously declared here\n    var primes_count_min = Int(0)\n\
    \        ^\n/tmp/tmp7785icct.swift:23:9: error: invalid redeclaration of 'primes_count_max'\n\
    \    var primes_count_max = Int(0)\n        ^\n/tmp/tmp7785icct.swift:15:9: note:\
    \ 'primes_count_max' previously declared here\n    var primes_count_max = Int(0)\n\
    \        ^\n/tmp/tmp7785icct.swift:24:9: error: invalid redeclaration of 'primes_count_min'\n\
    \    var primes_count_min = Int(0)\n        ^\n/tmp/tmp7785icct.swift:16:9: note:\
    \ 'primes_count_min' previously declared here\n    var primes_count_min = Int(0)\n\
    \        ^\n/tmp/tmp7785icct.swift:25:9: error: invalid redeclaration of 'primes_cou"
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    if a < 100 {\n        for n in 2..(a/2) {\n            if a % n == 0 {\n\
    \                result = true\n                break\n            }\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_7_6yhq7.swift:12:19: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n        for n in 2..(a/2) {\n                  ^~\n   \
    \               ...\n"
  stdout: ''
  timestamp: 1659824578
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var primes = [Int]()\n\
    \    var primes_count = 100\n    var primes_sum = 0\n    var primes_sum2 = 0\n\
    \    var primes_sum3 = 0\n    var primes_sum4 = 0\n    var primes_sum5 = 0\n \
    \   var primes_sum6 = 0\n    var primes_sum7 = 0\n    var primes_sum8 = 0\n  \
    \  var primes_sum9 = 0\n    var primes_sum10 = 0\n    var primes_sum11 = 0\n \
    \   var primes_sum12 = 0\n    var primes_sum13 = 0\n    var primes_sum14 = 0\n\
    \    var primes_sum15 = 0\n    var primes_sum16 = 0\n    var primes_sum17 = 0\n\
    \    var primes_sum18 = 0\n    var primes_sum19 = 0\n    var primes_sum20 = 0\n\
    \    var primes_sum21 = 0\n    var primes_sum22 = 0\n    var primes_sum23 = 0\n\
    \    var primes_sum24 = 0\n    var primes_sum25 = 0\n    var primes_sum26 = 0\n\
    \    var primes_sum27 = 0\n    var primes_sum28 = 0\n    var primes_sum29 = 0\n\
    \    var primes_sum30 = 0\n    var primes_sum31 = 0\n    var primes_sum32 = 0\n\
    \    var primes_sum33 = 0\n    var primes_sum34 = 0\n    var primes_sum35 = 0\n\
    \    var primes_sum36 = 0\n    var primes_sum37 = 0\n    var primes_sum38 = 0\n\
    \    var primes_sum39 = 0\n    var primes_sum40 = 0\n    var primes_sum41 = 0\n\
    \    var primes_sum42 = 0\n    var primes_sum43 = 0\n    var primes_sum44 = 0\n\
    \    var primes_sum45 = 0\n    var primes_sum46 = 0\n    var primes_sum47 = 0\n\
    \    var primes_sum48 = 0\n    var primes_sum49 = 0\n    var primes_sum50 = 0\n\
    \    var primes_sum51 = 0\n    var primes_sum52 = 0\n    var primes_sum53 = 0\n\
    \    var primes_sum54 = 0\n    var primes_sum55 = 0\n    var primes_sum56 = 0\n\
    \    var primes_sum57 = 0\n    var primes_sum58 = 0\n    var primes_sum59 = 0\n\
    \    var primes_sum60 = 0\n    var primes_sum61 = 0\n    var primes_sum62 = 0\n\
    \    var primes_sum63 = 0\n    var primes_sum64 = 0\n    var primes_sum65 = 0\n\
    \    var primes_sum66 = 0\n    var primes_sum67 = 0\n    var primes_sum68 = 0\n\
    \    var primes_sum69 = 0\n    var primes_sum70 = 0\n    var primes_sum71 = 0\n\
    \    var primes_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7b6uvaj2.swift:83:9: error: type annotation missing in pattern\n\
    \    var primes_\n        ^\n"
  stdout: ''
  timestamp: 1659824577
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 100 {\n      \
    \  return false\n    }\n    \n    var primes = [Int]()\n    \n    for n in 2...100\
    \ {\n        if a % n == 0 {\n            primes.append(n)\n        }\n    }\n\
    \    \n    return primes.count > 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpjoy6pkyh/tmpjoy6pkyh.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8dbf55ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8dbf251b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8dbf251988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8dbf2507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjoy6pkyh                        0x00005586c98fc507 <unavailable> + 5383

    5    libc.so.6                          0x00002b8dbf746460 __libc_start_main +
    245

    6    tmpjoy6pkyh                        0x00005586c98fc149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824578
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    \n    if a < 100 {\n\
    \        return false\n    }\n    \n    var primes = [Int]()\n    \n    for number\
    \ in 1...a {\n        if number % 2 == 0 {\n            return false\n       \
    \ }\n        \n        for prime in 2...number {\n            if number % prime\
    \ == 0 {\n                return false\n            }\n        }\n        \n \
    \       primes.append(number)\n    }\n    \n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmp547sgxsw/tmp547sgxsw.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4aa7bdec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4aa78d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4aa78d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4aa78d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp547sgxsw                        0x0000557637640457 <unavailable> + 5207

    5    libc.so.6                          0x00002b4aa7dca460 __libc_start_main +
    245

    6    tmp547sgxsw                        0x0000557637640099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1659824578
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = true\n \
    \   var primes = [Int]()\n    var prime: Int\n    var i: Int\n    var j: Int\n\
    \    var count: Int\n    \n    primes.append(2)\n    primes.append(3)\n    primes.append(5)\n\
    \    primes.append(7)\n    primes.append(11)\n    primes.append(13)\n    primes.append(17)\n\
    \    primes.append(19)\n    primes.append(23)\n    primes.append(29)\n    primes.append(31)\n\
    \    primes.append(37)\n    primes.append(43)\n    primes.append(51)\n    primes.append(59)\n\
    \    primes.append(61)\n    primes.append(67)\n    primes.append(73)\n    primes.append(79)\n\
    \    primes.append(83)\n    primes.append(89)\n    primes.append(97)\n    primes.append(101)\n\
    \    primes.append(103)\n    primes.append(107)\n    primes.append(109)\n    primes.append(113)\n\
    \    primes.append(127)\n    primes.append(131)\n    primes.append(137)\n    primes.append(139)\n\
    \    primes.append(149)\n    primes.append(151)\n    primes.append(157)\n    primes.append(163)\n\
    \    primes.append(167)\n    primes.append(173)\n    primes.append(179)\n    primes.append(181)\n\
    \    primes.append(191)\n    primes.append(193)\n    primes.append(197)\n    primes.append(199)\n\
    \    primes.append(211)\n    primes.append(223)\n    primes.append(227)\n    primes.append(229)\n\
    \    primes.append(233)\n    primes.append(239)\n    primes.append(241)\n    primes.append(243)\n\
    \    primes.append(247)\n    primes.append(247)\n    primes.append(251)\n    primes.append(257)\n\
    \    primes.append(263)\n    primes.append(269)\n    primes.append(271)\n    primes.append(273)\n\
    \    primes.append(277)\n    primes.append(281)\n    primes.append(283)\n    primes.append(293)\n\
    \    primes.append(307)\n    primes.append(311)\n    primes.append(313)\n    primes.append(317)\n\
    \    primes.append(331)\n    primes.append(333)\n    primes.append(337)\n    primes.append(347)\n\
    \    primes.append(349)\n    primes.append(353)\n    primes.append(359)\n    primes.append(367)\n\
    \    primes.append(373)\n    primes.append(379)\n    primes.append(383)\n    primes.append(389)\n\
    \    primes.append(397)\n    primes.append(409)\n    primes.append(\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7bwzlpph.swift:99:1: error: expected expression in list of expressions\n\
    }\n^\n/tmp/tmp7bwzlpph.swift:98:18: error: missing argument for parameter #1 in\
    \ call\n    primes.append(\n                 ^\n                 <#Int#>\nSwift.Array:6:37:\
    \ note: 'append' declared here\n    @inlinable public mutating func append(_ newElement:\
    \ __owned Element)\n                                    ^\n"
  stdout: ''
  timestamp: 1659824578
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = true\n \
    \   for number in stride(from: a, through: 100, by: 3) {\n        if number %\
    \ 2 != 0 && number % 3 != 0 {\n            result = false\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmp7bw3th_2/tmp7bw3th_2.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b955f888c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b955f57fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b955f57f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b955f57e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7bw3th_2                        0x000056396814455b <unavailable> + 5467

    5    libc.so.6                          0x00002b955fa74460 __libc_start_main +
    245

    6    tmp7bw3th_2                        0x0000563968144129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824578
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    var primes = [Int]()\n    var prime: Int\n    var i: Int\n    var j: Int\n\
    \    var k: Int\n    var m: Int\n    \n    for i = 2; i < a; i++ {\n        prime\
    \ = true\n        for j = 2; j < i; j++ {\n            if i % j == 0 {\n     \
    \           prime = false\n                break\n            }\n        }\n \
    \       if prime {\n            primes.append(i)\n        }\n    }\n    \n   \
    \ for i = 2; i < a; i++ {\n        for j = i+1; j < a; j++ {\n            k =\
    \ j+1\n            while k < a {\n                if k == i {\n              \
    \      m = k\n                } else {\n                    m = k + 1\n      \
    \          }\n                if m == i {\n                    m = k\n       \
    \         }\n                if m % i == 0 {\n                    result = true\n\
    \                    break\n                }\n                k = m\n       \
    \     }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpnoq_3rck.swift:18:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 2; i < a; i++ {\n    ^   ~~~~~~~~~~~~~~~~~\n/tmp/tmpnoq_3rck.swift:20:9:\
    \ error: C-style for statement has been removed in Swift 3\n        for j = 2;\
    \ j < i; j++ {\n        ^   ~~~~~~~~~~~~~~~~~\n/tmp/tmpnoq_3rck.swift:31:5: error:\
    \ C-style for statement has been removed in Swift 3\n    for i = 2; i < a; i++\
    \ {\n    ^   ~~~~~~~~~~~~~~~~~\n/tmp/tmpnoq_3rck.swift:32:9: error: C-style for\
    \ statement has been removed in Swift 3\n        for j = i+1; j < a; j++ {\n \
    \       ^   ~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824578
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = true\n \
    \   var primes = [Int]()\n    var primes_count = 100\n    var primes_count_max\
    \ = 100\n    var primes_count_min = 3\n    var primes_count_step = 1\n    var\
    \ primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_step\
    \ = 1\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_step\
    \ = 1\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_step\
    \ = 1\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_step\
    \ = 1\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_step\
    \ = 1\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_step\
    \ = 1\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_step\
    \ = 1\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_step\
    \ = 1\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_step\
    \ = 1\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_step\
    \ = 1\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_step\
    \ = 1\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_step\
    \ = 1\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_step\
    \ = 1\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_step\
    \ = 1\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_step\
    \ = 1\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_step\
    \ = 1\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_step\
    \ = 1\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_step\
    \ = 1\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_step\
    \ = 1\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_step\
    \ = 1\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_step\
    \ = 1\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_step\
    \ = 1\n    var primes_count_max = 100\n    var primes_count_min\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpdxuf2g2s.swift:16:9: error: invalid redeclaration of 'primes_count_max'\n\
    \    var primes_count_max = 100\n        ^\n/tmp/tmpdxuf2g2s.swift:13:9: note:\
    \ 'primes_count_max' previously declared here\n    var primes_count_max = 100\n\
    \        ^\n/tmp/tmpdxuf2g2s.swift:17:9: error: invalid redeclaration of 'primes_count_min'\n\
    \    var primes_count_min = 3\n        ^\n/tmp/tmpdxuf2g2s.swift:14:9: note: 'primes_count_min'\
    \ previously declared here\n    var primes_count_min = 3\n        ^\n/tmp/tmpdxuf2g2s.swift:18:9:\
    \ error: invalid redeclaration of 'primes_count_step'\n    var primes_count_step\
    \ = 1\n        ^\n/tmp/tmpdxuf2g2s.swift:15:9: note: 'primes_count_step' previously\
    \ declared here\n    var primes_count_step = 1\n        ^\n/tmp/tmpdxuf2g2s.swift:19:9:\
    \ error: invalid redeclaration of 'primes_count_max'\n    var primes_count_max\
    \ = 100\n        ^\n/tmp/tmpdxuf2g2s.swift:13:9: note: 'primes_count_max' previously\
    \ declared here\n    var primes_count_max = 100\n        ^\n/tmp/tmpdxuf2g2s.swift:20:9:\
    \ error: invalid redeclaration of 'primes_count_min'\n    var primes_count_min\
    \ = 3\n        ^\n/tmp/tmpdxuf2g2s.swift:14:9: note: 'primes_count_min' previously\
    \ declared here\n    var primes_count_min = 3\n        ^\n/tmp/tmpdxuf2g2s.swift:21:9:\
    \ error: invalid redeclaration of 'primes_count_step'\n    var primes_count_step\
    \ = 1\n        ^\n/tmp/tmpdxuf2g2s.swift:15:9: note: 'primes_count_step' previously\
    \ declared here\n    var primes_count_step = 1\n        ^\n/tmp/tmpdxuf2g2s.swift:22:9:\
    \ error: invalid redeclaration of 'primes_count_max'\n    var primes_count_max\
    \ = 100\n        ^\n/tmp/tmpdxuf2g2s.swift:13:9: note: 'primes_count_max' previously\
    \ declared here\n    var primes_count_max = 100\n        ^\n/tmp/tmpdxuf2g2s.swift:23:9:\
    \ error: invalid redeclaration of 'primes_count_min'\n    var primes_count_min\
    \ = 3\n        ^\n/tmp/tmpdxuf2g2s.swift:14:9: note: 'primes_count_min' previously\
    \ declared here\n    var primes_count_min = 3\n        ^\n/tmp/tmpdxuf2g2s.swift:24:9:\
    \ error: invalid redeclaration of 'primes_count_step'\n    var primes_count_step\
    \ = 1\n        ^\n/tmp/tmpdxu"
  stdout: ''
  timestamp: 1659824578
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = true\n \
    \   var i = 2\n    var j = 2\n    var k = 2\n    var l = 3\n    var m = 4\n  \
    \  var n = 5\n    var o = 5\n    var p = 6\n    var q = 7\n    var r = 8\n   \
    \ var s = 9\n    var t = 10\n    var u = 11\n    var v = 12\n    var w = 13\n\
    \    var x = 14\n    var y = 15\n    var z = 16\n    var a = 17\n    var b = 18\n\
    \    var c = 19\n    var d = 20\n    var e = 21\n    var f = 22\n    var g = 23\n\
    \    var h = 24\n    var i = 25\n    var j = 26\n    var k = 27\n    var l = 28\n\
    \    var m = 29\n    var n = 30\n    var o = 31\n    var p = 32\n    var q = 33\n\
    \    var r = 34\n    var s = 35\n    var t = 36\n    var u = 37\n    var v = 38\n\
    \    var w = 39\n    var x = 40\n    var y = 41\n    var z = 42\n    var a = 43\n\
    \    var b = 44\n    var c = 45\n    var d = 46\n    var e = 47\n    var f = 48\n\
    \    var g = 49\n    var h = 50\n    var i = 51\n    var j = 52\n    var k = 53\n\
    \    var l = 54\n    var m = 55\n    var n = 56\n    var o = 57\n    var p = 58\n\
    \    var q = 59\n    var r = 60\n    var s = 61\n    var t = 62\n    var u = 63\n\
    \    var v = 64\n    var w = 65\n    var x = 66\n    var y = 67\n    var z = 68\n\
    \    var a = 69\n    var b = 70\n    var c = 71\n    var d = 72\n    var e = 73\n\
    \    var f = 74\n    var g = 75\n    var h = 76\n    var i = 77\n    var j = 78\n\
    \    var k = 79\n    var l = 80\n    var m = 81\n    var n = 82\n    var o = 83\n\
    \    var p = 84\n    var q = 85\n    var r = 86\n    var s = 87\n    var t = 88\n\
    \    var u = 89\n    var v = 90\n    var w = 91\n    var x = 92\n    var y = 93\n\
    \    var z = 94\n    var a = 95\n    var b = 96\n    var c = 97\n    var d = 98\n\
    \    var e = 99\n    var f = 100\n    var g = 101\n    var h = 102\n    var i\
    \ = 103\n    var j = 104\n    var k = 105\n    var l = 106\n    var m = 107\n\
    \    var n = 108\n    var o = 109\n    var p = 110\n    var q = 111\n    var r\
    \ = 112\n    var s = 113\n    var t = 114\n    var u = 115\n    var v = 116\n\
    \    var w = 117\n    var x = 118\n    var y = 119\n    var z = 120\n    var a\
    \ = 121\n    var b = 122\n    var c = \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp8knrfvbr.swift:135:12: error: expected initial value after '='\n\
    \    var c = \n           ^\n/tmp/tmp8knrfvbr.swift:37:9: error: invalid redeclaration\
    \ of 'i'\n    var i = 25\n        ^\n/tmp/tmp8knrfvbr.swift:11:9: note: 'i' previously\
    \ declared here\n    var i = 2\n        ^\n/tmp/tmp8knrfvbr.swift:38:9: error:\
    \ invalid redeclaration of 'j'\n    var j = 26\n        ^\n/tmp/tmp8knrfvbr.swift:12:9:\
    \ note: 'j' previously declared here\n    var j = 2\n        ^\n/tmp/tmp8knrfvbr.swift:39:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 27\n        ^\n/tmp/tmp8knrfvbr.swift:13:9:\
    \ note: 'k' previously declared here\n    var k = 2\n        ^\n/tmp/tmp8knrfvbr.swift:40:9:\
    \ error: invalid redeclaration of 'l'\n    var l = 28\n        ^\n/tmp/tmp8knrfvbr.swift:14:9:\
    \ note: 'l' previously declared here\n    var l = 3\n        ^\n/tmp/tmp8knrfvbr.swift:41:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 29\n        ^\n/tmp/tmp8knrfvbr.swift:15:9:\
    \ note: 'm' previously declared here\n    var m = 4\n        ^\n/tmp/tmp8knrfvbr.swift:42:9:\
    \ error: invalid redeclaration of 'n'\n    var n = 30\n        ^\n/tmp/tmp8knrfvbr.swift:16:9:\
    \ note: 'n' previously declared here\n    var n = 5\n        ^\n/tmp/tmp8knrfvbr.swift:43:9:\
    \ error: invalid redeclaration of 'o'\n    var o = 31\n        ^\n/tmp/tmp8knrfvbr.swift:17:9:\
    \ note: 'o' previously declared here\n    var o = 5\n        ^\n/tmp/tmp8knrfvbr.swift:44:9:\
    \ error: invalid redeclaration of 'p'\n    var p = 32\n        ^\n/tmp/tmp8knrfvbr.swift:18:9:\
    \ note: 'p' previously declared here\n    var p = 6\n        ^\n/tmp/tmp8knrfvbr.swift:45:9:\
    \ error: invalid redeclaration of 'q'\n    var q = 33\n        ^\n/tmp/tmp8knrfvbr.swift:19:9:\
    \ note: 'q' previously declared here\n    var q = 7\n        ^\n/tmp/tmp8knrfvbr.swift:46:9:\
    \ error: invalid redeclaration of 'r'\n    var r = 34\n        ^\n/tmp/tmp8knrfvbr.swift:20:9:\
    \ note: 'r' previously declared here\n    var r = 8\n        ^\n/tmp/tmp8knrfvbr.swift:47:9:\
    \ error: invalid redeclaration of 's'\n    var s = 35\n        ^\n/tmp/tmp8knrfvbr.swift:21:9:\
    \ note: 's' previously declared here\n    var s = 9\n   "
  stdout: ''
  timestamp: 1659824578
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var isMultiplyPrime =\
    \ false\n    var isMultiplyPrime2 = false\n    var isMultiplyPrime3 = false\n\
    \    var isMultiplyPrime4 = false\n    var isMultiplyPrime5 = false\n    var isMultiplyPrime6\
    \ = false\n    var isMultiplyPrime7 = false\n    var isMultiplyPrime8 = false\n\
    \    var isMultiplyPrime9 = false\n    var isMultiplyPrime10 = false\n    var\
    \ isMultiplyPrime11 = false\n    var isMultiplyPrime12 = false\n    var isMultiplyPrime13\
    \ = false\n    var isMultiplyPrime14 = false\n    var isMultiplyPrime15 = false\n\
    \    var isMultiplyPrime16 = false\n    var isMultiplyPrime17 = false\n    var\
    \ isMultiplyPrime18 = false\n    var isMultiplyPrime19 = false\n    var isMultiplyPrime20\
    \ = false\n    var isMultiplyPrime21 = false\n    var isMultiplyPrime22 = false\n\
    \    var isMultiplyPrime23 = false\n    var isMultiplyPrime24 = false\n    var\
    \ isMultiplyPrime25 = false\n    var isMultiplyPrime26 = false\n    var isMultiplyPrime27\
    \ = false\n    var isMultiplyPrime28 = false\n    var isMultiplyPrime29 = false\n\
    \    var isMultiplyPrime30 = false\n    var isMultiplyPrime31 = false\n    var\
    \ isMultiplyPrime32 = false\n    var isMultiplyPrime33 = false\n    var isMultiplyPrime34\
    \ = false\n    var isMultiplyPrime35 = false\n    var isMultiplyPrime36 = false\n\
    \    var isMultiplyPrime37 = false\n    var isMultiplyPrime38 = false\n    var\
    \ isMultiplyPrime39 = false\n    var isMultiplyPrime40 = false\n    var isMultiplyPrime41\
    \ = false\n    var isMultiplyPrime42 = false\n    var isMultiplyPrime43 = false\n\
    \    var isMultiplyPrime44 = false\n    var isMultiplyPrime45 = false\n    var\
    \ isMultiplyPrime46 = false\n    var isMultiplyPrime47 = false\n    var isMultiplyPrime48\
    \ = false\n    var isMultiplyPrime49 = false\n    var isMultiplyPrime50 = false\n\
    \    var isMultiplyPrime51 = false\n    var isMultiplyPrime52 = false\n    var\
    \ isMultiplyPrime53 = false\n    var isMultiplyPrime54 = false\n    var isMultiplyPrime55\
    \ = false\n    var isMultiplyPrime56 = false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpdgv3yl0t.swift:10:9: warning: initialization of variable 'isMultiplyPrime'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime = false\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpdgv3yl0t.swift:11:9:\
    \ warning: initialization of variable 'isMultiplyPrime2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime2 =\
    \ false\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpdgv3yl0t.swift:12:9: warning:\
    \ initialization of variable 'isMultiplyPrime3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime3 = false\n  \
    \  ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpdgv3yl0t.swift:13:9: warning: initialization\
    \ of variable 'isMultiplyPrime4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime4 = false\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpdgv3yl0t.swift:14:9: warning: initialization of variable 'isMultiplyPrime5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime5 = false\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpdgv3yl0t.swift:15:9:\
    \ warning: initialization of variable 'isMultiplyPrime6' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime6 =\
    \ false\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpdgv3yl0t.swift:16:9: warning:\
    \ initialization of variable 'isMultiplyPrime7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime7 = false\n  \
    \  ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpdgv3yl0t.swift:17:9: warning: initialization\
    \ of variable 'isMultiplyPrime8' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime8 = false\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpdgv3yl0t.swift:18:9: warning: initialization of variable 'isMultiplyPrime9'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime9 = false\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpdgv3yl0t.swift:19:9:\
    \ warning: initialization of variab"
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var primes = [Int]()\n\
    \    var primes_count = 100\n    var primes_sum = 0\n    var is_multiply_prime\
    \ = false\n    \n    for _ in 0..<primes_count {\n        primes.append(0)\n \
    \   }\n    \n    for _ in 0..<primes_count {\n        primes[Int(arc4random_uniform(UInt32(primes_sum)))]\
    \ += 1\n    }\n    \n    for _ in 0..<primes_count {\n        primes_sum += primes[Int(arc4random_uniform(UInt32(primes_sum)))]\n\
    \    }\n    \n    for _ in 0..<primes_count {\n        if primes[Int(arc4random_uniform(UInt32(primes_sum)))]\
    \ == 3 {\n            is_multiply_prime = true\n            break\n        }\n\
    \    }\n    \n    return is_multiply_prime\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpogj7yu_1.swift:20:20: error: cannot find 'arc4random_uniform' in\
    \ scope\n        primes[Int(arc4random_uniform(UInt32(primes_sum)))] += 1\n  \
    \                 ^~~~~~~~~~~~~~~~~~\n/tmp/tmpogj7yu_1.swift:24:34: error: cannot\
    \ find 'arc4random_uniform' in scope\n        primes_sum += primes[Int(arc4random_uniform(UInt32(primes_sum)))]\n\
    \                                 ^~~~~~~~~~~~~~~~~~\n/tmp/tmpogj7yu_1.swift:28:23:\
    \ error: cannot find 'arc4random_uniform' in scope\n        if primes[Int(arc4random_uniform(UInt32(primes_sum)))]\
    \ == 3 {\n                      ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824578
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = true\n \
    \   var primes = [Int]()\n    \n    for i in 1...100 {\n        if a % i == 0\
    \ {\n            primes.append(i)\n        }\n    }\n    \n    if primes.count\
    \ < 3 {\n        result = false\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmp5awdqiw_/tmp5awdqiw_.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50ebcbec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b50eb9b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b50eb9b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b50eb9b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5awdqiw_                        0x0000562139ca95f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b50ebeaa460 __libc_start_main +
    245

    6    tmp5awdqiw_                        0x0000562139ca9149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824578
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = true\n \
    \   var primes = [Int]()\n    var prime = 2 // first prime number\n    var prime_counter\
    \ = 2 // prime counter\n    var prime_counter2 = 2 // prime counter 2\n    var\
    \ prime_counter3 = 2 // prime counter 3\n    var prime_counter4 = 2 // prime counter\
    \ 4\n    var prime_counter5 = 2 // prime counter 5\n    var prime_counter6 = 2\
    \ // prime counter 6\n    var prime_counter7 = 2 // prime counter 7\n    var prime_counter8\
    \ = 2 // prime counter 8\n    var prime_counter9 = 2 // prime counter 9\n    var\
    \ prime_counter10 = 2 // prime counter 10\n    var prime_counter11 = 2 // prime\
    \ counter 11\n    var prime_counter12 = 2 // prime counter 12\n    var prime_counter13\
    \ = 2 // prime counter 13\n    var prime_counter14 = 2 // prime counter 14\n \
    \   var prime_counter15 = 2 // prime counter 15\n    var prime_counter16 = 2 //\
    \ prime counter 16\n    var prime_counter17 = 2 // prime counter 17\n    var prime_counter18\
    \ = 2 // prime counter 18\n    var prime_counter19 = 2 // prime counter 19\n \
    \   var prime_counter20 = 2 // prime counter 20\n    var prime_counter21 = 2 //\
    \ prime counter 21\n    var prime_counter22 = 2 // prime counter 22\n    var prime_counter23\
    \ = 2 // prime counter 23\n    var prime_counter24 = 2 // prime counter 24\n \
    \   var prime_counter25 = 2 // prime counter 25\n    var prime_counter26 = 2 //\
    \ prime counter 26\n    var prime_counter27 = 2 // prime counter 27\n    var prime_counter28\
    \ = 2 // prime counter 28\n    var prime_counter29 = 2 // prime counter 29\n \
    \   var prime_counter30 = 2 // prime counter 30\n    var prime_counter31 = 2 //\
    \ prime counter 31\n    var prime_counter32 = 2 // prime counter 32\n    var prime_counter33\
    \ = 2 // prime counter 33\n    var prime_counter34 = 2 // prime counter 34\n \
    \   var prime_counter35 = 2 // prime counter 35\n    var prime_counter36 = 2 //\
    \ prime counter 36\n    var prime_counter37 = 2 // prime counter 37\n    var prime_counter38\
    \ = 2 // prime counter 38\n    var prime_counter39 = 2 // prime counter 39\n \
    \   var prime_counter40 = 2 // prime counter 40\n    var prime_counter41 = 2 //\
    \ prime counter 41\n    var prime_counter42 = 2 // prime counter 42\n    var \n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmprouotm_9.swift:55:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmprouotm_9.swift:10:9: warning: initialization of variable 'result'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var result = true\n    ~~~~^~~~~~\n    _\n/tmp/tmprouotm_9.swift:11:9: warning:\
    \ initialization of variable 'primes' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var primes = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n/tmp/tmprouotm_9.swift:12:9: warning: initialization of variable 'prime'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var prime = 2 // first prime number\n    ~~~~^~~~~\n    _\n/tmp/tmprouotm_9.swift:13:9:\
    \ warning: initialization of variable 'prime_counter' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var prime_counter = 2 //\
    \ prime counter\n    ~~~~^~~~~~~~~~~~~\n    _\n/tmp/tmprouotm_9.swift:14:9: warning:\
    \ initialization of variable 'prime_counter2' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var prime_counter2 = 2 // prime counter\
    \ 2\n    ~~~~^~~~~~~~~~~~~~\n    _\n/tmp/tmprouotm_9.swift:15:9: warning: initialization\
    \ of variable 'prime_counter3' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var prime_counter3 = 2 // prime counter 3\n    ~~~~^~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmprouotm_9.swift:16:9: warning: initialization of variable 'prime_counter4'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var prime_counter4 = 2 // prime counter 4\n    ~~~~^~~~~~~~~~~~~~\n    _\n\
    /tmp/tmprouotm_9.swift:17:9: warning: initialization of variable 'prime_counter5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var prime_counter5 = 2 // prime counter 5\n    ~~~~^~~~~~~~~~~~~~\n    _\n\
    /tmp/tmprouotm_9.swift:18:9: warning: initialization of variable 'prime_counter6'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var prime_counter6 = 2 // prime counter 6\n    ~~~~^~~~~~~~~~~~~~\n    _\n\
    /tmp/tmprouot"
  stdout: ''
  timestamp: 1659824578
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = true\n \
    \   \n    for i in 2..100 {\n        if a % i == 0 {\n            result = false\n\
    \            break\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp5m_c8s1_.swift:12:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 2..100 {\n              ^~\n             \
    \ ...\n"
  stdout: ''
  timestamp: 1659824578
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 100 {\n      \
    \  return false\n    }\n    var primes = [Int]()\n    var prime: Int = 0\n   \
    \ var isPrime: Bool = false\n    var isMultiplication: Bool = false\n    var isMultiplicationPrime:\
    \ Bool = false\n    var isMultiplicationPrime2: Bool = false\n    var isMultiplicationPrime3:\
    \ Bool = false\n    var isMultiplicationPrime4: Bool = false\n    var isMultiplicationPrime5:\
    \ Bool = false\n    var isMultiplicationPrime6: Bool = false\n    var isMultiplicationPrime7:\
    \ Bool = false\n    var isMultiplicationPrime8: Bool = false\n    var isMultiplicationPrime9:\
    \ Bool = false\n    var isMultiplicationPrime10: Bool = false\n    var isMultiplicationPrime11:\
    \ Bool = false\n    var isMultiplicationPrime12: Bool = false\n    var isMultiplicationPrime13:\
    \ Bool = false\n    var isMultiplicationPrime14: Bool = false\n    var isMultiplicationPrime15:\
    \ Bool = false\n    var isMultiplicationPrime16: Bool = false\n    var isMultiplicationPrime17:\
    \ Bool = false\n    var isMultiplicationPrime18: Bool = false\n    var isMultiplicationPrime19:\
    \ Bool = false\n    var isMultiplicationPrime20: Bool = false\n    var isMultiplicationPrime21:\
    \ Bool = false\n    var isMultiplicationPrime22: Bool = false\n    var isMultiplicationPrime23:\
    \ Bool = false\n    var isMultiplicationPrime24: Bool = false\n    var isMultiplicationPrime25:\
    \ Bool = false\n    var isMultiplicationPrime26: Bool = false\n    var isMultiplicationPrime27:\
    \ Bool = false\n    var isMultiplicationPrime28: Bool = false\n    var isMultiplicationPrime29:\
    \ Bool = false\n    var isMultiplicationPrime30: Bool = false\n    var isMultiplicationPrime31:\
    \ Bool = false\n    var isMultiplicationPrime32: Bool = false\n    var isMultiplicationPrime33:\
    \ Bool = false\n    var isMultiplicationPrime34: Bool = false\n    var isMultiplicationPrime35:\
    \ Bool = false\n    var isMultiplicationPrime36: Bool = false\n    var isMultiplicationPrime37:\
    \ Bool = false\n    var isMultiplicationPrime38: Bool = false\n    var isMultiplicationPrime39:\
    \ Bool = false\n    var isMultiplicationPrime40\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpchikcm_1.swift:56:9: error: type annotation missing in pattern\n\
    \    var isMultiplicationPrime40\n        ^\n"
  stdout: ''
  timestamp: 1659824578
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = true\n \
    \   var primes = [Int]()\n    var prime: Int = 0\n    var isPrime: Bool = false\n\
    \    var isMultiplyPrime: Bool = false\n    var isMultiplyPrime2: Bool = false\n\
    \    var isMultiplyPrime3: Bool = false\n    var isMultiplyPrime4: Bool = false\n\
    \    var isMultiplyPrime5: Bool = false\n    var isMultiplyPrime6: Bool = false\n\
    \    var isMultiplyPrime7: Bool = false\n    var isMultiplyPrime8: Bool = false\n\
    \    var isMultiplyPrime9: Bool = false\n    var isMultiplyPrime10: Bool = false\n\
    \    var isMultiplyPrime11: Bool = false\n    var isMultiplyPrime12: Bool = false\n\
    \    var isMultiplyPrime13: Bool = false\n    var isMultiplyPrime14: Bool = false\n\
    \    var isMultiplyPrime15: Bool = false\n    var isMultiplyPrime16: Bool = false\n\
    \    var isMultiplyPrime17: Bool = false\n    var isMultiplyPrime18: Bool = false\n\
    \    var isMultiplyPrime19: Bool = false\n    var isMultiplyPrime20: Bool = false\n\
    \    var isMultiplyPrime21: Bool = false\n    var isMultiplyPrime22: Bool = false\n\
    \    var isMultiplyPrime23: Bool = false\n    var isMultiplyPrime24: Bool = false\n\
    \    var isMultiplyPrime25: Bool = false\n    var isMultiplyPrime26: Bool = false\n\
    \    var isMultiplyPrime27: Bool = false\n    var isMultiplyPrime28: Bool = false\n\
    \    var isMultiplyPrime29: Bool = false\n    var isMultiplyPrime30: Bool = false\n\
    \    var isMultiplyPrime31: Bool = false\n    var isMultiplyPrime32: Bool = false\n\
    \    var isMultiplyPrime33: Bool = false\n    var isMultiplyPrime34: Bool = false\n\
    \    var isMultiplyPrime35: Bool = false\n    var isMultiplyPrime36: Bool = false\n\
    \    var isMultiplyPrime37: Bool = false\n    var isMultiplyPrime38: Bool = false\n\
    \    var isMultiplyPrime39: Bool = false\n    var isMultiplyPrime40: Bool = false\n\
    \    var isMultiplyPrime41: Bool = false\n    var isMultiplyPrime42: Bool = false\n\
    \    var isMultiplyPrime43: Bool = false\n    var isMultiplyPrime44: Bool = false\n\
    \    var isMultiplyPrime45: \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpy795tg5r.swift:58:27: error: expected type\n    var isMultiplyPrime45:\
    \ \n                          ^\n                           <#type#>\n"
  stdout: ''
  timestamp: 1659824578
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var primes = [Int]()\n\
    \    var isMultiplyPrime = true\n    var isMultiplyPrime2 = true\n    var isMultiplyPrime3\
    \ = true\n    var isMultiplyPrime4 = true\n    var isMultiplyPrime5 = true\n \
    \   var isMultiplyPrime6 = true\n    var isMultiplyPrime7 = true\n    var isMultiplyPrime8\
    \ = true\n    var isMultiplyPrime9 = true\n    var isMultiplyPrime10 = true\n\
    \    var isMultiplyPrime11 = true\n    var isMultiplyPrime12 = true\n    var isMultiplyPrime13\
    \ = true\n    var isMultiplyPrime14 = true\n    var isMultiplyPrime15 = true\n\
    \    var isMultiplyPrime16 = true\n    var isMultiplyPrime17 = true\n    var isMultiplyPrime18\
    \ = true\n    var isMultiplyPrime19 = true\n    var isMultiplyPrime20 = true\n\
    \    var isMultiplyPrime21 = true\n    var isMultiplyPrime22 = true\n    var isMultiplyPrime23\
    \ = true\n    var isMultiplyPrime24 = true\n    var isMultiplyPrime25 = true\n\
    \    var isMultiplyPrime26 = true\n    var isMultiplyPrime27 = true\n    var isMultiplyPrime28\
    \ = true\n    var isMultiplyPrime29 = true\n    var isMultiplyPrime30 = true\n\
    \    var isMultiplyPrime31 = true\n    var isMultiplyPrime32 = true\n    var isMultiplyPrime33\
    \ = true\n    var isMultiplyPrime34 = true\n    var isMultiplyPrime35 = true\n\
    \    var isMultiplyPrime36 = true\n    var isMultiplyPrime37 = true\n    var isMultiplyPrime38\
    \ = true\n    var isMultiplyPrime39 = true\n    var isMultiplyPrime40 = true\n\
    \    var isMultiplyPrime41 = true\n    var isMultiplyPrime42 = true\n    var isMultiplyPrime43\
    \ = true\n    var isMultiplyPrime44 = true\n    var isMultiplyPrime45 = true\n\
    \    var isMultiplyPrime46 = true\n    var isMultiplyPrime47 = true\n    var isMultiplyPrime48\
    \ = true\n    var isMultiplyPrime49 = true\n    var isMultiplyPrime50 = true\n\
    \    var isMultiplyPrime51 = true\n    var isMultiplyPrime52 = true\n    var isMultiplyPrime53\
    \ = true\n    var isMultiplyPrime54 = true\n    var isMultiplyPrime55 = true\n\
    \    var is\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpxl6kitmy.swift:66:9: error: expected pattern\n    var is\n    \
    \    ^\n/tmp/tmpxl6kitmy.swift:10:9: warning: initialization of variable 'primes'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes = [Int]()\n    ~~~~^~~~~~\n    _\n/tmp/tmpxl6kitmy.swift:11:9:\
    \ warning: initialization of variable 'isMultiplyPrime' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime = true\n\
    \    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpxl6kitmy.swift:12:9: warning: initialization\
    \ of variable 'isMultiplyPrime2' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime2 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpxl6kitmy.swift:13:9: warning: initialization of variable 'isMultiplyPrime3'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime3 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpxl6kitmy.swift:14:9:\
    \ warning: initialization of variable 'isMultiplyPrime4' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime4 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpxl6kitmy.swift:15:9: warning:\
    \ initialization of variable 'isMultiplyPrime5' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime5 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpxl6kitmy.swift:16:9: warning: initialization\
    \ of variable 'isMultiplyPrime6' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime6 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpxl6kitmy.swift:17:9: warning: initialization of variable 'isMultiplyPrime7'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime7 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpxl6kitmy.swift:18:9:\
    \ warning: initialization of variable 'isMultiplyPrime8' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime8 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpxl6kitmy.swift:1"
  stdout: ''
  timestamp: 1659824578
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var primes = [Int]()\n\
    \    var primes_count = Int()\n    var i = Int()\n    var j = Int()\n    var k\
    \ = Int()\n    var l = Int()\n    var m = Int()\n    var n = Int()\n    var p\
    \ = Int()\n    var q = Int()\n    var r = Int()\n    var s = Int()\n    var t\
    \ = Int()\n    var u = Int()\n    var v = Int()\n    var w = Int()\n    var x\
    \ = Int()\n    var y = Int()\n    var z = Int()\n    var a = Int()\n    var b\
    \ = Int()\n    var c = Int()\n    var d = Int()\n    var e = Int()\n    var f\
    \ = Int()\n    var g = Int()\n    var h = Int()\n    var i = Int()\n    var j\
    \ = Int()\n    var k = Int()\n    var l = Int()\n    var m = Int()\n    var n\
    \ = Int()\n    var p = Int()\n    var q = Int()\n    var r = Int()\n    var s\
    \ = Int()\n    var t = Int()\n    var u = Int()\n    var v = Int()\n    var w\
    \ = Int()\n    var x = Int()\n    var y = Int()\n    var z = Int()\n    var a\
    \ = Int()\n    var b = Int()\n    var c = Int()\n    var d = Int()\n    var e\
    \ = Int()\n    var f = Int()\n    var g = Int()\n    var h = Int()\n    var i\
    \ = Int()\n    var j = Int()\n    var k = Int()\n    var l = Int()\n    var m\
    \ = Int()\n    var n = Int()\n    var p = Int()\n    var q = Int()\n    var r\
    \ = Int()\n    var s = Int()\n    var t = Int()\n    var u = Int()\n    var v\
    \ = Int()\n    var w = Int()\n    var x = Int()\n    var y = Int()\n    var z\
    \ = Int()\n    var a = Int()\n    var b = Int()\n    var c = Int()\n    var d\
    \ = Int()\n    var e = Int()\n    var f = Int()\n    var g = Int()\n    var h\
    \ = Int()\n    var i = Int()\n    var j = Int()\n    var k = Int()\n    var l\
    \ = Int()\n    var m = Int()\n    var n = Int()\n    var p = Int()\n    var q\
    \ = Int()\n    var r = Int()\n    var s = Int()\n    var t = Int()\n    var u\
    \ = Int()\n    var v = Int()\n    var w = Int()\n    var x = Int()\n    var y\
    \ = Int()\n    var z = Int()\n    var a = Int()\n    var b = Int()\n    var c\
    \ = Int()\n    var d = Int()\n    var e = Int()\n    var f = Int()\n    var g\
    \ = Int()\n    var h = Int\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpiph7owa3.swift:37:9: error: invalid redeclaration of 'i'\n    var\
    \ i = Int()\n        ^\n/tmp/tmpiph7owa3.swift:12:9: note: 'i' previously declared\
    \ here\n    var i = Int()\n        ^\n/tmp/tmpiph7owa3.swift:38:9: error: invalid\
    \ redeclaration of 'j'\n    var j = Int()\n        ^\n/tmp/tmpiph7owa3.swift:13:9:\
    \ note: 'j' previously declared here\n    var j = Int()\n        ^\n/tmp/tmpiph7owa3.swift:39:9:\
    \ error: invalid redeclaration of 'k'\n    var k = Int()\n        ^\n/tmp/tmpiph7owa3.swift:14:9:\
    \ note: 'k' previously declared here\n    var k = Int()\n        ^\n/tmp/tmpiph7owa3.swift:40:9:\
    \ error: invalid redeclaration of 'l'\n    var l = Int()\n        ^\n/tmp/tmpiph7owa3.swift:15:9:\
    \ note: 'l' previously declared here\n    var l = Int()\n        ^\n/tmp/tmpiph7owa3.swift:41:9:\
    \ error: invalid redeclaration of 'm'\n    var m = Int()\n        ^\n/tmp/tmpiph7owa3.swift:16:9:\
    \ note: 'm' previously declared here\n    var m = Int()\n        ^\n/tmp/tmpiph7owa3.swift:42:9:\
    \ error: invalid redeclaration of 'n'\n    var n = Int()\n        ^\n/tmp/tmpiph7owa3.swift:17:9:\
    \ note: 'n' previously declared here\n    var n = Int()\n        ^\n/tmp/tmpiph7owa3.swift:43:9:\
    \ error: invalid redeclaration of 'p'\n    var p = Int()\n        ^\n/tmp/tmpiph7owa3.swift:18:9:\
    \ note: 'p' previously declared here\n    var p = Int()\n        ^\n/tmp/tmpiph7owa3.swift:44:9:\
    \ error: invalid redeclaration of 'q'\n    var q = Int()\n        ^\n/tmp/tmpiph7owa3.swift:19:9:\
    \ note: 'q' previously declared here\n    var q = Int()\n        ^\n/tmp/tmpiph7owa3.swift:45:9:\
    \ error: invalid redeclaration of 'r'\n    var r = Int()\n        ^\n/tmp/tmpiph7owa3.swift:20:9:\
    \ note: 'r' previously declared here\n    var r = Int()\n        ^\n/tmp/tmpiph7owa3.swift:46:9:\
    \ error: invalid redeclaration of 's'\n    var s = Int()\n        ^\n/tmp/tmpiph7owa3.swift:21:9:\
    \ note: 's' previously declared here\n    var s = Int()\n        ^\n/tmp/tmpiph7owa3.swift:47:9:\
    \ error: invalid redeclaration of 't'\n    var t = Int()\n        ^\n/tmp/tmpiph7owa3.swift:22:9:\
    \ note: 't' previously declared here\n    var t = Int()\n        ^\n/tmp/tmpiph7o"
  stdout: ''
  timestamp: 1659824578
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 100 {\n      \
    \  return false\n    }\n    var primes = [Int]()\n    var prime: Int = 0\n   \
    \ var i: Int = 0\n    var j: Int = 0\n    var k = 0\n    var l = 0\n    var m\
    \ = 0\n    var n = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s =\
    \ 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n\
    \    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n \
    \   var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n  \
    \  var i = 1\n    var j = 1\n    var k = 1\n    var l = 1\n    var m = 1\n   \
    \ var n = 2\n    var p = 3\n    var q = 5\n    var r = 7\n    var s = 11\n   \
    \ var t = 13\n    var u = 17\n    var v = 19\n    var w = 23\n    var x = 29\n\
    \    var y = 41\n    var z = 53\n    var a = 59\n    var b = 61\n    var c = 67\n\
    \    var d = 71\n    var e = 79\n    var f = 83\n    var g = 89\n    var h = 97\n\
    \    var i = 101\n    var j = 107\n    var k = 113\n    var l = 119\n    var m\
    \ = 143\n    var n = 149\n    var p = 151\n    var q = 157\n    var r = 163\n\
    \    var s = 167\n    var t = 173\n    var u = 179\n    var v = 181\n    var w\
    \ = 191\n    var x = 193\n    var y = 197\n    var z = 203\n    var a = 209\n\
    \    var b = 215\n    var c = 223\n    var d = 227\n    var e = 231\n    var f\
    \ = 237\n    var g = 241\n    var h = 247\n    var i = 251\n    var j = 257\n\
    \    var k = 263\n    var l = 269\n    var m = 271\n    var n = 277\n    var p\
    \ = 283\n    var q = 289\n    var r = 293\n    var s = 307\n    var t = 313\n\
    \    var u = 317\n    var v = 319\n    var w = 321\n    var x = 329\n    var y\
    \ = 333\n    var z = 339\n    var a = 355\n    var b = 358\n    var c = 364\n\
    \    var d = 369\n    var e = 373\n    var f = 378\n    var g = 382\n    var h\
    \ = 388\n    var i = 394\n    var j = 399\n    var k = 405\n    var l = 409\n\
    \    var m = 413\n    var n = 417\n    var p = 421\n    var q = 427\n    var r\
    \ = 431\n    var s = 437\n    var t = 441\n    var u = 445\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp33jr0o4l.swift:40:9: error: invalid redeclaration of 'i'\n    var\
    \ i = 1\n        ^\n/tmp/tmp33jr0o4l.swift:15:9: note: 'i' previously declared\
    \ here\n    var i: Int = 0\n        ^\n/tmp/tmp33jr0o4l.swift:41:9: error: invalid\
    \ redeclaration of 'j'\n    var j = 1\n        ^\n/tmp/tmp33jr0o4l.swift:16:9:\
    \ note: 'j' previously declared here\n    var j: Int = 0\n        ^\n/tmp/tmp33jr0o4l.swift:42:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 1\n        ^\n/tmp/tmp33jr0o4l.swift:17:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmp33jr0o4l.swift:43:9:\
    \ error: invalid redeclaration of 'l'\n    var l = 1\n        ^\n/tmp/tmp33jr0o4l.swift:18:9:\
    \ note: 'l' previously declared here\n    var l = 0\n        ^\n/tmp/tmp33jr0o4l.swift:44:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 1\n        ^\n/tmp/tmp33jr0o4l.swift:19:9:\
    \ note: 'm' previously declared here\n    var m = 0\n        ^\n/tmp/tmp33jr0o4l.swift:45:9:\
    \ error: invalid redeclaration of 'n'\n    var n = 2\n        ^\n/tmp/tmp33jr0o4l.swift:20:9:\
    \ note: 'n' previously declared here\n    var n = 0\n        ^\n/tmp/tmp33jr0o4l.swift:46:9:\
    \ error: invalid redeclaration of 'p'\n    var p = 3\n        ^\n/tmp/tmp33jr0o4l.swift:21:9:\
    \ note: 'p' previously declared here\n    var p = 0\n        ^\n/tmp/tmp33jr0o4l.swift:47:9:\
    \ error: invalid redeclaration of 'q'\n    var q = 5\n        ^\n/tmp/tmp33jr0o4l.swift:22:9:\
    \ note: 'q' previously declared here\n    var q = 0\n        ^\n/tmp/tmp33jr0o4l.swift:48:9:\
    \ error: invalid redeclaration of 'r'\n    var r = 7\n        ^\n/tmp/tmp33jr0o4l.swift:23:9:\
    \ note: 'r' previously declared here\n    var r = 0\n        ^\n/tmp/tmp33jr0o4l.swift:49:9:\
    \ error: invalid redeclaration of 's'\n    var s = 11\n        ^\n/tmp/tmp33jr0o4l.swift:24:9:\
    \ note: 's' previously declared here\n    var s = 0\n        ^\n/tmp/tmp33jr0o4l.swift:50:9:\
    \ error: invalid redeclaration of 't'\n    var t = 13\n        ^\n/tmp/tmp33jr0o4l.swift:25:9:\
    \ note: 't' previously declared here\n    var t = 0\n        ^\n/tmp/tmp33jr0o4l.swift:51:9:\
    \ error: invalid redeclaration of 'u'\n    var u = 17\n        ^"
  stdout: ''
  timestamp: 1659824578
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 100 {\n      \
    \  return false\n    }\n    \n    var primes = [Int]()\n    \n    for n in 2...a\
    \ / 2 {\n        if a % n == 0 {\n            primes.append(n)\n        }\n  \
    \  }\n    \n    for n in 2...a / 2 {\n        if primes.contains(n) && a % n ==\
    \ 0 {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpww0grhvb/tmpww0grhvb.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4f6c6c0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4f6c3b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4f6c3b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4f6c3b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpww0grhvb                        0x000056227a279517 <unavailable> + 5399

    5    libc.so.6                          0x00002b4f6c8ac460 __libc_start_main +
    245

    6    tmpww0grhvb                        0x000056227a279159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1659824578
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var isMultiplyPrime =\
    \ false\n    var isMultiplyPrime2 = false\n    var isMultiplyPrime3 = false\n\
    \    var isMultiplyPrime4 = false\n    var isMultiplyPrime5 = false\n    var isMultiplyPrime6\
    \ = false\n    var isMultiplyPrime7 = false\n    var isMultiplyPrime8 = false\n\
    \    var isMultiplyPrime9 = false\n    var isMultiplyPrime10 = false\n    var\
    \ isMultiplyPrime11 = false\n    var isMultiplyPrime12 = false\n    var isMultiplyPrime13\
    \ = false\n    var isMultiplyPrime14 = false\n    var isMultiplyPrime15 = false\n\
    \    var isMultiplyPrime16 = false\n    var isMultiplyPrime17 = false\n    var\
    \ isMultiplyPrime18 = false\n    var isMultiplyPrime19 = false\n    var isMultiplyPrime20\
    \ = false\n    var isMultiplyPrime21 = false\n    var isMultiplyPrime22 = false\n\
    \    var isMultiplyPrime23 = false\n    var isMultiplyPrime24 = false\n    var\
    \ isMultiplyPrime25 = false\n    var isMultiplyPrime26 = false\n    var isMultiplyPrime27\
    \ = false\n    var isMultiplyPrime28 = false\n    var isMultiplyPrime29 = false\n\
    \    var isMultiplyPrime30 = false\n    var isMultiplyPrime31 = false\n    var\
    \ isMultiplyPrime32 = false\n    var isMultiplyPrime33 = false\n    var isMultiplyPrime34\
    \ = false\n    var isMultiplyPrime35 = false\n    var isMultiplyPrime36 = false\n\
    \    var isMultiplyPrime37 = false\n    var isMultiplyPrime38 = false\n    var\
    \ isMultiplyPrime39 = false\n    var isMultiplyPrime40 = false\n    var isMultiplyPrime41\
    \ = false\n    var isMultiplyPrime42 = false\n    var isMultiplyPrime43 = false\n\
    \    var isMultiplyPrime44 = false\n    var isMultiplyPrime45 = false\n    var\
    \ isMultiplyPrime46 = false\n    var isMultiplyPrime47 = false\n    var isMultiplyPrime48\
    \ = false\n    var isMultiplyPrime49 = false\n    var isMultiplyPrime50 = false\n\
    \    var isMultiplyPrime51 = false\n    var isMultiplyPrime52 = false\n    var\
    \ isMultiplyPrime53 = false\n    var isMultiplyPrime54 = false\n    var isMultiplyPrime55\
    \ = false\n    var isMultiplyPrime56 = false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpdgv3yl0t.swift:10:9: warning: initialization of variable 'isMultiplyPrime'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime = false\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpdgv3yl0t.swift:11:9:\
    \ warning: initialization of variable 'isMultiplyPrime2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime2 =\
    \ false\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpdgv3yl0t.swift:12:9: warning:\
    \ initialization of variable 'isMultiplyPrime3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime3 = false\n  \
    \  ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpdgv3yl0t.swift:13:9: warning: initialization\
    \ of variable 'isMultiplyPrime4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime4 = false\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpdgv3yl0t.swift:14:9: warning: initialization of variable 'isMultiplyPrime5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime5 = false\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpdgv3yl0t.swift:15:9:\
    \ warning: initialization of variable 'isMultiplyPrime6' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime6 =\
    \ false\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpdgv3yl0t.swift:16:9: warning:\
    \ initialization of variable 'isMultiplyPrime7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime7 = false\n  \
    \  ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpdgv3yl0t.swift:17:9: warning: initialization\
    \ of variable 'isMultiplyPrime8' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime8 = false\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpdgv3yl0t.swift:18:9: warning: initialization of variable 'isMultiplyPrime9'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime9 = false\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpdgv3yl0t.swift:19:9:\
    \ warning: initialization of variab"
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    guard a > 100 else {\n\
    \        return false\n    }\n    \n    var result = true\n    var primes = [Int]()\n\
    \    \n    for number in stride(from: 2, through: a, by: 2) {\n        guard number\
    \ % 2 == 0 else {\n            return false\n        }\n        \n        for\
    \ prime in stride(from: 2, through: Int(sqrt(number)), by: 2) {\n            if\
    \ number % prime == 0 {\n                result = false\n                break\n\
    \            }\n        }\n        \n        if result {\n            primes.append(number)\n\
    \        }\n    }\n    \n    return primes.count >= 3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp72wymz3m.swift:22:51: error: cannot find 'sqrt' in scope\n    \
    \    for prime in stride(from: 2, through: Int(sqrt(number)), by: 2) {\n     \
    \                                             ^~~~\n"
  stdout: ''
  timestamp: 1659824578
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 100 {\n      \
    \  return false\n    }\n    \n    var primes = [Int]()\n    var prime: Int = 0\n\
    \    var isPrime = true\n    \n    for _ in 0..<100 {\n        prime = a / prime\n\
    \        \n        if prime % 3 == 0 {\n            primes.append(prime)\n   \
    \     }\n        \n        if prime % 2 == 0 {\n            primes.append(prime)\n\
    \        }\n        \n        if prime % 5 == 0 {\n            primes.append(prime)\n\
    \        }\n        \n        if prime % 7 == 0 {\n            primes.append(prime)\n\
    \        }\n        \n        if prime % 11 == 0 {\n            primes.append(prime)\n\
    \        }\n        \n        if prime % 13 == 0 {\n            primes.append(prime)\n\
    \        }\n        \n        if prime % 17 == 0 {\n            primes.append(prime)\n\
    \        }\n        \n        if prime % 19 == 0 {\n            primes.append(prime)\n\
    \        }\n        \n        if prime % 23 == 0 {\n            primes.append(prime)\n\
    \        }\n        \n        if prime % 29 == 0 {\n            primes.append(prime)\n\
    \        }\n        \n        if prime % 31 == 0 {\n            primes.append(prime)\n\
    \        }\n        \n        if prime % 37 == 0 {\n            primes.append(prime)\n\
    \        }\n        \n        if prime % 41 == 0 {\n            primes.append(prime)\n\
    \        }\n        \n        if prime % 43 == 0 {\n            primes.append(prime)\n\
    \        }\n        \n        if prime % 47 == 0 {\n            primes.append(prime)\n\
    \        }\n        \n        if prime % 53 == 0 {\n            primes.append(prime)\n\
    \        }\n        \n        if prime % 59 == 0 {\n            primes.append(prime)\n\
    \        }\n        \n        if prime % 61 == 0 {\n            primes.append(prime)\n\
    \        }\n        \n        if prime % 67 == 0 {\n            primes.append(prime)\n\
    \        }\n        \n        if prime % 71 == 0 {\n            primes.append(prime)\n\
    \        }\n        \n        if prime % 73 == 0 {\n            primes.append(prime)\n\
    \        }\n        \n        if prime % 79 == 0 {\n            primes.append(prime)\n\
    \        }\n        \n        if prime % 83 == 0 {\n            primes.append(prime)\n\
    \        }\n        \n        if prime % 89 == 0 {\n            primes.append(prime)\n\
    \        }\n        \n        if prime % 97 == 0 {\n            primes.append(prime)\n\
    \        }\n        \n        if prime % 103 == 0 {\n            primes.append(prime)\n\
    \        }\n        \n        if prime % 109 == 0 {\n            primes.append(prime)\n\
    \        }\n        \n        if prime % 11\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp1evtbxev.swift:129:22: error: expected '{' after 'if' condition\n\
    \        if prime % 11\n                     ^\n/tmp/tmp1evtbxev.swift:154:43:\
    \ error: expected '}' at end of brace statement\nassert(is_multiply_prime(a: 1001)\
    \ == true)\n                                          ^\n/tmp/tmp1evtbxev.swift:9:40:\
    \ note: to match this opening '{'\nfunc is_multiply_prime(a: Int) -> Bool {\n\
    \                                       ^\n/tmp/tmp1evtbxev.swift:129:18: error:\
    \ type 'Int' cannot be used as a boolean; test for '!= 0' instead\n        if\
    \ prime % 11\n                 ^\n           ((        ) != 0)\n/tmp/tmp1evtbxev.swift:133:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824578
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var primes = [Int]()\n\
    \    var isMultiplyPrime = true\n    var isMultiplyPrime2 = true\n    var isMultiplyPrime3\
    \ = true\n    var isMultiplyPrime4 = true\n    var isMultiplyPrime5 = true\n \
    \   var isMultiplyPrime6 = true\n    var isMultiplyPrime7 = true\n    var isMultiplyPrime8\
    \ = true\n    var isMultiplyPrime9 = true\n    var isMultiplyPrime10 = true\n\
    \    var isMultiplyPrime11 = true\n    var isMultiplyPrime12 = true\n    var isMultiplyPrime13\
    \ = true\n    var isMultiplyPrime14 = true\n    var isMultiplyPrime15 = true\n\
    \    var isMultiplyPrime16 = true\n    var isMultiplyPrime17 = true\n    var isMultiplyPrime18\
    \ = true\n    var isMultiplyPrime19 = true\n    var isMultiplyPrime20 = true\n\
    \    var isMultiplyPrime21 = true\n    var isMultiplyPrime22 = true\n    var isMultiplyPrime23\
    \ = true\n    var isMultiplyPrime24 = true\n    var isMultiplyPrime25 = true\n\
    \    var isMultiplyPrime26 = true\n    var isMultiplyPrime27 = true\n    var isMultiplyPrime28\
    \ = true\n    var isMultiplyPrime29 = true\n    var isMultiplyPrime30 = true\n\
    \    var isMultiplyPrime31 = true\n    var isMultiplyPrime32 = true\n    var isMultiplyPrime33\
    \ = true\n    var isMultiplyPrime34 = true\n    var isMultiplyPrime35 = true\n\
    \    var isMultiplyPrime36 = true\n    var isMultiplyPrime37 = true\n    var isMultiplyPrime38\
    \ = true\n    var isMultiplyPrime39 = true\n    var isMultiplyPrime40 = true\n\
    \    var isMultiplyPrime41 = true\n    var isMultiplyPrime42 = true\n    var isMultiplyPrime43\
    \ = true\n    var isMultiplyPrime44 = true\n    var isMultiplyPrime45 = true\n\
    \    var isMultiplyPrime46 = true\n    var isMultiplyPrime47 = true\n    var isMultiplyPrime48\
    \ = true\n    var isMultiplyPrime49 = true\n    var isMultiplyPrime50 = true\n\
    \    var isMultiplyPrime51 = true\n    var isMultiplyPrime52 = true\n    var isMultiplyPrime53\
    \ = true\n    var isMultiplyPrime54 = true\n    var isMultiplyPrime55 = true\n\
    \    var is\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpxl6kitmy.swift:66:9: error: expected pattern\n    var is\n    \
    \    ^\n/tmp/tmpxl6kitmy.swift:10:9: warning: initialization of variable 'primes'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes = [Int]()\n    ~~~~^~~~~~\n    _\n/tmp/tmpxl6kitmy.swift:11:9:\
    \ warning: initialization of variable 'isMultiplyPrime' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime = true\n\
    \    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpxl6kitmy.swift:12:9: warning: initialization\
    \ of variable 'isMultiplyPrime2' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime2 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpxl6kitmy.swift:13:9: warning: initialization of variable 'isMultiplyPrime3'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime3 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpxl6kitmy.swift:14:9:\
    \ warning: initialization of variable 'isMultiplyPrime4' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime4 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpxl6kitmy.swift:15:9: warning:\
    \ initialization of variable 'isMultiplyPrime5' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime5 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpxl6kitmy.swift:16:9: warning: initialization\
    \ of variable 'isMultiplyPrime6' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime6 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpxl6kitmy.swift:17:9: warning: initialization of variable 'isMultiplyPrime7'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime7 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpxl6kitmy.swift:18:9:\
    \ warning: initialization of variable 'isMultiplyPrime8' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime8 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpxl6kitmy.swift:1"
  stdout: ''
  timestamp: 1659824578
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = true\n \
    \   var primes = [Int]()\n    var prime_numbers = [Int]()\n    var prime_numbers_count\
    \ = Int()\n    \n    // Get prime numbers from 2 to 100\n    for i in 2...100\
    \ {\n        primes.append(i)\n    }\n    \n    // Get prime numbers from 2 to\
    \ a\n    for i in 2...a {\n        prime_numbers.append(i)\n    }\n    \n    //\
    \ Get prime numbers from 2 to a\n    for i in 2...a {\n        if prime_numbers.contains(i)\
    \ {\n            prime_numbers_count = prime_numbers_count + 1\n        }\n  \
    \  }\n    \n    if prime_numbers_count == 3 {\n        result = true\n    } else\
    \ {\n        result = false\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmper2chbsb/tmper2chbsb.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2782c53c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b278294ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b278294a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b27829497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmper2chbsb                        0x000055b369ae2517 <unavailable> + 5399

    5    libc.so.6                          0x00002b2782e3f460 __libc_start_main +
    245

    6    tmper2chbsb                        0x000055b369ae2159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1659824578
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 100 {\n      \
    \  return false\n    }\n    var primes = [Int]()\n    var primes_count = 100\n\
    \    var primes_sum = 0\n    var primes_sum2 = 0\n    var primes_sum3 = 0\n  \
    \  var primes_sum4 = 0\n    var primes_sum5 = 0\n    var primes_sum6 = 0\n   \
    \ var primes_sum7 = 0\n    var primes_sum8 = 0\n    var primes_sum9 = 0\n    var\
    \ primes_sum10 = 0\n    var primes_sum11 = 0\n    var primes_sum12 = 0\n    var\
    \ primes_sum13 = 0\n    var primes_sum14 = 0\n    var primes_sum15 = 0\n    var\
    \ primes_sum16 = 0\n    var primes_sum17 = 0\n    var primes_sum18 = 0\n    var\
    \ primes_sum19 = 0\n    var primes_sum20 = 0\n    var primes_sum21 = 0\n    var\
    \ primes_sum22 = 0\n    var primes_sum23 = 0\n    var primes_sum24 = 0\n    var\
    \ primes_sum25 = 0\n    var primes_sum26 = 0\n    var primes_sum27 = 0\n    var\
    \ primes_sum28 = 0\n    var primes_sum29 = 0\n    var primes_sum30 = 0\n    var\
    \ primes_sum31 = 0\n    var primes_sum32 = 0\n    var primes_sum33 = 0\n    var\
    \ primes_sum34 = 0\n    var primes_sum35 = 0\n    var primes_sum36 = 0\n    var\
    \ primes_sum37 = 0\n    var primes_sum38 = 0\n    var primes_sum39 = 0\n    var\
    \ primes_sum40 = 0\n    var primes_sum41 = 0\n    var primes_sum42 = 0\n    var\
    \ primes_sum43 = 0\n    var primes_sum44 = 0\n    var primes_sum45 = 0\n    var\
    \ primes_sum46 = 0\n    var primes_sum47 = 0\n    var primes_sum48 = 0\n    var\
    \ primes_sum49 = 0\n    var primes_sum50 = 0\n    var primes_sum51 = 0\n    var\
    \ primes_sum52 = 0\n    var primes_sum53 = 0\n    var primes_sum54 = 0\n    var\
    \ primes_sum55 = 0\n    var primes_sum56 = 0\n    var primes_sum57 = 0\n    var\
    \ primes_sum58 = 0\n    var primes_sum59 = 0\n    var primes_sum60 = 0\n    var\
    \ primes_sum61 = 0\n    var primes_sum62 = 0\n    var primes_sum63 = 0\n    var\
    \ primes_sum64 = 0\n    var primes_sum65 = 0\n    var primes_sum66 = 0\n    var\
    \ primes_sum67 = 0\n    var primes_sum68 = 0\n    var primes_sum69 = 0\n    var\
    \ primes_sum70 = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmphawwsyhz.swift:13:9: warning: initialization of variable 'primes'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes = [Int]()\n    ~~~~^~~~~~\n    _\n/tmp/tmphawwsyhz.swift:14:9:\
    \ warning: initialization of variable 'primes_count' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var primes_count = 100\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:15:9: warning: initialization\
    \ of variable 'primes_sum' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var primes_sum = 0\n    ~~~~^~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:16:9:\
    \ warning: initialization of variable 'primes_sum2' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum2 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmphawwsyhz.swift:17:9: warning: initialization of variable 'primes_sum3'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum3 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:18:9:\
    \ warning: initialization of variable 'primes_sum4' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum4 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmphawwsyhz.swift:19:9: warning: initialization of variable 'primes_sum5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum5 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:20:9:\
    \ warning: initialization of variable 'primes_sum6' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum6 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmphawwsyhz.swift:21:9: warning: initialization of variable 'primes_sum7'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum7 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:22:9:\
    \ warning: initialization of variable 'primes_sum8' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum8 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmphawwsyhz.swift:23:9: warnin"
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 100 {\n      \
    \  return false\n    }\n    \n    var primes = [Int]()\n    var primes_count =\
    \ Int(0)\n    \n    for n in 2..<Int(sqrt(a)) {\n        if a % n == 0 {\n   \
    \         primes.append(n)\n            primes_count = primes_count + 1\n    \
    \    }\n    }\n    \n    if primes_count == 3 {\n        return true\n    }\n\
    \    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpvepym3bm.swift:17:22: error: cannot find 'sqrt' in scope\n    for\
    \ n in 2..<Int(sqrt(a)) {\n                     ^~~~\n"
  stdout: ''
  timestamp: 1659824578
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = true\n \
    \   \n    for i in 2...a / 2 {\n        if a % i == 0 {\n            result =\
    \ false\n            break\n        }\n    }\n    \n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpilewb0p0/tmpilewb0p0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b756de37c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b756db2eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b756db2e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b756db2d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpilewb0p0                        0x0000562680d59333 <unavailable> + 4915

    5    libc.so.6                          0x00002b756e023460 __libc_start_main +
    245

    6    tmpilewb0p0                        0x0000562680d58fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824578
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    if a < 100 {\n        for var i = 2; i < a; i++ {\n            if a % i ==\
    \ 0 {\n                result = true\n                break\n            }\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpe2ywrdr9.swift:12:9: error: C-style for statement has been removed\
    \ in Swift 3\n        for var i = 2; i < a; i++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824578
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var primes = [Int]()\n\
    \    var prime_numbers = [Int]()\n    var prime_numbers_count = Int()\n    var\
    \ prime_numbers_count_max = Int()\n    var prime_numbers_count_min = Int()\n \
    \   var prime_numbers_count_max_prime = Int()\n    var prime_numbers_count_min_prime\
    \ = Int()\n    var prime_numbers_count_max_prime_prime = Int()\n    var prime_numbers_count_min_prime_prime\
    \ = Int()\n    var prime_numbers_count_max_prime_prime_prime = Int()\n    var\
    \ prime_numbers_count_min_prime_prime_prime = Int()\n    var prime_numbers_count_max_prime_prime_prime_prime\
    \ = Int()\n    var prime_numbers_count_min_prime_prime_prime_prime = Int()\n \
    \   var prime_numbers_count_max_prime_prime_prime_prime_prime = Int()\n    var\
    \ prime_numbers_count_min_prime_prime_prime_prime_prime = Int()\n    var prime_numbers_count_max_prime_prime_prime_prime_prime_prime\
    \ = Int()\n    var prime_numbers_count_min_prime_prime_prime_prime_prime_prime\
    \ = Int()\n    var prime_numbers_count_max_prime_prime_prime_prime_prime_prime_prime\
    \ = Int()\n    var prime_numbers_count_min_prime_prime_prime_prime_prime_prime_prime\
    \ = Int()\n    var prime_numbers_count_max_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Int()\n    var prime_numbers_count_min_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Int()\n    var prime_numbers_count_max_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Int()\n    var prime_numbers_count_min_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Int()\n    var prime_numbers_count_max_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Int()\n    var prime_numbers_count_min_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Int()\n    var prime_numbers_count_max_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Int()\n    var prime_numbers_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmptv_lf2a5.swift:33:9: error: invalid redeclaration of 'prime_numbers_count_max_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime'\n\
    \    var prime_numbers_count_max_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Int()\n        ^\n/tmp/tmptv_lf2a5.swift:31:9: note: 'prime_numbers_count_max_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime'\
    \ previously declared here\n    var prime_numbers_count_max_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Int()\n        ^\n/tmp/tmptv_lf2a5.swift:36:9: error: type annotation missing\
    \ in pattern\n    var prime_numbers_\n        ^\n"
  stdout: ''
  timestamp: 1659824578
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 100 {\n      \
    \  return false\n    }\n    \n    var primes = [Int]()\n    var primes_count =\
    \ Int(0)\n    \n    for number in stride(from: 2, through: a, by: 2) {\n     \
    \   if number % 2 == 0 {\n            continue\n        }\n        \n        for\
    \ prime in stride(from: 3, through: Int(sqrt(number)), by: 2) {\n            if\
    \ number % prime == 0 {\n                break\n            }\n            \n\
    \            primes.append(prime)\n            primes_count += 1\n        }\n\
    \    }\n    \n    if primes_count == 3 {\n        return true\n    }\n    \n \
    \   return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpkywlx6xi.swift:22:51: error: cannot find 'sqrt' in scope\n    \
    \    for prime in stride(from: 3, through: Int(sqrt(number)), by: 2) {\n     \
    \                                             ^~~~\n"
  stdout: ''
  timestamp: 1659824578
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    \n    if a < 100 {\n        for var i = 2; i < a; i++ {\n            if a\
    \ % i == 0 {\n                result = true\n                break\n         \
    \   }\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7n6g5sed.swift:13:9: error: C-style for statement has been removed\
    \ in Swift 3\n        for var i = 2; i < a; i++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var isMultiplyPrime =\
    \ true\n    var isMultiplyPrime2 = true\n    var isMultiplyPrime3 = true\n   \
    \ var isMultiplyPrime4 = true\n    var isMultiplyPrime5 = true\n    var isMultiplyPrime6\
    \ = true\n    var isMultiplyPrime7 = true\n    var isMultiplyPrime8 = true\n \
    \   var isMultiplyPrime9 = true\n    var isMultiplyPrime10 = true\n    var isMultiplyPrime11\
    \ = true\n    var isMultiplyPrime12 = true\n    var isMultiplyPrime13 = true\n\
    \    var isMultiplyPrime14 = true\n    var isMultiplyPrime15 = true\n    var isMultiplyPrime16\
    \ = true\n    var isMultiplyPrime17 = true\n    var isMultiplyPrime18 = true\n\
    \    var isMultiplyPrime19 = true\n    var isMultiplyPrime20 = true\n    var isMultiplyPrime21\
    \ = true\n    var isMultiplyPrime22 = true\n    var isMultiplyPrime23 = true\n\
    \    var isMultiplyPrime24 = true\n    var isMultiplyPrime25 = true\n    var isMultiplyPrime26\
    \ = true\n    var isMultiplyPrime27 = true\n    var isMultiplyPrime28 = true\n\
    \    var isMultiplyPrime29 = true\n    var isMultiplyPrime30 = true\n    var isMultiplyPrime31\
    \ = true\n    var isMultiplyPrime32 = true\n    var isMultiplyPrime33 = true\n\
    \    var isMultiplyPrime34 = true\n    var isMultiplyPrime35 = true\n    var isMultiplyPrime36\
    \ = true\n    var isMultiplyPrime37 = true\n    var isMultiplyPrime38 = true\n\
    \    var isMultiplyPrime39 = true\n    var isMultiplyPrime40 = true\n    var isMultiplyPrime41\
    \ = true\n    var isMultiplyPrime42 = true\n    var isMultiplyPrime43 = true\n\
    \    var isMultiplyPrime44 = true\n    var isMultiplyPrime45 = true\n    var isMultiplyPrime46\
    \ = true\n    var isMultiplyPrime47 = true\n    var isMultiplyPrime48 = true\n\
    \    var isMultiplyPrime49 = true\n    var isMultiplyPrime50 = true\n    var isMultiplyPrime51\
    \ = true\n    var isMultiplyPrime52 = true\n    var isMultiplyPrime53 = true\n\
    \    var isMultiplyPrime54 = true\n    var isMultiplyPrime55 = true\n    var isMultiplyPrime56\
    \ = true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpaj_uqgea.swift:10:9: warning: initialization of variable 'isMultiplyPrime'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime = true\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpaj_uqgea.swift:11:9:\
    \ warning: initialization of variable 'isMultiplyPrime2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime2 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpaj_uqgea.swift:12:9: warning:\
    \ initialization of variable 'isMultiplyPrime3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime3 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpaj_uqgea.swift:13:9: warning: initialization\
    \ of variable 'isMultiplyPrime4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime4 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpaj_uqgea.swift:14:9: warning: initialization of variable 'isMultiplyPrime5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime5 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpaj_uqgea.swift:15:9:\
    \ warning: initialization of variable 'isMultiplyPrime6' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime6 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpaj_uqgea.swift:16:9: warning:\
    \ initialization of variable 'isMultiplyPrime7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime7 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpaj_uqgea.swift:17:9: warning: initialization\
    \ of variable 'isMultiplyPrime8' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime8 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpaj_uqgea.swift:18:9: warning: initialization of variable 'isMultiplyPrime9'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime9 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpaj_uqgea.swift:19:9:\
    \ warning: initialization of variable 'isMul"
  stdout: ''
  timestamp: 1659824578
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 100 {\n      \
    \  return false\n    }\n    \n    var primes = [Int]()\n    \n    for i in 1...a\
    \ {\n        if a % i == 0 {\n            primes.append(i)\n        }\n    }\n\
    \    \n    if primes.count == 3 {\n        return true\n    }\n    \n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a: 5)\
    \ == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmpj18blo9m/tmpj18blo9m.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7058aa6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b705879db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b705879d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b705879c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj18blo9m                        0x000055ff3a059507 <unavailable> + 5383

    5    libc.so.6                          0x00002b7058c92460 __libc_start_main +
    245

    6    tmpj18blo9m                        0x000055ff3a059149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824577
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = true\n \
    \   var primes = [Int]()\n    var prime: Int\n    for prime in 2...100 {\n   \
    \     if a % prime == 0 {\n            result = false\n            break\n   \
    \     }\n        if prime > 100 {\n            break\n        }\n        primes.append(prime)\n\
    \    }\n    if result {\n        for prime in primes {\n            if a % prime\
    \ == 0 {\n                result = false\n                break\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmp1splr9sp/tmp1splr9sp.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e91166c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e90e5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e90e5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e90e5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1splr9sp                        0x0000560c73cf4617 <unavailable> + 5655

    5    libc.so.6                          0x00002b9e91352460 __libc_start_main +
    245

    6    tmp1splr9sp                        0x0000560c73cf4259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824578
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 100 {\n      \
    \  return false\n    }\n    var primes = [Int]()\n    var primes_count = 100\n\
    \    for _ in 0..<primes_count {\n        primes.append(0)\n    }\n    var primes_count\
    \ = 100\n    for _ in 0..<primes_count {\n        if primes[Int(a)] == 0 {\n \
    \           primes[Int(a)] = 1\n        }\n    }\n    for _ in 0..<primes_count\
    \ {\n        if primes[Int(a)] != 0 {\n            for _ in 0..<primes_count {\n\
    \                if primes[Int(a)] * primes[Int(a)] < primes[Int(a)] {\n     \
    \               primes[Int(a)] = primes[Int(a)] * primes[Int(a)]\n           \
    \     }\n            }\n        }\n    }\n    return primes[Int(a)] > 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp57m4hii8.swift:18:9: error: invalid redeclaration of 'primes_count'\n\
    \    var primes_count = 100\n        ^\n/tmp/tmp57m4hii8.swift:14:9: note: 'primes_count'\
    \ previously declared here\n    var primes_count = 100\n        ^\n"
  stdout: ''
  timestamp: 1659824578
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 100 {\n      \
    \  return false\n    }\n    \n    var primes = [Int]()\n    \n    for n in 2...100\
    \ {\n        if a % n == 0 {\n            primes.append(n)\n        }\n    }\n\
    \    \n    return primes.contains(3) && primes.contains(5)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpl64audrx/tmpl64audrx.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4608695c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b460838cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b460838c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b460838b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl64audrx                        0x0000557270677517 <unavailable> + 5399

    5    libc.so.6                          0x00002b4608881460 __libc_start_main +
    245

    6    tmpl64audrx                        0x0000557270677159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1659824578
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var primes = [Int]()\n\
    \    var primes_count = Int(0)\n    var is_multiply_prime = false\n    \n    for\
    \ n in 2...100 {\n        if n % 2 == 0 {\n            continue\n        }\n \
    \       \n        for m in 2...n {\n            if m % 2 == 0 {\n            \
    \    continue\n            }\n            \n            if n != m {\n        \
    \        if is_prime(m) {\n                    primes.append(m)\n            \
    \        primes_count += 1\n                }\n            }\n        }\n    }\n\
    \    \n    if primes_count == 3 {\n        is_multiply_prime = true\n    }\n \
    \   \n    return is_multiply_prime\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp2fusn3ty.swift:25:20: error: cannot find 'is_prime' in scope\n\
    \                if is_prime(m) {\n                   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824578
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 100 {\n      \
    \  return false\n    }\n    \n    var primes = [Int]()\n    \n    for i in 2..<100\
    \ {\n        if a % i == 0 {\n            primes.append(i)\n        }\n    }\n\
    \    \n    if primes.count == 3 {\n        return true\n    }\n    \n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a: 5)\
    \ == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmpqm3mb3hp/tmpqm3mb3hp.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b59ef7bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b59ef4b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b59ef4b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b59ef4b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqm3mb3hp                        0x0000562b06819507 <unavailable> + 5383

    5    libc.so.6                          0x00002b59ef9ab460 __libc_start_main +
    245

    6    tmpqm3mb3hp                        0x0000562b06819149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824578
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = true\n \
    \   for number in 2...100 {\n        if a % number == 0 {\n            result\
    \ = false\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpvy9zyome/tmpvy9zyome.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad99b59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad99850b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad99850988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad9984f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvy9zyome                        0x00005619b0eee3a7 <unavailable> + 5031

    5    libc.so.6                          0x00002aad99d45460 __libc_start_main +
    245

    6    tmpvy9zyome                        0x00005619b0eedfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824579
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 100 {\n      \
    \  return false\n    }\n    var primes = [Int]()\n    var primes_count = 100\n\
    \    var primes_sum = 0\n    var primes_sum2 = 0\n    var primes_sum3 = 0\n  \
    \  var primes_sum4 = 0\n    var primes_sum5 = 0\n    var primes_sum6 = 0\n   \
    \ var primes_sum7 = 0\n    var primes_sum8 = 0\n    var primes_sum9 = 0\n    var\
    \ primes_sum10 = 0\n    var primes_sum11 = 0\n    var primes_sum12 = 0\n    var\
    \ primes_sum13 = 0\n    var primes_sum14 = 0\n    var primes_sum15 = 0\n    var\
    \ primes_sum16 = 0\n    var primes_sum17 = 0\n    var primes_sum18 = 0\n    var\
    \ primes_sum19 = 0\n    var primes_sum20 = 0\n    var primes_sum21 = 0\n    var\
    \ primes_sum22 = 0\n    var primes_sum23 = 0\n    var primes_sum24 = 0\n    var\
    \ primes_sum25 = 0\n    var primes_sum26 = 0\n    var primes_sum27 = 0\n    var\
    \ primes_sum28 = 0\n    var primes_sum29 = 0\n    var primes_sum30 = 0\n    var\
    \ primes_sum31 = 0\n    var primes_sum32 = 0\n    var primes_sum33 = 0\n    var\
    \ primes_sum34 = 0\n    var primes_sum35 = 0\n    var primes_sum36 = 0\n    var\
    \ primes_sum37 = 0\n    var primes_sum38 = 0\n    var primes_sum39 = 0\n    var\
    \ primes_sum40 = 0\n    var primes_sum41 = 0\n    var primes_sum42 = 0\n    var\
    \ primes_sum43 = 0\n    var primes_sum44 = 0\n    var primes_sum45 = 0\n    var\
    \ primes_sum46 = 0\n    var primes_sum47 = 0\n    var primes_sum48 = 0\n    var\
    \ primes_sum49 = 0\n    var primes_sum50 = 0\n    var primes_sum51 = 0\n    var\
    \ primes_sum52 = 0\n    var primes_sum53 = 0\n    var primes_sum54 = 0\n    var\
    \ primes_sum55 = 0\n    var primes_sum56 = 0\n    var primes_sum57 = 0\n    var\
    \ primes_sum58 = 0\n    var primes_sum59 = 0\n    var primes_sum60 = 0\n    var\
    \ primes_sum61 = 0\n    var primes_sum62 = 0\n    var primes_sum63 = 0\n    var\
    \ primes_sum64 = 0\n    var primes_sum65 = 0\n    var primes_sum66 = 0\n    var\
    \ primes_sum67 = 0\n    var primes_sum68 = 0\n    var primes_sum69 = 0\n    var\
    \ primes_sum70 = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmphawwsyhz.swift:13:9: warning: initialization of variable 'primes'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes = [Int]()\n    ~~~~^~~~~~\n    _\n/tmp/tmphawwsyhz.swift:14:9:\
    \ warning: initialization of variable 'primes_count' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var primes_count = 100\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:15:9: warning: initialization\
    \ of variable 'primes_sum' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var primes_sum = 0\n    ~~~~^~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:16:9:\
    \ warning: initialization of variable 'primes_sum2' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum2 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmphawwsyhz.swift:17:9: warning: initialization of variable 'primes_sum3'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum3 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:18:9:\
    \ warning: initialization of variable 'primes_sum4' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum4 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmphawwsyhz.swift:19:9: warning: initialization of variable 'primes_sum5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum5 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:20:9:\
    \ warning: initialization of variable 'primes_sum6' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum6 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmphawwsyhz.swift:21:9: warning: initialization of variable 'primes_sum7'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum7 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:22:9:\
    \ warning: initialization of variable 'primes_sum8' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum8 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmphawwsyhz.swift:23:9: warnin"
  stdout: ''
  timestamp: 1659824577
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    \n    let primes = [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97]\n    \n    for prime in primes {\n        if a % prime == 0\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmp5xv9fw7i/tmp5xv9fw7i.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad589398c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad58908fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad58908f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad58908e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5xv9fw7i                        0x000055a342cb5527 <unavailable> + 5415

    5    libc.so.6                          0x00002ad589584460 __libc_start_main +
    245

    6    tmp5xv9fw7i                        0x000055a342cb5169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 100 {\n      \
    \  return false\n    }\n    var primes = [Int]()\n    var prime: Int = 0\n   \
    \ var isPrime: Bool = false\n    var isMultiplication: Bool = false\n    var isMultiplyPrime:\
    \ Bool = false\n    var isMultiplyPrime2: Bool = false\n    var isMultiplyPrime3:\
    \ Bool = false\n    var isMultiplyPrime4: Bool = false\n    var isMultiplyPrime5:\
    \ Bool = false\n    var isMultiplyPrime6: Bool = false\n    var isMultiplyPrime7:\
    \ Bool = false\n    var isMultiplyPrime8: Bool = false\n    var isMultiplyPrime9:\
    \ Bool = false\n    var isMultiplyPrime10: Bool = false\n    var isMultiplyPrime11:\
    \ Bool = false\n    var isMultiplyPrime12: Bool = false\n    var isMultiplyPrime13:\
    \ Bool = false\n    var isMultiplyPrime14: Bool = false\n    var isMultiplyPrime15:\
    \ Bool = false\n    var isMultiplyPrime16: Bool = false\n    var isMultiplyPrime17:\
    \ Bool = false\n    var isMultiplyPrime18: Bool = false\n    var isMultiplyPrime19:\
    \ Bool = false\n    var isMultiplyPrime20: Bool = false\n    var isMultiplyPrime21:\
    \ Bool = false\n    var isMultiplyPrime22: Bool = false\n    var isMultiplyPrime23:\
    \ Bool = false\n    var isMultiplyPrime24: Bool = false\n    var isMultiplyPrime25:\
    \ Bool = false\n    var isMultiplyPrime26: Bool = false\n    var isMultiplyPrime27:\
    \ Bool = false\n    var isMultiplyPrime28: Bool = false\n    var isMultiplyPrime29:\
    \ Bool = false\n    var isMultiplyPrime30: Bool = false\n    var isMultiplyPrime31:\
    \ Bool = false\n    var isMultiplyPrime32: Bool = false\n    var isMultiplyPrime33:\
    \ Bool = false\n    var isMultiplyPrime34: Bool = false\n    var isMultiplyPrime35:\
    \ Bool = false\n    var isMultiplyPrime36: Bool = false\n    var isMultiplyPrime37:\
    \ Bool = false\n    var isMultiplyPrime38: Bool = false\n    var isMultiplyPrime39:\
    \ Bool = false\n    var isMultiplyPrime40: Bool = false\n    var isMultiplyPrime41:\
    \ Bool = false\n    var isMultiplyPrime42: Bool = false\n    var isMultiplyPrime43:\
    \ Bool = false\n    var isMulti\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpdfbutehv.swift:60:9: error: type annotation missing in pattern\n\
    \    var isMulti\n        ^\n"
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 100 {\n      \
    \  return false\n    }\n    var primes = [Int]()\n    var primes_count = 100\n\
    \    var primes_sum = 0\n    var primes_sum2 = 0\n    var primes_sum3 = 0\n  \
    \  var primes_sum4 = 0\n    var primes_sum5 = 0\n    var primes_sum6 = 0\n   \
    \ var primes_sum7 = 0\n    var primes_sum8 = 0\n    var primes_sum9 = 0\n    var\
    \ primes_sum10 = 0\n    var primes_sum11 = 0\n    var primes_sum12 = 0\n    var\
    \ primes_sum13 = 0\n    var primes_sum14 = 0\n    var primes_sum15 = 0\n    var\
    \ primes_sum16 = 0\n    var primes_sum17 = 0\n    var primes_sum18 = 0\n    var\
    \ primes_sum19 = 0\n    var primes_sum20 = 0\n    var primes_sum21 = 0\n    var\
    \ primes_sum22 = 0\n    var primes_sum23 = 0\n    var primes_sum24 = 0\n    var\
    \ primes_sum25 = 0\n    var primes_sum26 = 0\n    var primes_sum27 = 0\n    var\
    \ primes_sum28 = 0\n    var primes_sum29 = 0\n    var primes_sum30 = 0\n    var\
    \ primes_sum31 = 0\n    var primes_sum32 = 0\n    var primes_sum33 = 0\n    var\
    \ primes_sum34 = 0\n    var primes_sum35 = 0\n    var primes_sum36 = 0\n    var\
    \ primes_sum37 = 0\n    var primes_sum38 = 0\n    var primes_sum39 = 0\n    var\
    \ primes_sum40 = 0\n    var primes_sum41 = 0\n    var primes_sum42 = 0\n    var\
    \ primes_sum43 = 0\n    var primes_sum44 = 0\n    var primes_sum45 = 0\n    var\
    \ primes_sum46 = 0\n    var primes_sum47 = 0\n    var primes_sum48 = 0\n    var\
    \ primes_sum49 = 0\n    var primes_sum50 = 0\n    var primes_sum51 = 0\n    var\
    \ primes_sum52 = 0\n    var primes_sum53 = 0\n    var primes_sum54 = 0\n    var\
    \ primes_sum55 = 0\n    var primes_sum56 = 0\n    var primes_sum57 = 0\n    var\
    \ primes_sum58 = 0\n    var primes_sum59 = 0\n    var primes_sum60 = 0\n    var\
    \ primes_sum61 = 0\n    var primes_sum62 = 0\n    var primes_sum63 = 0\n    var\
    \ primes_sum64 = 0\n    var primes_sum65 = 0\n    var primes_sum66 = 0\n    var\
    \ primes_sum67 = 0\n    var primes_sum68 = 0\n    var primes_sum69 = 0\n    var\
    \ primes_sum70 = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmphawwsyhz.swift:13:9: warning: initialization of variable 'primes'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes = [Int]()\n    ~~~~^~~~~~\n    _\n/tmp/tmphawwsyhz.swift:14:9:\
    \ warning: initialization of variable 'primes_count' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var primes_count = 100\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:15:9: warning: initialization\
    \ of variable 'primes_sum' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var primes_sum = 0\n    ~~~~^~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:16:9:\
    \ warning: initialization of variable 'primes_sum2' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum2 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmphawwsyhz.swift:17:9: warning: initialization of variable 'primes_sum3'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum3 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:18:9:\
    \ warning: initialization of variable 'primes_sum4' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum4 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmphawwsyhz.swift:19:9: warning: initialization of variable 'primes_sum5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum5 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:20:9:\
    \ warning: initialization of variable 'primes_sum6' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum6 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmphawwsyhz.swift:21:9: warning: initialization of variable 'primes_sum7'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum7 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:22:9:\
    \ warning: initialization of variable 'primes_sum8' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum8 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmphawwsyhz.swift:23:9: warnin"
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    var primes = [Int]()\n    var primes_count = 100\n    var primes_sum = 0\n\
    \    var primes_sum2 = 0\n    var primes_sum3 = 0\n    var primes_sum4 = 0\n \
    \   var primes_sum5 = 0\n    var primes_sum6 = 0\n    var primes_sum7 = 0\n  \
    \  var primes_sum8 = 0\n    var primes_sum9 = 0\n    var primes_sum10 = 0\n  \
    \  var primes_sum11 = 0\n    var primes_sum12 = 0\n    var primes_sum13 = 0\n\
    \    var primes_sum14 = 0\n    var primes_sum15 = 0\n    var primes_sum16 = 0\n\
    \    var primes_sum17 = 0\n    var primes_sum18 = 0\n    var primes_sum19 = 0\n\
    \    var primes_sum20 = 0\n    var primes_sum21 = 0\n    var primes_sum22 = 0\n\
    \    var primes_sum23 = 0\n    var primes_sum24 = 0\n    var primes_sum25 = 0\n\
    \    var primes_sum26 = 0\n    var primes_sum27 = 0\n    var primes_sum28 = 0\n\
    \    var primes_sum29 = 0\n    var primes_sum30 = 0\n    var primes_sum31 = 0\n\
    \    var primes_sum32 = 0\n    var primes_sum33 = 0\n    var primes_sum34 = 0\n\
    \    var primes_sum35 = 0\n    var primes_sum36 = 0\n    var primes_sum37 = 0\n\
    \    var primes_sum38 = 0\n    var primes_sum39 = 0\n    var primes_sum40 = 0\n\
    \    var primes_sum41 = 0\n    var primes_sum42 = 0\n    var primes_sum43 = 0\n\
    \    var primes_sum44 = 0\n    var primes_sum45 = 0\n    var primes_sum46 = 0\n\
    \    var primes_sum47 = 0\n    var primes_sum48 = 0\n    var primes_sum49 = 0\n\
    \    var primes_sum50 = 0\n    var primes_sum51 = 0\n    var primes_sum52 = 0\n\
    \    var primes_sum53 = 0\n    var primes_sum54 = 0\n    var primes_sum55 = 0\n\
    \    var primes_sum56 = 0\n    var primes_sum57 = 0\n    var primes_sum58 = 0\n\
    \    var primes_sum59 = 0\n    var primes_sum60 = 0\n    var primes_sum61 = 0\n\
    \    var primes_sum62 = 0\n    var primes_sum63 = 0\n    var primes_sum64 = 0\n\
    \    var primes_sum65 = 0\n    var primes_sum66 = 0\n    var primes_sum67 = 0\n\
    \    var primes_sum68 = 0\n    var primes_sum69 = 0\n    var primes_sum70 = 0\n\
    \    var primes_sum71 = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmppeenxtca.swift:10:9: warning: initialization of variable 'result'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var result = false\n    ~~~~^~~~~~\n    _\n/tmp/tmppeenxtca.swift:11:9: warning:\
    \ initialization of variable 'primes' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var primes = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n/tmp/tmppeenxtca.swift:12:9: warning: initialization of variable 'primes_count'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_count = 100\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmppeenxtca.swift:13:9:\
    \ warning: initialization of variable 'primes_sum' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum = 0\n    ~~~~^~~~~~~~~~\n\
    \    _\n/tmp/tmppeenxtca.swift:14:9: warning: initialization of variable 'primes_sum2'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum2 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmppeenxtca.swift:15:9:\
    \ warning: initialization of variable 'primes_sum3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum3 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmppeenxtca.swift:16:9: warning: initialization of variable 'primes_sum4'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum4 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmppeenxtca.swift:17:9:\
    \ warning: initialization of variable 'primes_sum5' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum5 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmppeenxtca.swift:18:9: warning: initialization of variable 'primes_sum6'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum6 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmppeenxtca.swift:19:9:\
    \ warning: initialization of variable 'primes_sum7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum7 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmppeenxtca.swift:20:9: warning: initiali"
  stdout: ''
  timestamp: 1659824578
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var primes = [Int]()\n\
    \    var primes_count = 100\n    var is_multiply_prime = false\n    \n    for\
    \ _ in 0..<primes_count {\n        primes.append(0)\n    }\n    \n    for _ in\
    \ 0..<primes_count {\n        if a % primes[Int(arc4random_uniform(UInt32(primes_count\
    \ - 1)))] == 0 {\n            primes[Int(arc4random_uniform(UInt32(primes_count\
    \ - 1)))] += 1\n        }\n    }\n    \n    if primes[Int(arc4random_uniform(UInt32(primes_count\
    \ - 1)))] == primes_count {\n        is_multiply_prime = true\n    }\n    \n \
    \   return is_multiply_prime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpfvytnz53.swift:19:27: error: cannot find 'arc4random_uniform' in\
    \ scope\n        if a % primes[Int(arc4random_uniform(UInt32(primes_count - 1)))]\
    \ == 0 {\n                          ^~~~~~~~~~~~~~~~~~\n/tmp/tmpfvytnz53.swift:20:24:\
    \ error: cannot find 'arc4random_uniform' in scope\n            primes[Int(arc4random_uniform(UInt32(primes_count\
    \ - 1)))] += 1\n                       ^~~~~~~~~~~~~~~~~~\n/tmp/tmpfvytnz53.swift:24:19:\
    \ error: cannot find 'arc4random_uniform' in scope\n    if primes[Int(arc4random_uniform(UInt32(primes_count\
    \ - 1)))] == primes_count {\n                  ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824578
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = true\n \
    \   \n    for i in 2..<100 {\n        if a % i == 0 {\n            result = false\n\
    \            break\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpcjtekwyn/tmpcjtekwyn.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b79127e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b79124dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b79124da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79124d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcjtekwyn                        0x0000557c0aab03a7 <unavailable> + 5031

    5    libc.so.6                          0x00002b79129cf460 __libc_start_main +
    245

    6    tmpcjtekwyn                        0x0000557c0aaaffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824579
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    \n    let primes = [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97]\n    \n    for i in 0..<primes.count {\n        if a % primes[i]\
    \ == 0 {\n            return false\n        }\n    }\n    \n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpiqhnc05d/tmpiqhnc05d.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afa68ae9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afa687e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afa687e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afa687df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiqhnc05d                        0x000055f05abc4567 <unavailable> + 5479

    5    libc.so.6                          0x00002afa68cd5460 __libc_start_main +
    245

    6    tmpiqhnc05d                        0x000055f05abc41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824577
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var primes = [Int]()\n\
    \    var prime_numbers = [Int]()\n    var is_multiply_prime = false\n    \n  \
    \  for i in 2...100 {\n        if a % i == 0 {\n            primes.append(i)\n\
    \        }\n    }\n    \n    for i in 2...100 {\n        for j in 2...100 {\n\
    \            if i != j && a % i == 0 && a % j == 0 {\n                prime_numbers.append(i)\n\
    \                prime_numbers.append(j)\n            }\n        }\n    }\n  \
    \  \n    for i in 2...100 {\n        if prime_numbers.contains(i) {\n        \
    \    is_multiply_prime = true\n        }\n    }\n    \n    return is_multiply_prime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpsp0bl_ht/tmpsp0bl_ht.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5919cb5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b59199acb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b59199ac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b59199ab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsp0bl_ht                        0x0000556020e3e601 <unavailable> + 5633

    5    libc.so.6                          0x00002b5919ea1460 __libc_start_main +
    245

    6    tmpsp0bl_ht                        0x0000556020e3e159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1659824579
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    var primes = [Int]()\n    var prime: Int\n    var i: Int\n    var j: Int\n\
    \    \n    for i = 2; i < a; i++ {\n        prime = true\n        for j = 2; j\
    \ < i; j++ {\n            if i % j == 0 {\n                prime = false\n   \
    \             break\n            }\n        }\n        if prime {\n          \
    \  primes.append(i)\n        }\n    }\n    \n    if primes.count > 2 {\n     \
    \   result = true\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpgjwp7bz_.swift:16:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 2; i < a; i++ {\n    ^   ~~~~~~~~~~~~~~~~~\n/tmp/tmpgjwp7bz_.swift:18:9:\
    \ error: C-style for statement has been removed in Swift 3\n        for j = 2;\
    \ j < i; j++ {\n        ^   ~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824578
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var isMultiplyPrime =\
    \ true\n    var isMultiplyPrime2 = true\n    var isMultiplyPrime3 = true\n   \
    \ var isMultiplyPrime4 = true\n    var isMultiplyPrime5 = true\n    var isMultiplyPrime6\
    \ = true\n    var isMultiplyPrime7 = true\n    var isMultiplyPrime8 = true\n \
    \   var isMultiplyPrime9 = true\n    var isMultiplyPrime10 = true\n    var isMultiplyPrime11\
    \ = true\n    var isMultiplyPrime12 = true\n    var isMultiplyPrime13 = true\n\
    \    var isMultiplyPrime14 = true\n    var isMultiplyPrime15 = true\n    var isMultiplyPrime16\
    \ = true\n    var isMultiplyPrime17 = true\n    var isMultiplyPrime18 = true\n\
    \    var isMultiplyPrime19 = true\n    var isMultiplyPrime20 = true\n    var isMultiplyPrime21\
    \ = true\n    var isMultiplyPrime22 = true\n    var isMultiplyPrime23 = true\n\
    \    var isMultiplyPrime24 = true\n    var isMultiplyPrime25 = true\n    var isMultiplyPrime26\
    \ = true\n    var isMultiplyPrime27 = true\n    var isMultiplyPrime28 = true\n\
    \    var isMultiplyPrime29 = true\n    var isMultiplyPrime30 = true\n    var isMultiplyPrime31\
    \ = true\n    var isMultiplyPrime32 = true\n    var isMultiplyPrime33 = true\n\
    \    var isMultiplyPrime34 = true\n    var isMultiplyPrime35 = true\n    var isMultiplyPrime36\
    \ = true\n    var isMultiplyPrime37 = true\n    var isMultiplyPrime38 = true\n\
    \    var isMultiplyPrime39 = true\n    var isMultiplyPrime40 = true\n    var isMultiplyPrime41\
    \ = true\n    var isMultiplyPrime42 = true\n    var isMultiplyPrime43 = true\n\
    \    var isMultiplyPrime44 = true\n    var isMultiplyPrime45 = true\n    var isMultiplyPrime46\
    \ = true\n    var isMultiplyPrime47 = true\n    var isMultiplyPrime48 = true\n\
    \    var isMultiplyPrime49 = true\n    var isMultiplyPrime50 = true\n    var isMultiplyPrime51\
    \ = true\n    var isMultiplyPrime52 = true\n    var isMultiplyPrime53 = true\n\
    \    var isMultiplyPrime54 = true\n    var isMultiplyPrime55 = true\n    var isMultiplyPrime56\
    \ = true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpaj_uqgea.swift:10:9: warning: initialization of variable 'isMultiplyPrime'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime = true\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpaj_uqgea.swift:11:9:\
    \ warning: initialization of variable 'isMultiplyPrime2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime2 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpaj_uqgea.swift:12:9: warning:\
    \ initialization of variable 'isMultiplyPrime3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime3 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpaj_uqgea.swift:13:9: warning: initialization\
    \ of variable 'isMultiplyPrime4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime4 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpaj_uqgea.swift:14:9: warning: initialization of variable 'isMultiplyPrime5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime5 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpaj_uqgea.swift:15:9:\
    \ warning: initialization of variable 'isMultiplyPrime6' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime6 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpaj_uqgea.swift:16:9: warning:\
    \ initialization of variable 'isMultiplyPrime7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime7 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpaj_uqgea.swift:17:9: warning: initialization\
    \ of variable 'isMultiplyPrime8' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime8 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpaj_uqgea.swift:18:9: warning: initialization of variable 'isMultiplyPrime9'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime9 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpaj_uqgea.swift:19:9:\
    \ warning: initialization of variable 'isMul"
  stdout: ''
  timestamp: 1659824578
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var primes = [Int]()\n\
    \    var primes_count = Int()\n    var i = Int()\n    var j = Int()\n    var k\
    \ = Int()\n    var l = Int()\n    var m = Int()\n    var n = Int()\n    var o\
    \ = Int()\n    var p = Int()\n    var q = Int()\n    var r = Int()\n    var s\
    \ = Int()\n    var t = Int()\n    var u = Int()\n    var v = Int()\n    var w\
    \ = Int()\n    var x = Int()\n    var y = Int()\n    var z = Int()\n    var a\
    \ = Int()\n    var b = Int()\n    var c = Int()\n    var d = Int()\n    var e\
    \ = Int()\n    var f = Int()\n    var g = Int()\n    var h = Int()\n    var i\
    \ = Int()\n    var j = Int()\n    var k = Int()\n    var l = Int()\n    var m\
    \ = Int()\n    var n = Int()\n    var o = Int()\n    var p = Int()\n    var q\
    \ = Int()\n    var r = Int()\n    var s = Int()\n    var t = Int()\n    var u\
    \ = Int()\n    var v = Int()\n    var w = Int()\n    var x = Int()\n    var y\
    \ = Int()\n    var z = Int()\n    var a = Int()\n    var b = Int()\n    var c\
    \ = Int()\n    var d = Int()\n    var e = Int()\n    var f = Int()\n    var g\
    \ = Int()\n    var h = Int()\n    var i = Int()\n    var j = Int()\n    var k\
    \ = Int()\n    var l = Int()\n    var m = Int()\n    var n = Int()\n    var o\
    \ = Int()\n    var p = Int()\n    var q = Int()\n    var r = Int()\n    var s\
    \ = Int()\n    var t = Int()\n    var u = Int()\n    var v = Int()\n    var w\
    \ = Int()\n    var x = Int()\n    var y = Int()\n    var z = Int()\n    var a\
    \ = Int()\n    var b = Int()\n    var c = Int()\n    var d = Int()\n    var e\
    \ = Int()\n    var f = Int()\n    var g = Int()\n    var h = Int()\n    var i\
    \ = Int()\n    var j = Int()\n    var k = Int()\n    var l = Int()\n    var m\
    \ = Int()\n    var n = Int()\n    var o = Int()\n    var p = Int()\n    var q\
    \ = Int()\n    var r = Int()\n    var s = Int()\n    var t = Int()\n    var u\
    \ = Int()\n    var v = Int()\n    var w = Int()\n    var x = Int()\n    var y\
    \ = Int()\n    var z = Int()\n    var a = Int()\n    var b = Int()\n    var c\
    \ = Int()\n    var d = Int\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmppuykhc51.swift:38:9: error: invalid redeclaration of 'i'\n    var\
    \ i = Int()\n        ^\n/tmp/tmppuykhc51.swift:12:9: note: 'i' previously declared\
    \ here\n    var i = Int()\n        ^\n/tmp/tmppuykhc51.swift:39:9: error: invalid\
    \ redeclaration of 'j'\n    var j = Int()\n        ^\n/tmp/tmppuykhc51.swift:13:9:\
    \ note: 'j' previously declared here\n    var j = Int()\n        ^\n/tmp/tmppuykhc51.swift:40:9:\
    \ error: invalid redeclaration of 'k'\n    var k = Int()\n        ^\n/tmp/tmppuykhc51.swift:14:9:\
    \ note: 'k' previously declared here\n    var k = Int()\n        ^\n/tmp/tmppuykhc51.swift:41:9:\
    \ error: invalid redeclaration of 'l'\n    var l = Int()\n        ^\n/tmp/tmppuykhc51.swift:15:9:\
    \ note: 'l' previously declared here\n    var l = Int()\n        ^\n/tmp/tmppuykhc51.swift:42:9:\
    \ error: invalid redeclaration of 'm'\n    var m = Int()\n        ^\n/tmp/tmppuykhc51.swift:16:9:\
    \ note: 'm' previously declared here\n    var m = Int()\n        ^\n/tmp/tmppuykhc51.swift:43:9:\
    \ error: invalid redeclaration of 'n'\n    var n = Int()\n        ^\n/tmp/tmppuykhc51.swift:17:9:\
    \ note: 'n' previously declared here\n    var n = Int()\n        ^\n/tmp/tmppuykhc51.swift:44:9:\
    \ error: invalid redeclaration of 'o'\n    var o = Int()\n        ^\n/tmp/tmppuykhc51.swift:18:9:\
    \ note: 'o' previously declared here\n    var o = Int()\n        ^\n/tmp/tmppuykhc51.swift:45:9:\
    \ error: invalid redeclaration of 'p'\n    var p = Int()\n        ^\n/tmp/tmppuykhc51.swift:19:9:\
    \ note: 'p' previously declared here\n    var p = Int()\n        ^\n/tmp/tmppuykhc51.swift:46:9:\
    \ error: invalid redeclaration of 'q'\n    var q = Int()\n        ^\n/tmp/tmppuykhc51.swift:20:9:\
    \ note: 'q' previously declared here\n    var q = Int()\n        ^\n/tmp/tmppuykhc51.swift:47:9:\
    \ error: invalid redeclaration of 'r'\n    var r = Int()\n        ^\n/tmp/tmppuykhc51.swift:21:9:\
    \ note: 'r' previously declared here\n    var r = Int()\n        ^\n/tmp/tmppuykhc51.swift:48:9:\
    \ error: invalid redeclaration of 's'\n    var s = Int()\n        ^\n/tmp/tmppuykhc51.swift:22:9:\
    \ note: 's' previously declared here\n    var s = Int()\n        ^\n/tmp/tmppuykh"
  stdout: ''
  timestamp: 1659824578
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 100 {\n      \
    \  return false\n    }\n    \n    var primes = [Int]()\n    var primes_count =\
    \ Int(0)\n    var primes_count_max = Int(0)\n    \n    primes_count = Int(ceil(sqrt(Double(a))))\n\
    \    \n    for _ in 0..<primes_count {\n        primes.append(0)\n    }\n    \n\
    \    for _ in 0..<primes_count {\n        primes[Int(ceil(sqrt(Double(a)))] +=\
    \ 1 \n    }\n    \n    for _ in 0..<primes_count {\n        if primes[Int(ceil(sqrt(Double(a)))]\
    \ == 2 {\n            return true\n        }\n    }\n    \n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp1z8clpz8.swift:25:41: error: expected ',' separator\n        primes[Int(ceil(sqrt(Double(a)))]\
    \ += 1 \n                                        ^\n                         \
    \               ,\n/tmp/tmp1z8clpz8.swift:25:41: error: expected expression in\
    \ list of expressions\n        primes[Int(ceil(sqrt(Double(a)))] += 1 \n     \
    \                                   ^\n/tmp/tmp1z8clpz8.swift:29:44: error: expected\
    \ ',' separator\n        if primes[Int(ceil(sqrt(Double(a)))] == 2 {\n       \
    \                                    ^\n                                     \
    \      ,\n/tmp/tmp1z8clpz8.swift:29:44: error: expected expression in list of\
    \ expressions\n        if primes[Int(ceil(sqrt(Double(a)))] == 2 {\n         \
    \                                  ^\n/tmp/tmp1z8clpz8.swift:18:24: error: cannot\
    \ find 'ceil' in scope\n    primes_count = Int(ceil(sqrt(Double(a))))\n      \
    \                 ^~~~\n/tmp/tmp1z8clpz8.swift:18:29: error: cannot find 'sqrt'\
    \ in scope\n    primes_count = Int(ceil(sqrt(Double(a))))\n                  \
    \          ^~~~\n/tmp/tmp1z8clpz8.swift:25:20: error: cannot find 'ceil' in scope\n\
    \        primes[Int(ceil(sqrt(Double(a)))] += 1 \n                   ^~~~\n/tmp/tmp1z8clpz8.swift:25:25:\
    \ error: cannot find 'sqrt' in scope\n        primes[Int(ceil(sqrt(Double(a)))]\
    \ += 1 \n                        ^~~~\n/tmp/tmp1z8clpz8.swift:29:23: error: cannot\
    \ find 'ceil' in scope\n        if primes[Int(ceil(sqrt(Double(a)))] == 2 {\n\
    \                      ^~~~\n/tmp/tmp1z8clpz8.swift:29:28: error: cannot find\
    \ 'sqrt' in scope\n        if primes[Int(ceil(sqrt(Double(a)))] == 2 {\n     \
    \                      ^~~~\n/tmp/tmp1z8clpz8.swift:29:18: error: type 'Int' cannot\
    \ be used as a boolean; test for '!= 0' instead\n        if primes[Int(ceil(sqrt(Double(a)))]\
    \ == 2 {\n                 ^\n           (\n"
  stdout: ''
  timestamp: 1659824578
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    \n    if a < 100 {\n        var primes = [Int]()\n        var prime = 2 //\
    \ first prime number\n        primes.append(prime)\n        \n        while prime\
    \ < 100 {\n            if a % prime == 0 {\n                primes.append(prime)\n\
    \            }\n            prime += 1\n        }\n        \n        for prime\
    \ in primes {\n            if prime != 2 {\n                if a % prime == 0\
    \ {\n                    result = true\n                    break\n          \
    \      }\n            }\n        }\n    }\n    \n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpn9l2wlku/tmpn9l2wlku.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc55f61c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc55c58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc55c58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc55c577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn9l2wlku                        0x000056057566a4a3 <unavailable> + 5283

    5    libc.so.6                          0x00002adc5614d460 __libc_start_main +
    245

    6    tmpn9l2wlku                        0x000056057566a159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1659824579
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 100 {\n      \
    \  return false\n    }\n    var primes = [Int]()\n    var prime: Int = 0\n   \
    \ var isPrime: Bool = false\n    for n in 2...a / 2 {\n        if a % n == 0 {\n\
    \            primes.append(n)\n        }\n    }\n    for prime in primes {\n \
    \       if a % prime == 0 {\n            isPrime = true\n            break\n \
    \       }\n    }\n    return isPrime\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpl5_ljaph/tmpl5_ljaph.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab42c9c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab42c6bab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab42c6ba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab42c6b97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl5_ljaph                        0x000055dd62684617 <unavailable> + 5655

    5    libc.so.6                          0x00002ab42cbaf460 __libc_start_main +
    245

    6    tmpl5_ljaph                        0x000055dd62684259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824579
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 100 {\n      \
    \  return false\n    }\n    var primes = [Int]()\n    var primes_count = 100\n\
    \    var primes_sum = 0\n    var primes_sum2 = 0\n    var primes_sum3 = 0\n  \
    \  var primes_sum4 = 0\n    var primes_sum5 = 0\n    var primes_sum6 = 0\n   \
    \ var primes_sum7 = 0\n    var primes_sum8 = 0\n    var primes_sum9 = 0\n    var\
    \ primes_sum10 = 0\n    var primes_sum11 = 0\n    var primes_sum12 = 0\n    var\
    \ primes_sum13 = 0\n    var primes_sum14 = 0\n    var primes_sum15 = 0\n    var\
    \ primes_sum16 = 0\n    var primes_sum17 = 0\n    var primes_sum18 = 0\n    var\
    \ primes_sum19 = 0\n    var primes_sum20 = 0\n    var primes_sum21 = 0\n    var\
    \ primes_sum22 = 0\n    var primes_sum23 = 0\n    var primes_sum24 = 0\n    var\
    \ primes_sum25 = 0\n    var primes_sum26 = 0\n    var primes_sum27 = 0\n    var\
    \ primes_sum28 = 0\n    var primes_sum29 = 0\n    var primes_sum30 = 0\n    var\
    \ primes_sum31 = 0\n    var primes_sum32 = 0\n    var primes_sum33 = 0\n    var\
    \ primes_sum34 = 0\n    var primes_sum35 = 0\n    var primes_sum36 = 0\n    var\
    \ primes_sum37 = 0\n    var primes_sum38 = 0\n    var primes_sum39 = 0\n    var\
    \ primes_sum40 = 0\n    var primes_sum41 = 0\n    var primes_sum42 = 0\n    var\
    \ primes_sum43 = 0\n    var primes_sum44 = 0\n    var primes_sum45 = 0\n    var\
    \ primes_sum46 = 0\n    var primes_sum47 = 0\n    var primes_sum48 = 0\n    var\
    \ primes_sum49 = 0\n    var primes_sum50 = 0\n    var primes_sum51 = 0\n    var\
    \ primes_sum52 = 0\n    var primes_sum53 = 0\n    var primes_sum54 = 0\n    var\
    \ primes_sum55 = 0\n    var primes_sum56 = 0\n    var primes_sum57 = 0\n    var\
    \ primes_sum58 = 0\n    var primes_sum59 = 0\n    var primes_sum60 = 0\n    var\
    \ primes_sum61 = 0\n    var primes_sum62 = 0\n    var primes_sum63 = 0\n    var\
    \ primes_sum64 = 0\n    var primes_sum65 = 0\n    var primes_sum66 = 0\n    var\
    \ primes_sum67 = 0\n    var primes_sum68 = 0\n    var primes_sum69 = 0\n    var\
    \ primes_sum70 = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmphawwsyhz.swift:13:9: warning: initialization of variable 'primes'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes = [Int]()\n    ~~~~^~~~~~\n    _\n/tmp/tmphawwsyhz.swift:14:9:\
    \ warning: initialization of variable 'primes_count' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var primes_count = 100\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:15:9: warning: initialization\
    \ of variable 'primes_sum' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var primes_sum = 0\n    ~~~~^~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:16:9:\
    \ warning: initialization of variable 'primes_sum2' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum2 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmphawwsyhz.swift:17:9: warning: initialization of variable 'primes_sum3'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum3 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:18:9:\
    \ warning: initialization of variable 'primes_sum4' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum4 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmphawwsyhz.swift:19:9: warning: initialization of variable 'primes_sum5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum5 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:20:9:\
    \ warning: initialization of variable 'primes_sum6' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum6 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmphawwsyhz.swift:21:9: warning: initialization of variable 'primes_sum7'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum7 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:22:9:\
    \ warning: initialization of variable 'primes_sum8' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum8 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmphawwsyhz.swift:23:9: warnin"
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 100 {\n      \
    \  return false\n    }\n    var primes = [Int]()\n    var primes_count = 100\n\
    \    var primes_sum = 0\n    var primes_sum2 = 0\n    var primes_sum3 = 0\n  \
    \  var primes_sum4 = 0\n    var primes_sum5 = 0\n    var primes_sum6 = 0\n   \
    \ var primes_sum7 = 0\n    var primes_sum8 = 0\n    var primes_sum9 = 0\n    var\
    \ primes_sum10 = 0\n    var primes_sum11 = 0\n    var primes_sum12 = 0\n    var\
    \ primes_sum13 = 0\n    var primes_sum14 = 0\n    var primes_sum15 = 0\n    var\
    \ primes_sum16 = 0\n    var primes_sum17 = 0\n    var primes_sum18 = 0\n    var\
    \ primes_sum19 = 0\n    var primes_sum20 = 0\n    var primes_sum21 = 0\n    var\
    \ primes_sum22 = 0\n    var primes_sum23 = 0\n    var primes_sum24 = 0\n    var\
    \ primes_sum25 = 0\n    var primes_sum26 = 0\n    var primes_sum27 = 0\n    var\
    \ primes_sum28 = 0\n    var primes_sum29 = 0\n    var primes_sum30 = 0\n    var\
    \ primes_sum31 = 0\n    var primes_sum32 = 0\n    var primes_sum33 = 0\n    var\
    \ primes_sum34 = 0\n    var primes_sum35 = 0\n    var primes_sum36 = 0\n    var\
    \ primes_sum37 = 0\n    var primes_sum38 = 0\n    var primes_sum39 = 0\n    var\
    \ primes_sum40 = 0\n    var primes_sum41 = 0\n    var primes_sum42 = 0\n    var\
    \ primes_sum43 = 0\n    var primes_sum44 = 0\n    var primes_sum45 = 0\n    var\
    \ primes_sum46 = 0\n    var primes_sum47 = 0\n    var primes_sum48 = 0\n    var\
    \ primes_sum49 = 0\n    var primes_sum50 = 0\n    var primes_sum51 = 0\n    var\
    \ primes_sum52 = 0\n    var primes_sum53 = 0\n    var primes_sum54 = 0\n    var\
    \ primes_sum55 = 0\n    var primes_sum56 = 0\n    var primes_sum57 = 0\n    var\
    \ primes_sum58 = 0\n    var primes_sum59 = 0\n    var primes_sum60 = 0\n    var\
    \ primes_sum61 = 0\n    var primes_sum62 = 0\n    var primes_sum63 = 0\n    var\
    \ primes_sum64 = 0\n    var primes_sum65 = 0\n    var primes_sum66 = 0\n    var\
    \ primes_sum67 = 0\n    var primes_sum68 = 0\n    var primes_sum69 = 0\n    var\
    \ primes_sum70 = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmphawwsyhz.swift:13:9: warning: initialization of variable 'primes'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes = [Int]()\n    ~~~~^~~~~~\n    _\n/tmp/tmphawwsyhz.swift:14:9:\
    \ warning: initialization of variable 'primes_count' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var primes_count = 100\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:15:9: warning: initialization\
    \ of variable 'primes_sum' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var primes_sum = 0\n    ~~~~^~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:16:9:\
    \ warning: initialization of variable 'primes_sum2' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum2 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmphawwsyhz.swift:17:9: warning: initialization of variable 'primes_sum3'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum3 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:18:9:\
    \ warning: initialization of variable 'primes_sum4' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum4 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmphawwsyhz.swift:19:9: warning: initialization of variable 'primes_sum5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum5 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:20:9:\
    \ warning: initialization of variable 'primes_sum6' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum6 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmphawwsyhz.swift:21:9: warning: initialization of variable 'primes_sum7'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum7 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:22:9:\
    \ warning: initialization of variable 'primes_sum8' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum8 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmphawwsyhz.swift:23:9: warnin"
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var isMultiplyPrime =\
    \ true\n    var isMultiplyPrime2 = true\n    var isMultiplyPrime3 = true\n   \
    \ var isMultiplyPrime4 = true\n    var isMultiplyPrime5 = true\n    var isMultiplyPrime6\
    \ = true\n    var isMultiplyPrime7 = true\n    var isMultiplyPrime8 = true\n \
    \   var isMultiplyPrime9 = true\n    var isMultiplyPrime10 = true\n    var isMultiplyPrime11\
    \ = true\n    var isMultiplyPrime12 = true\n    var isMultiplyPrime13 = true\n\
    \    var isMultiplyPrime14 = true\n    var isMultiplyPrime15 = true\n    var isMultiplyPrime16\
    \ = true\n    var isMultiplyPrime17 = true\n    var isMultiplyPrime18 = true\n\
    \    var isMultiplyPrime19 = true\n    var isMultiplyPrime20 = true\n    var isMultiplyPrime21\
    \ = true\n    var isMultiplyPrime22 = true\n    var isMultiplyPrime23 = true\n\
    \    var isMultiplyPrime24 = true\n    var isMultiplyPrime25 = true\n    var isMultiplyPrime26\
    \ = true\n    var isMultiplyPrime27 = true\n    var isMultiplyPrime28 = true\n\
    \    var isMultiplyPrime29 = true\n    var isMultiplyPrime30 = true\n    var isMultiplyPrime31\
    \ = true\n    var isMultiplyPrime32 = true\n    var isMultiplyPrime33 = true\n\
    \    var isMultiplyPrime34 = true\n    var isMultiplyPrime35 = true\n    var isMultiplyPrime36\
    \ = true\n    var isMultiplyPrime37 = true\n    var isMultiplyPrime38 = true\n\
    \    var isMultiplyPrime39 = true\n    var isMultiplyPrime40 = true\n    var isMultiplyPrime41\
    \ = true\n    var isMultiplyPrime42 = true\n    var isMultiplyPrime43 = true\n\
    \    var isMultiplyPrime44 = true\n    var isMultiplyPrime45 = true\n    var isMultiplyPrime46\
    \ = true\n    var isMultiplyPrime47 = true\n    var isMultiplyPrime48 = true\n\
    \    var isMultiplyPrime49 = true\n    var isMultiplyPrime50 = true\n    var isMultiplyPrime51\
    \ = true\n    var isMultiplyPrime52 = true\n    var isMultiplyPrime53 = true\n\
    \    var isMultiplyPrime54 = true\n    var isMultiplyPrime55 = true\n    var isMultiplyPrime56\
    \ = true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpaj_uqgea.swift:10:9: warning: initialization of variable 'isMultiplyPrime'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime = true\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpaj_uqgea.swift:11:9:\
    \ warning: initialization of variable 'isMultiplyPrime2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime2 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpaj_uqgea.swift:12:9: warning:\
    \ initialization of variable 'isMultiplyPrime3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime3 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpaj_uqgea.swift:13:9: warning: initialization\
    \ of variable 'isMultiplyPrime4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime4 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpaj_uqgea.swift:14:9: warning: initialization of variable 'isMultiplyPrime5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime5 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpaj_uqgea.swift:15:9:\
    \ warning: initialization of variable 'isMultiplyPrime6' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime6 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpaj_uqgea.swift:16:9: warning:\
    \ initialization of variable 'isMultiplyPrime7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime7 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpaj_uqgea.swift:17:9: warning: initialization\
    \ of variable 'isMultiplyPrime8' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime8 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpaj_uqgea.swift:18:9: warning: initialization of variable 'isMultiplyPrime9'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime9 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpaj_uqgea.swift:19:9:\
    \ warning: initialization of variable 'isMul"
  stdout: ''
  timestamp: 1659824578
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 100 {\n      \
    \  return false\n    }\n    var primes = [Int]()\n    var primes_count = 100\n\
    \    var primes_sum = 0\n    var primes_sum2 = 0\n    var primes_sum3 = 0\n  \
    \  var primes_sum4 = 0\n    var primes_sum5 = 0\n    var primes_sum6 = 0\n   \
    \ var primes_sum7 = 0\n    var primes_sum8 = 0\n    var primes_sum9 = 0\n    var\
    \ primes_sum10 = 0\n    var primes_sum11 = 0\n    var primes_sum12 = 0\n    var\
    \ primes_sum13 = 0\n    var primes_sum14 = 0\n    var primes_sum15 = 0\n    var\
    \ primes_sum16 = 0\n    var primes_sum17 = 0\n    var primes_sum18 = 0\n    var\
    \ primes_sum19 = 0\n    var primes_sum20 = 0\n    var primes_sum21 = 0\n    var\
    \ primes_sum22 = 0\n    var primes_sum23 = 0\n    var primes_sum24 = 0\n    var\
    \ primes_sum25 = 0\n    var primes_sum26 = 0\n    var primes_sum27 = 0\n    var\
    \ primes_sum28 = 0\n    var primes_sum29 = 0\n    var primes_sum30 = 0\n    var\
    \ primes_sum31 = 0\n    var primes_sum32 = 0\n    var primes_sum33 = 0\n    var\
    \ primes_sum34 = 0\n    var primes_sum35 = 0\n    var primes_sum36 = 0\n    var\
    \ primes_sum37 = 0\n    var primes_sum38 = 0\n    var primes_sum39 = 0\n    var\
    \ primes_sum40 = 0\n    var primes_sum41 = 0\n    var primes_sum42 = 0\n    var\
    \ primes_sum43 = 0\n    var primes_sum44 = 0\n    var primes_sum45 = 0\n    var\
    \ primes_sum46 = 0\n    var primes_sum47 = 0\n    var primes_sum48 = 0\n    var\
    \ primes_sum49 = 0\n    var primes_sum50 = 0\n    var primes_sum51 = 0\n    var\
    \ primes_sum52 = 0\n    var primes_sum53 = 0\n    var primes_sum54 = 0\n    var\
    \ primes_sum55 = 0\n    var primes_sum56 = 0\n    var primes_sum57 = 0\n    var\
    \ primes_sum58 = 0\n    var primes_sum59 = 0\n    var primes_sum60 = 0\n    var\
    \ primes_sum61 = 0\n    var primes_sum62 = 0\n    var primes_sum63 = 0\n    var\
    \ primes_sum64 = 0\n    var primes_sum65 = 0\n    var primes_sum66 = 0\n    var\
    \ primes_sum67 = 0\n    var primes_sum68 = 0\n    var primes_sum69 = 0\n    var\
    \ primes_sum70 = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmphawwsyhz.swift:13:9: warning: initialization of variable 'primes'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes = [Int]()\n    ~~~~^~~~~~\n    _\n/tmp/tmphawwsyhz.swift:14:9:\
    \ warning: initialization of variable 'primes_count' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var primes_count = 100\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:15:9: warning: initialization\
    \ of variable 'primes_sum' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var primes_sum = 0\n    ~~~~^~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:16:9:\
    \ warning: initialization of variable 'primes_sum2' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum2 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmphawwsyhz.swift:17:9: warning: initialization of variable 'primes_sum3'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum3 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:18:9:\
    \ warning: initialization of variable 'primes_sum4' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum4 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmphawwsyhz.swift:19:9: warning: initialization of variable 'primes_sum5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum5 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:20:9:\
    \ warning: initialization of variable 'primes_sum6' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum6 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmphawwsyhz.swift:21:9: warning: initialization of variable 'primes_sum7'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum7 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmphawwsyhz.swift:22:9:\
    \ warning: initialization of variable 'primes_sum8' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum8 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmphawwsyhz.swift:23:9: warnin"
  stdout: ''
  timestamp: 1659824577
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var primes = [Int]()\n\
    \    var isMultiplyPrime = true\n    var isPrime = true\n    var isPrime2 = true\n\
    \    var isPrime3 = true\n    var isPrime4 = true\n    var isPrime5 = true\n \
    \   var isPrime6 = true\n    var isPrime7 = true\n    var isPrime8 = true\n  \
    \  var isPrime9 = true\n    var isPrime10 = true\n    var isPrime11 = true\n \
    \   var isPrime12 = true\n    var isPrime13 = true\n    var isPrime14 = true\n\
    \    var isPrime15 = true\n    var isPrime16 = true\n    var isPrime17 = true\n\
    \    var isPrime18 = true\n    var isPrime19 = true\n    var isPrime20 = true\n\
    \    var isPrime21 = true\n    var isPrime22 = true\n    var isPrime23 = true\n\
    \    var isPrime24 = true\n    var isPrime25 = true\n    var isPrime26 = true\n\
    \    var isPrime27 = true\n    var isPrime28 = true\n    var isPrime29 = true\n\
    \    var isPrime30 = true\n    var isPrime31 = true\n    var isPrime32 = true\n\
    \    var isPrime33 = true\n    var isPrime34 = true\n    var isPrime35 = true\n\
    \    var isPrime36 = true\n    var isPrime37 = true\n    var isPrime38 = true\n\
    \    var isPrime39 = true\n    var isPrime40 = true\n    var isPrime41 = true\n\
    \    var isPrime42 = true\n    var isPrime43 = true\n    var isPrime44 = true\n\
    \    var isPrime45 = true\n    var isPrime46 = true\n    var isPrime47 = true\n\
    \    var isPrime48 = true\n    var isPrime49 = true\n    var isPrime50 = true\n\
    \    var isPrime51 = true\n    var isPrime52 = true\n    var isPrime53 = true\n\
    \    var isPrime54 = true\n    var isPrime55 = true\n    var isPrime56 = true\n\
    \    var isPrime57 = true\n    var isPrime58 = true\n    var isPrime59 = true\n\
    \    var isPrime60 = true\n    var isPrime61 = true\n    var isPrime62 = true\n\
    \    var isPrime63 = true\n    var isPrime64 = true\n    var isPrime65 = true\n\
    \    var isPrime66 = true\n    var isPrime67 = true\n    var isPrime68 = true\n\
    \    var isPrime69 = true\n    var is\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpjf927jvf.swift:81:9: error: expected pattern\n    var is\n    \
    \    ^\n/tmp/tmpjf927jvf.swift:10:9: warning: initialization of variable 'primes'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes = [Int]()\n    ~~~~^~~~~~\n    _\n/tmp/tmpjf927jvf.swift:11:9:\
    \ warning: initialization of variable 'isMultiplyPrime' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime = true\n\
    \    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpjf927jvf.swift:12:9: warning: initialization\
    \ of variable 'isPrime' was never used; consider replacing with assignment to\
    \ '_' or removing it\n    var isPrime = true\n    ~~~~^~~~~~~\n    _\n/tmp/tmpjf927jvf.swift:13:9:\
    \ warning: initialization of variable 'isPrime2' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime2 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmpjf927jvf.swift:14:9: warning: initialization of variable 'isPrime3'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime3 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpjf927jvf.swift:15:9:\
    \ warning: initialization of variable 'isPrime4' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime4 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmpjf927jvf.swift:16:9: warning: initialization of variable 'isPrime5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime5 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpjf927jvf.swift:17:9:\
    \ warning: initialization of variable 'isPrime6' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime6 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmpjf927jvf.swift:18:9: warning: initialization of variable 'isPrime7'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime7 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpjf927jvf.swift:19:9:\
    \ warning: initialization of variable 'isPrime8' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime8 = true\n    ~~~~^~~~~~~~\n\
    \    _"
  stdout: ''
  timestamp: 1659824578
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 100 {\n      \
    \  return false\n    }\n    \n    var primes = [Int]()\n    \n    for i in 1...Int(sqrt(a))\
    \ {\n        if a % i == 0 {\n            primes.append(i)\n        }\n    }\n\
    \    \n    if primes.count < 3 {\n        return false\n    }\n    \n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a: 5)\
    \ == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp9swpzajc.swift:16:22: error: cannot find 'sqrt' in scope\n    for\
    \ i in 1...Int(sqrt(a)) {\n                     ^~~~\n"
  stdout: ''
  timestamp: 1659824578
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    var primes = [Int]()\n    var prime_numbers = [Int]()\n    var prime_numbers_count\
    \ = Int()\n    var prime_numbers_count_max = Int()\n    var prime_numbers_count_min\
    \ = Int()\n    var prime_numbers_count_max_index = Int()\n    var prime_numbers_count_min_index\
    \ = Int()\n    var prime_numbers_count_max_value = Int()\n    var prime_numbers_count_min_value\
    \ = Int()\n    var prime_numbers_count_max_value_prime = Int()\n    var prime_numbers_count_min_value_prime\
    \ = Int()\n    var prime_numbers_count_max_value_prime_prime = Int()\n    var\
    \ prime_numbers_count_min_value_prime_prime = Int()\n    var prime_numbers_count_max_value_prime_prime_prime\
    \ = Int()\n    var prime_numbers_count_min_value_prime_prime_prime = Int()\n \
    \   var prime_numbers_count_max_value_prime_prime_prime_prime = Int()\n    var\
    \ prime_numbers_count_min_value_prime_prime_prime_prime = Int()\n    var prime_numbers_count_max_value_prime_prime_prime_prime_prime\
    \ = Int()\n    var prime_numbers_count_min_value_prime_prime_prime_prime_prime\
    \ = Int()\n    var prime_numbers_count_max_value_prime_prime_prime_prime_prime_prime\
    \ = Int()\n    var prime_numbers_count_min_value_prime_prime_prime_prime_prime_prime\
    \ = Int()\n    var prime_numbers_count_max_value_prime_prime_prime_prime_prime_prime_prime\
    \ = Int()\n    var prime_numbers_count_min_value_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Int()\n    var prime_numbers_count_max_value_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Int()\n    var prime_numbers_count_min_value_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Int()\n    var prime_numbers_count_max_value_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Int()\n    var prime_numbers_count_min_value_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Int()\n    var prime_numbers_count_max_value_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Int()\n    var prime_number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpbu3m1s43.swift:39:9: error: type annotation missing in pattern\n\
    \    var prime_number\n        ^\n"
  stdout: ''
  timestamp: 1659824578
