language: swift
name: HumanEval_122_add_elements
results:
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i]\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp3im71brf.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmp3im71brf.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmp3im71brf.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmp3im71brf.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmp3im71brf.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmp3im71brf.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8]\
    \ + arr[9] + arr[k] + arr[k+1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abc332c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc32fb9561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abc32fb9286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abc32fb913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abc32fb8bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abc32db8e83 <unavailable> + 188035

    6    tmpdnl8o7so                        0x0000555f8694b984 <unavailable> + 6532

    7    tmpdnl8o7so                        0x0000555f8694b31d <unavailable> + 4893

    8    libc.so.6                          0x00002abc334ae460 __libc_start_main +
    245

    9    tmpdnl8o7so                        0x0000555f8694afc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    let\
    \ len = arr.count\n    if k > len {\n        return 0\n    }\n    var sum = 0\n\
    \    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp6rt3junf/tmp6rt3junf.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9a13f9fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9a13c96b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9a13c96988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9a13c957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6rt3junf                        0x000055a53a4cd65d <unavailable> + 5725

    5    libc.so.6                          0x00002b9a1418b460 __libc_start_main +
    245

    6    tmp6rt3junf                        0x000055a53a4cd1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    guard\
    \ k > 0 && k <= arr.count else { return 0 }\n    var sum = 0\n    var i = k -\
    \ 1\n    for element in arr {\n        if i >= 0 {\n            sum += element\n\
    \            i -= 1\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k:\
    \ 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: Exception
  stderr: 'tmpo6r58gq4/tmpo6r58gq4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4f66697c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4f6638eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4f6638e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4f6638d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo6r58gq4                        0x000055f4270435dd <unavailable> + 5597

    5    libc.so.6                          0x00002b4f66883460 __libc_start_main +
    245

    6    tmpo6r58gq4                        0x000055f427043129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8]\
    \ + arr[9] + arr[k] + arr[k+1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abc332c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc32fb9561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abc32fb9286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abc32fb913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abc32fb8bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abc32db8e83 <unavailable> + 188035

    6    tmpdnl8o7so                        0x0000555f8694b984 <unavailable> + 6532

    7    tmpdnl8o7so                        0x0000555f8694b31d <unavailable> + 4893

    8    libc.so.6                          0x00002abc334ae460 __libc_start_main +
    245

    9    tmpdnl8o7so                        0x0000555f8694afc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[k] + arr[k+1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp8o972scd/tmp8o972scd.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac94f4d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac94f1cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac94f1ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac94f1c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8o972scd                        0x0000564a6c1e439b <unavailable> + 5019

    5    libc.so.6                          0x00002ac94f6bf460 __libc_start_main +
    245

    6    tmp8o972scd                        0x0000564a6c1e3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i]\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp3im71brf.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmp3im71brf.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmp3im71brf.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmp3im71brf.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmp3im71brf.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmp3im71brf.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    for i\
    \ : Int in k..<arr.count {\n        sum += arr[i] - arr[i-1]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp4wy8c163/tmp4wy8c163.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b545ffa8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b545fc9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b545fc9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b545fc9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4wy8c163                        0x00005637b19d657b <unavailable> + 5499

    5    libc.so.6                          0x00002b5460194460 __libc_start_main +
    245

    6    tmp4wy8c163                        0x00005637b19d61a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr.reduce(0) { $0 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp8vtb8avi/tmp8vtb8avi.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2167c1ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2167911b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2167911988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21679107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8vtb8avi                        0x0000563a2b8bb3bb <unavailable> + 5051

    5    libc.so.6                          0x00002b2167e06460 __libc_start_main +
    245

    6    tmp8vtb8avi                        0x0000563a2b8bafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    for i\
    \ : Int in k..<arr.count {\n        sum += arr[i] - arr[i - k]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpt7cxciv4/tmpt7cxciv4.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a0b712c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a0b409b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a0b409988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a0b4087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt7cxciv4                        0x00005634bbcd857b <unavailable> + 5499

    5    libc.so.6                          0x00002b6a0b8fe460 __libc_start_main +
    245

    6    tmpt7cxciv4                        0x00005634bbcd81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpyu_it7zi.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmpyu_it7zi.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmpyu_it7zi.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpewjnk8c6/tmpewjnk8c6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a981bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a97eb4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1a97eb4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1a97eb37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpewjnk8c6                        0x000056314556c5fd <unavailable> + 5629

    5    libc.so.6                          0x00002b1a983a9460 __libc_start_main +
    245

    6    tmpewjnk8c6                        0x000056314556c149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i]\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp3im71brf.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmp3im71brf.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmp3im71brf.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmp3im71brf.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmp3im71brf.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmp3im71brf.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    guard\
    \ k > 0 && k <= arr.count else { return 0 }\n    var sum = 0\n    for idx in 0..<k\
    \ {\n        sum += arr[idx]\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k:\
    \ 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: Exception
  stderr: 'tmp8lhyfvix/tmp8lhyfvix.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8813507c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b88131feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b88131fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b88131fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8lhyfvix                        0x000056083e6f065d <unavailable> + 5725

    5    libc.so.6                          0x00002b88136f3460 __libc_start_main +
    245

    6    tmp8lhyfvix                        0x000056083e6f01a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8]\
    \ + arr[9] + arr[k] + arr[k+1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abc332c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc32fb9561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abc32fb9286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abc32fb913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abc32fb8bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abc32db8e83 <unavailable> + 188035

    6    tmpdnl8o7so                        0x0000555f8694b984 <unavailable> + 6532

    7    tmpdnl8o7so                        0x0000555f8694b31d <unavailable> + 4893

    8    libc.so.6                          0x00002abc334ae460 __libc_start_main +
    245

    9    tmpdnl8o7so                        0x0000555f8694afc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[k] + arr[k+1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp8o972scd/tmp8o972scd.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac94f4d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac94f1cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac94f1ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac94f1c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8o972scd                        0x0000564a6c1e439b <unavailable> + 5019

    5    libc.so.6                          0x00002ac94f6bf460 __libc_start_main +
    245

    6    tmp8o972scd                        0x0000564a6c1e3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ k + arr[0] + arr[k-1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpayqeu5va/tmpayqeu5va.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39ac0d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b39abdc9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b39abdc9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b39abdc87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpayqeu5va                        0x0000555dfd6cf39b <unavailable> + 5019

    5    libc.so.6                          0x00002b39ac2be460 __libc_start_main +
    245

    6    tmpayqeu5va                        0x0000555dfd6cefc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpewjnk8c6/tmpewjnk8c6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a981bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a97eb4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1a97eb4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1a97eb37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpewjnk8c6                        0x000056314556c5fd <unavailable> + 5629

    5    libc.so.6                          0x00002b1a983a9460 __libc_start_main +
    245

    6    tmpewjnk8c6                        0x000056314556c149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8]\
    \ + arr[9] + arr[k] + arr[k+1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abc332c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc32fb9561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abc32fb9286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abc32fb913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abc32fb8bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abc32db8e83 <unavailable> + 188035

    6    tmpdnl8o7so                        0x0000555f8694b984 <unavailable> + 6532

    7    tmpdnl8o7so                        0x0000555f8694b31d <unavailable> + 4893

    8    libc.so.6                          0x00002abc334ae460 __libc_start_main +
    245

    9    tmpdnl8o7so                        0x0000555f8694afc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[k] + arr[k+1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp8o972scd/tmp8o972scd.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac94f4d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac94f1cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac94f1ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac94f1c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8o972scd                        0x0000564a6c1e439b <unavailable> + 5019

    5    libc.so.6                          0x00002ac94f6bf460 __libc_start_main +
    245

    6    tmp8o972scd                        0x0000564a6c1e3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpyu_it7zi.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmpyu_it7zi.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmpyu_it7zi.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[k] + arr[k+1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp8o972scd/tmp8o972scd.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac94f4d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac94f1cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac94f1ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac94f1c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8o972scd                        0x0000564a6c1e439b <unavailable> + 5019

    5    libc.so.6                          0x00002ac94f6bf460 __libc_start_main +
    245

    6    tmp8o972scd                        0x0000564a6c1e3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr.reduce(0) { $0 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp8vtb8avi/tmp8vtb8avi.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2167c1ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2167911b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2167911988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21679107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8vtb8avi                        0x0000563a2b8bb3bb <unavailable> + 5051

    5    libc.so.6                          0x00002b2167e06460 __libc_start_main +
    245

    6    tmp8vtb8avi                        0x0000563a2b8bafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[k] + arr[k+1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp8o972scd/tmp8o972scd.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac94f4d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac94f1cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac94f1ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac94f1c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8o972scd                        0x0000564a6c1e439b <unavailable> + 5019

    5    libc.so.6                          0x00002ac94f6bf460 __libc_start_main +
    245

    6    tmp8o972scd                        0x0000564a6c1e3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    guard\
    \ arr.count > k else {\n        return arr[0]\n    }\n    var sum = 0\n    for\
    \ i in 1..k {\n        sum += arr[i]\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpessnnj7r.swift:15:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..k {\n              ^~\n              ...\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8]\
    \ + arr[9] + arr[k] + arr[k + 1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ba41f3dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba41f0d3561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba41f0d3286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba41f0d313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba41f0d2bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ba41eed2e83 <unavailable> + 188035

    6    tmpolzcdhqj                        0x0000555961715984 <unavailable> + 6532

    7    tmpolzcdhqj                        0x000055596171531d <unavailable> + 4893

    8    libc.so.6                          0x00002ba41f5c8460 __libc_start_main +
    245

    9    tmpolzcdhqj                        0x0000555961714fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8]\
    \ + arr[9] + arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7]\
    \ + arr[8] + arr[9] + arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6]\
    \ + arr[7] + arr[8] + arr[9] + arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5]\
    \ + arr[6] + arr[7] + arr[8] + arr[9] + arr[0] + arr[1] + arr[2] + arr[3] + arr[4]\
    \ + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[0] + arr[1] + arr[2] + arr[3]\
    \ + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[0] + arr[1] + arr[2]\
    \ + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[0] + arr[1]\
    \ + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[0]\
    \ + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9]\
    \ + arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8]\
    \ + arr[9] + arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7]\
    \ + arr[8] + arr[9] + arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6]\
    \ + arr[7] + arr[8] + arr[9] + arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5]\
    \ + arr[6] + arr[7] + arr[8] + arr[9] + arr[0] + arr[1] + arr[2] + arr[3] + arr[4]\
    \ + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[0] + arr[1] + arr[2] + arr[3]\
    \ + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[0] + arr[1] + arr[2]\
    \ + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[0] + arr[1]\
    \ + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[0]\
    \ + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9]\
    \ + arr[0] + arr[1] + arr[2] + \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: '/tmp/tmp0n71sb_z.swift:12:1: error: expected expression after operator

    }

    ^

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8]\
    \ + arr[9] + arr[k] + arr[k+1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abc332c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc32fb9561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abc32fb9286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abc32fb913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abc32fb8bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abc32db8e83 <unavailable> + 188035

    6    tmpdnl8o7so                        0x0000555f8694b984 <unavailable> + 6532

    7    tmpdnl8o7so                        0x0000555f8694b31d <unavailable> + 4893

    8    libc.so.6                          0x00002abc334ae460 __libc_start_main +
    245

    9    tmpdnl8o7so                        0x0000555f8694afc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[k] + arr[k-1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp9b75onox/tmp9b75onox.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade1be28c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade1bb1fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade1bb1f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade1bb1e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9b75onox                        0x0000564a7c18539b <unavailable> + 5019

    5    libc.so.6                          0x00002ade1c014460 __libc_start_main +
    245

    6    tmp9b75onox                        0x0000564a7c184fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[k] + arr[k+1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp8o972scd/tmp8o972scd.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac94f4d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac94f1cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac94f1ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac94f1c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8o972scd                        0x0000564a6c1e439b <unavailable> + 5019

    5    libc.so.6                          0x00002ac94f6bf460 __libc_start_main +
    245

    6    tmp8o972scd                        0x0000564a6c1e3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpyu_it7zi.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmpyu_it7zi.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmpyu_it7zi.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    let\
    \ len = arr.count\n    if k > len {\n        return -1\n    }\n    var sum = 0\n\
    \    var i = 0\n    while i < k {\n        sum += arr[i]\n        i += 1\n   \
    \ }\n    for _ in 0..<k {\n        sum += arr[i]\n        i += 1\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpv1rzbs1i/tmpv1rzbs1i.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6dcc29bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6dcbf92b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6dcbf92988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6dcbf917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv1rzbs1i                        0x0000555e856ad57b <unavailable> + 5499

    5    libc.so.6                          0x00002b6dcc487460 __libc_start_main +
    245

    6    tmpv1rzbs1i                        0x0000555e856ad1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr.reduce(0) { $0 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp8vtb8avi/tmp8vtb8avi.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2167c1ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2167911b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2167911988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21679107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8vtb8avi                        0x0000563a2b8bb3bb <unavailable> + 5051

    5    libc.so.6                          0x00002b2167e06460 __libc_start_main +
    245

    6    tmp8vtb8avi                        0x0000563a2b8bafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i]\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp3im71brf.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmp3im71brf.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmp3im71brf.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmp3im71brf.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmp3im71brf.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmp3im71brf.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8]\
    \ + arr[9] + arr[k] + arr[k+1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abc332c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc32fb9561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abc32fb9286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abc32fb913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abc32fb8bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abc32db8e83 <unavailable> + 188035

    6    tmpdnl8o7so                        0x0000555f8694b984 <unavailable> + 6532

    7    tmpdnl8o7so                        0x0000555f8694b31d <unavailable> + 4893

    8    libc.so.6                          0x00002abc334ae460 __libc_start_main +
    245

    9    tmpdnl8o7so                        0x0000555f8694afc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpyu_it7zi.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmpyu_it7zi.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmpyu_it7zi.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpyu_it7zi.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmpyu_it7zi.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmpyu_it7zi.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpewjnk8c6/tmpewjnk8c6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a981bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a97eb4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1a97eb4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1a97eb37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpewjnk8c6                        0x000056314556c5fd <unavailable> + 5629

    5    libc.so.6                          0x00002b1a983a9460 __libc_start_main +
    245

    6    tmpewjnk8c6                        0x000056314556c149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8]\
    \ + arr[9] + arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7]\
    \ + arr[8] + arr[9] + arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6]\
    \ + arr[7] + arr[8] + arr[9] + arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5]\
    \ + arr[6] + arr[7] + arr[8] + arr[9] + arr[0] + arr[1] + arr[2] + arr[3] + arr[4]\
    \ + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[0] + arr[1] + arr[2] + arr[3]\
    \ + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[0] + arr[1] + arr[2]\
    \ + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[0] + arr[1]\
    \ + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[0]\
    \ + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9]\
    \ + arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8]\
    \ + arr[9] + arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7]\
    \ + arr[8] + arr[9] + arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6]\
    \ + arr[7] + arr[8] + arr[9] + arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5]\
    \ + arr[6] + arr[7] + arr[8] + arr[9] + arr[0] + arr[1] + arr[2] + arr[3] + arr[4]\
    \ + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[0] + arr[1] + arr[2] + arr[3]\
    \ + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[0] + arr[1] + arr[2]\
    \ + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[0] + arr[1]\
    \ + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[0]\
    \ + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9]\
    \ + arr[0] + arr[1] + arr[2] + \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: '/tmp/tmp0n71sb_z.swift:12:1: error: expected expression after operator

    }

    ^

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpewjnk8c6/tmpewjnk8c6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a981bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a97eb4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1a97eb4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1a97eb37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpewjnk8c6                        0x000056314556c5fd <unavailable> + 5629

    5    libc.so.6                          0x00002b1a983a9460 __libc_start_main +
    245

    6    tmpewjnk8c6                        0x000056314556c149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpyu_it7zi.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmpyu_it7zi.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmpyu_it7zi.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i]\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp3im71brf.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmp3im71brf.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmp3im71brf.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmp3im71brf.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmp3im71brf.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmp3im71brf.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr.reduce(0) { $0 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp8vtb8avi/tmp8vtb8avi.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2167c1ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2167911b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2167911988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21679107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8vtb8avi                        0x0000563a2b8bb3bb <unavailable> + 5051

    5    libc.so.6                          0x00002b2167e06460 __libc_start_main +
    245

    6    tmp8vtb8avi                        0x0000563a2b8bafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[k] + add_elements(arr[k+1:], k-1)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpf8l0_2kj.swift:11:41: error: expected ',' separator\n    return\
    \ arr[k] + add_elements(arr[k+1:], k-1)\n                                    \
    \    ^\n                                        ,\n/tmp/tmpf8l0_2kj.swift:11:41:\
    \ error: expected expression in list of expressions\n    return arr[k] + add_elements(arr[k+1:],\
    \ k-1)\n                                        ^\n/tmp/tmpf8l0_2kj.swift:11:33:\
    \ error: missing argument labels 'arr:k:' in call\n    return arr[k] + add_elements(arr[k+1:],\
    \ k-1)\n                                ^\n                                 arr:\
    \       k: \n/tmp/tmpf8l0_2kj.swift:11:37: error: cannot convert value of type\
    \ 'Int' to expected argument type '[Int]'\n    return arr[k] + add_elements(arr[k+1:],\
    \ k-1)\n                                    ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    let\
    \ result = arr[0] + arr[1] + arr[2] + arr[3] + arr[4]\n    for index in stride(from:\
    \ 5, to: arr.count, by: -1) {\n        let element = arr[index]\n        if element\
    \ < 10 {\n            result += element\n        } else {\n            result\
    \ += element - 10\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k:\
    \ 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpj_iitsyv.swift:15:20: error: left side of mutating operator isn't\
    \ mutable: 'result' is a 'let' constant\n            result += element\n     \
    \       ~~~~~~ ^\n/tmp/tmpj_iitsyv.swift:11:5: note: change 'let' to 'var' to\
    \ make it mutable\n    let result = arr[0] + arr[1] + arr[2] + arr[3] + arr[4]\n\
    \    ^~~\n    var\n/tmp/tmpj_iitsyv.swift:17:20: error: left side of mutating\
    \ operator isn't mutable: 'result' is a 'let' constant\n            result +=\
    \ element - 10\n            ~~~~~~ ^\n/tmp/tmpj_iitsyv.swift:11:5: note: change\
    \ 'let' to 'var' to make it mutable\n    let result = arr[0] + arr[1] + arr[2]\
    \ + arr[3] + arr[4]\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[k] + arr[k+1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp8o972scd/tmp8o972scd.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac94f4d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac94f1cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac94f1ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac94f1c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8o972scd                        0x0000564a6c1e439b <unavailable> + 5019

    5    libc.so.6                          0x00002ac94f6bf460 __libc_start_main +
    245

    6    tmp8o972scd                        0x0000564a6c1e3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[k] + arr[k+1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp8o972scd/tmp8o972scd.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac94f4d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac94f1cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac94f1ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac94f1c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8o972scd                        0x0000564a6c1e439b <unavailable> + 5019

    5    libc.so.6                          0x00002ac94f6bf460 __libc_start_main +
    245

    6    tmp8o972scd                        0x0000564a6c1e3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i]\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp3im71brf.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmp3im71brf.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmp3im71brf.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmp3im71brf.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmp3im71brf.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmp3im71brf.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    guard\
    \ k > 0 && k <= arr.count else { return 0 }\n    var sum = 0\n    for idx in 0..<k\
    \ {\n        sum += arr[idx]\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k:\
    \ 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: Exception
  stderr: 'tmp8lhyfvix/tmp8lhyfvix.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8813507c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b88131feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b88131fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b88131fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8lhyfvix                        0x000056083e6f065d <unavailable> + 5725

    5    libc.so.6                          0x00002b88136f3460 __libc_start_main +
    245

    6    tmp8lhyfvix                        0x000056083e6f01a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8]\
    \ + arr[9] + arr[k] + arr[k + 1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ba41f3dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba41f0d3561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba41f0d3286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba41f0d313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba41f0d2bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ba41eed2e83 <unavailable> + 188035

    6    tmpolzcdhqj                        0x0000555961715984 <unavailable> + 6532

    7    tmpolzcdhqj                        0x000055596171531d <unavailable> + 4893

    8    libc.so.6                          0x00002ba41f5c8460 __libc_start_main +
    245

    9    tmpolzcdhqj                        0x0000555961714fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[k] + arr[k+1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp8o972scd/tmp8o972scd.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac94f4d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac94f1cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac94f1ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac94f1c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8o972scd                        0x0000564a6c1e439b <unavailable> + 5019

    5    libc.so.6                          0x00002ac94f6bf460 __libc_start_main +
    245

    6    tmp8o972scd                        0x0000564a6c1e3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    for i\
    \ : Int in k..<arr.count {\n        sum += arr[i] - arr[i-k]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpajmzw6dg/tmpajmzw6dg.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b536cf36c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b536cc2db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b536cc2d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b536cc2c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpajmzw6dg                        0x0000560b045c457b <unavailable> + 5499

    5    libc.so.6                          0x00002b536d122460 __libc_start_main +
    245

    6    tmpajmzw6dg                        0x0000560b045c41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8]\
    \ + arr[9] + arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7]\
    \ + arr[8] + arr[9] + arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6]\
    \ + arr[7] + arr[8] + arr[9] + arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5]\
    \ + arr[6] + arr[7] + arr[8] + arr[9] + arr[0] + arr[1] + arr[2] + arr[3] + arr[4]\
    \ + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[0] + arr[1] + arr[2] + arr[3]\
    \ + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[0] + arr[1] + arr[2]\
    \ + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[0] + arr[1]\
    \ + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[0]\
    \ + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9]\
    \ + arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8]\
    \ + arr[9] + arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7]\
    \ + arr[8] + arr[9] + arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6]\
    \ + arr[7] + arr[8] + arr[9] + arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5]\
    \ + arr[6] + arr[7] + arr[8] + arr[9] + arr[0] + arr[1] + arr[2] + arr[3] + arr[4]\
    \ + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[0] + arr[1] + arr[2] + arr[3]\
    \ + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[0] + arr[1] + arr[2]\
    \ + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[0] + arr[1]\
    \ + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[0]\
    \ + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9]\
    \ + arr[0] + arr[1] + arr[2] + \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: '/tmp/tmp0n71sb_z.swift:12:1: error: expected expression after operator

    }

    ^

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    let\
    \ len = arr.count\n    if len < k {\n        return 0\n    }\n    var sum = 0\n\
    \    for i in 0..<k {\n        sum += arr[i]\n    }\n    for i in 0..<k {\n  \
    \      sum += arr[i]\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpj14iurs7/tmpj14iurs7.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b450427cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4503f73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4503f73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4503f727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj14iurs7                        0x00005623e3e8557b <unavailable> + 5499

    5    libc.so.6                          0x00002b4504468460 __libc_start_main +
    245

    6    tmpj14iurs7                        0x00005623e3e851a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[k] + arr[k+1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp8o972scd/tmp8o972scd.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac94f4d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac94f1cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac94f1ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac94f1c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8o972scd                        0x0000564a6c1e439b <unavailable> + 5019

    5    libc.so.6                          0x00002ac94f6bf460 __libc_start_main +
    245

    6    tmp8o972scd                        0x0000564a6c1e3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8]\
    \ + arr[9] + arr[k-1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b55a7131c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55a6e28561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b55a6e28286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b55a6e2813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b55a6e27bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b55a6c27e83 <unavailable> + 188035

    6    tmp902ycylg                        0x00005604b4d82963 <unavailable> + 6499

    7    tmp902ycylg                        0x00005604b4d8231d <unavailable> + 4893

    8    libc.so.6                          0x00002b55a731d460 __libc_start_main +
    245

    9    tmp902ycylg                        0x00005604b4d81fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[k] + arr[k+1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp8o972scd/tmp8o972scd.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac94f4d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac94f1cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac94f1ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac94f1c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8o972scd                        0x0000564a6c1e439b <unavailable> + 5019

    5    libc.so.6                          0x00002ac94f6bf460 __libc_start_main +
    245

    6    tmp8o972scd                        0x0000564a6c1e3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8]\
    \ + arr[9] + arr[k] + arr[k+1] + arr[k+2] + arr[k+3]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k:\
    \ 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a65dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a62d6561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad9a62d6286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad9a62d613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad9a62d5bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ad9a60d5e83 <unavailable> + 188035

    6    tmpjip647q1                        0x0000556f850c6990 <unavailable> + 6544

    7    tmpjip647q1                        0x0000556f850c631d <unavailable> + 4893

    8    libc.so.6                          0x00002ad9a67cb460 __libc_start_main +
    245

    9    tmpjip647q1                        0x0000556f850c5fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8]\
    \ + arr[9] + arr[k-1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b55a7131c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55a6e28561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b55a6e28286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b55a6e2813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b55a6e27bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b55a6c27e83 <unavailable> + 188035

    6    tmp902ycylg                        0x00005604b4d82963 <unavailable> + 6499

    7    tmp902ycylg                        0x00005604b4d8231d <unavailable> + 4893

    8    libc.so.6                          0x00002b55a731d460 __libc_start_main +
    245

    9    tmp902ycylg                        0x00005604b4d81fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    guard\
    \ k > 0 && k <= arr.count else { return 0 }\n    var sum = 0\n    for idx in 0..<k\
    \ {\n        sum += arr[idx]\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k:\
    \ 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: Exception
  stderr: 'tmp8lhyfvix/tmp8lhyfvix.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8813507c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b88131feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b88131fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b88131fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8lhyfvix                        0x000056083e6f065d <unavailable> + 5725

    5    libc.so.6                          0x00002b88136f3460 __libc_start_main +
    245

    6    tmp8lhyfvix                        0x000056083e6f01a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i]\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp3im71brf.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmp3im71brf.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmp3im71brf.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmp3im71brf.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmp3im71brf.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmp3im71brf.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8]\
    \ + arr[9] + arr[k-1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b55a7131c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55a6e28561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b55a6e28286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b55a6e2813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b55a6e27bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b55a6c27e83 <unavailable> + 188035

    6    tmp902ycylg                        0x00005604b4d82963 <unavailable> + 6499

    7    tmp902ycylg                        0x00005604b4d8231d <unavailable> + 4893

    8    libc.so.6                          0x00002b55a731d460 __libc_start_main +
    245

    9    tmp902ycylg                        0x00005604b4d81fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpyu_it7zi.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmpyu_it7zi.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmpyu_it7zi.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp_j3rehs9/tmp_j3rehs9.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b40431f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4042eebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4042eeb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4042eea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_j3rehs9                        0x000055e0b09e85fd <unavailable> + 5629

    5    libc.so.6                          0x00002b40433e0460 __libc_start_main +
    245

    6    tmp_j3rehs9                        0x000055e0b09e8149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8]\
    \ + arr[9] + arr[k-1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b55a7131c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55a6e28561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b55a6e28286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b55a6e2813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b55a6e27bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b55a6c27e83 <unavailable> + 188035

    6    tmp902ycylg                        0x00005604b4d82963 <unavailable> + 6499

    7    tmp902ycylg                        0x00005604b4d8231d <unavailable> + 4893

    8    libc.so.6                          0x00002b55a731d460 __libc_start_main +
    245

    9    tmp902ycylg                        0x00005604b4d81fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ sum(arr[0..<k])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpcaczm8x7.swift:11:12: error: cannot find 'sum' in scope\n    return\
    \ sum(arr[0..<k])\n           ^~~\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    guard\
    \ arr.count > 0 else {\n        return 0\n    }\n    guard k <= arr.count else\
    \ {\n        return 0\n    }\n    var sum = 0\n    for index in 0..<k {\n    \
    \    sum += arr[index]\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpgg3hvfe_/tmpgg3hvfe_.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba878560c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba878257b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba878257988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8782567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgg3hvfe_                        0x0000562cb941665d <unavailable> + 5725

    5    libc.so.6                          0x00002ba87874c460 __libc_start_main +
    245

    6    tmpgg3hvfe_                        0x0000562cb94161a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpyu_it7zi.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmpyu_it7zi.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmpyu_it7zi.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8]\
    \ + arr[9] + arr[k-1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b55a7131c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55a6e28561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b55a6e28286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b55a6e2813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b55a6e27bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b55a6c27e83 <unavailable> + 188035

    6    tmp902ycylg                        0x00005604b4d82963 <unavailable> + 6499

    7    tmp902ycylg                        0x00005604b4d8231d <unavailable> + 4893

    8    libc.so.6                          0x00002b55a731d460 __libc_start_main +
    245

    9    tmp902ycylg                        0x00005604b4d81fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    \n \
    \   // TODO: Fill this in.\n    \n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpv2_6zk_5/tmpv2_6zk_5.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b76a2634c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b76a232bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b76a232b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b76a232a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv2_6zk_5                        0x0000563e0b13533b <unavailable> + 4923

    5    libc.so.6                          0x00002b76a2820460 __libc_start_main +
    245

    6    tmpv2_6zk_5                        0x0000563e0b134f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[k] + arr[k + 1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp3ppf397h/tmp3ppf397h.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b059e85cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b059e553b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b059e553988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b059e5527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3ppf397h                        0x00005558d1fe039b <unavailable> + 5019

    5    libc.so.6                          0x00002b059ea48460 __libc_start_main +
    245

    6    tmp3ppf397h                        0x00005558d1fdffc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8]\
    \ + arr[9] + arr[k] + arr[k+1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abc332c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc32fb9561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abc32fb9286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abc32fb913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abc32fb8bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abc32db8e83 <unavailable> + 188035

    6    tmpdnl8o7so                        0x0000555f8694b984 <unavailable> + 6532

    7    tmpdnl8o7so                        0x0000555f8694b31d <unavailable> + 4893

    8    libc.so.6                          0x00002abc334ae460 __libc_start_main +
    245

    9    tmpdnl8o7so                        0x0000555f8694afc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ sum(arr[k..<arr.count])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpvtsv1sz3.swift:11:12: error: cannot find 'sum' in scope\n    return\
    \ sum(arr[k..<arr.count])\n           ^~~\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    let\
    \ result = arr[0] + arr[1]\n    for index in 2..<k {\n        result += arr[index]\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpynmoh79y.swift:13:16: error: left side of mutating operator isn't\
    \ mutable: 'result' is a 'let' constant\n        result += arr[index]\n      \
    \  ~~~~~~ ^\n/tmp/tmpynmoh79y.swift:11:5: note: change 'let' to 'var' to make\
    \ it mutable\n    let result = arr[0] + arr[1]\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[k] + arr[k+1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp8o972scd/tmp8o972scd.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac94f4d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac94f1cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac94f1ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac94f1c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8o972scd                        0x0000564a6c1e439b <unavailable> + 5019

    5    libc.so.6                          0x00002ac94f6bf460 __libc_start_main +
    245

    6    tmp8o972scd                        0x0000564a6c1e3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8]\
    \ + arr[9] + arr[k] + arr[k+1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abc332c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc32fb9561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abc32fb9286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abc32fb913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abc32fb8bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abc32db8e83 <unavailable> + 188035

    6    tmpdnl8o7so                        0x0000555f8694b984 <unavailable> + 6532

    7    tmpdnl8o7so                        0x0000555f8694b31d <unavailable> + 4893

    8    libc.so.6                          0x00002abc334ae460 __libc_start_main +
    245

    9    tmpdnl8o7so                        0x0000555f8694afc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i]\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp3im71brf.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmp3im71brf.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmp3im71brf.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmp3im71brf.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmp3im71brf.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmp3im71brf.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i]\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp3im71brf.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmp3im71brf.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmp3im71brf.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmp3im71brf.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmp3im71brf.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmp3im71brf.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpyu_it7zi.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmpyu_it7zi.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmpyu_it7zi.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[k] + arr[k+1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp8o972scd/tmp8o972scd.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac94f4d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac94f1cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac94f1ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac94f1c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8o972scd                        0x0000564a6c1e439b <unavailable> + 5019

    5    libc.so.6                          0x00002ac94f6bf460 __libc_start_main +
    245

    6    tmp8o972scd                        0x0000564a6c1e3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[k] + arr[k + 1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp3ppf397h/tmp3ppf397h.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b059e85cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b059e553b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b059e553988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b059e5527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3ppf397h                        0x00005558d1fe039b <unavailable> + 5019

    5    libc.so.6                          0x00002b059ea48460 __libc_start_main +
    245

    6    tmp3ppf397h                        0x00005558d1fdffc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ k + add_elements_helper(arr, k)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpnmwn3nli.swift:11:16: error: cannot find 'add_elements_helper'\
    \ in scope\n    return k + add_elements_helper(arr, k)\n               ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr.reduce(0) { $0 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp8vtb8avi/tmp8vtb8avi.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2167c1ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2167911b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2167911988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21679107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8vtb8avi                        0x0000563a2b8bb3bb <unavailable> + 5051

    5    libc.so.6                          0x00002b2167e06460 __libc_start_main +
    245

    6    tmp8vtb8avi                        0x0000563a2b8bafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[k] + arr[k+1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp8o972scd/tmp8o972scd.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac94f4d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac94f1cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac94f1ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac94f1c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8o972scd                        0x0000564a6c1e439b <unavailable> + 5019

    5    libc.so.6                          0x00002ac94f6bf460 __libc_start_main +
    245

    6    tmp8o972scd                        0x0000564a6c1e3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    let\
    \ len = arr.count\n    if k > len {\n        return -1\n    }\n    var sum = 0\n\
    \    for i in 0..<k {\n        sum += arr[i]\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpaugfwbn_/tmpaugfwbn_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8b6314c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8b600bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad8b600b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8b600a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaugfwbn_                        0x000055f35d6c165d <unavailable> + 5725

    5    libc.so.6                          0x00002ad8b6500460 __libc_start_main +
    245

    6    tmpaugfwbn_                        0x000055f35d6c11a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    guard\
    \ k > 0 && k <= arr.count else { return 0 }\n    var sum = 0\n    for index in\
    \ 0..<k {\n        sum += arr[index]\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: Exception
  stderr: 'tmpqcd98llj/tmpqcd98llj.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3c921aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3c91ea5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3c91ea5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3c91ea47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqcd98llj                        0x000056473ca6265d <unavailable> + 5725

    5    libc.so.6                          0x00002b3c9239a460 __libc_start_main +
    245

    6    tmpqcd98llj                        0x000056473ca621a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i]\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp3im71brf.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmp3im71brf.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmp3im71brf.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmp3im71brf.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmp3im71brf.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmp3im71brf.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpewjnk8c6/tmpewjnk8c6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a981bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a97eb4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1a97eb4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1a97eb37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpewjnk8c6                        0x000056314556c5fd <unavailable> + 5629

    5    libc.so.6                          0x00002b1a983a9460 __libc_start_main +
    245

    6    tmpewjnk8c6                        0x000056314556c149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8]\
    \ + arr[9] + arr[k] + arr[k+1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abc332c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc32fb9561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abc32fb9286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abc32fb913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abc32fb8bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abc32db8e83 <unavailable> + 188035

    6    tmpdnl8o7so                        0x0000555f8694b984 <unavailable> + 6532

    7    tmpdnl8o7so                        0x0000555f8694b31d <unavailable> + 4893

    8    libc.so.6                          0x00002abc334ae460 __libc_start_main +
    245

    9    tmpdnl8o7so                        0x0000555f8694afc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    let\
    \ len = arr.count\n    if k > len {\n        return -1\n    }\n    var sum = 0\n\
    \    for i in 0..<k {\n        sum += arr[i]\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpaugfwbn_/tmpaugfwbn_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8b6314c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8b600bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad8b600b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8b600a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaugfwbn_                        0x000055f35d6c165d <unavailable> + 5725

    5    libc.so.6                          0x00002ad8b6500460 __libc_start_main +
    245

    6    tmpaugfwbn_                        0x000055f35d6c11a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8]\
    \ + arr[9] + arr[k-1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b55a7131c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55a6e28561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b55a6e28286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b55a6e2813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b55a6e27bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b55a6c27e83 <unavailable> + 188035

    6    tmp902ycylg                        0x00005604b4d82963 <unavailable> + 6499

    7    tmp902ycylg                        0x00005604b4d8231d <unavailable> + 4893

    8    libc.so.6                          0x00002b55a731d460 __libc_start_main +
    245

    9    tmp902ycylg                        0x00005604b4d81fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ sum(arr[k..<arr.count])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpvtsv1sz3.swift:11:12: error: cannot find 'sum' in scope\n    return\
    \ sum(arr[k..<arr.count])\n           ^~~\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    let\
    \ len = arr.count\n    if len < k {\n        return 0\n    }\n    var sum = 0\n\
    \    for index in 0..<k {\n        sum += arr[index]\n    }\n    for index in\
    \ k..<len {\n        sum += arr[index-k]\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: Exception
  stderr: 'tmpxi3cqnfx/tmpxi3cqnfx.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5acd935c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5acd62cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5acd62c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5acd62b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxi3cqnfx                        0x000055f7d42b757b <unavailable> + 5499

    5    libc.so.6                          0x00002b5acdb21460 __libc_start_main +
    245

    6    tmpxi3cqnfx                        0x000055f7d42b71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpewjnk8c6/tmpewjnk8c6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a981bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a97eb4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1a97eb4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1a97eb37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpewjnk8c6                        0x000056314556c5fd <unavailable> + 5629

    5    libc.so.6                          0x00002b1a983a9460 __libc_start_main +
    245

    6    tmpewjnk8c6                        0x000056314556c149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    let\
    \ len = arr.count\n    if len <= k {\n        return arr[0] + arr[1]\n    }\n\
    \    var sum = 0\n    for i in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum + add_elements(arr[k..<len], k - k)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpjjmkup7l.swift:19:30: error: missing argument labels 'arr:k:' in\
    \ call\n    return sum + add_elements(arr[k..<len], k - k)\n                 \
    \            ^\n                              arr:          k: \n/tmp/tmpjjmkup7l.swift:19:34:\
    \ error: cannot convert value of type 'ArraySlice<Int>' to expected argument type\
    \ '[Int]'\n    return sum + add_elements(arr[k..<len], k - k)\n              \
    \                   ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8]\
    \ + arr[9] + arr[k] + arr[k+1] + arr[k+2] + arr[k+3]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k:\
    \ 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a65dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a62d6561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad9a62d6286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad9a62d613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad9a62d5bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ad9a60d5e83 <unavailable> + 188035

    6    tmpjip647q1                        0x0000556f850c6990 <unavailable> + 6544

    7    tmpjip647q1                        0x0000556f850c631d <unavailable> + 4893

    8    libc.so.6                          0x00002ad9a67cb460 __libc_start_main +
    245

    9    tmpjip647q1                        0x0000556f850c5fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    for i\
    \ : Int in k..<arr.count {\n        sum += arr[i] - arr[i - k]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpt7cxciv4/tmpt7cxciv4.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a0b712c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a0b409b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a0b409988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a0b4087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt7cxciv4                        0x00005634bbcd857b <unavailable> + 5499

    5    libc.so.6                          0x00002b6a0b8fe460 __libc_start_main +
    245

    6    tmpt7cxciv4                        0x00005634bbcd81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[k] + arr[k+1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp8o972scd/tmp8o972scd.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac94f4d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac94f1cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac94f1ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac94f1c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8o972scd                        0x0000564a6c1e439b <unavailable> + 5019

    5    libc.so.6                          0x00002ac94f6bf460 __libc_start_main +
    245

    6    tmp8o972scd                        0x0000564a6c1e3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp_j3rehs9/tmp_j3rehs9.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b40431f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4042eebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4042eeb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4042eea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_j3rehs9                        0x000055e0b09e85fd <unavailable> + 5629

    5    libc.so.6                          0x00002b40433e0460 __libc_start_main +
    245

    6    tmp_j3rehs9                        0x000055e0b09e8149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpyu_it7zi.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmpyu_it7zi.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmpyu_it7zi.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    let\
    \ len = arr.count\n    if len < k {\n        return 0\n    }\n    var sum = 0\n\
    \    for i in 0..<k {\n        sum += arr[i]\n    }\n    for i in 0..<k {\n  \
    \      sum += arr[i]\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpj14iurs7/tmpj14iurs7.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b450427cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4503f73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4503f73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4503f727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj14iurs7                        0x00005623e3e8557b <unavailable> + 5499

    5    libc.so.6                          0x00002b4504468460 __libc_start_main +
    245

    6    tmpj14iurs7                        0x00005623e3e851a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8]\
    \ + arr[9] + arr[k-1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b55a7131c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55a6e28561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b55a6e28286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b55a6e2813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b55a6e27bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b55a6c27e83 <unavailable> + 188035

    6    tmp902ycylg                        0x00005604b4d82963 <unavailable> + 6499

    7    tmp902ycylg                        0x00005604b4d8231d <unavailable> + 4893

    8    libc.so.6                          0x00002b55a731d460 __libc_start_main +
    245

    9    tmp902ycylg                        0x00005604b4d81fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ sumOfElements(arr, k, 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpo4wdzhyi.swift:11:12: error: cannot find 'sumOfElements' in scope\n\
    \    return sumOfElements(arr, k, 0)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpyu_it7zi.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmpyu_it7zi.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmpyu_it7zi.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[k] + arr[k+1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp8o972scd/tmp8o972scd.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac94f4d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac94f1cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac94f1ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac94f1c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8o972scd                        0x0000564a6c1e439b <unavailable> + 5019

    5    libc.so.6                          0x00002ac94f6bf460 __libc_start_main +
    245

    6    tmp8o972scd                        0x0000564a6c1e3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpewjnk8c6/tmpewjnk8c6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a981bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a97eb4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1a97eb4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1a97eb37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpewjnk8c6                        0x000056314556c5fd <unavailable> + 5629

    5    libc.so.6                          0x00002b1a983a9460 __libc_start_main +
    245

    6    tmpewjnk8c6                        0x000056314556c149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    for i\
    \ : Int in k..<arr.count {\n        sum += arr[i] - arr[i-1]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp4wy8c163/tmp4wy8c163.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b545ffa8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b545fc9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b545fc9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b545fc9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4wy8c163                        0x00005637b19d657b <unavailable> + 5499

    5    libc.so.6                          0x00002b5460194460 __libc_start_main +
    245

    6    tmp4wy8c163                        0x00005637b19d61a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpewjnk8c6/tmpewjnk8c6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a981bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a97eb4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1a97eb4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1a97eb37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpewjnk8c6                        0x000056314556c5fd <unavailable> + 5629

    5    libc.so.6                          0x00002b1a983a9460 __libc_start_main +
    245

    6    tmpewjnk8c6                        0x000056314556c149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr.reduce(0) { $0 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp8vtb8avi/tmp8vtb8avi.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2167c1ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2167911b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2167911988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21679107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8vtb8avi                        0x0000563a2b8bb3bb <unavailable> + 5051

    5    libc.so.6                          0x00002b2167e06460 __libc_start_main +
    245

    6    tmp8vtb8avi                        0x0000563a2b8bafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    guard\
    \ k > 0 && k <= arr.count else { return 0 }\n    var sum = 0\n    for idx in 0..<k\
    \ {\n        sum += arr[idx]\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k:\
    \ 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: Exception
  stderr: 'tmp8lhyfvix/tmp8lhyfvix.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8813507c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b88131feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b88131fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b88131fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8lhyfvix                        0x000056083e6f065d <unavailable> + 5725

    5    libc.so.6                          0x00002b88136f3460 __libc_start_main +
    245

    6    tmp8lhyfvix                        0x000056083e6f01a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[k] + arr[k+1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp8o972scd/tmp8o972scd.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac94f4d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac94f1cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac94f1ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac94f1c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8o972scd                        0x0000564a6c1e439b <unavailable> + 5019

    5    libc.so.6                          0x00002ac94f6bf460 __libc_start_main +
    245

    6    tmp8o972scd                        0x0000564a6c1e3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpewjnk8c6/tmpewjnk8c6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a981bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a97eb4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1a97eb4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1a97eb37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpewjnk8c6                        0x000056314556c5fd <unavailable> + 5629

    5    libc.so.6                          0x00002b1a983a9460 __libc_start_main +
    245

    6    tmpewjnk8c6                        0x000056314556c149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i]\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp3im71brf.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmp3im71brf.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmp3im71brf.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmp3im71brf.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmp3im71brf.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmp3im71brf.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
