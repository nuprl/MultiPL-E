name: HumanEval_21_rescale_to_unit
language: swift
prompt: "\n/// Given array of numbers (of at least two elements), apply a linear transform\
  \ to that array,\n/// such that the smallest number will become 0 and the largest\
  \ will become 1\n/// >>> rescale_to_unit(numbers: [1.0, 2.0, 3.0, 4.0, 5.0])\n///\
  \ [0.0, 0.25, 0.5, 0.75, 1.0]\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
  \ {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(rescale_to_unit(numbers: [2.0, 49.9]) ==\
  \ [0.0, 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers:\
  \ [1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
  \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
  \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
completions: ["    var min: Double = Double(numbers.first!)\n    var max: Double =\
    \ Double(numbers.last!)\n    for number in numbers {\n        min = min(min, number)\n\
    \        max = max(max, number)\n    }\n    var result: [Double] = []\n    for\
    \ number in numbers {\n        result.append(number - min)\n        result.append(number\
    \ - max)\n    }\n    return result", "    var scaled: [Double] = []\n    var min:\
    \ Double = Double.greatestFiniteMagnitude\n    var max: Double = Double.lowestFiniteMagnitude\n\
    \    for number in numbers {\n        let scaledNumber = number / max - min\n\
    \        scaled.append(scaledNumber)\n        min = min(min, number)\n       \
    \ max = max(max, number)\n    }\n    return scaled", "    var min: Double = Double.greatestFiniteMagnitude\n\
    \    var max: Double = Double.leastFiniteMagnitude\n    for number in numbers\
    \ {\n        if number < min {\n            min = number\n        }\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    var result:\
    \ [Double] = []\n    for number in numbers {\n        result.append(number - min)\n\
    \        result.append(number - max)\n    }\n    return result", "    guard numbers.count\
    \ > 1 else { return numbers }\n    let min = min(numbers)\n    let max = max(numbers)\n\
    \    var scaled: [Double] = []\n    for number in numbers {\n        scaled.append(number\
    \ - min)\n        scaled.append(number - max)\n    }\n    return scaled", "  \
    \  var rescaled: [Double] = []\n    var min: Double = Double.greatestFiniteMagnitude\n\
    \    var max: Double = Double.lowestFiniteMagnitude\n    for number in numbers\
    \ {\n        let rescaled = number / max\n        rescaled.append(rescaled)\n\
    \        if min > number {\n            min = number\n        }\n        if max\
    \ < number {\n            max = number\n        }\n    }\n    return rescaled",
  "    var min = Double(Int.max)\n    var max = Double(Int.min)\n    for number in\
    \ numbers {\n        min = min(min, number)\n        max = max(max, number)\n\
    \    }\n    var result: [Double] = []\n    for number in numbers {\n        result.append(number\
    \ - min)\n        result.append(number - max)\n    }\n    return result", "  \
    \  var rescaled: [Double] = []\n    for number in numbers {\n        rescaled.append(number\
    \ / min(number, 1.0))\n    }\n    return rescaled", "    var min: Double = Double.greatestFiniteMagnitude\n\
    \    var max: Double = Double.lowestFiniteMagnitude\n    for number in numbers\
    \ {\n        min = min(min, number)\n        max = max(max, number)\n    }\n \
    \   var scaled: [Double] = []\n    for number in numbers {\n        scaled.append(number\
    \ - min)\n        scaled.append(number - max)\n    }\n    return scaled", "  \
    \  var rescaled: [Double] = []\n    for number in numbers {\n        rescaled.append(min(max(0.0,\
    \ number), 1.0))\n    }\n    return rescaled", "    var scaled: [Double] = []\n\
    \    var min: Double = Double(Int.max)\n    var max: Double = Double(Int.min)\n\
    \    for number in numbers {\n        min = min(min, number)\n        max = max(max,\
    \ number)\n    }\n    for number in numbers {\n        scaled.append((number -\
    \ min) / (max - min))\n    }\n    return scaled", "    var min = Double(numbers[0])\n\
    \    var max = Double(numbers[0])\n    for number in numbers {\n        if number\
    \ < min {\n            min = number\n        }\n        if number > max {\n  \
    \          max = number\n        }\n    }\n    var scaled: [Double] = []\n   \
    \ for number in numbers {\n        scaled.append(number - min)\n        scaled.append(max\
    \ - number)\n    }\n    return scaled", "    var min = Double(Int.max)\n    var\
    \ max = Double(Int.min)\n    for number in numbers {\n        min = min(min, number)\n\
    \        max = max(max, number)\n    }\n    var scaled: [Double] = []\n    for\
    \ number in numbers {\n        scaled.append((number - min) / (max - min))\n \
    \   }\n    return scaled", "    var min: Double = Double.greatestFiniteMagnitude\n\
    \    var max: Double = Double.leastFiniteMagnitude\n    for number in numbers\
    \ {\n        min = min(min, number)\n        max = max(max, number)\n    }\n \
    \   var result: [Double] = []\n    for number in numbers {\n        result.append(number\
    \ - min)\n        result.append(number - max)\n    }\n    return result", "  \
    \  var rescaled: [Double] = []\n    var smallest: Double = Double.greatestFiniteMagnitude\n\
    \    var largest: Double = Double.leastFiniteMagnitude\n    for number in numbers\
    \ {\n        rescaled.append(number / largest)\n        smallest = min(smallest,\
    \ number)\n        largest = max(largest, number)\n    }\n    return rescaled",
  "    var scaled: [Double] = []\n    for number in numbers {\n        scaled.append((number\
    \ - min(numbers)) / max(numbers) + 0.5)\n    }\n    return scaled", "    var min:\
    \ Double = Double.greatestFiniteMagnitude\n    var max: Double = Double.lowestFiniteMagnitude\n\
    \    for number in numbers {\n        min = min(min, number)\n        max = max(max,\
    \ number)\n    }\n    var result: [Double] = []\n    for number in numbers {\n\
    \        result.append(number / max - min)\n    }\n    return result", "    var\
    \ min: Double = Double(Int.max)\n    var max: Double = Double(Int.min)\n    for\
    \ number in numbers {\n        min = min(min, number)\n        max = max(max,\
    \ number)\n    }\n    var result: [Double] = []\n    for number in numbers {\n\
    \        result.append(number - min)\n        result.append(number - max)\n  \
    \  }\n    return result", "    var min = Double(Int.max)\n    var max = Double(Int.min)\n\
    \    for number in numbers {\n        min = min(min, number)\n        max = max(max,\
    \ number)\n    }\n    var result: [Double] = []\n    for number in numbers {\n\
    \        result.append(number - min)\n        result.append(number - max)\n  \
    \  }\n    return result", "    var min = Double(Int.max)\n    var max = Double(Int.min)\n\
    \    for number in numbers {\n        min = min(min, number)\n        max = max(max,\
    \ number)\n    }\n    var result: [Double] = []\n    for number in numbers {\n\
    \        result.append(number - min)\n        result.append(number - max)\n  \
    \  }\n    return result", "    var min = Double(numbers[0])\n    var max = Double(numbers[0])\n\
    \    for number in numbers {\n        if number < min {\n            min = number\n\
    \        }\n        if number > max {\n            max = number\n        }\n \
    \   }\n    var result: [Double] = []\n    for number in numbers {\n        result.append(number\
    \ - min)\n        result.append(number - max)\n    }\n    return result", "  \
    \  var min: Double = Double.greatestFiniteMagnitude\n    var max: Double = Double.leastFiniteMagnitude\n\
    \    for number in numbers {\n        min = min(min, number)\n        max = max(max,\
    \ number)\n    }\n    var scaled: [Double] = []\n    for number in numbers {\n\
    \        scaled.append(number - min)\n        scaled.append(number - max)\n  \
    \  }\n    return scaled", "    var min = Double(numbers[0])\n    var max = Double(numbers[0])\n\
    \    for number in numbers {\n        if number < min {\n            min = number\n\
    \        }\n        if number > max {\n            max = number\n        }\n \
    \   }\n    var scale = (max - min) / (Double(numbers.count) - 1)\n    var result\
    \ = [Double](repeating: 0.0, count: numbers.count)\n    for number in numbers\
    \ {\n        result[numbers.index(of: number) - 1] = number * scale\n    }\n \
    \   return result", "    var min: Double = Double(Int.max)\n    var max: Double\
    \ = Double(Int.min)\n    for number in numbers {\n        min = min(min, number)\n\
    \        max = max(max, number)\n    }\n    var result: [Double] = []\n    for\
    \ number in numbers {\n        result.append(number - min)\n        result.append(number\
    \ - max)\n    }\n    return result", "    var scaledNumbers = [Double]()\n   \
    \ var min: Double = Double.greatestFiniteMagnitude\n    var max: Double = Double.lowestFiniteMagnitude\n\
    \    for number in numbers {\n        scaledNumbers.append(number / max - min)\n\
    \        min = min(min, number)\n        max = max(max, number)\n    }\n    return\
    \ scaledNumbers", "    var min: Double = Double(Int.max)\n    var max: Double\
    \ = Double(Int.min)\n    for number in numbers {\n        min = min(min, number)\n\
    \        max = max(max, number)\n    }\n    var scaled: [Double] = []\n    for\
    \ number in numbers {\n        scaled.append(number - min)\n    }\n    for number\
    \ in scaled {\n        number /= max - min\n    }\n    return scaled", "    var\
    \ rescaled: [Double] = []\n    var min: Double = Double(Int.max)\n    var max:\
    \ Double = Double(Int.min)\n    for number in numbers {\n        rescaled.append(number\
    \ - min)\n        min = min(min, number)\n        max = max(max, number)\n   \
    \ }\n    for number in numbers {\n        rescaled.append(number / max - min)\n\
    \    }\n    return rescaled", "    var min = Double(numbers.first!)\n    var max\
    \ = Double(numbers.last!)\n    for number in numbers {\n        min = min(min,\
    \ number)\n        max = max(max, number)\n    }\n    var scaled: [Double] = []\n\
    \    for number in numbers {\n        scaled.append(number - min)\n    }\n   \
    \ for number in scaled {\n        number /= max - min\n    }\n    return scaled",
  "    var rescaled: [Double] = []\n    for number in numbers {\n        rescaled.append(min(max(0.0,\
    \ number), 1.0))\n    }\n    return rescaled", "    var min: Double = Double.greatestFiniteMagnitude\n\
    \    var max: Double = Double.leastFiniteMagnitude\n    for number in numbers\
    \ {\n        min = min(min, number)\n        max = max(max, number)\n    }\n \
    \   var result: [Double] = []\n    for number in numbers {\n        result.append(number\
    \ - min)\n        result.append(number - max)\n    }\n    return result", "  \
    \  var rescaled: [Double] = []\n    var smallest: Double = Double.greatestFiniteMagnitude\n\
    \    var largest: Double = Double.leastFiniteMagnitude\n    for number in numbers\
    \ {\n        rescaled.append(number / largest)\n        smallest = min(smallest,\
    \ number)\n        largest = max(largest, number)\n    }\n    return rescaled",
  "    var min: Double = Double.greatestFiniteMagnitude\n    var max: Double = Double.leastFiniteMagnitude\n\
    \    for number in numbers {\n        min = min(min, number)\n        max = max(max,\
    \ number)\n    }\n    var result: [Double] = []\n    for number in numbers {\n\
    \        result.append(number - min)\n        result.append(number / max - min)\n\
    \    }\n    return result", "    var min: Double = Double.greatestFiniteMagnitude\n\
    \    var max: Double = Double.leastFiniteMagnitude\n    for number in numbers\
    \ {\n        min = min(min, number)\n        max = max(max, number)\n    }\n \
    \   var result: [Double] = []\n    for number in numbers {\n        result.append(number\
    \ - min)\n        result.append(number - max)\n    }\n    return result", "  \
    \  var rescaled: [Double] = []\n    for number in numbers {\n        rescaled.append(number\
    \ / min(number, 1.0))\n    }\n    return rescaled", "    var min = Double(numbers.first!)\n\
    \    var max = Double(numbers.last!)\n    for number in numbers {\n        min\
    \ = min(min, number)\n        max = max(max, number)\n    }\n    var result =\
    \ [Double]()\n    for number in numbers {\n        result.append(number - min)\n\
    \        result.append(number - max)\n    }\n    return result", "    var min:\
    \ Double = Double(Int.max)\n    var max: Double = Double(Int.min)\n    for number\
    \ in numbers {\n        min = min(min, number)\n        max = max(max, number)\n\
    \    }\n    var result: [Double] = []\n    for number in numbers {\n        result.append(number\
    \ - min)\n        result.append(number - max)\n    }\n    return result", "  \
    \  var min = Double(Int.max)\n    var max = Double(Int.min)\n    for number in\
    \ numbers {\n        min = min(min, number)\n        max = max(max, number)\n\
    \    }\n    var scaled: [Double] = []\n    for number in numbers {\n        scaled.append(number\
    \ - min)\n    }\n    for number in scaled {\n        number = number / max\n \
    \   }\n    return scaled", "    let min = min(numbers)\n    let max = max(numbers)\n\
    \    var rescaled: [Double] = []\n    for number in numbers {\n        rescaled.append(number\
    \ - min)\n        rescaled.append(number - max)\n    }\n    return rescaled",
  "    var min = Double(Int.max)\n    var max = Double(Int.min)\n    for number in\
    \ numbers {\n        min = min(min, number)\n        max = max(max, number)\n\
    \    }\n    var result: [Double] = []\n    for number in numbers {\n        result.append(number\
    \ - min)\n        result.append(number - max)\n    }\n    return result", "  \
    \  var min: Double = Double(Int.max)\n    var max: Double = Double(Int.min)\n\
    \    for number in numbers {\n        min = min(min, number)\n        max = max(max,\
    \ number)\n    }\n    var scaled: [Double] = []\n    for number in numbers {\n\
    \        scaled.append((number - min) / (max - min))\n    }\n    return scaled",
  "    var min: Double = Double.greatestFiniteMagnitude\n    var max: Double = Double.leastFiniteMagnitude\n\
    \    for number in numbers {\n        min = min(min, number)\n        max = max(max,\
    \ number)\n    }\n    var scaled: [Double] = []\n    for number in numbers {\n\
    \        scaled.append(number - min)\n        scaled.append(number - max)\n  \
    \  }\n    return scaled", "    var min = Double(Int.max)\n    var max = Double(Int.min)\n\
    \    for number in numbers {\n        min = min(min, number)\n        max = max(max,\
    \ number)\n    }\n    var result: [Double] = []\n    for number in numbers {\n\
    \        result.append(number - min)\n        result.append(number - max)\n  \
    \  }\n    return result", "    var min: Double = Double.greatestFiniteMagnitude\n\
    \    var max: Double = Double.leastFiniteMagnitude\n    for number in numbers\
    \ {\n        min = min(min, number)\n        max = max(max, number)\n    }\n \
    \   var result: [Double] = []\n    for number in numbers {\n        result.append(number\
    \ - min)\n        result.append(number - max)\n    }\n    return result", "  \
    \  var min: Double = Double(Int.max)\n    var max: Double = Double(Int.min)\n\
    \    for number in numbers {\n        min = min(min, number)\n        max = max(max,\
    \ number)\n    }\n    var result: [Double] = []\n    for number in numbers {\n\
    \        result.append(number - min)\n        result.append(number - max)\n  \
    \  }\n    return result", "    var min: Double = Double(Int.max)\n    var max:\
    \ Double = Double(Int.min)\n    for number in numbers {\n        min = min(min,\
    \ number)\n        max = max(max, number)\n    }\n    var result: [Double] = []\n\
    \    for number in numbers {\n        result.append(number - min)\n        result.append(number\
    \ - max)\n    }\n    return result", "    guard numbers.count > 1 else { return\
    \ numbers }\n    var min: Double = Double(numbers.first!)\n    var max: Double\
    \ = Double(numbers.last!)\n    for number in numbers {\n        min = min(min,\
    \ number)\n        max = max(max, number)\n    }\n    var result: [Double] = []\n\
    \    for number in numbers {\n        result.append(number - min)\n        result.append(number\
    \ - max)\n    }\n    return result", "    var min: Double = Double.greatestFiniteMagnitude\n\
    \    var max: Double = Double.leastFiniteMagnitude\n    for number in numbers\
    \ {\n        if number < min {\n            min = number\n        }\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    var scaled:\
    \ [Double] = []\n    for number in numbers {\n        scaled.append(number - min)\n\
    \    }\n    for number in scaled {\n        number /= max - min\n    }\n    return\
    \ scaled", "    let min = min(numbers)\n    let max = max(numbers)\n    var scaled:\
    \ [Double] = []\n    for number in numbers {\n        scaled.append((number -\
    \ min) / (max - min))\n    }\n    return scaled", "    var rescaled: [Double]\
    \ = []\n    for number in numbers {\n        rescaled.append(number / min(number,\
    \ 1.0))\n    }\n    return rescaled", "    var min: Double = Double(Int.max)\n\
    \    var max: Double = Double(Int.min)\n    for number in numbers {\n        min\
    \ = min(min, number)\n        max = max(max, number)\n    }\n    var result: [Double]\
    \ = []\n    for number in numbers {\n        result.append(number - min)\n   \
    \     result.append(number - max)\n    }\n    return result", "    var rescaled:\
    \ [Double] = []\n    var min: Double = Double.greatestFiniteMagnitude\n    var\
    \ max: Double = Double.lowestFiniteMagnitude\n    for number in numbers {\n  \
    \      min = min(min, number)\n        max = max(max, number)\n    }\n    for\
    \ number in numbers {\n        rescaled.append(number - min)\n        rescaled.append(number\
    \ / max - min)\n    }\n    return rescaled", "    var min: Double = Double(Int.max)\n\
    \    var max: Double = Double(Int.min)\n    for number in numbers {\n        min\
    \ = min(min, number)\n        max = max(max, number)\n    }\n    var result: [Double]\
    \ = []\n    for number in numbers {\n        result.append(number - min)\n   \
    \     result.append(number - max)\n    }\n    return result", "    var rescaled:\
    \ [Double] = []\n    var smallest: Double = Double.greatestFiniteMagnitude\n \
    \   var largest: Double = Double.leastFiniteMagnitude\n    for number in numbers\
    \ {\n        rescaled.append(number / largest)\n        smallest = min(smallest,\
    \ number)\n        largest = max(largest, number)\n    }\n    return rescaled",
  "    var min: Double = Double(Int.max)\n    var max: Double = Double(Int.min)\n\
    \    for number in numbers {\n        min = min(min, number)\n        max = max(max,\
    \ number)\n    }\n    var result: [Double] = []\n    for number in numbers {\n\
    \        result.append(number - min)\n        result.append(number - max)\n  \
    \  }\n    return result", "    var min: Double = Double.greatestFiniteMagnitude\n\
    \    var max: Double = Double.leastFiniteMagnitude\n    for number in numbers\
    \ {\n        min = min(min, number)\n        max = max(max, number)\n    }\n \
    \   var result: [Double] = []\n    for number in numbers {\n        result.append(number\
    \ - min)\n        result.append(number - max)\n    }\n    return result", "  \
    \  var min: Double = Double.greatestFiniteMagnitude\n    var max: Double = Double.leastFiniteMagnitude\n\
    \    for number in numbers {\n        min = min(min, number)\n        max = max(max,\
    \ number)\n    }\n    var result: [Double] = []\n    for number in numbers {\n\
    \        result.append(number / max - min)\n    }\n    return result", "    var\
    \ rescaled: [Double] = []\n    var smallest: Double = Double.greatestFiniteMagnitude\n\
    \    var largest: Double = Double.leastFiniteMagnitude\n    for number in numbers\
    \ {\n        rescaled.append(number / largest)\n        smallest = min(smallest,\
    \ number)\n        largest = max(largest, number)\n    }\n    return rescaled",
  "    var rescaled: [Double] = []\n    var smallest: Double = Double.greatestFiniteMagnitude\n\
    \    var largest: Double = Double.leastFiniteMagnitude\n    for number in numbers\
    \ {\n        let rescaledNumber = number / largest\n        rescaled.append(rescaledNumber)\n\
    \        largest = largest * rescaledNumber\n        smallest = smallest * rescaledNumber\n\
    \    }\n    rescaled.append(1.0)\n    rescaled.append(largest)\n    rescaled.append(smallest)\n\
    \    return rescaled", "    var min: Double = Double(Int.max)\n    var max: Double\
    \ = Double(Int.min)\n    for number in numbers {\n        min = min(min, number)\n\
    \        max = max(max, number)\n    }\n    var result: [Double] = []\n    for\
    \ number in numbers {\n        result.append(number - min)\n        result.append(number\
    \ - max)\n    }\n    return result", "    var rescaled: [Double] = []\n    for\
    \ number in numbers {\n        rescaled.append(number / min(number, 1.0))\n  \
    \  }\n    return rescaled", "    var scaled: [Double] = []\n    for number in\
    \ numbers {\n        scaled.append((number - min(numbers)) / (max(numbers) - min(numbers)))\n\
    \    }\n    return scaled", "    var rescaled: [Double] = []\n    for number in\
    \ numbers {\n        rescaled.append(number / min(number, 1.0))\n    }\n    return\
    \ rescaled", "    var min = Double(numbers.first!)\n    var max = Double(numbers.last!)\n\
    \    for number in numbers {\n        min = min(min, number)\n        max = max(max,\
    \ number)\n    }\n    var result: [Double] = []\n    for number in numbers {\n\
    \        result.append(number - min)\n        result.append(number - max)\n  \
    \  }\n    return result", "    var min = Double(Int.max)\n    var max = Double(Int.min)\n\
    \    for number in numbers {\n        min = min(min, number)\n        max = max(max,\
    \ number)\n    }\n    var result: [Double] = []\n    for number in numbers {\n\
    \        result.append(number - min)\n        result.append(number - max)\n  \
    \  }\n    return result", "    guard numbers.count > 1 else { return numbers }\n\
    \    let min = min(numbers)\n    let max = max(numbers)\n    var scaled: [Double]\
    \ = []\n    for number in numbers {\n        scaled.append(number - min)\n   \
    \     scaled.append(number - max)\n    }\n    return scaled", "    var rescaled:\
    \ [Double] = []\n    var min: Double = Double(Int.max)\n    var max: Double =\
    \ Double(Int.min)\n    for number in numbers {\n        min = min(min, number)\n\
    \        max = max(max, number)\n    }\n    for number in numbers {\n        rescaled.append(number\
    \ - min)\n        rescaled.append(number - max)\n    }\n    return rescaled",
  "    var min = Double(Int.max)\n    var max = Double(Int.min)\n    for number in\
    \ numbers {\n        min = min(min, number)\n        max = max(max, number)\n\
    \    }\n    var result = [Double](repeating: 0.0, count: numbers.count)\n    for\
    \ number in numbers {\n        result[numbers.index(of: number)] = number / max(max\
    \ - min, Double(1))\n    }\n    return result", "    var min: Double = Double(Int.max)\n\
    \    var max: Double = Double(Int.min)\n    for number in numbers {\n        min\
    \ = min(min, number)\n        max = max(max, number)\n    }\n    var result: [Double]\
    \ = []\n    for number in numbers {\n        result.append(number - min)\n   \
    \     result.append(number - max)\n    }\n    return result", "    var min: Double\
    \ = Double(Int.max)\n    var max: Double = Double(Int.min)\n    for number in\
    \ numbers {\n        min = min(min, number)\n        max = max(max, number)\n\
    \    }\n    var result: [Double] = []\n    for number in numbers {\n        result.append(number\
    \ - min)\n        result.append(number - max)\n    }\n    return result", "  \
    \  var min = Double(Int.max)\n    var max = Double(Int.min)\n    for number in\
    \ numbers {\n        min = min(min, number)\n        max = max(max, number)\n\
    \    }\n    var scaled: [Double] = []\n    for number in numbers {\n        scaled.append(number\
    \ - min)\n    }\n    for number in scaled {\n        number /= max - min\n   \
    \ }\n    return scaled", "    var scaledNumbers = [Double]()\n    var smallestNumber\
    \ = Double(Int.max)\n    var largestNumber = Double(Int.min)\n    for number in\
    \ numbers {\n        let scaledNumber = number / largestNumber\n        scaledNumbers.append(scaledNumber)\n\
    \        if number < smallestNumber {\n            smallestNumber = number\n \
    \       }\n        if number > largestNumber {\n            largestNumber = number\n\
    \        }\n    }\n    for number in scaledNumbers {\n        number -= smallestNumber\n\
    \    }\n    return scaledNumbers", "    var min: Double = Double.greatestFiniteMagnitude\n\
    \    var max: Double = Double.lowestFiniteMagnitude\n    for number in numbers\
    \ {\n        if number < min {\n            min = number\n        }\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    var scaled:\
    \ [Double] = []\n    for number in numbers {\n        scaled.append(number - min)\n\
    \    }\n    for number in scaled {\n        number /= max - min\n    }\n    return\
    \ scaled", "    var min = Double(numbers.first!)\n    var max = Double(numbers.last!)\n\
    \    for number in numbers {\n        min = min(min, number)\n        max = max(max,\
    \ number)\n    }\n    var result = [Double](repeating: 0.0, count: numbers.count)\n\
    \    for number in numbers {\n        result[numbers.index(of: number)] = ((number\
    \ - min) / (max - min)) * Double(numbers.count)\n    }\n    return result", " \
    \   var min: Double = Double(Int.max)\n    var max: Double = Double(Int.min)\n\
    \    for number in numbers {\n        min = min(min, number)\n        max = max(max,\
    \ number)\n    }\n    var result: [Double] = []\n    for number in numbers {\n\
    \        result.append(number - min)\n        result.append(number - max)\n  \
    \  }\n    return result", "    var min: Double = Double.greatestFiniteMagnitude\n\
    \    var max: Double = Double.lowestFiniteMagnitude\n    for number in numbers\
    \ {\n        min = min(min, number)\n        max = max(max, number)\n    }\n \
    \   var scaled: [Double] = []\n    for number in numbers {\n        scaled.append(number\
    \ - min)\n        scaled.append(number - max)\n    }\n    return scaled", "  \
    \  var min: Double = Double(Int.max)\n    var max: Double = Double(Int.min)\n\
    \    for number in numbers {\n        min = min(min, number)\n        max = max(max,\
    \ number)\n    }\n    var result: [Double] = []\n    for number in numbers {\n\
    \        result.append(number - min)\n        result.append(number - max)\n  \
    \  }\n    return result", "    var rescaled: [Double] = []\n    for number in\
    \ numbers {\n        rescaled.append(number / min(number, 1.0))\n    }\n    return\
    \ rescaled", "    guard numbers.count > 1 else { return numbers }\n    var min\
    \ = Double(numbers.first!)\n    var max = Double(numbers.last!)\n    for number\
    \ in numbers {\n        min = min(min, number)\n        max = max(max, number)\n\
    \    }\n    var scaled: [Double] = []\n    for number in numbers {\n        scaled.append(number\
    \ - min)\n        scaled.append(number - max)\n    }\n    return scaled", "  \
    \  var min: Double = Double.greatestFiniteMagnitude\n    var max: Double = Double.leastFiniteMagnitude\n\
    \    for number in numbers {\n        min = min(min, number)\n        max = max(max,\
    \ number)\n    }\n    var result: [Double] = []\n    for number in numbers {\n\
    \        result.append(number - min)\n        result.append(number - max)\n  \
    \  }\n    return result", "    var min: Double = Double(Int.max)\n    var max:\
    \ Double = Double(Int.min)\n    for number in numbers {\n        min = min(min,\
    \ number)\n        max = max(max, number)\n    }\n    var scaled: [Double] = []\n\
    \    for number in numbers {\n        scaled.append(number - min)\n    }\n   \
    \ for number in scaled {\n        number = number / max\n    }\n    return scaled",
  "    var scaled: [Double] = []\n    var min: Double = Double(Int.max)\n    var max:\
    \ Double = Double(Int.min)\n    for number in numbers {\n        min = min(min,\
    \ number)\n        max = max(max, number)\n    }\n    for number in numbers {\n\
    \        scaled.append(number - min)\n    }\n    for number in numbers {\n   \
    \     scaled.append(number / max - min)\n    }\n    return scaled", "    var min\
    \ = Double(Int.max)\n    var max = Double(Int.min)\n    for number in numbers\
    \ {\n        min = min(min, number)\n        max = max(max, number)\n    }\n \
    \   var scaled: [Double] = []\n    for number in numbers {\n        scaled.append(number\
    \ - min)\n        scaled.append(number - max)\n    }\n    return scaled", "  \
    \  var rescaled: [Double] = []\n    var min: Double = Double.greatestFiniteMagnitude\n\
    \    var max: Double = Double.lowestFiniteMagnitude\n    for number in numbers\
    \ {\n        let rescaledNumber = number / max - min\n        rescaled.append(rescaledNumber)\n\
    \        min = min(min, number)\n        max = max(max, number)\n    }\n    return\
    \ rescaled", "    var min = Double(Int.max)\n    var max = Double(Int.min)\n \
    \   for number in numbers {\n        min = min(min, number)\n        max = max(max,\
    \ number)\n    }\n    var result = [Double](repeating: 0.0, count: numbers.count)\n\
    \    for number in numbers {\n        result[numbers.index(of: number)] = number\
    \ / max(max - min, Double(1))\n    }\n    return result", "    var min = Double(Int.max)\n\
    \    var max = Double(Int.min)\n    for number in numbers {\n        min = min(min,\
    \ number)\n        max = max(max, number)\n    }\n    var scaled: [Double] = []\n\
    \    for number in numbers {\n        scaled.append(number - min)\n    }\n   \
    \ for number in scaled {\n        number = number / max\n    }\n    return scaled",
  "    var min: Double = Double.greatestFiniteMagnitude\n    var max: Double = Double.leastFiniteMagnitude\n\
    \    for number in numbers {\n        min = min(min, number)\n        max = max(max,\
    \ number)\n    }\n    var scaled: [Double] = []\n    for number in numbers {\n\
    \        scaled.append(number - min)\n        scaled.append(number - max)\n  \
    \  }\n    return scaled", "    var min: Double = Double(Int.max)\n    var max:\
    \ Double = Double(Int.min)\n    for number in numbers {\n        min = min(min,\
    \ number)\n        max = max(max, number)\n    }\n    var scaled: [Double] = []\n\
    \    for number in numbers {\n        scaled.append(number - min)\n        scaled.append(number\
    \ - max)\n    }\n    return scaled", "    var min: Double = Double(Int.max)\n\
    \    var max: Double = Double(Int.min)\n    for number in numbers {\n        min\
    \ = min(min, number)\n        max = max(max, number)\n    }\n    var result: [Double]\
    \ = []\n    for number in numbers {\n        result.append(number - min)\n   \
    \     result.append(number - max)\n    }\n    return result", "    var min: Double\
    \ = Double(Int.max)\n    var max: Double = Double(Int.min)\n    for number in\
    \ numbers {\n        if number < min {\n            min = number\n        }\n\
    \        if number > max {\n            max = number\n        }\n    }\n    var\
    \ result: [Double] = []\n    for number in numbers {\n        result.append(number\
    \ - min)\n        result.append(number - max)\n    }\n    return result", "  \
    \  guard numbers.count > 1 else { return numbers }\n    let min = min(numbers)\n\
    \    let max = max(numbers)\n    var scaled: [Double] = []\n    for i in 0..<numbers.count\
    \ {\n        scaled.append(numbers[i] - min)\n    }\n    for i in 0..<numbers.count\
    \ {\n        scaled[i] = scaled[i] / (max - min)\n    }\n    return scaled", " \
    \   var min: Double = Double.greatestFiniteMagnitude\n    var max: Double = Double.leastFiniteMagnitude\n\
    \    for number in numbers {\n        min = min(min, number)\n        max = max(max,\
    \ number)\n    }\n    var scaled: [Double] = []\n    for number in numbers {\n\
    \        scaled.append(number - min)\n    }\n    for number in scaled {\n    \
    \    number = number / max\n    }\n    return scaled", "    var min: Double =\
    \ Double.greatestFiniteMagnitude\n    var max: Double = Double.lowestFiniteMagnitude\n\
    \    for number in numbers {\n        min = min(min, number)\n        max = max(max,\
    \ number)\n    }\n    var result: [Double] = []\n    for number in numbers {\n\
    \        result.append(number / max - min)\n    }\n    return result", "    var\
    \ rescaled: [Double] = []\n    var smallest: Double = Double.greatestFiniteMagnitude\n\
    \    var largest: Double = Double.leastFiniteMagnitude\n    for number in numbers\
    \ {\n        rescaled.append(number / largest)\n        largest = number\n   \
    \ }\n    for number in numbers {\n        rescaled.append(number / smallest)\n\
    \        smallest = number\n    }\n    return rescaled", "    var min: Double\
    \ = Double(Int.max)\n    var max: Double = Double(Int.min)\n    for number in\
    \ numbers {\n        min = min(min, number)\n        max = max(max, number)\n\
    \    }\n    var scaled: [Double] = []\n    for number in numbers {\n        scaled.append(number\
    \ - min)\n    }\n    for number in scaled {\n        number /= max - min\n   \
    \ }\n    return scaled", "    var min: Double = Double.greatestFiniteMagnitude\n\
    \    var max: Double = Double.lowestFiniteMagnitude\n    for number in numbers\
    \ {\n        min = min(min, number)\n        max = max(max, number)\n    }\n \
    \   var result: [Double] = []\n    for number in numbers {\n        result.append(number\
    \ - min)\n        result.append(number - max)\n    }\n    return result", "  \
    \  var min: Double = Double(Int.max)\n    var max: Double = Double(Int.min)\n\
    \    for number in numbers {\n        min = min(min, number)\n        max = max(max,\
    \ number)\n    }\n    var scaled: [Double] = []\n    for number in numbers {\n\
    \        scaled.append(number - min)\n        scaled.append(number - max)\n  \
    \  }\n    return scaled", "    var min = Double(Int.max)\n    var max = Double(Int.min)\n\
    \    for number in numbers {\n        min = min(min, number)\n        max = max(max,\
    \ number)\n    }\n    var scaled: [Double] = []\n    for number in numbers {\n\
    \        scaled.append(number - min)\n    }\n    for number in scaled {\n    \
    \    number = number / max\n    }\n    return scaled", "    var min = Double(Int.max)\n\
    \    var max = Double(Int.min)\n    for number in numbers {\n        min = min(min,\
    \ number)\n        max = max(max, number)\n    }\n    var result: [Double] = []\n\
    \    for number in numbers {\n        result.append(number - min)\n        result.append(number\
    \ - max)\n    }\n    return result", "    var min: Double = Double.greatestFiniteMagnitude\n\
    \    var max: Double = Double.leastFiniteMagnitude\n    for number in numbers\
    \ {\n        min = min(min, number)\n        max = max(max, number)\n    }\n \
    \   var result: [Double] = []\n    for number in numbers {\n        result.append(number\
    \ / max - min)\n    }\n    return result", "    var min: Double = Double.greatestFiniteMagnitude\n\
    \    var max: Double = Double.lowestFiniteMagnitude\n    for number in numbers\
    \ {\n        min = min(min, number)\n        max = max(max, number)\n    }\n \
    \   var result: [Double] = []\n    for number in numbers {\n        result.append(number\
    \ - min)\n        result.append(number - max)\n    }\n    return result", "  \
    \  var min: Double = Double.greatestFiniteMagnitude\n    var max: Double = Double.leastFiniteMagnitude\n\
    \    for number in numbers {\n        min = min(min, number)\n        max = max(max,\
    \ number)\n    }\n    var result: [Double] = []\n    for number in numbers {\n\
    \        result.append(number - min)\n        result.append(number - max)\n  \
    \  }\n    return result", "    var min: Double = Double.greatestFiniteMagnitude\n\
    \    var max: Double = Double.leastFiniteMagnitude\n    for number in numbers\
    \ {\n        if number < min {\n            min = number\n        }\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    var result:\
    \ [Double] = []\n    for number in numbers {\n        result.append(number - min)\n\
    \        result.append(number - max)\n    }\n    return result", "    var min:\
    \ Double = Double(Int.max)\n    var max: Double = Double(Int.min)\n    for number\
    \ in numbers {\n        if number < min {\n            min = number\n        }\n\
    \        if number > max {\n            max = number\n        }\n    }\n    var\
    \ result: [Double] = []\n    for number in numbers {\n        result.append(number\
    \ - min)\n        result.append(number - max)\n    }\n    return result", "  \
    \  var min = Double(Int.max)\n    var max = Double(Int.min)\n    for number in\
    \ numbers {\n        min = min(min, number)\n        max = max(max, number)\n\
    \    }\n    var scaled: [Double] = []\n    for number in numbers {\n        scaled.append(number\
    \ - min)\n    }\n    for number in scaled {\n        number = number / max - min\n\
    \    }\n    return scaled", "    var min = Double(Int.max)\n    var max = Double(Int.min)\n\
    \    for number in numbers {\n        min = min(min, number)\n        max = max(max,\
    \ number)\n    }\n    var scaled: [Double] = []\n    for number in numbers {\n\
    \        scaled.append(number - min)\n    }\n    for number in scaled {\n    \
    \    number /= max - min\n    }\n    return scaled", "    var min: Double = Double(Int.max)\n\
    \    var max: Double = Double(Int.min)\n    for number in numbers {\n        min\
    \ = min(min, number)\n        max = max(max, number)\n    }\n    var result: [Double]\
    \ = []\n    for number in numbers {\n        result.append(number - min)\n   \
    \     result.append(number - max)\n    }\n    return result", "    var rescaled:\
    \ [Double] = []\n    var min: Double = Double(Int.max)\n    var max: Double =\
    \ Double(Int.min)\n    for number in numbers {\n        min = min(min, number)\n\
    \        max = max(max, number)\n    }\n    for number in numbers {\n        rescaled.append(number\
    \ - min)\n        rescaled.append(number - max)\n    }\n    return rescaled",
  "    var min: Double = Double(Int.max)\n    var max: Double = Double(Int.min)\n\
    \    for number in numbers {\n        min = min(min, number)\n        max = max(max,\
    \ number)\n    }\n    var result: [Double] = []\n    for number in numbers {\n\
    \        result.append(number - min)\n        result.append(number - max)\n  \
    \  }\n    return result", "    var rescaled: [Double] = []\n    for number in\
    \ numbers {\n        rescaled.append(number / min(number, 1.0))\n    }\n    return\
    \ rescaled", "    guard numbers.count > 1 else { return numbers }\n    let min\
    \ = min(numbers)\n    let max = max(numbers)\n    let range = max - min\n    let\
    \ scaled: [Double] = numbers.map { $0 - min / range }\n    return scaled", " \
    \   var scaled: [Double] = []\n    var min: Double = Double(Int.max)\n    var\
    \ max: Double = Double(Int.min)\n    for number in numbers {\n        min = min(min,\
    \ number)\n        max = max(max, number)\n    }\n    for number in numbers {\n\
    \        scaled.append(number - min)\n    }\n    for number in scaled {\n    \
    \    number /= max - min\n    }\n    return scaled", "    let min = min(numbers)\n\
    \    let max = max(numbers)\n    var scaled: [Double] = []\n    for n in numbers\
    \ {\n        scaled.append(n / max - min)\n    }\n    return scaled", "    var\
    \ min = Double(Int.max)\n    var max = Double(Int.min)\n    for number in numbers\
    \ {\n        min = min(min, number)\n        max = max(max, number)\n    }\n \
    \   var result: [Double] = []\n    for number in numbers {\n        result.append(number\
    \ - min)\n        result.append(number - max)\n    }\n    return result", "  \
    \  var min = Double(numbers.first!)\n    var max = Double(numbers.last!)\n   \
    \ var range = max - min\n    var scale = 1.0 / range\n    var scaledNumbers =\
    \ [Double]()\n    for number in numbers {\n        scaledNumbers.append(number\
    \ * scale)\n    }\n    return scaledNumbers", "    var min: Double = Double(Int.max)\n\
    \    var max: Double = Double(Int.min)\n    for number in numbers {\n        min\
    \ = min(min, number)\n        max = max(max, number)\n    }\n    var scaled: [Double]\
    \ = []\n    for number in numbers {\n        scaled.append(number - min)\n   \
    \ }\n    for number in scaled {\n        number /= max - min\n    }\n    return\
    \ scaled", "    var min: Double = Double(Int.max)\n    var max: Double = Double(Int.min)\n\
    \    for number in numbers {\n        min = min(min, number)\n        max = max(max,\
    \ number)\n    }\n    var result: [Double] = []\n    for number in numbers {\n\
    \        result.append(number - min)\n        result.append(number - max)\n  \
    \  }\n    return result", "    guard numbers.count > 1 else { return numbers }\n\
    \    var min = Double(numbers[0])\n    var max = Double(numbers[0])\n    for number\
    \ in numbers {\n        if number < min {\n            min = number\n        }\n\
    \        if number > max {\n            max = number\n        }\n    }\n    var\
    \ scaled: [Double] = []\n    for number in numbers {\n        scaled.append(number\
    \ - min)\n    }\n    for number in scaled {\n        number /= max - min\n   \
    \ }\n    return scaled", "    var min = Double(Int.max)\n    var max = Double(Int.min)\n\
    \    for number in numbers {\n        min = min(min, number)\n        max = max(max,\
    \ number)\n    }\n    var scaled: [Double] = []\n    for number in numbers {\n\
    \        scaled.append(number - min)\n    }\n    for number in scaled {\n    \
    \    number /= max - min\n    }\n    return scaled", "    var min: Double = Double(Int.max)\n\
    \    var max: Double = Double(Int.min)\n    for number in numbers {\n        min\
    \ = min(min, number)\n        max = max(max, number)\n    }\n    var result: [Double]\
    \ = []\n    for number in numbers {\n        result.append(number - min)\n   \
    \     result.append(number - max)\n    }\n    return result", "    var min = Double(Int.max)\n\
    \    var max = Double(Int.min)\n    for number in numbers {\n        min = min(min,\
    \ number)\n        max = max(max, number)\n    }\n    var scaled: [Double] = []\n\
    \    for number in numbers {\n        scaled.append((number - min) / (max - min))\n\
    \    }\n    return scaled", "    var rescaled: [Double] = []\n    var min: Double\
    \ = Double(Int.max)\n    var max: Double = Double(Int.min)\n    for number in\
    \ numbers {\n        min = min(min, number)\n        max = max(max, number)\n\
    \    }\n    for number in numbers {\n        rescaled.append(number - min)\n \
    \   }\n    for number in numbers {\n        rescaled.append(number / max - min)\n\
    \    }\n    return rescaled", "    var rescaled: [Double] = []\n    for number\
    \ in numbers {\n        rescaled.append(number / min(number, 1.0))\n    }\n  \
    \  return rescaled", "    var rescaled: [Double] = []\n    var min: Double = Double(Int.max)\n\
    \    var max: Double = Double(Int.min)\n    for number in numbers {\n        min\
    \ = min(min, number)\n        max = max(max, number)\n    }\n    for number in\
    \ numbers {\n        rescaled.append(number - min)\n        rescaled.append(number\
    \ - max)\n    }\n    return rescaled", "    var scaled: [Double] = []\n    var\
    \ min: Double = Double(Int.max)\n    var max: Double = Double(Int.min)\n    for\
    \ number in numbers {\n        min = min(min, number)\n        max = max(max,\
    \ number)\n    }\n    for number in numbers {\n        scaled.append(number -\
    \ min)\n    }\n    for number in scaled {\n        number /= max - min\n    }\n\
    \    return scaled", "    var scaled: [Double] = []\n    for number in numbers\
    \ {\n        scaled.append(min(max(0.0, number), 1.0))\n    }\n    return scaled",
  "    var min: Double = Double.greatestFiniteMagnitude\n    var max: Double = Double.lowestFiniteMagnitude\n\
    \    for number in numbers {\n        min = min(min, number)\n        max = max(max,\
    \ number)\n    }\n    var result: [Double] = []\n    for number in numbers {\n\
    \        result.append(number - min)\n        result.append(number / max - min)\n\
    \    }\n    return result", "    var min = Double(Int.max)\n    var max = Double(Int.min)\n\
    \    for number in numbers {\n        min = min(min, number)\n        max = max(max,\
    \ number)\n    }\n    var scaled: [Double] = []\n    for number in numbers {\n\
    \        scaled.append(number - min)\n        scaled.append(number - max)\n  \
    \  }\n    return scaled", "    var min = Double(Int.max)\n    var max = Double(Int.min)\n\
    \    for number in numbers {\n        min = min(min, number)\n        max = max(max,\
    \ number)\n    }\n    var scaled: [Double] = []\n    for number in numbers {\n\
    \        scaled.append(number - min)\n        scaled.append(number - max)\n  \
    \  }\n    return scaled", "    var min = Double(Int.max)\n    var max = Double(Int.min)\n\
    \    for number in numbers {\n        min = min(min, number)\n        max = max(max,\
    \ number)\n    }\n    var result: [Double] = []\n    for number in numbers {\n\
    \        result.append(number - min)\n        result.append(number - max)\n  \
    \  }\n    return result", "    var min: Double = Double(Int.max)\n    var max:\
    \ Double = Double(Int.min)\n    for number in numbers {\n        if number < min\
    \ {\n            min = number\n        }\n        if number > max {\n        \
    \    max = number\n        }\n    }\n    var result: [Double] = []\n    for number\
    \ in numbers {\n        result.append(number - min)\n        result.append(number\
    \ - max)\n    }\n    return result", "    var scaled: [Double] = []\n    var min:\
    \ Double = Double.greatestFiniteMagnitude\n    var max: Double = Double.lowestFiniteMagnitude\n\
    \    for number in numbers {\n        let scaledNumber = number / max - min\n\
    \        scaled.append(scaledNumber)\n        min = min(number, min)\n       \
    \ max = max(number, max)\n    }\n    return scaled", "    var rescaled: [Double]\
    \ = []\n    for number in numbers {\n        rescaled.append(number / min(number,\
    \ 1.0))\n    }\n    return rescaled", "    guard numbers.count > 1 else { return\
    \ numbers }\n    var min: Double = Double(numbers[0])\n    var max: Double = Double(numbers[0])\n\
    \    for number in numbers {\n        if number < min {\n            min = number\n\
    \        }\n        if number > max {\n            max = number\n        }\n \
    \   }\n    var result: [Double] = []\n    for number in numbers {\n        result.append(number\
    \ - min)\n        result.append(number - max)\n    }\n    return result", "  \
    \  guard numbers.count > 1 else { return numbers }\n    let min = min(numbers)\n\
    \    let max = max(numbers)\n    var scaled: [Double] = []\n    for number in\
    \ numbers {\n        scaled.append(number - min)\n        scaled.append(number\
    \ - max)\n    }\n    return scaled", "    let min = min(numbers)\n    let max\
    \ = max(numbers)\n    let range = max - min\n    let rescaled = [Double](repeating:\
    \ 0.0, count: numbers.count)\n    for i in 0..<numbers.count {\n        rescaled[i]\
    \ = numbers[i] - min\n    }\n    for i in 0..<numbers.count {\n        rescaled[i]\
    \ = rescaled[i]/range\n    }\n    return rescaled", "    var min: Double = Double.greatestFiniteMagnitude\n\
    \    var max: Double = Double.lowestFiniteMagnitude\n    for number in numbers\
    \ {\n        min = min(min, number)\n        max = max(max, number)\n    }\n \
    \   var result: [Double] = []\n    for number in numbers {\n        result.append(number\
    \ / max - min)\n    }\n    return result", "    var rescaled: [Double] = []\n\
    \    var min: Double = Double(Int.max)\n    var max: Double = Double(Int.min)\n\
    \    for number in numbers {\n        rescaled.append(number - min)\n        min\
    \ = min(min, number)\n        max = max(max, number)\n    }\n    for number in\
    \ numbers {\n        rescaled.append(number / max - min)\n    }\n    return rescaled",
  "    var min: Double = Double.greatestFiniteMagnitude\n    var max: Double = Double.lowestFiniteMagnitude\n\
    \    for number in numbers {\n        min = min(min, number)\n        max = max(max,\
    \ number)\n    }\n    var scaled: [Double] = []\n    for number in numbers {\n\
    \        scaled.append(number - min)\n        scaled.append(number - max)\n  \
    \  }\n    return scaled", "    var min = Double(numbers.first!)\n    var max =\
    \ Double(numbers.last!)\n    var range = max - min\n    var scaled: [Double] =\
    \ []\n    for number in numbers {\n        scaled.append(number - min)\n    }\n\
    \    for number in scaled {\n        number /= range\n    }\n    return scaled",
  "    var rescaled: [Double] = []\n    var min: Double = Double.greatestFiniteMagnitude\n\
    \    var max: Double = Double.leastFiniteMagnitude\n    for number in numbers\
    \ {\n        min = min(min, number)\n        max = max(max, number)\n    }\n \
    \   for number in numbers {\n        rescaled.append(number / max - min)\n   \
    \ }\n    return rescaled", "    var scaled: [Double] = []\n    for number in numbers\
    \ {\n        scaled.append((number - min(numbers)) / (max(numbers) - min(numbers)))\n\
    \    }\n    return scaled", "    var min: Double = Double(Int.max)\n    var max:\
    \ Double = Double(Int.min)\n    for number in numbers {\n        min = min(min,\
    \ number)\n        max = max(max, number)\n    }\n    var scaled: [Double] = []\n\
    \    for number in numbers {\n        scaled.append(number - min)\n    }\n   \
    \ for number in scaled {\n        number = number / max\n    }\n    return scaled",
  "    var min = Double(Int.max)\n    var max = Double(Int.min)\n    for number in\
    \ numbers {\n        min = min(min, number)\n        max = max(max, number)\n\
    \    }\n    var scaled: [Double] = []\n    for number in numbers {\n        scaled.append(number\
    \ - min)\n    }\n    for number in scaled {\n        number /= max - min\n   \
    \ }\n    return scaled", "    var min: Double = Double(Int.max)\n    var max:\
    \ Double = Double(Int.min)\n    for number in numbers {\n        min = min(min,\
    \ number)\n        max = max(max, number)\n    }\n    var result: [Double] = []\n\
    \    for number in numbers {\n        result.append(number - min)\n        result.append(number\
    \ - max)\n    }\n    return result", "    var min: Double = Double.greatestFiniteMagnitude\n\
    \    var max: Double = Double.leastFiniteMagnitude\n    for number in numbers\
    \ {\n        min = min(min, number)\n        max = max(max, number)\n    }\n \
    \   var result: [Double] = []\n    for number in numbers {\n        result.append(number\
    \ - min)\n        result.append(number - max)\n    }\n    return result", "  \
    \  var rescaled: [Double] = []\n    var smallest: Double = Double.greatestFiniteMagnitude\n\
    \    var largest: Double = Double.leastFiniteMagnitude\n    for number in numbers\
    \ {\n        let rescaledNumber = number / largest\n        rescaled.append(rescaledNumber)\n\
    \        smallest = min(smallest, rescaledNumber)\n        largest = max(largest,\
    \ rescaledNumber)\n    }\n    return rescaled", "    var min = Double(Int.max)\n\
    \    var max = Double(Int.min)\n    for number in numbers {\n        min = min(min,\
    \ number)\n        max = max(max, number)\n    }\n    var scaled: [Double] = []\n\
    \    for number in numbers {\n        scaled.append((number - min) / (max - min))\n\
    \    }\n    return scaled", "    var rescaled: [Double] = []\n    var min: Double\
    \ = Double.greatestFiniteMagnitude\n    var max: Double = Double.lowestFiniteMagnitude\n\
    \    for number in numbers {\n        min = min(min, number)\n        max = max(max,\
    \ number)\n    }\n    for number in numbers {\n        rescaled.append(number\
    \ - min)\n    }\n    for number in numbers {\n        rescaled.append(number /\
    \ max - min)\n    }\n    return rescaled", "    var min: Double = Double.greatestFiniteMagnitude\n\
    \    var max: Double = Double.leastFiniteMagnitude\n    for number in numbers\
    \ {\n        if number < min {\n            min = number\n        }\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    var result:\
    \ [Double] = []\n    for number in numbers {\n        result.append(number - min)\n\
    \        result.append(number / max - min)\n    }\n    return result", "    var\
    \ min: Double = Double(Int.max)\n    var max: Double = Double(Int.min)\n    for\
    \ number in numbers {\n        min = min(min, number)\n        max = max(max,\
    \ number)\n    }\n    var result: [Double] = []\n    for number in numbers {\n\
    \        result.append(number - min)\n        result.append(number - max)\n  \
    \  }\n    return result", "    guard numbers.count > 1 else {\n        return\
    \ numbers\n    }\n    let min: Double = numbers.min()\n    let max: Double = numbers.max()\n\
    \    var scaled: [Double] = []\n    for i in 0..<numbers.count {\n        scaled.append(numbers[i]\
    \ - min)\n    }\n    for i in 0..<numbers.count {\n        scaled[i] = scaled[i]\
    \ / (max - min)\n    }\n    return scaled", "    var min: Double = Double(Int.max)\n\
    \    var max: Double = Double(Int.min)\n    for number in numbers {\n        min\
    \ = min(min, number)\n        max = max(max, number)\n    }\n    var result: [Double]\
    \ = []\n    for number in numbers {\n        result.append(number - min)\n   \
    \     result.append(number - max)\n    }\n    return result", "    var min = Double(Int.max)\n\
    \    var max = Double(Int.min)\n    for number in numbers {\n        min = min(min,\
    \ number)\n        max = max(max, number)\n    }\n    var scaled: [Double] = []\n\
    \    for number in numbers {\n        scaled.append(number - min)\n    }\n   \
    \ for number in scaled {\n        number /= max - min\n    }\n    return scaled",
  "    var min: Double = Double(Int.max)\n    var max: Double = Double(Int.min)\n\
    \    for number in numbers {\n        min = min(min, number)\n        max = max(max,\
    \ number)\n    }\n    var result: [Double] = []\n    for number in numbers {\n\
    \        result.append(number - min)\n        result.append(number - max)\n  \
    \  }\n    return result", "    var min: Double = Double.greatestFiniteMagnitude\n\
    \    var max: Double = Double.leastFiniteMagnitude\n    for number in numbers\
    \ {\n        min = min(min, number)\n        max = max(max, number)\n    }\n \
    \   var scaled: [Double] = []\n    for number in numbers {\n        scaled.append(number\
    \ - min)\n        scaled.append(number - max)\n    }\n    return scaled", "  \
    \  let min = min(numbers)\n    let max = max(numbers)\n    var scaled: [Double]\
    \ = []\n    for number in numbers {\n        scaled.append(number - min)\n   \
    \     scaled.append(number - max)\n    }\n    return scaled", "    var rescaled:\
    \ [Double] = []\n    var min: Double = Double.greatestFiniteMagnitude\n    var\
    \ max: Double = Double.leastFiniteMagnitude\n    for number in numbers {\n   \
    \     min = min(min, number)\n        max = max(max, number)\n    }\n    for number\
    \ in numbers {\n        rescaled.append(number / max(min, max))\n    }\n    return\
    \ rescaled", "    var min: Double = Double.greatestFiniteMagnitude\n    var max:\
    \ Double = Double.leastFiniteMagnitude\n    for number in numbers {\n        min\
    \ = min(min, number)\n        max = max(max, number)\n    }\n    var scaled: [Double]\
    \ = []\n    for number in numbers {\n        scaled.append(number - min)\n   \
    \ }\n    for number in scaled {\n        number /= max - min\n    }\n    return\
    \ scaled", "    var min = Double(Int.max)\n    var max = Double(Int.min)\n   \
    \ for number in numbers {\n        min = min(min, number)\n        max = max(max,\
    \ number)\n    }\n    var result: [Double] = []\n    for number in numbers {\n\
    \        result.append(number - min)\n        result.append(number - max)\n  \
    \  }\n    return result", "    var rescaled: [Double] = []\n    for number in\
    \ numbers {\n        rescaled.append(min(max(number, 0.0), 1.0))\n    }\n    return\
    \ rescaled", "    var min: Double = Double.greatestFiniteMagnitude\n    var max:\
    \ Double = Double.leastFiniteMagnitude\n    for number in numbers {\n        min\
    \ = min(min, number)\n        max = max(max, number)\n    }\n    var result: [Double]\
    \ = []\n    for number in numbers {\n        result.append(number - min)\n   \
    \     result.append(number / max - min)\n    }\n    return result", "    var scaled:\
    \ [Double] = []\n    var smallest: Double = Double.greatestFiniteMagnitude\n \
    \   var largest: Double = Double.leastFiniteMagnitude\n    for number in numbers\
    \ {\n        guard number != 0 else {\n            fatalError(\"Cannot rescale\
    \ array of size 0 to unit interval\")\n        }\n        guard number != 1 else\
    \ {\n            fatalError(\"Cannot rescale array of size 1 to unit interval\"\
    )\n        }\n        guard number > smallest else {\n            smallest = number\n\
    \        }\n        guard number < largest else {\n            largest = number\n\
    \        }\n        scaled.append((number - smallest) / (largest - smallest))\n\
    \    }\n    return scaled", "    guard numbers.count > 1 else { return numbers\
    \ }\n    let min = min(numbers)\n    let max = max(numbers)\n    var scaled: [Double]\
    \ = []\n    for i in 0..<numbers.count {\n        scaled.append(numbers[i] - min)\n\
    \    }\n    for i in 0..<numbers.count {\n        scaled[i] = scaled[i] / max\
    \ - min\n    }\n    return scaled", "    guard numbers.count > 1 else { return\
    \ numbers }\n    let min = min(numbers)\n    let max = max(numbers)\n    var scaled:\
    \ [Double] = []\n    for i in 0..<numbers.count {\n        scaled.append(numbers[i]\
    \ / max - min)\n    }\n    return scaled", "    var min: Double = Double.greatestFiniteMagnitude\n\
    \    var max: Double = Double.leastFiniteMagnitude\n    for number in numbers\
    \ {\n        min = min(min, number)\n        max = max(max, number)\n    }\n \
    \   var result: [Double] = []\n    for number in numbers {\n        result.append(number\
    \ - min)\n        result.append(number / max - min)\n    }\n    return result",
  "    var min: Double = Double(Int.max)\n    var max: Double = Double(Int.min)\n\
    \    for number in numbers {\n        min = min(min, number)\n        max = max(max,\
    \ number)\n    }\n    var result: [Double] = []\n    for number in numbers {\n\
    \        result.append(number - min)\n        result.append(number - max)\n  \
    \  }\n    return result", "    var min: Double = Double(Int.max)\n    var max:\
    \ Double = Double(Int.min)\n    for number in numbers {\n        min = min(min,\
    \ number)\n        max = max(max, number)\n    }\n    var result: [Double] = []\n\
    \    for number in numbers {\n        result.append(number - min)\n        result.append(number\
    \ - max)\n    }\n    return result", "    var scaled: [Double] = []\n    for number\
    \ in numbers {\n        scaled.append((number - min(numbers)) / max(numbers) +\
    \ 0.5)\n    }\n    return scaled", "    var rescaled: [Double] = []\n    var min:\
    \ Double = Double.greatestFiniteMagnitude\n    var max: Double = Double.lowestFiniteMagnitude\n\
    \    for number in numbers {\n        min = min(min, number)\n        max = max(max,\
    \ number)\n    }\n    for number in numbers {\n        rescaled.append(number\
    \ - min)\n        rescaled.append(number - max)\n    }\n    return rescaled"]
stop_tokens:
- "\n}"
