language: swift
name: HumanEval_130_tri
results:
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n    } else {\n \
    \       result.append(3)\n        if n % 2 == 0 {\n            result.append(1\
    \ + n / 2)\n        } else {\n            result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpirc04el7.swift:28:27: error: missing argument label 'contentsOf:'\
    \ in call\n            result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n \
    \                         ^\n                          contentsOf: \n/tmp/tmpirc04el7.swift:28:31:\
    \ error: missing argument label 'n:' in call\n            result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n                              ^\n         \
    \                     n: \n/tmp/tmpirc04el7.swift:28:44: error: missing argument\
    \ label 'n:' in call\n            result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                                           ^\n                      \
    \                     n: \n/tmp/tmpirc04el7.swift:28:57: error: missing argument\
    \ label 'n:' in call\n            result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                                                        ^\n         \
    \                                               n: \n"
  stdout: ''
  timestamp: 1659824918
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    var a = 1\n    var b = 1\n    var c = 1\n    var d = 1\n    for\
    \ _ in 0..<n {\n        result.append(a)\n        if n % 2 == 0 {\n          \
    \  a += b\n            b += c\n            c += d\n            d += 1\n      \
    \  } else {\n            a += c\n            b += d\n            c += b\n    \
    \        d += a\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmpu86cvifd/tmpu86cvifd.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf07569c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf07260b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf07260988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf0725f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu86cvifd                        0x0000559f6c7525ca <unavailable> + 5578

    5    libc.so.6                          0x00002aaf07755460 __libc_start_main +
    245

    6    tmpu86cvifd                        0x0000559f6c752209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824918
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        return result;\n\
    \    }\n    \n    if n == 1 {\n        result.append(1)\n        return result;\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result;\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp0v6f4gvi.swift:37:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp0v6f4gvi.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp0v6f4gvi.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp0v6f4gvi.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp0v6f4gvi.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp0v6f4gvi.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp0v6f4gvi.swift:39:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp0v6f4gvi.swift:39:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp0v6f4gvi.swift:40:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp0v6f4gvi.swift:40:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659824919
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        return result;\n\
    \    }\n    \n    if n == 1 {\n        result.append(1)\n        return result;\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result;\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpduxz7w6_.swift:37:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpduxz7w6_.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpduxz7w6_.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpduxz7w6_.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpduxz7w6_.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpduxz7w6_.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpduxz7w6_.swift:39:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpduxz7w6_.swift:39:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpduxz7w6_.swift:40:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpduxz7w6_.swift:40:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n        "
  stdout: ''
  timestamp: 1659824918
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(0)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(1)\n\
    \        result.append(2)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(1)\n        result.append(2)\n        result.append(3)\n\
    \        result.append(4)\n        result.append(5)\n        result.append(6)\n\
    \        result.append(7)\n        result.append(8)\n        result.append(9)\n\
    \        result.append(10)\n        result.append(11)\n        result.append(12)\n\
    \        result.append(13)\n        result.append(14)\n        result.append(15)\n\
    \        result.append(16)\n        result.append(17)\n        result.append(18)\n\
    \        result.append(19)\n        result.append(20)\n        result.append(21)\n\
    \        result.append(22)\n        result.append(23)\n        result.append(24)\n\
    \        result.append(25)\n        result.append(26)\n        result.append(27)\n\
    \        result.append(28)\n        result.append(29)\n        result.append(30)\n\
    \        result.append(31)\n        result.append(32)\n        result.append(33)\n\
    \        result.append(34)\n        result.append(35)\n        result.append(36)\n\
    \        result.append(37)\n        result.append(38)\n        result.append(39)\n\
    \        result.append(40)\n        result.append(41)\n        result.append(42)\n\
    \        result.append(43)\n        result.append(44)\n        result.append(45)\n\
    \        result.append(46)\n        result.append(47)\n        result.append(48)\n\
    \        result.append(49)\n        result.append(50)\n        result.append(51)\n\
    \        result.append(52)\n        result.append(53)\n        result.append(54)\n\
    \        result.append(55)\n        result.append(56)\n        result.append(57)\n\
    \        result.append(58)\n        result.append(59)\n        result.append(60)\n\
    \        result.append(61)\n        result.append(62)\n        result.append(63)\n\
    \        result.append(64)\n        result.append(65)\n        result.append(66)\n\
    \        result.append(67)\n        result.append(68)\n        result.append(69)\n\
    \        result.append(70)\n        result.append(71)\n        result.append(72)\n\
    \        result.append(73)\n        result.append(74)\n        result.append(75)\n\
    \        result.append(76)\n        result.append(77)\n        result.append(78)\n\
    \        result.append(79)\n        result.append(80)\n        result.append(81)\n\
    \        result.append(82)\n        result.append(83)\n        result.append(84)\n\
    \        result.append(85)\n        result.append(86)\n        result.append(87)\n\
    \        result.append(88)\n        result.append(89)\n        result.append(90)\n\
    \        result.append(91)\n        result.append(92)\n        result.append(93)\n\
    \        result.append(94)\n        result.append(95)\n        result.append(96)\n\
    \        result.append(\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpbkg8n3ub.swift:136:1: error: expected expression in list of expressions\n\
    }\n^\n/tmp/tmpbkg8n3ub.swift:160:28: error: expected '}' at end of brace statement\n\
    assert(tri(n: 1) == [1, 3])\n                           ^\n/tmp/tmpbkg8n3ub.swift:18:27:\
    \ note: to match this opening '{'\nfunc tri(n: Int) -> [Int] {\n             \
    \             ^\n/tmp/tmpbkg8n3ub.swift:135:22: error: missing argument for parameter\
    \ #1 in call\n        result.append(\n                     ^\n               \
    \      <#Int#>\nSwift.Array:6:37: note: 'append' declared here\n    @inlinable\
    \ public mutating func append(_ newElement: __owned Element)\n               \
    \                     ^\n/tmp/tmpbkg8n3ub.swift:139:6: error: operator functions\
    \ can only be declared at global or in type scope\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824918
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    if n == 1 {\n        result.append(1)\n   \
    \     result.append(2)\n        return result\n    }\n    if n == 2 {\n      \
    \  result.append(2)\n        result.append(3)\n        return result\n    }\n\
    \    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmptggb6i77.swift:36:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmptggb6i77.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmptggb6i77.swift:36:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmptggb6i77.swift:36:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmptggb6i77.swift:38:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmptggb6i77.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmptggb6i77.swift:38:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659824918
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp3ohg75p7.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmp3ohg75p7.swift:32:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmp3ohg75p7.swift:32:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmp3ohg75p7.swift:34:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp3ohg75p7.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp3ohg75p7.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp3ohg75p7.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659824918
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(1)\n        result.append(1)\n\
    \    } else {\n        result.append(1)\n        result.append(1 + n / 2)\n  \
    \  }\n    \n    if n % 2 == 0 {\n        result.append(1 + n / 2)\n    }\n   \
    \ \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpgyemhydv/tmpgyemhydv.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57f8d49c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57f8a40b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57f8a40988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57f8a3f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgyemhydv                        0x000055c4ea2034da <unavailable> + 5338

    5    libc.so.6                          0x00002b57f8f35460 __libc_start_main +
    245

    6    tmpgyemhydv                        0x000055c4ea203119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659824918
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(1)\n        result.append(3)\n\
    \    }\n    else {\n        result.append(1)\n        result.append(3)\n     \
    \   result.append(2)\n    }\n    \n    for _ in 1...n {\n        result.append(result[n-1]\
    \ + result[n-2])\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmpr9ps9wyx/tmpr9ps9wyx.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae06b22dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae06af24b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae06af24988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae06af237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr9ps9wyx                        0x000055a940c1161a <unavailable> + 5658

    5    libc.so.6                          0x00002ae06b419460 __libc_start_main +
    245

    6    tmpr9ps9wyx                        0x000055a940c11259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824918
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp3ohg75p7.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmp3ohg75p7.swift:32:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmp3ohg75p7.swift:32:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmp3ohg75p7.swift:34:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp3ohg75p7.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp3ohg75p7.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp3ohg75p7.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659824918
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result;\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result;\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpmnhomb3z.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpmnhomb3z.swift:32:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpmnhomb3z.swift:32:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpmnhomb3z.swift:34:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpmnhomb3z.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpmnhomb3z.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpmnhomb3z.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659824918
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    var a = 2\n    var b = 3\n    var c = 1\n    for _ in 0..<n {\n\
    \        result.append(c)\n        if n % 2 == 0 {\n            a = a + b\n  \
    \          b = c\n        } else {\n            c = a + b\n            a = b\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp0z5fh0rh/tmp0z5fh0rh.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b581099dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5810694b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5810694988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b58106937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0z5fh0rh                        0x00005612f16005ca <unavailable> + 5578

    5    libc.so.6                          0x00002b5810b89460 __libc_start_main +
    245

    6    tmp0z5fh0rh                        0x00005612f1600209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824918
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n        return result\n    }\n    \n    result.append(tri(n\
    \ - 1) + tri(n - 2))\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpd3zsaxgl.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpd3zsaxgl.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpd3zsaxgl.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpd3zsaxgl.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpd3zsaxgl.swift:36:19: error: missing argument label\
    \ 'contentsOf:' in call\n    result.append(tri(n - 1) + tri(n - 2))\n        \
    \          ^\n                  contentsOf: \n/tmp/tmpd3zsaxgl.swift:36:23: error:\
    \ missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n -\
    \ 2))\n                      ^\n                      n: \n/tmp/tmpd3zsaxgl.swift:36:36:\
    \ error: missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n\
    \ - 2))\n                                   ^\n                              \
    \     n: \n"
  stdout: ''
  timestamp: 1659824918
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n    } else {\n \
    \       result.append(3)\n    }\n    \n    if n % 2 == 0 {\n        result.append(1\
    \ + n / 2)\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp0q3760zr.swift:30:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp0q3760zr.swift:30:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp0q3760zr.swift:30:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp0q3760zr.swift:30:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659824918
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(0)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(1)\n\
    \        result.append(2)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(1)\n        result.append(n / 2)\n    } else {\n\
    \        result.append(1)\n        result.append(n - 1)\n        result.append(n\
    \ + 1 )\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp2zc36mg3/tmp2zc36mg3.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3164116c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3163e0db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3163e0d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3163e0c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2zc36mg3                        0x0000564b037954da <unavailable> + 5338

    5    libc.so.6                          0x00002b3164302460 __libc_start_main +
    245

    6    tmp2zc36mg3                        0x0000564b03795119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659824918
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n <= 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    switch n % 2 {\n    case 0:\n        result.append(3)\n    case\
    \ 1:\n        result.append(1 + n / 2)\n    default:\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpxm_efnyt.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpxm_efnyt.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpxm_efnyt.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpxm_efnyt.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659824918
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(3)\n    } else {\n \
    \       result.append(1)\n        if n % 2 == 0 {\n            result.append(n\
    \ / 2)\n        } else {\n            result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpwu2r2dsa.swift:28:27: error: missing argument label 'contentsOf:'\
    \ in call\n            result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n \
    \                         ^\n                          contentsOf: \n/tmp/tmpwu2r2dsa.swift:28:31:\
    \ error: missing argument label 'n:' in call\n            result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n                              ^\n         \
    \                     n: \n/tmp/tmpwu2r2dsa.swift:28:44: error: missing argument\
    \ label 'n:' in call\n            result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                                           ^\n                      \
    \                     n: \n/tmp/tmpwu2r2dsa.swift:28:57: error: missing argument\
    \ label 'n:' in call\n            result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                                                        ^\n         \
    \                                               n: \n"
  stdout: ''
  timestamp: 1659824918
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n        return result\n    }\n    \n    result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpx2ys2hqa.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpx2ys2hqa.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpx2ys2hqa.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpx2ys2hqa.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpx2ys2hqa.swift:36:19: error: missing argument label\
    \ 'contentsOf:' in call\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \                  ^\n                  contentsOf: \n/tmp/tmpx2ys2hqa.swift:36:23:\
    \ error: missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n                      ^\n                      n: \n/tmp/tmpx2ys2hqa.swift:36:36:\
    \ error: missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n                                   ^\n                 \
    \                  n: \n/tmp/tmpx2ys2hqa.swift:36:49: error: missing argument\
    \ label 'n:' in call\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \                                                ^\n                         \
    \                       n: \n"
  stdout: ''
  timestamp: 1659824918
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \    } else {\n        result.append(3)\n        result.append(1 + n / 2)\n  \
    \      if n % 2 == 0 {\n            result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpanp93r4o.swift:28:27: error: missing argument label 'contentsOf:'\
    \ in call\n            result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n \
    \                         ^\n                          contentsOf: \n/tmp/tmpanp93r4o.swift:28:31:\
    \ error: missing argument label 'n:' in call\n            result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n                              ^\n         \
    \                     n: \n/tmp/tmpanp93r4o.swift:28:44: error: missing argument\
    \ label 'n:' in call\n            result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                                           ^\n                      \
    \                     n: \n/tmp/tmpanp93r4o.swift:28:57: error: missing argument\
    \ label 'n:' in call\n            result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                                                        ^\n         \
    \                                               n: \n"
  stdout: ''
  timestamp: 1659824918
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        return result;\n\
    \    }\n    \n    if n == 1 {\n        result.append(1)\n        return result;\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result;\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpmf63hgp7.swift:37:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpmf63hgp7.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpmf63hgp7.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpmf63hgp7.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpmf63hgp7.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpmf63hgp7.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmpmf63hgp7.swift:39:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659824918
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result;\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result;\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n - 3))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmplidsp_ir.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n - 3))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmplidsp_ir.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n - 3))\n                          ^\n                  \
    \        n: \n/tmp/tmplidsp_ir.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n - 3))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmplidsp_ir.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n - 3))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmplidsp_ir.swift:34:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmplidsp_ir.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmplidsp_ir.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmplidsp_ir.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659824918
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(0)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(1)\n\
    \        result.append(2)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(1)\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n        return result\n    }\n    \n    result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmprjdhw1dv.swift:40:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmprjdhw1dv.swift:40:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmprjdhw1dv.swift:40:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmprjdhw1dv.swift:40:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmprjdhw1dv.swift:44:19: error: missing argument label\
    \ 'contentsOf:' in call\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \                  ^\n                  contentsOf: \n/tmp/tmprjdhw1dv.swift:44:23:\
    \ error: missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n                      ^\n                      n: \n/tmp/tmprjdhw1dv.swift:44:36:\
    \ error: missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n                                   ^\n                 \
    \                  n: \n/tmp/tmprjdhw1dv.swift:44:49: error: missing argument\
    \ label 'n:' in call\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \                                                ^\n                         \
    \                       n: \n"
  stdout: ''
  timestamp: 1659824918
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(0)\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(0)\n        result.append(1)\n        result.append(2)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(0)\n\
    \        result.append(1)\n        result.append(2)\n        result.append(3)\n\
    \        result.append(4)\n        result.append(5)\n        result.append(6)\n\
    \        result.append(7)\n        result.append(8)\n        result.append(9)\n\
    \        result.append(10)\n        result.append(11)\n        result.append(12)\n\
    \        result.append(13)\n        result.append(14)\n        result.append(15)\n\
    \        result.append(16)\n        result.append(17)\n        result.append(18)\n\
    \        result.append(19)\n        result.append(20)\n        result.append(21)\n\
    \        result.append(22)\n        result.append(23)\n        result.append(24)\n\
    \        result.append(25)\n        result.append(26)\n        result.append(27)\n\
    \        result.append(28)\n        result.append(29)\n        result.append(30)\n\
    \        result.append(31)\n        result.append(32)\n        result.append(33)\n\
    \        result.append(34)\n        result.append(35)\n        result.append(36)\n\
    \        result.append(37)\n        result.append(38)\n        result.append(39)\n\
    \        result.append(40)\n        result.append(41)\n        result.append(42)\n\
    \        result.append(43)\n        result.append(44)\n        result.append(45)\n\
    \        result.append(46)\n        result.append(47)\n        result.append(48)\n\
    \        result.append(49)\n        result.append(50)\n        result.append(51)\n\
    \        result.append(52)\n        result.append(53)\n        result.append(54)\n\
    \        result.append(55)\n        result.append(56)\n        result.append(57)\n\
    \        result.append(58)\n        result.append(59)\n        result.append(60)\n\
    \        result.append(61)\n        result.append(62)\n        result.append(63)\n\
    \        result.append(64)\n        result.append(65)\n        result.append(66)\n\
    \        result.append(67)\n        result.append(68)\n        result.append(69)\n\
    \        result.append(70)\n        result.append(71)\n        result.append(72)\n\
    \        result.append(73)\n        result.append(74)\n        result.append(75)\n\
    \        result.append(76)\n        result.append(77)\n        result.append(78)\n\
    \        result.append(79)\n        result.append(80)\n        result.append(81)\n\
    \        result.append(82)\n        result.append(83)\n        result.append(84)\n\
    \        result.append(85)\n        result.append(86)\n        result.append(87)\n\
    \        result.append(88)\n        result.append(89)\n        result.append(90)\n\
    \        result.append(91)\n        result.append(92)\n        result.append(93)\n\
    \        result.append(94)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp3xzxbt2f.swift:160:28: error: expected '}' at end of brace statement\n\
    assert(tri(n: 1) == [1, 3])\n                           ^\n/tmp/tmp3xzxbt2f.swift:18:27:\
    \ note: to match this opening '{'\nfunc tri(n: Int) -> [Int] {\n             \
    \             ^\n/tmp/tmp3xzxbt2f.swift:139:6: error: operator functions can only\
    \ be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824918
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    if n == 2 {\n        result.append(3)\n        return result\n   \
    \ }\n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n   \
    \ } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpjesozxvh.swift:29:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpjesozxvh.swift:29:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpjesozxvh.swift:29:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpjesozxvh.swift:31:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpjesozxvh.swift:31:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpjesozxvh.swift:31:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpjesozxvh.swift:31:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659824918
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result;\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result;\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(1)\n        result.append(3)\n\
    \        return result;\n    }\n    \n    result.append(1)\n    result.append(3)\n\
    \    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpeo9jhl_4.swift:39:19: error: missing argument label 'contentsOf:'\
    \ in call\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n         \
    \         ^\n                  contentsOf: \n/tmp/tmpeo9jhl_4.swift:39:23: error:\
    \ missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n                      ^\n                      n: \n/tmp/tmpeo9jhl_4.swift:39:36:\
    \ error: missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n                                   ^\n                 \
    \                  n: \n/tmp/tmpeo9jhl_4.swift:39:49: error: missing argument\
    \ label 'n:' in call\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \                                                ^\n                         \
    \                       n: \n"
  stdout: ''
  timestamp: 1659824919
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmpu36xqkma.swift:38:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpu36xqkma.swift:38:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpu36xqkma.swift:38:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpu36xqkma.swift:40:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpu36xqkma.swift:40:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpu36xqkma.swift:40:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpu36xqkma.swift:40:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659824918
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result;\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result;\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp6569kt28.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp6569kt28.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp6569kt28.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp6569kt28.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp6569kt28.swift:34:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmp6569kt28.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmp6569kt28.swift:34:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659824919
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(1)\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n % 2 == 1 {\n        result.append(1)\n\
    \        result.append(3)\n        result.append(3)\n        return result\n \
    \   }\n    \n    result.append(1)\n    result.append(3)\n    result.append(3)\n\
    \    result.append(3)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpjd5m5f4s/tmpjd5m5f4s.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6e419d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6e416ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6e416cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6e416cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjd5m5f4s                        0x000055fbd4f034da <unavailable> + 5338

    5    libc.so.6                          0x00002b6e41bc1460 __libc_start_main +
    245

    6    tmpjd5m5f4s                        0x000055fbd4f03119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659824918
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    var tri1 = 1\n    var tri2 = 1\n    var tri3 = 1\n    for _ in\
    \ 0..<n {\n        result.append(tri1)\n        tri1 = tri1 + tri2\n        tri2\
    \ = tri2 + tri3\n        tri3 = tri1 + tri2\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmptmfgle7b/tmptmfgle7b.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fabf97c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fabc8eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fabc8e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fabc8d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptmfgle7b                        0x000055a12d23c5ca <unavailable> + 5578

    5    libc.so.6                          0x00002b5fac183460 __libc_start_main +
    245

    6    tmptmfgle7b                        0x000055a12d23c209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824918
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        return result\n\
    \    }\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1) + tri(n + 2))\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpou3qog6f.swift:37:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpou3qog6f.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpou3qog6f.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpou3qog6f.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpou3qog6f.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2))\n                      ^\n                      contentsOf:\
    \ \n/tmp/tmpou3qog6f.swift:39:27: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2))\n  \
    \                        ^\n                          n: \n/tmp/tmpou3qog6f.swift:39:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1) + tri(n + 2))\n                                  \
    \     ^\n                                       n: \n/tmp/tmpou3qog6f.swift:39:53:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1) + tri(n + 2))\n                                  \
    \                  ^\n                                                    n: \n\
    /tmp/tmpou3qog6f.swift:39:66: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2))\n     \
    \                                                            ^\n             \
    \                                                    n: \n"
  stdout: ''
  timestamp: 1659824929
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    if n == 1 {\n        result.append(1)\n   \
    \     return result\n    }\n    if n == 2 {\n        result.append(3)\n      \
    \  return result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2))\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpl9pl_mtt.swift:34:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpl9pl_mtt.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpl9pl_mtt.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpl9pl_mtt.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpl9pl_mtt.swift:36:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpl9pl_mtt.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpl9pl_mtt.swift:36:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpl9pl_mtt.swift:36:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpl9pl_mtt.swift:37:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpl9pl_mtt.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n        "
  stdout: ''
  timestamp: 1659824919
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 0 {\n        result.append(0)\n        return result\n\
    \    }\n    if n == 1 {\n        result.append(1)\n        return result\n   \
    \ }\n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpipyjykqr.swift:33:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpipyjykqr.swift:33:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpipyjykqr.swift:33:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpipyjykqr.swift:33:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpipyjykqr.swift:35:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpipyjykqr.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpipyjykqr.swift:35:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpipyjykqr.swift:35:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpipyjykqr.swift:36:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpipyjykqr.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659824919
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    if n == 1 {\n        result.append(1)\n   \
    \     return result\n    }\n    if n == 2 {\n        result.append(3)\n      \
    \  return result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 2) + tri(n + 1))\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpnkuvgex7.swift:34:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpnkuvgex7.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpnkuvgex7.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpnkuvgex7.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpnkuvgex7.swift:36:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpnkuvgex7.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpnkuvgex7.swift:36:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpnkuvgex7.swift:36:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpnkuvgex7.swift:37:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 2) + tri(n + 1))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpnkuvgex7.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 2)\
    \ + tri(n + 1))\n                          ^\n        "
  stdout: ''
  timestamp: 1659824919
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    var a = Int(3)\n    var b = Int(1)\n    var c = Int(2)\n    var\
    \ d = Int(1)\n    var e = Int(0)\n    var f = Int(0)\n    var g = Int(0)\n   \
    \ var h = Int(0)\n    var i = Int(0)\n    var j = Int(0)\n    var k = Int(0)\n\
    \    var l = Int(0)\n    var m = Int(0)\n    var n = Int(0)\n    var o = Int(0)\n\
    \    var p = Int(0)\n    var q = Int(0)\n    var r = Int(0)\n    var s = Int(0)\n\
    \    var t = Int(0)\n    var u = Int(0)\n    var v = Int(0)\n    var w = Int(0)\n\
    \    var x = Int(0)\n    var y = Int(0)\n    var z = Int(0)\n    var a = Int(0)\n\
    \    var b = Int(0)\n    var c = Int(0)\n    var d = Int(0)\n    var e = Int(0)\n\
    \    var f = Int(0)\n    var g = Int(0)\n    var h = Int(0)\n    var i = Int(0)\n\
    \    var j = Int(0)\n    var k = Int(0)\n    var l = Int(0)\n    var m = Int(0)\n\
    \    var n = Int(0)\n    var o = Int(0)\n    var p = Int(0)\n    var q = Int(0)\n\
    \    var r = Int(0)\n    var s = Int(0)\n    var t = Int(0)\n    var u = Int(0)\n\
    \    var v = Int(0)\n    var w = Int(0)\n    var x = Int(0)\n    var y = Int(0)\n\
    \    var z = Int(0)\n    var a = Int(0)\n    var b = Int(0)\n    var c = Int(0)\n\
    \    var d = Int(0)\n    var e = Int(0)\n    var f = Int(0)\n    var g = Int(0)\n\
    \    var h = Int(0)\n    var i = Int(0)\n    var j = Int(0)\n    var k = Int(0)\n\
    \    var l = Int(0)\n    var m = Int(0)\n    var n = Int(0)\n    var o = Int(0)\n\
    \    var p = Int(0)\n    var q = Int(0)\n    var r = Int(0)\n    var s = Int(0)\n\
    \    var t = Int(0)\n    var u = Int(0)\n    var v = Int(0)\n    var w = Int(0)\n\
    \    var x = Int(0)\n    var y = Int(0)\n    var z = Int(0)\n    var a = Int(0)\n\
    \    var b = Int(0)\n    var c = Int(0)\n    var d = Int(0)\n    var e = Int(0)\n\
    \    var f = Int(0)\n    var g = Int(0)\n    var h = Int(0)\n    var i = Int(0)\n\
    \    var j = Int(0)\n    var k = Int(0)\n    var l = Int(0)\n    var m = Int(0)\n\
    \    var n = Int(0)\n    var o = Int(0)\n    var p = Int(0)\n    var q = Int(0)\n\
    \    var r = Int(0)\n    var s = Int(0)\n    var t = Int(0)\n    var u = Int(0)\n\
    \    var v = Int(0)\n    var w = Int(0)\n\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmpy48ltvxp.swift:46:9: error: invalid redeclaration of 'a'\n    var\
    \ a = Int(0)\n        ^\n/tmp/tmpy48ltvxp.swift:20:9: note: 'a' previously declared\
    \ here\n    var a = Int(3)\n        ^\n/tmp/tmpy48ltvxp.swift:47:9: error: invalid\
    \ redeclaration of 'b'\n    var b = Int(0)\n        ^\n/tmp/tmpy48ltvxp.swift:21:9:\
    \ note: 'b' previously declared here\n    var b = Int(1)\n        ^\n/tmp/tmpy48ltvxp.swift:48:9:\
    \ error: invalid redeclaration of 'c'\n    var c = Int(0)\n        ^\n/tmp/tmpy48ltvxp.swift:22:9:\
    \ note: 'c' previously declared here\n    var c = Int(2)\n        ^\n/tmp/tmpy48ltvxp.swift:49:9:\
    \ error: invalid redeclaration of 'd'\n    var d = Int(0)\n        ^\n/tmp/tmpy48ltvxp.swift:23:9:\
    \ note: 'd' previously declared here\n    var d = Int(1)\n        ^\n/tmp/tmpy48ltvxp.swift:50:9:\
    \ error: invalid redeclaration of 'e'\n    var e = Int(0)\n        ^\n/tmp/tmpy48ltvxp.swift:24:9:\
    \ note: 'e' previously declared here\n    var e = Int(0)\n        ^\n/tmp/tmpy48ltvxp.swift:51:9:\
    \ error: invalid redeclaration of 'f'\n    var f = Int(0)\n        ^\n/tmp/tmpy48ltvxp.swift:25:9:\
    \ note: 'f' previously declared here\n    var f = Int(0)\n        ^\n/tmp/tmpy48ltvxp.swift:52:9:\
    \ error: invalid redeclaration of 'g'\n    var g = Int(0)\n        ^\n/tmp/tmpy48ltvxp.swift:26:9:\
    \ note: 'g' previously declared here\n    var g = Int(0)\n        ^\n/tmp/tmpy48ltvxp.swift:53:9:\
    \ error: invalid redeclaration of 'h'\n    var h = Int(0)\n        ^\n/tmp/tmpy48ltvxp.swift:27:9:\
    \ note: 'h' previously declared here\n    var h = Int(0)\n        ^\n/tmp/tmpy48ltvxp.swift:54:9:\
    \ error: invalid redeclaration of 'i'\n    var i = Int(0)\n        ^\n/tmp/tmpy48ltvxp.swift:28:9:\
    \ note: 'i' previously declared here\n    var i = Int(0)\n        ^\n/tmp/tmpy48ltvxp.swift:55:9:\
    \ error: invalid redeclaration of 'j'\n    var j = Int(0)\n        ^\n/tmp/tmpy48ltvxp.swift:29:9:\
    \ note: 'j' previously declared here\n    var j = Int(0)\n        ^\n/tmp/tmpy48ltvxp.swift:56:9:\
    \ error: invalid redeclaration of 'k'\n    var k = Int(0)\n        ^\n/tmp/tmpy48ltvxp.swift:30:9:\
    \ note: 'k' previously declared here\n    var k = Int(0)\n "
  stdout: ''
  timestamp: 1659824918
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        return result\n\
    \    }\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmph_ty60b1.swift:37:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmph_ty60b1.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmph_ty60b1.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmph_ty60b1.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmph_ty60b1.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmph_ty60b1.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmph_ty60b1.swift:39:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmph_ty60b1.swift:39:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmph_ty60b1.swift:40:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmph_ty60b1.swift:40:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659824919
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(1)\n        result.append(n\
    \ / 2)\n    } else {\n        result.append(1)\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpza95inuw.swift:31:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpza95inuw.swift:31:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpza95inuw.swift:31:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpza95inuw.swift:31:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659824919
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    var a = Int(3)\n    var b = Int(1)\n    var c = Int(2)\n    var\
    \ d = Int(1)\n    var e = Int(0)\n    var f = Int(0)\n    var g = Int(0)\n   \
    \ var h = Int(0)\n    var i = Int(0)\n    var j = Int(0)\n    var k = Int(0)\n\
    \    var l = Int(0)\n    var m = Int(0)\n    var n = Int(0)\n    var o = Int(0)\n\
    \    var p = Int(0)\n    var q = Int(0)\n    var r = Int(0)\n    var s = Int(0)\n\
    \    var t = Int(0)\n    var u = Int(0)\n    var v = Int(0)\n    var w = Int(0)\n\
    \    var x = Int(0)\n    var y = Int(0)\n    var z = Int(0)\n    var a = Int(0)\n\
    \    var b = Int(0)\n    var c = Int(0)\n    var d = Int(0)\n    var e = Int(0)\n\
    \    var f = Int(0)\n    var g = Int(0)\n    var h = Int(0)\n    var i = Int(0)\n\
    \    var j = Int(0)\n    var k = Int(0)\n    var l = Int(0)\n    var m = Int(0)\n\
    \    var n = Int(0)\n    var o = Int(0)\n    var p = Int(0)\n    var q = Int(0)\n\
    \    var r = Int(0)\n    var s = Int(0)\n    var t = Int(0)\n    var u = Int(0)\n\
    \    var v = Int(0)\n    var w = Int(0)\n    var x = Int(0)\n    var y = Int(0)\n\
    \    var z = Int(0)\n    var a = Int(0)\n    var b = Int(0)\n    var c = Int(0)\n\
    \    var d = Int(0)\n    var e = Int(0)\n    var f = Int(0)\n    var g = Int(0)\n\
    \    var h = Int(0)\n    var i = Int(0)\n    var j = Int(0)\n    var k = Int(0)\n\
    \    var l = Int(0)\n    var m = Int(0)\n    var n = Int(0)\n    var o = Int(0)\n\
    \    var p = Int(0)\n    var q = Int(0)\n    var r = Int(0)\n    var s = Int(0)\n\
    \    var t = Int(0)\n    var u = Int(0)\n    var v = Int(0)\n    var w = Int(0)\n\
    \    var x = Int(0)\n    var y = Int(0)\n    var z = Int(0)\n    var a = Int(0)\n\
    \    var b = Int(0)\n    var c = Int(0)\n    var d = Int(0)\n    var e = Int(0)\n\
    \    var f = Int(0)\n    var g = Int(0)\n    var h = Int(0)\n    var i = Int(0)\n\
    \    var j = Int(0)\n    var k = Int(0)\n    var l = Int(0)\n    var m = Int(0)\n\
    \    var n = Int(0)\n    var o = Int(0)\n    var p = Int(0)\n    var q = Int(0)\n\
    \    var r = Int(0)\n    var s = Int(0)\n    var t = Int(0)\n    var u = Int(0)\n\
    \    var v = Int(0)\n    var w = Int(0)\n\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmpy48ltvxp.swift:46:9: error: invalid redeclaration of 'a'\n    var\
    \ a = Int(0)\n        ^\n/tmp/tmpy48ltvxp.swift:20:9: note: 'a' previously declared\
    \ here\n    var a = Int(3)\n        ^\n/tmp/tmpy48ltvxp.swift:47:9: error: invalid\
    \ redeclaration of 'b'\n    var b = Int(0)\n        ^\n/tmp/tmpy48ltvxp.swift:21:9:\
    \ note: 'b' previously declared here\n    var b = Int(1)\n        ^\n/tmp/tmpy48ltvxp.swift:48:9:\
    \ error: invalid redeclaration of 'c'\n    var c = Int(0)\n        ^\n/tmp/tmpy48ltvxp.swift:22:9:\
    \ note: 'c' previously declared here\n    var c = Int(2)\n        ^\n/tmp/tmpy48ltvxp.swift:49:9:\
    \ error: invalid redeclaration of 'd'\n    var d = Int(0)\n        ^\n/tmp/tmpy48ltvxp.swift:23:9:\
    \ note: 'd' previously declared here\n    var d = Int(1)\n        ^\n/tmp/tmpy48ltvxp.swift:50:9:\
    \ error: invalid redeclaration of 'e'\n    var e = Int(0)\n        ^\n/tmp/tmpy48ltvxp.swift:24:9:\
    \ note: 'e' previously declared here\n    var e = Int(0)\n        ^\n/tmp/tmpy48ltvxp.swift:51:9:\
    \ error: invalid redeclaration of 'f'\n    var f = Int(0)\n        ^\n/tmp/tmpy48ltvxp.swift:25:9:\
    \ note: 'f' previously declared here\n    var f = Int(0)\n        ^\n/tmp/tmpy48ltvxp.swift:52:9:\
    \ error: invalid redeclaration of 'g'\n    var g = Int(0)\n        ^\n/tmp/tmpy48ltvxp.swift:26:9:\
    \ note: 'g' previously declared here\n    var g = Int(0)\n        ^\n/tmp/tmpy48ltvxp.swift:53:9:\
    \ error: invalid redeclaration of 'h'\n    var h = Int(0)\n        ^\n/tmp/tmpy48ltvxp.swift:27:9:\
    \ note: 'h' previously declared here\n    var h = Int(0)\n        ^\n/tmp/tmpy48ltvxp.swift:54:9:\
    \ error: invalid redeclaration of 'i'\n    var i = Int(0)\n        ^\n/tmp/tmpy48ltvxp.swift:28:9:\
    \ note: 'i' previously declared here\n    var i = Int(0)\n        ^\n/tmp/tmpy48ltvxp.swift:55:9:\
    \ error: invalid redeclaration of 'j'\n    var j = Int(0)\n        ^\n/tmp/tmpy48ltvxp.swift:29:9:\
    \ note: 'j' previously declared here\n    var j = Int(0)\n        ^\n/tmp/tmpy48ltvxp.swift:56:9:\
    \ error: invalid redeclaration of 'k'\n    var k = Int(0)\n        ^\n/tmp/tmpy48ltvxp.swift:30:9:\
    \ note: 'k' previously declared here\n    var k = Int(0)\n "
  stdout: ''
  timestamp: 1659824918
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    switch n {\n    case 0:\n        result.append(0)\n   \
    \ case 1:\n        result.append(1)\n    case 2:\n        result.append(3)\n \
    \   case 3:\n        result.append(2)\n    case 4:\n        result.append(3)\n\
    \    case 5:\n        result.append(4)\n    case 6:\n        result.append(5)\n\
    \    case 7:\n        result.append(6)\n    case 8:\n        result.append(7)\n\
    \    case 9:\n        result.append(8)\n    case 10:\n        result.append(9)\n\
    \    case 11:\n        result.append(10)\n    case 12:\n        result.append(11)\n\
    \    case 13:\n        result.append(12)\n    case 14:\n        result.append(13)\n\
    \    case 15:\n        result.append(14)\n    case 16:\n        result.append(15)\n\
    \    case 17:\n        result.append(16)\n    case 18:\n        result.append(17)\n\
    \    case 19:\n        result.append(18)\n    case 20:\n        result.append(19)\n\
    \    case 21:\n        result.append(20)\n    case 22:\n        result.append(21)\n\
    \    case 23:\n        result.append(22)\n    case 24:\n        result.append(23)\n\
    \    case 25:\n        result.append(24)\n    case 26:\n        result.append(25)\n\
    \    case 27:\n        result.append(26)\n    case 28:\n        result.append(27)\n\
    \    case 29:\n        result.append(28)\n    case 30:\n        result.append(29)\n\
    \    case 31:\n        result.append(30)\n    case 32:\n        result.append(31)\n\
    \    case 33:\n        result.append(32)\n    case 34:\n        result.append(33)\n\
    \    case 35:\n        result.append(34)\n    case 36:\n        result.append(35)\n\
    \    case 37:\n        result.append(36)\n    case 38:\n        result.append(37)\n\
    \    case 39:\n        result.append(38)\n    case 40:\n        result.append(39)\n\
    \    case 41:\n        result.append(40)\n    case 42:\n        result.append(41)\n\
    \    case 43:\n        result.append(42)\n    case 44:\n        result.append(43)\n\
    \    case 45:\n        result.append(44)\n    case 46:\n        result.append(45)\n\
    \    case 47:\n        result.append(46)\n    case 48:\n        result.append(47)\n\
    \    case 49:\n        result.append(48)\n    case 50:\n        result.append(49)\n\
    \    case 51:\n        result.append(50)\n    case 52:\n        result.append(51)\n\
    \    case 53:\n        result.append(52)\n    case 54:\n        result.append(53)\n\
    \    case 55:\n        result.append(54)\n    case 56:\n        result.append(55)\n\
    \    case 57:\n        result.append(56)\n    case 58:\n        result.append(57)\n\
    \    case 59:\n        result.append(58)\n    case 60:\n        result.append(59)\n\
    \    case 61:\n        result.append(\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp2fjngi7e.swift:146:1: error: expected expression in list of expressions\n\
    }\n^\n/tmp/tmp2fjngi7e.swift:170:28: error: expected '}' at end of brace statement\n\
    assert(tri(n: 1) == [1, 3])\n                           ^\n/tmp/tmp2fjngi7e.swift:18:27:\
    \ note: to match this opening '{'\nfunc tri(n: Int) -> [Int] {\n             \
    \             ^\n/tmp/tmp2fjngi7e.swift:145:22: error: missing argument for parameter\
    \ #1 in call\n        result.append(\n                     ^\n               \
    \      <#Int#>\nSwift.Array:6:37: note: 'append' declared here\n    @inlinable\
    \ public mutating func append(_ newElement: __owned Element)\n               \
    \                     ^\n/tmp/tmp2fjngi7e.swift:21:5: error: switch must be exhaustive\n\
    \    switch n {\n    ^\n/tmp/tmp2fjngi7e.swift:21:5: note: do you want to add\
    \ a default clause?\n    switch n {\n    ^\n/tmp/tmp2fjngi7e.swift:149:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824918
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp5remhnrw.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp5remhnrw.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp5remhnrw.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp5remhnrw.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp5remhnrw.swift:34:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmp5remhnrw.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmp5remhnrw.swift:34:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659824919
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(0)\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(0)\n        result.append(1)\n        result.append(2)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(0)\n\
    \        result.append(1)\n        result.append(2)\n        result.append(3)\n\
    \        result.append(4)\n        result.append(5)\n        result.append(6)\n\
    \        result.append(7)\n        result.append(8)\n        result.append(9)\n\
    \        result.append(10)\n        result.append(11)\n        result.append(12)\n\
    \        result.append(13)\n        result.append(14)\n        result.append(15)\n\
    \        result.append(16)\n        result.append(17)\n        result.append(18)\n\
    \        result.append(19)\n        result.append(20)\n        result.append(21)\n\
    \        result.append(22)\n        result.append(23)\n        result.append(24)\n\
    \        result.append(25)\n        result.append(26)\n        result.append(27)\n\
    \        result.append(28)\n        result.append(29)\n        result.append(30)\n\
    \        result.append(31)\n        result.append(32)\n        result.append(33)\n\
    \        result.append(34)\n        result.append(35)\n        result.append(36)\n\
    \        result.append(37)\n        result.append(38)\n        result.append(39)\n\
    \        result.append(40)\n        result.append(41)\n        result.append(42)\n\
    \        result.append(43)\n        result.append(44)\n        result.append(45)\n\
    \        result.append(46)\n        result.append(47)\n        result.append(48)\n\
    \        result.append(49)\n        result.append(50)\n        result.append(51)\n\
    \        result.append(52)\n        result.append(53)\n        result.append(54)\n\
    \        result.append(55)\n        result.append(56)\n        result.append(57)\n\
    \        result.append(58)\n        result.append(59)\n        result.append(60)\n\
    \        result.append(61)\n        result.append(62)\n        result.append(63)\n\
    \        result.append(64)\n        result.append(65)\n        result.append(66)\n\
    \        result.append(67)\n        result.append(68)\n        result.append(69)\n\
    \        result.append(70)\n        result.append(71)\n        result.append(72)\n\
    \        result.append(73)\n        result.append(74)\n        result.append(75)\n\
    \        result.append(76)\n        result.append(77)\n        result.append(78)\n\
    \        result.append(79)\n        result.append(80)\n        result.append(81)\n\
    \        result.append(82)\n        result.append(83)\n        result.append(84)\n\
    \        result.append(85)\n        result.append(86)\n        result.append(87)\n\
    \        result.append(88)\n        result.append(89)\n        result.append(90)\n\
    \        result.append(91)\n        result.append(92)\n        result.append(93)\n\
    \        result.append(94)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp3xzxbt2f.swift:160:28: error: expected '}' at end of brace statement\n\
    assert(tri(n: 1) == [1, 3])\n                           ^\n/tmp/tmp3xzxbt2f.swift:18:27:\
    \ note: to match this opening '{'\nfunc tri(n: Int) -> [Int] {\n             \
    \             ^\n/tmp/tmp3xzxbt2f.swift:139:6: error: operator functions can only\
    \ be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824918
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        result.append(1)\n\
    \    } else {\n        result.append(1)\n        result.append(1)\n        result.append(1)\n\
    \        result.append(1)\n    }\n    \n    for _ in 1...n {\n        result.append(result[n-1]\
    \ + result[n-2] + result[n+1])\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002af2a2099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af2a1d90561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af2a1d90286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af2a1d9013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af2a1d8fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002af2a1b8fe83 <unavailable> + 188035

    6    tmp79rpi4wu                        0x000055a1b475531c <unavailable> + 8988

    7    tmp79rpi4wu                        0x000055a1b475453b <unavailable> + 5435

    8    libc.so.6                          0x00002af2a2285460 __libc_start_main +
    245

    9    tmp79rpi4wu                        0x000055a1b4754259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824919
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(1)\n        result.append(n\
    \ / 2)\n    } else {\n        result.append(1)\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpza95inuw.swift:31:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpza95inuw.swift:31:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpza95inuw.swift:31:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpza95inuw.swift:31:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659824919
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    var a = 2\n    var b = 3\n    var c = 1\n    for _ in 0..<n {\n\
    \        result.append(c)\n        if n % 2 == 0 {\n            a += b\n     \
    \       b += c\n            c += 1\n        } else {\n            a += c\n   \
    \         b += b\n            c += 1\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpm2rikra3/tmpm2rikra3.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abcd16e8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abcd13dfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abcd13df988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abcd13de7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm2rikra3                        0x0000557adf8d95ca <unavailable> + 5578

    5    libc.so.6                          0x00002abcd18d4460 __libc_start_main +
    245

    6    tmpm2rikra3                        0x0000557adf8d9209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824919
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmptva2t27f.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmptva2t27f.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmptva2t27f.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmptva2t27f.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmptva2t27f.swift:34:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmptva2t27f.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmptva2t27f.swift:34:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659824919
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpsatboy57.swift:27:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpsatboy57.swift:27:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpsatboy57.swift:27:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpsatboy57.swift:27:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpsatboy57.swift:29:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpsatboy57.swift:29:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmpsatboy57.swift:29:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659824919
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmprjizjhzs.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmprjizjhzs.swift:32:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmprjizjhzs.swift:32:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmprjizjhzs.swift:34:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmprjizjhzs.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmprjizjhzs.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmprjizjhzs.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659824919
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 0 {\n        result.append(0)\n        return result;\n\
    \    }\n    if n == 1 {\n        result.append(1)\n        return result;\n  \
    \  }\n    if n == 2 {\n        result.append(3)\n        return result;\n    }\n\
    \    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpispqv6hu.swift:33:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpispqv6hu.swift:33:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpispqv6hu.swift:33:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpispqv6hu.swift:33:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpispqv6hu.swift:35:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpispqv6hu.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpispqv6hu.swift:35:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpispqv6hu.swift:35:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpispqv6hu.swift:36:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpispqv6hu.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659824919
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    var a = 2\n    var b = 3\n    var c = 1\n    for _ in 0..<n {\n\
    \        result.append(c)\n        if n % 2 == 0 {\n            c += b\n     \
    \   } else {\n            c += a\n        }\n        if n % 2 == 0 {\n       \
    \     a += b\n        } else {\n            a += a\n        }\n        if n %\
    \ 2 == 0 {\n            b += a\n        } else {\n            b += b\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpz93gkxwo/tmpz93gkxwo.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89634efc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89631e6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89631e6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89631e57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz93gkxwo                        0x0000560b9bac55ca <unavailable> + 5578

    5    libc.so.6                          0x00002b89636db460 __libc_start_main +
    245

    6    tmpz93gkxwo                        0x0000560b9bac5209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824919
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        return result\n\
    \    }\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp80xxkljn.swift:37:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp80xxkljn.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp80xxkljn.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp80xxkljn.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp80xxkljn.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp80xxkljn.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp80xxkljn.swift:39:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp80xxkljn.swift:39:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp80xxkljn.swift:40:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmp80xxkljn.swift:40:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n        "
  stdout: ''
  timestamp: 1659824919
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n    } else {\n \
    \       result.append(3)\n    }\n    \n    for i in 1..<n {\n        result.append(result[i-2]\
    \ + result[i-1])\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ddf4ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ddf1c3561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b9ddf1c3286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b9ddf1c313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b9ddf1c2bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b9ddefc2e83 <unavailable> + 188035

    6    tmpxeys5hjs                        0x00005587ca756250 <unavailable> + 8784

    7    tmpxeys5hjs                        0x00005587ca75553b <unavailable> + 5435

    8    libc.so.6                          0x00002b9ddf6b8460 __libc_start_main +
    245

    9    tmpxeys5hjs                        0x00005587ca755259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824919
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        result.append(1)\n\
    \    } else {\n        result.append(3)\n        result.append(1 + n / 2)\n  \
    \      if n % 2 == 0 {\n            result.append(1 + n / 2)\n        }\n    }\n\
    \    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpllk9r2ll/tmpllk9r2ll.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae00af5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae00ac55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae00ac55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae00ac547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpllk9r2ll                        0x000056548c7cf4da <unavailable> + 5338

    5    libc.so.6                          0x00002ae00b14a460 __libc_start_main +
    245

    6    tmpllk9r2ll                        0x000056548c7cf119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659824919
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp3ohg75p7.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmp3ohg75p7.swift:32:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmp3ohg75p7.swift:32:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmp3ohg75p7.swift:34:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp3ohg75p7.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp3ohg75p7.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp3ohg75p7.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659824918
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(0)\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(0)\n        result.append(1)\n        result.append(2)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(0)\n\
    \        result.append(1)\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n        return result\n    }\n    \n    result.append(0)\n    result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpqkq3o04o.swift:43:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpqkq3o04o.swift:43:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpqkq3o04o.swift:43:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpqkq3o04o.swift:43:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpqkq3o04o.swift:48:19: error: missing argument label\
    \ 'contentsOf:' in call\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \                  ^\n                  contentsOf: \n/tmp/tmpqkq3o04o.swift:48:23:\
    \ error: missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n                      ^\n                      n: \n/tmp/tmpqkq3o04o.swift:48:36:\
    \ error: missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n                                   ^\n                 \
    \                  n: \n/tmp/tmpqkq3o04o.swift:48:49: error: missing argument\
    \ label 'n:' in call\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \                                                ^\n                         \
    \                       n: \n"
  stdout: ''
  timestamp: 1659824919
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    var firstThree = [Int]()\n    var secondThree = [Int]()\n   \
    \ var thirdThree = [Int]()\n    var fourthThree = [Int]()\n    var fifthThree\
    \ = [Int]()\n    var sixthThree = [Int]()\n    var seventhThree = [Int]()\n  \
    \  var eighthThree = [Int]()\n    var ninethThree = [Int]()\n    var tenthThree\
    \ = [Int]()\n    var eleventhThree = [Int]()\n    var twelfthThree = [Int]()\n\
    \    var thirteenthThree = [Int]()\n    var fourteenthThree = [Int]()\n    var\
    \ fifteenthThree = [Int]()\n    var sixteenthThree = [Int]()\n    var seventeenthThree\
    \ = [Int]()\n    var eighteenthThree = [Int]()\n    var nineteenthThree = [Int]()\n\
    \    var twentiethThree = [Int]()\n    var thirtiethThree = [Int]()\n    var fourtiethThree\
    \ = [Int]()\n    var fiftiethThree = [Int]()\n    var sixtiethThree = [Int]()\n\
    \    var seventiethThree = [Int]()\n    var eightiethThree = [Int]()\n    var\
    \ ninetiethThree = [Int]()\n    var hundredthThree = [Int]()\n    var thousandthThree\
    \ = [Int]()\n    var millionthThree = [Int]()\n    var billionthThree = [Int]()\n\
    \    var trillionthThree = [Int]()\n    var quadrillionthThree = [Int]()\n   \
    \ var quintillionthThree = [Int]()\n    var sextillionthThree = [Int]()\n    var\
    \ septillionthThree = [Int]()\n    var octillionthThree = [Int]()\n    var nonillionthThree\
    \ = [Int]()\n    var decillionthThree = [Int]()\n    var undecillionthThree =\
    \ [Int]()\n    var duodecillionthThree = [Int]()\n    var tredecillionthThree\
    \ = [Int]()\n    var quattuordecillionthThree = [Int]()\n    var quindecillionthThree\
    \ = [Int]()\n    var sexdecillionthThree = [Int]()\n    var septendecillionthThree\
    \ = [Int]()\n    var octodecillionthThree = [Int]()\n    var novemdecillionthThree\
    \ = [Int]()\n    var vigintilli\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpjknvrg8y.swift:68:9: error: type annotation missing in pattern\n\
    \    var vigintilli\n        ^\n"
  stdout: ''
  timestamp: 1659824919
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    var a = Int(3)\n    var b = Int(1)\n    var c = Int(2)\n    var\
    \ d = Int(1)\n    var e = Int(0)\n    for _ in 0..<n {\n        result.append(a)\n\
    \        e = a + b + c + d\n        a = b\n        b = c\n        c = d\n    \
    \    d = e\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp5wegp44s/tmp5wegp44s.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86e6354c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86e604bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86e604b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86e604a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5wegp44s                        0x00005603406565ca <unavailable> + 5578

    5    libc.so.6                          0x00002b86e6540460 __libc_start_main +
    245

    6    tmp5wegp44s                        0x0000560340656209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824919
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(3)\n    } else if n\
    \ == 2 {\n        result.append(1)\n        result.append(2)\n    } else {\n \
    \       var first = 0\n        var second = 1\n        var third = 1\n       \
    \ \n        for _ in 0..<n {\n            third = first + second + third\n   \
    \         first = second\n            second = third\n            result.append(third)\n\
    \        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmprlookyha/tmprlookyha.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b18aa9f7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b18aa6eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b18aa6ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b18aa6ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprlookyha                        0x000056009d3015ca <unavailable> + 5578

    5    libc.so.6                          0x00002b18aabe3460 __libc_start_main +
    245

    6    tmprlookyha                        0x000056009d301209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824919
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result;\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result;\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp6569kt28.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp6569kt28.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp6569kt28.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp6569kt28.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp6569kt28.swift:34:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmp6569kt28.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmp6569kt28.swift:34:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659824919
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        return result\n\
    \    }\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp4qiz4bbn.swift:37:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp4qiz4bbn.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp4qiz4bbn.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp4qiz4bbn.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp4qiz4bbn.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp4qiz4bbn.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp4qiz4bbn.swift:39:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp4qiz4bbn.swift:39:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp4qiz4bbn.swift:40:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmp4qiz4bbn.swift:40:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n        "
  stdout: ''
  timestamp: 1659824919
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    var a = Int(3)\n    var b = Int(1)\n    var c = Int(2)\n    var\
    \ d = Int(1)\n    var e = Int(0)\n    var f = Int(0)\n    var g = Int(0)\n   \
    \ var h = Int(0)\n    var i = Int(0)\n    var j = Int(0)\n    var k = Int(0)\n\
    \    var l = Int(0)\n    var m = Int(0)\n    var n = Int(0)\n    var o = Int(0)\n\
    \    var p = Int(0)\n    var q = Int(0)\n    var r = Int(0)\n    var s = Int(0)\n\
    \    var t = Int(0)\n    var u = Int(0)\n    var v = Int(0)\n    var w = Int(0)\n\
    \    var x = Int(0)\n    var y = Int(0)\n    var z = Int(0)\n    var a = Int(0)\n\
    \    var b = Int(0)\n    var c = Int(0)\n    var d = Int(0)\n    var e = Int(0)\n\
    \    var f = Int(0)\n    var g = Int(0)\n    var h = Int(0)\n    var i = Int(0)\n\
    \    var j = Int(0)\n    var k = Int(0)\n    var l = Int(0)\n    var m = Int(0)\n\
    \    var n = Int(0)\n    var o = Int(0)\n    var p = Int(0)\n    var q = Int(0)\n\
    \    var r = Int(0)\n    var s = Int(0)\n    var t = Int(0)\n    var u = Int(0)\n\
    \    var v = Int(0)\n    var w = Int(0)\n    var x = Int(0)\n    var y = Int(0)\n\
    \    var z = Int(0)\n    var a = Int(0)\n    var b = Int(0)\n    var c = Int(0)\n\
    \    var d = Int(0)\n    var e = Int(0)\n    var f = Int(0)\n    var g = Int(0)\n\
    \    var h = Int(0)\n    var i = Int(0)\n    var j = Int(0)\n    var k = Int(0)\n\
    \    var l = Int(0)\n    var m = Int(0)\n    var n = Int(0)\n    var o = Int(0)\n\
    \    var p = Int(0)\n    var q = Int(0)\n    var r = Int(0)\n    var s = Int(0)\n\
    \    var t = Int(0)\n    var u = Int(0)\n    var v = Int(0)\n    var w = Int(0)\n\
    \    var x = Int(0)\n    var y = Int(0)\n    var z = Int(0)\n    var a = Int(0)\n\
    \    var b = Int(0)\n    var c = Int(0)\n    var d = Int(0)\n    var e = Int(0)\n\
    \    var f = Int(0)\n    var g = Int(0)\n    var h = Int(0)\n    var i = Int(0)\n\
    \    var j = Int(0)\n    var k = Int(0)\n    var l = Int(0)\n    var m = Int(0)\n\
    \    var n = Int(0)\n    var o = Int(0)\n    var p = Int(0)\n    var q = Int(0)\n\
    \    var r = Int(0)\n    var s = Int(0)\n    var t = Int(0)\n    var u = Int(0)\n\
    \    var v = Int(0)\n    var w = Int(0)\n\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmpy48ltvxp.swift:46:9: error: invalid redeclaration of 'a'\n    var\
    \ a = Int(0)\n        ^\n/tmp/tmpy48ltvxp.swift:20:9: note: 'a' previously declared\
    \ here\n    var a = Int(3)\n        ^\n/tmp/tmpy48ltvxp.swift:47:9: error: invalid\
    \ redeclaration of 'b'\n    var b = Int(0)\n        ^\n/tmp/tmpy48ltvxp.swift:21:9:\
    \ note: 'b' previously declared here\n    var b = Int(1)\n        ^\n/tmp/tmpy48ltvxp.swift:48:9:\
    \ error: invalid redeclaration of 'c'\n    var c = Int(0)\n        ^\n/tmp/tmpy48ltvxp.swift:22:9:\
    \ note: 'c' previously declared here\n    var c = Int(2)\n        ^\n/tmp/tmpy48ltvxp.swift:49:9:\
    \ error: invalid redeclaration of 'd'\n    var d = Int(0)\n        ^\n/tmp/tmpy48ltvxp.swift:23:9:\
    \ note: 'd' previously declared here\n    var d = Int(1)\n        ^\n/tmp/tmpy48ltvxp.swift:50:9:\
    \ error: invalid redeclaration of 'e'\n    var e = Int(0)\n        ^\n/tmp/tmpy48ltvxp.swift:24:9:\
    \ note: 'e' previously declared here\n    var e = Int(0)\n        ^\n/tmp/tmpy48ltvxp.swift:51:9:\
    \ error: invalid redeclaration of 'f'\n    var f = Int(0)\n        ^\n/tmp/tmpy48ltvxp.swift:25:9:\
    \ note: 'f' previously declared here\n    var f = Int(0)\n        ^\n/tmp/tmpy48ltvxp.swift:52:9:\
    \ error: invalid redeclaration of 'g'\n    var g = Int(0)\n        ^\n/tmp/tmpy48ltvxp.swift:26:9:\
    \ note: 'g' previously declared here\n    var g = Int(0)\n        ^\n/tmp/tmpy48ltvxp.swift:53:9:\
    \ error: invalid redeclaration of 'h'\n    var h = Int(0)\n        ^\n/tmp/tmpy48ltvxp.swift:27:9:\
    \ note: 'h' previously declared here\n    var h = Int(0)\n        ^\n/tmp/tmpy48ltvxp.swift:54:9:\
    \ error: invalid redeclaration of 'i'\n    var i = Int(0)\n        ^\n/tmp/tmpy48ltvxp.swift:28:9:\
    \ note: 'i' previously declared here\n    var i = Int(0)\n        ^\n/tmp/tmpy48ltvxp.swift:55:9:\
    \ error: invalid redeclaration of 'j'\n    var j = Int(0)\n        ^\n/tmp/tmpy48ltvxp.swift:29:9:\
    \ note: 'j' previously declared here\n    var j = Int(0)\n        ^\n/tmp/tmpy48ltvxp.swift:56:9:\
    \ error: invalid redeclaration of 'k'\n    var k = Int(0)\n        ^\n/tmp/tmpy48ltvxp.swift:30:9:\
    \ note: 'k' previously declared here\n    var k = Int(0)\n "
  stdout: ''
  timestamp: 1659824918
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    switch n {\n    case 0:\n        result.append(0)\n   \
    \ case 1:\n        result.append(1)\n    case 2:\n        result.append(3)\n \
    \   case 3:\n        result.append(1)\n        result.append(2)\n    case 4:\n\
    \        result.append(3)\n        result.append(1)\n        result.append(2)\n\
    \        result.append(3)\n    case 5:\n        result.append(3)\n        result.append(1)\n\
    \        result.append(2)\n        result.append(3)\n        result.append(4)\n\
    \    case 6:\n        result.append(3)\n        result.append(1)\n        result.append(2)\n\
    \        result.append(3)\n        result.append(4)\n        result.append(5)\n\
    \    case 7:\n        result.append(3)\n        result.append(1)\n        result.append(2)\n\
    \        result.append(3)\n        result.append(4)\n        result.append(5)\n\
    \        result.append(6)\n    case 8:\n        result.append(3)\n        result.append(1)\n\
    \        result.append(2)\n        result.append(3)\n        result.append(4)\n\
    \        result.append(5)\n        result.append(6)\n        result.append(7)\n\
    \    case 9:\n        result.append(3)\n        result.append(1)\n        result.append(2)\n\
    \        result.append(3)\n        result.append(4)\n        result.append(5)\n\
    \        result.append(6)\n        result.append(7)\n        result.append(8)\n\
    \    case 10:\n        result.append(3)\n        result.append(1)\n        result.append(2)\n\
    \        result.append(3)\n        result.append(4)\n        result.append(5)\n\
    \        result.append(6)\n        result.append(7)\n        result.append(8)\n\
    \        result.append(9)\n    case 11:\n        result.append(3)\n        result.append(1)\n\
    \        result.append(2)\n        result.append(3)\n        result.append(4)\n\
    \        result.append(5)\n        result.append(6)\n        result.append(7)\n\
    \        result.append(8)\n        result.append(9)\n        result.append(10)\n\
    \    case 12:\n        result.append(3)\n        result.append(1)\n        result.append(2)\n\
    \        result.append(3)\n        result.append(4)\n        result.append(5)\n\
    \        result.append(6)\n        result.append(7)\n        result.append(8)\n\
    \        result.append(9)\n        result.append(10)\n        result.append(11)\n\
    \    case 13:\n        result.append(3)\n        result.append(1)\n        result.append(2)\n\
    \        result.append(3)\n        result.append(4)\n        result.append(5)\n\
    \        result.append(6)\n        result.append(7)\n        result.append(8)\n\
    \        result.append(9)\n        result.append(10)\n        result.append(11)\n\
    \        result.append(12)\n    case 14:\n        result.append(3)\n        result.append(1)\n\
    \        result.append(2)\n        result.append(3)\n        result.append(4)\n\
    \        result.append(5)\n        result.append(6)\n        result.append(7)\n\
    \        result.append(8)\n        result.append(9)\n        result.append(10)\n\
    \        result.append(11)\n        result.append(12)\n        result.append(13)\n\
    \    case 15:\n        result.append(3)\n        result.append(1)\n        result.append(2)\n\
    \        result.append(3)\n        result.append(4)\n        result.append(5)\n\
    \        result.append(6)\n        result.append(7)\n        result.append(\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpii1h0piu.swift:151:1: error: expected expression in list of expressions\n\
    }\n^\n/tmp/tmpii1h0piu.swift:175:28: error: expected '}' at end of brace statement\n\
    assert(tri(n: 1) == [1, 3])\n                           ^\n/tmp/tmpii1h0piu.swift:18:27:\
    \ note: to match this opening '{'\nfunc tri(n: Int) -> [Int] {\n             \
    \             ^\n/tmp/tmpii1h0piu.swift:150:22: error: missing argument for parameter\
    \ #1 in call\n        result.append(\n                     ^\n               \
    \      <#Int#>\nSwift.Array:6:37: note: 'append' declared here\n    @inlinable\
    \ public mutating func append(_ newElement: __owned Element)\n               \
    \                     ^\n/tmp/tmpii1h0piu.swift:21:5: error: switch must be exhaustive\n\
    \    switch n {\n    ^\n/tmp/tmpii1h0piu.swift:21:5: note: do you want to add\
    \ a default clause?\n    switch n {\n    ^\n/tmp/tmpii1h0piu.swift:154:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824919
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    if n == 2 {\n        result.append(3)\n        return result\n   \
    \ }\n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n   \
    \ } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpjesozxvh.swift:29:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpjesozxvh.swift:29:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpjesozxvh.swift:29:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpjesozxvh.swift:31:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpjesozxvh.swift:31:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpjesozxvh.swift:31:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpjesozxvh.swift:31:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659824918
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    var a = 1\n    var b = 2\n    var c = 3\n    for _ in 0..<n {\n\
    \        result.append(a)\n        if n % 2 == 0 {\n            result.append(b)\n\
    \        }\n        if n % 2 == 1 {\n            result.append(c)\n        }\n\
    \        a = b\n        b = c\n        c = a + b\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpwqg8pl5g/tmpwqg8pl5g.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04b3e1cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b04b3b13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b04b3b13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b04b3b127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwqg8pl5g                        0x000055f48ecaf5ca <unavailable> + 5578

    5    libc.so.6                          0x00002b04b4008460 __libc_start_main +
    245

    6    tmpwqg8pl5g                        0x000055f48ecaf209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824919
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    if n == 2 {\n        result.append(3)\n        return result\n   \
    \ }\n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpnihtp72c.swift:29:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpnihtp72c.swift:29:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpnihtp72c.swift:29:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpnihtp72c.swift:29:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpnihtp72c.swift:31:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpnihtp72c.swift:31:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpnihtp72c.swift:31:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpnihtp72c.swift:31:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpnihtp72c.swift:32:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpnihtp72c.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659824920
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    if n == 1 {\n        result.append(0)\n   \
    \     return result\n    }\n    if n == 2 {\n        result.append(1)\n      \
    \  result.append(2)\n        return result\n    }\n    if n % 2 == 0 {\n     \
    \   result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n      \
    \  result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n\
    \ - 1) + tri(n - 2))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmpe1hvgj49.swift:35:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpe1hvgj49.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpe1hvgj49.swift:35:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpe1hvgj49.swift:35:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpe1hvgj49.swift:37:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpe1hvgj49.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpe1hvgj49.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpe1hvgj49.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpe1hvgj49.swift:38:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpe1hvgj49.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n        "
  stdout: ''
  timestamp: 1659824919
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(1)\n        result.append(2)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(1)\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(1)\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n        return result\n    }\n    \n    result.append(1)\n  \
    \  result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp317p3d7d.swift:40:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp317p3d7d.swift:40:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp317p3d7d.swift:40:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp317p3d7d.swift:40:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp317p3d7d.swift:45:19: error: missing argument label\
    \ 'contentsOf:' in call\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \                  ^\n                  contentsOf: \n/tmp/tmp317p3d7d.swift:45:23:\
    \ error: missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n                      ^\n                      n: \n/tmp/tmp317p3d7d.swift:45:36:\
    \ error: missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n                                   ^\n                 \
    \                  n: \n/tmp/tmp317p3d7d.swift:45:49: error: missing argument\
    \ label 'n:' in call\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \                                                ^\n                         \
    \                       n: \n"
  stdout: ''
  timestamp: 1659824919
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    guard n >= 0 else {\n        return result\n    }\n   \
    \ \n    switch n {\n    case 0:\n        result.append(0)\n    case 1:\n     \
    \   result.append(1)\n    case 2:\n        result.append(3)\n    case 3:\n   \
    \     result.append(3)\n    case 4:\n        result.append(5)\n    case 5:\n \
    \       result.append(8)\n    case 6:\n        result.append(13)\n    case 7:\n\
    \        result.append(21)\n    case 8:\n        result.append(34)\n    case 9:\n\
    \        result.append(55)\n    case 10:\n        result.append(89)\n    case\
    \ 11:\n        result.append(144)\n    case 12:\n        result.append(233)\n\
    \    case 13:\n        result.append(377)\n    case 14:\n        result.append(610)\n\
    \    case 15:\n        result.append(987)\n    case 16:\n        result.append(1597)\n\
    \    case 17:\n        result.append(2584)\n    case 18:\n        result.append(4181)\n\
    \    case 19:\n        result.append(6765)\n    case 20:\n        result.append(10946)\n\
    \    case 21:\n        result.append(17711)\n    case 22:\n        result.append(28657)\n\
    \    case 23:\n        result.append(46368)\n    case 24:\n        result.append(75025)\n\
    \    case 25:\n        result.append(121393)\n    case 26:\n        result.append(196418)\n\
    \    case 27:\n        result.append(317811)\n    case 28:\n        result.append(514229)\n\
    \    case 29:\n        result.append(832080)\n    case 30:\n        result.append(1346269)\n\
    \    case 31:\n        result.append(2178309)\n    case 32:\n        result.append(3524578)\n\
    \    case 33:\n        result.append(5702887)\n    case 34:\n        result.append(9227465)\n\
    \    case 35:\n        result.append(14930352)\n    case 36:\n        result.append(24157817)\n\
    \    case 37:\n        result.append(39088169)\n    case 38:\n        result.append(63245986)\n\
    \    case 39:\n        result.append(102334155)\n    case 40:\n        result.append(165580141)\n\
    \    case 41:\n        result.append(267914296)\n    case 42:\n        result.append(433494437)\n\
    \    case 43:\n        result.append(701408733)\n    case 44:\n        result.append(1134903170)\n\
    \    case 45:\n        result.append(1836311903)\n    case 46:\n        result.append(2971215073)\n\
    \    case 47:\n        result.append(4807526970)\n    case 48:\n        result.append(7778742049)\n\
    \    case 49:\n        result.append(12586269025)\n    case 50:\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpeb7fjsvs.swift:126:5: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n    case 50:\n    ^~~~~~~~\n            \
    \ break\n/tmp/tmpeb7fjsvs.swift:151:28: error: expected '}' at end of brace statement\n\
    assert(tri(n: 1) == [1, 3])\n                           ^\n/tmp/tmpeb7fjsvs.swift:18:27:\
    \ note: to match this opening '{'\nfunc tri(n: Int) -> [Int] {\n             \
    \             ^\n/tmp/tmpeb7fjsvs.swift:25:5: error: switch must be exhaustive\n\
    \    switch n {\n    ^\n/tmp/tmpeb7fjsvs.swift:25:5: note: do you want to add\
    \ a default clause?\n    switch n {\n    ^\n/tmp/tmpeb7fjsvs.swift:130:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824919
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        result.append(2)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2))\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmplej1i5cn.swift:28:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmplej1i5cn.swift:28:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmplej1i5cn.swift:28:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmplej1i5cn.swift:28:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmplej1i5cn.swift:30:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmplej1i5cn.swift:30:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmplej1i5cn.swift:30:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659824919
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(0)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(1)\n\
    \        result.append(2)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(0)\n        result.append(1)\n        result.append(2)\n\
    \        result.append(3)\n        result.append(4)\n        result.append(5)\n\
    \        result.append(6)\n        result.append(7)\n        result.append(8)\n\
    \        result.append(9)\n        result.append(10)\n        result.append(11)\n\
    \        result.append(12)\n        result.append(13)\n        result.append(14)\n\
    \        result.append(15)\n        result.append(16)\n        result.append(17)\n\
    \        result.append(18)\n        result.append(19)\n        result.append(20)\n\
    \        result.append(21)\n        result.append(22)\n        result.append(23)\n\
    \        result.append(24)\n        result.append(25)\n        result.append(26)\n\
    \        result.append(27)\n        result.append(28)\n        result.append(29)\n\
    \        result.append(30)\n        result.append(31)\n        result.append(32)\n\
    \        result.append(33)\n        result.append(34)\n        result.append(35)\n\
    \        result.append(36)\n        result.append(37)\n        result.append(38)\n\
    \        result.append(39)\n        result.append(40)\n        result.append(41)\n\
    \        result.append(42)\n        result.append(43)\n        result.append(44)\n\
    \        result.append(45)\n        result.append(46)\n        result.append(47)\n\
    \        result.append(48)\n        result.append(49)\n        result.append(50)\n\
    \        result.append(51)\n        result.append(52)\n        result.append(53)\n\
    \        result.append(54)\n        result.append(55)\n        result.append(56)\n\
    \        result.append(57)\n        result.append(58)\n        result.append(59)\n\
    \        result.append(60)\n        result.append(61)\n        result.append(62)\n\
    \        result.append(63)\n        result.append(64)\n        result.append(65)\n\
    \        result.append(66)\n        result.append(67)\n        result.append(68)\n\
    \        result.append(69)\n        result.append(70)\n        result.append(71)\n\
    \        result.append(72)\n        result.append(73)\n        result.append(74)\n\
    \        result.append(75)\n        result.append(76)\n        result.append(77)\n\
    \        result.append(78)\n        result.append(79)\n        result.append(80)\n\
    \        result.append(81)\n        result.append(82)\n        result.append(83)\n\
    \        result.append(84)\n        result.append(85)\n        result.append(86)\n\
    \        result.append(87)\n        result.append(88)\n        result.append(89)\n\
    \        result.append(90)\n        result.append(91)\n        result.append(92)\n\
    \        result.append(93)\n        result.append(94)\n        result.append(95)\n\
    \        result.append(\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpvw8wghqn.swift:136:1: error: expected expression in list of expressions\n\
    }\n^\n/tmp/tmpvw8wghqn.swift:160:28: error: expected '}' at end of brace statement\n\
    assert(tri(n: 1) == [1, 3])\n                           ^\n/tmp/tmpvw8wghqn.swift:18:27:\
    \ note: to match this opening '{'\nfunc tri(n: Int) -> [Int] {\n             \
    \             ^\n/tmp/tmpvw8wghqn.swift:135:22: error: missing argument for parameter\
    \ #1 in call\n        result.append(\n                     ^\n               \
    \      <#Int#>\nSwift.Array:6:37: note: 'append' declared here\n    @inlinable\
    \ public mutating func append(_ newElement: __owned Element)\n               \
    \                     ^\n/tmp/tmpvw8wghqn.swift:139:6: error: operator functions\
    \ can only be declared at global or in type scope\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824919
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    switch n {\n    case 0:\n        result.append(0)\n   \
    \ case 1:\n        result.append(1)\n    case 2:\n        result.append(3)\n \
    \   case 3:\n        result.append(1)\n        result.append(2)\n    case 4:\n\
    \        result.append(3)\n        result.append(1)\n        result.append(2)\n\
    \        result.append(3)\n    case 5:\n        result.append(4)\n        result.append(3)\n\
    \        result.append(2)\n        result.append(1)\n        result.append(2)\n\
    \        result.append(3)\n    case 6:\n        result.append(4)\n        result.append(3)\n\
    \        result.append(2)\n        result.append(1)\n        result.append(2)\n\
    \        result.append(3)\n        result.append(4)\n    case 7:\n        result.append(4)\n\
    \        result.append(3)\n        result.append(2)\n        result.append(1)\n\
    \        result.append(2)\n        result.append(3)\n        result.append(4)\n\
    \        result.append(5)\n    case 8:\n        result.append(4)\n        result.append(3)\n\
    \        result.append(2)\n        result.append(1)\n        result.append(2)\n\
    \        result.append(3)\n        result.append(4)\n        result.append(5)\n\
    \        result.append(6)\n    case 9:\n        result.append(4)\n        result.append(3)\n\
    \        result.append(2)\n        result.append(1)\n        result.append(2)\n\
    \        result.append(3)\n        result.append(4)\n        result.append(5)\n\
    \        result.append(6)\n        result.append(7)\n    case 10:\n        result.append(4)\n\
    \        result.append(3)\n        result.append(2)\n        result.append(1)\n\
    \        result.append(2)\n        result.append(3)\n        result.append(4)\n\
    \        result.append(5)\n        result.append(6)\n        result.append(7)\n\
    \        result.append(8)\n    case 11:\n        result.append(4)\n        result.append(3)\n\
    \        result.append(2)\n        result.append(1)\n        result.append(2)\n\
    \        result.append(3)\n        result.append(4)\n        result.append(5)\n\
    \        result.append(6)\n        result.append(7)\n        result.append(8)\n\
    \        result.append(9)\n    case 12:\n        result.append(4)\n        result.append(3)\n\
    \        result.append(2)\n        result.append(1)\n        result.append(2)\n\
    \        result.append(3)\n        result.append(4)\n        result.append(5)\n\
    \        result.append(6)\n        result.append(7)\n        result.append(8)\n\
    \        result.append(9)\n        result.append(10)\n    case 13:\n        result.append(4)\n\
    \        result.append(3)\n        result.append(2)\n        result.append(1)\n\
    \        result.append(2)\n        result.append(3)\n        result.append(4)\n\
    \        result.append(5)\n        result.append(6)\n        result.append(7)\n\
    \        result.append(8)\n        result.append(9)\n        result.append(10)\n\
    \        result.append(11)\n    case 14:\n        result.append(4)\n        result.append(3)\n\
    \        result.append(2)\n        result.append(1)\n        result.append(2)\n\
    \        result.append(3)\n        result.append(4)\n        result.append(5)\n\
    \        result.append(6)\n        result.append(7)\n        result.append(8)\n\
    \        result.append(9)\n        result.append(10)\n        result.append(11)\n\
    \        result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpypw1k8_c.swift:175:28: error: expected '}' at end of brace statement\n\
    assert(tri(n: 1) == [1, 3])\n                           ^\n/tmp/tmpypw1k8_c.swift:18:27:\
    \ note: to match this opening '{'\nfunc tri(n: Int) -> [Int] {\n             \
    \             ^\n/tmp/tmpypw1k8_c.swift:150:9: warning: variable is unused\n \
    \       result\n        ^~~~~~\n/tmp/tmpypw1k8_c.swift:21:5: error: switch must\
    \ be exhaustive\n    switch n {\n    ^\n/tmp/tmpypw1k8_c.swift:21:5: note: do\
    \ you want to add a default clause?\n    switch n {\n    ^\n/tmp/tmpypw1k8_c.swift:154:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824919
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result;\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result;\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpk_mfd3v5.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpk_mfd3v5.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpk_mfd3v5.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpk_mfd3v5.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpk_mfd3v5.swift:34:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpk_mfd3v5.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpk_mfd3v5.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpk_mfd3v5.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpk_mfd3v5.swift:35:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpk_mfd3v5.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659824920
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpffrp_zl2.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpffrp_zl2.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpffrp_zl2.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpffrp_zl2.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpffrp_zl2.swift:34:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpffrp_zl2.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpffrp_zl2.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpffrp_zl2.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpffrp_zl2.swift:35:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpffrp_zl2.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659824920
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(1)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(1)\n\
    \        result.append(2)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(1)\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n        return result\n    }\n    \n    result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp7tw30xpr.swift:40:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp7tw30xpr.swift:40:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp7tw30xpr.swift:40:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp7tw30xpr.swift:40:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp7tw30xpr.swift:44:19: error: missing argument label\
    \ 'contentsOf:' in call\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \                  ^\n                  contentsOf: \n/tmp/tmp7tw30xpr.swift:44:23:\
    \ error: missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n                      ^\n                      n: \n/tmp/tmp7tw30xpr.swift:44:36:\
    \ error: missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n                                   ^\n                 \
    \                  n: \n/tmp/tmp7tw30xpr.swift:44:49: error: missing argument\
    \ label 'n:' in call\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \                                                ^\n                         \
    \                       n: \n"
  stdout: ''
  timestamp: 1659824920
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(0)\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(0)\n        result.append(1)\n        result.append(2)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(0)\n\
    \        result.append(1)\n        result.append(2)\n        result.append(3)\n\
    \        result.append(4)\n        result.append(5)\n        result.append(6)\n\
    \        result.append(7)\n        result.append(8)\n        result.append(9)\n\
    \        result.append(10)\n        result.append(11)\n        result.append(12)\n\
    \        result.append(13)\n        result.append(14)\n        result.append(15)\n\
    \        result.append(16)\n        result.append(17)\n        result.append(18)\n\
    \        result.append(19)\n        result.append(20)\n        result.append(21)\n\
    \        result.append(22)\n        result.append(23)\n        result.append(24)\n\
    \        result.append(25)\n        result.append(26)\n        result.append(27)\n\
    \        result.append(28)\n        result.append(29)\n        result.append(30)\n\
    \        result.append(31)\n        result.append(32)\n        result.append(33)\n\
    \        result.append(34)\n        result.append(35)\n        result.append(36)\n\
    \        result.append(37)\n        result.append(38)\n        result.append(39)\n\
    \        result.append(40)\n        result.append(41)\n        result.append(42)\n\
    \        result.append(43)\n        result.append(44)\n        result.append(45)\n\
    \        result.append(46)\n        result.append(47)\n        result.append(48)\n\
    \        result.append(49)\n        result.append(50)\n        result.append(51)\n\
    \        result.append(52)\n        result.append(53)\n        result.append(54)\n\
    \        result.append(55)\n        result.append(56)\n        result.append(57)\n\
    \        result.append(58)\n        result.append(59)\n        result.append(60)\n\
    \        result.append(61)\n        result.append(62)\n        result.append(63)\n\
    \        result.append(64)\n        result.append(65)\n        result.append(66)\n\
    \        result.append(67)\n        result.append(68)\n        result.append(69)\n\
    \        result.append(70)\n        result.append(71)\n        result.append(72)\n\
    \        result.append(73)\n        result.append(74)\n        result.append(75)\n\
    \        result.append(76)\n        result.append(77)\n        result.append(78)\n\
    \        result.append(79)\n        result.append(80)\n        result.append(81)\n\
    \        result.append(82)\n        result.append(83)\n        result.append(84)\n\
    \        result.append(85)\n        result.append(86)\n        result.append(87)\n\
    \        result.append(88)\n        result.append(89)\n        result.append(90)\n\
    \        result.append(91)\n        result.append(92)\n        result.append(93)\n\
    \        result.append(94)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp3xzxbt2f.swift:160:28: error: expected '}' at end of brace statement\n\
    assert(tri(n: 1) == [1, 3])\n                           ^\n/tmp/tmp3xzxbt2f.swift:18:27:\
    \ note: to match this opening '{'\nfunc tri(n: Int) -> [Int] {\n             \
    \             ^\n/tmp/tmp3xzxbt2f.swift:139:6: error: operator functions can only\
    \ be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824918
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n <= 0 {\n        return result\n    }\n    \n    if\
    \ n == 1 {\n        result.append(1)\n        return result\n    }\n    \n   \
    \ if n == 2 {\n        result.append(3)\n        return result\n    }\n    \n\
    \    if n % 2 == 0 {\n        result.append(1 + n / 2)\n    } else {\n       \
    \ result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp5ulkful9.swift:38:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp5ulkful9.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp5ulkful9.swift:38:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp5ulkful9.swift:38:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659824919
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    switch n {\n    case 0:\n        result.append(0)\n   \
    \ case 1:\n        result.append(1)\n    case 2:\n        result.append(3)\n \
    \   case 3:\n        result.append(2)\n    case 4:\n        result.append(3)\n\
    \    case 5:\n        result.append(4)\n    case 6:\n        result.append(5)\n\
    \    case 7:\n        result.append(6)\n    case 8:\n        result.append(7)\n\
    \    case 9:\n        result.append(8)\n    case 10:\n        result.append(9)\n\
    \    case 11:\n        result.append(10)\n    case 12:\n        result.append(11)\n\
    \    case 13:\n        result.append(12)\n    case 14:\n        result.append(13)\n\
    \    case 15:\n        result.append(14)\n    case 16:\n        result.append(15)\n\
    \    case 17:\n        result.append(16)\n    case 18:\n        result.append(17)\n\
    \    case 19:\n        result.append(18)\n    case 20:\n        result.append(19)\n\
    \    case 21:\n        result.append(20)\n    case 22:\n        result.append(21)\n\
    \    case 23:\n        result.append(22)\n    case 24:\n        result.append(23)\n\
    \    case 25:\n        result.append(24)\n    case 26:\n        result.append(25)\n\
    \    case 27:\n        result.append(26)\n    case 28:\n        result.append(27)\n\
    \    case 29:\n        result.append(28)\n    case 30:\n        result.append(29)\n\
    \    case 31:\n        result.append(30)\n    case 32:\n        result.append(31)\n\
    \    case 33:\n        result.append(32)\n    case 34:\n        result.append(33)\n\
    \    case 35:\n        result.append(34)\n    case 36:\n        result.append(35)\n\
    \    case 37:\n        result.append(36)\n    case 38:\n        result.append(37)\n\
    \    case 39:\n        result.append(38)\n    case 40:\n        result.append(39)\n\
    \    case 41:\n        result.append(40)\n    case 42:\n        result.append(41)\n\
    \    case 43:\n        result.append(42)\n    case 44:\n        result.append(43)\n\
    \    case 45:\n        result.append(44)\n    case 46:\n        result.append(45)\n\
    \    case 47:\n        result.append(46)\n    case 48:\n        result.append(47)\n\
    \    case 49:\n        result.append(48)\n    case 50:\n        result.append(49)\n\
    \    case 51:\n        result.append(50)\n    case 52:\n        result.append(51)\n\
    \    case 53:\n        result.append(52)\n    case 54:\n        result.append(53)\n\
    \    case 55:\n        result.append(54)\n    case 56:\n        result.append(55)\n\
    \    case 57:\n        result.append(56)\n    case 58:\n        result.append(57)\n\
    \    case 59:\n        result.append(58)\n    case 60:\n        result.append(59)\n\
    \    case 61:\n        result.append(\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp2fjngi7e.swift:146:1: error: expected expression in list of expressions\n\
    }\n^\n/tmp/tmp2fjngi7e.swift:170:28: error: expected '}' at end of brace statement\n\
    assert(tri(n: 1) == [1, 3])\n                           ^\n/tmp/tmp2fjngi7e.swift:18:27:\
    \ note: to match this opening '{'\nfunc tri(n: Int) -> [Int] {\n             \
    \             ^\n/tmp/tmp2fjngi7e.swift:145:22: error: missing argument for parameter\
    \ #1 in call\n        result.append(\n                     ^\n               \
    \      <#Int#>\nSwift.Array:6:37: note: 'append' declared here\n    @inlinable\
    \ public mutating func append(_ newElement: __owned Element)\n               \
    \                     ^\n/tmp/tmp2fjngi7e.swift:21:5: error: switch must be exhaustive\n\
    \    switch n {\n    ^\n/tmp/tmp2fjngi7e.swift:21:5: note: do you want to add\
    \ a default clause?\n    switch n {\n    ^\n/tmp/tmp2fjngi7e.swift:149:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824918
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(3)\n    } else if n\
    \ == 2 {\n        result.append(1)\n        result.append(2)\n    } else {\n \
    \       var firstTribonacci = tri(n - 1) + tri(n - 2)\n        result.append(firstTribonacci)\n\
    \        result.append(firstTribonacci + tri(n - 1))\n    }\n    \n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpn6vg0nxp.swift:27:35: error: missing argument label 'n:' in call\n\
    \        var firstTribonacci = tri(n - 1) + tri(n - 2)\n                     \
    \             ^\n                                  n: \n/tmp/tmpn6vg0nxp.swift:27:48:\
    \ error: missing argument label 'n:' in call\n        var firstTribonacci = tri(n\
    \ - 1) + tri(n - 2)\n                                               ^\n      \
    \                                         n: \n/tmp/tmpn6vg0nxp.swift:29:23: error:\
    \ missing argument label 'contentsOf:' in call\n        result.append(firstTribonacci\
    \ + tri(n - 1))\n                      ^\n                      contentsOf: \n\
    /tmp/tmpn6vg0nxp.swift:29:45: error: missing argument label 'n:' in call\n   \
    \     result.append(firstTribonacci + tri(n - 1))\n                          \
    \                  ^\n                                            n: \n"
  stdout: ''
  timestamp: 1659824919
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(1)\n        result.append(3)\n\
    \    } else {\n        result.append(1)\n        result.append(3)\n        result.append(3)\n\
    \    }\n    \n    for i in 1...(n + 1) {\n        result.append(result[i-2] +\
    \ result[i-1])\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b0a0dc49c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0a0d940561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0a0d940286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0a0d94013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0a0d93fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b0a0d73fe83 <unavailable> + 188035

    6    tmp6c98wsyo                        0x0000564308b5040a <unavailable> + 9226

    7    tmp6c98wsyo                        0x0000564308b4f53b <unavailable> + 5435

    8    libc.so.6                          0x00002b0a0de35460 __libc_start_main +
    245

    9    tmp6c98wsyo                        0x0000564308b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824919
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpn2tj2aty.swift:27:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpn2tj2aty.swift:27:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpn2tj2aty.swift:27:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpn2tj2aty.swift:29:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpn2tj2aty.swift:29:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpn2tj2aty.swift:29:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpn2tj2aty.swift:29:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659824919
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        return result\n\
    \    }\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmprkeuyag4.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmprkeuyag4.swift:32:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmprkeuyag4.swift:32:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmprkeuyag4.swift:34:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmprkeuyag4.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmprkeuyag4.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmprkeuyag4.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659824919
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    if n == 1 {\n        result.append(0)\n   \
    \     result.append(1)\n        return result\n    }\n    if n == 2 {\n      \
    \  result.append(0)\n        result.append(1)\n        result.append(2)\n    \
    \    return result\n    }\n    if n % 2 == 0 {\n        result.append(0)\n   \
    \     result.append(1)\n        result.append(2)\n        result.append(3)\n \
    \       result.append(4)\n        result.append(5)\n        result.append(6)\n\
    \        result.append(7)\n        result.append(8)\n        result.append(9)\n\
    \        result.append(10)\n        result.append(11)\n        result.append(12)\n\
    \        result.append(13)\n        result.append(14)\n        result.append(15)\n\
    \        result.append(16)\n        result.append(17)\n        result.append(18)\n\
    \        result.append(19)\n        result.append(20)\n        result.append(21)\n\
    \        result.append(22)\n        result.append(23)\n        result.append(24)\n\
    \        result.append(25)\n        result.append(26)\n        result.append(27)\n\
    \        result.append(28)\n        result.append(29)\n        result.append(30)\n\
    \        result.append(31)\n        result.append(32)\n        result.append(33)\n\
    \        result.append(34)\n        result.append(35)\n        result.append(36)\n\
    \        result.append(37)\n        result.append(38)\n        result.append(39)\n\
    \        result.append(40)\n        result.append(41)\n        result.append(42)\n\
    \        result.append(43)\n        result.append(44)\n        result.append(45)\n\
    \        result.append(46)\n        result.append(47)\n        result.append(48)\n\
    \        result.append(49)\n        result.append(50)\n        result.append(51)\n\
    \        result.append(52)\n        result.append(53)\n        result.append(54)\n\
    \        result.append(55)\n        result.append(56)\n        result.append(57)\n\
    \        result.append(58)\n        result.append(59)\n        result.append(60)\n\
    \        result.append(61)\n        result.append(62)\n        result.append(63)\n\
    \        result.append(64)\n        result.append(65)\n        result.append(66)\n\
    \        result.append(67)\n        result.append(68)\n        result.append(69)\n\
    \        result.append(70)\n        result.append(71)\n        result.append(72)\n\
    \        result.append(73)\n        result.append(74)\n        result.append(75)\n\
    \        result.append(76)\n        result.append(77)\n        result.append(78)\n\
    \        result.append(79)\n        result.append(80)\n        result.append(81)\n\
    \        result.append(82)\n        result.append(83)\n        result.append(84)\n\
    \        result.append(85)\n        result.append(86)\n        result.append(87)\n\
    \        result.append(88)\n        result.append(89)\n        result.append(90)\n\
    \        result.append(91)\n        result.append(92)\n        result.append(93)\n\
    \        result.append(94)\n        result.append(95)\n        result.append(\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp2ai904nf.swift:134:1: error: expected expression in list of expressions\n\
    }\n^\n/tmp/tmp2ai904nf.swift:158:28: error: expected '}' at end of brace statement\n\
    assert(tri(n: 1) == [1, 3])\n                           ^\n/tmp/tmp2ai904nf.swift:18:27:\
    \ note: to match this opening '{'\nfunc tri(n: Int) -> [Int] {\n             \
    \             ^\n/tmp/tmp2ai904nf.swift:133:22: error: missing argument for parameter\
    \ #1 in call\n        result.append(\n                     ^\n               \
    \      <#Int#>\nSwift.Array:6:37: note: 'append' declared here\n    @inlinable\
    \ public mutating func append(_ newElement: __owned Element)\n               \
    \                     ^\n/tmp/tmp2ai904nf.swift:137:6: error: operator functions\
    \ can only be declared at global or in type scope\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824919
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmph0ysegzo.swift:27:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmph0ysegzo.swift:27:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmph0ysegzo.swift:27:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmph0ysegzo.swift:27:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmph0ysegzo.swift:29:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmph0ysegzo.swift:29:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmph0ysegzo.swift:29:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmph0ysegzo.swift:29:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmph0ysegzo.swift:30:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmph0ysegzo.swift:30:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n        "
  stdout: ''
  timestamp: 1659824920
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(0)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(1)\n\
    \        result.append(2)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpgf4lbsy9.swift:39:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpgf4lbsy9.swift:39:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpgf4lbsy9.swift:39:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpgf4lbsy9.swift:41:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpgf4lbsy9.swift:41:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpgf4lbsy9.swift:41:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpgf4lbsy9.swift:41:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659824919
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(1)\n        result.append(3)\n\
    \        return result\n    }\n    \n    result.append(1)\n    result.append(3)\n\
    \    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp87w2pj40.swift:39:19: error: missing argument label 'contentsOf:'\
    \ in call\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n         \
    \         ^\n                  contentsOf: \n/tmp/tmp87w2pj40.swift:39:23: error:\
    \ missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n                      ^\n                      n: \n/tmp/tmp87w2pj40.swift:39:36:\
    \ error: missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n                                   ^\n                 \
    \                  n: \n/tmp/tmp87w2pj40.swift:39:49: error: missing argument\
    \ label 'n:' in call\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \                                                ^\n                         \
    \                       n: \n"
  stdout: ''
  timestamp: 1659824919
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp3ohg75p7.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmp3ohg75p7.swift:32:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmp3ohg75p7.swift:32:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmp3ohg75p7.swift:34:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp3ohg75p7.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp3ohg75p7.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp3ohg75p7.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659824918
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 0 {\n        result.append(0)\n        return result\n\
    \    }\n    if n == 1 {\n        result.append(1)\n        return result\n   \
    \ }\n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpni6oq6_s.swift:33:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpni6oq6_s.swift:33:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpni6oq6_s.swift:33:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpni6oq6_s.swift:33:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpni6oq6_s.swift:35:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpni6oq6_s.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmpni6oq6_s.swift:35:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659824920
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        return result;\n\
    \    }\n    \n    if n == 1 {\n        result.append(1)\n        return result;\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result;\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n        result.append(tri(n - 2) + tri(n + 1))\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpibiw4ywd.swift:37:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpibiw4ywd.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpibiw4ywd.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpibiw4ywd.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpibiw4ywd.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpibiw4ywd.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpibiw4ywd.swift:39:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpibiw4ywd.swift:39:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpibiw4ywd.swift:40:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 2) + tri(n + 1))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpibiw4ywd.swift:40:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 2)\
    \ + tri(n + 1))\n                          ^\n        "
  stdout: ''
  timestamp: 1659824920
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    switch n {\n    case 0:\n        result.append(0)\n   \
    \ case 1:\n        result.append(1)\n    case 2:\n        result.append(3)\n \
    \   case 3:\n        result.append(3)\n    case 4:\n        result.append(5)\n\
    \    case 5:\n        result.append(5)\n    case 6:\n        result.append(8)\n\
    \    case 7:\n        result.append(8)\n    case 8:\n        result.append(13)\n\
    \    case 9:\n        result.append(13)\n    case 10:\n        result.append(17)\n\
    \    case 11:\n        result.append(17)\n    case 12:\n        result.append(21)\n\
    \    case 13:\n        result.append(21)\n    case 14:\n        result.append(25)\n\
    \    case 15:\n        result.append(25)\n    case 16:\n        result.append(29)\n\
    \    case 17:\n        result.append(29)\n    case 18:\n        result.append(33)\n\
    \    case 19:\n        result.append(33)\n    case 20:\n        result.append(37)\n\
    \    case 21:\n        result.append(37)\n    case 22:\n        result.append(41)\n\
    \    case 23:\n        result.append(41)\n    case 24:\n        result.append(45)\n\
    \    case 25:\n        result.append(45)\n    case 26:\n        result.append(49)\n\
    \    case 27:\n        result.append(49)\n    case 28:\n        result.append(53)\n\
    \    case 29:\n        result.append(53)\n    case 30:\n        result.append(57)\n\
    \    case 31:\n        result.append(57)\n    case 32:\n        result.append(61)\n\
    \    case 33:\n        result.append(61)\n    case 34:\n        result.append(65)\n\
    \    case 35:\n        result.append(65)\n    case 36:\n        result.append(69)\n\
    \    case 37:\n        result.append(69)\n    case 38:\n        result.append(73)\n\
    \    case 39:\n        result.append(73)\n    case 40:\n        result.append(77)\n\
    \    case 41:\n        result.append(77)\n    case 42:\n        result.append(81)\n\
    \    case 43:\n        result.append(81)\n    case 44:\n        result.append(85)\n\
    \    case 45:\n        result.append(85)\n    case 46:\n        result.append(89)\n\
    \    case 47:\n        result.append(89)\n    case 48:\n        result.append(93)\n\
    \    case 49:\n        result.append(93)\n    case 50:\n        result.append(97)\n\
    \    case 51:\n        result.append(97)\n    case 52:\n        result.append(101)\n\
    \    case 53:\n        result.append(101)\n    case 54:\n        result.append(105)\n\
    \    case 55:\n        result.append(105)\n    case 56:\n        result.append(109)\n\
    \    case 57:\n        result.append(109)\n    case 58:\n        result.append(113)\n\
    \    case 59:\n        result.append(113)\n    case \n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmprhnblxcl.swift:142:9: error: expected pattern\n    case \n    \
    \    ^\n/tmp/tmprhnblxcl.swift:142:9: error: expected ':' after 'case'\n    case\
    \ \n        ^\n/tmp/tmprhnblxcl.swift:167:28: error: expected '}' at end of brace\
    \ statement\nassert(tri(n: 1) == [1, 3])\n                           ^\n/tmp/tmprhnblxcl.swift:18:27:\
    \ note: to match this opening '{'\nfunc tri(n: Int) -> [Int] {\n             \
    \             ^\n/tmp/tmprhnblxcl.swift:146:6: error: operator functions can only\
    \ be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824919
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(1)\n        result.append(3)\n\
    \    }\n    else {\n        result.append(1)\n        result.append(3)\n     \
    \   result.append(3)\n    }\n    \n    for _ in 1...n {\n        result.append(result[n-1])\n\
    \        result.append(result[n-2])\n    }\n    \n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpiotf9qty/tmpiotf9qty.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1722b16c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b172280db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b172280d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b172280c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiotf9qty                        0x000055a99a59661a <unavailable> + 5658

    5    libc.so.6                          0x00002b1722d02460 __libc_start_main +
    245

    6    tmpiotf9qty                        0x000055a99a596259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824920
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result;\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpiwfcgp0s.swift:27:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpiwfcgp0s.swift:27:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpiwfcgp0s.swift:27:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpiwfcgp0s.swift:29:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpiwfcgp0s.swift:29:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpiwfcgp0s.swift:29:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpiwfcgp0s.swift:29:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659824920
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        result.append(1)\n\
    \    } else {\n        result.append(1)\n        result.append(1)\n        result.append(1)\n\
    \        result.append(1)\n    }\n    \n    for i in 1...n {\n        result.append(result[i-2]\
    \ + result[i-1])\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4e078fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4e0486561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae4e0486286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae4e048613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae4e0485bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae4e0285e83 <unavailable> + 188035

    6    tmpu49ad4jz                        0x0000563a4795d2b8 <unavailable> + 8888

    7    tmpu49ad4jz                        0x0000563a4795c53b <unavailable> + 5435

    8    libc.so.6                          0x00002ae4e097b460 __libc_start_main +
    245

    9    tmpu49ad4jz                        0x0000563a4795c259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824920
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n    }\n    \n  \
    \  if n == 1 {\n        result.append(1)\n    }\n    \n    if n == 2 {\n     \
    \   result.append(3)\n    }\n    \n    if n % 2 == 0 {\n        result.append(1\
    \ + n / 2)\n    }\n    \n    if n % 2 == 1 {\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp2hwcgxgn.swift:38:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp2hwcgxgn.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp2hwcgxgn.swift:38:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp2hwcgxgn.swift:38:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659824920
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 1 {\n        result.append(1)\n        result.append(1)\n\
    \    } else {\n        result.append(3)\n        result.append(1 + n / 2)\n  \
    \      if n % 2 == 1 {\n            result.append(1 + n / 2)\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpvxigf794/tmpvxigf794.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad59610ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad595e01b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad595e01988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad595e007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxigf794                        0x000055c135af84da <unavailable> + 5338

    5    libc.so.6                          0x00002ad5962f6460 __libc_start_main +
    245

    6    tmpvxigf794                        0x000055c135af8119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659824920
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        return result;\n\
    \    }\n    \n    if n == 1 {\n        result.append(1)\n        return result;\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result;\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n        result.append(tri(n - 2) + tri(n + 1))\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpibiw4ywd.swift:37:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpibiw4ywd.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpibiw4ywd.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpibiw4ywd.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpibiw4ywd.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpibiw4ywd.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpibiw4ywd.swift:39:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpibiw4ywd.swift:39:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpibiw4ywd.swift:40:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 2) + tri(n + 1))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpibiw4ywd.swift:40:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 2)\
    \ + tri(n + 1))\n                          ^\n        "
  stdout: ''
  timestamp: 1659824920
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    var a = Int(3)\n    var b = Int(1)\n    var c = Int(2)\n    var\
    \ d = Int(1)\n    var e = Int(0)\n    var f = Int(0)\n    var g = Int(0)\n   \
    \ var h = Int(0)\n    var i = Int(0)\n    var j = Int(0)\n    var k = Int(0)\n\
    \    var l = Int(0)\n    var m = Int(0)\n    var n = Int(0)\n    var o = Int(0)\n\
    \    var p = Int(0)\n    var q = Int(0)\n    var r = Int(0)\n    var s = Int(0)\n\
    \    var t = Int(0)\n    var u = Int(0)\n    var v = Int(0)\n    var w = Int(0)\n\
    \    var x = Int(0)\n    var y = Int(0)\n    var z = Int(0)\n    var a = Int(0)\n\
    \    var b = Int(0)\n    var c = Int(0)\n    var d = Int(0)\n    var e = Int(0)\n\
    \    var f = Int(0)\n    var g = Int(0)\n    var h = Int(0)\n    var i = Int(0)\n\
    \    var j = Int(0)\n    var k = Int(0)\n    var l = Int(0)\n    var m = Int(0)\n\
    \    var n = Int(0)\n    var o = Int(0)\n    var p = Int(0)\n    var q = Int(0)\n\
    \    var r = Int(0)\n    var s = Int(0)\n    var t = Int(0)\n    var u = Int(0)\n\
    \    var v = Int(0)\n    var w = Int(0)\n    var x = Int(0)\n    var y = Int(0)\n\
    \    var z = Int(0)\n    var a = Int(0)\n    var b = Int(0)\n    var c = Int(0)\n\
    \    var d = Int(0)\n    var e = Int(0)\n    var f = Int(0)\n    var g = Int(0)\n\
    \    var h = Int(0)\n    var i = Int(0)\n    var j = Int(0)\n    var k = Int(0)\n\
    \    var l = Int(0)\n    var m = Int(0)\n    var n = Int(0)\n    var o = Int(0)\n\
    \    var p = Int(0)\n    var q = Int(0)\n    var r = Int(0)\n    var s = Int(0)\n\
    \    var t = Int(0)\n    var u = Int(0)\n    var v = Int(0)\n    var w = Int(0)\n\
    \    var x = Int(0)\n    var y = Int(0)\n    var z = Int(0)\n    var a = Int(0)\n\
    \    var b = Int(0)\n    var c = Int(0)\n    var d = Int(0)\n    var e = Int(0)\n\
    \    var f = Int(0)\n    var g = Int(0)\n    var h = Int(0)\n    var i = Int(0)\n\
    \    var j = Int(0)\n    var k = Int(0)\n    var l = Int(0)\n    var m = Int(0)\n\
    \    var n = Int(0)\n    var o = Int(0)\n    var p = Int(0)\n    var q = Int(0)\n\
    \    var r = Int(0)\n    var s = Int(0)\n    var t = Int(0)\n    var u = Int(0)\n\
    \    var v = Int(0)\n    var w = Int(0)\n\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmpy48ltvxp.swift:46:9: error: invalid redeclaration of 'a'\n    var\
    \ a = Int(0)\n        ^\n/tmp/tmpy48ltvxp.swift:20:9: note: 'a' previously declared\
    \ here\n    var a = Int(3)\n        ^\n/tmp/tmpy48ltvxp.swift:47:9: error: invalid\
    \ redeclaration of 'b'\n    var b = Int(0)\n        ^\n/tmp/tmpy48ltvxp.swift:21:9:\
    \ note: 'b' previously declared here\n    var b = Int(1)\n        ^\n/tmp/tmpy48ltvxp.swift:48:9:\
    \ error: invalid redeclaration of 'c'\n    var c = Int(0)\n        ^\n/tmp/tmpy48ltvxp.swift:22:9:\
    \ note: 'c' previously declared here\n    var c = Int(2)\n        ^\n/tmp/tmpy48ltvxp.swift:49:9:\
    \ error: invalid redeclaration of 'd'\n    var d = Int(0)\n        ^\n/tmp/tmpy48ltvxp.swift:23:9:\
    \ note: 'd' previously declared here\n    var d = Int(1)\n        ^\n/tmp/tmpy48ltvxp.swift:50:9:\
    \ error: invalid redeclaration of 'e'\n    var e = Int(0)\n        ^\n/tmp/tmpy48ltvxp.swift:24:9:\
    \ note: 'e' previously declared here\n    var e = Int(0)\n        ^\n/tmp/tmpy48ltvxp.swift:51:9:\
    \ error: invalid redeclaration of 'f'\n    var f = Int(0)\n        ^\n/tmp/tmpy48ltvxp.swift:25:9:\
    \ note: 'f' previously declared here\n    var f = Int(0)\n        ^\n/tmp/tmpy48ltvxp.swift:52:9:\
    \ error: invalid redeclaration of 'g'\n    var g = Int(0)\n        ^\n/tmp/tmpy48ltvxp.swift:26:9:\
    \ note: 'g' previously declared here\n    var g = Int(0)\n        ^\n/tmp/tmpy48ltvxp.swift:53:9:\
    \ error: invalid redeclaration of 'h'\n    var h = Int(0)\n        ^\n/tmp/tmpy48ltvxp.swift:27:9:\
    \ note: 'h' previously declared here\n    var h = Int(0)\n        ^\n/tmp/tmpy48ltvxp.swift:54:9:\
    \ error: invalid redeclaration of 'i'\n    var i = Int(0)\n        ^\n/tmp/tmpy48ltvxp.swift:28:9:\
    \ note: 'i' previously declared here\n    var i = Int(0)\n        ^\n/tmp/tmpy48ltvxp.swift:55:9:\
    \ error: invalid redeclaration of 'j'\n    var j = Int(0)\n        ^\n/tmp/tmpy48ltvxp.swift:29:9:\
    \ note: 'j' previously declared here\n    var j = Int(0)\n        ^\n/tmp/tmpy48ltvxp.swift:56:9:\
    \ error: invalid redeclaration of 'k'\n    var k = Int(0)\n        ^\n/tmp/tmpy48ltvxp.swift:30:9:\
    \ note: 'k' previously declared here\n    var k = Int(0)\n "
  stdout: ''
  timestamp: 1659824918
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(1)\n        result.append(2)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else\
    \ {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n\
    \ - 1) + tri(n - 2))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmpkqqd68z_.swift:39:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpkqqd68z_.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpkqqd68z_.swift:39:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpkqqd68z_.swift:39:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpkqqd68z_.swift:41:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpkqqd68z_.swift:41:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpkqqd68z_.swift:41:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpkqqd68z_.swift:41:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpkqqd68z_.swift:42:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpkqqd68z_.swift:42:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n        "
  stdout: ''
  timestamp: 1659824920
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp5remhnrw.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp5remhnrw.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp5remhnrw.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp5remhnrw.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp5remhnrw.swift:34:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmp5remhnrw.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmp5remhnrw.swift:34:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659824919
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(1)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmpg_bt5u8k.swift:38:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpg_bt5u8k.swift:38:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpg_bt5u8k.swift:38:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpg_bt5u8k.swift:40:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpg_bt5u8k.swift:40:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpg_bt5u8k.swift:40:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpg_bt5u8k.swift:40:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659824920
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        return result;\n\
    \    }\n    \n    if n == 1 {\n        result.append(1)\n        return result;\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result;\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp0v6f4gvi.swift:37:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp0v6f4gvi.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp0v6f4gvi.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp0v6f4gvi.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp0v6f4gvi.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp0v6f4gvi.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp0v6f4gvi.swift:39:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp0v6f4gvi.swift:39:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp0v6f4gvi.swift:40:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp0v6f4gvi.swift:40:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659824919
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    if n == 1 {\n        result.append(0)\n   \
    \     return result\n    }\n    if n == 2 {\n        result.append(1)\n      \
    \  result.append(2)\n        return result\n    }\n    if n % 2 == 0 {\n     \
    \   result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n      \
    \  result.append(tri(n - 1) + tri(n - 2))\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpo74erh_7.swift:35:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpo74erh_7.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpo74erh_7.swift:35:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpo74erh_7.swift:35:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpo74erh_7.swift:37:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpo74erh_7.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmpo74erh_7.swift:37:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659824920
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    if n == 2 {\n        result.append(3)\n        return result\n   \
    \ }\n    if n == 3 {\n        result.append(3)\n        result.append(2)\n   \
    \     return result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpxwcgyi6b.swift:34:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpxwcgyi6b.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpxwcgyi6b.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpxwcgyi6b.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpxwcgyi6b.swift:36:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpxwcgyi6b.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpxwcgyi6b.swift:36:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpxwcgyi6b.swift:36:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpxwcgyi6b.swift:37:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpxwcgyi6b.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659824920
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(0)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(1)\n\
    \        result.append(2)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmph01p2rtq.swift:39:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmph01p2rtq.swift:39:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmph01p2rtq.swift:39:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmph01p2rtq.swift:41:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmph01p2rtq.swift:41:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmph01p2rtq.swift:41:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmph01p2rtq.swift:41:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659824920
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    var a = Int(3)\n    var b = Int(1)\n    var c = Int(2)\n    var\
    \ d = Int(1)\n    for _ in 0..<n {\n        result.append(a)\n        if isEven(n)\
    \ {\n            a = a + b\n        } else {\n            b = b + c\n        }\n\
    \        if isOdd(n) {\n            c = c + d\n        } else {\n            d\
    \ = d + a\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmppxdj1bbr.swift:26:12: error: cannot find 'isEven' in scope\n  \
    \      if isEven(n) {\n           ^~~~~~\n/tmp/tmppxdj1bbr.swift:31:12: error:\
    \ cannot find 'isOdd' in scope\n        if isOdd(n) {\n           ^~~~~\n"
  stdout: ''
  timestamp: 1659824920
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    switch n {\n    case 0: result.append(0)\n    case 1: result.append(1)\n\
    \    case 2: result.append(3)\n    default:\n        var a = tri(n - 1) + tri(n\
    \ - 2)\n        var b = tri(n + 1) + tri(n + 2)\n        result.append(a)\n  \
    \      result.append(b)\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpym7faf3w.swift:26:21: error: missing argument label 'n:' in call\n\
    \        var a = tri(n - 1) + tri(n - 2)\n                    ^\n            \
    \        n: \n/tmp/tmpym7faf3w.swift:26:34: error: missing argument label 'n:'\
    \ in call\n        var a = tri(n - 1) + tri(n - 2)\n                         \
    \        ^\n                                 n: \n/tmp/tmpym7faf3w.swift:27:21:\
    \ error: missing argument label 'n:' in call\n        var b = tri(n + 1) + tri(n\
    \ + 2)\n                    ^\n                    n: \n/tmp/tmpym7faf3w.swift:27:34:\
    \ error: missing argument label 'n:' in call\n        var b = tri(n + 1) + tri(n\
    \ + 2)\n                                 ^\n                                 n:\
    \ \n"
  stdout: ''
  timestamp: 1659824920
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp5remhnrw.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp5remhnrw.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp5remhnrw.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp5remhnrw.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp5remhnrw.swift:34:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmp5remhnrw.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmp5remhnrw.swift:34:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659824919
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(0)\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(0)\n        result.append(1)\n        result.append(2)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(0)\n\
    \        result.append(1)\n        result.append(2)\n        result.append(3)\n\
    \        result.append(4)\n        result.append(5)\n        result.append(6)\n\
    \        result.append(7)\n        result.append(8)\n        result.append(9)\n\
    \        result.append(10)\n        result.append(11)\n        result.append(12)\n\
    \        result.append(13)\n        result.append(14)\n        result.append(15)\n\
    \        result.append(16)\n        result.append(17)\n        result.append(18)\n\
    \        result.append(19)\n        result.append(20)\n        result.append(21)\n\
    \        result.append(22)\n        result.append(23)\n        result.append(24)\n\
    \        result.append(25)\n        result.append(26)\n        result.append(27)\n\
    \        result.append(28)\n        result.append(29)\n        result.append(30)\n\
    \        result.append(31)\n        result.append(32)\n        result.append(33)\n\
    \        result.append(34)\n        result.append(35)\n        result.append(36)\n\
    \        result.append(37)\n        result.append(38)\n        result.append(39)\n\
    \        result.append(40)\n        result.append(41)\n        result.append(42)\n\
    \        result.append(43)\n        result.append(44)\n        result.append(45)\n\
    \        result.append(46)\n        result.append(47)\n        result.append(48)\n\
    \        result.append(49)\n        result.append(50)\n        result.append(51)\n\
    \        result.append(52)\n        result.append(53)\n        result.append(54)\n\
    \        result.append(55)\n        result.append(56)\n        result.append(57)\n\
    \        result.append(58)\n        result.append(59)\n        result.append(60)\n\
    \        result.append(61)\n        result.append(62)\n        result.append(63)\n\
    \        result.append(64)\n        result.append(65)\n        result.append(66)\n\
    \        result.append(67)\n        result.append(68)\n        result.append(69)\n\
    \        result.append(70)\n        result.append(71)\n        result.append(72)\n\
    \        result.append(73)\n        result.append(74)\n        result.append(75)\n\
    \        result.append(76)\n        result.append(77)\n        result.append(78)\n\
    \        result.append(79)\n        result.append(80)\n        result.append(81)\n\
    \        result.append(82)\n        result.append(83)\n        result.append(84)\n\
    \        result.append(85)\n        result.append(86)\n        result.append(87)\n\
    \        result.append(88)\n        result.append(89)\n        result.append(90)\n\
    \        result.append(91)\n        result.append(92)\n        result.append(93)\n\
    \        result.append(94)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp3xzxbt2f.swift:160:28: error: expected '}' at end of brace statement\n\
    assert(tri(n: 1) == [1, 3])\n                           ^\n/tmp/tmp3xzxbt2f.swift:18:27:\
    \ note: to match this opening '{'\nfunc tri(n: Int) -> [Int] {\n             \
    \             ^\n/tmp/tmp3xzxbt2f.swift:139:6: error: operator functions can only\
    \ be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824918
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmprjizjhzs.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmprjizjhzs.swift:32:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmprjizjhzs.swift:32:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmprjizjhzs.swift:34:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmprjizjhzs.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmprjizjhzs.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmprjizjhzs.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659824919
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n    }\n    \n  \
    \  if n == 1 {\n        result.append(1)\n    }\n    \n    if n == 2 {\n     \
    \   result.append(3)\n    }\n    \n    if n % 2 == 0 {\n        result.append(1\
    \ + n / 2)\n    }\n    \n    if n % 2 == 1 {\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp2hwcgxgn.swift:38:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp2hwcgxgn.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp2hwcgxgn.swift:38:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp2hwcgxgn.swift:38:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659824920
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    if n == 1 {\n        result.append(0)\n   \
    \     return result\n    }\n    if n == 2 {\n        result.append(1)\n      \
    \  result.append(2)\n        return result\n    }\n    if n % 2 == 0 {\n     \
    \   result.append(tri(n - 1) + tri(n - 2))\n        result.append(tri(n + 1))\n\
    \        return result\n    }\n    result.append(tri(n - 1) + tri(n - 2))\n  \
    \  result.append(tri(n + 1))\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmp3yv6wpow.swift:35:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmp3yv6wpow.swift:35:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmp3yv6wpow.swift:35:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmp3yv6wpow.swift:36:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n + 1))\n           \
    \           ^\n                      contentsOf: \n/tmp/tmp3yv6wpow.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n + 1))\n\
    \                          ^\n                          n: \n/tmp/tmp3yv6wpow.swift:39:19:\
    \ error: missing argument label 'contentsOf:' in call\n    result.append(tri(n\
    \ - 1) + tri(n - 2))\n                  ^\n                  contentsOf: \n/tmp/tmp3yv6wpow.swift:39:23:\
    \ error: missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n\
    \ - 2))\n                      ^\n                      n: \n/tmp/tmp3yv6wpow.swift:39:36:\
    \ error: missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n\
    \ - 2))\n                                   ^\n                              \
    \     n: \n/tmp/tmp3yv6wpow.swift:40:19: error: missing argument label 'contentsOf:'\
    \ in call\n    result.append(tri(n + 1))\n                  ^\n              \
    \    contentsOf: \n/tmp/tmp3yv6wpow.swift:40:23: error: missing argument label\
    \ 'n:' in call\n    result.append(tri(n + 1))\n                      ^\n     \
    \                 n: \n"
  stdout: ''
  timestamp: 1659824920
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        return result\n\
    \    }\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmplks7nyt6.swift:37:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmplks7nyt6.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmplks7nyt6.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmplks7nyt6.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmplks7nyt6.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmplks7nyt6.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmplks7nyt6.swift:39:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659824920
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result;\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpiwfcgp0s.swift:27:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpiwfcgp0s.swift:27:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpiwfcgp0s.swift:27:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpiwfcgp0s.swift:29:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpiwfcgp0s.swift:29:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpiwfcgp0s.swift:29:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpiwfcgp0s.swift:29:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659824920
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 1 {\n        result.append(1)\n        return result;\n\
    \    }\n    if n == 2 {\n        result.append(3)\n        return result;\n  \
    \  }\n    if n == 3 {\n        result.append(2)\n        return result;\n    }\n\
    \    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \        result.append(tri(n - 1) + tri(n - 2))\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpqne65dhc.swift:33:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpqne65dhc.swift:33:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpqne65dhc.swift:33:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpqne65dhc.swift:33:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpqne65dhc.swift:35:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpqne65dhc.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpqne65dhc.swift:35:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpqne65dhc.swift:35:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpqne65dhc.swift:36:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpqne65dhc.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n        "
  stdout: ''
  timestamp: 1659824920
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(1)\n        result.append(2)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpuqj21wv5.swift:33:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpuqj21wv5.swift:33:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpuqj21wv5.swift:33:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpuqj21wv5.swift:35:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpuqj21wv5.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpuqj21wv5.swift:35:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpuqj21wv5.swift:35:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659824920
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        result.append(2)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(1)\n\
    \        result.append(n / 2)\n    } else {\n        result.append(1)\n      \
    \  result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp_xnerobx.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp_xnerobx.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp_xnerobx.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp_xnerobx.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659824920
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp3ohg75p7.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmp3ohg75p7.swift:32:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmp3ohg75p7.swift:32:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmp3ohg75p7.swift:34:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp3ohg75p7.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp3ohg75p7.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp3ohg75p7.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659824918
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    var first = 0\n    var second = 1\n    var third = 1\n    for\
    \ _ in 0 ..< n {\n        result.append(first)\n        result.append(second)\n\
    \        result.append(third)\n        first = second\n        second = third\n\
    \        third = first + second + third\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpoeay7f5k/tmpoeay7f5k.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b708ef77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b708ec6eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b708ec6e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b708ec6d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoeay7f5k                        0x000055b2569835ca <unavailable> + 5578

    5    libc.so.6                          0x00002b708f163460 __libc_start_main +
    245

    6    tmpoeay7f5k                        0x000055b256983209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824920
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n    }\n    \n  \
    \  if n == 1 {\n        result.append(1)\n    }\n    \n    if n == 2 {\n     \
    \   result.append(3)\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    if n % 2 == 1 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2))\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpykosizlm.swift:34:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpykosizlm.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpykosizlm.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpykosizlm.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpykosizlm.swift:38:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpykosizlm.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmpykosizlm.swift:38:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659824920
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmprjizjhzs.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmprjizjhzs.swift:32:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmprjizjhzs.swift:32:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmprjizjhzs.swift:34:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmprjizjhzs.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmprjizjhzs.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmprjizjhzs.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659824919
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 0 {\n        result.append(1)\n        result.append(1)\n\
    \        return result\n    }\n    if n == 1 {\n        result.append(3)\n   \
    \     return result\n    }\n    if n == 2 {\n        result.append(3)\n      \
    \  result.append(2)\n        return result\n    }\n    if n % 2 == 0 {\n     \
    \   result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n      \
    \  result.append(tri(n - 1) + tri(n - 2))\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpk18el41d.swift:35:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpk18el41d.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpk18el41d.swift:35:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpk18el41d.swift:35:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpk18el41d.swift:37:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpk18el41d.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmpk18el41d.swift:37:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659824920
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(0)\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(0)\n        result.append(1)\n        result.append(2)\n\
    \        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    }\n    \n    result.append(0)\n\
    \    result.append(1)\n    result.append(2)\n    result.append(3)\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp7aqfvtjk.swift:37:20: error: missing argument label 'n:' in call\n\
    \        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n                   ^\n \
    \                  n: \n/tmp/tmp7aqfvtjk.swift:37:33: error: missing argument\
    \ label 'n:' in call\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  \
    \                              ^\n                                n: \n/tmp/tmp7aqfvtjk.swift:37:46:\
    \ error: missing argument label 'n:' in call\n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n                                             ^\n        \
    \                                     n: \n/tmp/tmp7aqfvtjk.swift:44:16: error:\
    \ missing argument label 'n:' in call\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n               ^\n               n: \n/tmp/tmp7aqfvtjk.swift:44:29:\
    \ error: missing argument label 'n:' in call\n    return tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1) + tri(n + 2)\n                            ^\n              \
    \              n: \n/tmp/tmp7aqfvtjk.swift:44:42: error: missing argument label\
    \ 'n:' in call\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n\
    \                                         ^\n                                \
    \         n: \n/tmp/tmp7aqfvtjk.swift:44:55: error: missing argument label 'n:'\
    \ in call\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n    \
    \                                                  ^\n                       \
    \                               n: \n"
  stdout: ''
  timestamp: 1659824920
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp3ohg75p7.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmp3ohg75p7.swift:32:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmp3ohg75p7.swift:32:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmp3ohg75p7.swift:34:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp3ohg75p7.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp3ohg75p7.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp3ohg75p7.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659824918
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(0)\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(0)\n        result.append(1)\n        result.append(2)\n\
    \        return result\n    }\n    \n    result.append(0)\n    result.append(1)\n\
    \    result.append(2)\n    result.append(3)\n    result.append(4)\n    result.append(5)\n\
    \    result.append(6)\n    result.append(7)\n    result.append(8)\n    result.append(9)\n\
    \    result.append(10)\n    result.append(11)\n    result.append(12)\n    result.append(13)\n\
    \    result.append(14)\n    result.append(15)\n    result.append(16)\n    result.append(17)\n\
    \    result.append(18)\n    result.append(19)\n    result.append(20)\n    result.append(21)\n\
    \    result.append(22)\n    result.append(23)\n    result.append(24)\n    result.append(25)\n\
    \    result.append(26)\n    result.append(27)\n    result.append(28)\n    result.append(29)\n\
    \    result.append(30)\n    result.append(31)\n    result.append(32)\n    result.append(33)\n\
    \    result.append(34)\n    result.append(35)\n    result.append(36)\n    result.append(37)\n\
    \    result.append(38)\n    result.append(39)\n    result.append(40)\n    result.append(41)\n\
    \    result.append(42)\n    result.append(43)\n    result.append(44)\n    result.append(45)\n\
    \    result.append(46)\n    result.append(47)\n    result.append(48)\n    result.append(49)\n\
    \    result.append(50)\n    result.append(51)\n    result.append(52)\n    result.append(53)\n\
    \    result.append(54)\n    result.append(55)\n    result.append(56)\n    result.append(57)\n\
    \    result.append(58)\n    result.append(59)\n    result.append(60)\n    result.append(61)\n\
    \    result.append(62)\n    result.append(63)\n    result.append(64)\n    result.append(65)\n\
    \    result.append(66)\n    result.append(67)\n    result.append(68)\n    result.append(69)\n\
    \    result.append(70)\n    result.append(71)\n    result.append(72)\n    result.append(73)\n\
    \    result.append(74)\n    result.append(75)\n    result.append(76)\n    result.append(77)\n\
    \    result.append(78)\n    result.append(79)\n    result.append(80)\n    result.append(81)\n\
    \    result.append(82)\n    result.append(83)\n    result.append(84)\n    result.append(85)\n\
    \    result.append(86)\n    result.append(87)\n    result.append(88)\n    result.append(89)\n\
    \    result.append(90)\n    result.append(91)\n    result.append(92)\n    result.append(93)\n\
    \    result.append(94)\n    result.append(95\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmp7bz8yhj_.swift:136:1: error: expected ')' in expression list\n\
    }\n^\n/tmp/tmp7bz8yhj_.swift:135:18: note: to match this opening '('\n    result.append(95\n\
    \                 ^\n"
  stdout: ''
  timestamp: 1659824920
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        return result\n\
    \    }\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp80xxkljn.swift:37:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp80xxkljn.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp80xxkljn.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp80xxkljn.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp80xxkljn.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp80xxkljn.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp80xxkljn.swift:39:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp80xxkljn.swift:39:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp80xxkljn.swift:40:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmp80xxkljn.swift:40:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n        "
  stdout: ''
  timestamp: 1659824919
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp3ohg75p7.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmp3ohg75p7.swift:32:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmp3ohg75p7.swift:32:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmp3ohg75p7.swift:34:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp3ohg75p7.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp3ohg75p7.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp3ohg75p7.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659824918
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpn2tj2aty.swift:27:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpn2tj2aty.swift:27:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpn2tj2aty.swift:27:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpn2tj2aty.swift:29:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpn2tj2aty.swift:29:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpn2tj2aty.swift:29:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpn2tj2aty.swift:29:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659824919
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        return result\n\
    \    }\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n        result.append(tri(n - 2) + tri(n + 1))\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp0xbadoss.swift:37:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp0xbadoss.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp0xbadoss.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp0xbadoss.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp0xbadoss.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp0xbadoss.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp0xbadoss.swift:39:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp0xbadoss.swift:39:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp0xbadoss.swift:40:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 2) + tri(n + 1))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmp0xbadoss.swift:40:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 2)\
    \ + tri(n + 1))\n                          ^\n        "
  stdout: ''
  timestamp: 1659824920
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    if n == 1 {\n        result.append(0)\n   \
    \     return result\n    }\n    if n == 2 {\n        result.append(1)\n      \
    \  result.append(2)\n        return result\n    }\n    if n % 2 == 0 {\n     \
    \   result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n      \
    \  result.append(tri(n - 1) + tri(n - 2))\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpo74erh_7.swift:35:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpo74erh_7.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpo74erh_7.swift:35:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpo74erh_7.swift:35:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpo74erh_7.swift:37:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpo74erh_7.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmpo74erh_7.swift:37:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659824920
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result;\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result;\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp6569kt28.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp6569kt28.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp6569kt28.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp6569kt28.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp6569kt28.swift:34:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmp6569kt28.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmp6569kt28.swift:34:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659824919
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n        result.append(tri(n - 2) + tri(n + 1))\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpjihjl54p.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpjihjl54p.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpjihjl54p.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpjihjl54p.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpjihjl54p.swift:34:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpjihjl54p.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpjihjl54p.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpjihjl54p.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpjihjl54p.swift:35:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 2) + tri(n + 1))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpjihjl54p.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 2)\
    \ + tri(n + 1))\n                          ^\n        "
  stdout: ''
  timestamp: 1659824920
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(0)\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(0)\n        result.append(1)\n        result.append(2)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(0)\n\
    \        result.append(1)\n        result.append(2)\n        result.append(3)\n\
    \        result.append(4)\n        result.append(5)\n        result.append(6)\n\
    \        result.append(7)\n        result.append(8)\n        result.append(9)\n\
    \        result.append(10)\n        result.append(11)\n        result.append(12)\n\
    \        result.append(13)\n        result.append(14)\n        result.append(15)\n\
    \        result.append(16)\n        result.append(17)\n        result.append(18)\n\
    \        result.append(19)\n        result.append(20)\n        result.append(21)\n\
    \        result.append(22)\n        result.append(23)\n        result.append(24)\n\
    \        result.append(25)\n        result.append(26)\n        result.append(27)\n\
    \        result.append(28)\n        result.append(29)\n        result.append(30)\n\
    \        result.append(31)\n        result.append(32)\n        result.append(33)\n\
    \        result.append(34)\n        result.append(35)\n        result.append(36)\n\
    \        result.append(37)\n        result.append(38)\n        result.append(39)\n\
    \        result.append(40)\n        result.append(41)\n        result.append(42)\n\
    \        result.append(43)\n        result.append(44)\n        result.append(45)\n\
    \        result.append(46)\n        result.append(47)\n        result.append(48)\n\
    \        result.append(49)\n        result.append(50)\n        result.append(51)\n\
    \        result.append(52)\n        result.append(53)\n        result.append(54)\n\
    \        result.append(55)\n        result.append(56)\n        result.append(57)\n\
    \        result.append(58)\n        result.append(59)\n        result.append(60)\n\
    \        result.append(61)\n        result.append(62)\n        result.append(63)\n\
    \        result.append(64)\n        result.append(65)\n        result.append(66)\n\
    \        result.append(67)\n        result.append(68)\n        result.append(69)\n\
    \        result.append(70)\n        result.append(71)\n        result.append(72)\n\
    \        result.append(73)\n        result.append(74)\n        result.append(75)\n\
    \        result.append(76)\n        result.append(77)\n        result.append(78)\n\
    \        result.append(79)\n        result.append(80)\n        result.append(81)\n\
    \        result.append(82)\n        result.append(83)\n        result.append(84)\n\
    \        result.append(85)\n        result.append(86)\n        result.append(87)\n\
    \        result.append(88)\n        result.append(89)\n        result.append(90)\n\
    \        result.append(91)\n        result.append(92)\n        result.append(93)\n\
    \        result.append(94)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp3xzxbt2f.swift:160:28: error: expected '}' at end of brace statement\n\
    assert(tri(n: 1) == [1, 3])\n                           ^\n/tmp/tmp3xzxbt2f.swift:18:27:\
    \ note: to match this opening '{'\nfunc tri(n: Int) -> [Int] {\n             \
    \             ^\n/tmp/tmp3xzxbt2f.swift:139:6: error: operator functions can only\
    \ be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824918
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 0 {\n        result.append(0)\n        return result\n\
    \    }\n    if n == 1 {\n        result.append(1)\n        return result\n   \
    \ }\n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpipyjykqr.swift:33:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpipyjykqr.swift:33:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpipyjykqr.swift:33:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpipyjykqr.swift:33:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpipyjykqr.swift:35:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpipyjykqr.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpipyjykqr.swift:35:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpipyjykqr.swift:35:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpipyjykqr.swift:36:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpipyjykqr.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659824919
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp3ohg75p7.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmp3ohg75p7.swift:32:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmp3ohg75p7.swift:32:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmp3ohg75p7.swift:34:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp3ohg75p7.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp3ohg75p7.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp3ohg75p7.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659824918
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    var a = Int(3)\n    var b = Int(1)\n    var c = Int(2)\n    var\
    \ d = Int(1)\n    var e = Int(0)\n    var f = Int(0)\n    var g = Int(0)\n   \
    \ var h = Int(0)\n    var i = Int(0)\n    var j = Int(0)\n    var k = Int(0)\n\
    \    var l = Int(0)\n    var m = Int(0)\n    var n = Int(0)\n    var o = Int(0)\n\
    \    var p = Int(0)\n    var q = Int(0)\n    var r = Int(0)\n    var s = Int(0)\n\
    \    var t = Int(0)\n    var u = Int(0)\n    var v = Int(0)\n    var w = Int(0)\n\
    \    var x = Int(0)\n    var y = Int(0)\n    var z = Int(0)\n    var a = Int(3)\n\
    \    var b = Int(1)\n    var c = Int(2)\n    var d = Int(1)\n    var e = Int(0)\n\
    \    var f = Int(0)\n    var g = Int(0)\n    var h = Int(0)\n    var i = Int(0)\n\
    \    var j = Int(0)\n    var k = Int(0)\n    var l = Int(0)\n    var m = Int(0)\n\
    \    var n = Int(0)\n    var o = Int(0)\n    var p = Int(0)\n    var q = Int(0)\n\
    \    var r = Int(0)\n    var s = Int(0)\n    var t = Int(0)\n    var u = Int(0)\n\
    \    var v = Int(0)\n    var w = Int(0)\n    var x = Int(0)\n    var y = Int(0)\n\
    \    var z = Int(0)\n    var a = Int(3)\n    var b = Int(1)\n    var c = Int(2)\n\
    \    var d = Int(1)\n    var e = Int(0)\n    var f = Int(0)\n    var g = Int(0)\n\
    \    var h = Int(0)\n    var i = Int(0)\n    var j = Int(0)\n    var k = Int(0)\n\
    \    var l = Int(0)\n    var m = Int(0)\n    var n = Int(0)\n    var o = Int(0)\n\
    \    var p = Int(0)\n    var q = Int(0)\n    var r = Int(0)\n    var s = Int(0)\n\
    \    var t = Int(0)\n    var u = Int(0)\n    var v = Int(0)\n    var w = Int(0)\n\
    \    var x = Int(0)\n    var y = Int(0)\n    var z = Int(0)\n    var a = Int(3)\n\
    \    var b = Int(1)\n    var c = Int(2)\n    var d = Int(1)\n    var e = Int(0)\n\
    \    var f = Int(0)\n    var g = Int(0)\n    var h = Int(0)\n    var i = Int(0)\n\
    \    var j = Int(0)\n    var k = Int(0)\n    var l = Int(0)\n    var m = Int(0)\n\
    \    var n = Int(0)\n    var o = Int(0)\n    var p = Int(0)\n    var q = Int(0)\n\
    \    var r = Int(0)\n    var s = Int(0)\n    var t = Int(0)\n    var u = Int(0)\n\
    \    var v = Int(0)\n    var w = Int(0)\n\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmp03f_6z8o.swift:46:9: error: invalid redeclaration of 'a'\n    var\
    \ a = Int(3)\n        ^\n/tmp/tmp03f_6z8o.swift:20:9: note: 'a' previously declared\
    \ here\n    var a = Int(3)\n        ^\n/tmp/tmp03f_6z8o.swift:47:9: error: invalid\
    \ redeclaration of 'b'\n    var b = Int(1)\n        ^\n/tmp/tmp03f_6z8o.swift:21:9:\
    \ note: 'b' previously declared here\n    var b = Int(1)\n        ^\n/tmp/tmp03f_6z8o.swift:48:9:\
    \ error: invalid redeclaration of 'c'\n    var c = Int(2)\n        ^\n/tmp/tmp03f_6z8o.swift:22:9:\
    \ note: 'c' previously declared here\n    var c = Int(2)\n        ^\n/tmp/tmp03f_6z8o.swift:49:9:\
    \ error: invalid redeclaration of 'd'\n    var d = Int(1)\n        ^\n/tmp/tmp03f_6z8o.swift:23:9:\
    \ note: 'd' previously declared here\n    var d = Int(1)\n        ^\n/tmp/tmp03f_6z8o.swift:50:9:\
    \ error: invalid redeclaration of 'e'\n    var e = Int(0)\n        ^\n/tmp/tmp03f_6z8o.swift:24:9:\
    \ note: 'e' previously declared here\n    var e = Int(0)\n        ^\n/tmp/tmp03f_6z8o.swift:51:9:\
    \ error: invalid redeclaration of 'f'\n    var f = Int(0)\n        ^\n/tmp/tmp03f_6z8o.swift:25:9:\
    \ note: 'f' previously declared here\n    var f = Int(0)\n        ^\n/tmp/tmp03f_6z8o.swift:52:9:\
    \ error: invalid redeclaration of 'g'\n    var g = Int(0)\n        ^\n/tmp/tmp03f_6z8o.swift:26:9:\
    \ note: 'g' previously declared here\n    var g = Int(0)\n        ^\n/tmp/tmp03f_6z8o.swift:53:9:\
    \ error: invalid redeclaration of 'h'\n    var h = Int(0)\n        ^\n/tmp/tmp03f_6z8o.swift:27:9:\
    \ note: 'h' previously declared here\n    var h = Int(0)\n        ^\n/tmp/tmp03f_6z8o.swift:54:9:\
    \ error: invalid redeclaration of 'i'\n    var i = Int(0)\n        ^\n/tmp/tmp03f_6z8o.swift:28:9:\
    \ note: 'i' previously declared here\n    var i = Int(0)\n        ^\n/tmp/tmp03f_6z8o.swift:55:9:\
    \ error: invalid redeclaration of 'j'\n    var j = Int(0)\n        ^\n/tmp/tmp03f_6z8o.swift:29:9:\
    \ note: 'j' previously declared here\n    var j = Int(0)\n        ^\n/tmp/tmp03f_6z8o.swift:56:9:\
    \ error: invalid redeclaration of 'k'\n    var k = Int(0)\n        ^\n/tmp/tmp03f_6z8o.swift:30:9:\
    \ note: 'k' previously declared here\n    var k = Int(0)\n "
  stdout: ''
  timestamp: 1659824920
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    if n == 1 {\n        result.append(0)\n   \
    \     return result\n    }\n    if n == 2 {\n        result.append(1)\n      \
    \  result.append(2)\n        return result\n    }\n    if n % 2 == 0 {\n     \
    \   result.append(1)\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n        return result\n    }\n    result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpi2i4pzdv.swift:36:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpi2i4pzdv.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpi2i4pzdv.swift:36:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpi2i4pzdv.swift:36:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpi2i4pzdv.swift:39:19: error: missing argument label\
    \ 'contentsOf:' in call\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \                  ^\n                  contentsOf: \n/tmp/tmpi2i4pzdv.swift:39:23:\
    \ error: missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n                      ^\n                      n: \n/tmp/tmpi2i4pzdv.swift:39:36:\
    \ error: missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n                                   ^\n                 \
    \                  n: \n/tmp/tmpi2i4pzdv.swift:39:49: error: missing argument\
    \ label 'n:' in call\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \                                                ^\n                         \
    \                       n: \n"
  stdout: ''
  timestamp: 1659824920
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(1)\n        result.append(n\
    \ / 2)\n    } else {\n        result.append(1)\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp3g5qs3pb.swift:31:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp3g5qs3pb.swift:31:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp3g5qs3pb.swift:31:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp3g5qs3pb.swift:31:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659824920
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp3ohg75p7.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmp3ohg75p7.swift:32:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmp3ohg75p7.swift:32:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmp3ohg75p7.swift:34:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp3ohg75p7.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp3ohg75p7.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp3ohg75p7.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659824918
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    var a = 1\n    var b = 2\n    var c = 3\n    for _ in 0..<n {\n\
    \        result.append(a)\n        if n % 2 == 0 {\n            result.append(b)\n\
    \        } else {\n            result.append(c)\n        }\n        a = b\n  \
    \      b = c\n        c = a + b\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmpyetwekxn/tmpyetwekxn.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abd61748c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd6143fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abd6143f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abd6143e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyetwekxn                        0x0000557ec8c895ca <unavailable> + 5578

    5    libc.so.6                          0x00002abd61934460 __libc_start_main +
    245

    6    tmpyetwekxn                        0x0000557ec8c89209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824920
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    if n == 1 {\n        result.append(0)\n   \
    \     return result\n    }\n    if n == 2 {\n        result.append(1)\n      \
    \  result.append(2)\n        return result\n    }\n    if n % 2 == 0 {\n     \
    \   result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n      \
    \  result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n\
    \ - 1) + tri(n - 2))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmpe1hvgj49.swift:35:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpe1hvgj49.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpe1hvgj49.swift:35:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpe1hvgj49.swift:35:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpe1hvgj49.swift:37:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpe1hvgj49.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpe1hvgj49.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpe1hvgj49.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpe1hvgj49.swift:38:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpe1hvgj49.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n        "
  stdout: ''
  timestamp: 1659824919
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n <= 0 {\n        return result\n    }\n    \n    if\
    \ n == 1 {\n        result.append(1)\n        return result\n    }\n    \n   \
    \ if n == 2 {\n        result.append(3)\n        return result\n    }\n    \n\
    \    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n    }\n    else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpsbi0olip.swift:36:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpsbi0olip.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpsbi0olip.swift:36:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpsbi0olip.swift:36:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpsbi0olip.swift:39:9: error: the compiler is unable\
    \ to type-check this expression in reasonable time; try breaking up the expression\
    \ into distinct sub-expressions\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1) + tri(n - 1) + tri(n - 2) + tri(n + 1))\n        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824975
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    var a = Int(3)\n    var b = Int(1)\n    var c = Int(2)\n    var\
    \ d = Int(1)\n    var e = Int(0)\n    var f = Int(1)\n    var g = Int(2)\n   \
    \ var h = Int(3)\n    var i = Int(0)\n    var j = Int(1)\n    var k = Int(2)\n\
    \    var l = Int(3)\n    var m = Int(0)\n    var n = Int(1)\n    var o = Int(2)\n\
    \    var p = Int(1)\n    var q = Int(2)\n    var r = Int(3)\n    var s = Int(1)\n\
    \    var t = Int(2)\n    var u = Int(1)\n    var v = Int(2)\n    var w = Int(3)\n\
    \    var x = Int(1)\n    var y = Int(2)\n    var z = Int(3)\n    var a = Int(3)\n\
    \    var b = Int(1)\n    var c = Int(2)\n    var d = Int(1)\n    var e = Int(0)\n\
    \    var f = Int(1)\n    var g = Int(2)\n    var h = Int(3)\n    var i = Int(0)\n\
    \    var j = Int(1)\n    var k = Int(2)\n    var l = Int(3)\n    var m = Int(0)\n\
    \    var n = Int(1)\n    var o = Int(2)\n    var p = Int(1)\n    var q = Int(2)\n\
    \    var r = Int(3)\n    var s = Int(1)\n    var t = Int(2)\n    var u = Int(1)\n\
    \    var v = Int(2)\n    var w = Int(3)\n    var x = Int(1)\n    var y = Int(2)\n\
    \    var z = Int(3)\n    var a = Int(3)\n    var b = Int(1)\n    var c = Int(2)\n\
    \    var d = Int(1)\n    var e = Int(0)\n    var f = Int(1)\n    var g = Int(2)\n\
    \    var h = Int(3)\n    var i = Int(0)\n    var j = Int(1)\n    var k = Int(2)\n\
    \    var l = Int(3)\n    var m = Int(0)\n    var n = Int(1)\n    var o = Int(2)\n\
    \    var p = Int(1)\n    var q = Int(2)\n    var r = Int(3)\n    var s = Int(1)\n\
    \    var t = Int(2)\n    var u = Int(1)\n    var v = Int(2)\n    var w = Int(3)\n\
    \    var x = Int(1)\n    var y = Int(2)\n    var z = Int(3)\n    var a = Int(3)\n\
    \    var b = Int(1)\n    var c = Int(2)\n    var d = Int(1)\n    var e = Int(0)\n\
    \    var f = Int(1)\n    var g = Int(2)\n    var h = Int(3)\n    var i = Int(0)\n\
    \    var j = Int(1)\n    var k = Int(2)\n    var l = Int(3)\n    var m = Int(0)\n\
    \    var n = Int(1)\n    var o = Int(2)\n    var p = Int(1)\n    var q = Int(2)\n\
    \    var r = Int(3)\n    var s = Int(1)\n    var t = Int(2)\n    var u = Int(1)\n\
    \    var v = Int(2)\n    var w = Int(3)\n\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmpaqwhfqxb.swift:46:9: error: invalid redeclaration of 'a'\n    var\
    \ a = Int(3)\n        ^\n/tmp/tmpaqwhfqxb.swift:20:9: note: 'a' previously declared\
    \ here\n    var a = Int(3)\n        ^\n/tmp/tmpaqwhfqxb.swift:47:9: error: invalid\
    \ redeclaration of 'b'\n    var b = Int(1)\n        ^\n/tmp/tmpaqwhfqxb.swift:21:9:\
    \ note: 'b' previously declared here\n    var b = Int(1)\n        ^\n/tmp/tmpaqwhfqxb.swift:48:9:\
    \ error: invalid redeclaration of 'c'\n    var c = Int(2)\n        ^\n/tmp/tmpaqwhfqxb.swift:22:9:\
    \ note: 'c' previously declared here\n    var c = Int(2)\n        ^\n/tmp/tmpaqwhfqxb.swift:49:9:\
    \ error: invalid redeclaration of 'd'\n    var d = Int(1)\n        ^\n/tmp/tmpaqwhfqxb.swift:23:9:\
    \ note: 'd' previously declared here\n    var d = Int(1)\n        ^\n/tmp/tmpaqwhfqxb.swift:50:9:\
    \ error: invalid redeclaration of 'e'\n    var e = Int(0)\n        ^\n/tmp/tmpaqwhfqxb.swift:24:9:\
    \ note: 'e' previously declared here\n    var e = Int(0)\n        ^\n/tmp/tmpaqwhfqxb.swift:51:9:\
    \ error: invalid redeclaration of 'f'\n    var f = Int(1)\n        ^\n/tmp/tmpaqwhfqxb.swift:25:9:\
    \ note: 'f' previously declared here\n    var f = Int(1)\n        ^\n/tmp/tmpaqwhfqxb.swift:52:9:\
    \ error: invalid redeclaration of 'g'\n    var g = Int(2)\n        ^\n/tmp/tmpaqwhfqxb.swift:26:9:\
    \ note: 'g' previously declared here\n    var g = Int(2)\n        ^\n/tmp/tmpaqwhfqxb.swift:53:9:\
    \ error: invalid redeclaration of 'h'\n    var h = Int(3)\n        ^\n/tmp/tmpaqwhfqxb.swift:27:9:\
    \ note: 'h' previously declared here\n    var h = Int(3)\n        ^\n/tmp/tmpaqwhfqxb.swift:54:9:\
    \ error: invalid redeclaration of 'i'\n    var i = Int(0)\n        ^\n/tmp/tmpaqwhfqxb.swift:28:9:\
    \ note: 'i' previously declared here\n    var i = Int(0)\n        ^\n/tmp/tmpaqwhfqxb.swift:55:9:\
    \ error: invalid redeclaration of 'j'\n    var j = Int(1)\n        ^\n/tmp/tmpaqwhfqxb.swift:29:9:\
    \ note: 'j' previously declared here\n    var j = Int(1)\n        ^\n/tmp/tmpaqwhfqxb.swift:56:9:\
    \ error: invalid redeclaration of 'k'\n    var k = Int(2)\n        ^\n/tmp/tmpaqwhfqxb.swift:30:9:\
    \ note: 'k' previously declared here\n    var k = Int(2)\n "
  stdout: ''
  timestamp: 1659824920
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    var a = 1\n    var b = 2\n    var c = 3\n    for _ in 0..<n {\n\
    \        result.append(a)\n        if n % 2 == 0 {\n            a += b\n     \
    \       c += b\n        } else {\n            a += c\n            b += c\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp_edi9iiz/tmp_edi9iiz.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf4b593c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf4b28ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf4b28a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf4b2897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_edi9iiz                        0x000055b64d2005ca <unavailable> + 5578

    5    libc.so.6                          0x00002aaf4b77f460 __libc_start_main +
    245

    6    tmp_edi9iiz                        0x000055b64d200209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824920
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 1 {\n        result.append(1)\n        result.append(2)\n\
    \        return result\n    }\n    if n == 2 {\n        result.append(3)\n   \
    \     return result\n    }\n    if n == 3 {\n        result.append(1)\n      \
    \  result.append(2)\n        result.append(3)\n        return result\n    }\n\
    \    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpeei5beh0.swift:36:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpeei5beh0.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpeei5beh0.swift:36:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpeei5beh0.swift:36:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpeei5beh0.swift:38:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpeei5beh0.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpeei5beh0.swift:38:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpeei5beh0.swift:38:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpeei5beh0.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpeei5beh0.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659824921
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(1)\n        result.append(1)\n\
    \    } else {\n        result.append(3)\n        result.append(1 + n / 2)\n  \
    \      if n % 2 == 1 {\n            result.append(1 + n / 2)\n        }\n    }\n\
    \    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp474ueiex/tmp474ueiex.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b99d2bb1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b99d28a8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b99d28a8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b99d28a77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp474ueiex                        0x0000560af4f034da <unavailable> + 5338

    5    libc.so.6                          0x00002b99d2d9d460 __libc_start_main +
    245

    6    tmp474ueiex                        0x0000560af4f03119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659824920
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(1)\n        result.append(3)\n\
    \    } else {\n        result.append(1)\n        result.append(3)\n        result.append(5)\n\
    \    }\n    \n    for _ in 1...n {\n        result.append(result[n-1])\n     \
    \   result.append(result[n-2])\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmp582t9qvk/tmp582t9qvk.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4b95067c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4b94d5eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4b94d5e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4b94d5d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp582t9qvk                        0x000055ae408ef61a <unavailable> + 5658

    5    libc.so.6                          0x00002b4b95253460 __libc_start_main +
    245

    6    tmp582t9qvk                        0x000055ae408ef259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824920
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    if n == 1 {\n        result.append(0)\n   \
    \     return result\n    }\n    if n == 2 {\n        result.append(1)\n      \
    \  result.append(2)\n        return result\n    }\n    if n % 2 == 0 {\n     \
    \   result.append(1)\n        result.append(n)\n        result.append(n + 2)\n\
    \        return result\n    }\n    result.append(1)\n    result.append(n)\n  \
    \  result.append(n + 2)\n    result.append(n + 3)\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp7oha06dl/tmp7oha06dl.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeaeb0f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeaeade9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeaeade9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeaeade87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7oha06dl                        0x00005630e9ae34da <unavailable> + 5338

    5    libc.so.6                          0x00002aeaeb2de460 __libc_start_main +
    245

    6    tmp7oha06dl                        0x00005630e9ae3119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659824920
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        return result\n\
    \    }\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp4qiz4bbn.swift:37:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp4qiz4bbn.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp4qiz4bbn.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp4qiz4bbn.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp4qiz4bbn.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp4qiz4bbn.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp4qiz4bbn.swift:39:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp4qiz4bbn.swift:39:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp4qiz4bbn.swift:40:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmp4qiz4bbn.swift:40:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n        "
  stdout: ''
  timestamp: 1659824919
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    if n == 1 {\n        result.append(1)\n   \
    \     return result\n    }\n    if n == 2 {\n        result.append(3)\n      \
    \  return result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmptgv8md5q.swift:34:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmptgv8md5q.swift:34:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmptgv8md5q.swift:34:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmptgv8md5q.swift:36:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmptgv8md5q.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmptgv8md5q.swift:36:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmptgv8md5q.swift:36:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659824920
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp83kt2myc.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp83kt2myc.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp83kt2myc.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp83kt2myc.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp83kt2myc.swift:34:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp83kt2myc.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp83kt2myc.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp83kt2myc.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp83kt2myc.swift:35:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp83kt2myc.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659824921
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \    } else {\n        result.append(3)\n        result.append(1 + n / 2)\n  \
    \      if n % 2 == 1 {\n            result.append(1 + n / 2)\n        }\n    }\n\
    \    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp0xrt4sym/tmp0xrt4sym.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b626195bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6261652b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6261652988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b62616517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0xrt4sym                        0x00005630da16c4da <unavailable> + 5338

    5    libc.so.6                          0x00002b6261b47460 __libc_start_main +
    245

    6    tmp0xrt4sym                        0x00005630da16c119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659824920
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n <= 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(n)\n        result.append(n\
    \ + 1 )\n    } else {\n        result.append(n)\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpz6ucgxcw.swift:31:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpz6ucgxcw.swift:31:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpz6ucgxcw.swift:31:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpz6ucgxcw.swift:31:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659824921
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        return result\n\
    \    }\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp2i1i38ps.swift:37:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmp2i1i38ps.swift:37:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmp2i1i38ps.swift:37:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmp2i1i38ps.swift:39:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp2i1i38ps.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp2i1i38ps.swift:39:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp2i1i38ps.swift:39:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659824921
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(0)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(1)\n\
    \        result.append(2)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(1)\n        result.append(n / 2)\n    } else {\n\
    \        result.append(n)\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp3d15g4xl.swift:43:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp3d15g4xl.swift:43:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp3d15g4xl.swift:43:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp3d15g4xl.swift:43:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659824921
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    if n == 1 {\n        result.append(0)\n   \
    \     result.append(1)\n        return result\n    }\n    if n == 2 {\n      \
    \  result.append(0)\n        result.append(1)\n        result.append(2)\n    \
    \    return result\n    }\n    if n % 2 == 0 {\n        result.append(0)\n   \
    \     result.append(1)\n        result.append(2)\n        result.append(3)\n \
    \       result.append(4)\n        result.append(5)\n        result.append(6)\n\
    \        result.append(7)\n        result.append(8)\n        result.append(9)\n\
    \        result.append(10)\n        result.append(11)\n        result.append(12)\n\
    \        result.append(13)\n        result.append(14)\n        result.append(15)\n\
    \        result.append(16)\n        result.append(17)\n        result.append(18)\n\
    \        result.append(19)\n        result.append(20)\n        result.append(21)\n\
    \        result.append(22)\n        result.append(23)\n        result.append(24)\n\
    \        result.append(25)\n        result.append(26)\n        result.append(27)\n\
    \        result.append(28)\n        result.append(29)\n        result.append(30)\n\
    \        result.append(31)\n        result.append(32)\n        result.append(33)\n\
    \        result.append(34)\n        result.append(35)\n        result.append(36)\n\
    \        result.append(37)\n        result.append(38)\n        result.append(39)\n\
    \        result.append(40)\n        result.append(41)\n        result.append(42)\n\
    \        result.append(43)\n        result.append(44)\n        result.append(45)\n\
    \        result.append(46)\n        result.append(47)\n        result.append(48)\n\
    \        result.append(49)\n        result.append(50)\n        result.append(51)\n\
    \        result.append(52)\n        result.append(53)\n        result.append(54)\n\
    \        result.append(55)\n        result.append(56)\n        result.append(57)\n\
    \        result.append(58)\n        result.append(59)\n        result.append(60)\n\
    \        result.append(61)\n        result.append(62)\n        result.append(63)\n\
    \        result.append(64)\n        result.append(65)\n        result.append(66)\n\
    \        result.append(67)\n        result.append(68)\n        result.append(69)\n\
    \        result.append(70)\n        result.append(71)\n        result.append(72)\n\
    \        result.append(73)\n        result.append(74)\n        result.append(75)\n\
    \        result.append(76)\n        result.append(77)\n        result.append(78)\n\
    \        result.append(79)\n        result.append(80)\n        result.append(81)\n\
    \        result.append(82)\n        result.append(83)\n        result.append(84)\n\
    \        result.append(85)\n        result.append(86)\n        result.append(87)\n\
    \        result.append(88)\n        result.append(89)\n        result.append(90)\n\
    \        result.append(91)\n        result.append(92)\n        result.append(93)\n\
    \        result.append(94)\n        result.append(95)\n        result.append(\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp2ai904nf.swift:134:1: error: expected expression in list of expressions\n\
    }\n^\n/tmp/tmp2ai904nf.swift:158:28: error: expected '}' at end of brace statement\n\
    assert(tri(n: 1) == [1, 3])\n                           ^\n/tmp/tmp2ai904nf.swift:18:27:\
    \ note: to match this opening '{'\nfunc tri(n: Int) -> [Int] {\n             \
    \             ^\n/tmp/tmp2ai904nf.swift:133:22: error: missing argument for parameter\
    \ #1 in call\n        result.append(\n                     ^\n               \
    \      <#Int#>\nSwift.Array:6:37: note: 'append' declared here\n    @inlinable\
    \ public mutating func append(_ newElement: __owned Element)\n               \
    \                     ^\n/tmp/tmp2ai904nf.swift:137:6: error: operator functions\
    \ can only be declared at global or in type scope\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824919
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    var a = Int(3)\n    var b = Int(1)\n    var c = Int(2)\n    var\
    \ d = Int(1)\n    for _ in 0..<n {\n        result.append(a)\n        if n % 2\
    \ == 0 {\n            a += b\n            c += d\n            d += c\n       \
    \ } else {\n            b += a\n            a += d\n            d += b\n     \
    \   }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp8g33a4g1/tmp8g33a4g1.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3b9d5afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3b9d2a6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3b9d2a6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3b9d2a57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8g33a4g1                        0x00005566c9b055ca <unavailable> + 5578

    5    libc.so.6                          0x00002b3b9d79b460 __libc_start_main +
    245

    6    tmp8g33a4g1                        0x00005566c9b05209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824920
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp5remhnrw.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp5remhnrw.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp5remhnrw.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp5remhnrw.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp5remhnrw.swift:34:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmp5remhnrw.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmp5remhnrw.swift:34:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659824919
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 0 {\n        result.append(0)\n        return result\n\
    \    }\n    if n == 1 {\n        result.append(1)\n        return result\n   \
    \ }\n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpipyjykqr.swift:33:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpipyjykqr.swift:33:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpipyjykqr.swift:33:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpipyjykqr.swift:33:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpipyjykqr.swift:35:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpipyjykqr.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpipyjykqr.swift:35:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpipyjykqr.swift:35:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpipyjykqr.swift:36:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpipyjykqr.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659824919
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    var a = 2\n    var b = 3\n    var c = 1\n    for _ in 0..<n {\n\
    \        result.append(c)\n        if n % 2 == 0 {\n            a += b\n     \
    \       b += c\n            c += 1\n        } else {\n            a += c\n   \
    \         b += b\n            c += 1\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpm2rikra3/tmpm2rikra3.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abcd16e8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abcd13dfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abcd13df988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abcd13de7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm2rikra3                        0x0000557adf8d95ca <unavailable> + 5578

    5    libc.so.6                          0x00002abcd18d4460 __libc_start_main +
    245

    6    tmpm2rikra3                        0x0000557adf8d9209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824919
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result;\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result;\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpk_mfd3v5.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpk_mfd3v5.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpk_mfd3v5.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpk_mfd3v5.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpk_mfd3v5.swift:34:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpk_mfd3v5.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpk_mfd3v5.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpk_mfd3v5.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpk_mfd3v5.swift:35:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpk_mfd3v5.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659824920
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    switch n {\n    case 0: result.append(0)\n    case 1: result.append(1)\n\
    \    case 2: result.append(3)\n    case 3: result.append(3)\n    case 4: result.append(5)\n\
    \    case 5: result.append(5)\n    case 6: result.append(7)\n    case 7: result.append(7)\n\
    \    case 8: result.append(9)\n    case 9: result.append(9)\n    case 10: result.append(11)\n\
    \    case 11: result.append(11)\n    case 12: result.append(13)\n    case 13:\
    \ result.append(13)\n    case 14: result.append(15)\n    case 15: result.append(15)\n\
    \    case 16: result.append(17)\n    case 17: result.append(17)\n    case 18:\
    \ result.append(19)\n    case 19: result.append(19)\n    case 20: result.append(21)\n\
    \    case 21: result.append(21)\n    case 22: result.append(23)\n    case 23:\
    \ result.append(23)\n    case 24: result.append(25)\n    case 25: result.append(25)\n\
    \    case 26: result.append(27)\n    case 27: result.append(27)\n    case 28:\
    \ result.append(29)\n    case 29: result.append(29)\n    case 30: result.append(31)\n\
    \    case 31: result.append(31)\n    case 32: result.append(33)\n    case 33:\
    \ result.append(33)\n    case 34: result.append(35)\n    case 35: result.append(35)\n\
    \    case 36: result.append(37)\n    case 37: result.append(37)\n    case 38:\
    \ result.append(39)\n    case 39: result.append(39)\n    case 40: result.append(41)\n\
    \    case 41: result.append(41)\n    case 42: result.append(43)\n    case 43:\
    \ result.append(43)\n    case 44: result.append(45)\n    case 45: result.append(45)\n\
    \    case 46: result.append(47)\n    case 47: result.append(47)\n    case 48:\
    \ result.append(49)\n    case 49: result.append(49)\n    case 50: result.append(51)\n\
    \    case 51: result.append(51)\n    case 52: result.append(53)\n    case 53:\
    \ result.append(53)\n    case 54: result.append(55)\n    case 55: result.append(55)\n\
    \    case 56: result.append(57)\n    case 57: result.append(57)\n    case 58:\
    \ result.append(59)\n    case 59: result.append(59)\n    case 60: result.append(61)\n\
    \    case 61: result.append(61)\n    case 62: result.append(63)\n    case 63:\
    \ result.append(63)\n    case 64: result.append(65)\n    case 65: result.append(65)\n\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpe48ra8wv.swift:113:28: error: expected '}' at end of brace statement\n\
    assert(tri(n: 1) == [1, 3])\n                           ^\n/tmp/tmpe48ra8wv.swift:18:27:\
    \ note: to match this opening '{'\nfunc tri(n: Int) -> [Int] {\n             \
    \             ^\n/tmp/tmpe48ra8wv.swift:21:5: error: switch must be exhaustive\n\
    \    switch n {\n    ^\n/tmp/tmpe48ra8wv.swift:21:5: note: do you want to add\
    \ a default clause?\n    switch n {\n    ^\n/tmp/tmpe48ra8wv.swift:92:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824920
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(1)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        result.append(2)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else\
    \ {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp54a8dz8r.swift:39:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp54a8dz8r.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp54a8dz8r.swift:39:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp54a8dz8r.swift:39:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp54a8dz8r.swift:41:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp54a8dz8r.swift:41:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp54a8dz8r.swift:41:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp54a8dz8r.swift:41:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp54a8dz8r.swift:42:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp54a8dz8r.swift:42:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659824921
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(1)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(3)\n        result.append(1)\n        result.append(2)\n\
    \        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    }\n    \n    result.append(3)\n\
    \    result.append(1)\n    result.append(2)\n    result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp6fhki4__.swift:42:20: error: missing argument label 'n:' in call\n\
    \        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n                   ^\n \
    \                  n: \n/tmp/tmp6fhki4__.swift:42:33: error: missing argument\
    \ label 'n:' in call\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  \
    \                              ^\n                                n: \n/tmp/tmp6fhki4__.swift:42:46:\
    \ error: missing argument label 'n:' in call\n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n                                             ^\n        \
    \                                     n: \n/tmp/tmp6fhki4__.swift:48:19: error:\
    \ missing argument label 'contentsOf:' in call\n    result.append(tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1))\n                  ^\n                  contentsOf:\
    \ \n/tmp/tmp6fhki4__.swift:48:23: error: missing argument label 'n:' in call\n\
    \    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n                   \
    \   ^\n                      n: \n/tmp/tmp6fhki4__.swift:48:36: error: missing\
    \ argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                                   ^\n                              \
    \     n: \n/tmp/tmp6fhki4__.swift:48:49: error: missing argument label 'n:' in\
    \ call\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n            \
    \                                    ^\n                                     \
    \           n: \n"
  stdout: ''
  timestamp: 1659824921
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    var a = Int(3)\n    var b = Int(1)\n    var c = Int(2)\n    var\
    \ d = Int(1)\n    for _ in 0..<n {\n        result.append(a)\n        a = b\n\
    \        b = c\n        c = d\n        d = a + b + c\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp9t4fi4m5/tmp9t4fi4m5.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad691027c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad690d1eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad690d1e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad690d1d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9t4fi4m5                        0x000055ad46b195ca <unavailable> + 5578

    5    libc.so.6                          0x00002ad691213460 __libc_start_main +
    245

    6    tmp9t4fi4m5                        0x000055ad46b19209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824921
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        return result\n\
    \    }\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmph_ty60b1.swift:37:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmph_ty60b1.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmph_ty60b1.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmph_ty60b1.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmph_ty60b1.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmph_ty60b1.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmph_ty60b1.swift:39:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmph_ty60b1.swift:39:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmph_ty60b1.swift:40:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmph_ty60b1.swift:40:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659824919
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n    }\n    \n  \
    \  if n == 1 {\n        result.append(1)\n    }\n    \n    if n % 2 == 0 {\n \
    \       result.append(tri(n - 1) + tri(n - 2))\n    }\n    \n    if n % 2 == 1\
    \ {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpatzuuig4.swift:30:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpatzuuig4.swift:30:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpatzuuig4.swift:30:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpatzuuig4.swift:34:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpatzuuig4.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpatzuuig4.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpatzuuig4.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659824921
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 1 {\n        result.append(1)\n        return result;\n\
    \    }\n    if n == 2 {\n        result.append(3)\n        return result;\n  \
    \  }\n    if n == 3 {\n        result.append(3)\n        result.append(2)\n  \
    \      return result;\n    }\n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmphl44xozf.swift:34:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmphl44xozf.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmphl44xozf.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmphl44xozf.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmphl44xozf.swift:36:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmphl44xozf.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmphl44xozf.swift:36:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmphl44xozf.swift:36:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmphl44xozf.swift:37:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmphl44xozf.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659824921
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        return result\n\
    \    }\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmplks7nyt6.swift:37:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmplks7nyt6.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmplks7nyt6.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmplks7nyt6.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmplks7nyt6.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmplks7nyt6.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmplks7nyt6.swift:39:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659824920
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    if n == 1 {\n        result.append(1)\n   \
    \     return result\n    }\n    if n == 2 {\n        result.append(3)\n      \
    \  return result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpqsh2g2sk.swift:34:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpqsh2g2sk.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpqsh2g2sk.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpqsh2g2sk.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpqsh2g2sk.swift:36:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpqsh2g2sk.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpqsh2g2sk.swift:36:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpqsh2g2sk.swift:36:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpqsh2g2sk.swift:37:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpqsh2g2sk.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659824921
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 1 {\n        result.append(1)\n        return result;\n\
    \    }\n    if n == 2 {\n        result.append(3)\n        return result;\n  \
    \  }\n    if n == 3 {\n        result.append(3)\n        result.append(2)\n  \
    \      return result;\n    }\n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpssimhzvz.swift:34:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpssimhzvz.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpssimhzvz.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpssimhzvz.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpssimhzvz.swift:36:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpssimhzvz.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpssimhzvz.swift:36:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpssimhzvz.swift:36:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpssimhzvz.swift:37:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpssimhzvz.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n        "
  stdout: ''
  timestamp: 1659824921
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmp6dyg2euw.swift:38:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp6dyg2euw.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp6dyg2euw.swift:38:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp6dyg2euw.swift:38:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp6dyg2euw.swift:40:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp6dyg2euw.swift:40:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp6dyg2euw.swift:40:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp6dyg2euw.swift:40:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp6dyg2euw.swift:41:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp6dyg2euw.swift:41:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659824921
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(0)\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(0)\n        result.append(1)\n        result.append(2)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(0)\n\
    \        result.append(1)\n        result.append(2)\n        result.append(3)\n\
    \        result.append(4)\n        result.append(5)\n        result.append(6)\n\
    \        result.append(7)\n        result.append(8)\n        result.append(9)\n\
    \        result.append(10)\n        result.append(11)\n        result.append(12)\n\
    \        result.append(13)\n        result.append(14)\n        result.append(15)\n\
    \        result.append(16)\n        result.append(17)\n        result.append(18)\n\
    \        result.append(19)\n        result.append(20)\n        result.append(21)\n\
    \        result.append(22)\n        result.append(23)\n        result.append(24)\n\
    \        result.append(25)\n        result.append(26)\n        result.append(27)\n\
    \        result.append(28)\n        result.append(29)\n        result.append(30)\n\
    \        result.append(31)\n        result.append(32)\n        result.append(33)\n\
    \        result.append(34)\n        result.append(35)\n        result.append(36)\n\
    \        result.append(37)\n        result.append(38)\n        result.append(39)\n\
    \        result.append(40)\n        result.append(41)\n        result.append(42)\n\
    \        result.append(43)\n        result.append(44)\n        result.append(45)\n\
    \        result.append(46)\n        result.append(47)\n        result.append(48)\n\
    \        result.append(49)\n        result.append(50)\n        result.append(51)\n\
    \        result.append(52)\n        result.append(53)\n        result.append(54)\n\
    \        result.append(55)\n        result.append(56)\n        result.append(57)\n\
    \        result.append(58)\n        result.append(59)\n        result.append(60)\n\
    \        result.append(61)\n        result.append(62)\n        result.append(63)\n\
    \        result.append(64)\n        result.append(65)\n        result.append(66)\n\
    \        result.append(67)\n        result.append(68)\n        result.append(69)\n\
    \        result.append(70)\n        result.append(71)\n        result.append(72)\n\
    \        result.append(73)\n        result.append(74)\n        result.append(75)\n\
    \        result.append(76)\n        result.append(77)\n        result.append(78)\n\
    \        result.append(79)\n        result.append(80)\n        result.append(81)\n\
    \        result.append(82)\n        result.append(83)\n        result.append(84)\n\
    \        result.append(85)\n        result.append(86)\n        result.append(87)\n\
    \        result.append(88)\n        result.append(89)\n        result.append(90)\n\
    \        result.append(91)\n        result.append(92)\n        result.append(93)\n\
    \        result.append(94)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp3xzxbt2f.swift:160:28: error: expected '}' at end of brace statement\n\
    assert(tri(n: 1) == [1, 3])\n                           ^\n/tmp/tmp3xzxbt2f.swift:18:27:\
    \ note: to match this opening '{'\nfunc tri(n: Int) -> [Int] {\n             \
    \             ^\n/tmp/tmp3xzxbt2f.swift:139:6: error: operator functions can only\
    \ be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824918
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    var firstThree = [Int]()\n    var secondThree = [Int]()\n   \
    \ var thirdThree = [Int]()\n    var fourthThree = [Int]()\n    var fifthThree\
    \ = [Int]()\n    var sixthThree = [Int]()\n    var seventhThree = [Int]()\n  \
    \  var eighthThree = [Int]()\n    var ninethThree = [Int]()\n    var tenthThree\
    \ = [Int]()\n    var eleventhThree = [Int]()\n    var thirteenthThree = [Int]()\n\
    \    var fourteenthThree = [Int]()\n    var fifteenthThree = [Int]()\n    var\
    \ sixteenthThree = [Int]()\n    var seventeenthThree = [Int]()\n    var eighteenthThree\
    \ = [Int]()\n    var nineteenthThree = [Int]()\n    var twentiethThree = [Int]()\n\
    \    var twentyFirstThree = [Int]()\n    var thirtyFirstThree = [Int]()\n    var\
    \ thirtySecondThree = [Int]()\n    var thirtyThirdThree = [Int]()\n    var thirtyFourthThree\
    \ = [Int]()\n    var thirtyFifthThree = [Int]()\n    var thirtySixthThree = [Int]()\n\
    \    var thirtySeventhThree = [Int]()\n    var thirtyEighthThree = [Int]()\n \
    \   var thirtyNinethThree = [Int]()\n    var thirtyTenthThree = [Int]()\n    var\
    \ thirtyEleventhThree = [Int]()\n    var thirtyThirteenthThree = [Int]()\n   \
    \ var thirtyFourteenthThree = [Int]()\n    var thirtyFifteenthThree = [Int]()\n\
    \    var thirtySixteenthThree = [Int]()\n    var thirtySeventeenthThree = [Int]()\n\
    \    var thirtyEighteenthThree = [Int]()\n    var thirtyNineteenthThree = [Int]()\n\
    \    var thirtyTwentiethThree = [Int]()\n    var thirtyTwentyFirstThree = [Int]()\n\
    \    var thirtyThirtyFirstThree = [Int]()\n    var thirtyThirtySecondThree = [Int]()\n\
    \    var thirtyThirtyThirdThree = [Int]()\n    var thirtyThirtyFourthThree = [Int]()\n\
    \    var thirtyThirtyFifthThree = [Int]()\n    var thirtyThirtySix\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmponxy1s1e.swift:65:9: error: type annotation missing in pattern\n\
    \    var thirtyThirtySix\n        ^\n"
  stdout: ''
  timestamp: 1659824921
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    var firstThree = [Int]()\n    var secondThree = [Int]()\n   \
    \ var thirdThree = [Int]()\n    var fourthThree = [Int]()\n    var fifthThree\
    \ = [Int]()\n    var sixthThree = [Int]()\n    var seventhThree = [Int]()\n  \
    \  var eighthThree = [Int]()\n    var ninethThree = [Int]()\n    var tenthThree\
    \ = [Int]()\n    var eleventhThree = [Int]()\n    var twelfthThree = [Int]()\n\
    \    var thirteenthThree = [Int]()\n    var fourteenthThree = [Int]()\n    var\
    \ fifteenthThree = [Int]()\n    var sixteenthThree = [Int]()\n    var seventeenthThree\
    \ = [Int]()\n    var eighteenthThree = [Int]()\n    var nineteenthThree = [Int]()\n\
    \    var twentiethThree = [Int]()\n    var thirtiethThree = [Int]()\n    var fourtiethThree\
    \ = [Int]()\n    var fiftiethThree = [Int]()\n    var sixtiethThree = [Int]()\n\
    \    var seventiethThree = [Int]()\n    var eightiethThree = [Int]()\n    var\
    \ ninetiethThree = [Int]()\n    var hundredthThree = [Int]()\n    var thousandthThree\
    \ = [Int]()\n    var millionthThree = [Int]()\n    var billionthThree = [Int]()\n\
    \    var trillionthThree = [Int]()\n    var quadrillionthThree = [Int]()\n   \
    \ var quintillionthThree = [Int]()\n    var sextillionthThree = [Int]()\n    var\
    \ septillionthThree = [Int]()\n    var octillionthThree = [Int]()\n    var nonillionthThree\
    \ = [Int]()\n    var decillionthThree = [Int]()\n    var undecillionthThree =\
    \ [Int]()\n    var duodecillionthThree = [Int]()\n    var tredecillionthThree\
    \ = [Int]()\n    var quattuordecillionthThree = [Int]()\n    var quindecillionthThree\
    \ = [Int]()\n    var sexdecillionthThree = [Int]()\n    var septendecillionthThree\
    \ = [Int]()\n    var octodecillionthThree = [Int]()\n    var novemdecillionthThree\
    \ = [Int]()\n    var vigintilli\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpjknvrg8y.swift:68:9: error: type annotation missing in pattern\n\
    \    var vigintilli\n        ^\n"
  stdout: ''
  timestamp: 1659824919
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        return result\n\
    \    }\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmplks7nyt6.swift:37:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmplks7nyt6.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmplks7nyt6.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmplks7nyt6.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmplks7nyt6.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmplks7nyt6.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmplks7nyt6.swift:39:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659824920
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp3ohg75p7.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmp3ohg75p7.swift:32:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmp3ohg75p7.swift:32:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmp3ohg75p7.swift:34:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp3ohg75p7.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp3ohg75p7.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp3ohg75p7.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659824918
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        return result\n\
    \    }\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp80xxkljn.swift:37:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp80xxkljn.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp80xxkljn.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp80xxkljn.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp80xxkljn.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp80xxkljn.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp80xxkljn.swift:39:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp80xxkljn.swift:39:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp80xxkljn.swift:40:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmp80xxkljn.swift:40:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n        "
  stdout: ''
  timestamp: 1659824919
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 0 {\n        result.append(0)\n        return result;\n\
    \    }\n    if n == 1 {\n        result.append(1)\n        return result;\n  \
    \  }\n    if n == 2 {\n        result.append(3)\n        return result;\n    }\n\
    \    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp0qfd1hp7.swift:33:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp0qfd1hp7.swift:33:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp0qfd1hp7.swift:33:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp0qfd1hp7.swift:33:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp0qfd1hp7.swift:35:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmp0qfd1hp7.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmp0qfd1hp7.swift:35:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659824921
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 0 {\n        result.append(0)\n        return result\n\
    \    }\n    if n == 1 {\n        result.append(1)\n        return result\n   \
    \ }\n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpipyjykqr.swift:33:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpipyjykqr.swift:33:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpipyjykqr.swift:33:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpipyjykqr.swift:33:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpipyjykqr.swift:35:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpipyjykqr.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpipyjykqr.swift:35:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpipyjykqr.swift:35:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpipyjykqr.swift:36:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpipyjykqr.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659824919
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        return result\n\
    \    }\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n        result.append(tri(n - 2) + tri(n + 1))\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpduo_79qo.swift:37:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpduo_79qo.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpduo_79qo.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpduo_79qo.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpduo_79qo.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpduo_79qo.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpduo_79qo.swift:39:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpduo_79qo.swift:39:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpduo_79qo.swift:40:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 2) + tri(n + 1))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpduo_79qo.swift:40:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 2)\
    \ + tri(n + 1))\n                          ^\n        "
  stdout: ''
  timestamp: 1659824921
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    var a = 1\n    var b = 2\n    var c = 3\n    for _ in 0..<n {\n\
    \        result.append(a)\n        if n % 2 == 0 {\n            result.append(b)\n\
    \        } else {\n            result.append(c)\n        }\n        a = b\n  \
    \      b = c\n        c = a + b\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmpyetwekxn/tmpyetwekxn.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abd61748c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd6143fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abd6143f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abd6143e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyetwekxn                        0x0000557ec8c895ca <unavailable> + 5578

    5    libc.so.6                          0x00002abd61934460 __libc_start_main +
    245

    6    tmpyetwekxn                        0x0000557ec8c89209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824920
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 0 {\n        result.append(0)\n        return result;\n\
    \    }\n    if n == 1 {\n        result.append(1)\n        return result;\n  \
    \  }\n    if n == 2 {\n        result.append(3)\n        return result;\n    }\n\
    \    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \        result.append(tri(n - 1) + tri(n - 2))\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpmo4p0kkn.swift:33:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpmo4p0kkn.swift:33:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpmo4p0kkn.swift:33:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpmo4p0kkn.swift:33:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpmo4p0kkn.swift:35:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpmo4p0kkn.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpmo4p0kkn.swift:35:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpmo4p0kkn.swift:35:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpmo4p0kkn.swift:36:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpmo4p0kkn.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n        "
  stdout: ''
  timestamp: 1659824921
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    switch n {\n    case 0:\n        result.append(0)\n   \
    \ case 1:\n        result.append(1)\n    case 2:\n        result.append(3)\n \
    \   case 3:\n        result.append(3)\n    case 4:\n        result.append(5)\n\
    \    case 5:\n        result.append(5)\n    case 6:\n        result.append(8)\n\
    \    case 7:\n        result.append(8)\n    case 8:\n        result.append(13)\n\
    \    case 9:\n        result.append(13)\n    case 10:\n        result.append(21)\n\
    \    case 11:\n        result.append(21)\n    case 12:\n        result.append(34)\n\
    \    case 13:\n        result.append(34)\n    case 14:\n        result.append(55)\n\
    \    case 15:\n        result.append(55)\n    case 16:\n        result.append(89)\n\
    \    case 17:\n        result.append(89)\n    case 18:\n        result.append(144)\n\
    \    case 19:\n        result.append(144)\n    case 20:\n        result.append(233)\n\
    \    case 21:\n        result.append(233)\n    case 22:\n        result.append(377)\n\
    \    case 23:\n        result.append(377)\n    case 24:\n        result.append(610)\n\
    \    case 25:\n        result.append(610)\n    case 26:\n        result.append(987)\n\
    \    case 27:\n        result.append(987)\n    case 28:\n        result.append(1597)\n\
    \    case 29:\n        result.append(1597)\n    case 30:\n        result.append(2584)\n\
    \    case 31:\n        result.append(2584)\n    case 32:\n        result.append(4181)\n\
    \    case 33:\n        result.append(4181)\n    case 34:\n        result.append(6765)\n\
    \    case 35:\n        result.append(6765)\n    case 36:\n        result.append(10946)\n\
    \    case 37:\n        result.append(10946)\n    case 38:\n        result.append(17711)\n\
    \    case 39:\n        result.append(17711)\n    case 40:\n        result.append(28657)\n\
    \    case 41:\n        result.append(28657)\n    case 42:\n        result.append(46368)\n\
    \    case 43:\n        result.append(46368)\n    case 44:\n        result.append(75025)\n\
    \    case 45:\n        result.append(75025)\n    case 46:\n        result.append(121393)\n\
    \    case 47:\n        result.append(121393)\n    case 48:\n        result.append(196418)\n\
    \    case 49:\n        result.append(196418)\n    case 50:\n        result.append(317811)\n\
    \    case 51:\n        result.append(317811)\n    case 52:\n        result.append(514229)\n\
    \    case 53:\n        result.append(514229)\n    case 54:\n        result.append(832089)\n\
    \    case 55:\n        result.append(832089)\n    case 56:\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpha6_tbkt.swift:134:5: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n    case 56:\n    ^~~~~~~~\n            \
    \ break\n/tmp/tmpha6_tbkt.swift:159:28: error: expected '}' at end of brace statement\n\
    assert(tri(n: 1) == [1, 3])\n                           ^\n/tmp/tmpha6_tbkt.swift:18:27:\
    \ note: to match this opening '{'\nfunc tri(n: Int) -> [Int] {\n             \
    \             ^\n/tmp/tmpha6_tbkt.swift:21:5: error: switch must be exhaustive\n\
    \    switch n {\n    ^\n/tmp/tmpha6_tbkt.swift:21:5: note: do you want to add\
    \ a default clause?\n    switch n {\n    ^\n/tmp/tmpha6_tbkt.swift:138:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824921
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    switch n {\n    case 0: result.append(0)\n    case 1: result.append(1)\n\
    \    case 2: result.append(3)\n    case 3: result.append(3)\n    case 4: result.append(6)\n\
    \    case 5: result.append(8)\n    case 6: result.append(13)\n    case 7: result.append(21)\n\
    \    case 8: result.append(34)\n    case 9: result.append(55)\n    case 10: result.append(89)\n\
    \    case 11: result.append(144)\n    case 12: result.append(233)\n    case 13:\
    \ result.append(377)\n    case 14: result.append(610)\n    case 15: result.append(987)\n\
    \    case 16: result.append(1597)\n    case 17: result.append(2584)\n    case\
    \ 18: result.append(4181)\n    case 19: result.append(6765)\n    case 20: result.append(10946)\n\
    \    case 21: result.append(17711)\n    case 22: result.append(28657)\n    case\
    \ 23: result.append(46368)\n    case 24: result.append(75025)\n    case 25: result.append(121393)\n\
    \    case 26: result.append(196418)\n    case 27: result.append(317811)\n    case\
    \ 28: result.append(514229)\n    case 29: result.append(832050)\n    case 30:\
    \ result.append(1346269)\n    case 31: result.append(2178309)\n    case 32: result.append(3524578)\n\
    \    case 33: result.append(5702887)\n    case 34: result.append(9227465)\n  \
    \  case 35: result.append(14930352)\n    case 36: result.append(24157817)\n  \
    \  case 37: result.append(39088169)\n    case 38: result.append(63245986)\n  \
    \  case 39: result.append(102334155)\n    case 40: result.append(165580141)\n\
    \    case 41: result.append(267914296)\n    case 42: result.append(433494437)\n\
    \    case 43: result.append(701408733)\n    case 44: result.append(1134903170)\n\
    \    case 45: result.append(1836311903)\n    case 46: result.append(2971215073)\n\
    \    case 47: result.append(4807526970)\n    case 48: result.append(7778742049)\n\
    \    case 49: result.append(12586269025)\n    case 50: result.append(20365011074)\n\
    \    case 51: result.append(32951280099)\n    case 52: result.append(53316291173)\n\
    \    case 53: result.append(86267571289)\n\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmpoc_c9kl9.swift:101:28: error: expected '}' at end of brace statement\n\
    assert(tri(n: 1) == [1, 3])\n                           ^\n/tmp/tmpoc_c9kl9.swift:18:27:\
    \ note: to match this opening '{'\nfunc tri(n: Int) -> [Int] {\n             \
    \             ^\n/tmp/tmpoc_c9kl9.swift:21:5: error: switch must be exhaustive\n\
    \    switch n {\n    ^\n/tmp/tmpoc_c9kl9.swift:21:5: note: do you want to add\
    \ a default clause?\n    switch n {\n    ^\n/tmp/tmpoc_c9kl9.swift:80:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824921
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        return result;\n\
    \    }\n    \n    if n == 1 {\n        result.append(1)\n        return result;\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result;\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpmlwmeyec.swift:37:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpmlwmeyec.swift:37:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpmlwmeyec.swift:37:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpmlwmeyec.swift:39:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpmlwmeyec.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpmlwmeyec.swift:39:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpmlwmeyec.swift:39:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659824921
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n        result.append(tri(n - 2) + tri(n + 1))\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpjihjl54p.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpjihjl54p.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpjihjl54p.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpjihjl54p.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpjihjl54p.swift:34:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpjihjl54p.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpjihjl54p.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpjihjl54p.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpjihjl54p.swift:35:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 2) + tri(n + 1))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpjihjl54p.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 2)\
    \ + tri(n + 1))\n                          ^\n        "
  stdout: ''
  timestamp: 1659824920
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(0)\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(0)\n        result.append(1)\n        result.append(2)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(0)\n\
    \        result.append(1)\n        result.append(2)\n        result.append(3)\n\
    \        result.append(4)\n        result.append(5)\n        result.append(6)\n\
    \        result.append(7)\n        result.append(8)\n        result.append(9)\n\
    \        result.append(10)\n        result.append(11)\n        result.append(12)\n\
    \        result.append(13)\n        result.append(14)\n        result.append(15)\n\
    \        result.append(16)\n        result.append(17)\n        result.append(18)\n\
    \        result.append(19)\n        result.append(20)\n        result.append(21)\n\
    \        result.append(22)\n        result.append(23)\n        result.append(24)\n\
    \        result.append(25)\n        result.append(26)\n        result.append(27)\n\
    \        result.append(28)\n        result.append(29)\n        result.append(30)\n\
    \        result.append(31)\n        result.append(32)\n        result.append(33)\n\
    \        result.append(34)\n        result.append(35)\n        result.append(36)\n\
    \        result.append(37)\n        result.append(38)\n        result.append(39)\n\
    \        result.append(40)\n        result.append(41)\n        result.append(42)\n\
    \        result.append(43)\n        result.append(44)\n        result.append(45)\n\
    \        result.append(46)\n        result.append(47)\n        result.append(48)\n\
    \        result.append(49)\n        result.append(50)\n        result.append(51)\n\
    \        result.append(52)\n        result.append(53)\n        result.append(54)\n\
    \        result.append(55)\n        result.append(56)\n        result.append(57)\n\
    \        result.append(58)\n        result.append(59)\n        result.append(60)\n\
    \        result.append(61)\n        result.append(62)\n        result.append(63)\n\
    \        result.append(64)\n        result.append(65)\n        result.append(66)\n\
    \        result.append(67)\n        result.append(68)\n        result.append(69)\n\
    \        result.append(70)\n        result.append(71)\n        result.append(72)\n\
    \        result.append(73)\n        result.append(74)\n        result.append(75)\n\
    \        result.append(76)\n        result.append(77)\n        result.append(78)\n\
    \        result.append(79)\n        result.append(80)\n        result.append(81)\n\
    \        result.append(82)\n        result.append(83)\n        result.append(84)\n\
    \        result.append(85)\n        result.append(86)\n        result.append(87)\n\
    \        result.append(88)\n        result.append(89)\n        result.append(90)\n\
    \        result.append(91)\n        result.append(92)\n        result.append(93)\n\
    \        result.append(94)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp3xzxbt2f.swift:160:28: error: expected '}' at end of brace statement\n\
    assert(tri(n: 1) == [1, 3])\n                           ^\n/tmp/tmp3xzxbt2f.swift:18:27:\
    \ note: to match this opening '{'\nfunc tri(n: Int) -> [Int] {\n             \
    \             ^\n/tmp/tmp3xzxbt2f.swift:139:6: error: operator functions can only\
    \ be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824918
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n        return result\n    }\n    \n    result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpx2ys2hqa.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpx2ys2hqa.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpx2ys2hqa.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpx2ys2hqa.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpx2ys2hqa.swift:36:19: error: missing argument label\
    \ 'contentsOf:' in call\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \                  ^\n                  contentsOf: \n/tmp/tmpx2ys2hqa.swift:36:23:\
    \ error: missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n                      ^\n                      n: \n/tmp/tmpx2ys2hqa.swift:36:36:\
    \ error: missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n                                   ^\n                 \
    \                  n: \n/tmp/tmpx2ys2hqa.swift:36:49: error: missing argument\
    \ label 'n:' in call\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \                                                ^\n                         \
    \                       n: \n"
  stdout: ''
  timestamp: 1659824918
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmprjizjhzs.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmprjizjhzs.swift:32:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmprjizjhzs.swift:32:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmprjizjhzs.swift:34:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmprjizjhzs.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmprjizjhzs.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmprjizjhzs.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659824919
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result;\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result;\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpmnhomb3z.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpmnhomb3z.swift:32:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpmnhomb3z.swift:32:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpmnhomb3z.swift:34:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpmnhomb3z.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpmnhomb3z.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpmnhomb3z.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659824918
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    if n == 1 {\n        result.append(0)\n   \
    \     return result\n    }\n    if n == 2 {\n        result.append(1)\n      \
    \  result.append(2)\n        return result\n    }\n    if n % 2 == 0 {\n     \
    \   result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n      \
    \  result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n\
    \ - 1) + tri(n - 2))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmpe1hvgj49.swift:35:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpe1hvgj49.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpe1hvgj49.swift:35:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpe1hvgj49.swift:35:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpe1hvgj49.swift:37:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpe1hvgj49.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpe1hvgj49.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpe1hvgj49.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpe1hvgj49.swift:38:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpe1hvgj49.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n        "
  stdout: ''
  timestamp: 1659824919
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n    }\n    \n  \
    \  if n == 1 {\n        result.append(1)\n    }\n    \n    if n == 2 {\n     \
    \   result.append(3)\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpyilnuzgr.swift:34:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpyilnuzgr.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpyilnuzgr.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpyilnuzgr.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659824921
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(1)\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(1)\n\
    \        result.append(3)\n        result.append(3)\n        return result\n \
    \   }\n    \n    if n % 2 == 0 {\n        result.append(1)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpznxe2e5m.swift:176:28: error: expected '}' at end of brace statement\n\
    assert(tri(n: 1) == [1, 3])\n                           ^\n/tmp/tmpznxe2e5m.swift:18:27:\
    \ note: to match this opening '{'\nfunc tri(n: Int) -> [Int] {\n             \
    \             ^\n/tmp/tmpznxe2e5m.swift:155:6: error: operator functions can only\
    \ be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824921
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    guard n >= 0 else {\n        return result\n    }\n   \
    \ \n    if n % 2 == 0 {\n        result.append(3)\n    }\n    \n    if n % 2 ==\
    \ 1 {\n        result.append(1)\n    }\n    \n    for i in 1...n / 2 {\n     \
    \   result.append(result[i-2] + result[i-1])\n    }\n    \n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1c868ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1c8385561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab1c8385286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab1c838513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab1c8384bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab1c8184e83 <unavailable> + 188035

    6    tmpoclbqhxz                        0x000055f42a7e9490 <unavailable> + 9360

    7    tmpoclbqhxz                        0x000055f42a7e853b <unavailable> + 5435

    8    libc.so.6                          0x00002ab1c887a460 __libc_start_main +
    245

    9    tmpoclbqhxz                        0x000055f42a7e8259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824921
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpn2tj2aty.swift:27:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpn2tj2aty.swift:27:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpn2tj2aty.swift:27:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpn2tj2aty.swift:29:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpn2tj2aty.swift:29:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpn2tj2aty.swift:29:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpn2tj2aty.swift:29:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659824919
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        return result;\n\
    \    }\n    \n    if n == 1 {\n        result.append(1)\n        return result;\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result;\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpmf63hgp7.swift:37:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpmf63hgp7.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpmf63hgp7.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpmf63hgp7.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpmf63hgp7.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpmf63hgp7.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmpmf63hgp7.swift:39:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659824918
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    var a = Int(3)\n    var b = Int(1)\n    var c = Int(2)\n    var\
    \ d = Int(1)\n    var temp = 0\n    \n    for _ in 0..<n {\n        temp = a +\
    \ b + c + d\n        a = b\n        b = c\n        c = d\n        d = temp\n \
    \       result.append(temp)\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmp3vxu31xp/tmp3vxu31xp.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba320e24c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba320b1bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba320b1b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba320b1a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3vxu31xp                        0x00005640e8d805ca <unavailable> + 5578

    5    libc.so.6                          0x00002ba321010460 __libc_start_main +
    245

    6    tmp3vxu31xp                        0x00005640e8d80209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824921
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n <= 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    result.append(3)\n    \n    if n % 2 == 0 {\n        result.append(1\
    \ + n / 2)\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpd8yq2pl9.swift:31:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpd8yq2pl9.swift:31:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpd8yq2pl9.swift:31:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpd8yq2pl9.swift:31:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659824921
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(1)\n        result.append(2)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmpn0mjyhha.swift:33:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpn0mjyhha.swift:33:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpn0mjyhha.swift:33:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpn0mjyhha.swift:33:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpn0mjyhha.swift:35:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpn0mjyhha.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpn0mjyhha.swift:35:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpn0mjyhha.swift:35:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpn0mjyhha.swift:36:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpn0mjyhha.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659824921
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    if n == 1 {\n        result.append(0)\n   \
    \     result.append(1)\n        return result\n    }\n    if n == 2 {\n      \
    \  result.append(0)\n        result.append(1)\n        result.append(2)\n    \
    \    return result\n    }\n    if n % 2 == 0 {\n        result.append(0)\n   \
    \     result.append(1)\n        result.append(2)\n        result.append(3)\n \
    \       result.append(4)\n        result.append(5)\n        result.append(6)\n\
    \        result.append(7)\n        result.append(8)\n        result.append(9)\n\
    \        result.append(10)\n        result.append(11)\n        result.append(12)\n\
    \        result.append(13)\n        result.append(14)\n        result.append(15)\n\
    \        result.append(16)\n        result.append(17)\n        result.append(18)\n\
    \        result.append(19)\n        result.append(20)\n        result.append(21)\n\
    \        result.append(22)\n        result.append(23)\n        result.append(24)\n\
    \        result.append(25)\n        result.append(26)\n        result.append(27)\n\
    \        result.append(28)\n        result.append(29)\n        result.append(30)\n\
    \        result.append(31)\n        result.append(32)\n        result.append(33)\n\
    \        result.append(34)\n        result.append(35)\n        result.append(36)\n\
    \        result.append(37)\n        result.append(38)\n        result.append(39)\n\
    \        result.append(40)\n        result.append(41)\n        result.append(42)\n\
    \        result.append(43)\n        result.append(44)\n        result.append(45)\n\
    \        result.append(46)\n        result.append(47)\n        result.append(48)\n\
    \        result.append(49)\n        result.append(50)\n        result.append(51)\n\
    \        result.append(52)\n        result.append(53)\n        result.append(54)\n\
    \        result.append(55)\n        result.append(56)\n        result.append(57)\n\
    \        result.append(58)\n        result.append(59)\n        result.append(60)\n\
    \        result.append(61)\n        result.append(62)\n        result.append(63)\n\
    \        result.append(64)\n        result.append(65)\n        result.append(66)\n\
    \        result.append(67)\n        result.append(68)\n        result.append(69)\n\
    \        result.append(70)\n        result.append(71)\n        result.append(72)\n\
    \        result.append(73)\n        result.append(74)\n        result.append(75)\n\
    \        result.append(76)\n        result.append(77)\n        result.append(78)\n\
    \        result.append(79)\n        result.append(80)\n        result.append(81)\n\
    \        result.append(82)\n        result.append(83)\n        result.append(84)\n\
    \        result.append(85)\n        result.append(86)\n        result.append(87)\n\
    \        result.append(88)\n        result.append(89)\n        result.append(90)\n\
    \        result.append(91)\n        result.append(92)\n        result.append(93)\n\
    \        result.append(94)\n        result.append(95)\n        result.append(\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp2ai904nf.swift:134:1: error: expected expression in list of expressions\n\
    }\n^\n/tmp/tmp2ai904nf.swift:158:28: error: expected '}' at end of brace statement\n\
    assert(tri(n: 1) == [1, 3])\n                           ^\n/tmp/tmp2ai904nf.swift:18:27:\
    \ note: to match this opening '{'\nfunc tri(n: Int) -> [Int] {\n             \
    \             ^\n/tmp/tmp2ai904nf.swift:133:22: error: missing argument for parameter\
    \ #1 in call\n        result.append(\n                     ^\n               \
    \      <#Int#>\nSwift.Array:6:37: note: 'append' declared here\n    @inlinable\
    \ public mutating func append(_ newElement: __owned Element)\n               \
    \                     ^\n/tmp/tmp2ai904nf.swift:137:6: error: operator functions\
    \ can only be declared at global or in type scope\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824919
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    if n == 1 {\n        result.append(0)\n   \
    \     result.append(1)\n        return result\n    }\n    if n == 2 {\n      \
    \  result.append(0)\n        result.append(1)\n        result.append(2)\n    \
    \    return result\n    }\n    if n % 2 == 0 {\n        result.append(0)\n   \
    \     result.append(1)\n        result.append(2)\n        result.append(3)\n \
    \       return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    }\n    result.append(0)\n\
    \    result.append(1)\n    result.append(2)\n    result.append(3)\n    result.append(4)\n\
    \    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpz66yxbe1.swift:41:20: error: missing argument label 'n:' in call\n\
    \        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n                   ^\n \
    \                  n: \n/tmp/tmpz66yxbe1.swift:41:33: error: missing argument\
    \ label 'n:' in call\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  \
    \                              ^\n                                n: \n/tmp/tmpz66yxbe1.swift:41:46:\
    \ error: missing argument label 'n:' in call\n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n                                             ^\n        \
    \                                     n: \n/tmp/tmpz66yxbe1.swift:48:16: error:\
    \ missing argument label 'n:' in call\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n               ^\n               n: \n/tmp/tmpz66yxbe1.swift:48:29:\
    \ error: missing argument label 'n:' in call\n    return tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1) + tri(n + 2)\n                            ^\n              \
    \              n: \n/tmp/tmpz66yxbe1.swift:48:42: error: missing argument label\
    \ 'n:' in call\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n\
    \                                         ^\n                                \
    \         n: \n/tmp/tmpz66yxbe1.swift:48:55: error: missing argument label 'n:'\
    \ in call\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n    \
    \                                                  ^\n                       \
    \                               n: \n"
  stdout: ''
  timestamp: 1659824921
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp6p_eq46c.swift:27:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp6p_eq46c.swift:27:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp6p_eq46c.swift:27:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp6p_eq46c.swift:27:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp6p_eq46c.swift:29:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmp6p_eq46c.swift:29:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmp6p_eq46c.swift:29:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659824921
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp6p_eq46c.swift:27:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp6p_eq46c.swift:27:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp6p_eq46c.swift:27:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp6p_eq46c.swift:27:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp6p_eq46c.swift:29:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmp6p_eq46c.swift:29:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmp6p_eq46c.swift:29:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659824921
