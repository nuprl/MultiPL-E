language: swift
name: HumanEval_57_monotonic
results:
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph72jeoca.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph72jeoca.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph72jeoca.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph72jeoca.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n\
    \    var m = Int64(math.MaxInt64)\n    for ; k >= 0; k-- {\n        if l[i] <\
    \ l[k] {\n            m = l[i]\n            i = k\n        }\n        if l[j]\
    \ > l[k] {\n            m = l[j]\n            j = k\n        }\n    }\n    if\
    \ j > i {\n        return false\n    }\n    if j < i {\n        return true\n\
    \    }\n    return m >= l[i]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpasj1_o0n.swift:14:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for ; k >= 0; k-- {\n    ^   ~~~~~~~~~~~~~\n/tmp/tmpasj1_o0n.swift:13:19:\
    \ error: cannot find 'math' in scope\n    var m = Int64(math.MaxInt64)\n     \
    \             ^~~~\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicImpl(l, l.count)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpgv53hp6c.swift:10:12: error: cannot find 'monotonicImpl' in scope\n\
    \    return monotonicImpl(l, l.count)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph72jeoca.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph72jeoca.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n    }\n    var\
    \ prev = 0\n    var curr = l[0]\n    for var i = 0; i < l.count; i++ {\n     \
    \   if curr < l[i] {\n            return false\n        }\n        if curr > l[i]\
    \ {\n            return true\n        }\n        if prev < l[i] {\n          \
    \  return false\n        }\n        prev = curr\n        curr = l[i]\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp8t2vmlqy.swift:15:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 0; i < l.count; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var monotonic = true\n    for idx, x in l.enumerated()\
    \ {\n        if idx > 0 {\n            if x < l[idx - 1] {\n                monotonic\
    \ = false\n                break\n            }\n        }\n    }\n    return\
    \ monotonic\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmphash804x.swift:11:12: error: expected 'in' after for-each pattern\n\
    \    for idx, x in l.enumerated() {\n           ^\n/tmp/tmphash804x.swift:11:12:\
    \ error: expected Sequence expression for for-each loop\n    for idx, x in l.enumerated()\
    \ {\n           ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph72jeoca.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph72jeoca.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithOptions(l, options: [])\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmppmku84z1.swift:10:12: error: cannot find 'monotonicWithOptions'\
    \ in scope\n    return monotonicWithOptions(l, options: [])\n           ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: -4
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    for x in l {\n        if x > l[i-1] {\n\
    \            return false\n        }\n        i += 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aea70687c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea7037e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aea7037e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aea7037e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aea7037dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aea7017de83 <unavailable> + 188035

    6    tmpw3h4xpkn                        0x000056492d2e9c04 <unavailable> + 7172

    7    tmpw3h4xpkn                        0x000056492d2e944d <unavailable> + 5197

    8    libc.so.6                          0x00002aea70873460 __libc_start_main +
    245

    9    tmpw3h4xpkn                        0x000056492d2e9129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659820599
- exit_code: -4
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n\
    \    var monotonic = true\n    while i < j {\n        if l[i] > l[j] {\n     \
    \       k = j\n        } else {\n            i = i + 1\n        }\n        if\
    \ i < k {\n            j = k\n        } else {\n            monotonic = false\n\
    \        }\n    }\n    return monotonic\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpvtefoifw/tmpvtefoifw.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b45e4c97c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b45e498eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b45e498e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b45e498d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvtefoifw                        0x000055b9bec213b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b45e4e83460 __libc_start_main +
    245

    6    tmpvtefoifw                        0x000055b9bec21019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n\
    \    var m = Int64(0)\n    var n = Int64(0)\n    var o = Int64(0)\n    var p =\
    \ Int64(0)\n    var q = Int64(0)\n    var r = Int64(0)\n    var s = Int64(0)\n\
    \    var t = Int64(0)\n    var u = Int64(0)\n    var v = Int64(0)\n    var w =\
    \ Int64(0)\n    var x = Int64(0)\n    var y = Int64(0)\n    var z = Int64(0)\n\
    \    var a = Int64(0)\n    var b = Int64(0)\n    var c = Int64(0)\n    var d =\
    \ Int64(0)\n    var e = Int64(0)\n    var f = Int64(0)\n    var g = Int64(0)\n\
    \    var h = Int64(0)\n    var i = Int64(0)\n    var j = Int64(0)\n    var k =\
    \ Int64(0)\n    var l = Int64(0)\n    var m = Int64(0)\n    var n = Int64(0)\n\
    \    var o = Int64(0)\n    var p = Int64(0)\n    var q = Int64(0)\n    var r =\
    \ Int64(0)\n    var s = Int64(0)\n    var t = Int64(0)\n    var u = Int64(0)\n\
    \    var v = Int64(0)\n    var w = Int64(0)\n    var x = Int64(0)\n    var y =\
    \ Int64(0)\n    var z = Int64(0)\n    var a = Int64(0)\n    var b = Int64(0)\n\
    \    var c = Int64(0)\n    var d = Int64(0)\n    var e = Int64(0)\n    var f =\
    \ Int64(0)\n    var g = Int64(0)\n    var h = Int64(0)\n    var i = Int64(0)\n\
    \    var j = Int64(0)\n    var k = Int64(0)\n    var l = Int64(0)\n    var m =\
    \ Int64(0)\n    var n = Int64(0)\n    var o = Int64(0)\n    var p = Int64(0)\n\
    \    var q = Int64(0)\n    var r = Int64(0)\n    var s = Int64(0)\n    var t =\
    \ Int64(0)\n    var u = Int64(0)\n    var v = Int64(0)\n    var w = Int64(0)\n\
    \    var x = Int64(0)\n    var y = Int64(0)\n    var z = Int64(0)\n    var a =\
    \ Int64(0)\n    var b = Int64(0)\n    var c = Int64(0)\n    var d = Int64(0)\n\
    \    var e = Int64(0)\n    var f = Int64(0)\n    var g = Int64(0)\n    var h =\
    \ Int64(0)\n    var i = Int64(0)\n    var j = Int64(0)\n    var k = Int64(0)\n\
    \    var l = Int64(0)\n    var m = Int64(0)\n    var n = Int64(0)\n    var o =\
    \ Int64(0)\n    var p = Int64(0)\n    var q = Int64(0)\n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7c7e1_8b.swift:35:9: error: invalid redeclaration of 'i'\n    var\
    \ i = Int64(0)\n        ^\n/tmp/tmp7c7e1_8b.swift:10:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmp7c7e1_8b.swift:36:9: error: invalid\
    \ redeclaration of 'j'\n    var j = Int64(0)\n        ^\n/tmp/tmp7c7e1_8b.swift:11:9:\
    \ note: 'j' previously declared here\n    var j = l.count - 1\n        ^\n/tmp/tmp7c7e1_8b.swift:37:9:\
    \ error: invalid redeclaration of 'k'\n    var k = Int64(0)\n        ^\n/tmp/tmp7c7e1_8b.swift:12:9:\
    \ note: 'k' previously declared here\n    var k = j - 1\n        ^\n/tmp/tmp7c7e1_8b.swift:39:9:\
    \ error: invalid redeclaration of 'm'\n    var m = Int64(0)\n        ^\n/tmp/tmp7c7e1_8b.swift:13:9:\
    \ note: 'm' previously declared here\n    var m = Int64(0)\n        ^\n/tmp/tmp7c7e1_8b.swift:40:9:\
    \ error: invalid redeclaration of 'n'\n    var n = Int64(0)\n        ^\n/tmp/tmp7c7e1_8b.swift:14:9:\
    \ note: 'n' previously declared here\n    var n = Int64(0)\n        ^\n/tmp/tmp7c7e1_8b.swift:41:9:\
    \ error: invalid redeclaration of 'o'\n    var o = Int64(0)\n        ^\n/tmp/tmp7c7e1_8b.swift:15:9:\
    \ note: 'o' previously declared here\n    var o = Int64(0)\n        ^\n/tmp/tmp7c7e1_8b.swift:42:9:\
    \ error: invalid redeclaration of 'p'\n    var p = Int64(0)\n        ^\n/tmp/tmp7c7e1_8b.swift:16:9:\
    \ note: 'p' previously declared here\n    var p = Int64(0)\n        ^\n/tmp/tmp7c7e1_8b.swift:43:9:\
    \ error: invalid redeclaration of 'q'\n    var q = Int64(0)\n        ^\n/tmp/tmp7c7e1_8b.swift:17:9:\
    \ note: 'q' previously declared here\n    var q = Int64(0)\n        ^\n/tmp/tmp7c7e1_8b.swift:44:9:\
    \ error: invalid redeclaration of 'r'\n    var r = Int64(0)\n        ^\n/tmp/tmp7c7e1_8b.swift:18:9:\
    \ note: 'r' previously declared here\n    var r = Int64(0)\n        ^\n/tmp/tmp7c7e1_8b.swift:45:9:\
    \ error: invalid redeclaration of 's'\n    var s = Int64(0)\n        ^\n/tmp/tmp7c7e1_8b.swift:19:9:\
    \ note: 's' previously declared here\n    var s = Int64(0)\n        ^\n/tmp/tmp7c7e1_8b.swift:46:9:\
    \ error: invalid redeclaration of 't'\n    var t = Int64(0)\n        ^\n/tmp/tmp7c7e1_8b.swift:20:9:\
    \ note: 't' previously"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph72jeoca.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph72jeoca.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: -4
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    if l.isEmpty {\n        return true\n    }\n    var prev:\
    \ Int = 0\n    var next: Int = 0\n    var last: Int = 0\n    for idx in l.indices\
    \ {\n        last = idx\n        next = idx\n        if prev < next {\n      \
    \      return false\n        }\n        while next < l.endIndex {\n          \
    \  prev = next\n            next = next + 1\n            if prev < next {\n  \
    \              return false\n            }\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpfvn3ikso/tmpfvn3ikso.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae431bc0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4318b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4318b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4318b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfvn3ikso                        0x00005626b29c7572 <unavailable> + 5490

    5    libc.so.6                          0x00002ae431dac460 __libc_start_main +
    245

    6    tmpfvn3ikso                        0x00005626b29c71d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithOptions([Int](l), nil)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmputhd_33x.swift:10:12: error: cannot find 'monotonicWithOptions'\
    \ in scope\n    return monotonicWithOptions([Int](l), nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmputhd_33x.swift:10:43: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithOptions([Int](l), nil)\n                                      \
    \    ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = l.count\n    var k = j - 1\n  \
    \  var m = j\n    var n = j\n    var o = j\n    var p = j\n    var q = j\n   \
    \ var r = j\n    var s = j\n    var t = j\n    var u = j\n    var v = j\n    var\
    \ w = j\n    var x = j\n    var y = j\n    var z = j\n    var a = j\n    var b\
    \ = j\n    var c = j\n    var d = j\n    var e = j\n    var f = j\n    var g =\
    \ j\n    var h = j\n    var i = j\n    var j = j\n    var k = j\n    var l = j\n\
    \    var m = j\n    var n = j\n    var o = j\n    var p = j\n    var q = j\n \
    \   var r = j\n    var s = j\n    var t = j\n    var u = j\n    var v = j\n  \
    \  var w = j\n    var x = j\n    var y = j\n    var z = j\n    var a = j\n   \
    \ var b = j\n    var c = j\n    var d = j\n    var e = j\n    var f = j\n    var\
    \ g = j\n    var h = j\n    var i = j\n    var j = j\n    var k = j\n    var l\
    \ = j\n    var m = j\n    var n = j\n    var o = j\n    var p = j\n    var q =\
    \ j\n    var r = j\n    var s = j\n    var t = j\n    var u = j\n    var v = j\n\
    \    var w = j\n    var x = j\n    var y = j\n    var z = j\n    var a = j\n \
    \   var b = j\n    var c = j\n    var d = j\n    var e = j\n    var f = j\n  \
    \  var g = j\n    var h = j\n    var i = j\n    var j = j\n    var k = j\n   \
    \ var l = j\n    var m = j\n    var n = j\n    var o = j\n    var p = j\n    var\
    \ q = j\n    var r = j\n    var s = j\n    var t = j\n    var u = j\n    var v\
    \ = j\n    var w = j\n    var x = j\n    var y = j\n    var z = j\n    var a =\
    \ j\n    var b = j\n    var c = j\n    var d = j\n    var e = j\n    var f = j\n\
    \    var g = j\n    var h = j\n    var i = j\n    var j = j\n    var k = j\n \
    \   var l = j\n    var m = j\n    var n = j\n    var o = j\n    var p = j\n  \
    \  var q = j\n    var r = j\n    var s = j\n    var t = j\n    var u = j\n   \
    \ var v = j\n    var w = j\n    var x = j\n    var y = j\n    var z = j\n    var\
    \ a = j\n    var b = j\n    var c = j\n    var d = j\n    var e = j\n    var f\
    \ = j\n    var g = j\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp9i29hu2s.swift:35:9: error: invalid redeclaration of 'i'\n    var\
    \ i = j\n        ^\n/tmp/tmp9i29hu2s.swift:10:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmp9i29hu2s.swift:36:9: error: invalid\
    \ redeclaration of 'j'\n    var j = j\n        ^\n/tmp/tmp9i29hu2s.swift:11:9:\
    \ note: 'j' previously declared here\n    var j = l.count\n        ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: -4
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    for x in l {\n        if x < l[i] {\n \
    \           return false\n        }\n        if x > l[i] {\n            return\
    \ true\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpwjqgtmn7/tmpwjqgtmn7.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ae01b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4adfeaab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4adfeaa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4adfea97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwjqgtmn7                        0x0000560fc66cd64e <unavailable> + 5710

    5    libc.so.6                          0x00002b4ae039f460 __libc_start_main +
    245

    6    tmpwjqgtmn7                        0x0000560fc66cd129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph72jeoca.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph72jeoca.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph72jeoca.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph72jeoca.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n    }\n    var\
    \ i = 0\n    var j = l.count - 1\n    var k = j - 1\n    var m = Int64(l.count)\n\
    \    var n = Int64(l.count)\n    var x = Int64(l.count)\n    var y = Int64(l.count)\n\
    \    var z = Int64(l.count)\n    var w = Int64(l.count)\n    var a = Int64(l.count)\n\
    \    var b = Int64(l.count)\n    var c = Int64(l.count)\n    var d = Int64(l.count)\n\
    \    var e = Int64(l.count)\n    var f = Int64(l.count)\n    var g = Int64(l.count)\n\
    \    var h = Int64(l.count)\n    var i = Int64(l.count)\n    var j = Int64(l.count)\n\
    \    var k = Int64(l.count)\n    var l = Int64(l.count)\n    var m = Int64(l.count)\n\
    \    var n = Int64(l.count)\n    var o = Int64(l.count)\n    var p = Int64(l.count)\n\
    \    var q = Int64(l.count)\n    var r = Int64(l.count)\n    var s = Int64(l.count)\n\
    \    var t = Int64(l.count)\n    var u = Int64(l.count)\n    var v = Int64(l.count)\n\
    \    var w = Int64(l.count)\n    var x = Int64(l.count)\n    var y = Int64(l.count)\n\
    \    var z = Int64(l.count)\n    var a = Int64(l.count)\n    var b = Int64(l.count)\n\
    \    var c = Int64(l.count)\n    var d = Int64(l.count)\n    var e = Int64(l.count)\n\
    \    var f = Int64(l.count)\n    var g = Int64(l.count)\n    var h = Int64(l.count)\n\
    \    var i = Int64(l.count)\n    var j = Int64(l.count)\n    var k = Int64(l.count)\n\
    \    var l = Int64(l.count)\n    var m = Int64(l.count)\n    var n = Int64(l.count)\n\
    \    var o = Int64(l.count)\n    var p = Int64(l.count)\n    var q = Int64(l.count)\n\
    \    var r = Int64(l.count)\n    var s = Int64(l.count)\n    var t = Int64(l.count)\n\
    \    var u = Int64(l.count)\n    var v = Int64(l.count)\n    var w = Int64(l.count)\n\
    \    var x = Int64(l.count)\n    var y = Int64(l.count)\n    var z = Int64(l.count)\n\
    \    var a = Int64(l.count)\n    var b = Int64(l.count)\n    var c = Int64(l.count)\n\
    \    var d = Int64(l.count)\n    var e = Int64(l.count)\n    var f = Int64(l.count)\n\
    \    var g = Int64(l.count)\n    var h = Int64(l.count)\n    var i = Int64(l.count)\n\
    \    var j = Int64(l.count)\n    var k = Int64(l.count)\n    var l = Int64(\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpqg3hiz2g.swift:86:1: error: expected expression in list of expressions\n\
    }\n^\n/tmp/tmpqg3hiz2g.swift:30:9: error: invalid redeclaration of 'i'\n    var\
    \ i = Int64(l.count)\n        ^\n/tmp/tmpqg3hiz2g.swift:13:9: note: 'i' previously\
    \ declared here\n    var i = 0\n        ^\n/tmp/tmpqg3hiz2g.swift:31:9: error:\
    \ invalid redeclaration of 'j'\n    var j = Int64(l.count)\n        ^\n/tmp/tmpqg3hiz2g.swift:14:9:\
    \ note: 'j' previously declared here\n    var j = l.count - 1\n        ^\n/tmp/tmpqg3hiz2g.swift:32:9:\
    \ error: invalid redeclaration of 'k'\n    var k = Int64(l.count)\n        ^\n\
    /tmp/tmpqg3hiz2g.swift:15:9: note: 'k' previously declared here\n    var k = j\
    \ - 1\n        ^\n/tmp/tmpqg3hiz2g.swift:34:21: error: value of type 'Int64' has\
    \ no member 'count'\n    var m = Int64(l.count)\n                  ~ ^~~~~\n/tmp/tmpqg3hiz2g.swift:35:21:\
    \ error: value of type 'Int64' has no member 'count'\n    var n = Int64(l.count)\n\
    \                  ~ ^~~~~\n/tmp/tmpqg3hiz2g.swift:36:21: error: value of type\
    \ 'Int64' has no member 'count'\n    var o = Int64(l.count)\n                \
    \  ~ ^~~~~\n/tmp/tmpqg3hiz2g.swift:37:21: error: value of type 'Int64' has no\
    \ member 'count'\n    var p = Int64(l.count)\n                  ~ ^~~~~\n/tmp/tmpqg3hiz2g.swift:38:21:\
    \ error: value of type 'Int64' has no member 'count'\n    var q = Int64(l.count)\n\
    \                  ~ ^~~~~\n/tmp/tmpqg3hiz2g.swift:39:21: error: value of type\
    \ 'Int64' has no member 'count'\n    var r = Int64(l.count)\n                \
    \  ~ ^~~~~\n/tmp/tmpqg3hiz2g.swift:40:21: error: value of type 'Int64' has no\
    \ member 'count'\n    var s = Int64(l.count)\n                  ~ ^~~~~\n/tmp/tmpqg3hiz2g.swift:41:21:\
    \ error: value of type 'Int64' has no member 'count'\n    var t = Int64(l.count)\n\
    \                  ~ ^~~~~\n/tmp/tmpqg3hiz2g.swift:42:21: error: value of type\
    \ 'Int64' has no member 'count'\n    var u = Int64(l.count)\n                \
    \  ~ ^~~~~\n/tmp/tmpqg3hiz2g.swift:43:21: error: value of type 'Int64' has no\
    \ member 'count'\n    var v = Int64(l.count)\n                  ~ ^~~~~\n/tmp/tmpqg3hiz2g.swift:44:21:\
    \ error: valu"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithOptions([Int](l), nil)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmputhd_33x.swift:10:12: error: cannot find 'monotonicWithOptions'\
    \ in scope\n    return monotonicWithOptions([Int](l), nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmputhd_33x.swift:10:43: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithOptions([Int](l), nil)\n                                      \
    \    ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph72jeoca.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph72jeoca.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: -1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    let n = l.count\n    if n < 2 {\n        return true\n\
    \    }\n    if n == 2 {\n        return l[0] > l[1]\n    }\n    var i = 0\n  \
    \  var j = n - 1\n    var k = j - 1\n    var m = n - 1\n    while i < m && j >=\
    \ 0 {\n        if l[i] > l[j] {\n            i += 1\n        } else if l[i] <\
    \ l[j] {\n            j -= 1\n        } else {\n            k += 1\n        }\n\
    \        if k >= 0 {\n            m = k\n        }\n    }\n    return m == n\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659820604
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph72jeoca.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph72jeoca.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    if l.isEmpty {\n        return true\n    }\n    let l\
    \ = l.sorted()\n    if l.first > l.last {\n        return false\n    }\n    var\
    \ prev: Int?\n    var cur: Int?\n    for cur in l.prefix(l.count - 1) {\n    \
    \    if cur == nil {\n            return false\n        }\n        if prev ==\
    \ nil {\n            prev = cur\n            continue\n        }\n        if cur!\
    \ > prev! {\n            return false\n        }\n        prev = cur\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp6_ggm0ra.swift:14:16: error: binary operator '>' cannot be applied\
    \ to two 'Int?' operands\n    if l.first > l.last {\n       ~~~~~~~ ^ ~~~~~~\n\
    /tmp/tmp6_ggm0ra.swift:14:16: note: overloads for '>' exist with these partially\
    \ matching parameter lists: (Int, Int)\n    if l.first > l.last {\n          \
    \     ^\n/tmp/tmp6_ggm0ra.swift:20:16: warning: comparing non-optional value of\
    \ type 'Int' to 'nil' always returns false\n        if cur == nil {\n        \
    \   ~~~ ^  ~~~\n/tmp/tmp6_ggm0ra.swift:27:15: error: cannot force unwrap value\
    \ of non-optional type 'Int'\n        if cur! > prev! {\n           ~~~^\n   \
    \           \n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicImpl(l, l.count)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpgv53hp6c.swift:10:12: error: cannot find 'monotonicImpl' in scope\n\
    \    return monotonicImpl(l, l.count)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: -4
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    let sorted = l.sorted()\n    return sorted.first == sorted.last\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpn6u5u0ji/tmpn6u5u0ji.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b72fb597c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b72fb28eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b72fb28e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b72fb28d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn6u5u0ji                        0x0000564fb5cb04e2 <unavailable> + 5346

    5    libc.so.6                          0x00002b72fb783460 __libc_start_main +
    245

    6    tmpn6u5u0ji                        0x0000564fb5cb0149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph72jeoca.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph72jeoca.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = l.count\n    var k = 0\n    var\
    \ l2 = l.count\n    var m = Int64(0)\n    var n = Int64(0)\n    var o = Int64(0)\n\
    \    var p = Int64(0)\n    var q = Int64(0)\n    var r = Int64(0)\n    var s =\
    \ Int64(0)\n    var t = Int64(0)\n    var u = Int64(0)\n    var v = Int64(0)\n\
    \    var w = Int64(0)\n    var x = Int64(0)\n    var y = Int64(0)\n    var z =\
    \ Int64(0)\n    var a = Int64(0)\n    var b = Int64(0)\n    var c = Int64(0)\n\
    \    var d = Int64(0)\n    var e = Int64(0)\n    var f = Int64(0)\n    var g =\
    \ Int64(0)\n    var h = Int64(0)\n    var i = Int64(0)\n    var j = Int64(0)\n\
    \    var k = Int64(0)\n    var l = Int64(0)\n    var m = Int64(0)\n    var n =\
    \ Int64(0)\n    var o = Int64(0)\n    var p = Int64(0)\n    var q = Int64(0)\n\
    \    var r = Int64(0)\n    var s = Int64(0)\n    var t = Int64(0)\n    var u =\
    \ Int64(0)\n    var v = Int64(0)\n    var w = Int64(0)\n    var x = Int64(0)\n\
    \    var y = Int64(0)\n    var z = Int64(0)\n    var a = Int64(0)\n    var b =\
    \ Int64(0)\n    var c = Int64(0)\n    var d = Int64(0)\n    var e = Int64(0)\n\
    \    var f = Int64(0)\n    var g = Int64(0)\n    var h = Int64(0)\n    var i =\
    \ Int64(0)\n    var j = Int64(0)\n    var k = Int64(0)\n    var l = Int64(0)\n\
    \    var m = Int64(0)\n    var n = Int64(0)\n    var o = Int64(0)\n    var p =\
    \ Int64(0)\n    var q = Int64(0)\n    var r = Int64(0)\n    var s = Int64(0)\n\
    \    var t = Int64(0)\n    var u = Int64(0)\n    var v = Int64(0)\n    var w =\
    \ Int64(0)\n    var x = Int64(0)\n    var y = Int64(0)\n    var z = Int64(0)\n\
    \    var a = Int64(0)\n    var b = Int64(0)\n    var c = Int64(0)\n    var d =\
    \ Int64(0)\n    var e = Int64(0)\n    var f = Int64(0)\n    var g = Int64(0)\n\
    \    var h = Int64(0)\n    var i = Int64(0)\n    var j = Int64(0)\n    var k =\
    \ Int64(0)\n    var l = Int64(0)\n    var m = Int64(0)\n    var n = Int64(0)\n\
    \    var o = Int64(0)\n    var p = Int64(0)\n    var q = \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmprmx83f86.swift:96:12: error: expected initial value after '='\n\
    \    var q = \n           ^\n/tmp/tmprmx83f86.swift:36:9: error: invalid redeclaration\
    \ of 'i'\n    var i = Int64(0)\n        ^\n/tmp/tmprmx83f86.swift:10:9: note:\
    \ 'i' previously declared here\n    var i = 0\n        ^\n/tmp/tmprmx83f86.swift:37:9:\
    \ error: invalid redeclaration of 'j'\n    var j = Int64(0)\n        ^\n/tmp/tmprmx83f86.swift:11:9:\
    \ note: 'j' previously declared here\n    var j = l.count\n        ^\n/tmp/tmprmx83f86.swift:38:9:\
    \ error: invalid redeclaration of 'k'\n    var k = Int64(0)\n        ^\n/tmp/tmprmx83f86.swift:12:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmprmx83f86.swift:40:9:\
    \ error: invalid redeclaration of 'm'\n    var m = Int64(0)\n        ^\n/tmp/tmprmx83f86.swift:14:9:\
    \ note: 'm' previously declared here\n    var m = Int64(0)\n        ^\n/tmp/tmprmx83f86.swift:41:9:\
    \ error: invalid redeclaration of 'n'\n    var n = Int64(0)\n        ^\n/tmp/tmprmx83f86.swift:15:9:\
    \ note: 'n' previously declared here\n    var n = Int64(0)\n        ^\n/tmp/tmprmx83f86.swift:42:9:\
    \ error: invalid redeclaration of 'o'\n    var o = Int64(0)\n        ^\n/tmp/tmprmx83f86.swift:16:9:\
    \ note: 'o' previously declared here\n    var o = Int64(0)\n        ^\n/tmp/tmprmx83f86.swift:43:9:\
    \ error: invalid redeclaration of 'p'\n    var p = Int64(0)\n        ^\n/tmp/tmprmx83f86.swift:17:9:\
    \ note: 'p' previously declared here\n    var p = Int64(0)\n        ^\n/tmp/tmprmx83f86.swift:44:9:\
    \ error: invalid redeclaration of 'q'\n    var q = Int64(0)\n        ^\n/tmp/tmprmx83f86.swift:18:9:\
    \ note: 'q' previously declared here\n    var q = Int64(0)\n        ^\n/tmp/tmprmx83f86.swift:45:9:\
    \ error: invalid redeclaration of 'r'\n    var r = Int64(0)\n        ^\n/tmp/tmprmx83f86.swift:19:9:\
    \ note: 'r' previously declared here\n    var r = Int64(0)\n        ^\n/tmp/tmprmx83f86.swift:46:9:\
    \ error: invalid redeclaration of 's'\n    var s = Int64(0)\n        ^\n/tmp/tmprmx83f86.swift:20:9:\
    \ note: 's' previously declared here\n    var s = Int64(0)\n        ^\n/tmp/tmprmx83f86.swift:47:9:\
    \ error: invalid redeclaration"
  stdout: ''
  timestamp: 1659820599
- exit_code: -4
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    for x in l {\n        if x > l[i] {\n \
    \           return false\n        }\n        i += 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpva1gbxrq/tmpva1gbxrq.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0cfb6e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0cfb3d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0cfb3d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0cfb3d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpva1gbxrq                        0x0000561d5169f64e <unavailable> + 5710

    5    libc.so.6                          0x00002b0cfb8cd460 __libc_start_main +
    245

    6    tmpva1gbxrq                        0x0000561d5169f129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph72jeoca.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph72jeoca.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph72jeoca.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph72jeoca.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph72jeoca.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph72jeoca.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicImpl(l)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2,\
    \ 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpldrkf6e4.swift:10:12: error: cannot find 'monotonicImpl' in scope\n\
    \    return monotonicImpl(l)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph72jeoca.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph72jeoca.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph72jeoca.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph72jeoca.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph72jeoca.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph72jeoca.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph72jeoca.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph72jeoca.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: -4
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var monotonic = true\n    for x in l {\n        if x <\
    \ l[0] {\n            monotonic = false\n            break\n        }\n    }\n\
    \    return monotonic\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmp9tafqm46/tmp9tafqm46.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb53802c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb534f9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb534f9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb534f87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9tafqm46                        0x000055644109764e <unavailable> + 5710

    5    libc.so.6                          0x00002abb539ee460 __libc_start_main +
    245

    6    tmp9tafqm46                        0x0000556441097129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659820599
- exit_code: -4
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    for x in l {\n        if i > 0 {\n    \
    \        if x < l[i-1] {\n                return false\n            }\n      \
    \  }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2,\
    \ 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpud10htsx/tmpud10htsx.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae0471a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae046e99b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae046e99988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae046e987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpud10htsx                        0x0000563cdab62731 <unavailable> + 5937

    5    libc.so.6                          0x00002ae04738e460 __libc_start_main +
    245

    6    tmpud10htsx                        0x0000563cdab62129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659820599
- exit_code: -4
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var monotonic = true\n    for idx in 0..<l.count {\n \
    \       if l[idx] < l[idx-1] {\n            monotonic = false\n            break\n\
    \        }\n    }\n    return monotonic\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b83a2e75c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83a2b6c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b83a2b6c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b83a2b6c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b83a2b6bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b83a296be83 <unavailable> + 188035

    6    tmpawwfa9pa                        0x0000560de4333cf6 <unavailable> + 7414

    7    tmpawwfa9pa                        0x0000560de43334cd <unavailable> + 5325

    8    libc.so.6                          0x00002b83a3061460 __libc_start_main +
    245

    9    tmpawwfa9pa                        0x0000560de43331a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithOptions([Int](l), nil)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmputhd_33x.swift:10:12: error: cannot find 'monotonicWithOptions'\
    \ in scope\n    return monotonicWithOptions([Int](l), nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmputhd_33x.swift:10:43: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithOptions([Int](l), nil)\n                                      \
    \    ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicImpl(l, l.count)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpgv53hp6c.swift:10:12: error: cannot find 'monotonicImpl' in scope\n\
    \    return monotonicImpl(l, l.count)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicImpl(l, l.count, 0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp6z331_kz.swift:10:12: error: cannot find 'monotonicImpl' in scope\n\
    \    return monotonicImpl(l, l.count, 0)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, ContextualLoad())\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpnje_q6i5.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, ContextualLoad())\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpnje_q6i5.swift:10:36: error: cannot find 'ContextualLoad' in scope\n \
    \   return monotonicWithContext(l, ContextualLoad())\n                       \
    \            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: -4
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n\
    \    var monotonic = true\n    while i < j {\n        if l[i] < l[j] {\n     \
    \       i += 1\n        } else if l[i] > l[j] {\n            j -= 1\n        }\
    \ else {\n            if l[i] < l[k] {\n                monotonic = false\n  \
    \              break\n            } else if l[i] > l[k] {\n                k +=\
    \ 1\n            } else {\n                i += 1\n                j -= 1\n  \
    \              k += 1\n            }\n        }\n    }\n    return monotonic\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmp2etgvlis/tmp2etgvlis.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6e72a79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6e72770b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6e72770988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6e7276f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2etgvlis                        0x00005630f550953e <unavailable> + 5438

    5    libc.so.6                          0x00002b6e72c65460 __libc_start_main +
    245

    6    tmp2etgvlis                        0x00005630f5509019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph72jeoca.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph72jeoca.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: -4
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    for x in l {\n        if i > 0 {\n    \
    \        if x < l[i-1] {\n                return false\n            }\n      \
    \  }\n        i = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2,\
    \ 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmp5_dkoytb/tmp5_dkoytb.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b003d1acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b003cea3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b003cea3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b003cea27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5_dkoytb                        0x0000558bcf0ff731 <unavailable> + 5937

    5    libc.so.6                          0x00002b003d398460 __libc_start_main +
    245

    6    tmp5_dkoytb                        0x0000558bcf0ff129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph72jeoca.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph72jeoca.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicImpl(l)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2,\
    \ 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpldrkf6e4.swift:10:12: error: cannot find 'monotonicImpl' in scope\n\
    \    return monotonicImpl(l)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph72jeoca.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph72jeoca.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph72jeoca.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph72jeoca.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph72jeoca.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph72jeoca.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n\
    \    var m = Int64(0)\n    var n = Int64(0)\n    var o = Int64(0)\n    var p =\
    \ Int64(0)\n    var q = Int64(0)\n    var r = Int64(0)\n    var s = Int64(0)\n\
    \    var t = Int64(0)\n    var u = Int64(0)\n    var v = Int64(0)\n    var w =\
    \ Int64(0)\n    var x = Int64(0)\n    var y = Int64(0)\n    var z = Int64(0)\n\
    \    var a = Int64(0)\n    var b = Int64(0)\n    var c = Int64(0)\n    var d =\
    \ Int64(0)\n    var e = Int64(0)\n    var f = Int64(0)\n    var g = Int64(0)\n\
    \    var h = Int64(0)\n    var i = Int64(0)\n    var j = Int64(0)\n    var k =\
    \ Int64(0)\n    var l = Int64(0)\n    var m = Int64(0)\n    var n = Int64(0)\n\
    \    var o = Int64(0)\n    var p = Int64(0)\n    var q = Int64(0)\n    var r =\
    \ Int64(0)\n    var s = Int64(0)\n    var t = Int64(0)\n    var u = Int64(0)\n\
    \    var v = Int64(0)\n    var w = Int64(0)\n    var x = Int64(0)\n    var y =\
    \ Int64(0)\n    var z = Int64(0)\n    var a = Int64(0)\n    var b = Int64(0)\n\
    \    var c = Int64(0)\n    var d = Int64(0)\n    var e = Int64(0)\n    var f =\
    \ Int64(0)\n    var g = Int64(0)\n    var h = Int64(0)\n    var i = Int64(0)\n\
    \    var j = Int64(0)\n    var k = Int64(0)\n    var l = Int64(0)\n    var m =\
    \ Int64(0)\n    var n = Int64(0)\n    var o = Int64(0)\n    var p = Int64(0)\n\
    \    var q = Int64(0)\n    var r = Int64(0)\n    var s = Int64(0)\n    var t =\
    \ Int64(0)\n    var u = Int64(0)\n    var v = Int64(0)\n    var w = Int64(0)\n\
    \    var x = Int64(0)\n    var y = Int64(0)\n    var z = Int64(0)\n    var a =\
    \ Int64(0)\n    var b = Int64(0)\n    var c = Int64(0)\n    var d = Int64(0)\n\
    \    var e = Int64(0)\n    var f = Int64(0)\n    var g = Int64(0)\n    var h =\
    \ Int64(0)\n    var i = Int64(0)\n    var j = Int64(0)\n    var k = Int64(0)\n\
    \    var l = Int64(0)\n    var m = Int64(0)\n    var n = Int64(0)\n    var o =\
    \ Int64(0)\n    var p = Int64(0)\n    var q = Int64(0)\n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7c7e1_8b.swift:35:9: error: invalid redeclaration of 'i'\n    var\
    \ i = Int64(0)\n        ^\n/tmp/tmp7c7e1_8b.swift:10:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmp7c7e1_8b.swift:36:9: error: invalid\
    \ redeclaration of 'j'\n    var j = Int64(0)\n        ^\n/tmp/tmp7c7e1_8b.swift:11:9:\
    \ note: 'j' previously declared here\n    var j = l.count - 1\n        ^\n/tmp/tmp7c7e1_8b.swift:37:9:\
    \ error: invalid redeclaration of 'k'\n    var k = Int64(0)\n        ^\n/tmp/tmp7c7e1_8b.swift:12:9:\
    \ note: 'k' previously declared here\n    var k = j - 1\n        ^\n/tmp/tmp7c7e1_8b.swift:39:9:\
    \ error: invalid redeclaration of 'm'\n    var m = Int64(0)\n        ^\n/tmp/tmp7c7e1_8b.swift:13:9:\
    \ note: 'm' previously declared here\n    var m = Int64(0)\n        ^\n/tmp/tmp7c7e1_8b.swift:40:9:\
    \ error: invalid redeclaration of 'n'\n    var n = Int64(0)\n        ^\n/tmp/tmp7c7e1_8b.swift:14:9:\
    \ note: 'n' previously declared here\n    var n = Int64(0)\n        ^\n/tmp/tmp7c7e1_8b.swift:41:9:\
    \ error: invalid redeclaration of 'o'\n    var o = Int64(0)\n        ^\n/tmp/tmp7c7e1_8b.swift:15:9:\
    \ note: 'o' previously declared here\n    var o = Int64(0)\n        ^\n/tmp/tmp7c7e1_8b.swift:42:9:\
    \ error: invalid redeclaration of 'p'\n    var p = Int64(0)\n        ^\n/tmp/tmp7c7e1_8b.swift:16:9:\
    \ note: 'p' previously declared here\n    var p = Int64(0)\n        ^\n/tmp/tmp7c7e1_8b.swift:43:9:\
    \ error: invalid redeclaration of 'q'\n    var q = Int64(0)\n        ^\n/tmp/tmp7c7e1_8b.swift:17:9:\
    \ note: 'q' previously declared here\n    var q = Int64(0)\n        ^\n/tmp/tmp7c7e1_8b.swift:44:9:\
    \ error: invalid redeclaration of 'r'\n    var r = Int64(0)\n        ^\n/tmp/tmp7c7e1_8b.swift:18:9:\
    \ note: 'r' previously declared here\n    var r = Int64(0)\n        ^\n/tmp/tmp7c7e1_8b.swift:45:9:\
    \ error: invalid redeclaration of 's'\n    var s = Int64(0)\n        ^\n/tmp/tmp7c7e1_8b.swift:19:9:\
    \ note: 's' previously declared here\n    var s = Int64(0)\n        ^\n/tmp/tmp7c7e1_8b.swift:46:9:\
    \ error: invalid redeclaration of 't'\n    var t = Int64(0)\n        ^\n/tmp/tmp7c7e1_8b.swift:20:9:\
    \ note: 't' previously"
  stdout: ''
  timestamp: 1659820599
- exit_code: -4
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    for v in l {\n        if v < l[i-1] {\n\
    \            return false\n        }\n        i += 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b72919d9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b72916d0561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b72916d0286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b72916d013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b72916cfbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b72914cfe83 <unavailable> + 188035

    6    tmpicinmkbe                        0x000055b09c85ec08 <unavailable> + 7176

    7    tmpicinmkbe                        0x000055b09c85e44d <unavailable> + 5197

    8    libc.so.6                          0x00002b7291bc5460 __libc_start_main +
    245

    9    tmpicinmkbe                        0x000055b09c85e129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph72jeoca.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph72jeoca.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph72jeoca.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph72jeoca.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithOptions([Int](l), options: [])\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpd16crunl.swift:10:12: error: cannot find 'monotonicWithOptions'\
    \ in scope\n    return monotonicWithOptions([Int](l), options: [])\n         \
    \  ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph72jeoca.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph72jeoca.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonic(l, isIncreasing: true)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpxa_2c5m1.swift:10:39: error: extra argument 'isIncreasing' in call\n\
    \    return monotonic(l, isIncreasing: true)\n                    ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph72jeoca.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph72jeoca.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph72jeoca.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph72jeoca.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph72jeoca.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph72jeoca.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: -4
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    let n = l.count\n    if n < 2 {\n        return true\n\
    \    }\n    if n == 2 {\n        return l[0] > l[1]\n    }\n    var left = 0\n\
    \    var right = n - 1\n    var middle = n / 2\n    var leftIsSmaller = true\n\
    \    var rightIsSmaller = true\n    while left < middle && right >= middle {\n\
    \        if l[left] > l[right] {\n            leftIsSmaller = false\n        }\n\
    \        if l[right] > l[left] {\n            rightIsSmaller = false\n       \
    \ }\n        left += 1\n        right -= 1\n    }\n    if left >= middle {\n \
    \       return leftIsSmaller\n    }\n    if right <= middle {\n        return\
    \ rightIsSmaller\n    }\n    return l[middle] > l[middle - 1]\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmp67x4vf0t/tmp67x4vf0t.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae5db5c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae5db2beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae5db2be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5db2bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp67x4vf0t                        0x000055aa6d4396c1 <unavailable> + 5825

    5    libc.so.6                          0x00002ae5db7b3460 __libc_start_main +
    245

    6    tmp67x4vf0t                        0x000055aa6d4390b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicImpl(l)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2,\
    \ 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpldrkf6e4.swift:10:12: error: cannot find 'monotonicImpl' in scope\n\
    \    return monotonicImpl(l)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithOptions(l, options: .MatchStrictly)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpwadpwj9n.swift:10:12: error: cannot find 'monotonicWithOptions'\
    \ in scope\n    return monotonicWithOptions(l, options: .MatchStrictly)\n    \
    \       ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpwadpwj9n.swift:10:46: error: cannot infer\
    \ contextual base in reference to member 'MatchStrictly'\n    return monotonicWithOptions(l,\
    \ options: .MatchStrictly)\n                                            ~^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonic(l, isIncreasing: true)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpxa_2c5m1.swift:10:39: error: extra argument 'isIncreasing' in call\n\
    \    return monotonic(l, isIncreasing: true)\n                    ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithOptions([Int](l), nil)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmputhd_33x.swift:10:12: error: cannot find 'monotonicWithOptions'\
    \ in scope\n    return monotonicWithOptions([Int](l), nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmputhd_33x.swift:10:43: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithOptions([Int](l), nil)\n                                      \
    \    ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph72jeoca.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph72jeoca.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: -4
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    if l.isEmpty {\n        return true\n    }\n    var prev\
    \ = 0\n    for x in l {\n        if prev < x {\n            return false\n   \
    \     }\n        prev = x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmphvkpp4k6/tmphvkpp4k6.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ce9921c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ce9618b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ce9618988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ce96177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphvkpp4k6                        0x00005583fdb9d4c2 <unavailable> + 5314

    5    libc.so.6                          0x00002b8ce9b0d460 __libc_start_main +
    245

    6    tmphvkpp4k6                        0x00005583fdb9d129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicImpl(l)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2,\
    \ 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpldrkf6e4.swift:10:12: error: cannot find 'monotonicImpl' in scope\n\
    \    return monotonicImpl(l)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph72jeoca.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph72jeoca.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n\
    \    var m = Int64(l.count)\n    var n = Int64(l.count)\n    var o = Int64(l.count)\n\
    \    var p = Int64(l.count)\n    var q = Int64(l.count)\n    var r = Int64(l.count)\n\
    \    var s = Int64(l.count)\n    var t = Int64(l.count)\n    var u = Int64(l.count)\n\
    \    var v = Int64(l.count)\n    var w = Int64(l.count)\n    var x = Int64(l.count)\n\
    \    var y = Int64(l.count)\n    var z = Int64(l.count)\n    var a = Int64(l.count)\n\
    \    var b = Int64(l.count)\n    var c = Int64(l.count)\n    var d = Int64(l.count)\n\
    \    var e = Int64(l.count)\n    var f = Int64(l.count)\n    var g = Int64(l.count)\n\
    \    var h = Int64(l.count)\n    var i = Int64(l.count)\n    var j = Int64(l.count)\n\
    \    var k = Int64(l.count)\n    var l = Int64(l.count)\n    var m = Int64(l.count)\n\
    \    var n = Int64(l.count)\n    var o = Int64(l.count)\n    var p = Int64(l.count)\n\
    \    var q = Int64(l.count)\n    var r = Int64(l.count)\n    var s = Int64(l.count)\n\
    \    var t = Int64(l.count)\n    var u = Int64(l.count)\n    var v = Int64(l.count)\n\
    \    var w = Int64(l.count)\n    var x = Int64(l.count)\n    var y = Int64(l.count)\n\
    \    var z = Int64(l.count)\n    var a = Int64(l.count)\n    var b = Int64(l.count)\n\
    \    var c = Int64(l.count)\n    var d = Int64(l.count)\n    var e = Int64(l.count)\n\
    \    var f = Int64(l.count)\n    var g = Int64(l.count)\n    var h = Int64(l.count)\n\
    \    var i = Int64(l.count)\n    var j = Int64(l.count)\n    var k = Int64(l.count)\n\
    \    var l = Int64(l.count)\n    var m = Int64(l.count)\n    var n = Int64(l.count)\n\
    \    var o = Int64(l.count)\n    var p = Int64(l.count)\n    var q = Int64(l.count)\n\
    \    var r = Int64(l.count)\n    var s = Int64(l.count)\n    var t = Int64(l.count)\n\
    \    var u = Int64(l.count)\n    var v = Int64(l.count)\n    var w = Int64(l.count)\n\
    \    var x = Int64(l.count)\n    var y = Int64(l.count)\n    var z = Int64(l.count)\n\
    \    var a = Int64(l.count)\n    var b = Int64(l.count)\n    var c = Int64(l.count)\n\
    \    var d = Int64(l.count)\n    var e = Int64(l.count)\n    var \n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpe3777upv.swift:84:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpe3777upv.swift:35:9: error: invalid redeclaration of 'i'\n    var\
    \ i = Int64(l.count)\n        ^\n/tmp/tmpe3777upv.swift:10:9: note: 'i' previously\
    \ declared here\n    var i = 0\n        ^\n/tmp/tmpe3777upv.swift:36:9: error:\
    \ invalid redeclaration of 'j'\n    var j = Int64(l.count)\n        ^\n/tmp/tmpe3777upv.swift:11:9:\
    \ note: 'j' previously declared here\n    var j = l.count - 1\n        ^\n/tmp/tmpe3777upv.swift:37:9:\
    \ error: invalid redeclaration of 'k'\n    var k = Int64(l.count)\n        ^\n\
    /tmp/tmpe3777upv.swift:12:9: note: 'k' previously declared here\n    var k = j\
    \ - 1\n        ^\n/tmp/tmpe3777upv.swift:39:21: error: value of type 'Int64' has\
    \ no member 'count'\n    var m = Int64(l.count)\n                  ~ ^~~~~\n/tmp/tmpe3777upv.swift:40:21:\
    \ error: value of type 'Int64' has no member 'count'\n    var n = Int64(l.count)\n\
    \                  ~ ^~~~~\n/tmp/tmpe3777upv.swift:41:21: error: value of type\
    \ 'Int64' has no member 'count'\n    var o = Int64(l.count)\n                \
    \  ~ ^~~~~\n/tmp/tmpe3777upv.swift:42:21: error: value of type 'Int64' has no\
    \ member 'count'\n    var p = Int64(l.count)\n                  ~ ^~~~~\n/tmp/tmpe3777upv.swift:43:21:\
    \ error: value of type 'Int64' has no member 'count'\n    var q = Int64(l.count)\n\
    \                  ~ ^~~~~\n/tmp/tmpe3777upv.swift:44:21: error: value of type\
    \ 'Int64' has no member 'count'\n    var r = Int64(l.count)\n                \
    \  ~ ^~~~~\n/tmp/tmpe3777upv.swift:45:21: error: value of type 'Int64' has no\
    \ member 'count'\n    var s = Int64(l.count)\n                  ~ ^~~~~\n/tmp/tmpe3777upv.swift:46:21:\
    \ error: value of type 'Int64' has no member 'count'\n    var t = Int64(l.count)\n\
    \                  ~ ^~~~~\n/tmp/tmpe3777upv.swift:47:21: error: value of type\
    \ 'Int64' has no member 'count'\n    var u = Int64(l.count)\n                \
    \  ~ ^~~~~\n/tmp/tmpe3777upv.swift:48:21: error: value of type 'Int64' has no\
    \ member 'count'\n    var v = Int64(l.count)\n                  ~ ^~~~~\n/tmp/tmpe3777upv.swift:49:21:\
    \ error: value of type 'I"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicImpl(l, l, 0)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpf6ksd983.swift:10:12: error: cannot find 'monotonicImpl' in scope\n\
    \    return monotonicImpl(l, l, 0)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = l.count\n    var k = j - 1\n  \
    \  var m = j\n    var n = j\n    var o = j\n    var p = j\n    var q = j\n   \
    \ var r = j\n    var s = j\n    var t = j\n    var u = j\n    var v = j\n    var\
    \ w = j\n    var x = j\n    var y = j\n    var z = j\n    var a = j\n    var b\
    \ = j\n    var c = j\n    var d = j\n    var e = j\n    var f = j\n    var g =\
    \ j\n    var h = j\n    var i = j\n    var j = j\n    var k = j\n    var l = j\n\
    \    var m = j\n    var n = j\n    var o = j\n    var p = j\n    var q = j\n \
    \   var r = j\n    var s = j\n    var t = j\n    var u = j\n    var v = j\n  \
    \  var w = j\n    var x = j\n    var y = j\n    var z = j\n    var a = j\n   \
    \ var b = j\n    var c = j\n    var d = j\n    var e = j\n    var f = j\n    var\
    \ g = j\n    var h = j\n    var i = j\n    var j = j\n    var k = j\n    var l\
    \ = j\n    var m = j\n    var n = j\n    var o = j\n    var p = j\n    var q =\
    \ j\n    var r = j\n    var s = j\n    var t = j\n    var u = j\n    var v = j\n\
    \    var w = j\n    var x = j\n    var y = j\n    var z = j\n    var a = j\n \
    \   var b = j\n    var c = j\n    var d = j\n    var e = j\n    var f = j\n  \
    \  var g = j\n    var h = j\n    var i = j\n    var j = j\n    var k = j\n   \
    \ var l = j\n    var m = j\n    var n = j\n    var o = j\n    var p = j\n    var\
    \ q = j\n    var r = j\n    var s = j\n    var t = j\n    var u = j\n    var v\
    \ = j\n    var w = j\n    var x = j\n    var y = j\n    var z = j\n    var a =\
    \ j\n    var b = j\n    var c = j\n    var d = j\n    var e = j\n    var f = j\n\
    \    var g = j\n    var h = j\n    var i = j\n    var j = j\n    var k = j\n \
    \   var l = j\n    var m = j\n    var n = j\n    var o = j\n    var p = j\n  \
    \  var q = j\n    var r = j\n    var s = j\n    var t = j\n    var u = j\n   \
    \ var v = j\n    var w = j\n    var x = j\n    var y = j\n    var z = j\n    var\
    \ a = j\n    var b = j\n    var c = j\n    var d = j\n    var e = j\n    var f\
    \ = j\n    var g = j\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp9i29hu2s.swift:35:9: error: invalid redeclaration of 'i'\n    var\
    \ i = j\n        ^\n/tmp/tmp9i29hu2s.swift:10:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmp9i29hu2s.swift:36:9: error: invalid\
    \ redeclaration of 'j'\n    var j = j\n        ^\n/tmp/tmp9i29hu2s.swift:11:9:\
    \ note: 'j' previously declared here\n    var j = l.count\n        ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, ContextualLoad())\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpnje_q6i5.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, ContextualLoad())\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpnje_q6i5.swift:10:36: error: cannot find 'ContextualLoad' in scope\n \
    \   return monotonicWithContext(l, ContextualLoad())\n                       \
    \            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: -4
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n\
    \    while i < j {\n        if l[i] < l[j] {\n            i += 1\n        } else\
    \ if l[i] > l[j] {\n            j -= 1\n        } else {\n            return true\n\
    \        }\n        if i == k {\n            return false\n        }\n       \
    \ if l[i] < l[k] {\n            k += 1\n        }\n    }\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae28ae5cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae28ab53561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae28ab53286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae28ab5313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae28ab52bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae28a952e83 <unavailable> + 188035

    6    tmp3nmt930t                        0x000055794b962b85 <unavailable> + 7045

    7    tmp3nmt930t                        0x000055794b96233d <unavailable> + 4925

    8    libc.so.6                          0x00002ae28b048460 __libc_start_main +
    245

    9    tmp3nmt930t                        0x000055794b962019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonic(l, l.count)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpohwtm_r9.swift:10:27: error: extra argument in call\n    return\
    \ monotonic(l, l.count)\n                    ~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    let sorted = l.sorted()\n    return sorted.first >= sorted.last\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpmgz2rkmv.swift:11:25: error: binary operator '>=' cannot be applied\
    \ to two 'Int?' operands\n    return sorted.first >= sorted.last\n           ~~~~~~~~~~~~\
    \ ^  ~~~~~~~~~~~\n/tmp/tmpmgz2rkmv.swift:11:25: note: overloads for '>=' exist\
    \ with these partially matching parameter lists: (Int, Int)\n    return sorted.first\
    \ >= sorted.last\n                        ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicImpl(l)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2,\
    \ 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpldrkf6e4.swift:10:12: error: cannot find 'monotonicImpl' in scope\n\
    \    return monotonicImpl(l)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: -4
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n\
    \    while i < j {\n        if l[i] < l[j] {\n            i += 1\n        } else\
    \ if l[i] > l[j] {\n            j -= 1\n        } else {\n            return true\n\
    \        }\n        if i < k {\n            k = j\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4,\
    \ 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmp_ubddj9i/tmp_ubddj9i.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b88782d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8877fc7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8877fc7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8877fc67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_ubddj9i                        0x00005604a3a6c3b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b88784bc460 __libc_start_main +
    245

    6    tmp_ubddj9i                        0x00005604a3a6c019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659820600
- exit_code: -4
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n\
    \    while i < j {\n        if l[i] < l[j] {\n            i += 1\n        } else\
    \ if l[i] > l[j] {\n            j -= 1\n        } else {\n            i += 1\n\
    \            j -= 1\n        }\n        if i < k {\n            k = i\n      \
    \  }\n    }\n    return j >= i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmptjs5czng/tmptjs5czng.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b718f7cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b718f4c4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b718f4c4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b718f4c37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptjs5czng                        0x00005598d31d053e <unavailable> + 5438

    5    libc.so.6                          0x00002b718f9b9460 __libc_start_main +
    245

    6    tmptjs5czng                        0x00005598d31d0019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, ContextualLoad())\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpnje_q6i5.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, ContextualLoad())\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpnje_q6i5.swift:10:36: error: cannot find 'ContextualLoad' in scope\n \
    \   return monotonicWithContext(l, ContextualLoad())\n                       \
    \            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var monotonic = true\n    for idx, val in\n        l.enumerate().reverse().enumerate().reverse()\
    \ {\n        if val < l[idx - 1] {\n            monotonic = false\n          \
    \  break\n        }\n    }\n    return monotonic\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpqm9ay9jo.swift:11:12: error: expected 'in' after for-each pattern\n\
    \    for idx, val in\n           ^\n/tmp/tmpqm9ay9jo.swift:11:12: error: expected\
    \ Sequence expression for for-each loop\n    for idx, val in\n           ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph72jeoca.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph72jeoca.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: -4
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    for v in l {\n        if v < l[i-1] {\n\
    \            return false\n        }\n        i += 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b72919d9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b72916d0561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b72916d0286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b72916d013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b72916cfbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b72914cfe83 <unavailable> + 188035

    6    tmpicinmkbe                        0x000055b09c85ec08 <unavailable> + 7176

    7    tmpicinmkbe                        0x000055b09c85e44d <unavailable> + 5197

    8    libc.so.6                          0x00002b7291bc5460 __libc_start_main +
    245

    9    tmpicinmkbe                        0x000055b09c85e129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    if l.isEmpty() {\n        return true\n    }\n    var\
    \ left = 0\n    var right = l.count - 1\n    var mid = 0\n    var leftIsSmaller\
    \ = true\n    var rightIsSmaller = true\n    var leftIsLarger = true\n    var\
    \ rightIsLarger = true\n    var leftIsLargerOrEqual = true\n    var rightIsLargerOrEqual\
    \ = true\n    var leftIsGreater = true\n    var rightIsGreater = true\n    while\
    \ left < right {\n        mid = left + (right - left) / 2\n        if l[mid] <\
    \ l[left] {\n            leftIsSmaller = false\n        } else {\n           \
    \ rightIsSmaller = false\n        }\n        if l[mid] > l[right] {\n        \
    \    rightIsSmaller = false\n        } else {\n            leftIsSmaller = true\n\
    \        }\n        if l[mid] < l[left] {\n            leftIsLarger = false\n\
    \        } else {\n            rightIsLarger = false\n        }\n        if l[mid]\
    \ > l[right] {\n            rightIsLarger = false\n        } else {\n        \
    \    leftIsLarger = true\n        }\n        if l[mid] < l[left] {\n         \
    \   leftIsLargerOrEqual = false\n        } else {\n            rightIsLargerOrEqual\
    \ = false\n        }\n        if l[mid] > l[right] {\n            rightIsLargerOrEqual\
    \ = false\n        } else {\n            leftIsLargerOrEqual = true\n        }\n\
    \        if l[mid] > l[left] {\n            leftIsGreater = false\n        } else\
    \ {\n            rightIsGreater = false\n        }\n        if l[mid] < l[right]\
    \ {\n            rightIsGreater = false\n        } else {\n            leftIsGreater\
    \ = true\n        }\n        if leftIsSmaller && rightIsSmaller {\n          \
    \  return true\n        } else if leftIsLarger && rightIsLarger {\n          \
    \  return true\n        } else if leftIsLargerOrEqual && rightIsLargerOrEqual\
    \ {\n            return true\n        } else if leftIsGreater && rightIsGreater\
    \ {\n            return true\n        }\n        left = mid\n        right = mid\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpih66eydm.swift:10:10: error: cannot call value of non-function\
    \ type 'Bool'\n    if l.isEmpty() {\n         ^      ~~\n                \n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = 0\n  \
    \  var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n   \
    \ var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var\
    \ v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var A\
    \ = 0\n    var B = 0\n    var C = 0\n    var D = 0\n    var E = 0\n    var F =\
    \ 0\n    var G = 0\n    var H = 0\n    var I = 0\n    var J = 0\n    var K = 0\n\
    \    var L = 0\n    var M = 0\n    var N = 0\n    var O = 0\n    var P = 0\n \
    \   var Q = 0\n    var R = 0\n    var S = 0\n    var T = 0\n    var U = 0\n  \
    \  var V = 0\n    var W = 0\n    var X = 0\n    var Y = 0\n    var Z = 0\n   \
    \ var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var\
    \ _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _\
    \ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ =\
    \ 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n\
    \    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n \
    \   var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n  \
    \  var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n   \
    \ var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var\
    \ _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _\
    \ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ =\
    \ 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n\
    \    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n \
    \   var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n  \
    \  var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n   \
    \ var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var\
    \ _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _\
    \ = 0\n    var _ = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmphkw3zuzr.swift:10:9: warning: initialization of variable 'i' was\
    \ never used; consider replacing with assignment to '_' or removing it\n    var\
    \ i = 0\n    ~~~~^\n    _\n/tmp/tmphkw3zuzr.swift:11:9: warning: initialization\
    \ of variable 'j' was never used; consider replacing with assignment to '_' or\
    \ removing it\n    var j = l.count - 1\n    ~~~~^\n    _\n/tmp/tmphkw3zuzr.swift:12:9:\
    \ warning: initialization of variable 'k' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var k = 0\n    ~~~~^\n    _\n/tmp/tmphkw3zuzr.swift:13:9:\
    \ warning: initialization of variable 'l' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var l = 0\n    ~~~~^\n    _\n/tmp/tmphkw3zuzr.swift:14:9:\
    \ warning: initialization of variable 'm' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var m = 0\n    ~~~~^\n    _\n/tmp/tmphkw3zuzr.swift:15:9:\
    \ warning: initialization of variable 'n' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var n = 0\n    ~~~~^\n    _\n/tmp/tmphkw3zuzr.swift:16:9:\
    \ warning: initialization of variable 'o' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var o = 0\n    ~~~~^\n    _\n/tmp/tmphkw3zuzr.swift:17:9:\
    \ warning: initialization of variable 'p' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var p = 0\n    ~~~~^\n    _\n/tmp/tmphkw3zuzr.swift:18:9:\
    \ warning: initialization of variable 'q' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var q = 0\n    ~~~~^\n    _\n/tmp/tmphkw3zuzr.swift:19:9:\
    \ warning: initialization of variable 'r' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var r = 0\n    ~~~~^\n    _\n/tmp/tmphkw3zuzr.swift:20:9:\
    \ warning: initialization of variable 's' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var s = 0\n    ~~~~^\n    _\n/tmp/tmphkw3zuzr.swift:21:9:\
    \ warning: initialization of variable 't' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    "
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithOptions(l, options: [])\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmppmku84z1.swift:10:12: error: cannot find 'monotonicWithOptions'\
    \ in scope\n    return monotonicWithOptions(l, options: [])\n           ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph72jeoca.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph72jeoca.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicImpl(l, l.count)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpgv53hp6c.swift:10:12: error: cannot find 'monotonicImpl' in scope\n\
    \    return monotonicImpl(l, l.count)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph72jeoca.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph72jeoca.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithOptions([Int](l), nil)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmputhd_33x.swift:10:12: error: cannot find 'monotonicWithOptions'\
    \ in scope\n    return monotonicWithOptions([Int](l), nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmputhd_33x.swift:10:43: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithOptions([Int](l), nil)\n                                      \
    \    ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph72jeoca.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph72jeoca.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph72jeoca.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph72jeoca.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n\
    \    var m = Int64(math.MaxInt64)\n    for ; j < k; j = k {\n        if l[j] >\
    \ l[k] {\n            m = l[j]\n        } else {\n            m = l[k]\n     \
    \   }\n        if m > l[i] {\n            i = j\n        }\n        k = j - 1\n\
    \    }\n    if l[j] < l[k] {\n        m = l[j]\n    } else {\n        m = l[k]\n\
    \    }\n    return m > l[i]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp2ftd5hec.swift:14:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for ; j < k; j = k {\n    ^   ~~~~~~~~~~~~~~\n/tmp/tmp2ftd5hec.swift:13:19:\
    \ error: cannot find 'math' in scope\n    var m = Int64(math.MaxInt64)\n     \
    \             ^~~~\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph72jeoca.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph72jeoca.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph72jeoca.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph72jeoca.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph72jeoca.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph72jeoca.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: -1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    let n = l.count\n    if n < 2 {\n        return true\n\
    \    }\n    var i = 0\n    var j = n - 1\n    var k = 0\n    while i < n && j\
    \ < n {\n        if l[i] < l[j] {\n            i += 1\n        } else if l[i]\
    \ > l[j] {\n            j -= 1\n        } else {\n            k += 1\n       \
    \ }\n    }\n    return k == n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659820605
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph72jeoca.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph72jeoca.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: -4
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    if l.isEmpty {\n        return true\n    }\n    if l.count\
    \ == 1 {\n        return true\n    }\n    if l.count == 2 {\n        return l[0]\
    \ < l[1]\n    }\n    var last = 0\n    var next = 1\n    for idx in 0..<l.count\
    \ {\n        if l[idx] > l[next] {\n            last = idx\n        } else {\n\
    \            next = idx + 1\n        }\n    }\n    return l[last] < l[next]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b098df6bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b098dc62561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b098dc62286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b098dc6213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b098dc61bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b098da61e83 <unavailable> + 188035

    6    tmpslkds0ni                        0x00005589ebcc3f01 <unavailable> + 7937

    7    tmpslkds0ni                        0x00005589ebcc355d <unavailable> + 5469

    8    libc.so.6                          0x00002b098e157460 __libc_start_main +
    245

    9    tmpslkds0ni                        0x00005589ebcc3239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659820600
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph72jeoca.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph72jeoca.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicImpl(l)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2,\
    \ 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpldrkf6e4.swift:10:12: error: cannot find 'monotonicImpl' in scope\n\
    \    return monotonicImpl(l)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicImpl(l)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2,\
    \ 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpldrkf6e4.swift:10:12: error: cannot find 'monotonicImpl' in scope\n\
    \    return monotonicImpl(l)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph72jeoca.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph72jeoca.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph72jeoca.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph72jeoca.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, ContextualLoad())\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpnje_q6i5.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, ContextualLoad())\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpnje_q6i5.swift:10:36: error: cannot find 'ContextualLoad' in scope\n \
    \   return monotonicWithContext(l, ContextualLoad())\n                       \
    \            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicImpl(l)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2,\
    \ 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpldrkf6e4.swift:10:12: error: cannot find 'monotonicImpl' in scope\n\
    \    return monotonicImpl(l)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithOptions([Int](l), options: [])\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpd16crunl.swift:10:12: error: cannot find 'monotonicWithOptions'\
    \ in scope\n    return monotonicWithOptions([Int](l), options: [])\n         \
    \  ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicImpl(l, l.count)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpgv53hp6c.swift:10:12: error: cannot find 'monotonicImpl' in scope\n\
    \    return monotonicImpl(l, l.count)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph72jeoca.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph72jeoca.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: -4
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    for v in l {\n        if v < l[i] {\n \
    \           return false\n        }\n        if v > l[i] {\n            return\
    \ true\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmp4lfq7mc8/tmp4lfq7mc8.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b0cd4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b09cbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b09cb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b09ca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4lfq7mc8                        0x000055e7ee68764e <unavailable> + 5710

    5    libc.so.6                          0x00002b42b0ec0460 __libc_start_main +
    245

    6    tmp4lfq7mc8                        0x000055e7ee687129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659820600
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var monotonic = true\n    for i := 0; i < len(l); i++\
    \ {\n        if l[i] < l[i-1] {\n            monotonic = false\n            break\n\
    \        }\n    }\n    return monotonic\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp9__s_4_g.swift:11:12: error: expected type\n    for i := 0; i <\
    \ len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp9__s_4_g.swift:11:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++\
    \ {\n           ^\n/tmp/tmp9__s_4_g.swift:11:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithOptions([Int](l), nil)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmputhd_33x.swift:10:12: error: cannot find 'monotonicWithOptions'\
    \ in scope\n    return monotonicWithOptions([Int](l), nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmputhd_33x.swift:10:43: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithOptions([Int](l), nil)\n                                      \
    \    ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, ContextualLoad())\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpnje_q6i5.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, ContextualLoad())\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpnje_q6i5.swift:10:36: error: cannot find 'ContextualLoad' in scope\n \
    \   return monotonicWithContext(l, ContextualLoad())\n                       \
    \            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: -4
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    for v in l {\n        if v < l[i-1] {\n\
    \            return false\n        }\n        i += 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b72919d9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b72916d0561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b72916d0286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b72916d013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b72916cfbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b72914cfe83 <unavailable> + 188035

    6    tmpicinmkbe                        0x000055b09c85ec08 <unavailable> + 7176

    7    tmpicinmkbe                        0x000055b09c85e44d <unavailable> + 5197

    8    libc.so.6                          0x00002b7291bc5460 __libc_start_main +
    245

    9    tmpicinmkbe                        0x000055b09c85e129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    let n = l.count\n    if n < 2 {\n        return true\n\
    \    }\n    if n == 2 {\n        return l[0] > l[1]\n    }\n    let mut i = n\
    \ - 1\n    let mut j = n - 1\n    let mut k = n - 1\n    while i >= 0 {\n    \
    \    if l[i] > l[j] {\n            k = i\n        } else {\n            j = i\n\
    \        }\n        i -= 1\n    }\n    while j >= 0 {\n        if l[j] > l[k]\
    \ {\n            i = j\n        } else {\n            k = j\n        }\n     \
    \   j -= 1\n    }\n    return l[i] > l[k]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2,\
    \ 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpxecq68zd.swift:17:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut i = n -\
    \ 1\n            ^\n/tmp/tmpxecq68zd.swift:17:13: note: join the identifiers together\n\
    \    let mut i = n - 1\n        ~~~~^\n        muti\n/tmp/tmpxecq68zd.swift:17:13:\
    \ note: join the identifiers together with camel-case\n    let mut i = n - 1\n\
    \        ~~~~^\n        mutI\n/tmp/tmpxecq68zd.swift:18:13: error: found an unexpected\
    \ second identifier in constant declaration; is there an accidental break?\n \
    \   let mut j = n - 1\n            ^\n/tmp/tmpxecq68zd.swift:18:13: note: join\
    \ the identifiers together\n    let mut j = n - 1\n        ~~~~^\n        mutj\n\
    /tmp/tmpxecq68zd.swift:18:13: note: join the identifiers together with camel-case\n\
    \    let mut j = n - 1\n        ~~~~^\n        mutJ\n/tmp/tmpxecq68zd.swift:19:13:\
    \ error: found an unexpected second identifier in constant declaration; is there\
    \ an accidental break?\n    let mut k = n - 1\n            ^\n/tmp/tmpxecq68zd.swift:19:13:\
    \ note: join the identifiers together\n    let mut k = n - 1\n        ~~~~^\n\
    \        mutk\n/tmp/tmpxecq68zd.swift:19:13: note: join the identifiers together\
    \ with camel-case\n    let mut k = n - 1\n        ~~~~^\n        mutK\n/tmp/tmpxecq68zd.swift:18:9:\
    \ error: invalid redeclaration of 'mut'\n    let mut j = n - 1\n        ^\n/tmp/tmpxecq68zd.swift:17:9:\
    \ note: 'mut' previously declared here\n    let mut i = n - 1\n        ^\n/tmp/tmpxecq68zd.swift:19:9:\
    \ error: invalid redeclaration of 'mut'\n    let mut k = n - 1\n        ^\n/tmp/tmpxecq68zd.swift:17:9:\
    \ note: 'mut' previously declared here\n    let mut i = n - 1\n        ^\n/tmp/tmpxecq68zd.swift:20:11:\
    \ error: cannot find 'i' in scope\n    while i >= 0 {\n          ^\n/tmp/tmpxecq68zd.swift:21:14:\
    \ error: cannot find 'i' in scope\n        if l[i] > l[j] {\n             ^\n\
    /tmp/tmpxecq68zd.swift:21:21: error: cannot find 'j' in scope\n        if l[i]\
    \ > l[j] {\n                    ^\n/tmp/tmpxecq68zd.swift:22:13: error: cannot\
    \ find 'k' in scope\n            k = i\n            ^\n/tmp/tmpxecq68zd.swi"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    let len = l.count\n    if len == 0 {\n        return true\n\
    \    }\n    if len == 1 {\n        return l[0] > l[0]\n    }\n    if len == 2\
    \ {\n        return l[0] > l[1]\n    }\n    if len == 3 {\n        return l[0]\
    \ > l[1] && l[1] > l[2]\n    }\n    if len == 4 {\n        return l[0] > l[1]\
    \ && l[1] > l[2] && l[2] > l[3]\n    }\n    if len == 5 {\n        return l[0]\
    \ > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] > l[4]\n    }\n    if len == 6\
    \ {\n        return l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] > l[4] &&\
    \ l[4] > l[5]\n    }\n    if len == 7 {\n        return l[0] > l[1] && l[1] >\
    \ l[2] && l[2] > l[3] && l[3] > l[4] && l[4] > l[5] && l[5] > l[6]\n    }\n  \
    \  if len == 8 {\n        return l[0] > l[1] && l[1] > l[2] && l[2] > l[3] &&\
    \ l[3] > l[4] && l[4] > l[5] && l[5] > l[6] && l[6] > l[7]\n    }\n    if len\
    \ == 9 {\n        return l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] > l[4]\
    \ && l[4] > l[5] && l[5] > l[6] && l[6] > l[7] && l[7] > l[8]\n    }\n    if len\
    \ == 10 {\n        return l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] >\
    \ l[4] && l[4] > l[5] && l[5] > l[6] && l[6] > l[7] && l[7] > l[8] && l[8] > l[9]\n\
    \    }\n    if len == 11 {\n        return l[0] > l[1] && l[1] > l[2] && l[2]\
    \ > l[3] && l[3] > l[4] && l[4] > l[5] && l[5] > l[6] && l[6] > l[7] && l[7] >\
    \ l[8] && l[8] > l[9] && l[9] > l[10]\n    }\n    if len == 12 {\n        return\
    \ l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] > l[4] && l[4] > l[5] && l[5]\
    \ > l[6] && l[6] > l[7] && l[7] > l[8] && l[8] > l[9] && l[9] > l[10] && l[10\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpv8uwobly.swift:49:1: error: expected ']' in expression list\n}\n\
    ^\n/tmp/tmpv8uwobly.swift:48:168: note: to match this opening '['\n        return\
    \ l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] > l[4] && l[4] > l[5] && l[5]\
    \ > l[6] && l[6] > l[7] && l[7] > l[8] && l[8] > l[9] && l[9] > l[10] && l[10\n\
    \                                                                            \
    \                                                                            \
    \               ^\n/tmp/tmpv8uwobly.swift:71:43: error: expected '}' at end of\
    \ brace statement\nassert(monotonic(l: [9, 9, 9, 9]) == true)\n              \
    \                            ^\n/tmp/tmpv8uwobly.swift:9:34: note: to match this\
    \ opening '{'\nfunc monotonic(l: [Int]) -> Bool {\n                          \
    \       ^\n/tmp/tmpv8uwobly.swift:48:168: error: type 'Int' cannot be used as\
    \ a boolean; test for '!= 0' instead\n        return l[0] > l[1] && l[1] > l[2]\
    \ && l[2] > l[3] && l[3] > l[4] && l[4] > l[5] && l[5] > l[6] && l[6] > l[7] &&\
    \ l[7] > l[8] && l[8] > l[9] && l[9] > l[10] && l[10\n                       \
    \                                                                            \
    \                                                                    ^\n     \
    \                                                                            \
    \                                                                            \
    \         (    != 0)\n/tmp/tmpv8uwobly.swift:52:6: error: operator functions can\
    \ only be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659820600
- exit_code: -4
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    for x in l {\n        if i > 0 {\n    \
    \        if x < l[i-1] {\n                return false\n            }\n      \
    \  }\n        i = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2,\
    \ 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmp5_dkoytb/tmp5_dkoytb.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b003d1acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b003cea3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b003cea3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b003cea27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5_dkoytb                        0x0000558bcf0ff731 <unavailable> + 5937

    5    libc.so.6                          0x00002b003d398460 __libc_start_main +
    245

    6    tmp5_dkoytb                        0x0000558bcf0ff129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph72jeoca.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph72jeoca.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph72jeoca.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph72jeoca.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: -4
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n    }\n\n    var\
    \ prev = 0\n    var curr = l[0]\n    for idx in 1..<l.count {\n        if curr\
    \ < l[idx] {\n            return false\n        }\n        if prev < l[idx] {\n\
    \            prev = curr\n            curr = l[idx]\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4,\
    \ 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmpo957kxey/tmpo957kxey.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6343781c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6343478b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6343478988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b63434777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo957kxey                        0x0000564e4e44b542 <unavailable> + 5442

    5    libc.so.6                          0x00002b634396d460 __libc_start_main +
    245

    6    tmpo957kxey                        0x0000564e4e44b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659820600
- exit_code: -4
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    for x in l {\n        if x < l[i] {\n \
    \           return false\n        }\n        if x > l[i] {\n            return\
    \ true\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpwjqgtmn7/tmpwjqgtmn7.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ae01b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4adfeaab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4adfeaa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4adfea97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwjqgtmn7                        0x0000560fc66cd64e <unavailable> + 5710

    5    libc.so.6                          0x00002b4ae039f460 __libc_start_main +
    245

    6    tmpwjqgtmn7                        0x0000560fc66cd129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph72jeoca.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph72jeoca.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithOptions([Int](l), nil)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmputhd_33x.swift:10:12: error: cannot find 'monotonicWithOptions'\
    \ in scope\n    return monotonicWithOptions([Int](l), nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmputhd_33x.swift:10:43: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithOptions([Int](l), nil)\n                                      \
    \    ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph72jeoca.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph72jeoca.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph72jeoca.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph72jeoca.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph72jeoca.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph72jeoca.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph72jeoca.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph72jeoca.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: -4
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n\
    \    var monotonic = true\n    while i < j {\n        if l[i] > l[j] {\n     \
    \       monotonic = false\n            break\n        }\n        if l[i] < l[k]\
    \ {\n            k = j\n        }\n        i += 1\n        j -= 1\n    }\n   \
    \ return monotonic\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmpoox4q50g/tmpoox4q50g.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b445aad8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b445a7cfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b445a7cf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b445a7ce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoox4q50g                        0x0000564431231621 <unavailable> + 5665

    5    libc.so.6                          0x00002b445acc4460 __libc_start_main +
    245

    6    tmpoox4q50g                        0x0000564431231019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659820600
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n\
    \    var m = Int64(0)\n    var n = Int64(0)\n    var o = Int64(0)\n    var p =\
    \ Int64(0)\n    var q = Int64(0)\n    var r = Int64(0)\n    var s = Int64(0)\n\
    \    var t = Int64(0)\n    var u = Int64(0)\n    var v = Int64(0)\n    var w =\
    \ Int64(0)\n    var x = Int64(0)\n    var y = Int64(0)\n    var z = Int64(0)\n\
    \    var a = Int64(0)\n    var b = Int64(0)\n    var c = Int64(0)\n    var d =\
    \ Int64(0)\n    var e = Int64(0)\n    var f = Int64(0)\n    var g = Int64(0)\n\
    \    var h = Int64(0)\n    var i = Int64(0)\n    var j = Int64(0)\n    var k =\
    \ Int64(0)\n    var l = Int64(0)\n    var m = Int64(0)\n    var n = Int64(0)\n\
    \    var o = Int64(0)\n    var p = Int64(0)\n    var q = Int64(0)\n    var r =\
    \ Int64(0)\n    var s = Int64(0)\n    var t = Int64(0)\n    var u = Int64(0)\n\
    \    var v = Int64(0)\n    var w = Int64(0)\n    var x = Int64(0)\n    var y =\
    \ Int64(0)\n    var z = Int64(0)\n    var a = Int64(0)\n    var b = Int64(0)\n\
    \    var c = Int64(0)\n    var d = Int64(0)\n    var e = Int64(0)\n    var f =\
    \ Int64(0)\n    var g = Int64(0)\n    var h = Int64(0)\n    var i = Int64(0)\n\
    \    var j = Int64(0)\n    var k = Int64(0)\n    var l = Int64(0)\n    var m =\
    \ Int64(0)\n    var n = Int64(0)\n    var o = Int64(0)\n    var p = Int64(0)\n\
    \    var q = Int64(0)\n    var r = Int64(0)\n    var s = Int64(0)\n    var t =\
    \ Int64(0)\n    var u = Int64(0)\n    var v = Int64(0)\n    var w = Int64(0)\n\
    \    var x = Int64(0)\n    var y = Int64(0)\n    var z = Int64(0)\n    var a =\
    \ Int64(0)\n    var b = Int64(0)\n    var c = Int64(0)\n    var d = Int64(0)\n\
    \    var e = Int64(0)\n    var f = Int64(0)\n    var g = Int64(0)\n    var h =\
    \ Int64(0)\n    var i = Int64(0)\n    var j = Int64(0)\n    var k = Int64(0)\n\
    \    var l = Int64(0)\n    var m = Int64(0)\n    var n = Int64(0)\n    var o =\
    \ Int64(0)\n    var p = Int64(0)\n    var q = Int64(0)\n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7c7e1_8b.swift:35:9: error: invalid redeclaration of 'i'\n    var\
    \ i = Int64(0)\n        ^\n/tmp/tmp7c7e1_8b.swift:10:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmp7c7e1_8b.swift:36:9: error: invalid\
    \ redeclaration of 'j'\n    var j = Int64(0)\n        ^\n/tmp/tmp7c7e1_8b.swift:11:9:\
    \ note: 'j' previously declared here\n    var j = l.count - 1\n        ^\n/tmp/tmp7c7e1_8b.swift:37:9:\
    \ error: invalid redeclaration of 'k'\n    var k = Int64(0)\n        ^\n/tmp/tmp7c7e1_8b.swift:12:9:\
    \ note: 'k' previously declared here\n    var k = j - 1\n        ^\n/tmp/tmp7c7e1_8b.swift:39:9:\
    \ error: invalid redeclaration of 'm'\n    var m = Int64(0)\n        ^\n/tmp/tmp7c7e1_8b.swift:13:9:\
    \ note: 'm' previously declared here\n    var m = Int64(0)\n        ^\n/tmp/tmp7c7e1_8b.swift:40:9:\
    \ error: invalid redeclaration of 'n'\n    var n = Int64(0)\n        ^\n/tmp/tmp7c7e1_8b.swift:14:9:\
    \ note: 'n' previously declared here\n    var n = Int64(0)\n        ^\n/tmp/tmp7c7e1_8b.swift:41:9:\
    \ error: invalid redeclaration of 'o'\n    var o = Int64(0)\n        ^\n/tmp/tmp7c7e1_8b.swift:15:9:\
    \ note: 'o' previously declared here\n    var o = Int64(0)\n        ^\n/tmp/tmp7c7e1_8b.swift:42:9:\
    \ error: invalid redeclaration of 'p'\n    var p = Int64(0)\n        ^\n/tmp/tmp7c7e1_8b.swift:16:9:\
    \ note: 'p' previously declared here\n    var p = Int64(0)\n        ^\n/tmp/tmp7c7e1_8b.swift:43:9:\
    \ error: invalid redeclaration of 'q'\n    var q = Int64(0)\n        ^\n/tmp/tmp7c7e1_8b.swift:17:9:\
    \ note: 'q' previously declared here\n    var q = Int64(0)\n        ^\n/tmp/tmp7c7e1_8b.swift:44:9:\
    \ error: invalid redeclaration of 'r'\n    var r = Int64(0)\n        ^\n/tmp/tmp7c7e1_8b.swift:18:9:\
    \ note: 'r' previously declared here\n    var r = Int64(0)\n        ^\n/tmp/tmp7c7e1_8b.swift:45:9:\
    \ error: invalid redeclaration of 's'\n    var s = Int64(0)\n        ^\n/tmp/tmp7c7e1_8b.swift:19:9:\
    \ note: 's' previously declared here\n    var s = Int64(0)\n        ^\n/tmp/tmp7c7e1_8b.swift:46:9:\
    \ error: invalid redeclaration of 't'\n    var t = Int64(0)\n        ^\n/tmp/tmp7c7e1_8b.swift:20:9:\
    \ note: 't' previously"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicImpl(l, l.count)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpgv53hp6c.swift:10:12: error: cannot find 'monotonicImpl' in scope\n\
    \    return monotonicImpl(l, l.count)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph72jeoca.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph72jeoca.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph72jeoca.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph72jeoca.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var monotonic = true\n    for idx, val := range l {\n\
    \        if val < l[idx-1] {\n            monotonic = false\n            break\n\
    \        }\n    }\n    return monotonic\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpaf4iyxqw.swift:11:12: error: expected 'in' after for-each pattern\n\
    \    for idx, val := range l {\n           ^\n/tmp/tmpaf4iyxqw.swift:11:12: error:\
    \ expected Sequence expression for for-each loop\n    for idx, val := range l\
    \ {\n           ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = 0\n  \
    \  var l2 = l.count\n    var m = Int64(0)\n    var n = Int64(0)\n    var o = Int64(0)\n\
    \    var p = Int64(0)\n    var q = Int64(0)\n    var r = Int64(0)\n    var s =\
    \ Int64(0)\n    var t = Int64(0)\n    var u = Int64(0)\n    var v = Int64(0)\n\
    \    var w = Int64(0)\n    var x = Int64(0)\n    var y = Int64(0)\n    var z =\
    \ Int64(0)\n    var a = Int64(0)\n    var b = Int64(0)\n    var c = Int64(0)\n\
    \    var d = Int64(0)\n    var e = Int64(0)\n    var f = Int64(0)\n    var g =\
    \ Int64(0)\n    var h = Int64(0)\n    var i = Int64(0)\n    var j = Int64(0)\n\
    \    var k = Int64(0)\n    var l = Int64(0)\n    var m = Int64(0)\n    var n =\
    \ Int64(0)\n    var o = Int64(0)\n    var p = Int64(0)\n    var q = Int64(0)\n\
    \    var r = Int64(0)\n    var s = Int64(0)\n    var t = Int64(0)\n    var u =\
    \ Int64(0)\n    var v = Int64(0)\n    var w = Int64(0)\n    var x = Int64(0)\n\
    \    var y = Int64(0)\n    var z = Int64(0)\n    var a = Int64(0)\n    var b =\
    \ Int64(0)\n    var c = Int64(0)\n    var d = Int64(0)\n    var e = Int64(0)\n\
    \    var f = Int64(0)\n    var g = Int64(0)\n    var h = Int64(0)\n    var i =\
    \ Int64(0)\n    var j = Int64(0)\n    var k = Int64(0)\n    var l = Int64(0)\n\
    \    var m = Int64(0)\n    var n = Int64(0)\n    var o = Int64(0)\n    var p =\
    \ Int64(0)\n    var q = Int64(0)\n    var r = Int64(0)\n    var s = Int64(0)\n\
    \    var t = Int64(0)\n    var u = Int64(0)\n    var v = Int64(0)\n    var w =\
    \ Int64(0)\n    var x = Int64(0)\n    var y = Int64(0)\n    var z = Int64(0)\n\
    \    var a = Int64(0)\n    var b = Int64(0)\n    var c = Int64(0)\n    var d =\
    \ Int64(0)\n    var e = Int64(0)\n    var f = Int64(0)\n    var g = Int64(0)\n\
    \    var h = Int64(0)\n    var i = Int64(0)\n    var j = Int64(0)\n    var k =\
    \ Int64(0)\n    var l = Int64(0)\n    var m = Int64(0)\n    var n = Int64(0)\n\
    \    var o = Int64(0)\n    var p = Int64(0)\n    var \n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp8v49wwae.swift:96:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp8v49wwae.swift:36:9: error: invalid redeclaration of 'i'\n    var\
    \ i = Int64(0)\n        ^\n/tmp/tmp8v49wwae.swift:10:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmp8v49wwae.swift:37:9: error: invalid\
    \ redeclaration of 'j'\n    var j = Int64(0)\n        ^\n/tmp/tmp8v49wwae.swift:11:9:\
    \ note: 'j' previously declared here\n    var j = l.count - 1\n        ^\n/tmp/tmp8v49wwae.swift:38:9:\
    \ error: invalid redeclaration of 'k'\n    var k = Int64(0)\n        ^\n/tmp/tmp8v49wwae.swift:12:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmp8v49wwae.swift:40:9:\
    \ error: invalid redeclaration of 'm'\n    var m = Int64(0)\n        ^\n/tmp/tmp8v49wwae.swift:14:9:\
    \ note: 'm' previously declared here\n    var m = Int64(0)\n        ^\n/tmp/tmp8v49wwae.swift:41:9:\
    \ error: invalid redeclaration of 'n'\n    var n = Int64(0)\n        ^\n/tmp/tmp8v49wwae.swift:15:9:\
    \ note: 'n' previously declared here\n    var n = Int64(0)\n        ^\n/tmp/tmp8v49wwae.swift:42:9:\
    \ error: invalid redeclaration of 'o'\n    var o = Int64(0)\n        ^\n/tmp/tmp8v49wwae.swift:16:9:\
    \ note: 'o' previously declared here\n    var o = Int64(0)\n        ^\n/tmp/tmp8v49wwae.swift:43:9:\
    \ error: invalid redeclaration of 'p'\n    var p = Int64(0)\n        ^\n/tmp/tmp8v49wwae.swift:17:9:\
    \ note: 'p' previously declared here\n    var p = Int64(0)\n        ^\n/tmp/tmp8v49wwae.swift:44:9:\
    \ error: invalid redeclaration of 'q'\n    var q = Int64(0)\n        ^\n/tmp/tmp8v49wwae.swift:18:9:\
    \ note: 'q' previously declared here\n    var q = Int64(0)\n        ^\n/tmp/tmp8v49wwae.swift:45:9:\
    \ error: invalid redeclaration of 'r'\n    var r = Int64(0)\n        ^\n/tmp/tmp8v49wwae.swift:19:9:\
    \ note: 'r' previously declared here\n    var r = Int64(0)\n        ^\n/tmp/tmp8v49wwae.swift:46:9:\
    \ error: invalid redeclaration of 's'\n    var s = Int64(0)\n        ^\n/tmp/tmp8v49wwae.swift:20:9:\
    \ note: 's' previously declared here\n    var s = Int64(0)\n        ^\n/tmp/tmp8v49wwae.swift:47:9:\
    \ error: invalid redeclaration of 't'\n    var t = I"
  stdout: ''
  timestamp: 1659820600
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph72jeoca.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph72jeoca.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    let n = l.count\n    if n < 2 {\n        return true\n\
    \    }\n    if n == 2 {\n        return l[0] < l[1]\n    }\n    if n == 3 {\n\
    \        return l[0] < l[1] && l[1] < l[2]\n    }\n    if n == 4 {\n        return\
    \ l[0] < l[1] && l[1] < l[2] && l[2] < l[3]\n    }\n    if n == 5 {\n        return\
    \ l[0] < l[1] && l[1] < l[2] && l[2] < l[3] && l[3] < l[4]\n    }\n    if n ==\
    \ 6 {\n        return l[0] < l[1] && l[1] < l[2] && l[2] < l[3] && l[3] < l[4]\
    \ && l[4] < l[5]\n    }\n    if n == 7 {\n        return l[0] < l[1] && l[1] <\
    \ l[2] && l[2] < l[3] && l[3] < l[4] && l[4] < l[5] && l[5] < l[6]\n    }\n  \
    \  if n == 8 {\n        return l[0] < l[1] && l[1] < l[2] && l[2] < l[3] && l[3]\
    \ < l[4] && l[4] < l[5] && l[5] < l[6] && l[6] < l[7]\n    }\n    if n == 9 {\n\
    \        return l[0] < l[1] && l[1] < l[2] && l[2] < l[3] && l[3] < l[4] && l[4]\
    \ < l[5] && l[5] < l[6] && l[6] < l[7] && l[7] < l[8]\n    }\n    if n == 10 {\n\
    \        return l[0] < l[1] && l[1] < l[2] && l[2] < l[3] && l[3] < l[4] && l[4]\
    \ < l[5] && l[5] < l[6] && l[6] < l[7] && l[7] < l[8] && l[8] < l[9]\n    }\n\
    \    if n == 11 {\n        return l[0] < l[1] && l[1] < l[2] && l[2] < l[3] &&\
    \ l[3] < l[4] && l[4] < l[5] && l[5] < l[6] && l[6] < l[7] && l[7] < l[8] && l[8]\
    \ < l[9] && l[9] < l[10]\n    }\n    if n == 12 {\n        return l[0] < l[1]\
    \ && l[1] < l[2] && l[2] < l[3] && l[3] < l[4] && l[4] < l[5] && l[5] < l[6] &&\
    \ l[6] < l[7] && l[7] < l[8] && l[8] < l[9] && l[9] < l[10] && l[10] < l[11]\n\
    \    }\n    if n == 13 {\n        return l[0] < l\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpeo1uf3dk.swift:71:43: error: expected '}' at end of brace statement\n\
    assert(monotonic(l: [9, 9, 9, 9]) == true)\n                                 \
    \         ^\n/tmp/tmpeo1uf3dk.swift:9:34: note: to match this opening '{'\nfunc\
    \ monotonic(l: [Int]) -> Bool {\n                                 ^\n/tmp/tmpeo1uf3dk.swift:48:23:\
    \ error: cannot convert value of type '[Int]' to expected argument type 'Int'\n\
    \        return l[0] < l\n                      ^\n/tmp/tmpeo1uf3dk.swift:52:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659820600
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph72jeoca.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph72jeoca.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonic(l, isIncreasing: true)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpxa_2c5m1.swift:10:39: error: extra argument 'isIncreasing' in call\n\
    \    return monotonic(l, isIncreasing: true)\n                    ~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: -4
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    let sorted = l.sorted()\n    return sorted.first == sorted.last\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpn6u5u0ji/tmpn6u5u0ji.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b72fb597c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b72fb28eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b72fb28e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b72fb28d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn6u5u0ji                        0x0000564fb5cb04e2 <unavailable> + 5346

    5    libc.so.6                          0x00002b72fb783460 __libc_start_main +
    245

    6    tmpn6u5u0ji                        0x0000564fb5cb0149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659820599
- exit_code: -4
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    for x in l {\n        if x > l[i] {\n \
    \           return false\n        }\n        i += 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpva1gbxrq/tmpva1gbxrq.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0cfb6e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0cfb3d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0cfb3d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0cfb3d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpva1gbxrq                        0x0000561d5169f64e <unavailable> + 5710

    5    libc.so.6                          0x00002b0cfb8cd460 __libc_start_main +
    245

    6    tmpva1gbxrq                        0x0000561d5169f129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithOptions([Int](l), nil)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmputhd_33x.swift:10:12: error: cannot find 'monotonicWithOptions'\
    \ in scope\n    return monotonicWithOptions([Int](l), nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmputhd_33x.swift:10:43: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithOptions([Int](l), nil)\n                                      \
    \    ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph72jeoca.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph72jeoca.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = 0\n  \
    \  var l2 = l.count\n    var m = Int64(0)\n    var n = Int64(0)\n    var o = Int64(0)\n\
    \    var p = Int64(0)\n    var q = Int64(0)\n    var r = Int64(0)\n    var s =\
    \ Int64(0)\n    var t = Int64(0)\n    var u = Int64(0)\n    var v = Int64(0)\n\
    \    var w = Int64(0)\n    var x = Int64(0)\n    var y = Int64(0)\n    var z =\
    \ Int64(0)\n    var a = Int64(0)\n    var b = Int64(0)\n    var c = Int64(0)\n\
    \    var d = Int64(0)\n    var e = Int64(0)\n    var f = Int64(0)\n    var g =\
    \ Int64(0)\n    var h = Int64(0)\n    var i = Int64(0)\n    var j = Int64(0)\n\
    \    var k = Int64(0)\n    var l = Int64(0)\n    var m = Int64(0)\n    var n =\
    \ Int64(0)\n    var o = Int64(0)\n    var p = Int64(0)\n    var q = Int64(0)\n\
    \    var r = Int64(0)\n    var s = Int64(0)\n    var t = Int64(0)\n    var u =\
    \ Int64(0)\n    var v = Int64(0)\n    var w = Int64(0)\n    var x = Int64(0)\n\
    \    var y = Int64(0)\n    var z = Int64(0)\n    var a = Int64(0)\n    var b =\
    \ Int64(0)\n    var c = Int64(0)\n    var d = Int64(0)\n    var e = Int64(0)\n\
    \    var f = Int64(0)\n    var g = Int64(0)\n    var h = Int64(0)\n    var i =\
    \ Int64(0)\n    var j = Int64(0)\n    var k = Int64(0)\n    var l = Int64(0)\n\
    \    var m = Int64(0)\n    var n = Int64(0)\n    var o = Int64(0)\n    var p =\
    \ Int64(0)\n    var q = Int64(0)\n    var r = Int64(0)\n    var s = Int64(0)\n\
    \    var t = Int64(0)\n    var u = Int64(0)\n    var v = Int64(0)\n    var w =\
    \ Int64(0)\n    var x = Int64(0)\n    var y = Int64(0)\n    var z = Int64(0)\n\
    \    var a = Int64(0)\n    var b = Int64(0)\n    var c = Int64(0)\n    var d =\
    \ Int64(0)\n    var e = Int64(0)\n    var f = Int64(0)\n    var g = Int64(0)\n\
    \    var h = Int64(0)\n    var i = Int64(0)\n    var j = Int64(0)\n    var k =\
    \ Int64(0)\n    var l = Int64(0)\n    var m = Int64(0)\n    var n = Int64(0)\n\
    \    var o = Int64(0)\n    var p = Int64(0)\n    var \n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp8v49wwae.swift:96:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp8v49wwae.swift:36:9: error: invalid redeclaration of 'i'\n    var\
    \ i = Int64(0)\n        ^\n/tmp/tmp8v49wwae.swift:10:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmp8v49wwae.swift:37:9: error: invalid\
    \ redeclaration of 'j'\n    var j = Int64(0)\n        ^\n/tmp/tmp8v49wwae.swift:11:9:\
    \ note: 'j' previously declared here\n    var j = l.count - 1\n        ^\n/tmp/tmp8v49wwae.swift:38:9:\
    \ error: invalid redeclaration of 'k'\n    var k = Int64(0)\n        ^\n/tmp/tmp8v49wwae.swift:12:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmp8v49wwae.swift:40:9:\
    \ error: invalid redeclaration of 'm'\n    var m = Int64(0)\n        ^\n/tmp/tmp8v49wwae.swift:14:9:\
    \ note: 'm' previously declared here\n    var m = Int64(0)\n        ^\n/tmp/tmp8v49wwae.swift:41:9:\
    \ error: invalid redeclaration of 'n'\n    var n = Int64(0)\n        ^\n/tmp/tmp8v49wwae.swift:15:9:\
    \ note: 'n' previously declared here\n    var n = Int64(0)\n        ^\n/tmp/tmp8v49wwae.swift:42:9:\
    \ error: invalid redeclaration of 'o'\n    var o = Int64(0)\n        ^\n/tmp/tmp8v49wwae.swift:16:9:\
    \ note: 'o' previously declared here\n    var o = Int64(0)\n        ^\n/tmp/tmp8v49wwae.swift:43:9:\
    \ error: invalid redeclaration of 'p'\n    var p = Int64(0)\n        ^\n/tmp/tmp8v49wwae.swift:17:9:\
    \ note: 'p' previously declared here\n    var p = Int64(0)\n        ^\n/tmp/tmp8v49wwae.swift:44:9:\
    \ error: invalid redeclaration of 'q'\n    var q = Int64(0)\n        ^\n/tmp/tmp8v49wwae.swift:18:9:\
    \ note: 'q' previously declared here\n    var q = Int64(0)\n        ^\n/tmp/tmp8v49wwae.swift:45:9:\
    \ error: invalid redeclaration of 'r'\n    var r = Int64(0)\n        ^\n/tmp/tmp8v49wwae.swift:19:9:\
    \ note: 'r' previously declared here\n    var r = Int64(0)\n        ^\n/tmp/tmp8v49wwae.swift:46:9:\
    \ error: invalid redeclaration of 's'\n    var s = Int64(0)\n        ^\n/tmp/tmp8v49wwae.swift:20:9:\
    \ note: 's' previously declared here\n    var s = Int64(0)\n        ^\n/tmp/tmp8v49wwae.swift:47:9:\
    \ error: invalid redeclaration of 't'\n    var t = I"
  stdout: ''
  timestamp: 1659820600
- exit_code: -4
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    let sorted = l.sorted()\n    return sorted.first == sorted.last\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpn6u5u0ji/tmpn6u5u0ji.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b72fb597c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b72fb28eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b72fb28e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b72fb28d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn6u5u0ji                        0x0000564fb5cb04e2 <unavailable> + 5346

    5    libc.so.6                          0x00002b72fb783460 __libc_start_main +
    245

    6    tmpn6u5u0ji                        0x0000564fb5cb0149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    let l = l.sorted()\n    return l.first <= l.last\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp__29750t.swift:11:20: error: binary operator '<=' cannot be applied\
    \ to two 'Int?' operands\n    return l.first <= l.last\n           ~~~~~~~ ^ \
    \ ~~~~~~\n/tmp/tmp__29750t.swift:11:20: note: overloads for '<=' exist with these\
    \ partially matching parameter lists: (Int, Int)\n    return l.first <= l.last\n\
    \                   ^\n"
  stdout: ''
  timestamp: 1659820600
- exit_code: -4
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n    }\n    var\
    \ prev = 0\n    for x in l {\n        if prev < x {\n            return false\n\
    \        }\n        prev = x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpd08q9i4f/tmpd08q9i4f.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0987bf4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09878ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09878eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09878ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd08q9i4f                        0x00005654095144c2 <unavailable> + 5314

    5    libc.so.6                          0x00002b0987de0460 __libc_start_main +
    245

    6    tmpd08q9i4f                        0x0000565409514129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659820600
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph72jeoca.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph72jeoca.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph72jeoca.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph72jeoca.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: -4
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    for x in l {\n        if i == 0 || x >\
    \ l[i-1] {\n            return true\n        }\n        i += 1\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4,\
    \ 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmpk3cd70ei/tmpk3cd70ei.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb20fc4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb20cbbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb20cbb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb20cba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk3cd70ei                        0x000055d6d0b0164e <unavailable> + 5710

    5    libc.so.6                          0x00002afb211b0460 __libc_start_main +
    245

    6    tmpk3cd70ei                        0x000055d6d0b01129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659820600
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonic(l, l.count)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpohwtm_r9.swift:10:27: error: extra argument in call\n    return\
    \ monotonic(l, l.count)\n                    ~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: -4
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = 0\n  \
    \  var monotonic = true\n    while i < j {\n        if l[i] < l[j] {\n       \
    \     i += 1\n        } else if l[i] > l[j] {\n            j -= 1\n        } else\
    \ {\n            k += 1\n            if k > 1 {\n                monotonic = false\n\
    \            }\n        }\n    }\n    return monotonic\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpaaap1srp/tmpaaap1srp.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5275ba5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b527589cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b527589c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b527589b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaaap1srp                        0x000055a5cbe4153e <unavailable> + 5438

    5    libc.so.6                          0x00002b5275d91460 __libc_start_main +
    245

    6    tmpaaap1srp                        0x000055a5cbe41019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659820600
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n\
    \    var m = Int64(l.count)\n    var n = Int64(l.count)\n    var o = Int64(l.count)\n\
    \    var p = Int64(l.count)\n    var q = Int64(l.count)\n    var r = Int64(l.count)\n\
    \    var s = Int64(l.count)\n    var t = Int64(l.count)\n    var u = Int64(l.count)\n\
    \    var v = Int64(l.count)\n    var w = Int64(l.count)\n    var x = Int64(l.count)\n\
    \    var y = Int64(l.count)\n    var z = Int64(l.count)\n    var aa = Int64(l.count)\n\
    \    var ab = Int64(l.count)\n    var ac = Int64(l.count)\n    var ad = Int64(l.count)\n\
    \    var ah = Int64(l.count)\n    var ai = Int64(l.count)\n    var aj = Int64(l.count)\n\
    \    var ak = Int64(l.count)\n    var al = Int64(l.count)\n    var am = Int64(l.count)\n\
    \    var an = Int64(l.count)\n    var ao = Int64(l.count)\n    var ap = Int64(l.count)\n\
    \    var aq = Int64(l.count)\n    var ar = Int64(l.count)\n    var as = Int64(l.count)\n\
    \    var at = Int64(l.count)\n    var au = Int64(l.count)\n    var av = Int64(l.count)\n\
    \    var aw = Int64(l.count)\n    var ax = Int64(l.count)\n    var ay = Int64(l.count)\n\
    \    var az = Int64(l.count)\n    var aA = Int64(l.count)\n    var aB = Int64(l.count)\n\
    \    var aC = Int64(l.count)\n    var aD = Int64(l.count)\n    var aE = Int64(l.count)\n\
    \    var aF = Int64(l.count)\n    var aG = Int64(l.count)\n    var aH = Int64(l.count)\n\
    \    var aI = Int64(l.count)\n    var aJ = Int64(l.count)\n    var aK = Int64(l.count)\n\
    \    var aL = Int64(l.count)\n    var aM = Int64(l.count)\n    var aN = Int64(l.count)\n\
    \    var aO = Int64(l.count)\n    var aP = Int64(l.count)\n    var aQ = Int64(l.count)\n\
    \    var aR = Int64(l.count)\n    var aS = Int64(l.count)\n    var aT = Int64(l.count)\n\
    \    var aU = Int64(l.count)\n    var aV = Int64(l.count)\n    var aW = Int64(l.count)\n\
    \    var aX = Int64(l.count)\n    var aY = Int64(l.count)\n    var aZ = Int64(l.count)\n\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpwipi31yr.swift:42:9: error: keyword 'as' cannot be used as an identifier\
    \ here\n    var as = Int64(l.count)\n        ^\n/tmp/tmpwipi31yr.swift:42:9: note:\
    \ if this name is unavoidable, use backticks to escape it\n    var as = Int64(l.count)\n\
    \        ^~\n        `as`\n/tmp/tmpwipi31yr.swift:10:9: warning: initialization\
    \ of variable 'i' was never used; consider replacing with assignment to '_' or\
    \ removing it\n    var i = 0\n    ~~~~^\n    _\n/tmp/tmpwipi31yr.swift:11:9: warning:\
    \ variable 'j' was never mutated; consider changing to 'let' constant\n    var\
    \ j = l.count - 1\n    ~~~ ^\n    let\n/tmp/tmpwipi31yr.swift:12:9: warning: initialization\
    \ of variable 'k' was never used; consider replacing with assignment to '_' or\
    \ removing it\n    var k = j - 1\n    ~~~~^\n    _\n/tmp/tmpwipi31yr.swift:13:9:\
    \ warning: initialization of variable 'm' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var m = Int64(l.count)\n    ~~~~^\n  \
    \  _\n/tmp/tmpwipi31yr.swift:14:9: warning: initialization of variable 'n' was\
    \ never used; consider replacing with assignment to '_' or removing it\n    var\
    \ n = Int64(l.count)\n    ~~~~^\n    _\n/tmp/tmpwipi31yr.swift:15:9: warning:\
    \ initialization of variable 'o' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var o = Int64(l.count)\n    ~~~~^\n    _\n/tmp/tmpwipi31yr.swift:16:9:\
    \ warning: initialization of variable 'p' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var p = Int64(l.count)\n    ~~~~^\n  \
    \  _\n/tmp/tmpwipi31yr.swift:17:9: warning: initialization of variable 'q' was\
    \ never used; consider replacing with assignment to '_' or removing it\n    var\
    \ q = Int64(l.count)\n    ~~~~^\n    _\n/tmp/tmpwipi31yr.swift:18:9: warning:\
    \ initialization of variable 'r' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var r = Int64(l.count)\n    ~~~~^\n    _\n/tmp/tmpwipi31yr.swift:19:9:\
    \ warning: initialization of variable 's' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var s = Int64(l.count)\n    ~~"
  stdout: ''
  timestamp: 1659820600
- exit_code: -4
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    for v in l {\n        if v < l[i] {\n \
    \           return false\n        }\n        if v > l[i] {\n            return\
    \ true\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmp4lfq7mc8/tmp4lfq7mc8.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b0cd4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b09cbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b09cb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b09ca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4lfq7mc8                        0x000055e7ee68764e <unavailable> + 5710

    5    libc.so.6                          0x00002b42b0ec0460 __libc_start_main +
    245

    6    tmp4lfq7mc8                        0x000055e7ee687129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659820600
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph72jeoca.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph72jeoca.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    let n = l.count\n    if n < 2 {\n        return true\n\
    \    }\n    if n == 2 {\n        return l[0] > l[1]\n    }\n    if n == 3 {\n\
    \        return l[0] > l[1] && l[1] > l[2]\n    }\n    let mut i = 0;\n    let\
    \ mut j = n - 1;\n    let mut k = n - 2;\n    while i < j {\n        if l[i] <\
    \ l[j] {\n            k = j\n        } else {\n            i = i + 1\n       \
    \ }\n        j = k - 1\n    }\n    return l[i] > l[j]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpcpc_6jjo.swift:20:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut i = 0;\n\
    \            ^\n/tmp/tmpcpc_6jjo.swift:20:13: note: join the identifiers together\n\
    \    let mut i = 0;\n        ~~~~^\n        muti\n/tmp/tmpcpc_6jjo.swift:20:13:\
    \ note: join the identifiers together with camel-case\n    let mut i = 0;\n  \
    \      ~~~~^\n        mutI\n/tmp/tmpcpc_6jjo.swift:21:13: error: found an unexpected\
    \ second identifier in constant declaration; is there an accidental break?\n \
    \   let mut j = n - 1;\n            ^\n/tmp/tmpcpc_6jjo.swift:21:13: note: join\
    \ the identifiers together\n    let mut j = n - 1;\n        ~~~~^\n        mutj\n\
    /tmp/tmpcpc_6jjo.swift:21:13: note: join the identifiers together with camel-case\n\
    \    let mut j = n - 1;\n        ~~~~^\n        mutJ\n/tmp/tmpcpc_6jjo.swift:22:13:\
    \ error: found an unexpected second identifier in constant declaration; is there\
    \ an accidental break?\n    let mut k = n - 2;\n            ^\n/tmp/tmpcpc_6jjo.swift:22:13:\
    \ note: join the identifiers together\n    let mut k = n - 2;\n        ~~~~^\n\
    \        mutk\n/tmp/tmpcpc_6jjo.swift:22:13: note: join the identifiers together\
    \ with camel-case\n    let mut k = n - 2;\n        ~~~~^\n        mutK\n/tmp/tmpcpc_6jjo.swift:21:9:\
    \ error: invalid redeclaration of 'mut'\n    let mut j = n - 1;\n        ^\n/tmp/tmpcpc_6jjo.swift:20:9:\
    \ note: 'mut' previously declared here\n    let mut i = 0;\n        ^\n/tmp/tmpcpc_6jjo.swift:22:9:\
    \ error: invalid redeclaration of 'mut'\n    let mut k = n - 2;\n        ^\n/tmp/tmpcpc_6jjo.swift:20:9:\
    \ note: 'mut' previously declared here\n    let mut i = 0;\n        ^\n/tmp/tmpcpc_6jjo.swift:23:11:\
    \ error: cannot find 'i' in scope\n    while i < j {\n          ^\n/tmp/tmpcpc_6jjo.swift:23:15:\
    \ error: cannot find 'j' in scope\n    while i < j {\n              ^\n/tmp/tmpcpc_6jjo.swift:24:14:\
    \ error: cannot find 'i' in scope\n        if l[i] < l[j] {\n             ^\n\
    /tmp/tmpcpc_6jjo.swift:24:21: error: cannot find 'j' in scope\n        if l[i]\
    \ < l[j] {\n                    ^\n/tmp/tmpcpc_6jjo.swift:25:"
  stdout: ''
  timestamp: 1659820600
- exit_code: -4
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    let sorted = l.sorted()\n    return sorted.first == sorted.last\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpn6u5u0ji/tmpn6u5u0ji.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b72fb597c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b72fb28eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b72fb28e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b72fb28d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn6u5u0ji                        0x0000564fb5cb04e2 <unavailable> + 5346

    5    libc.so.6                          0x00002b72fb783460 __libc_start_main +
    245

    6    tmpn6u5u0ji                        0x0000564fb5cb0149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = l.count\n    var k = j - 1\n  \
    \  var m = j\n    var n = j\n    var o = j\n    var p = j\n    var q = j\n   \
    \ var r = j\n    var s = j\n    var t = j\n    var u = j\n    var v = j\n    var\
    \ w = j\n    var x = j\n    var y = j\n    var z = j\n    var a = j\n    var b\
    \ = j\n    var c = j\n    var d = j\n    var e = j\n    var f = j\n    var g =\
    \ j\n    var h = j\n    var i = j\n    var j = j\n    var k = j\n    var l = j\n\
    \    var m = j\n    var n = j\n    var o = j\n    var p = j\n    var q = j\n \
    \   var r = j\n    var s = j\n    var t = j\n    var u = j\n    var v = j\n  \
    \  var w = j\n    var x = j\n    var y = j\n    var z = j\n    var a = j\n   \
    \ var b = j\n    var c = j\n    var d = j\n    var e = j\n    var f = j\n    var\
    \ g = j\n    var h = j\n    var i = j\n    var j = j\n    var k = j\n    var l\
    \ = j\n    var m = j\n    var n = j\n    var o = j\n    var p = j\n    var q =\
    \ j\n    var r = j\n    var s = j\n    var t = j\n    var u = j\n    var v = j\n\
    \    var w = j\n    var x = j\n    var y = j\n    var z = j\n    var a = j\n \
    \   var b = j\n    var c = j\n    var d = j\n    var e = j\n    var f = j\n  \
    \  var g = j\n    var h = j\n    var i = j\n    var j = j\n    var k = j\n   \
    \ var l = j\n    var m = j\n    var n = j\n    var o = j\n    var p = j\n    var\
    \ q = j\n    var r = j\n    var s = j\n    var t = j\n    var u = j\n    var v\
    \ = j\n    var w = j\n    var x = j\n    var y = j\n    var z = j\n    var a =\
    \ j\n    var b = j\n    var c = j\n    var d = j\n    var e = j\n    var f = j\n\
    \    var g = j\n    var h = j\n    var i = j\n    var j = j\n    var k = j\n \
    \   var l = j\n    var m = j\n    var n = j\n    var o = j\n    var p = j\n  \
    \  var q = j\n    var r = j\n    var s = j\n    var t = j\n    var u = j\n   \
    \ var v = j\n    var w = j\n    var x = j\n    var y = j\n    var z = j\n    var\
    \ a = j\n    var b = j\n    var c = j\n    var d = j\n    var e = j\n    var f\
    \ = j\n    var g = j\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp9i29hu2s.swift:35:9: error: invalid redeclaration of 'i'\n    var\
    \ i = j\n        ^\n/tmp/tmp9i29hu2s.swift:10:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmp9i29hu2s.swift:36:9: error: invalid\
    \ redeclaration of 'j'\n    var j = j\n        ^\n/tmp/tmp9i29hu2s.swift:11:9:\
    \ note: 'j' previously declared here\n    var j = l.count\n        ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: -4
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var monotonic = true\n    for idx in 0..<l.count {\n \
    \       if l[idx] < l[idx - 1] {\n            monotonic = false\n            break\n\
    \        }\n    }\n    return monotonic\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae353551c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae353248561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae353248286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae35324813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae353247bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae353047e83 <unavailable> + 188035

    6    tmp44p763l4                        0x0000564c79905cf6 <unavailable> + 7414

    7    tmp44p763l4                        0x0000564c799054cd <unavailable> + 5325

    8    libc.so.6                          0x00002ae35373d460 __libc_start_main +
    245

    9    tmp44p763l4                        0x0000564c799051a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659820600
- exit_code: -4
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n    }\n    var\
    \ left = 0\n    var right = l.count - 1\n    var mid = 0\n    var result = true\n\
    \    while left < right {\n        mid = (left + right) / 2\n        if l[mid]\
    \ < l[mid+1] {\n            left = mid + 1\n        } else {\n            right\
    \ = mid\n        }\n        if l[mid] < l[left] {\n            result = false\n\
    \            break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpfiqxorhc/tmpfiqxorhc.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4a2b29c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4a2820b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4a2820988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4a281f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfiqxorhc                        0x000055a1d8fb9452 <unavailable> + 5202

    5    libc.so.6                          0x00002ae4a2d15460 __libc_start_main +
    245

    6    tmpfiqxorhc                        0x000055a1d8fb90b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659820600
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph72jeoca.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph72jeoca.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: -4
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    let n = l.count\n    if n < 2 {\n        return true\n\
    \    }\n    if n == 2 {\n        return l[0] > l[1]\n    }\n    if n == 3 {\n\
    \        return l[0] > l[1] && l[1] > l[2]\n    }\n    if n == 4 {\n        return\
    \ l[0] > l[1] && l[1] > l[2] && l[2] > l[3]\n    }\n    if n == 5 {\n        return\
    \ l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] > l[4]\n    }\n    if n ==\
    \ 6 {\n        return l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] > l[4]\
    \ && l[4] > l[5]\n    }\n    if n == 7 {\n        return l[0] > l[1] && l[1] >\
    \ l[2] && l[2] > l[3] && l[3] > l[4] && l[4] > l[5] && l[5] > l[6]\n    }\n  \
    \  if n == 8 {\n        return l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3]\
    \ > l[4] && l[4] > l[5] && l[5] > l[6] && l[6] > l[7]\n    }\n    if n == 9 {\n\
    \        return l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] > l[4] && l[4]\
    \ > l[5] && l[5] > l[6] && l[6] > l[7] && l[7] > l[8]\n    }\n    if n == 10 {\n\
    \        return l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] > l[4] && l[4]\
    \ > l[5] && l[5] > l[6] && l[6] > l[7] && l[7] > l[8] && l[8] > l[9]\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmp2igvhsjw/tmp2igvhsjw.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2831b27c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b283181eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b283181e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b283181d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2igvhsjw                        0x000055742b9ed3b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b2831d13460 __libc_start_main +
    245

    6    tmp2igvhsjw                        0x000055742b9ed019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659820600
- exit_code: -4
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n\
    \    var monotonic = true\n    while i < j {\n        if l[i] < l[j] {\n     \
    \       i += 1\n        } else if l[i] > l[j] {\n            j -= 1\n        }\
    \ else {\n            if l[i] < l[k] {\n                monotonic = false\n  \
    \          } else {\n                i += 1\n                j -= 1\n        \
    \        k += 1\n            }\n        }\n    }\n    return monotonic\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmp3jfbgqvk/tmp3jfbgqvk.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b16060b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1605daeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1605dae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1605dad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3jfbgqvk                        0x000055cf3518253e <unavailable> + 5438

    5    libc.so.6                          0x00002b16062a3460 __libc_start_main +
    245

    6    tmp3jfbgqvk                        0x000055cf35182019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659820600
- exit_code: -4
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    let sorted = l.sorted()\n    return sorted.first == sorted.last\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpn6u5u0ji/tmpn6u5u0ji.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b72fb597c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b72fb28eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b72fb28e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b72fb28d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn6u5u0ji                        0x0000564fb5cb04e2 <unavailable> + 5346

    5    libc.so.6                          0x00002b72fb783460 __libc_start_main +
    245

    6    tmpn6u5u0ji                        0x0000564fb5cb0149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph72jeoca.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph72jeoca.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = l.count\n    var k = j - 1\n  \
    \  var m = j\n    var n = j\n    var o = 0\n    var p = 0\n    var q = 0\n   \
    \ var r = j\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var\
    \ w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var aa = 0\n    var\
    \ ab = 0\n    var ac = 0\n    var ad = 0\n    var ae = 0\n    var af = 0\n   \
    \ var ag = 0\n    var ah = 0\n    var ai = 0\n    var aj = 0\n    var ak = 0\n\
    \    var al = 0\n    var am = 0\n    var an = 0\n    var ao = 0\n    var ap =\
    \ 0\n    var aq = 0\n    var ar = 0\n    var as = 0\n    var at = 0\n    var au\
    \ = 0\n    var av = 0\n    var aw = 0\n    var ax = 0\n    var ay = 0\n    var\
    \ az = 0\n    var ba = 0\n    var bb = 0\n    var bc = 0\n    var bd = 0\n   \
    \ var be = 0\n    var bf = 0\n    var bg = 0\n    var bh = 0\n    var bi = 0\n\
    \    var bj = 0\n    var bk = 0\n    var bl = 0\n    var bm = 0\n    var bn =\
    \ 0\n    var bo = 0\n    var bp = 0\n    var bq = 0\n    var br = 0\n    var bs\
    \ = 0\n    var bt = 0\n    var bu = 0\n    var bv = 0\n    var bw = 0\n    var\
    \ bx = 0\n    var by = 0\n    var bz = 0\n    var ca = 0\n    var cb = 0\n   \
    \ var cc = 0\n    var cd = 0\n    var ce = 0\n    var cf = 0\n    var cg = 0\n\
    \    var ch = 0\n    var ci = 0\n    var cj = 0\n    var ck = 0\n    var cl =\
    \ 0\n    var cm = 0\n    var cn = 0\n    var co = 0\n    var cp = 0\n    var cq\
    \ = 0\n    var cr = 0\n    var cs = 0\n    var ct = 0\n    var cu = 0\n    var\
    \ cv = 0\n    var cw = 0\n    var cx = 0\n    var cy = 0\n    var cz = 0\n   \
    \ var da = 0\n    var db = 0\n    var dc = 0\n    var dd = 0\n    var de = 0\n\
    \    var df = 0\n    var dg = 0\n    var dh = 0\n    var di = 0\n    var dj =\
    \ 0\n    var dk = 0\n    var dl = 0\n    var dm = 0\n    var dn = 0\n    var do\
    \ = 0\n    var dp = 0\n    var dq = 0\n    var dr = 0\n    var ds = 0\n    var\
    \ dt = 0\n    var du = 0\n    var dv = 0\n    var dw = 0\n    var dx = 0\n   \
    \ var dy = 0\n    var dz = 0\n    var ea = 0\n    var eb = 0\n    var ec = 0\n\
    \    var ed = 0\n    var ee = 0\n    var ef = 0\n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpc42yk68s.swift:45:9: error: keyword 'as' cannot be used as an identifier\
    \ here\n    var as = 0\n        ^\n/tmp/tmpc42yk68s.swift:45:9: note: if this\
    \ name is unavoidable, use backticks to escape it\n    var as = 0\n        ^~\n\
    \        `as`\n/tmp/tmpc42yk68s.swift:119:9: error: keyword 'do' cannot be used\
    \ as an identifier here\n    var do = 0\n        ^\n/tmp/tmpc42yk68s.swift:119:9:\
    \ note: if this name is unavoidable, use backticks to escape it\n    var do =\
    \ 0\n        ^~\n        `do`\n/tmp/tmpc42yk68s.swift:10:9: warning: initialization\
    \ of variable 'i' was never used; consider replacing with assignment to '_' or\
    \ removing it\n    var i = 0\n    ~~~~^\n    _\n/tmp/tmpc42yk68s.swift:11:9: warning:\
    \ variable 'j' was never mutated; consider changing to 'let' constant\n    var\
    \ j = l.count\n    ~~~ ^\n    let\n/tmp/tmpc42yk68s.swift:12:9: warning: initialization\
    \ of variable 'k' was never used; consider replacing with assignment to '_' or\
    \ removing it\n    var k = j - 1\n    ~~~~^\n    _\n/tmp/tmpc42yk68s.swift:13:9:\
    \ warning: initialization of variable 'm' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var m = j\n    ~~~~^\n    _\n/tmp/tmpc42yk68s.swift:14:9:\
    \ warning: initialization of variable 'n' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var n = j\n    ~~~~^\n    _\n/tmp/tmpc42yk68s.swift:15:9:\
    \ warning: initialization of variable 'o' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var o = 0\n    ~~~~^\n    _\n/tmp/tmpc42yk68s.swift:16:9:\
    \ warning: initialization of variable 'p' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var p = 0\n    ~~~~^\n    _\n/tmp/tmpc42yk68s.swift:17:9:\
    \ warning: initialization of variable 'q' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var q = 0\n    ~~~~^\n    _\n/tmp/tmpc42yk68s.swift:18:9:\
    \ warning: initialization of variable 'r' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var r = j\n    ~~~~^\n    _\n/tmp/tmpc42yk68s.swift:19:9:\
    \ warning: in"
  stdout: ''
  timestamp: 1659820600
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithOptions([Int](l), nil)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmputhd_33x.swift:10:12: error: cannot find 'monotonicWithOptions'\
    \ in scope\n    return monotonicWithOptions([Int](l), nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmputhd_33x.swift:10:43: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithOptions([Int](l), nil)\n                                      \
    \    ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, Context())\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpslk0uh4j.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, Context())\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpslk0uh4j.swift:10:36: error: cannot find 'Context' in scope\n    return\
    \ monotonicWithContext(l, Context())\n                                   ^~~~~~~\n"
  stdout: ''
  timestamp: 1659820600
- exit_code: -4
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = l.count\n    var k = 0\n    var\
    \ monotonic = true\n    while i < j {\n        if l[i] < l[j] {\n            k\
    \ = i\n        } else {\n            k = j\n        }\n        if k - i < 2 {\n\
    \            monotonic = false\n            break\n        }\n        if l[i]\
    \ > l[k] {\n            j = k\n        } else {\n            i = k\n        }\n\
    \    }\n    return monotonic\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ad308ac8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3087bf561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad3087bf286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad3087bf13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad3087bebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ad3085bee83 <unavailable> + 188035

    6    tmpe5wyuv0o                        0x000055ce719e9a95 <unavailable> + 6805

    7    tmpe5wyuv0o                        0x000055ce719e933d <unavailable> + 4925

    8    libc.so.6                          0x00002ad308cb4460 __libc_start_main +
    245

    9    tmpe5wyuv0o                        0x000055ce719e9019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659820600
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    for v in l {\n        if v < l[i] {\n \
    \           return false\n        }\n        if v > l[i] {\n            return\
    \ true\n        }\n        i += 1\n    }\n    return i == len(l)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpixc_4v8e.swift:20:17: error: cannot find 'len' in scope\n    return\
    \ i == len(l)\n                ^~~\n"
  stdout: ''
  timestamp: 1659820600
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicImpl(l)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2,\
    \ 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpldrkf6e4.swift:10:12: error: cannot find 'monotonicImpl' in scope\n\
    \    return monotonicImpl(l)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    for v in l {\n        if v < l[i] {\n \
    \           return false\n        }\n        if v > l[i] {\n            return\
    \ true\n        }\n        i += 1\n    }\n    return i == len(l)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpixc_4v8e.swift:20:17: error: cannot find 'len' in scope\n    return\
    \ i == len(l)\n                ^~~\n"
  stdout: ''
  timestamp: 1659820600
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph72jeoca.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph72jeoca.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: -4
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    let n = l.count\n    if n < 2 {\n        return true\n\
    \    }\n    if n == 2 {\n        return l[0] > l[1]\n    }\n    var left = 0\n\
    \    var right = n - 1\n    var mid = 0\n    var leftIsSmaller = true\n    var\
    \ rightIsSmaller = true\n    while left < right {\n        mid = (left + right)\
    \ / 2\n        if l[mid] < l[left] {\n            leftIsSmaller = false\n    \
    \    }\n        if l[mid] > l[right] {\n            rightIsSmaller = false\n \
    \       }\n        if leftIsSmaller && rightIsSmaller {\n            return true\n\
    \        }\n        if l[mid] < l[left] {\n            left = mid + 1\n      \
    \  } else {\n            right = mid - 1\n        }\n    }\n    return leftIsSmaller\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpejoqz4il/tmpejoqz4il.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b28d8706c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b28d83fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b28d83fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b28d83fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpejoqz4il                        0x00005623aac195de <unavailable> + 5598

    5    libc.so.6                          0x00002b28d88f2460 __libc_start_main +
    245

    6    tmpejoqz4il                        0x00005623aac190b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659820600
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph72jeoca.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph72jeoca.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, ContextualLoad())\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpnje_q6i5.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, ContextualLoad())\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpnje_q6i5.swift:10:36: error: cannot find 'ContextualLoad' in scope\n \
    \   return monotonicWithContext(l, ContextualLoad())\n                       \
    \            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph72jeoca.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph72jeoca.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: -4
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n    while i < j {\n\
    \        if l[i] < l[j] {\n            i += 1\n        } else if l[i] > l[j] {\n\
    \            j -= 1\n        } else {\n            return true\n        }\n  \
    \  }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmpdxt_j05b/tmpdxt_j05b.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b35bbb7cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b35bb873b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b35bb873988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b35bb8727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdxt_j05b                        0x000055ad2fe1a3b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b35bbd68460 __libc_start_main +
    245

    6    tmpdxt_j05b                        0x000055ad2fe1a019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659820600
- exit_code: -4
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    for x in l {\n        if i == 0 {\n   \
    \         i = x\n            continue\n        }\n        if x < i {\n       \
    \     return false\n        }\n        i = x\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpl1d6wcf8/tmpl1d6wcf8.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad7c4a04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad7c46fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad7c46fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad7c46fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl1d6wcf8                        0x000055f8492636e1 <unavailable> + 5857

    5    libc.so.6                          0x00002ad7c4bf0460 __libc_start_main +
    245

    6    tmpl1d6wcf8                        0x000055f8492630d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820600
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph72jeoca.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph72jeoca.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph72jeoca.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph72jeoca.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph72jeoca.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph72jeoca.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, ContextualLoad())\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpnje_q6i5.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, ContextualLoad())\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpnje_q6i5.swift:10:36: error: cannot find 'ContextualLoad' in scope\n \
    \   return monotonicWithContext(l, ContextualLoad())\n                       \
    \            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph72jeoca.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph72jeoca.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    if l.isEmpty {\n        return true\n    }\n    if l.count\
    \ == 1 {\n        return true\n    }\n    if l.count == 2 {\n        return l[0]\
    \ > l[1]\n    }\n    if l.count == 3 {\n        return l[0] > l[1] && l[1] > l[2]\n\
    \    }\n    if l.count == 4 {\n        return l[0] > l[1] && l[1] > l[2] && l[2]\
    \ > l[3]\n    }\n    if l.count == 5 {\n        return l[0] > l[1] && l[1] > l[2]\
    \ && l[2] > l[3] && l[3] > l[4]\n    }\n    if l.count == 6 {\n        return\
    \ l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] > l[4] && l[4] > l[5]\n  \
    \  }\n    if l.count == 7 {\n        return l[0] > l[1] && l[1] > l[2] && l[2]\
    \ > l[3] && l[3] > l[4] && l[4] > l[5] && l[5] > l[6]\n    }\n    if l.count ==\
    \ 8 {\n        return l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] > l[4]\
    \ && l[4] > l[5] && l[5] > l[6] && l[6] > l[7]\n    }\n    if l.count == 9 {\n\
    \        return l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] > l[4] && l[4]\
    \ > l[5] && l[5] > l[6] && l[6] > l[7] && l[7] > l[8]\n    }\n    if l.count ==\
    \ 10 {\n        return l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] > l[4]\
    \ && l[4] > l[5] && l[5] > l[6] && l[6] > l[7] && l[7] > l[8] && l[8] > l[9]\n\
    \    }\n    if l.count == 11 {\n        return l[0] > l[1] && l[1] > l[2] && l[2]\
    \ > l[3] && l[3] > l[4] && l[4] > l[5] && l[5] > l[6] && l[6] > l[7] && l[7] >\
    \ l[8] && l[8] > l[9] && l[9] > l[10]\n    }\n    if l.count == 12 {\n       \
    \ return l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] > l[4] && l[4] > l[5]\
    \ && l[5] > l[6] && l[6] > l[7] && l[7] > l[8] && l[8] > l[9] && l[9] > l[10]\
    \ && l[10\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp1nmftfsw.swift:48:1: error: expected ']' in expression list\n}\n\
    ^\n/tmp/tmp1nmftfsw.swift:47:168: note: to match this opening '['\n        return\
    \ l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] > l[4] && l[4] > l[5] && l[5]\
    \ > l[6] && l[6] > l[7] && l[7] > l[8] && l[8] > l[9] && l[9] > l[10] && l[10\n\
    \                                                                            \
    \                                                                            \
    \               ^\n/tmp/tmp1nmftfsw.swift:70:43: error: expected '}' at end of\
    \ brace statement\nassert(monotonic(l: [9, 9, 9, 9]) == true)\n              \
    \                            ^\n/tmp/tmp1nmftfsw.swift:9:34: note: to match this\
    \ opening '{'\nfunc monotonic(l: [Int]) -> Bool {\n                          \
    \       ^\n/tmp/tmp1nmftfsw.swift:47:168: error: type 'Int' cannot be used as\
    \ a boolean; test for '!= 0' instead\n        return l[0] > l[1] && l[1] > l[2]\
    \ && l[2] > l[3] && l[3] > l[4] && l[4] > l[5] && l[5] > l[6] && l[6] > l[7] &&\
    \ l[7] > l[8] && l[8] > l[9] && l[9] > l[10] && l[10\n                       \
    \                                                                            \
    \                                                                    ^\n     \
    \                                                                            \
    \                                                                            \
    \         (    != 0)\n/tmp/tmp1nmftfsw.swift:51:6: error: operator functions can\
    \ only be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659820600
- exit_code: -4
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var monotonic = true\n    var last = 0\n    for x in l\
    \ {\n        if x == last {\n            monotonic = false\n        } else {\n\
    \            last = x\n        }\n    }\n    return monotonic\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpfinnevdo/tmpfinnevdo.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b09ed41cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09ed113b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09ed113988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09ed1127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfinnevdo                        0x000055efb125d5fe <unavailable> + 5630

    5    libc.so.6                          0x00002b09ed608460 __libc_start_main +
    245

    6    tmpfinnevdo                        0x000055efb125d0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820600
- exit_code: -4
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n    }\n    var\
    \ max = 0\n    var min = l[0]\n    for i in 1..<l.count {\n        if l[i] < min\
    \ {\n            min = l[i]\n        }\n        if l[i] > max {\n            max\
    \ = l[i]\n        }\n    }\n    return min <= max\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpg9ab2gm4/tmpg9ab2gm4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abcedd79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abceda70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abceda70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abceda6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg9ab2gm4                        0x000055d2368246ce <unavailable> + 5838

    5    libc.so.6                          0x00002abcedf65460 __libc_start_main +
    245

    6    tmpg9ab2gm4                        0x000055d2368241a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659820600
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph72jeoca.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph72jeoca.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph72jeoca.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph72jeoca.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph72jeoca.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph72jeoca.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var monotonic = true\n    for i := 0; i < len(l); i++\
    \ {\n        if l[i] < l[i-1] {\n            monotonic = false\n            break\n\
    \        }\n    }\n    return monotonic\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp9__s_4_g.swift:11:12: error: expected type\n    for i := 0; i <\
    \ len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp9__s_4_g.swift:11:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++\
    \ {\n           ^\n/tmp/tmp9__s_4_g.swift:11:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph72jeoca.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph72jeoca.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph72jeoca.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph72jeoca.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph72jeoca.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph72jeoca.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithContext(l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph72jeoca.swift:10:12: error: cannot find 'monotonicWithContext'\
    \ in scope\n    return monotonicWithContext(l, nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph72jeoca.swift:10:36: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithContext(l, nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicWithOptions([Int](l), nil)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmputhd_33x.swift:10:12: error: cannot find 'monotonicWithOptions'\
    \ in scope\n    return monotonicWithOptions([Int](l), nil)\n           ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmputhd_33x.swift:10:43: error: 'nil' requires a contextual type\n    return\
    \ monotonicWithOptions([Int](l), nil)\n                                      \
    \    ^\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return monotonicImpl(l)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2,\
    \ 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpldrkf6e4.swift:10:12: error: cannot find 'monotonicImpl' in scope\n\
    \    return monotonicImpl(l)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820599
- exit_code: 1
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    let l = l.sorted()\n    if l.first == l.last {\n     \
    \   return true\n    }\n    if l.first > l.last {\n        return false\n    }\n\
    \    if l.first == 0 {\n        return true\n    }\n    if l.last == 0 {\n   \
    \     return false\n    }\n    if l.first > l.last {\n        return false\n \
    \   }\n    if l.first == l.last {\n        return true\n    }\n    if l.first\
    \ < l.last {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7kou0bn1.swift:14:16: error: binary operator '>' cannot be applied\
    \ to two 'Int?' operands\n    if l.first > l.last {\n       ~~~~~~~ ^ ~~~~~~\n\
    /tmp/tmp7kou0bn1.swift:14:16: note: overloads for '>' exist with these partially\
    \ matching parameter lists: (Int, Int)\n    if l.first > l.last {\n          \
    \     ^\n/tmp/tmp7kou0bn1.swift:23:16: error: binary operator '>' cannot be applied\
    \ to two 'Int?' operands\n    if l.first > l.last {\n       ~~~~~~~ ^ ~~~~~~\n\
    /tmp/tmp7kou0bn1.swift:23:16: note: overloads for '>' exist with these partially\
    \ matching parameter lists: (Int, Int)\n    if l.first > l.last {\n          \
    \     ^\n/tmp/tmp7kou0bn1.swift:29:16: error: binary operator '<' cannot be applied\
    \ to two 'Int?' operands\n    if l.first < l.last {\n       ~~~~~~~ ^ ~~~~~~\n\
    /tmp/tmp7kou0bn1.swift:29:16: note: overloads for '<' exist with these partially\
    \ matching parameter lists: (Int, Int)\n    if l.first < l.last {\n          \
    \     ^\n"
  stdout: ''
  timestamp: 1659820600
