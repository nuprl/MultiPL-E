name: HumanEval_61_correct_bracketing
language: swift
prompt: "\n/// brackets is a string of \"(\" and \")\".\n/// return true if every\
  \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
  \ \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n///\
  \ >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets:\
  \ \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(correct_bracketing(brackets: \"()\") ==\
  \ true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
  \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
  ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
  \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
  \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\nassert(correct_bracketing(brackets:\
  \ \"(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())())(()\")\
  \ == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\") == false)"
completions: ["    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        let openingBracket = brackets[openingBracketIndex]\n\
    \        if openingBracket == \"(\" {\n            openingBracketIndex += 1\n\
    \            openingBracketIndex += 1\n            openingBracketIndex += 1\n\
    \        } else if openingBracket == \")\" {\n            openingBracketIndex\
    \ += 1\n        } else {\n            return false\n        }\n    }\n    while\
    \ closingBracketIndex < brackets.endIndex {\n        let closingBracket = brackets[closingBracketIndex]\n\
    \        if closingBracket == \"(\" {\n            closingBracketIndex += 1\n\
    \            closingBracketIndex += 1\n            closingBracketIndex += 1\n\
    \        } else if closingBracket == \")\" {\n            closingBracketIndex\
    \ += 1\n        } else {\n            return false\n        }\n    }\n    return\
    \ openingBracketIndex == closingBracketIndex", "    var openingBrackets = brackets.characters\n\
    \    var closingBrackets = brackets.characters\n    var openingBracketIndex =\
    \ brackets.startIndex\n    var closingBracketIndex = brackets.startIndex\n\n \
    \   while openingBracketIndex < brackets.endIndex {\n        switch brackets[openingBracketIndex]\
    \ {\n        case \")\":\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ += 1\n        case \")\":\n            openingBracketIndex += 1\n          \
    \  closingBracketIndex += 1\n        case \"(\":\n            openingBracketIndex\
    \ += 1\n            closingBracketIndex += 1\n        case \"(\":\n          \
    \  openingBracketIndex += 1\n            closingBracketIndex += 1\n        default:\n\
    \            openingBracketIndex += 1\n            closingBracketIndex += 1\n\
    \        }\n    }\n\n    return openingBracketIndex == closingBracketIndex", " \
    \   let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    if openingBrackets.count != closingBrackets.count\
    \ {\n        return false\n    }\n    for i in 0..<openingBrackets.count {\n \
    \       if openingBrackets[i] != closingBrackets[i] {\n            return false\n\
    \        }\n    }\n    return true", "    var openingBrackets = brackets.characters\n\
    \    var closingBrackets = brackets.characters\n    var openingBracketIndex =\
    \ brackets.startIndex\n    var closingBracketIndex = brackets.startIndex\n   \
    \ var openingBracketCount = 0\n    var closingBracketCount = 0\n\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        switch brackets[openingBracketIndex] {\n    \
    \    case \")\":\n            openingBracketCount--\n            if openingBracketCount\
    \ == 0 {\n                openingBracketIndex = brackets.index(after: openingBracketIndex)\n\
    \                closingBracketIndex = openingBracketIndex\n            }\n  \
    \      case \")\":\n            openingBracketCount--\n            if openingBracketCount\
    \ == 0 {\n                openingBracketIndex = brackets.index(after: openingBracketIndex)\n\
    \                closingBracketIndex = openingBracketIndex\n            }\n  \
    \      case \"(\":\n            openingBracketCount++\n            if openingBracketCount\
    \ == 1 {\n                openingBracketIndex = brackets.index(after: openingBracketIndex)\n\
    \                closingBracketIndex = openingBracketIndex\n            }\n  \
    \      case \"(\":\n            openingBracketCount++\n            if openingBracketCount\
    \ == 1 {\n                openingBracketIndex = brackets.index(after: openingBracketIndex)\n\
    \                closingBracketIndex = openingBracketIndex\n            }\n  \
    \      default:\n            openingBracketIndex = brackets.index(after: openingBracketIndex)\n\
    \        }\n    }\n\n    return openingBracketCount == closingBracketCount", " \
    \   var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    var openingBracketCount = 0\n    var closingBracketCount\
    \ = 0\n    while openingBracketIndex < brackets.endIndex {\n        switch brackets[openingBracketIndex]\
    \ {\n        case \")\":\n            closingBracketCount++\n            if closingBracketCount\
    \ > 1 {\n                openingBracketCount--\n            }\n        case \"\
    )\":\n            closingBracketCount++\n            if closingBracketCount >\
    \ 1 {\n                openingBracketCount--\n            }\n        case \"(\"\
    :\n            openingBracketCount++\n            if openingBracketCount > 1 {\n\
    \                closingBracketCount--\n            }\n        case \"(\":\n \
    \           openingBracketCount++\n            if openingBracketCount > 1 {\n\
    \                closingBracketCount--\n            }\n        default:\n    \
    \        openingBracketCount = 0\n            closingBracketCount = 0\n      \
    \  }\n        openingBracketIndex++\n    }\n    return openingBracketCount ==\
    \ 0 && closingBracketCount == 0", "    let openingBrackets = brackets.components(separatedBy:\
    \ CharacterSet.openingParenthesis)\n    let closingBrackets = brackets.components(separatedBy:\
    \ CharacterSet.closingParenthesis)\n    \n    if openingBrackets.count != closingBrackets.count\
    \ {\n        return false\n    }\n    \n    for openingBracket in openingBrackets\
    \ {\n        let index = openingBrackets.index(of: openingBracket)\n        let\
    \ closingBracket = closingBrackets[index]\n        \n        if openingBracket\
    \ != closingBracket {\n            return false\n        }\n    }\n    \n    return\
    \ true", "    let openingBrackets = brackets.components(separatedBy: \"(\")\n\
    \    let closingBrackets = brackets.components(separatedBy: \")\")\n    let openingBracketCount\
    \ = openingBrackets.count\n    let closingBracketCount = closingBrackets.count\n\
    \    if openingBracketCount != closingBracketCount {\n        return false\n \
    \   }\n    for openingBracket in openingBrackets {\n        let closingBracketIndex\
    \ = openingBrackets.firstIndex(of: openingBracket)\n        if closingBracketIndex\
    \ == nil {\n            return false\n        }\n        let closingBracket =\
    \ openingBrackets[closingBracketIndex!]\n        if openingBracket != closingBracket\
    \ {\n            return false\n        }\n    }\n    return true", "    let openingBrackets\
    \ = brackets.components(separatedBy: \"(\")\n    let closingBrackets = brackets.components(separatedBy:\
    \ \")\")\n    return openingBrackets.count == closingBrackets.count", "    var\
    \ bracketsStack = [String]()\n    var bracketsStackCopy = [String]()\n    var\
    \ bracketsStackCopyCopy = [String]()\n    var bracketsStackCopyCopyCopy = [String]()\n\
    \    var bracketsStackCopyCopyCopyCopy = [String]()\n    var bracketsStackCopyCopyCopyCopyCopy\
    \ = [String]()\n    var bracketsStackCopyCopyCopyCopyCopyCopy = [String]()\n \
    \   var bracketsStackCopyCopyCopyCopyCopyCopyCopy = [String]()\n    var bracketsStackCopyCopyCopyCopyCopyCopyCopyCopy\
    \ = [String]()\n    var bracketsStackCopyCopyCopyCopyCopyCopyCopyCopy = [String]()\n\
    \    var bracketsStackCopyCopyCopyCopyCopyCopyCopyCopyCopy = [String]()\n    var\
    \ bracketsStackCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy = [String]()\n    var\
    \ bracketsStackCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy = [String]()\n    var\
    \ bracketsStackCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy = [String]()\n   \
    \ var bracketsStackCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy = [String]()\n\
    \    var bracketsStackCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy = [String]()\n\
    \    var bracketsStackCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy = [String]()\n\
    \    var bracketsStackCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\
    \ = [String]()\n    var bracketsStackCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\
    \ = [String]()\n    var bracketsStackCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\
    \ = [String]()\n    var bracketsStackCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\
    \ = [String]()\n    var bracketsStackCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\
    \ = [String]()\n    var bracketsStackCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\
    \ = [String]()\n    var bracketsStackCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\
    \ = [String]()\n    var bracketsStackCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\
    \ = [String]()\n    var bracketsStackCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\
    \ = [String]()\n    var bracketsStackCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy",
  "    var openingBrackets = brackets.characters\n    var closingBrackets = [String]()\n\
    \    var openingBracketCount = 0\n    var closingBracketCount = 0\n    for openingBracket\
    \ in openingBrackets {\n        if openingBracket == \"(\" {\n            openingBracketCount++\n\
    \        } else if openingBracket == \")\" {\n            closingBracketCount++\n\
    \        } else {\n            return false\n        }\n    }\n    if openingBracketCount\
    \ != closingBracketCount {\n        return false\n    }\n    for openingBracket\
    \ in openingBrackets {\n        if openingBracket == \"(\" {\n            openingBracketCount++\n\
    \        } else if openingBracket == \")\" {\n            closingBracketCount++\n\
    \        } else {\n            return false\n        }\n    }\n    if openingBracketCount\
    \ != closingBracketCount {\n        return false\n    }\n    for openingBracket\
    \ in openingBrackets {\n        if openingBracket == \"(\" {\n            openingBracketCount++\n\
    \        } else if openingBracket == \")\" {\n            closingBracketCount++\n\
    \        } else {\n            return false\n        }\n    }\n    if openingBracketCount\
    \ != closingBracketCount {\n        return false\n    }\n    for openingBracket\
    \ in openingBrackets {\n        if openingBracket == \"(\" {\n            openingBracketCount++\n\
    \        } else if openingBracket == \")\" {\n            closingBracketCount++\n\
    \        } else {\n            return false\n        }\n    }\n    if openingBracketCount\
    \ != closingBracketCount {\n        return false\n    }\n    for openingBracket\
    \ in openingBrackets {\n        if openingBracket == \"(\" {\n            openingBracketCount++\n\
    \        } else if openingBracket == \")\" {\n            closingBracketCount++\n\
    \        } else {\n            return false\n        }\n    }\n    if openingBracketCount\
    \ != closingBracketCount {\n        return false\n    }\n    for openingBracket\
    \ in openingBrackets {\n        if openingBracket == \"(\" {\n            openingBracketCount++\n\
    \        } else if openingBracket == \")\" {\n            closingBracketCount++\n\
    \        } else {\n            return false\n        }\n    }\n    if openingBracketCount\
    \ != closingBracketCount {\n        return false\n    }\n    for openingBracket\
    \ in openingBrackets {\n        if openingBracket == \"(\" {\n", "    var bracketCount\
    \ = 0\n    var openingBracketCount = 0\n    var closingBracketCount = 0\n\n  \
    \  for bracket in brackets {\n        if bracket == \"(\" {\n            openingBracketCount++\n\
    \        } else if bracket == \")\" {\n            closingBracketCount++\n   \
    \     } else if bracket == \"{\" {\n            openingBracketCount++\n      \
    \      closingBracketCount++\n        } else if bracket == \"}\" {\n         \
    \   closingBracketCount++\n        }\n    }\n\n    if openingBracketCount != closingBracketCount\
    \ {\n        return false\n    }\n\n    if openingBracketCount == 0 {\n      \
    \  return true\n    }\n\n    return bracketCount == openingBracketCount", "  \
    \  let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for i in\
    \ 0..<openingBrackets.count {\n        let openingBracket = openingBrackets[i]\n\
    \        let closingBracket = closingBrackets[i]\n        \n        if openingBracket\
    \ != closingBracket {\n            return false\n        }\n    }\n    \n    return\
    \ true", "    var opening = brackets.characters\n    var closing = brackets.characters\n\
    \    var openingCount = 1\n    var closingCount = 1\n    for char in opening {\n\
    \        if char == \")\" {\n            closingCount--\n        }\n        if\
    \ char == \"(\" {\n            openingCount--\n        }\n    }\n    if openingCount\
    \ != closingCount {\n        return false\n    }\n    for char in closing {\n\
    \        if char == \")\" {\n            openingCount++\n        }\n        if\
    \ char == \"(\" {\n            closingCount++\n        }\n    }\n    if openingCount\
    \ != closingCount {\n        return false\n    }\n    return true", "    var openingBrackets\
    \ = brackets.characters\n    var closingBrackets = brackets.characters\n    var\
    \ openingBracketsCount = brackets.characters.count\n    var closingBracketsCount\
    \ = brackets.characters.count\n\n    while openingBracketsCount > 0 && closingBracketsCount\
    \ > 0 {\n        openingBracketsCount = openingBrackets.count\n        closingBracketsCount\
    \ = closingBrackets.count\n\n        if openingBracketsCount < closingBracketsCount\
    \ {\n            openingBrackets.removeLast()\n            closingBrackets.removeLast()\n\
    \        } else {\n            openingBrackets.removeLast()\n        }\n    }\n\
    \n    return openingBrackets.count == 0 && closingBrackets.count == 0", "    let\
    \ openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for i in\
    \ 0..<openingBrackets.count {\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n            return false\n        }\n    }\n    \n    return true", "   \
    \ let openingBrackets = brackets.characters.split{$0 == \")\"}.map(String.init)\n\
    \    let closingBrackets = brackets.characters.split{$0 == \"(\"}.map(String.init)\n\
    \    return openingBrackets.count == closingBrackets.count", "    var openingBrackets\
    \ = brackets.characters\n    var closingBrackets = brackets.characters\n    var\
    \ openingBracketIndex = brackets.startIndex\n    var closingBracketIndex = brackets.startIndex\n\
    \n    while openingBracketIndex < brackets.endIndex {\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBrackets[openingBracketIndex] == \")\" else {\n \
    \           return false\n        }\n        openingBracketIndex += 1\n      \
    \  guard openingBrackets[openingBracketIndex] == \")\" else {\n            return\
    \ false\n        }\n        openingBracketIndex += 1\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBrackets[openingBracketIndex] == \")\" else {\n \
    \           return false\n        }\n        openingBracketIndex += 1\n      \
    \  guard openingBrackets[openingBracketIndex] == \")\" else {\n            return\
    \ false\n        }\n        openingBracketIndex += 1\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBrackets[openingBracketIndex] == \")\" else {\n \
    \           return false\n        }\n        openingBracketIndex += 1\n      \
    \  guard openingBrackets[openingBracketIndex] == \")\" else {\n            return\
    \ false\n        }\n        openingBracketIndex += 1\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBrackets[openingBracketIndex] == \")\" else {\n \
    \           return false\n        }\n        openingBracketIndex += 1\n      \
    \  guard openingBrackets[openingBracketIndex] == \")\" else {\n            return\
    \ false\n        }\n        openingBracketIndex += 1\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBrackets[openingBracketIndex] == \")\" else {\n \
    \           return false\n        }\n        openingBracketIndex += 1\n      \
    \  guard openingBrackets[openingBracketIndex] == \")\" else {\n            return\
    \ false\n        }\n        open", "    var openingBrackets = brackets.characters\n\
    \    var closingBrackets = brackets.characters\n    var openingBracketIndex =\
    \ brackets.startIndex\n    var closingBracketIndex = brackets.startIndex\n   \
    \ while openingBracketIndex < brackets.endIndex {\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBrackets[openingBracketIndex] == \")\" else {\n \
    \           return false\n        }\n        openingBracketIndex += 1\n      \
    \  guard openingBrackets[openingBracketIndex] == \")\" else {\n            return\
    \ false\n        }\n        openingBracketIndex += 1\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBrackets[openingBracketIndex] == \")\" else {\n \
    \           return false\n        }\n        openingBracketIndex += 1\n      \
    \  guard openingBrackets[openingBracketIndex] == \")\" else {\n            return\
    \ false\n        }\n        openingBracketIndex += 1\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBrackets[openingBracketIndex] == \")\" else {\n \
    \           return false\n        }\n        openingBracketIndex += 1\n      \
    \  guard openingBrackets[openingBracketIndex] == \")\" else {\n            return\
    \ false\n        }\n        openingBracketIndex += 1\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBrackets[openingBracketIndex] == \")\" else {\n \
    \           return false\n        }\n        openingBracketIndex += 1\n      \
    \  guard openingBrackets[openingBracketIndex] == \")\" else {\n            return\
    \ false\n        }\n        openingBracketIndex += 1\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBrackets[openingBracketIndex] == \")\" else {\n \
    \           return false\n        }\n        openingBracketIndex += 1\n      \
    \  guard openingBrackets[openingBracketIndex] == \")\" else {\n            return\
    \ false\n        }\n        open", "    var opening = brackets.characters\n  \
    \  var closing = brackets.characters\n    opening.removeLast()\n    closing.removeFirst()\n\
    \    if opening.isEmpty {\n        return closing.isEmpty && closing.count ==\
    \ 0\n    }\n    if closing.isEmpty {\n        return closing.count == 0\n    }\n\
    \    if opening.count != closing.count {\n        return false\n    }\n    for\
    \ index in 0..<opening.count {\n        if opening[index] != closing[index] {\n\
    \            return false\n        }\n    }\n    return true", "    let openingBrackets\
    \ = brackets.components(separatedBy: \"(\")\n    let closingBrackets = brackets.components(separatedBy:\
    \ \")\")\n    \n    if openingBrackets.count != closingBrackets.count {\n    \
    \    return false\n    }\n    \n    for i in 0..<openingBrackets.count {\n   \
    \     let openingBracket = openingBrackets[i]\n        let closingBracket = closingBrackets[i]\n\
    \        \n        if openingBracket != closingBracket {\n            return false\n\
    \        }\n    }\n    \n    return true", "    var opening = brackets.characters\n\
    \    var closing = brackets.characters\n    var openingCount = brackets.characters.count\n\
    \    var closingCount = brackets.characters.count\n    var openingIndex = 0\n\
    \    var closingIndex = 0\n\n    while openingIndex < openingCount {\n       \
    \ opening = brackets.substringWithRange(NSMakeRange(openingIndex, 1))\n      \
    \  closing = brackets.substringWithRange(NSMakeRange(closingIndex, 1))\n     \
    \   openingIndex = openingIndex + 1\n        closingIndex = closingIndex + 1\n\
    \n        if opening == \"(\" {\n            openingCount--\n        } else if\
    \ closing == \")\" {\n            closingCount--\n        }\n    }\n\n    return\
    \ openingCount == closingCount", "    let openingBrackets = brackets.characters.split{$0\
    \ == \")\"}.map(String.init)\n    let closingBrackets = brackets.characters.split{$0\
    \ == \"(\"}.map(String.init)\n    return openingBrackets.count == closingBrackets.count",
  "    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    let openingBracketCount = openingBrackets.count\n\
    \    let closingBracketCount = closingBrackets.count\n    if openingBracketCount\
    \ != closingBracketCount {\n        return false\n    }\n    for i in 0..<openingBracketCount\
    \ {\n        let openingBracket = openingBrackets[i]\n        let closingBracket\
    \ = closingBrackets[i]\n        if openingBracket != closingBracket {\n      \
    \      return false\n        }\n    }\n    return true", "    let openingBrackets\
    \ = brackets.characters\n        .filter({ $0 != \"(\" })\n        .map({ String($0)\
    \ })\n    let closingBrackets = brackets.characters\n        .filter({ $0 != \"\
    )\" })\n        .map({ String($0) })\n    return openingBrackets.count == closingBrackets.count",
  "    var opening = brackets.characters\n    var closing = brackets.characters\n\
    \    var openingCount = brackets.characters.count\n    var closingCount = brackets.characters.count\n\
    \    var openingIndex = 0\n    var closingIndex = 0\n\n    while openingIndex\
    \ < openingCount {\n        opening = brackets[openingIndex..<openingIndex+2]\n\
    \        openingIndex += 2\n        if opening == \"(\" {\n            openingCount\
    \ -= 1\n        }\n        if opening == \")\" {\n            openingCount -=\
    \ 1\n        }\n    }\n\n    while closingIndex < closingCount {\n        closing\
    \ = brackets[closingIndex..<closingIndex+2]\n        closingIndex += 2\n     \
    \   if closing == \"(\" {\n            closingCount -= 1\n        }\n        if\
    \ closing == \")\" {\n            closingCount -= 1\n        }\n    }\n\n    return\
    \ openingCount == closingCount", "    var openingBrackets = brackets.characters\n\
    \    var closingBrackets = [Character]()\n    var openingBracketCount = 0\n  \
    \  var closingBracketCount = 0\n    for c in openingBrackets {\n        if c ==\
    \ ')' {\n            closingBracketCount = closingBracketCount + 1\n        }\
    \ else if c == '(' {\n            openingBracketCount = openingBracketCount +\
    \ 1\n        }\n        if openingBracketCount == closingBracketCount {\n    \
    \        closingBrackets.append(c)\n        }\n    }\n    return openingBracketCount\
    \ == closingBracketCount", "    var openingBrackets = brackets.characters\n  \
    \  var closingBrackets = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n\
    \    var closingBracketIndex = brackets.startIndex\n    var openingBracketCount\
    \ = 0\n    var closingBracketCount = 0\n\n    while openingBracketIndex < brackets.endIndex\
    \ {\n        let openingBracket = brackets[openingBracketIndex]\n        if openingBracket\
    \ == \"(\" {\n            openingBracketCount++\n        } else if openingBracket\
    \ == \")\" {\n            openingBracketCount--\n        }\n\n        if openingBracketCount\
    \ < 0 {\n            return false\n        }\n\n        if openingBracketCount\
    \ > 0 {\n            openingBracketIndex++\n        }\n\n        if openingBracketIndex\
    \ == brackets.endIndex {\n            openingBracketIndex = 0\n        }\n\n \
    \       if openingBracketIndex < brackets.endIndex {\n            let closingBracket\
    \ = brackets[openingBracketIndex]\n            if closingBracket == \"(\" {\n\
    \                closingBracketCount++\n            } else if closingBracket ==\
    \ \")\" {\n                closingBracketCount--\n            }\n\n          \
    \  if closingBracketCount < 0 {\n                return false\n            }\n\
    \n            if closingBracketCount > 0 {\n                closingBracketIndex++\n\
    \            }\n\n            if closingBracketIndex == brackets.endIndex {\n\
    \                closingBracketIndex = 0\n            }\n\n            if closingBracketIndex\
    \ < brackets.endIndex {\n                openingBracketIndex++\n            }\n\
    \        }\n    }\n\n    return openingBracketCount == 0 && closingBracketCount\
    \ == 0", "    let openingBrackets = brackets.components(separatedBy: \"(\")\n\
    \    let closingBrackets = brackets.components(separatedBy: \")\")\n    let openingBracketCount\
    \ = openingBrackets.count\n    let closingBracketCount = closingBrackets.count\n\
    \    if openingBracketCount != closingBracketCount {\n        return false\n \
    \   }\n    for openingBracket in openingBrackets {\n        let closingBracketIndex\
    \ = openingBrackets.firstIndex(of: openingBracket)\n        if closingBracketIndex\
    \ == nil {\n            return false\n        }\n        let openingBracketIndex\
    \ = openingBrackets.firstIndex(of: openingBracket, in: openingBracketIndex!)\n\
    \        if openingBracketIndex == nil {\n            return false\n        }\n\
    \        let closingBracket = openingBrackets[closingBracketIndex!]\n        if\
    \ closingBracket != closingBrackets[openingBracketIndex!] {\n            return\
    \ false\n        }\n    }\n    return true", "    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    \n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n    \n    for openingBracket in openingBrackets {\n        if\
    \ !closingBrackets.contains(where: { $0 == openingBracket }) {\n            return\
    \ false\n        }\n    }\n    \n    return true", "    var openingBrackets =\
    \ brackets.characters\n    var closingBrackets = brackets.characters\n    var\
    \ openingBracketCount = brackets.characters.count\n    var closingBracketCount\
    \ = brackets.characters.count\n    var openingBracketIndex = openingBrackets.startIndex\n\
    \    var closingBracketIndex = closingBrackets.startIndex\n    while openingBracketIndex\
    \ < openingBrackets.endIndex {\n        if openingBrackets[openingBracketIndex]\
    \ == \")\" {\n            if closingBracketIndex < closingBrackets.endIndex &&\
    \ closingBrackets[closingBracketIndex] == \")\" {\n                closingBracketIndex\
    \ += 1\n            } else {\n                openingBracketCount -= 1\n     \
    \           openingBracketIndex = openingBrackets.startIndex\n            }\n\
    \        } else {\n            if closingBracketIndex < closingBrackets.endIndex\
    \ && closingBrackets[closingBracketIndex] != \"(\" {\n                closingBracketCount\
    \ -= 1\n                closingBracketIndex = closingBrackets.startIndex\n   \
    \         }\n        }\n        openingBracketIndex += 1\n    }\n    return openingBracketCount\
    \ == 0 && closingBracketCount == 0", "    let openingBrackets = brackets.characters\n\
    \        .filter({ $0 != \"(\" })\n        .filter({ $0 != \")\" })\n        .map({\
    \ String($0) })\n    let closingBrackets = brackets.characters\n        .filter({\
    \ $0 != \"(\" })\n        .filter({ $0 != \")\" })\n        .map({ String($0)\
    \ })\n    return openingBrackets.count == closingBrackets.count", "    var openingBrackets\
    \ = brackets.characters\n    var closingBrackets = brackets.characters\n    var\
    \ openingBracketIndex = brackets.startIndex\n    var closingBracketIndex = brackets.startIndex\n\
    \    var openingBracketCount = brackets.characters.count\n    var closingBracketCount\
    \ = brackets.characters.count\n    var openingBracket = String()\n    var closingBracket\
    \ = String()\n\n    while openingBracketIndex < openingBracketCount {\n      \
    \  openingBracket = brackets[openingBracketIndex]\n        openingBracketIndex\
    \ += 1\n        if openingBracket == \"(\" {\n            openingBracketIndex\
    \ += 1\n            openingBracketCount -= 1\n        }\n        if openingBracket\
    \ == \")\" {\n            openingBracketIndex += 1\n            openingBracketCount\
    \ -= 1\n        }\n    }\n\n    while closingBracketIndex < closingBracketCount\
    \ {\n        closingBracket = brackets[closingBracketIndex]\n        closingBracketIndex\
    \ += 1\n        if closingBracket == \"(\" {\n            closingBracketIndex\
    \ += 1\n            closingBracketCount -= 1\n        }\n        if closingBracket\
    \ == \")\" {\n            closingBracketIndex += 1\n            closingBracketCount\
    \ -= 1\n        }\n    }\n\n    if openingBracketIndex != closingBracketIndex\
    \ {\n        return false\n    }\n\n    return true", "    var openingBrackets\
    \ = brackets.characters\n    var closingBrackets = brackets.characters\n    var\
    \ openingBracketCount = brackets.characters.count\n    var closingBracketCount\
    \ = brackets.characters.count\n    var openingBracketIndex = 0\n    var closingBracketIndex\
    \ = 0\n    var openingBracketChar = String()\n    var closingBracketChar = String()\n\
    \    var openingBracketFound = false\n    var closingBracketFound = false\n  \
    \  var openingBracketsFound = false\n    var closingBracketsFound = false\n  \
    \  var openingBracketsFoundInsideBracket = false\n    var closingBracketsFoundInsideBracket\
    \ = false\n    var openingBracketsFoundInsideBracketInsideBracket = false\n  \
    \  var closingBracketsFoundInsideBracketInsideBracket = false\n    var openingBracketsFoundInsideBracketInsideBracketInsideBracket\
    \ = false\n    var closingBracketsFoundInsideBracketInsideBracketInsideBracket\
    \ = false\n    var openingBracketsFoundInsideBracketInsideBracketInsideBracketInsideBracket\
    \ = false\n    var closingBracketsFoundInsideBracketInsideBracketInsideBracketInsideBracket\
    \ = false\n    var openingBracketsFoundInsideBracketInsideBracketInsideBracketInsideBracketInsideBracket\
    \ = false\n    var closingBracketsFoundInsideBracketInsideBracketInsideBracketInsideBracketInsideBracket\
    \ = false\n    var openingBracketsFoundInsideBracketInsideBracketInsideBracketInsideBracketInsideBracketInsideBracket\
    \ = false\n    var closingBracketsFoundInsideBracketInsideBracketInsideBracketInsideBracketInsideBracketInsideBracket\
    \ = false\n    var openingBracketsFoundInsideBracketInsideBracketInsideBracketInsideBracketInsideBracketInsideBracketInsideBracket\
    \ = false\n    var closingBracketsFoundInsideBracketInsideBracketInsideBracketInsideBracketInsideBracketInsideBracketInsideBracket\
    \ = false\n    var openingBracketsFoundInsideBracketInsideBracketInsideBracketInsideBracketInsideBracketInsideBracketInsideBracketInsideBracket\
    \ = false\n    var closingBracketsFoundInsideBracketInsideBracketInsideBracketInsideBracket",
  "    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    var openingBracketCount = 0\n    var closingBracketCount\
    \ = 0\n    while openingBracketIndex < brackets.endIndex {\n        let currentChar\
    \ = brackets[openingBracketIndex]\n        if currentChar == \"(\" {\n       \
    \     openingBracketCount += 1\n        } else if currentChar == \")\" {\n   \
    \         closingBracketCount += 1\n        }\n        openingBracketIndex +=\
    \ 1\n    }\n    if openingBracketCount != closingBracketCount {\n        return\
    \ false\n    }\n    if openingBracketCount > 0 {\n        openingBracketIndex\
    \ -= 1\n        while openingBracketIndex >= 0 {\n            let currentChar\
    \ = brackets[openingBracketIndex]\n            if currentChar == \")\" {\n   \
    \             closingBracketCount -= 1\n            } else if currentChar == \"\
    (\" {\n                openingBracketCount -= 1\n            }\n            openingBracketIndex\
    \ -= 1\n        }\n    }\n    if openingBracketCount != 0 {\n        return false\n\
    \    }\n    return true", "    var openingBrackets = brackets.characters\n   \
    \ var closingBrackets = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n\
    \    var closingBracketIndex = brackets.startIndex\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        openingBracketIndex = openingBracketIndex.successor()\n\
    \        closingBracketIndex = closingBracketIndex.successor()\n        if openingBracketIndex\
    \ == brackets.endIndex {\n            openingBracketIndex = brackets.startIndex\n\
    \        }\n        if closingBracketIndex == brackets.endIndex {\n          \
    \  closingBracketIndex = brackets.startIndex\n        }\n        if openingBrackets[openingBracketIndex]\
    \ != closingBrackets[closingBracketIndex] {\n            return false\n      \
    \  }\n    }\n    return true", "    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    \n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n    \n    for i in 0..<openingBrackets.count {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    \n\
    \    return true", "    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        let openingBracket = brackets[openingBracketIndex]\n\
    \        let closingBracket = brackets[closingBracketIndex]\n\n        if openingBracket\
    \ == \"(\" {\n            openingBracketIndex += 1\n        } else if openingBracket\
    \ == \")\" {\n            closingBracketIndex += 1\n        } else {\n       \
    \     return false\n        }\n\n        if openingBracketIndex >= brackets.endIndex\
    \ || closingBracketIndex >= brackets.endIndex {\n            return false\n  \
    \      }\n\n        if openingBracket != closingBracket {\n            return\
    \ false\n        }\n    }\n\n    return true", "    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    \n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n    \n    for i in 0..<openingBrackets.count {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    \n\
    \    return true", "    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    return openingBrackets.count == closingBrackets.count", "    let openingBrackets\
    \ = brackets.components(separatedBy: \"(\")\n    let closingBrackets = brackets.components(separatedBy:\
    \ \")\")\n    guard openingBrackets.count == closingBrackets.count else {\n  \
    \      return false\n    }\n    for openingBracket in openingBrackets {\n    \
    \    guard let closingBracket = closingBrackets.first {\n            return openingBracket\
    \ == closingBracket\n        }\n    }\n    return true", "    let openingBrackets\
    \ = brackets.components(separatedBy: \"(\")\n    let closingBrackets = brackets.components(separatedBy:\
    \ \")\")\n    \n    if openingBrackets.count != closingBrackets.count {\n    \
    \    return false\n    }\n    \n    for i in 0..<openingBrackets.count {\n   \
    \     if openingBrackets[i] != closingBrackets[i] {\n            return false\n\
    \        }\n    }\n    \n    return true", "    var openingBrackets = brackets.characters\n\
    \    var closingBrackets = brackets.characters\n    var openingBracketIndex =\
    \ brackets.startIndex\n    var closingBracketIndex = brackets.startIndex\n\n \
    \   while openingBracketIndex < brackets.endIndex {\n        let openingBracket\
    \ = brackets[openingBracketIndex]\n        openingBracketIndex += 1\n\n      \
    \  if openingBracket == \"(\" {\n            if closingBracketIndex < brackets.endIndex\
    \ {\n                let closingBracket = brackets[closingBracketIndex]\n    \
    \            closingBracketIndex += 1\n\n                if closingBracket ==\
    \ \")\" {\n                    openingBrackets.removeAtIndex(openingBracketIndex)\n\
    \                    closingBrackets.removeAtIndex(closingBracketIndex)\n    \
    \            } else {\n                    return false\n                }\n \
    \           } else {\n                return false\n            }\n        } else\
    \ {\n            return false\n        }\n    }\n\n    return true", "    let\
    \ openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    return openingBrackets.count\
    \ == closingBrackets.count", "    var openingBrackets = brackets.characters\n\
    \    var closingBrackets = brackets.characters\n    var openingBracketCount =\
    \ brackets.characters.count\n    var closingBracketCount = brackets.characters.count\n\
    \    var openingBracketIndex = 0\n    var closingBracketIndex = 0\n    while openingBracketIndex\
    \ < openingBracketCount {\n        openingBracketIndex = openingBrackets.indexOf('(',\
    \ openingBracketIndex)\n        if openingBracketIndex == NSNotFound {\n     \
    \       return false\n        }\n        closingBracketIndex = openingBrackets.indexOf(')',\
    \ openingBracketIndex)\n        if closingBracketIndex == NSNotFound {\n     \
    \       return false\n        }\n        if openingBracketIndex < closingBracketIndex\
    \ {\n            openingBrackets[openingBracketIndex] = closingBrackets[closingBracketIndex]\n\
    \            closingBrackets[closingBracketIndex] = openingBrackets[openingBracketIndex]\n\
    \        }\n    }\n    return brackets == String(openingBrackets)", "    var openingBrackets\
    \ = brackets.characters\n    var closingBrackets = brackets.characters\n    var\
    \ openingBracketIndex = brackets.startIndex\n    var closingBracketIndex = brackets.startIndex\n\
    \n    while openingBracketIndex < brackets.endIndex {\n        openingBracketIndex\
    \ = openingBracketIndex + 1\n        if openingBrackets[openingBracketIndex] !=\
    \ \")\" {\n            return false\n        }\n        openingBracketIndex =\
    \ openingBracketIndex + 1\n    }\n\n    while closingBracketIndex < brackets.endIndex\
    \ {\n        closingBracketIndex = closingBracketIndex + 1\n        if closingBrackets[closingBracketIndex]\
    \ != \")\" {\n            return false\n        }\n        closingBracketIndex\
    \ = closingBracketIndex + 1\n    }\n\n    return true", "    var bracketCount\
    \ = 0\n    var bracketStack = [String]()\n    for bracket in brackets {\n    \
    \    if bracket == \"(\" {\n            bracketCount++\n            bracketStack.append(bracket)\n\
    \        } else if bracket == \")\" {\n            if bracketCount > 0 {\n   \
    \             bracketCount--\n            } else {\n                return false\n\
    \            }\n            bracketStack.removeLast()\n        }\n    }\n    return\
    \ bracketCount == 0", "    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    let openingBracketCount = openingBrackets.count\n    let closingBracketCount\
    \ = closingBrackets.count\n    if openingBracketCount != closingBracketCount {\n\
    \        return false\n    }\n    for i in 0..<openingBracketCount {\n       \
    \ let openingBracket = openingBrackets[i]\n        let closingBracket = closingBrackets[i]\n\
    \        if openingBracket != closingBracket {\n            return false\n   \
    \     }\n    }\n    return true", "    var openingBrackets = brackets.characters\n\
    \    var closingBrackets = brackets.characters\n    var openingBracketsCount =\
    \ brackets.characters.count\n    var closingBracketsCount = brackets.characters.count\n\
    \    var openingBracketsIndex = 0\n    var closingBracketsIndex = 0\n\n    while\
    \ openingBracketsIndex < openingBracketsCount {\n        openingBracketsIndex\
    \ += 1\n        if openingBrackets[openingBracketsIndex] != \")\" {\n        \
    \    continue\n        }\n\n        closingBracketsIndex += 1\n        if closingBrackets[closingBracketsIndex]\
    \ != \"(\" {\n            continue\n        }\n\n        openingBracketsCount\
    \ -= 1\n        closingBracketsCount -= 1\n\n        if openingBracketsCount >\
    \ 0 {\n            continue\n        }\n\n        if closingBracketsCount > 0\
    \ {\n            continue\n        }\n\n        return true\n    }\n\n    return\
    \ false", "    let openingBrackets = brackets.characters.split(separator: CharacterSet.openingParenthesis)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n        .map(String.init)\n        .map(String.init)\n\
    \        .map(String.init)\n", "    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    let openingBracketsCount = openingBrackets.count\n    let closingBracketsCount\
    \ = closingBrackets.count\n    if openingBracketsCount != closingBracketsCount\
    \ {\n        return false\n    }\n    for i in 0..<openingBracketsCount {\n  \
    \      if openingBrackets[i] != closingBrackets[i] {\n            return false\n\
    \        }\n    }\n    return true", "    var openingBrackets = brackets.characters\n\
    \    var closingBrackets = brackets.characters\n\n    var openingBracketIndex\
    \ = openingBrackets.startIndex\n    var closingBracketIndex = closingBrackets.startIndex\n\
    \n    while openingBracketIndex < openingBrackets.endIndex {\n        if openingBrackets[openingBracketIndex]\
    \ != closingBrackets[closingBracketIndex] {\n            return false\n      \
    \  }\n\n        openingBracketIndex += 1\n        closingBracketIndex += 1\n \
    \   }\n\n    return true", "    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    \n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n    \n    for i in 0..<openingBrackets.count {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    \n\
    \    return true", "    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    \n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n    \n    for i in 0..<openingBrackets.count {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    \n\
    \    return true", "    let openingBrackets = brackets.characters.split{$0 ==\
    \ \")\"}.map(String.init)\n    let closingBrackets = brackets.characters.split{$0\
    \ == \"(\"}.map(String.init)\n    \n    for openingBracket in openingBrackets\
    \ {\n        if !closingBrackets.contains(openingBracket) {\n            return\
    \ false\n        }\n    }\n    return true", "    let openingBrackets = brackets.characters.split{$0\
    \ == \")\"}.map(String.init)\n    let closingBrackets = brackets.characters.split{$0\
    \ == \"(\"}.map(String.init)\n    return openingBrackets.count == closingBrackets.count",
  "    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for openingBracket\
    \ in openingBrackets {\n        if !closingBrackets.contains(where: { $0 == openingBracket\
    \ }) {\n            return false\n        }\n    }\n    \n    return true", " \
    \   var bracketCount = 0\n    for bracket in brackets {\n        if bracket ==\
    \ \"(\" {\n            bracketCount += 1\n        } else if bracket == \")\" {\n\
    \            bracketCount -= 1\n        }\n    }\n    return bracketCount == 0",
  "    let openingBrackets = brackets.characters.split{$0 == \")\"}.map(String.init)\n\
    \    let closingBrackets = brackets.characters.split{$0 == \"(\"}.map(String.init)\n\
    \    return openingBrackets.count == closingBrackets.count", "    var bracketCount\
    \ = 0\n    var openingBracketCount = 0\n    var closingBracketCount = 0\n    for\
    \ symbol in brackets {\n        switch symbol {\n        case \"(\":\n       \
    \     openingBracketCount++\n        case \"[\":\n            bracketCount++\n\
    \        case \"{\":\n            bracketCount++\n        case \"(\":\n      \
    \      closingBracketCount++\n        default:\n            bracketCount = 0\n\
    \        }\n    }\n    return bracketCount == openingBracketCount && bracketCount\
    \ == closingBracketCount", "    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    return openingBrackets.count == closingBrackets.count", "    var bracketCount\
    \ = 0\n    for char in brackets {\n        switch char {\n        case \"(\":\n\
    \            bracketCount += 1\n        case \"[\":\n            bracketCount\
    \ += 2\n        case \"{\":\n            bracketCount += 3\n        case \"}\"\
    :\n            bracketCount -= 3\n        default:\n            return false\n\
    \        }\n    }\n    return bracketCount == 0", "    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    let openingBracketsCount = openingBrackets.count\n    let closingBracketsCount\
    \ = closingBrackets.count\n    if openingBracketsCount == closingBracketsCount\
    \ {\n        return true\n    }\n    if openingBracketsCount > closingBracketsCount\
    \ {\n        return false\n    }\n    return true", "    var openingBrackets =\
    \ brackets.characters\n    var closingBrackets = brackets.characters\n\n    var\
    \ openingBracketsCount = 1\n    var closingBracketsCount = 1\n\n    for openingBracket\
    \ in openingBrackets {\n        if openingBracket == \"(\" {\n            openingBracketsCount\
    \ += 1\n        } else if openingBracket == \")\" {\n            openingBracketsCount\
    \ -= 1\n        }\n    }\n\n    for closingBracket in closingBrackets {\n    \
    \    if closingBracket == \"(\" {\n            closingBracketsCount += 1\n   \
    \     } else if closingBracket == \")\" {\n            closingBracketsCount -=\
    \ 1\n        }\n    }\n\n    return openingBracketsCount == 0 && closingBracketsCount\
    \ == 0", "    let openingBrackets = brackets.components(separatedBy: \"(\")\n\
    \    let closingBrackets = brackets.components(separatedBy: \")\")\n    guard\
    \ openingBrackets.count != closingBrackets.count else {\n        return false\n\
    \    }\n    for openingBracket in openingBrackets {\n        guard let closingBracket\
    \ = closingBrackets.first {\n            openingBracket == closingBracket\n  \
    \      } else {\n            return false\n        }\n    }\n    return true",
  "    var opening = brackets.characters\n    var closing = brackets.characters\n\
    \    var openingCount = brackets.characters.count\n    var closingCount = brackets.characters.count\n\
    \    var openingIndex = 0\n    var closingIndex = 0\n    while openingIndex <\
    \ openingCount {\n        opening = brackets.substringWithRange(NSMakeRange(openingIndex,\
    \ 1))\n        closing = brackets.substringWithRange(NSMakeRange(closingIndex,\
    \ 1))\n        if opening == \"(\" {\n            openingIndex++\n           \
    \ closingIndex++\n        } else if closing == \")\" {\n            openingIndex++\n\
    \            closingIndex++\n        } else if opening == \"{\" {\n          \
    \  openingIndex++\n            closingIndex++\n        } else if closing == \"\
    }\" {\n            openingIndex++\n            closingIndex++\n        } else\
    \ if opening == \"[\" {\n            openingIndex++\n            closingIndex++\n\
    \        } else if closing == \"]\" {\n            openingIndex++\n          \
    \  closingIndex++\n        } else if opening == \"<\" {\n            openingIndex++\n\
    \            closingIndex++\n        } else if closing == \">\" {\n          \
    \  openingIndex++\n            closingIndex++\n        } else if opening == \"\
    (\" {\n            openingIndex++\n        } else if closing == \")\" {\n    \
    \        openingIndex++\n        } else if opening == \"{\" {\n            openingIndex++\n\
    \        } else if closing == \"}\" {\n            openingIndex++\n        } else\
    \ if opening == \"[\" {\n            openingIndex++\n        } else if closing\
    \ == \"]\" {\n            openingIndex++\n        } else if opening == \"<\" {\n\
    \            openingIndex++\n        } else if closing == \">\" {\n          \
    \  openingIndex++\n        } else {\n            return false\n        }\n   \
    \ }\n    return true", "    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    if openingBrackets.count != closingBrackets.count {\n        return false\n\
    \    }\n    for openingBracket in openingBrackets {\n        let closingBracket\
    \ = closingBrackets.first(where: { $0 == openingBracket })\n        if closingBracket\
    \ == nil {\n            return false\n        }\n    }\n    return true", "  \
    \  let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for i in\
    \ 0..<openingBrackets.count {\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n            return false\n        }\n    }\n    \n    return true", "   \
    \ var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketsCount = brackets.characters.count\n    var closingBracketsCount\
    \ = brackets.characters.count\n    var openingBracketsIndex = 0\n    var closingBracketsIndex\
    \ = 0\n    var openingBracketsString = \"\"\n    var closingBracketsString = \"\
    \"\n    var openingBracketsStringIndex = 0\n    var closingBracketsStringIndex\
    \ = 0\n\n    while openingBracketsIndex < openingBracketsCount {\n        openingBracketsString\
    \ += String(openingBrackets[openingBracketsIndex])\n        openingBracketsIndex\
    \ += 1\n    }\n\n    while closingBracketsIndex < closingBracketsCount {\n   \
    \     closingBracketsString += String(closingBrackets[closingBracketsIndex])\n\
    \        closingBracketsIndex += 1\n    }\n\n    if openingBracketsString == closingBracketsString\
    \ {\n        return true\n    }\n\n    if openingBracketsString == \"(\" && closingBracketsString\
    \ == \")\" {\n        return true\n    }\n\n    if openingBracketsString == \"\
    (\" && closingBracketsString == \"()\" {\n        return true\n    }\n\n    if\
    \ openingBracketsString == \")\" && closingBracketsString == \"(\" {\n       \
    \ return true\n    }\n\n    if openingBracketsString == \")\" && closingBracketsString\
    \ == \"()\" {\n        return true\n    }\n\n    return false", "    let openingBrackets\
    \ = brackets.components(separatedBy: \"(\")\n    let closingBrackets = brackets.components(separatedBy:\
    \ \")\")\n    \n    if openingBrackets.count != closingBrackets.count {\n    \
    \    return false\n    }\n    \n    for i in 0..<openingBrackets.count {\n   \
    \     if openingBrackets[i] != closingBrackets[i] {\n            return false\n\
    \        }\n    }\n    \n    return true", "    var openingBrackets = brackets.characters\n\
    \    var closingBrackets = [String]()\n    var openingBracketsIndex = 0\n    var\
    \ closingBracketsIndex = 0\n    while openingBracketsIndex < openingBrackets.count\
    \ {\n        let openingBracket = openingBrackets[openingBracketsIndex]\n    \
    \    openingBracketsIndex += 1\n        if openingBracket == \"(\" {\n       \
    \     closingBrackets.append(openingBracket)\n            closingBracketsIndex\
    \ += 1\n        } else if openingBracket == \")\" {\n            if closingBracketsIndex\
    \ >= closingBrackets.count {\n                return false\n            }\n  \
    \          closingBracketsIndex += 1\n        } else {\n            return false\n\
    \        }\n    }\n    if openingBracketsIndex != closingBracketsIndex {\n   \
    \     return false\n    }\n    return true", "    var opening = brackets.characters\n\
    \    var closing = brackets.characters\n    var openingCount = brackets.characters.count\n\
    \    var closingCount = brackets.characters.count\n\n    while opening.count >\
    \ 0 {\n        opening.removeFirst()\n        openingCount--\n    }\n\n    while\
    \ closing.count > 0 {\n        closing.removeLast()\n        closingCount--\n\
    \    }\n\n    if openingCount != closingCount {\n        return false\n    }\n\
    \n    if opening.count != 0 {\n        return true\n    }\n\n    return brackets.characters.count\
    \ == 0", "    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        guard openingBrackets[openingBracketIndex] ==\
    \ \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBrackets[openingBracketIndex] == \")\" else {\n \
    \           return false\n        }\n        openingBracketIndex += 1\n      \
    \  guard openingBrackets[openingBracketIndex] == \")\" else {\n            return\
    \ false\n        }\n        openingBracketIndex += 1\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBrackets[openingBracketIndex] == \")\" else {\n \
    \           return false\n        }\n        openingBracketIndex += 1\n      \
    \  guard openingBrackets[openingBracketIndex] == \")\" else {\n            return\
    \ false\n        }\n        openingBracketIndex += 1\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBrackets[openingBracketIndex] == \")\" else {\n \
    \           return false\n        }\n        openingBracketIndex += 1\n      \
    \  guard openingBrackets[openingBracketIndex] == \")\" else {\n            return\
    \ false\n        }\n        openingBracketIndex += 1\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBrackets[openingBracketIndex] == \")\" else {\n \
    \           return false\n        }\n        openingBracketIndex += 1\n      \
    \  guard openingBrackets[openingBracketIndex] == \")\" else {\n            return\
    \ false\n        }\n        openingBracketIndex += 1\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBrackets[openingBracketIndex] == \")\" else {\n \
    \           return false\n        }\n        openingBracketIndex += 1\n      \
    \  guard openingBrackets[openingBracketIndex] == \")\" else {\n            return\
    \ false\n        }\n        open", "    var openingBrackets = brackets.characters\n\
    \    var closingBrackets = brackets.characters\n    openingBrackets.removeLast()\n\
    \    closingBrackets.removeFirst()\n    var openingBracketsCount = openingBrackets.count\n\
    \    var closingBracketsCount = closingBrackets.count\n    if openingBracketsCount\
    \ != closingBracketsCount {\n        return false\n    }\n    var openingBracketsIndex\
    \ = 0\n    var closingBracketsIndex = 0\n    while openingBracketsIndex < openingBracketsCount\
    \ {\n        if openingBrackets[openingBracketsIndex] != closingBrackets[closingBracketsIndex]\
    \ {\n            return false\n        }\n        openingBracketsIndex += 1\n\
    \        closingBracketsIndex += 1\n    }\n    return true", "    var opening\
    \ = brackets.characters\n    var closing = brackets.characters\n    opening.removeFirst()\n\
    \    closing.removeLast()\n    if opening.isEmpty {\n        return closing.isEmpty\n\
    \    }\n    if closing.isEmpty {\n        return opening.isEmpty\n    }\n    if\
    \ opening.first == closing.first {\n        return correct_bracketing(opening.dropFirst(),\
    \ closing.dropLast())\n    }\n    return opening.first == closing.last", "   \
    \ var bracketCount = 0\n    var openingBracketCount = 0\n    var closingBracketCount\
    \ = 0\n    for char in brackets {\n        switch char {\n        case \"(\":\n\
    \            openingBracketCount++\n        case \"[\":\n            bracketCount++\n\
    \        case \"{\":\n            bracketCount++\n        case \"(\":\n      \
    \      closingBracketCount++\n        default:\n            bracketCount = 0\n\
    \        }\n    }\n    return bracketCount == openingBracketCount && bracketCount\
    \ == closingBracketCount", "    var opening = brackets.characters\n    var closing\
    \ = brackets.characters\n    var openingCount = brackets.characters.count\n  \
    \  var closingCount = brackets.characters.count\n    var openingIndex = 0\n  \
    \  var closingIndex = 0\n    while openingIndex < openingCount {\n        openingIndex\
    \ += 1\n        if openingIndex < openingCount {\n            if opening[openingIndex]\
    \ == '(' {\n                openingIndex += 1\n            }\n            if opening[openingIndex]\
    \ == ')' {\n                openingIndex += 1\n            }\n        }\n    }\n\
    \    while closingIndex < closingCount {\n        closingIndex += 1\n        if\
    \ closingIndex < closingCount {\n            if closing[closingIndex] == '(' {\n\
    \                closingIndex += 1\n            }\n            if closing[closingIndex]\
    \ == ')' {\n                closingIndex += 1\n            }\n        }\n    }\n\
    \    if openingIndex == openingCount {\n        return true\n    }\n    if closingIndex\
    \ == closingCount {\n        return false\n    }\n    if openingIndex < closingIndex\
    \ {\n        return true\n    }\n    return false", "    var openingBrackets =\
    \ brackets.characters\n    var closingBrackets = brackets.characters\n    var\
    \ openingBracketIndex = brackets.startIndex\n    var closingBracketIndex = brackets.startIndex\n\
    \    var openingBracketCount = 0\n    var closingBracketCount = 0\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        switch brackets[openingBracketIndex] {\n    \
    \    case \")\":\n            closingBracketCount++\n            if closingBracketCount\
    \ > 1 {\n                openingBracketCount--\n            }\n        case \"\
    )\":\n            openingBracketCount++\n            if openingBracketCount >\
    \ 1 {\n                closingBracketCount--\n            }\n        default:\n\
    \            openingBracketCount = 0\n            closingBracketCount = 0\n  \
    \      }\n        openingBracketIndex++\n    }\n    return openingBracketCount\
    \ == closingBracketCount", "    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    \n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n    \n    for i in 0..<openingBrackets.count {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    \n\
    \    return true", "    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    \n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n    \n    for i in 0..<openingBrackets.count {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    \n\
    \    return true", "    var bracketCount = 0\n    var openingBracketCount = 0\n\
    \    var closingBracketCount = 0\n    for bracket in brackets {\n        switch\
    \ bracket {\n        case \"(\":\n            openingBracketCount++\n        case\
    \ \"[\":\n            bracketCount++\n        case \"{\":\n            bracketCount++\n\
    \        case \"(\":\n            closingBracketCount++\n        default:\n  \
    \          bracketCount = 0\n        }\n    }\n    return bracketCount == openingBracketCount\
    \ && bracketCount == closingBracketCount", "    var openingBrackets = brackets.characters\n\
    \    var closingBrackets = brackets.characters\n    var openingBracketIndex =\
    \ brackets.startIndex\n    var closingBracketIndex = brackets.startIndex\n\n \
    \   while openingBracketIndex < brackets.endIndex {\n        let openingBracket\
    \ = brackets[openingBracketIndex]\n        let closingBracket = brackets[closingBracketIndex]\n\
    \n        if openingBracket == \"(\" {\n            openingBracketIndex += 1\n\
    \        } else if openingBracket == \")\" {\n            closingBracketIndex\
    \ -= 1\n        } else if openingBracket == \"{\" {\n            openingBracketIndex\
    \ += 1\n            closingBracketIndex += 1\n        } else if openingBracket\
    \ == \"}\" {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ -= 1\n        } else if openingBracket == \"[\" {\n            openingBracketIndex\
    \ += 1\n            closingBracketIndex += 1\n        } else if openingBracket\
    \ == \"]\" {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ -= 1\n        } else if openingBracket == \"<\" {\n            openingBracketIndex\
    \ += 1\n            closingBracketIndex += 1\n        } else if openingBracket\
    \ == \">\" {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ -= 1\n        }\n\n        if openingBracketIndex < closingBracketIndex {\n\
    \            openingBrackets.removeAtIndex(openingBracketIndex)\n            closingBrackets.removeAtIndex(closingBracketIndex)\n\
    \        }\n    }\n\n    return openingBrackets.count == 0", "    var bracketsStack\
    \ = [String]()\n    var bracketsStackCopy = [String]()\n    var openingBrackets\
    \ = brackets.characters\n    var closingBrackets = brackets.characters.reversed()\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.endIndex\n    var openingBracketCount = 0\n    var closingBracketCount\
    \ = 0\n    var openingBracketChar = \"\"\n    var closingBracketChar = \"\"\n\
    \    var openingBracketCharIndex = 0\n    var closingBracketCharIndex = 0\n  \
    \  while openingBracketIndex < brackets.endIndex {\n        openingBracketChar\
    \ = openingBrackets[openingBracketIndex]\n        openingBracketCharIndex = openingBracketIndex\n\
    \        openingBracketCount++\n        bracketsStack.append(openingBracketChar)\n\
    \        bracketsStackCopy.append(openingBracketChar)\n        openingBracketIndex++\n\
    \    }\n    while closingBracketIndex < brackets.endIndex {\n        closingBracketChar\
    \ = closingBrackets[closingBracketIndex]\n        closingBracketCharIndex = closingBracketIndex\n\
    \        closingBracketCount++\n        bracketsStack.append(closingBracketChar)\n\
    \        bracketsStackCopy.append(closingBracketChar)\n        closingBracketIndex++\n\
    \    }\n    if openingBracketCount != closingBracketCount {\n        return false\n\
    \    }\n    while openingBracketIndex < brackets.endIndex {\n        openingBracketChar\
    \ = openingBrackets[openingBracketIndex]\n        openingBracketCharIndex = openingBracketIndex\n\
    \        openingBracketCount--\n        if openingBracketCount < 0 {\n       \
    \     return false\n        }\n        bracketsStackCopy.removeLast()\n      \
    \  bracketsStack.removeLast()\n        if openingBracketChar == closingBrackets[closingBracketIndex]\
    \ {\n            bracketsStackCopy.removeLast()\n            bracketsStack.removeLast()\n\
    \            closingBracketIndex++\n        } else {\n            bracketsStack.append(openingBracketChar)\n\
    \            bracketsStackCopy.append(openingBracketChar)\n        }\n    }\n\
    \    if openingBracketCount != 0 {\n        return false\n    }\n    while closingBracketIndex\
    \ < brackets.endIndex {\n        closingBracketChar = closingBrackets[closingBracketIndex]\n\
    \        closingBracketCharIndex = closingBracketIndex\n        closingBracketCount--\n\
    \        if closingBracketCount < 0 {\n", "    var openingBrackets = brackets.characters\n\
    \    var closingBrackets = brackets.characters\n    var openingBracketIndex =\
    \ brackets.startIndex\n    var closingBracketIndex = brackets.startIndex\n\n \
    \   while openingBracketIndex < brackets.endIndex {\n        openingBracketIndex\
    \ = openingBracketIndex.successor()\n        closingBracketIndex = closingBracketIndex.successor()\n\
    \n        if openingBracketIndex == brackets.endIndex {\n            openingBracketIndex\
    \ = brackets.startIndex\n        }\n\n        if closingBracketIndex == brackets.endIndex\
    \ {\n            closingBracketIndex = brackets.startIndex\n        }\n\n    \
    \    if openingBrackets[openingBracketIndex] != closingBrackets[closingBracketIndex]\
    \ {\n            return false\n        }\n    }\n\n    return true", "    var\
    \ openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    openingBrackets.removeLast()\n    closingBrackets.removeLast()\n    if openingBrackets.isEmpty\
    \ {\n        return false\n    }\n    if closingBrackets.isEmpty {\n        return\
    \ true\n    }\n    if openingBrackets.first != closingBrackets.first {\n     \
    \   return false\n    }\n    if openingBrackets.last != closingBrackets.last {\n\
    \        return false\n    }\n    return correct_bracketing(openingBrackets, closingBrackets)",
  "    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for openingBracket\
    \ in openingBrackets {\n        let closingBracket = closingBrackets.first(where:\
    \ { $0 == openingBracket })\n        \n        if closingBracket == nil {\n  \
    \          return false\n        }\n    }\n    \n    return true", "    let openingBrackets\
    \ = brackets.components(separatedBy: \"(\")\n    let closingBrackets = brackets.components(separatedBy:\
    \ \")\")\n    \n    if openingBrackets.count != closingBrackets.count {\n    \
    \    return false\n    }\n    \n    for i in 0..<openingBrackets.count {\n   \
    \     if openingBrackets[i] != closingBrackets[i] {\n            return false\n\
    \        }\n    }\n    \n    return true", "    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    \n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n    \n    for openingBracket in openingBrackets {\n        let\
    \ closingBracket = closingBrackets.firstIndex(of: openingBracket)\n        \n\
    \        if closingBracket == nil {\n            return false\n        }\n   \
    \     \n        if openingBracket != closingBracket! {\n            return false\n\
    \        }\n    }\n    \n    return true", "    var opening = brackets.characters\n\
    \    var closing = brackets.characters\n    var openingCount = brackets.characters.count\n\
    \    var closingCount = brackets.characters.count\n    var openingIndex = 0\n\
    \    var closingIndex = 0\n\n    while openingIndex < openingCount {\n       \
    \ opening = brackets.substringWithRange(NSMakeRange(openingIndex, 1))\n      \
    \  closing = brackets.substringWithRange(NSMakeRange(closingIndex, 1))\n     \
    \   openingIndex = openingIndex + 1\n        closingIndex = closingIndex + 1\n\
    \n        if opening == \"(\" {\n            openingCount--\n        } else if\
    \ closing == \")\" {\n            closingCount--\n        }\n    }\n\n    return\
    \ openingCount == closingCount", "    var openingBrackets = brackets.characters\n\
    \    var closingBrackets = brackets.characters\n\n    var openingBracketIndex\
    \ = openingBrackets.startIndex\n    var closingBracketIndex = closingBrackets.startIndex\n\
    \n    while openingBracketIndex < openingBrackets.endIndex {\n        if openingBrackets[openingBracketIndex]\
    \ != closingBrackets[closingBracketIndex] {\n            return false\n      \
    \  }\n\n        openingBracketIndex += 1\n        closingBracketIndex += 1\n \
    \   }\n\n    return true", "    var openingBrackets = brackets.characters\n  \
    \  var closingBrackets = brackets.characters\n    openingBrackets.removeLast()\n\
    \    closingBrackets.removeFirst()\n    if openingBrackets.isEmpty() {\n     \
    \   return true\n    }\n    if closingBrackets.isEmpty() {\n        return false\n\
    \    }\n    if openingBrackets.first == closingBrackets.last {\n        return\
    \ true\n    }\n    if openingBrackets.first == closingBrackets.first {\n     \
    \   return false\n    }\n    if openingBrackets.last == closingBrackets.first\
    \ {\n        return false\n    }\n    if openingBrackets.last == closingBrackets.last\
    \ {\n        return false\n    }\n    return true", "    let openingBrackets =\
    \ brackets.characters.split{$0 == \")\"}.map(String.init)\n    let closingBrackets\
    \ = brackets.characters.split{$0 == \"(\"}.map(String.init)\n    return openingBrackets.count\
    \ == closingBrackets.count", "    var opening = brackets.characters\n    var closing\
    \ = brackets.characters\n    opening.removeLast()\n    closing.removeFirst()\n\
    \    if opening.isEmpty {\n        return closing.isEmpty && closing.count ==\
    \ 0\n    }\n    if closing.isEmpty {\n        return closing.count == 0\n    }\n\
    \    if opening.count == 0 {\n        return closing.count == 0\n    }\n    if\
    \ opening.count != closing.count {\n        return false\n    }\n    if opening.count\
    \ == 1 {\n        return opening.first! == closing.first!\n    }\n    if opening.count\
    \ == 2 {\n        return opening.first! == closing.last!\n    }\n    if opening.count\
    \ == 3 {\n        return opening.first! == closing.last!\n    }\n    if opening.count\
    \ == 4 {\n        return opening.first! == closing.last!\n    }\n    if opening.count\
    \ == 5 {\n        return opening.first! == closing.last!\n    }\n    if opening.count\
    \ == 6 {\n        return opening.first! == closing.last!\n    }\n    if opening.count\
    \ == 7 {\n        return opening.first! == closing.last!\n    }\n    if opening.count\
    \ == 8 {\n        return opening.first! == closing.last!\n    }\n    if opening.count\
    \ == 9 {\n        return opening.first! == closing.last!\n    }\n    if opening.count\
    \ == 10 {\n        return opening.first! == closing.last!\n    }\n    if opening.count\
    \ == 11 {\n        return opening.first! == closing.last!\n    }\n    if opening.count\
    \ == 12 {\n        return opening.first! == closing.last!\n    }\n    if opening.count\
    \ == 13 {\n        return opening.first! == closing.last!\n    }\n    if opening.count\
    \ == 14 {\n        return opening.first! == closing.last!\n    }\n    if opening.count\
    \ == 15 {\n        return opening.first! == closing.last!\n    }\n    if opening.count\
    \ == 16 {\n        return opening.first! == closing.last!\n    }\n    if opening.count\
    \ == 17 {\n        return opening.first! == closing.last!\n    }\n    if opening.count\
    \ == 18 {\n        return opening.first! == closing.last!\n    }\n    if opening.count\
    \ == 19 {\n        return opening.first! == closing.last!\n    }\n    if opening.count\
    \ == 20 {\n        return opening.first! == closing.last!\n    }\n    if opening.count\
    \ == 21 {\n        return opening.first! == closing.last!\n    }\n    if opening.count\
    \ == ", "    let openingBrackets = brackets.components(separatedBy: \"(\")\n \
    \   let closingBrackets = brackets.components(separatedBy: \")\")\n    \n    if\
    \ openingBrackets.count != closingBrackets.count {\n        return false\n   \
    \ }\n    \n    for openingBracket in openingBrackets {\n        if let closingBracket\
    \ = closingBrackets.firstIndex(of: openingBracket) {\n            closingBrackets.remove(at:\
    \ closingBracket)\n        }\n    }\n    \n    return openingBrackets.count ==\
    \ 0", "    let openingBrackets = brackets.components(separatedBy: \"(\")\n   \
    \ let closingBrackets = brackets.components(separatedBy: \")\")\n    \n    if\
    \ openingBrackets.count != closingBrackets.count {\n        return false\n   \
    \ }\n    \n    for i in 0..<openingBrackets.count {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    \n\
    \    return true", "    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketsCount = brackets.characters.count\n\
    \    var closingBracketsCount = brackets.characters.count\n    var openingBracketsIndex\
    \ = 0\n    var closingBracketsIndex = 0\n\n    while openingBracketsIndex < openingBracketsCount\
    \ {\n        openingBracketsIndex += 1\n        if openingBrackets[openingBracketsIndex]\
    \ != \")\" {\n            return false\n        }\n        openingBracketsIndex\
    \ += 1\n    }\n\n    while closingBracketsIndex < closingBracketsCount {\n   \
    \     closingBracketsIndex += 1\n        if closingBrackets[closingBracketsIndex]\
    \ != \"(\" {\n            return false\n        }\n        closingBracketsIndex\
    \ += 1\n    }\n\n    return openingBracketsIndex == closingBracketsIndex", " \
    \   var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketCount = brackets.characters.count\n    var closingBracketCount\
    \ = brackets.characters.count\n\n    if openingBracketCount > closingBracketCount\
    \ {\n        openingBracketCount = closingBracketCount\n    }\n\n    if openingBracketCount\
    \ == 0 {\n        return true\n    }\n\n    if openingBracketCount == 1 {\n  \
    \      return false\n    }\n\n    if openingBracketCount > 1 {\n        openingBracketCount\
    \ = openingBracketCount - 1\n    }\n\n    for index in 0..<openingBracketCount\
    \ {\n        let openingBracket = brackets.characters[index]\n        let closingBracket\
    \ = brackets.characters[index + 1]\n        if openingBracket != closingBracket\
    \ {\n            return false\n        }\n    }\n\n    return true", "    let\
    \ openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for i in\
    \ 0..<openingBrackets.count {\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n            return false\n        }\n    }\n    \n    return true", "   \
    \ var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n\n    while openingBracketIndex < brackets.endIndex {\n\
    \        if openingBrackets[openingBracketIndex] != closingBrackets[closingBracketIndex]\
    \ {\n            return false\n        }\n        openingBracketIndex += 1\n \
    \       closingBracketIndex += 1\n    }\n    return true", "    let openingBrackets\
    \ = brackets.components(separatedBy: \"(\")\n    let closingBrackets = brackets.components(separatedBy:\
    \ \")\")\n    let openingBracketCount = openingBrackets.count\n    let closingBracketCount\
    \ = closingBrackets.count\n    if openingBracketCount != closingBracketCount {\n\
    \        return false\n    }\n    for openingBracket in openingBrackets {\n  \
    \      let closingBracketIndex = openingBrackets.firstIndex(of: openingBracket)\n\
    \        if closingBracketIndex == nil {\n            return false\n        }\n\
    \        let closingBracket = openingBrackets[closingBracketIndex!]\n        if\
    \ openingBracket != closingBracket {\n            return false\n        }\n  \
    \  }\n    return true", "    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    \n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n    \n    for i in 0..<openingBrackets.count {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    \n\
    \    return true", "    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n\n    var openingBracketsCount = 1\n    var closingBracketsCount\
    \ = 1\n\n    for index in 0..<openingBrackets.count {\n        let openingBracket\
    \ = openingBrackets[index]\n        let closingBracket = closingBrackets[index]\n\
    \n        if openingBracket == \"(\" {\n            openingBracketsCount += 1\n\
    \        } else if openingBracket == \")\" {\n            closingBracketsCount\
    \ += 1\n        }\n\n        if openingBracketsCount != closingBracketsCount {\n\
    \            return false\n        }\n    }\n\n    return true", "    var openingBrackets\
    \ = brackets.characters\n    var closingBrackets = brackets.characters\n    var\
    \ openingBracketIndex = brackets.startIndex\n    var closingBracketIndex = brackets.startIndex\n\
    \    while openingBracketIndex < brackets.endIndex {\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBrackets[openingBracketIndex] == \")\" else {\n \
    \           return false\n        }\n        openingBracketIndex += 1\n      \
    \  guard openingBrackets[openingBracketIndex] == \")\" else {\n            return\
    \ false\n        }\n        openingBracketIndex += 1\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBrackets[openingBracketIndex] == \")\" else {\n \
    \           return false\n        }\n        openingBracketIndex += 1\n      \
    \  guard openingBrackets[openingBracketIndex] == \")\" else {\n            return\
    \ false\n        }\n        openingBracketIndex += 1\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBrackets[openingBracketIndex] == \")\" else {\n \
    \           return false\n        }\n        openingBracketIndex += 1\n      \
    \  guard openingBrackets[openingBracketIndex] == \")\" else {\n            return\
    \ false\n        }\n        openingBracketIndex += 1\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBrackets[openingBracketIndex] == \")\" else {\n \
    \           return false\n        }\n        openingBracketIndex += 1\n      \
    \  guard openingBrackets[openingBracketIndex] == \")\" else {\n            return\
    \ false\n        }\n        openingBracketIndex += 1\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBrackets[openingBracketIndex] == \")\" else {\n \
    \           return false\n        }\n        openingBracketIndex += 1\n      \
    \  guard openingBrackets[openingBracketIndex] == \")\" else {\n            return\
    \ false\n        }\n        open", "    let openingBrackets = brackets.characters\n\
    \        .filter({ $0 != \"(\" })\n        .filter({ $0 != \")\" })\n        .map({\
    \ String($0) })\n    let closingBrackets = brackets.characters\n        .filter({\
    \ $0 != \"(\" })\n        .filter({ $0 != \")\" })\n        .map({ String($0)\
    \ })\n    return openingBrackets.count == closingBrackets.count", "    var bracketCount\
    \ = 0\n    var openingBracketCount = 0\n    var closingBracketCount = 0\n    for\
    \ char in brackets {\n        switch char {\n        case \"(\":\n           \
    \ openingBracketCount += 1\n        case \"[\":\n            bracketCount += 1\n\
    \        case \"{\":\n            bracketCount += 1\n        case \"(\":\n   \
    \         bracketCount += 1\n        case \"}\":\n            bracketCount +=\
    \ 1\n        default:\n            if openingBracketCount > closingBracketCount\
    \ {\n                return false\n            }\n        }\n    }\n    return\
    \ bracketCount == openingBracketCount", "    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    \n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n    \n    for i in 0..<openingBrackets.count {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    \n\
    \    return true", "    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        let openingBracket = brackets[openingBracketIndex]\n\
    \        if openingBracket == \"(\" {\n            openingBracketIndex += 1\n\
    \            if openingBracketIndex < brackets.endIndex {\n                let\
    \ closingBracket = brackets[openingBracketIndex]\n                if closingBracket\
    \ == \")\" {\n                    openingBracketIndex += 1\n                 \
    \   if openingBracketIndex < brackets.endIndex {\n                        let\
    \ closingBracket = brackets[openingBracketIndex]\n                        if closingBracket\
    \ == \")\" {\n                            openingBracketIndex += 1\n         \
    \                   if openingBracketIndex < brackets.endIndex {\n           \
    \                     let closingBracket = brackets[openingBracketIndex]\n   \
    \                             if closingBracket == \")\" {\n                 \
    \                   openingBracketIndex += 1\n                               \
    \     if openingBracketIndex < brackets.endIndex {\n                         \
    \               let closingBracket = brackets[openingBracketIndex]\n         \
    \                               if closingBracket == \")\" {\n               \
    \                             openingBracketIndex += 1\n                     \
    \                       if openingBracketIndex < brackets.endIndex {\n       \
    \                                         let closingBracket = brackets[openingBracketIndex]\n\
    \                                                if closingBracket == \")\" {\n\
    \                                                    openingBracketIndex += 1\n\
    \                                                    if openingBracketIndex <\
    \ brackets.endIndex {\n                                                      \
    \  let closingBracket = brackets[openingBracketIndex]\n                      \
    \                                  if closingBracket == \")\" {\n            \
    \                                                openingBracketIndex += 1\n  \
    \                                                          if openingBracketIndex\
    \ < brackets.endIndex {\n                                                    \
    \            let closingBracket = brackets[openingBracketIndex]\n            \
    \                                                    if closingBracket == \")\"\
    \ {\n                                                                    openingBracketIndex\
    \ += 1\n                                                                    if\
    \ openingBracketIndex < brackets.endIndex {\n                                \
    \                                        let closingBracket = brackets[openingBracketIndex]\n\
    \                                                                        if closingBracket\
    \ == \")\" {\n                                                            openingBracketIndex\
    \ += 1\n                                                            if openingBracketIndex\
    \ < brackets.endIndex {\n                                                    \
    \            let closingBracket = brackets[openingBracketIndex]\n            \
    \                                                    if closingBracket == \")\"\
    \ {\n                                                                    openingBracketIndex\
    \ += 1\n                                                                    if\
    \ openingBracketIndex < brackets.endIndex {", "    var openingBrackets = brackets.characters\n\
    \    var closingBrackets = brackets.characters\n    var openingBracketIndex =\
    \ brackets.startIndex\n    var closingBracketIndex = brackets.startIndex\n\n \
    \   while openingBracketIndex < brackets.endIndex {\n        let openingBracket\
    \ = brackets[openingBracketIndex]\n        let closingBracket = brackets[closingBracketIndex]\n\
    \n        if openingBracket == \"(\" {\n            openingBracketIndex += 1\n\
    \        } else if openingBracket == \")\" {\n            closingBracketIndex\
    \ += 1\n        } else if openingBracket == \"{\" {\n            openingBracketIndex\
    \ += 1\n            closingBracketIndex += 1\n        } else if openingBracket\
    \ == \"}\" {\n            openingBracketIndex += 1\n        } else if openingBracket\
    \ == \"<\" {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ += 1\n        } else if openingBracket == \">\" {\n            openingBracketIndex\
    \ += 1\n            closingBracketIndex += 1\n        } else if openingBracket\
    \ == \"[\" {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ += 1\n        } else if openingBracket == \"]\" {\n            openingBracketIndex\
    \ += 1\n        } else if openingBracket == \"(\" {\n            openingBracketIndex\
    \ += 1\n        } else if openingBracket == \")\" {\n            closingBracketIndex\
    \ += 1\n        } else if openingBracket == \"{\" {\n            openingBracketIndex\
    \ += 1\n            closingBracketIndex += 1\n        } else if openingBracket\
    \ == \"}\" {\n            openingBracketIndex += 1\n        } else if openingBracket\
    \ == \"<\" {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ += 1\n        } else if openingBracket == \">\" {\n            openingBracketIndex\
    \ += 1\n            closingBracketIndex += 1\n        } else if openingBracket\
    \ == \"[\" {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ += 1\n        } else if openingBracket == \"]\" {\n            openingBracketIndex\
    \ += 1\n        }\n\n        openingBrackets[openingBracketIndex] = closingBracket\n\
    \        closingBrackets[closingBracketIndex] = openingBracket\n    }\n\n    return\
    \ openingBracketIndex == closingBracketIndex", "    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    \n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n    \n    for i in 0..<openingBrackets.count {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    \n\
    \    return true", "    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    \n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n    \n    for openingBracket in openingBrackets {\n        if\
    \ let closingBracket = closingBrackets.firstIndex(of: openingBracket) {\n    \
    \        closingBrackets.remove(at: closingBracket)\n        }\n    }\n    \n\
    \    return openingBrackets.count == 0", "    var openingBrackets = brackets.characters\n\
    \    var closingBrackets = brackets.characters\n    openingBrackets.removeLast()\n\
    \    closingBrackets.removeFirst()\n    for openingBracket in openingBrackets\
    \ {\n        if closingBrackets.contains(openingBracket) {\n            return\
    \ false\n        }\n    }\n    return true", "    let openingBrackets = brackets.characters.split{$0\
    \ == \")\"}.map(String.init)\n    let closingBrackets = brackets.characters.split{$0\
    \ == \"(\"}.map(String.init)\n    return openingBrackets.count == closingBrackets.count",
  "    let openingBrackets = brackets.characters\n        .filter { ($0 != \"(\")\
    \ && ($0 != \")\") }\n        .map { String($0) }\n    let closingBrackets = brackets.characters\n\
    \        .filter { ($0 != \"(\") && ($0 != \")\") }\n        .map { String($0)\
    \ }\n    return openingBrackets.count == closingBrackets.count", "    var bracketCount\
    \ = 0\n    var openingBracketCount = 0\n    var closingBracketCount = 0\n    for\
    \ character in brackets {\n        switch character {\n        case \"(\":\n \
    \           openingBracketCount += 1\n        case \"[\":\n            bracketCount\
    \ += 1\n        case \"{\":\n            bracketCount += 1\n        case \"(\"\
    :\n            closingBracketCount += 1\n        case \")\":\n            closingBracketCount\
    \ += 1\n        default:\n            return false\n        }\n    }\n    if bracketCount\
    \ != openingBracketCount {\n        return false\n    }\n    if bracketCount !=\
    \ closingBracketCount {\n        return false\n    }\n    return true", "    var\
    \ bracketStack = [String]()\n    var openingBrackets = [String]()\n    var closingBrackets\
    \ = [String]()\n\n    for bracket in brackets {\n        if bracket == \"(\" {\n\
    \            bracketStack.append(bracket)\n            openingBrackets.append(bracket)\n\
    \        } else if bracket == \")\" {\n            if bracketStack.count > 0 {\n\
    \                bracketStack.removeLast()\n                closingBrackets.append(bracket)\n\
    \            } else {\n                return false\n            }\n        }\
    \ else if bracketStack.count > 0 {\n            if bracketStack.last == bracket\
    \ {\n                bracketStack.removeLast()\n            } else {\n       \
    \         return false\n            }\n        } else {\n            return false\n\
    \        }\n    }\n\n    if bracketStack.count != 0 {\n        return false\n\
    \    }\n\n    return openingBrackets.count == closingBrackets.count", "    let\
    \ openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for i in\
    \ 0..<openingBrackets.count {\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n            return false\n        }\n    }\n    \n    return true", "   \
    \ var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketsCount = brackets.characters.count\n    var closingBracketsCount\
    \ = brackets.characters.count\n    var openingBracketsIndex = 0\n    var closingBracketsIndex\
    \ = 0\n\n    while openingBracketsIndex < openingBracketsCount {\n        openingBracketsIndex\
    \ += 1\n        if openingBrackets[openingBracketsIndex] != \")\" {\n        \
    \    continue\n        }\n\n        openingBracketsIndex += 1\n        if openingBrackets[openingBracketsIndex]\
    \ != \"(\" {\n            continue\n        }\n\n        openingBracketsIndex\
    \ += 1\n        if openingBrackets[openingBracketsIndex] != \"(\" {\n        \
    \    continue\n        }\n\n        openingBracketsIndex += 1\n        if openingBrackets[openingBracketsIndex]\
    \ != \"(\" {\n            continue\n        }\n\n        openingBracketsIndex\
    \ += 1\n        if openingBrackets[openingBracketsIndex] != \"(\" {\n        \
    \    continue\n        }\n\n        openingBracketsIndex += 1\n        if openingBrackets[openingBracketsIndex]\
    \ != \"(\" {\n            continue\n        }\n\n        openingBracketsIndex\
    \ += 1\n        if openingBrackets[openingBracketsIndex] != \"(\" {\n        \
    \    continue\n        }\n\n        openingBracketsIndex += 1\n        if openingBrackets[openingBracketsIndex]\
    \ != \"(\" {\n            continue\n        }\n\n        openingBracketsIndex\
    \ += 1\n        if openingBrackets[openingBracketsIndex] != \"(\" {\n        \
    \    continue\n        }\n\n        openingBracketsIndex += 1\n        if openingBrackets[openingBracketsIndex]\
    \ != \"(\" {\n            continue\n        }\n\n        openingBracketsIndex\
    \ += 1\n        if openingBrackets[openingBracketsIndex] != \"(\" {\n        \
    \    continue\n        }\n\n        openingBracketsIndex += 1\n        if openingBrackets[openingBracketsIndex]\
    \ != \"(\" {\n            continue\n        }\n\n        openingBracketsIndex\
    \ += 1\n        if openingBrackets[openingBracketsIndex] != \"(\" {\n        \
    \    continue\n        }\n\n        openingBracketsIndex += 1\n        if openingBrackets[openingBracketsIndex]\
    \ != \"(\" {\n            continue\n        }\n\n        openingBra", "    var\
    \ opening = brackets.characters\n    var closing = brackets.characters\n    var\
    \ openingCount = brackets.characters.count\n    var closingCount = brackets.characters.count\n\
    \    var openingIndex = 0\n    var closingIndex = 0\n    var openingChar = opening[openingIndex]\n\
    \    var closingChar = closing[closingIndex]\n\n    while openingIndex < openingCount\
    \ {\n        openingIndex += 1\n        openingChar = opening[openingIndex]\n\
    \        if openingChar == closingChar {\n            closingIndex += 1\n    \
    \        closingChar = closing[closingIndex]\n        } else {\n            return\
    \ false\n        }\n    }\n    return true", "    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    \n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n    \n    for openingBracket in openingBrackets {\n        if\
    \ !closingBrackets.contains(where: { $0 == openingBracket }) {\n            return\
    \ false\n        }\n    }\n    \n    return true", "    var openingBrackets =\
    \ brackets.characters\n    var closingBrackets = brackets.characters\n    var\
    \ openingBracketCount = brackets.characters.count\n    var closingBracketCount\
    \ = brackets.characters.count\n    var openingBracketIndex = 0\n    var closingBracketIndex\
    \ = 0\n    while openingBracketIndex < openingBracketCount {\n        openingBracketIndex\
    \ = openingBrackets.indexOf('(', openingBracketIndex)\n        if openingBracketIndex\
    \ == NSNotFound {\n            return false\n        }\n        openingBracketCount--\n\
    \        closingBracketIndex = closingBrackets.indexOf(')', openingBracketIndex)\n\
    \        if closingBracketIndex == NSNotFound {\n            return false\n  \
    \      }\n        closingBracketCount--\n        if openingBracketCount < 0 ||\
    \ closingBracketCount < 0 {\n            return false\n        }\n        if openingBracketCount\
    \ > closingBracketCount {\n            return false\n        }\n        if openingBrackets[openingBracketIndex]\
    \ != closingBrackets[closingBracketIndex] {\n            return false\n      \
    \  }\n    }\n    return true", "    var openingBrackets = brackets.characters\n\
    \    var closingBrackets = brackets.characters\n    var openingBracketsCount =\
    \ brackets.characters.count\n    var closingBracketsCount = brackets.characters.count\n\
    \n    if openingBracketsCount > closingBracketsCount {\n        openingBracketsCount\
    \ = closingBracketsCount\n    }\n\n    for openingBracket in 0..<openingBracketsCount\
    \ {\n        if openingBrackets[openingBracket] != closingBrackets[openingBracket]\
    \ {\n            return false\n        }\n    }\n\n    return true", "    var\
    \ openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketsCount = brackets.characters.count\n    var closingBracketsCount\
    \ = brackets.characters.count\n    var openingBracketsIndex = 0\n    var closingBracketsIndex\
    \ = 0\n    var openingBracketsCountIndex = 0\n    var closingBracketsCountIndex\
    \ = 0\n    var openingBracketsCountMax = openingBracketsCount\n    var closingBracketsCountMax\
    \ = closingBracketsCount\n    var openingBracketsCountMaxIndex = openingBracketsCountMax\n\
    \    var closingBracketsCountMaxIndex = closingBracketsCountMax\n    var openingBracketsCountMin\
    \ = openingBracketsCount\n    var closingBracketsCountMin = closingBracketsCount\n\
    \    var openingBracketsCountMinIndex = openingBracketsCountMin\n    var closingBracketsCountMinIndex\
    \ = closingBracketsCountMin\n    var openingBracketsCountMaxIndex = openingBracketsCountMax\n\
    \    var closingBracketsCountMaxIndex = closingBracketsCountMax\n    var openingBracketsCountMinIndex\
    \ = openingBracketsCountMin\n    var closingBracketsCountMinIndex = closingBracketsCountMin\n\
    \    var openingBracketsCountMaxIndex = openingBracketsCountMax\n    var closingBracketsCountMaxIndex\
    \ = closingBracketsCountMax\n    var openingBracketsCountMinIndex = openingBracketsCountMin\n\
    \    var closingBracketsCountMinIndex = closingBracketsCountMin\n    var openingBracketsCountMaxIndex\
    \ = openingBracketsCountMax\n    var closingBracketsCountMaxIndex = closingBracketsCountMax\n\
    \    var openingBracketsCountMinIndex = openingBracketsCountMin\n    var closingBracketsCountMinIndex\
    \ = closingBracketsCountMin\n    var openingBracketsCountMaxIndex = openingBracketsCountMax\n\
    \    var closingBracketsCountMaxIndex = closingBracketsCountMax\n    var openingBracketsCountMinIndex\
    \ = openingBracketsCountMin\n    var closingBracketsCountMinIndex = closingBracketsCountMin\n\
    \    var openingBracketsCountMaxIndex = openingBracketsCountMax\n    var closingBracketsCountMaxIndex\
    \ = closingBracketsCountMax\n    var openingBracketsCountMinIndex = openingBracketsCountMin\n\
    \    var closingBrackets", "    var opening = brackets.characters\n    var closing\
    \ = brackets.characters\n    opening.removeFirst()\n    closing.removeLast()\n\
    \    if opening.isEmpty {\n        return closing.isEmpty\n    }\n    if closing.isEmpty\
    \ {\n        return opening.isEmpty\n    }\n    if opening.first == closing.last\
    \ {\n        return opening.first == brackets.first\n    }\n    return opening.first\
    \ == closing.last", "    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    \n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n    \n    for i in 0..<openingBrackets.count {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    \n\
    \    return true", "    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        if openingBrackets[openingBracketIndex] != closingBrackets[closingBracketIndex]\
    \ {\n            return false\n        }\n        openingBracketIndex += 1\n \
    \       closingBracketIndex += 1\n    }\n    return true", "    let openingBrackets\
    \ = brackets.components(separatedBy: \"(\")\n    let closingBrackets = brackets.components(separatedBy:\
    \ \")\")\n    \n    if openingBrackets.count != closingBrackets.count {\n    \
    \    return false\n    }\n    \n    for openingBracket in openingBrackets {\n\
    \        if let closingBracket = closingBrackets.firstIndex(of: openingBracket)\
    \ {\n            closingBrackets.remove(at: closingBracket)\n        }\n    }\n\
    \    \n    return openingBrackets.count == 0", "    var openingBrackets = brackets.characters\n\
    \    var closingBrackets = brackets.characters\n    var openingBracketIndex =\
    \ brackets.startIndex\n    var closingBracketIndex = brackets.startIndex\n   \
    \ while openingBracketIndex < brackets.endIndex {\n        switch openingBrackets[openingBracketIndex]\
    \ {\n        case \"(\":\n            openingBracketIndex += 1\n        case \"\
    [\":\n            openingBracketIndex += 1\n        case \"{\":\n            openingBracketIndex\
    \ += 1\n        case \"\\\"\":\n            openingBracketIndex += 1\n       \
    \ case \"'\":\n            openingBracketIndex += 1\n        case \"`\":\n   \
    \         openingBracketIndex += 1\n        case \"\\\\\":\n            openingBracketIndex\
    \ += 1\n        default:\n            openingBracketIndex += 1\n        }\n  \
    \  }\n    while closingBracketIndex < brackets.endIndex {\n        switch closingBrackets[closingBracketIndex]\
    \ {\n        case \")\":\n            closingBracketIndex += 1\n        case \"\
    [\":\n            closingBracketIndex += 1\n        case \"{\":\n            closingBracketIndex\
    \ += 1\n        case \"\\\"\":\n            closingBracketIndex += 1\n       \
    \ case \"'\":\n            closingBracketIndex += 1\n        case \"`\":\n   \
    \         closingBracketIndex += 1\n        case \"\\\\\":\n            closingBracketIndex\
    \ += 1\n        default:\n            closingBracketIndex += 1\n        }\n  \
    \  }\n    return openingBracketIndex == closingBracketIndex", "    let openingBrackets\
    \ = brackets.characters\n        .filter({$0 != brackets.characters[0]})\n   \
    \     .map({String($0)})\n    let closingBrackets = brackets.characters\n    \
    \    .filter({$0 != brackets.characters[brackets.characters.count - 1]})\n   \
    \     .map({String($0)})\n    return openingBrackets.count == closingBrackets.count",
  "    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketsCount = brackets.characters.count\n    var closingBracketsCount\
    \ = brackets.characters.count\n    var openingBracketsIndex = 0\n    var closingBracketsIndex\
    \ = 0\n    while openingBracketsIndex < openingBracketsCount {\n        openingBracketsIndex\
    \ += 1\n        if openingBrackets[openingBracketsIndex] == '(' {\n          \
    \  openingBracketsIndex += 1\n            while openingBracketsIndex < openingBracketsCount\
    \ {\n                openingBracketsIndex += 1\n                if openingBrackets[openingBracketsIndex]\
    \ == ')' {\n                    openingBracketsIndex += 1\n                  \
    \  closingBracketsIndex += 1\n                    closingBracketsCount -= 1\n\
    \                } else {\n                    break\n                }\n    \
    \        }\n            if openingBracketsIndex == openingBracketsCount {\n  \
    \              return false\n            }\n        } else {\n            closingBracketsIndex\
    \ += 1\n            while closingBracketsIndex < closingBracketsCount {\n    \
    \            closingBracketsIndex += 1\n                if closingBrackets[closingBracketsIndex]\
    \ == '(' {\n                    closingBracketsIndex += 1\n                  \
    \  openingBracketsIndex += 1\n                    openingBracketsCount -= 1\n\
    \                } else {\n                    break\n                }\n    \
    \        }\n            if closingBracketsIndex == closingBracketsCount {\n  \
    \              return false\n            }\n        }\n    }\n    return true",
  "    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for i in\
    \ 0..<openingBrackets.count {\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n            return false\n        }\n    }\n    \n    return true", "   \
    \ let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    \n    for openingBracket in openingBrackets\
    \ {\n        if let closingBracket = closingBrackets.firstIndex(of: openingBracket)\
    \ {\n            closingBrackets.remove(at: closingBracket)\n        } else {\n\
    \            return false\n        }\n    }\n    \n    return openingBrackets.count\
    \ == closingBrackets.count", "    var openingBrackets = brackets.characters\n\
    \    var closingBrackets = brackets.characters\n    var openingBracketsCount =\
    \ brackets.characters.count\n    var closingBracketsCount = brackets.characters.count\n\
    \    var openingBracketsIndex = 0\n    var closingBracketsIndex = 0\n\n    while\
    \ openingBracketsIndex < openingBracketsCount {\n        openingBracketsIndex\
    \ += 1\n        if openingBrackets[openingBracketsIndex] != \")\" {\n        \
    \    continue\n        }\n        openingBracketsIndex += 1\n        if openingBrackets[openingBracketsIndex]\
    \ != \")\" {\n            continue\n        }\n        openingBracketsIndex +=\
    \ 1\n        if openingBrackets[openingBracketsIndex] != \")\" {\n           \
    \ continue\n        }\n        openingBracketsIndex += 1\n        if openingBrackets[openingBracketsIndex]\
    \ != \")\" {\n            continue\n        }\n        openingBracketsIndex +=\
    \ 1\n        if openingBrackets[openingBracketsIndex] != \")\" {\n           \
    \ continue\n        }\n        openingBracketsIndex += 1\n        if openingBrackets[openingBracketsIndex]\
    \ != \")\" {\n            continue\n        }\n        openingBracketsIndex +=\
    \ 1\n        if openingBrackets[openingBracketsIndex] != \")\" {\n           \
    \ continue\n        }\n        openingBracketsIndex += 1\n        if openingBrackets[openingBracketsIndex]\
    \ != \")\" {\n            continue\n        }\n        openingBracketsIndex +=\
    \ 1\n        if openingBrackets[openingBracketsIndex] != \")\" {\n           \
    \ continue\n        }\n        openingBracketsIndex += 1\n        if openingBrackets[openingBracketsIndex]\
    \ != \")\" {\n            continue\n        }\n        openingBracketsIndex +=\
    \ 1\n        if openingBrackets[openingBracketsIndex] != \")\" {\n           \
    \ continue\n        }\n        openingBracketsIndex += 1\n        if openingBrackets[openingBracketsIndex]\
    \ != \")\" {\n            continue\n        }\n        openingBracketsIndex +=\
    \ 1\n        if openingBrackets[openingBracketsIndex] != \")\" {\n           \
    \ continue\n        }\n        openingBracketsIndex += 1\n        if openingBrackets[openingBracketsIndex]\
    \ != \")\" {\n            continue\n        }\n        openingBracketsIndex +=\
    \ 1\n        if openingBrackets[opening", "    var openingBrackets = brackets.characters\n\
    \    var closingBrackets = brackets.characters\n    var openingBracketIndex =\
    \ brackets.startIndex\n    var closingBracketIndex = brackets.startIndex\n\n \
    \   while openingBracketIndex < brackets.endIndex {\n        if openingBrackets[openingBracketIndex]\
    \ != closingBrackets[closingBracketIndex] {\n            return false\n      \
    \  }\n        openingBracketIndex++\n        closingBracketIndex++\n    }\n\n\
    \    return true", "    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        guard openingBrackets[openingBracketIndex] ==\
    \ \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBracketIndex < brackets.endIndex else {\n       \
    \     return false\n        }\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBracketIndex < brackets.endIndex else {\n       \
    \     return false\n        }\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBracketIndex < brackets.endIndex else {\n       \
    \     return false\n        }\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBracketIndex < brackets.endIndex else {\n       \
    \     return false\n        }\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBracketIndex < brackets.endIndex else {\n       \
    \     return false\n        }\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBracketIndex < brackets.endIndex else {\n       \
    \     return false\n        }\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBracketIndex < brackets.endIndex else {\n       \
    \     return false\n        }\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBracketIndex < brackets.endIndex else {\n       \
    \     return false\n        }\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBracketIndex < brackets.endIndex else {\n       \
    \     return false\n        }\n", "    var openingBrackets = brackets.characters\n\
    \    var closingBrackets = brackets.characters\n    var openingBracketIndex =\
    \ brackets.startIndex\n    var closingBracketIndex = brackets.startIndex\n\n \
    \   while openingBracketIndex < brackets.endIndex {\n        let openingBracket\
    \ = brackets[openingBracketIndex]\n        let closingBracket = brackets[closingBracketIndex]\n\
    \n        if openingBracket == \"(\" {\n            openingBracketIndex += 1\n\
    \        } else if openingBracket == \")\" {\n            closingBracketIndex\
    \ += 1\n        } else {\n            return false\n        }\n\n        if openingBracketIndex\
    \ == closingBracketIndex {\n            return false\n        }\n    }\n\n   \
    \ return true", "    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketsCount = brackets.characters.count\n\
    \    var closingBracketsCount = brackets.characters.count\n    var openingBracketsIndex\
    \ = 0\n    var closingBracketsIndex = 0\n\n    while openingBracketsIndex < openingBracketsCount\
    \ {\n        openingBracketsIndex += 1\n        if openingBrackets[openingBracketsIndex]\
    \ == '(' {\n            openingBracketsCount -= 1\n            if openingBracketsCount\
    \ == 0 {\n                openingBracketsIndex += 1\n                openingBracketsCount\
    \ += 1\n            }\n        }\n    }\n\n    while closingBracketsIndex < closingBracketsCount\
    \ {\n        closingBracketsIndex += 1\n        if closingBrackets[closingBracketsIndex]\
    \ == ')' {\n            closingBracketsCount -= 1\n            if closingBracketsCount\
    \ == 0 {\n                closingBracketsIndex += 1\n                closingBracketsCount\
    \ += 1\n            }\n        }\n    }\n\n    return openingBracketsIndex ==\
    \ closingBracketsIndex", "    var bracketCount = 0\n    for bracket in brackets\
    \ {\n        if bracket == \"(\" {\n            bracketCount += 1\n        } else\
    \ if bracket == \")\" {\n            bracketCount -= 1\n        }\n    }\n   \
    \ return bracketCount == 0", "    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    \n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n    \n    for i in 0..<openingBrackets.count {\n        let openingBracket\
    \ = openingBrackets[i]\n        let closingBracket = closingBrackets[i]\n    \
    \    \n        if openingBracket != closingBracket {\n            return false\n\
    \        }\n    }\n    \n    return true", "    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    guard openingBrackets.count == closingBrackets.count else {\n        return\
    \ false\n    }\n    for openingBracket in openingBrackets {\n        guard let\
    \ closingBracket = closingBrackets.first(where: { $0 == openingBracket }) else\
    \ {\n            return false\n        }\n        guard openingBracket != closingBracket\
    \ else {\n            return false\n        }\n    }\n    return true", "    let\
    \ openingBrackets = brackets.characters.split{$0 == \")\"}.map(String.init)\n\
    \    let closingBrackets = brackets.characters.split{$0 == \"(\"}.map(String.init)\n\
    \    return openingBrackets.count == closingBrackets.count", "    var openingBrackets\
    \ = brackets.characters\n    var closingBrackets = brackets.characters\n    var\
    \ openingBracketIndex = brackets.startIndex\n    var closingBracketIndex = brackets.startIndex\n\
    \n    while openingBracketIndex < brackets.endIndex {\n        let openingBracket\
    \ = brackets[openingBracketIndex]\n        let closingBracket = brackets[closingBracketIndex]\n\
    \n        if openingBracket == \"(\" {\n            openingBracketIndex += 1\n\
    \        } else if openingBracket == \")\" {\n            closingBracketIndex\
    \ += 1\n        } else {\n            return false\n        }\n\n        if openingBracketIndex\
    \ >= brackets.endIndex || closingBracketIndex >= brackets.endIndex {\n       \
    \     return false\n        }\n\n        if openingBracket != closingBracket {\n\
    \            return false\n        }\n    }\n\n    return true", "    var openingBrackets\
    \ = brackets.characters\n    var closingBrackets = brackets.characters\n    var\
    \ openingBracketIndex = 0\n    var closingBracketIndex = 0\n    while openingBracketIndex\
    \ < openingBrackets.count {\n        if openingBrackets[openingBracketIndex] ==\
    \ \")\" {\n            closingBracketIndex++\n        } else if openingBrackets[openingBracketIndex]\
    \ == \"]\" {\n            closingBracketIndex++\n        } else if openingBrackets[openingBracketIndex]\
    \ == \")\" {\n            closingBracketIndex++\n        } else if openingBrackets[openingBracketIndex]\
    \ == \"]\" {\n            closingBracketIndex++\n        } else if openingBrackets[openingBracketIndex]\
    \ == \")\" {\n            closingBracketIndex++\n        } else if openingBrackets[openingBracketIndex]\
    \ == \"]\" {\n            closingBracketIndex++\n        } else if openingBrackets[openingBracketIndex]\
    \ == \")\" {\n            closingBracketIndex++\n        } else if openingBrackets[openingBracketIndex]\
    \ == \"]\" {\n            closingBracketIndex++\n        } else if openingBrackets[openingBracketIndex]\
    \ == \")\" {\n            closingBracketIndex++\n        } else if openingBrackets[openingBracketIndex]\
    \ == \"]\" {\n            closingBracketIndex++\n        } else if openingBrackets[openingBracketIndex]\
    \ == \")\" {\n            closingBracketIndex++\n        } else if openingBrackets[openingBracketIndex]\
    \ == \"]\" {\n            closingBracketIndex++\n        } else if openingBrackets[openingBracketIndex]\
    \ == \")\" {\n            closingBracketIndex++\n        } else if openingBrackets[openingBracketIndex]\
    \ == \"]\" {\n            closingBracketIndex++\n        } else if openingBrackets[openingBracketIndex]\
    \ == \")\" {\n            closingBracketIndex++\n        } else if openingBrackets[openingBracketIndex]\
    \ == \"]\" {\n            closingBracketIndex++\n        } else if openingBrackets[openingBracketIndex]\
    \ == \")\" {\n            closingBracketIndex++\n        } else if openingBrackets[openingBracketIndex]\
    \ == \"]\" {\n            closingBracketIndex++\n        } else if openingBrackets[openingBracketIndex]\
    \ == \")", "    var opening = brackets.characters\n    var closing = brackets.characters\n\
    \    var openingCount = brackets.characters.count\n    var closingCount = brackets.characters.count\n\
    \    var openingIndex = 0\n    var closingIndex = 0\n\n    while openingIndex\
    \ < openingCount {\n        openingIndex += 1\n        if opening[openingIndex]\
    \ == '(' {\n            openingCount -= 1\n        }\n        if opening[openingIndex]\
    \ == ')' {\n            openingCount -= 1\n        }\n    }\n\n    while closingIndex\
    \ < closingCount {\n        closingIndex += 1\n        if closing[closingIndex]\
    \ == '(' {\n            closingCount -= 1\n        }\n        if closing[closingIndex]\
    \ == ')' {\n            closingCount -= 1\n        }\n    }\n\n    if openingCount\
    \ != closingCount {\n        return false\n    }\n\n    while openingIndex < openingCount\
    \ {\n        openingIndex += 1\n        if opening[openingIndex] == '(' {\n  \
    \          openingCount -= 1\n        }\n        if opening[openingIndex] == ')'\
    \ {\n            openingCount -= 1\n        }\n    }\n\n    while closingIndex\
    \ < closingCount {\n        closingIndex += 1\n        if closing[closingIndex]\
    \ == '(' {\n            closingCount -= 1\n        }\n        if closing[closingIndex]\
    \ == ')' {\n            closingCount -= 1\n        }\n    }\n\n    return openingCount\
    \ == 0", "    let openingBrackets = brackets.components(separatedBy: \"(\")\n\
    \    let closingBrackets = brackets.components(separatedBy: \")\")\n    \n   \
    \ for openingBracket in openingBrackets {\n        if let closingBracket = closingBrackets.firstIndex(of:\
    \ openingBracket) {\n            \n            let openingBracketRange = Range(uncheckedBounds:\
    \ (openingBracket, openingBracket))\n            let closingBracketRange = Range(uncheckedBounds:\
    \ (closingBracket, closingBracket))\n            \n            if openingBracketRange.contains(closingBracketRange)\
    \ {\n                \n                let openingBracketRangeString = String(openingBracketRange)\n\
    \                let closingBracketRangeString = String(closingBracketRange)\n\
    \                \n                let openingBracketString = String(openingBracket)\n\
    \                let closingBracketString = String(closingBracket)\n         \
    \       \n                if openingBracketString != closingBracketString {\n\
    \                    \n                    return false\n                }\n \
    \           }\n        }\n    }\n    \n    return true", "    var bracketCount\
    \ = 0\n    var openingBracketCount = 0\n    var closingBracketCount = 0\n    for\
    \ character in brackets {\n        switch character {\n        case \")\":\n \
    \           closingBracketCount++\n        case \"(\":\n            openingBracketCount++\n\
    \        default:\n            bracketCount++\n        }\n    }\n    return bracketCount\
    \ == openingBracketCount && bracketCount == closingBracketCount", "    let openingBrackets\
    \ = brackets.components(separatedBy: \"(\")\n    let closingBrackets = brackets.components(separatedBy:\
    \ \")\")\n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n    for i in 0..<openingBrackets.count {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    return\
    \ true", "    let openingBrackets = brackets.components(separatedBy: \"(\")\n\
    \    let closingBrackets = brackets.components(separatedBy: \")\")\n    \n   \
    \ if openingBrackets.count != closingBrackets.count {\n        return false\n\
    \    }\n    \n    for i in 0..<openingBrackets.count {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    \n\
    \    return true", "    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    var openingBracketCount\
    \ = 0\n    var closingBracketCount = 0\n    while openingBracketIndex < brackets.endIndex\
    \ {\n        let openingBracket = brackets[openingBracketIndex]\n        if openingBracket\
    \ == \"(\" {\n            openingBracketCount++\n        } else if openingBracket\
    \ == \")\" {\n            openingBracketCount--\n        }\n        openingBracketIndex++\n\
    \    }\n    while closingBracketIndex < brackets.endIndex {\n        let closingBracket\
    \ = brackets[closingBracketIndex]\n        if closingBracket == \"(\" {\n    \
    \        closingBracketCount++\n        } else if closingBracket == \")\" {\n\
    \            closingBracketCount--\n        }\n        closingBracketIndex++\n\
    \    }\n    return openingBracketCount == 0 && closingBracketCount == 0", "  \
    \  var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    while openingBracketIndex < brackets.endIndex {\n\
    \        openingBracketIndex = openingBracketIndex.successor()\n        closingBracketIndex\
    \ = closingBracketIndex.successor()\n        if openingBrackets[openingBracketIndex]\
    \ != closingBrackets[closingBracketIndex] {\n            return false\n      \
    \  }\n    }\n    return true", "    var openingBrackets = brackets.characters\n\
    \    var closingBrackets = brackets.characters\n    var openingBracketIndex =\
    \ brackets.startIndex\n    var closingBracketIndex = brackets.startIndex\n   \
    \ var openingBracketCount = brackets.characters.count\n    var closingBracketCount\
    \ = brackets.characters.count\n\n    while openingBracketIndex < openingBracketCount\
    \ {\n        openingBracketIndex = openingBracketIndex + 1\n        if openingBrackets[openingBracketIndex]\
    \ != \")\" {\n            return false\n        }\n        openingBracketIndex\
    \ = openingBracketIndex + 1\n    }\n\n    while closingBracketIndex < closingBracketCount\
    \ {\n        closingBracketIndex = closingBracketIndex + 1\n        if closingBrackets[closingBracketIndex]\
    \ != \")\" {\n            return false\n        }\n        closingBracketIndex\
    \ = closingBracketIndex + 1\n    }\n\n    return true", "    var openingBrackets\
    \ = brackets.characters\n    var closingBrackets = brackets.characters\n    var\
    \ openingBracketCount = brackets.characters.count\n    var closingBracketCount\
    \ = brackets.characters.count\n    var openingBracketIndex = 0\n    var closingBracketIndex\
    \ = 0\n\n    while openingBracketIndex < openingBracketCount {\n        guard\
    \ openingBrackets[openingBracketIndex] == '(' else {\n            return false\n\
    \        }\n        openingBracketIndex += 1\n    }\n\n    while closingBracketIndex\
    \ < closingBracketCount {\n        guard closingBrackets[closingBracketIndex]\
    \ == ')' else {\n            return false\n        }\n        closingBracketIndex\
    \ += 1\n    }\n\n    if openingBracketIndex != closingBracketIndex {\n       \
    \ return false\n    }\n\n    return true", "    let openingBrackets = brackets.characters.split{$0\
    \ == \")\"}.map(String.init)\n    let closingBrackets = brackets.characters.split{$0\
    \ == \"(\"}.map(String.init)\n    return openingBrackets.count == closingBrackets.count",
  "    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for openingBracket\
    \ in openingBrackets {\n        if let closingBracket = closingBrackets.firstIndex(of:\
    \ openingBracket) {\n            closingBrackets.remove(at: closingBracket)\n\
    \        }\n    }\n    \n    return openingBrackets.count == 0", "    var openingBrackets\
    \ = brackets.characters\n    var closingBrackets = brackets.characters\n    openingBrackets.removeLast()\n\
    \    closingBrackets.removeFirst()\n    openingBrackets.reverse()\n    closingBrackets.reverse()\n\
    \    var openingBracketsCount = 1\n    var closingBracketsCount = 1\n    for openingBracket\
    \ in openingBrackets {\n        if closingBrackets.contains(openingBracket) {\n\
    \            closingBracketsCount++\n        } else {\n            openingBracketsCount++\n\
    \        }\n    }\n    return openingBracketsCount == closingBracketsCount", " \
    \   var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    var openingBracketCount = 0\n    var closingBracketCount\
    \ = 0\n\n    while openingBracketIndex < brackets.endIndex {\n        let openingBracket\
    \ = brackets[openingBracketIndex]\n        openingBracketCount += 1\n\n      \
    \  if openingBracket == \"(\" {\n            openingBracketIndex += 1\n      \
    \  } else if openingBracket == \")\" {\n            openingBracketIndex += 1\n\
    \            closingBracketCount += 1\n        } else {\n            openingBracketIndex\
    \ += 1\n            closingBracketIndex += 1\n        }\n    }\n\n    if openingBracketCount\
    \ != closingBracketCount {\n        return false\n    }\n\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        let openingBracket = brackets[openingBracketIndex]\n\
    \        openingBracketIndex += 1\n\n        if openingBracket == \"(\" {\n  \
    \          openingBracketIndex += 1\n        } else if openingBracket == \")\"\
    \ {\n            openingBracketIndex += 1\n            closingBracketIndex +=\
    \ 1\n        } else {\n            openingBracketIndex += 1\n        }\n    }\n\
    \n    return brackets.startIndex == openingBracketIndex", "    let openingBrackets\
    \ = brackets.characters\n        .filter({ $0 != \"(\" })\n        .filter({ $0\
    \ != \")\" })\n        .map({ String($0) })\n    let closingBrackets = brackets.characters\n\
    \        .filter({ $0 != \")\" })\n        .filter({ $0 != \"(\" })\n        .map({\
    \ String($0) })\n    return openingBrackets.count == closingBrackets.count", " \
    \   var opening = brackets.characters\n    var closing = brackets.characters\n\
    \    opening.removeLast()\n    closing.removeFirst()\n    if opening.isEmpty {\n\
    \        return closing.isEmpty && closing.count == 0\n    }\n    if closing.isEmpty\
    \ {\n        return opening.count == 0\n    }\n    if opening.count != closing.count\
    \ {\n        return false\n    }\n    if opening.first != closing.last {\n   \
    \     return false\n    }\n    if opening.count == 1 {\n        return true\n\
    \    }\n    return opening.count == 2 && opening.first == closing.last", "   \
    \ var opening = brackets.characters\n    var closing = brackets.characters\n \
    \   var openingIndex = 0\n    var closingIndex = 0\n\n    while openingIndex <\
    \ opening.count {\n        guard opening[openingIndex] == '(' else {\n       \
    \     return false\n        }\n        openingIndex += 1\n\n        while closingIndex\
    \ < closing.count {\n            guard closing[closingIndex] == ')' else {\n \
    \               return false\n            }\n            closingIndex += 1\n \
    \       }\n\n        opening.removeSubrange(openingIndex, opening.count - closingIndex)\n\
    \        closing.removeSubrange(closingIndex, closing.count - openingIndex)\n\
    \    }\n\n    return true", "    var opening = brackets.characters\n    var closing\
    \ = brackets.characters\n    var openingCount = brackets.characters.count\n  \
    \  var closingCount = brackets.characters.count\n    var openingIndex = 0\n  \
    \  var closingIndex = 0\n    while openingIndex < openingCount {\n        opening\
    \ = brackets.substringWithRange(NSMakeRange(openingIndex, 1))\n        closing\
    \ = brackets.substringWithRange(NSMakeRange(closingIndex, 1))\n        if opening\
    \ == \"(\" {\n            openingIndex++\n        } else if closing == \")\" {\n\
    \            closingIndex++\n        } else {\n            return false\n    \
    \    }\n    }\n    return openingIndex == openingCount && closingIndex == closingCount",
  "    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    let openingBracketsCount = openingBrackets.count\n\
    \    let closingBracketsCount = closingBrackets.count\n    if openingBracketsCount\
    \ != closingBracketsCount {\n        return false\n    }\n    for i in 0..<openingBracketsCount\
    \ {\n        let openingBracket = openingBrackets[i]\n        let closingBracket\
    \ = closingBrackets[i]\n        if openingBracket != closingBracket {\n      \
    \      return false\n        }\n    }\n    return true", "    var openingBrackets\
    \ = brackets.characters\n    var closingBrackets = brackets.characters\n\n   \
    \ var openingBracketsCount = 1\n    var closingBracketsCount = 1\n\n    for openingBracket\
    \ in openingBrackets {\n        if openingBracket == \"(\" {\n            openingBracketsCount\
    \ += 1\n        } else if openingBracket == \")\" {\n            closingBracketsCount\
    \ += 1\n        }\n    }\n\n    if openingBracketsCount != closingBracketsCount\
    \ {\n        return false\n    }\n\n    for openingBracket in openingBrackets\
    \ {\n        if openingBracket == \"(\" {\n            openingBracketsCount -=\
    \ 1\n        } else if openingBracket == \")\" {\n            closingBracketsCount\
    \ -= 1\n        }\n    }\n\n    if openingBracketsCount != 0 {\n        return\
    \ false\n    }\n\n    return true", "    var bracketCount = 0\n    var openingBracketCount\
    \ = 0\n    var closingBracketCount = 0\n    for char in brackets {\n        switch\
    \ char {\n        case \"(\":\n            openingBracketCount++\n        case\
    \ \"[\":\n            bracketCount++\n        case \"{\":\n            bracketCount++\n\
    \        case \"(\":\n            closingBracketCount++\n        case \"}\":\n\
    \            bracketCount--\n        default:\n            break\n        }\n\
    \    }\n    return bracketCount == 0", "    let openingBrackets = brackets.characters\n\
    \        .filter({$0 != brackets.characters.last!})\n        .map {String($0)}\n\
    \    let closingBrackets = brackets.characters\n        .filter({$0 != brackets.characters.first!})\n\
    \        .map {String($0)}\n    return openingBrackets.count == closingBrackets.count",
  "    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    openingBrackets.removeFirst()\n    closingBrackets.removeLast()\n    for\
    \ openingBracket in openingBrackets {\n        if closingBrackets.contains(openingBracket)\
    \ {\n            return false\n        }\n    }\n    return true", "    var openingBrackets\
    \ = brackets.characters\n    var closingBrackets = brackets.characters\n    openingBrackets.removeFirst()\n\
    \    closingBrackets.removeLast()\n    if openingBrackets.isEmpty() {\n      \
    \  return true\n    }\n    if closingBrackets.isEmpty() {\n        return false\n\
    \    }\n    var openingBracket = openingBrackets.first!\n    var closingBracket\
    \ = closingBrackets.last!\n    if openingBracket == closingBracket {\n       \
    \ return false\n    }\n    if openingBracket == \"(\" && closingBracket == \"\
    )\" {\n        return true\n    }\n    if openingBracket == \"(\" && closingBracket\
    \ == \"}\" {\n        return true\n    }\n    if openingBracket == \"{\" && closingBracket\
    \ == \"}\" {\n        return true\n    }\n    if openingBracket == \"[\" && closingBracket\
    \ == \"]\" {\n        return true\n    }\n    if openingBracket == \"<\" && closingBracket\
    \ == \">\" {\n        return true\n    }\n    if openingBracket == \"(\" && closingBracket\
    \ == \"(\" {\n        return true\n    }\n    if openingBracket == \"(\" && closingBracket\
    \ == \"[\" {\n        return true\n    }\n    if openingBracket == \"(\" && closingBracket\
    \ == \"{\" {\n        return true\n    }\n    if openingBracket == \"(\" && closingBracket\
    \ == \"<\" {\n        return true\n    }\n    if openingBracket == \"[\" && closingBracket\
    \ == \"]\" {\n        return true\n    }\n    if openingBracket == \"[\" && closingBracket\
    \ == \"<\" {\n        return true\n    }\n    if openingBracket == \"{\" && closingBracket\
    \ == \"}\" {\n        return true\n    }\n    if openingBracket == \"{\" && closingBracket\
    \ == \"<\" {\n        return true\n    }\n    if openingBracket == \"<\" && closingBracket\
    \ == \"<\" {\n        return true\n    }\n    return false", "    var opening\
    \ = brackets.characters\n    var closing = brackets.characters\n    var openingCount\
    \ = brackets.characters.count\n    var closingCount = brackets.characters.count\n\
    \n    while opening.count > 0 {\n        opening.removeLast()\n        closingCount\
    \ -= 1\n        if closingCount == 0 {\n            opening.removeLast()\n   \
    \         closingCount -= 1\n        }\n    }\n\n    while closing.count > 0 {\n\
    \        closing.removeLast()\n        openingCount -= 1\n        if openingCount\
    \ == 0 {\n            closing.removeLast()\n            openingCount -= 1\n  \
    \      }\n    }\n\n    return openingCount == 0 && closingCount == 0", "    let\
    \ openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for i in\
    \ 0..<openingBrackets.count {\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n            return false\n        }\n    }\n    \n    return true", "   \
    \ let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for i in\
    \ 0..<openingBrackets.count {\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n            return false\n        }\n    }\n    \n    return true", "   \
    \ var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = 0\n    var closingBracketIndex = 0\n    while openingBracketIndex\
    \ < openingBrackets.count {\n        openingBracketIndex += 1\n        if openingBrackets[openingBracketIndex]\
    \ == '(' {\n            openingBracketIndex += 1\n            if openingBracketIndex\
    \ < openingBrackets.count {\n                openingBracketIndex += 1\n      \
    \      }\n        }\n    }\n    while closingBracketIndex < closingBrackets.count\
    \ {\n        closingBracketIndex += 1\n        if closingBrackets[closingBracketIndex]\
    \ == ')' {\n            closingBracketIndex += 1\n            if closingBracketIndex\
    \ < closingBrackets.count {\n                closingBracketIndex += 1\n      \
    \      }\n        }\n    }\n    return openingBracketIndex == closingBracketIndex",
  "    let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for i in\
    \ 0..<openingBrackets.count {\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n            return false\n        }\n    }\n    \n    return true", "   \
    \ let openingBrackets = brackets.components(separatedBy: \"(\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n    return openingBrackets.count\
    \ == closingBrackets.count", "    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    return openingBrackets.count == closingBrackets.count", "    let openingBrackets\
    \ = brackets.components(separatedBy: \"(\")\n    let closingBrackets = brackets.components(separatedBy:\
    \ \")\")\n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n    for i in 0..<openingBrackets.count {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    return\
    \ true", "    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = 0\n    var closingBracketIndex\
    \ = 0\n    while openingBracketIndex < openingBrackets.count {\n        guard\
    \ openingBrackets[openingBracketIndex] == \")\" else {\n            return false\n\
    \        }\n        closingBracketIndex += 1\n        if closingBracketIndex ==\
    \ closingBrackets.count {\n            return true\n        }\n        guard openingBrackets[openingBracketIndex]\
    \ == openingBrackets[openingBracketIndex + 1] else {\n            return false\n\
    \        }\n        openingBracketIndex += 1\n    }\n    return false", "    var\
    \ bracketsStack = [String]()\n    var bracketsStackCopy = [String]()\n    var\
    \ bracketsStackCopyCopy = [String]()\n    var bracketsStackCopyCopyCopy = [String]()\n\
    \    var bracketsStackCopyCopyCopyCopy = [String]()\n    var bracketsStackCopyCopyCopyCopyCopy\
    \ = [String]()\n    var bracketsStackCopyCopyCopyCopyCopyCopy = [String]()\n \
    \   var bracketsStackCopyCopyCopyCopyCopyCopyCopy = [String]()\n    var bracketsStackCopyCopyCopyCopyCopyCopyCopyCopy\
    \ = [String]()\n    var bracketsStackCopyCopyCopyCopyCopyCopyCopyCopy = [String]()\n\
    \    var bracketsStackCopyCopyCopyCopyCopyCopyCopyCopyCopy = [String]()\n    var\
    \ bracketsStackCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy = [String]()\n    var\
    \ bracketsStackCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy = [String]()\n    var\
    \ bracketsStackCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy = [String]()\n   \
    \ var bracketsStackCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy = [String]()\n\
    \    var bracketsStackCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy = [String]()\n\
    \    var bracketsStackCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy = [String]()\n\
    \    var bracketsStackCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\
    \ = [String]()\n    var bracketsStackCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\
    \ = [String]()\n    var bracketsStackCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\
    \ = [String]()\n    var bracketsStackCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\
    \ = [String]()\n    var bracketsStackCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\
    \ = [String]()\n    var bracketsStackCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\
    \ = [String]()\n    var bracketsStackCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\
    \ = [String]()\n    var bracketsStackCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\
    \ = [String]()\n    var bracketsStackCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\
    \ = [String]()\n    var bracketsStackCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy",
  "    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketsCount = brackets.characters.count\n    var closingBracketsCount\
    \ = brackets.characters.count\n    var openingBracketsIndex = 0\n    var closingBracketsIndex\
    \ = 0\n    var openingBracketsCountIndex = 0\n    var closingBracketsCountIndex\
    \ = 0\n    var openingBracketsCountMax = openingBracketsCount\n    var closingBracketsCountMax\
    \ = closingBracketsCount\n    var openingBracketsCountMaxIndex = 0\n    var closingBracketsCountMaxIndex\
    \ = 0\n    var openingBracketsCountMin = openingBracketsCount\n    var closingBracketsCountMin\
    \ = closingBracketsCount\n    var openingBracketsCountMinIndex = 0\n    var closingBracketsCountMinIndex\
    \ = 0\n    var openingBracketsCountMaxMin = openingBracketsCount\n    var closingBracketsCountMaxMin\
    \ = closingBracketsCount\n    var openingBracketsCountMaxMinIndex = 0\n    var\
    \ closingBracketsCountMaxMinIndex = 0\n    var openingBracketsCountMinMax = openingBracketsCount\n\
    \    var closingBracketsCountMinMax = closingBracketsCount\n    var openingBracketsCountMinMaxIndex\
    \ = 0\n    var closingBracketsCountMinMaxIndex = 0\n    var openingBracketsCountMinMaxMin\
    \ = openingBracketsCount\n    var closingBracketsCountMinMaxMin = closingBracketsCount\n\
    \    var openingBracketsCountMinMaxMinIndex = 0\n    var closingBracketsCountMinMaxMinIndex\
    \ = 0\n    var openingBracketsCountMaxMinMax = openingBracketsCount\n    var closingBracketsCountMaxMinMax\
    \ = closingBracketsCount\n    var openingBracketsCountMaxMinMaxIndex = 0\n   \
    \ var closingBracketsCountMaxMinMaxIndex = 0\n    var openingBracketsCountMaxMinMaxMin\
    \ = openingBracketsCount\n    var closingBracketsCountMaxMinMaxMin = closingBracketsCount\n\
    \    var openingBracketsCountMaxMinMaxMinIndex = 0\n    var closingBracketsCountMaxMinMaxMinIndex\
    \ = 0\n    var openingBracketsCountMaxMinMaxMinMax = openingBracketsCount\n  \
    \  var closingBracketsCountMaxMinMaxMinMax = closingBracketsCount\n    var opening",
  "    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketsCount = brackets.characters.count\n    var closingBracketsCount\
    \ = brackets.characters.count\n\n    while openingBracketsCount > 0 && closingBracketsCount\
    \ > 0 {\n        if openingBrackets[openingBracketsCount - 1] == closingBrackets[0]\
    \ {\n            openingBracketsCount -= 1\n            closingBracketsCount -=\
    \ 1\n        } else {\n            return false\n        }\n    }\n\n    return\
    \ openingBracketsCount == 0", "    var openingBrackets = brackets.characters\n\
    \    var closingBrackets = brackets.characters\n    var openingBracketsCount =\
    \ brackets.characters.count\n    var closingBracketsCount = brackets.characters.count\n\
    \n    for index in 0..<openingBracketsCount {\n        if openingBrackets[index]\
    \ == closingBrackets[index] {\n            openingBracketsCount--\n          \
    \  closingBracketsCount--\n        } else {\n            return false\n      \
    \  }\n    }\n\n    return openingBracketsCount == 0 && closingBracketsCount ==\
    \ 0", "    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        openingBracketIndex = openingBracketIndex.successor()\n\
    \        closingBracketIndex = closingBracketIndex.successor()\n        if openingBrackets[openingBracketIndex]\
    \ != closingBrackets[closingBracketIndex] {\n            return false\n      \
    \  }\n    }\n    return true", "    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    \n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n    \n    for i in 0..<openingBrackets.count {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    \n\
    \    return true", "    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    var openingBracketCount\
    \ = 0\n    var closingBracketCount = 0\n\n    while openingBracketIndex < brackets.endIndex\
    \ {\n        let char = openingBrackets[openingBracketIndex]\n        if char\
    \ == \"(\" {\n            openingBracketCount += 1\n        } else if char ==\
    \ \")\" {\n            closingBracketCount += 1\n        }\n        openingBracketIndex\
    \ += 1\n    }\n\n    if openingBracketCount != closingBracketCount {\n       \
    \ return false\n    }\n\n    while openingBracketIndex < brackets.endIndex {\n\
    \        let char = openingBrackets[openingBracketIndex]\n        if char == \"\
    (\" {\n            openingBracketIndex += 1\n        } else if char == \")\" {\n\
    \            if openingBracketIndex < brackets.endIndex {\n                let\
    \ nextChar = openingBrackets[openingBracketIndex]\n                if nextChar\
    \ == \"(\" {\n                    openingBracketIndex += 1\n                }\
    \ else if nextChar == \")\" {\n                    closingBracketIndex += 1\n\
    \                }\n            }\n        }\n    }\n\n    if openingBracketIndex\
    \ != brackets.endIndex {\n        return false\n    }\n\n    return true", " \
    \   let openingBrackets = brackets.characters.split{$0 == \")\"}.map(String.init)\n\
    \    let closingBrackets = brackets.characters.split{$0 == \"(\"}.map(String.init)\n\
    \    \n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n    \n    for i in 0..<openingBrackets.count {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    \n\
    \    return true", "    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n\n    var openingBracket = openingBrackets.startIndex\n\
    \    var closingBracket = closingBrackets.startIndex\n\n    while openingBracket\
    \ < openingBrackets.endIndex {\n        if closingBracket >= closingBrackets.endIndex\
    \ {\n            return false\n        }\n\n        if openingBrackets[openingBracket]\
    \ == closingBrackets[closingBracket] {\n            openingBracket++\n       \
    \     closingBracket++\n        } else {\n            return false\n        }\n\
    \    }\n\n    return true", "    var bracketStack = [String]()\n    var bracketCount\
    \ = 0\n    for bracket in brackets {\n        if bracket == \"(\" {\n        \
    \    bracketStack.append(bracket)\n            bracketCount++\n        } else\
    \ if bracket == \")\" {\n            if bracketStack.count > 0 {\n           \
    \     bracketStack.removeLast()\n                bracketCount--\n            }\
    \ else {\n                return false\n            }\n        }\n    }\n    return\
    \ bracketCount == 0", "    var openingBrackets = brackets.characters\n    var\
    \ closingBrackets = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n\
    \    var closingBracketIndex = brackets.startIndex\n    var openingBracketCount\
    \ = 0\n    var closingBracketCount = 0\n\n    while openingBracketIndex < brackets.endIndex\
    \ {\n        switch brackets[openingBracketIndex] {\n        case \")\":\n   \
    \         closingBracketCount++\n            if closingBracketCount > 1 {\n  \
    \              openingBracketCount--\n            }\n        case \")\":\n   \
    \         openingBracketCount++\n            if openingBracketCount > 1 {\n  \
    \              closingBracketCount--\n            }\n        default:\n      \
    \      openingBracketCount = 0\n            closingBracketCount = 0\n        }\n\
    \n        openingBracketIndex++\n    }\n\n    return openingBracketIndex == brackets.endIndex\
    \ && closingBracketCount == 0", "    var bracketCount = 0\n    var openingBracketCount\
    \ = 0\n    var closingBracketCount = 0\n    for char in brackets {\n        switch\
    \ char {\n        case \"(\":\n            openingBracketCount++\n        case\
    \ \"[\":\n            bracketCount++\n        case \"{\":\n            bracketCount++\n\
    \        case \"(\":\n            closingBracketCount++\n        case \")\":\n\
    \            closingBracketCount++\n        default:\n            bracketCount\
    \ = 0\n        }\n    }\n    return bracketCount == openingBracketCount && bracketCount\
    \ == closingBracketCount", "    var openingBrackets = brackets.characters\n  \
    \  var closingBrackets = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n\
    \    var closingBracketIndex = brackets.startIndex\n\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        let openingBracket = brackets[openingBracketIndex]\n\
    \        openingBracketIndex += 1\n        \n        if openingBracket == \"(\"\
    \ {\n            openingBracketIndex += 1\n            if openingBracketIndex\
    \ < brackets.endIndex {\n                let closingBracket = brackets[openingBracketIndex]\n\
    \                openingBracketIndex += 1\n                \n                if\
    \ closingBracket == \")\" {\n                    closingBracketIndex += 1\n  \
    \                  if openingBracketIndex < brackets.endIndex {\n            \
    \            let closingBracket = brackets[openingBracketIndex]\n            \
    \            openingBracketIndex += 1\n                        \n            \
    \            if closingBracket == \")\" {\n                            closingBracketIndex\
    \ += 1\n                            if openingBracketIndex < brackets.endIndex\
    \ {\n                                let closingBracket = brackets[openingBracketIndex]\n\
    \                                openingBracketIndex += 1\n                  \
    \              \n                                if closingBracket == \")\" {\n\
    \                                    closingBracketIndex += 1\n              \
    \                      if openingBracketIndex < brackets.endIndex {\n        \
    \                                let closingBracket = brackets[openingBracketIndex]\n\
    \                                        openingBracketIndex += 1\n          \
    \                              \n                                        if closingBracket\
    \ == \")\" {\n                                            closingBracketIndex\
    \ += 1\n                                            if openingBracketIndex < brackets.endIndex\
    \ {\n                                                let closingBracket = brackets[openingBracketIndex]\n\
    \                                                openingBracketIndex += 1\n  \
    \                                              \n                            \
    \                    if closingBracket == \")\" {\n                          \
    \                          closingBracketIndex += 1\n                        \
    \                            if openingBracketIndex < brackets.endIndex {\n  \
    \                                                      let closingBracket = brackets[openingBracketIndex]\n\
    \                                                        openingBracketIndex +=\
    \ 1\n                                                        \n              \
    \                                          if closingBracket == \")\" {\n    \
    \                                                        closingBracketIndex +=\
    \ 1\n                                                            openingBracketIndex\
    \ += 1\n                                                            \n       \
    \                                                     if openingBracketIndex <\
    \ brackets.endIndex {\n                                                      \
    \          let closingBracket = brackets[openingBracketIndex]\n              \
    \                                                  openingBracketIndex += 1\n\
    \                                                                \n          \
    \                                                      if closingBracket == \"\
    )\" {\n                                                                    closingBracketIndex\
    \ += 1\n                                                                    openingBracketIndex\
    \ += 1\n                                                                    \n\
    \                                                                    if openingBracketIndex\
    \ < brackets.endIndex {\n", "    var openingBrackets = brackets.characters\n \
    \   var closingBrackets = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n\
    \    var closingBracketIndex = brackets.startIndex\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        openingBracketIndex = openingBracketIndex.successor()\n\
    \        closingBracketIndex = closingBracketIndex.successor()\n        if openingBrackets[openingBracketIndex]\
    \ != closingBrackets[closingBracketIndex] {\n            return false\n      \
    \  }\n    }\n    return true", "    var openingBrackets = brackets.characters\n\
    \    var closingBrackets = brackets.characters\n    var openingBracketIndex =\
    \ brackets.startIndex\n    var closingBracketIndex = brackets.startIndex\n\n \
    \   while openingBracketIndex < brackets.endIndex {\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        closingBracketIndex += 1\n    }\n\n    while closingBracketIndex\
    \ < brackets.endIndex {\n        guard closingBrackets[closingBracketIndex] ==\
    \ \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        closingBracketIndex += 1\n    }\n\n    return openingBracketIndex\
    \ == closingBracketIndex", "    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    \n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n    \n    for i in 0..<openingBrackets.count {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    \n\
    \    return true", "    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    \n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n    \n    for openingBracket in openingBrackets {\n        let\
    \ closingBracket = closingBrackets.firstIndex(of: openingBracket)\n        if\
    \ closingBracket == nil {\n            return false\n        }\n        \n   \
    \     if openingBracket != closingBracket! {\n            return false\n     \
    \   }\n    }\n    \n    return true", "    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    \n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n    \n    for openingBracket in openingBrackets {\n        let\
    \ closingBracket = closingBrackets.firstIndex(of: openingBracket)\n        if\
    \ closingBracket == nil {\n            return false\n        }\n        \n   \
    \     if openingBracket != closingBracket {\n            return false\n      \
    \  }\n    }\n    \n    return true", "    let openingBrackets = brackets.characters.split{$0\
    \ == \")\"}.map(String.init)\n    let closingBrackets = brackets.characters.split{$0\
    \ == \"(\"}.map(String.init)\n    return openingBrackets.count == closingBrackets.count",
  "    let openingBrackets = brackets.characters.split{$0 == \")\"}.map(String.init)\n\
    \    let closingBrackets = brackets.characters.split{$0 == \"(\"}.map(String.init)\n\
    \    return openingBrackets.count == closingBrackets.count", "    let openingBrackets\
    \ = brackets.components(separatedBy: \"(\")\n    let closingBrackets = brackets.components(separatedBy:\
    \ \")\")\n    \n    if openingBrackets.count != closingBrackets.count {\n    \
    \    return false\n    }\n    \n    for openingBracket in openingBrackets {\n\
    \        if let closingBracket = closingBrackets.firstIndex(of: openingBracket)\
    \ {\n            closingBrackets.remove(at: closingBracket)\n        } else {\n\
    \            return false\n        }\n    }\n    \n    return true", "    var\
    \ opening = brackets.characters\n    var closing = brackets.characters\n    var\
    \ openingCount = brackets.characters.count\n    var closingCount = brackets.characters.count\n\
    \    var openingIndex = 0\n    var closingIndex = 0\n    while openingIndex <\
    \ openingCount {\n        openingIndex += 1\n        if openingIndex < openingCount\
    \ {\n            if opening[openingIndex] == '(' {\n                openingIndex\
    \ += 1\n                if openingIndex < openingCount {\n                   \
    \ if opening[openingIndex] == ')' {\n                        openingIndex += 1\n\
    \                        if openingIndex < openingCount {\n                  \
    \          if opening[openingIndex] == ')' {\n                               \
    \ openingIndex += 1\n                                if openingIndex < openingCount\
    \ {\n                                    if opening[openingIndex] == '(' {\n \
    \                                       openingIndex += 1\n                  \
    \                      if openingIndex < openingCount {\n                    \
    \                        if opening[openingIndex] == ')' {\n                 \
    \                               openingIndex += 1\n                          \
    \                      if openingIndex < openingCount {\n                    \
    \                                if opening[openingIndex] == ')' {\n         \
    \                                               openingIndex += 1\n          \
    \                                              if openingIndex < openingCount\
    \ {\n                                                            if opening[openingIndex]\
    \ == ')' {\n                                                                openingIndex\
    \ += 1\n                                                                if openingIndex\
    \ < openingCount {\n                                                         \
    \           if opening[openingIndex] == ')' {\n                              \
    \                                          openingIndex += 1\n               \
    \                                                     }\n                    \
    \                                            }\n                             \
    \                               }\n                                          \
    \              }\n                                                    }\n    \
    \                                            }\n                             \
    \               }\n                                        }\n               \
    \                     }\n                                }\n                 \
    \           }\n                        }\n                    }\n            \
    \    }\n            }\n        }\n    }\n    while closingIndex < closingCount\
    \ {\n        closingIndex += 1\n        if closingIndex < closingCount {\n   \
    \         if closing[closingIndex] == '(' {\n                closingIndex += 1\n\
    \                if closingIndex < closingCount {\n                    if closing[closingIndex]\
    \ == ')' {\n                        closingIndex += 1\n                      \
    \  if closingIndex < closingCount {\n                            if closing[closingIndex]\
    \ == ')' {\n                                closingIndex += 1\n              \
    \                  if closingIndex < closingCount {\n                        \
    \            if closing[closingIndex] == '(' {\n                             \
    \           closingIndex += 1\n                                        if closingIndex\
    \ < closingCount {\n                                            if closing[closingIndex]\
    \ == ')' {\n                                                closingIndex += 1\n\
    \                                                if closingIndex < closingCount\
    \ {\n                                                    if closing[closingIndex]\
    \ == ')' {\n                                                        closingIndex\
    \ += 1\n                                                        if closingIndex\
    \ < closingCount {\n                                                         \
    \   if closing[closingIndex] == ')' {\n                                      \
    \                          closing", "    let openingBrackets = brackets.components(separatedBy:\
    \ CharacterSet.openingParenthesis)\n    let closingBrackets = brackets.components(separatedBy:\
    \ CharacterSet.closingParenthesis)\n    \n    if openingBrackets.count != closingBrackets.count\
    \ {\n        return false\n    }\n    \n    for i in 0..<openingBrackets.count\
    \ {\n        let openingBracket = openingBrackets[i]\n        let closingBracket\
    \ = closingBrackets[i]\n        \n        if openingBracket != closingBracket\
    \ {\n            return false\n        }\n    }\n    \n    return true", "   \
    \ var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \n    var openingBracketIndex = openingBrackets.startIndex\n    var closingBracketIndex\
    \ = closingBrackets.startIndex\n\n    while openingBracketIndex < openingBrackets.endIndex\
    \ {\n        if openingBrackets[openingBracketIndex] != closingBrackets[closingBracketIndex]\
    \ {\n            return false\n        }\n        openingBracketIndex += 1\n \
    \       closingBracketIndex += 1\n    }\n    return true", "    var openingBrackets\
    \ = brackets.characters\n    var closingBrackets = brackets.characters\n    openingBrackets.removeLast()\n\
    \    closingBrackets.removeLast()\n    if openingBrackets.isEmpty {\n        return\
    \ true\n    }\n    if closingBrackets.isEmpty {\n        return false\n    }\n\
    \    if openingBrackets.first == closingBrackets.first {\n        return false\n\
    \    }\n    if openingBrackets.first == closingBrackets.last {\n        return\
    \ true\n    }\n    if openingBrackets.last == closingBrackets.first {\n      \
    \  return true\n    }\n    if openingBrackets.last == closingBrackets.last {\n\
    \        return false\n    }\n    return openingBrackets.first == closingBrackets.last",
  "    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    var openingBracketCount = 0\n    var closingBracketCount\
    \ = 0\n    while openingBracketIndex < brackets.endIndex {\n        switch brackets[openingBracketIndex]\
    \ {\n        case ')':\n            openingBracketCount--\n            if openingBracketCount\
    \ == 0 {\n                openingBracketIndex = brackets.startIndex\n        \
    \    } else {\n                openingBracketIndex++\n            }\n        case\
    \ ')':\n            closingBracketCount++\n            if closingBracketCount\
    \ == 2 {\n                closingBracketIndex = brackets.startIndex\n        \
    \    } else {\n                closingBracketIndex++\n            }\n        default:\n\
    \            openingBracketCount++\n            closingBracketCount = 0\n    \
    \    }\n    }\n    return openingBracketCount == 0 && closingBracketCount == 0",
  "    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    while openingBracketIndex < brackets.endIndex {\n\
    \        openingBracketIndex = openingBracketIndex + 1\n        if openingBrackets[openingBracketIndex]\
    \ != \")\" {\n            return false\n        }\n        openingBracketIndex\
    \ = openingBracketIndex + 1\n    }\n    while closingBracketIndex < brackets.endIndex\
    \ {\n        closingBracketIndex = closingBracketIndex + 1\n        if closingBrackets[closingBracketIndex]\
    \ != \")\" {\n            return false\n        }\n        closingBracketIndex\
    \ = closingBracketIndex + 1\n    }\n    if openingBracketIndex != closingBracketIndex\
    \ {\n        return false\n    }\n    return true"]
stop_tokens:
- "\n}"
