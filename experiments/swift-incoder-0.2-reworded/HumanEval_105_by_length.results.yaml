language: swift
name: HumanEval_105_by_length
results:
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var i = 0\n    for\
    \ num in arr {\n        if num < 1 || num > 9 {\n            continue\n      \
    \  }\n        i += 1\n        if i == 1 {\n            result.append(String(num))\n\
    \        } else {\n            result.append(String(num))\n            result.append(String(num))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp6yrxr1hx/tmp6yrxr1hx.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac640f68c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac640c5fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac640c5f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac640c5e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6yrxr1hx                        0x00005652e2eb3951 <unavailable> + 6481

    5    libc.so.6                          0x00002ac641154460 __libc_start_main +
    245

    6    tmp6yrxr1hx                        0x00005652e2eb33f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014116
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var index = 0\n  \
    \  while index < arr.count {\n        if arr[index] >= 1 && arr[index] <= 9 {\n\
    \            result.append(name[arr[index] - 1])\n        } else {\n         \
    \   result.append(String(arr[index]))\n        }\n        index++\n    }\n   \
    \ return result.reverse()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgefsus7t.swift:22:27: error: cannot find 'name' in scope\n    \
    \        result.append(name[arr[index] - 1])\n                          ^~~~\n\
    /tmp/tmpgefsus7t.swift:26:14: error: cannot find operator '++' in scope; did you\
    \ mean '+= 1'?\n        index++\n             ^~\n/tmp/tmpgefsus7t.swift:28:19:\
    \ error: cannot convert return expression of type '()' to return type '[String]'\n\
    \    return result.reverse()\n           ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014115
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    var result = [String]()\n    var i = 0\n    for n\
    \ in arr {\n        if n < 10 {\n            result.append(String(format: \"%d\\\
    \"\", n))\n        } else {\n            result.append(String(format: \"%d\\\"\
    \", n - 10))\n            result.append(String(format: \"%d\\\"\", n - 9))\n \
    \       }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbqxidvhe.swift:20:33: error: incorrect argument labels in call\
    \ (have 'format:_:', expected 'repeating:count:')\n            result.append(String(format:\
    \ \"%d\\\"\", n))\n                                ^~~~~~~\n                 \
    \                repeating       count: \n/tmp/tmpbqxidvhe.swift:22:33: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \            result.append(String(format: \"%d\\\"\", n - 10))\n             \
    \                   ^~~~~~~\n                                 repeating      \
    \ count: \n/tmp/tmpbqxidvhe.swift:23:33: error: incorrect argument labels in call\
    \ (have 'format:_:', expected 'repeating:count:')\n            result.append(String(format:\
    \ \"%d\\\"\", n - 9))\n                                ^~~~~~~\n             \
    \                    repeating       count: \n"
  stdout: ''
  timestamp: 1660014116
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty()\
    \ {\n        return []\n    }\n    var result = [String]()\n    var index = 0\n\
    \    var digits = arr\n    var lastDigit = digits[index]\n    var lastDigitName\
    \ = One\n    for index = 0; index < digits.count; index++ {\n        if digits[index]\
    \ > 9 {\n            lastDigit = digits[index] - 10\n            lastDigitName\
    \ = Two\n        } else if digits[index] > 9 {\n            lastDigit = digits[index]\
    \ - 10\n            lastDigitName = Three\n        } else if digits[index] > 9\
    \ {\n            lastDigit = digits[index] - 10\n            lastDigitName = Four\n\
    \        } else if digits[index] > 9 {\n            lastDigit = digits[index]\
    \ - 10\n            lastDigitName = Five\n        } else if digits[index] > 9\
    \ {\n            lastDigit = digits[index] - 10\n            lastDigitName = Six\n\
    \        } else if digits[index] > 9 {\n            lastDigit = digits[index]\
    \ - 10\n            lastDigitName = Seven\n        } else if digits[index] > 9\
    \ {\n            lastDigit = digits[index] - 10\n            lastDigitName = Eight\n\
    \        } else if digits[index] > 9 {\n            lastDigit = digits[index]\
    \ - 10\n            lastDigitName = Nine\n        } else {\n            lastDigit\
    \ = digits[index]\n            lastDigitName = One\n        }\n        result.append(lastDigitName)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpnfigj36y.swift:23:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for index = 0; index < digits.count; index++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpnfigj36y.swift:15:12: error: cannot call value of non-function type 'Bool'\n\
    \    if arr.isEmpty() {\n           ^      ~~\n                  \n/tmp/tmpnfigj36y.swift:22:25:\
    \ error: cannot find 'One' in scope\n    var lastDigitName = One\n           \
    \             ^~~\n"
  stdout: ''
  timestamp: 1660014115
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    let min = arr[0]\n    let max = arr[arr.count - 1]\n\
    \    var result = [String]()\n    for i in arr {\n        if i < min || i > max\
    \ {\n            continue\n        }\n        let digit = String(i)\n        result.append(digits[digit])\n\
    \    }\n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp369tlahi.swift:24:23: error: cannot find 'digits' in scope\n  \
    \      result.append(digits[digit])\n                      ^~~~~~\n"
  stdout: ''
  timestamp: 1660014115
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    \n    var result = [String]()\n    \n    var i = 0\n\
    \    var j = 0\n    var k = arr.count - 1\n    \n    while i < k {\n        if\
    \ arr[i] < 10 {\n            result.append(String(arr[i]))\n            i += 1\n\
    \            continue\n        }\n        \n        if arr[i] > 9 {\n        \
    \    result.append(String(arr[i] - 10))\n            i += 1\n            continue\n\
    \        }\n        \n        if arr[i] == 0 {\n            result.append(String(arr[i]))\n\
    \            i += 1\n            continue\n        }\n        \n        if arr[i]\
    \ < 0 {\n            result.append(String(arr[i]))\n            i += 1\n     \
    \       continue\n        }\n        \n        if arr[i] > 9 {\n            result.append(String(arr[i]\
    \ - 10))\n            i += 1\n            continue\n        }\n        \n    \
    \    if arr[i] > 9 {\n            result.append(String(arr[i] - 10))\n       \
    \     i += 1\n            continue\n        }\n        \n        if arr[i] < 0\
    \ {\n            result.append(String(arr[i]))\n            i += 1\n         \
    \   continue\n        }\n        \n        if arr[i] < 10 {\n            result.append(String(arr[i]))\n\
    \            i += 1\n            continue\n        }\n        \n        if arr[i]\
    \ > 9 {\n            result.append(String(arr[i] - 10))\n            i += 1\n\
    \            continue\n        }\n        \n        if arr[i] > 9 {\n        \
    \    result.append(String(arr[i] - 10))\n            i += 1\n            continue\n\
    \        }\n        \n        if arr[i] < 0 {\n            result.append(String(arr[i]))\n\
    \            i += 1\n            continue\n        }\n        \n        if arr[i]\
    \ < 10 {\n            result.append(String(arr[i]))\n            i += 1\n    \
    \        continue\n        }\n        \n        if arr[i] > 9 {\n            result.append(String(arr[i]\
    \ - 10))\n            i += 1\n            continue\n        }\n        \n    \
    \    if arr[i] > 9 {\n            result.append(String(arr[i] - 10))\n       \
    \     i += 1\n            continue\n        }\n        \n        if arr[i] < 0\
    \ {\n            result.append(String(arr[i]))\n            i += 1\n         \
    \   continue\n        }\n        \n        if arr[i] < 10 {\n            result.append(String(arr[i]))\n\
    \            i += 1\n            continue\n        }\n        \n        if arr[i]\
    \ > 9 {\n            result.append(String(arr[i] - 10))\n            i += 1\n\
    \            continue\n        }\n        \n        if arr[i] > 9 {\n        \
    \    result.append(String(arr[i] - 10))\n            i += 1\n            continue\n\
    \        }\n        \n        if arr[i] < 0 {\n            result.append(String(arr[i]))\n\
    \            i += 1\n            continue\n        }\n        \n        if arr[i]\
    \ < 10 {\n            result.append(String(arr[i]))\n            i += 1\n    \
    \        continue\n        }\n        \n        if arr[i] > 9 {\n            result.append(String(arr[i]\
    \ - 10))\n            i += 1\n            continue\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpselir8jk.swift:167:63: error: expected '}' at end of brace statement\n\
    assert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n       \
    \                                                       ^\n/tmp/tmpselir8jk.swift:23:17:\
    \ note: to match this opening '{'\n    while i < k {\n                ^\n/tmp/tmpselir8jk.swift:167:63:\
    \ error: expected '}' at end of brace statement\nassert(by_length(arr: [9, 4,\
    \ 8]) == [\"Nine\", \"Eight\", \"Four\"])\n                                  \
    \                            ^\n/tmp/tmpselir8jk.swift:14:40: note: to match this\
    \ opening '{'\nfunc by_length(arr: [Int]) -> [String] {\n                    \
    \                   ^\n/tmp/tmpselir8jk.swift:151:6: error: operator functions\
    \ can only be declared at global or in type scope\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpselir8jk.swift:20:9: warning:\
    \ initialization of variable 'j' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var j = 0\n    ~~~~^\n    _\n/tmp/tmpselir8jk.swift:21:9:\
    \ warning: variable 'k' was never mutated; consider changing to 'let' constant\n\
    \    var k = arr.count - 1\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660014116
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    let maxLength = arr.max()!\n    var result = [String]()\n\
    \    for i in 0..<maxLength {\n        let index = Int(i) - 1\n        let value\
    \ = arr[index]\n        switch value {\n        case 1:\n            result.append(String(format:\
    \ \"One\", arguments: nil))\n        case 2:\n            result.append(String(format:\
    \ \"Two\", arguments: nil))\n        case 3:\n            result.append(String(format:\
    \ \"Three\", arguments: nil))\n        case 4:\n            result.append(String(format:\
    \ \"Four\", arguments: nil))\n        case 5:\n            result.append(String(format:\
    \ \"Five\", arguments: nil))\n        case 6:\n            result.append(String(format:\
    \ \"Six\", arguments: nil))\n        case 7:\n            result.append(String(format:\
    \ \"Seven\", arguments: nil))\n        case 8:\n            result.append(String(format:\
    \ \"Eight\", arguments: nil))\n        case 9:\n            result.append(String(format:\
    \ \"Nine\", arguments: nil))\n        default:\n            break\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpss7a20o5.swift:23:33: error: incorrect argument labels in call\
    \ (have 'format:arguments:', expected 'repeating:count:')\n            result.append(String(format:\
    \ \"One\", arguments: nil))\n                                ^~~~~~~         ~~~~~~~~~\n\
    \                                 repeating      count\n/tmp/tmpss7a20o5.swift:25:33:\
    \ error: incorrect argument labels in call (have 'format:arguments:', expected\
    \ 'repeating:count:')\n            result.append(String(format: \"Two\", arguments:\
    \ nil))\n                                ^~~~~~~         ~~~~~~~~~\n         \
    \                        repeating      count\n/tmp/tmpss7a20o5.swift:27:33: error:\
    \ incorrect argument labels in call (have 'format:arguments:', expected 'repeating:count:')\n\
    \            result.append(String(format: \"Three\", arguments: nil))\n      \
    \                          ^~~~~~~           ~~~~~~~~~\n                     \
    \            repeating        count\n/tmp/tmpss7a20o5.swift:29:33: error: incorrect\
    \ argument labels in call (have 'format:arguments:', expected 'repeating:count:')\n\
    \            result.append(String(format: \"Four\", arguments: nil))\n       \
    \                         ^~~~~~~          ~~~~~~~~~\n                       \
    \          repeating       count\n/tmp/tmpss7a20o5.swift:31:33: error: incorrect\
    \ argument labels in call (have 'format:arguments:', expected 'repeating:count:')\n\
    \            result.append(String(format: \"Five\", arguments: nil))\n       \
    \                         ^~~~~~~          ~~~~~~~~~\n                       \
    \          repeating       count\n/tmp/tmpss7a20o5.swift:33:33: error: incorrect\
    \ argument labels in call (have 'format:arguments:', expected 'repeating:count:')\n\
    \            result.append(String(format: \"Six\", arguments: nil))\n        \
    \                        ^~~~~~~         ~~~~~~~~~\n                         \
    \        repeating      count\n/tmp/tmpss7a20o5.swift:35:33: error: incorrect\
    \ argument labels in call (have 'format:arguments:', expected 'repeating:count:')\n\
    \            result.append(String(format: \"Seven\", arguments: nil))\n      \
    \            "
  stdout: ''
  timestamp: 1660014116
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let min = min(arr)\n\
    \    let max = max(arr)\n    for number in arr {\n        let index = number -\
    \ min\n        result.append(String(index))\n    }\n    for number in arr {\n\
    \        let index = number - min\n        result.append(String(index))\n    }\n\
    \    return result.reverse()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpquyi6s0n.swift:19:22: error: missing argument for parameter #2\
    \ in call\n    let min = min(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.min:1:24: note: 'min' declared here\n@inlinable public\
    \ func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmpquyi6s0n.swift:20:22: error: missing argument for parameter #2\
    \ in call\n    let max = max(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable public\
    \ func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmpquyi6s0n.swift:29:19: error: cannot convert return expression of\
    \ type '()' to return type '[String]'\n    return result.reverse()\n         \
    \  ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014115
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result: [String] = []\n    var index = 0\n\
    \    var digit = arr[index]\n    var isNegative = false\n    if digit < 0 {\n\
    \        digit = -digit\n        isNegative = true\n    }\n    switch digit {\n\
    \    case 0:\n        result.append(\"\")\n    case 1:\n        result.append(One)\n\
    \    case 2:\n        result.append(Two)\n    case 3:\n        result.append(Three)\n\
    \    case 4:\n        result.append(Four)\n    case 5:\n        result.append(Five)\n\
    \    case 6:\n        result.append(Six)\n    case 7:\n        result.append(Seven)\n\
    \    case 8:\n        result.append(Eight)\n    case 9:\n        result.append(Nine)\n\
    \    default:\n        return result\n    }\n    index += 1\n    while index <\
    \ arr.count {\n        digit = arr[index]\n        switch digit {\n        case\
    \ 0:\n            result.append(\"\")\n        case 1:\n            result.append(One)\n\
    \        case 2:\n            result.append(Two)\n        case 3:\n          \
    \  result.append(Three)\n        case 4:\n            result.append(Four)\n  \
    \      case 5:\n            result.append(Five)\n        case 6:\n           \
    \ result.append(Six)\n        case 7:\n            result.append(Seven)\n    \
    \    case 8:\n            result.append(Eight)\n        case 9:\n            result.append(Nine)\n\
    \        default:\n            return result\n        }\n        index += 1\n\
    \    }\n    if isNegative {\n        result.insert(0, \"-\")\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1,\
    \ 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpknqc5ppz.swift:30:23: error: cannot find 'One' in scope\n     \
    \   result.append(One)\n                      ^~~\n/tmp/tmpknqc5ppz.swift:32:23:\
    \ error: cannot find 'Two' in scope\n        result.append(Two)\n            \
    \          ^~~\n/tmp/tmpknqc5ppz.swift:34:23: error: cannot find 'Three' in scope\n\
    \        result.append(Three)\n                      ^~~~~\n/tmp/tmpknqc5ppz.swift:36:23:\
    \ error: cannot find 'Four' in scope\n        result.append(Four)\n          \
    \            ^~~~\n/tmp/tmpknqc5ppz.swift:38:23: error: cannot find 'Five' in\
    \ scope\n        result.append(Five)\n                      ^~~~\n/tmp/tmpknqc5ppz.swift:40:23:\
    \ error: cannot find 'Six' in scope\n        result.append(Six)\n            \
    \          ^~~\n/tmp/tmpknqc5ppz.swift:42:23: error: cannot find 'Seven' in scope\n\
    \        result.append(Seven)\n                      ^~~~~\n/tmp/tmpknqc5ppz.swift:44:23:\
    \ error: cannot find 'Eight' in scope\n        result.append(Eight)\n        \
    \              ^~~~~\n/tmp/tmpknqc5ppz.swift:46:23: error: cannot find 'Nine'\
    \ in scope\n        result.append(Nine)\n                      ^~~~\n/tmp/tmpknqc5ppz.swift:57:27:\
    \ error: cannot find 'One' in scope\n            result.append(One)\n        \
    \                  ^~~\n/tmp/tmpknqc5ppz.swift:59:27: error: cannot find 'Two'\
    \ in scope\n            result.append(Two)\n                          ^~~\n/tmp/tmpknqc5ppz.swift:61:27:\
    \ error: cannot find 'Three' in scope\n            result.append(Three)\n    \
    \                      ^~~~~\n/tmp/tmpknqc5ppz.swift:63:27: error: cannot find\
    \ 'Four' in scope\n            result.append(Four)\n                         \
    \ ^~~~\n/tmp/tmpknqc5ppz.swift:65:27: error: cannot find 'Five' in scope\n   \
    \         result.append(Five)\n                          ^~~~\n/tmp/tmpknqc5ppz.swift:67:27:\
    \ error: cannot find 'Six' in scope\n            result.append(Six)\n        \
    \                  ^~~\n/tmp/tmpknqc5ppz.swift:69:27: error: cannot find 'Seven'\
    \ in scope\n            result.append(Seven)\n                          ^~~~~\n\
    /tmp/tmpknqc5ppz.swift:71:27: error: cannot find 'Eight' in scope\n         "
  stdout: ''
  timestamp: 1660014115
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty()\
    \ {\n        return []\n    }\n    var result = [String]()\n    var i = 0\n  \
    \  for num in arr {\n        if num < 1 || num > 9 {\n            continue\n \
    \       }\n        i += 1\n        result.append(String(num))\n    }\n    for\
    \ _ in 0..<i {\n        result.append(String(arr[arr.index(arr.startIndex, offsetBy:\
    \ -1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpx_jrrm68.swift:15:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n"
  stdout: ''
  timestamp: 1660014115
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    var i = 0\n    var j = 0\n    var k = 0\n    for k in 0..<arr.count {\n \
    \       if arr[k] == 1 {\n            result.append(One[k])\n        } else if\
    \ arr[k] == 2 {\n            result.append(Two[k])\n        } else if arr[k] ==\
    \ 3 {\n            result.append(Three[k])\n        } else if arr[k] == 4 {\n\
    \            result.append(Four[k])\n        } else if arr[k] == 5 {\n       \
    \     result.append(Five[k])\n        } else if arr[k] == 6 {\n            result.append(Six[k])\n\
    \        } else if arr[k] == 7 {\n            result.append(Seven[k])\n      \
    \  } else if arr[k] == 8 {\n            result.append(Eight[k])\n        } else\
    \ if arr[k] == 9 {\n            result.append(Nine[k])\n        }\n    }\n   \
    \ for k in 0..<result.count {\n        if i == 0 {\n            j = k\n      \
    \  }\n        if j == 0 {\n            i = k\n        }\n        if arr[i] < arr[j]\
    \ {\n            result[k] = One[j]\n            j = j - 1\n        } else if\
    \ arr[i] > arr[j] {\n            result[k] = One[i]\n            i = i - 1\n \
    \       } else {\n            result[k] = Two[j]\n            j = j - 1\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmphs8w382p.swift:21:27: error: cannot find 'One' in scope\n     \
    \       result.append(One[k])\n                          ^~~\n/tmp/tmphs8w382p.swift:23:27:\
    \ error: cannot find 'Two' in scope\n            result.append(Two[k])\n     \
    \                     ^~~\n/tmp/tmphs8w382p.swift:25:27: error: cannot find 'Three'\
    \ in scope\n            result.append(Three[k])\n                          ^~~~~\n\
    /tmp/tmphs8w382p.swift:27:27: error: cannot find 'Four' in scope\n           \
    \ result.append(Four[k])\n                          ^~~~\n/tmp/tmphs8w382p.swift:29:27:\
    \ error: cannot find 'Five' in scope\n            result.append(Five[k])\n   \
    \                       ^~~~\n/tmp/tmphs8w382p.swift:31:27: error: cannot find\
    \ 'Six' in scope\n            result.append(Six[k])\n                        \
    \  ^~~\n/tmp/tmphs8w382p.swift:33:27: error: cannot find 'Seven' in scope\n  \
    \          result.append(Seven[k])\n                          ^~~~~\n/tmp/tmphs8w382p.swift:35:27:\
    \ error: cannot find 'Eight' in scope\n            result.append(Eight[k])\n \
    \                         ^~~~~\n/tmp/tmphs8w382p.swift:37:27: error: cannot find\
    \ 'Nine' in scope\n            result.append(Nine[k])\n                      \
    \    ^~~~\n/tmp/tmphs8w382p.swift:48:25: error: cannot find 'One' in scope\n \
    \           result[k] = One[j]\n                        ^~~\n/tmp/tmphs8w382p.swift:51:25:\
    \ error: cannot find 'One' in scope\n            result[k] = One[i]\n        \
    \                ^~~\n/tmp/tmphs8w382p.swift:54:25: error: cannot find 'Two' in\
    \ scope\n            result[k] = Two[j]\n                        ^~~\n"
  stdout: ''
  timestamp: 1660014115
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard !arr.isEmpty\
    \ else { return [] }\n    \n    var result: [String] = []\n    \n    for i in\
    \ arr {\n        if i >= 1 && i <= 9 {\n            result.append(String(format:\
    \ \"%d\\\"\", i))\n        } else {\n            result.append(String(format:\
    \ \"%d\\\"\", i))\n        }\n    }\n    \n    for i in result {\n        result.remove(at:\
    \ result.index(of: i))\n    }\n    \n    for i in result {\n        result.remove(at:\
    \ result.index(of: i))\n    }\n    \n    for i in result {\n        result.remove(at:\
    \ result.index(of: i))\n    }\n    \n    for i in result {\n        result.remove(at:\
    \ result.index(of: i))\n    }\n    \n    for i in result {\n        result.remove(at:\
    \ result.index(of: i))\n    }\n    \n    for i in result {\n        result.remove(at:\
    \ result.index(of: i))\n    }\n    \n    for i in result {\n        result.remove(at:\
    \ result.index(of: i))\n    }\n    \n    for i in result {\n        result.remove(at:\
    \ result.index(of: i))\n    }\n    \n    for i in result {\n        result.remove(at:\
    \ result.index(of: i))\n    }\n    \n    for i in result {\n        result.remove(at:\
    \ result.index(of: i))\n    }\n    \n    for i in result {\n        result.remove(at:\
    \ result.index(of: i))\n    }\n    \n    for i in result {\n        result.remove(at:\
    \ result.index(of: i))\n    }\n    \n    for i in result {\n        result.remove(at:\
    \ result.index(of: i))\n    }\n    \n    for i in result {\n        result.remove(at:\
    \ result.index(of: i))\n    }\n    \n    for i in result {\n        result.remove(at:\
    \ result.index(of: i))\n    }\n    \n    for i in result {\n        result.remove(at:\
    \ result.index(of: i))\n    }\n    \n    for i in result {\n        result.remove(at:\
    \ result.index(of: i))\n    }\n    \n    for i in result {\n        result.remove(at:\
    \ result.index(of: i))\n    }\n    \n    for i in result {\n        result.remove(at:\
    \ result.index(of: i))\n    }\n    \n    for i in result {\n        result.remove(at:\
    \ result.index(of: i))\n    }\n    \n    for i in result {\n        result.remove(at:\
    \ result.index(of: i))\n    }\n    \n    for i in result {\n        result.remove(at:\
    \ result.index(of: i))\n    }\n    \n    for i in result {\n        result.remove(at:\
    \ result.index(of: i))\n    }\n    \n    for i in result {\n        result.remove(at:\
    \ result.index(of: i))\n    }\n    \n    for i in result {\n        result.remove(at:\
    \ result.index(of: i))\n    }\n    \n    for i in \n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbl02v957.swift:127:13: error: expected Sequence expression for\
    \ for-each loop\n    for i in \n            ^\n/tmp/tmpbl02v957.swift:127:13:\
    \ error: expected '{' to start the body of for-each loop\n    for i in \n    \
    \        ^\n/tmp/tmpbl02v957.swift:21:33: error: incorrect argument labels in\
    \ call (have 'format:_:', expected 'repeating:count:')\n            result.append(String(format:\
    \ \"%d\\\"\", i))\n                                ^~~~~~~\n                 \
    \                repeating       count: \n/tmp/tmpbl02v957.swift:23:33: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \            result.append(String(format: \"%d\\\"\", i))\n                  \
    \              ^~~~~~~\n                                 repeating       count:\
    \ \n/tmp/tmpbl02v957.swift:28:34: error: value of optional type 'Array<String>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<String>.Index'\
    \ (aka 'Int')\n        result.remove(at: result.index(of: i))\n              \
    \                   ^\n/tmp/tmpbl02v957.swift:28:34: note: coalesce using '??'\
    \ to provide a default when the optional value contains 'nil'\n        result.remove(at:\
    \ result.index(of: i))\n                                 ^\n                 \
    \                             ?? <#default value#>\n/tmp/tmpbl02v957.swift:28:34:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        result.remove(at: result.index(of: i))\n                    \
    \             ^\n                                             !\n/tmp/tmpbl02v957.swift:32:34:\
    \ error: value of optional type 'Array<String>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<String>.Index' (aka 'Int')\n        result.remove(at:\
    \ result.index(of: i))\n                                 ^\n/tmp/tmpbl02v957.swift:32:34:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        result.remove(at: result.index(of: i))\n                    \
    \             ^\n                                              ?? <#default v"
  stdout: ''
  timestamp: 1660014116
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    let len = arr.count\n    var result = [String]()\n\
    \    for i in 0..<len {\n        let index = arr[i] % 10\n        result.append(names[index])\n\
    \        arr[i] /= 10\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpxaqrq9vp.swift:20:23: error: cannot find 'names' in scope\n   \
    \     result.append(names[index])\n                      ^~~~~\n/tmp/tmpxaqrq9vp.swift:21:16:\
    \ error: left side of mutating operator isn't mutable: 'arr' is a 'let' constant\n\
    \        arr[i] /= 10\n        ~~~    ^\n"
  stdout: ''
  timestamp: 1660014115
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var i = 0\n    for\
    \ n in arr {\n        if n < 1 || n > 9 {\n            continue\n        }\n \
    \       let digit = String(n)\n        if i == 0 {\n            result.append(digit)\n\
    \        } else {\n            result.append(digit.reversed())\n        }\n  \
    \      i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpx4398neg.swift:28:20: error: no exact matches in call to instance\
    \ method 'append'\n            result.append(digit.reversed())\n             \
    \      ^\nSwift.Array:6:37: note: candidate expects value of type 'String' for\
    \ parameter #1 (got '[String.Element]' (aka 'Array<Character>'))\n    @inlinable\
    \ public mutating func append(_ newElement: __owned Element)\n               \
    \                     ^\nSwift.RangeReplaceableCollection:4:37: note: candidate\
    \ expects value of type 'String' for parameter #1 (got '[String.Element]' (aka\
    \ 'Array<Character>'))\n    @inlinable public mutating func append(_ newElement:\
    \ __owned Self.Element)\n                                    ^\n/tmp/tmpx4398neg.swift:28:20:\
    \ note: found candidate with type '(__owned [String.Element]) -> ()' (aka '(__owned\
    \ Array<Character>) -> ()')\n            result.append(digit.reversed())\n   \
    \                ^\n"
  stdout: ''
  timestamp: 1660014115
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for num in arr {\n        if num > 9 {\n            num = num - 10\n    \
    \    }\n        result.append(name_to_num[num])\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmptgb3cj0s.swift:18:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = num - 10\n            ^~~\n/tmp/tmptgb3cj0s.swift:20:23:\
    \ error: cannot find 'name_to_num' in scope\n        result.append(name_to_num[num])\n\
    \                      ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014115
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    let min = 1\n    let max = 9\n    var result = [String]()\n\
    \    for num in arr {\n        let index = min + num % 10\n        result.append(names[index])\n\
    \    }\n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp7s55g5kj.swift:21:23: error: cannot find 'names' in scope\n   \
    \     result.append(names[index])\n                      ^~~~~\n"
  stdout: ''
  timestamp: 1660014115
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var index = 0\n  \
    \  var last = 0\n    for number in arr {\n        if number == 1 {\n         \
    \   result.append(One[index])\n            index++\n            last = number\n\
    \        } else if number == 2 {\n            result.append(Two[index])\n    \
    \        index++\n            last = number\n        } else if number == 3 {\n\
    \            result.append(Three[index])\n            index++\n            last\
    \ = number\n        } else if number == 4 {\n            result.append(Four[index])\n\
    \            index++\n            last = number\n        } else if number == 5\
    \ {\n            result.append(Five[index])\n            index++\n           \
    \ last = number\n        } else if number == 6 {\n            result.append(Six[index])\n\
    \            index++\n            last = number\n        } else if number == 7\
    \ {\n            result.append(Seven[index])\n            index++\n          \
    \  last = number\n        } else if number == 8 {\n            result.append(Eight[index])\n\
    \            index++\n            last = number\n        } else if number == 9\
    \ {\n            result.append(Nine[index])\n            index++\n           \
    \ last = number\n        } else {\n            result.append(String(number))\n\
    \        }\n    }\n    if last == 0 {\n        return arr\n    }\n    result.append(String(last))\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmprvubfvkg.swift:23:27: error: cannot find 'One' in scope\n     \
    \       result.append(One[index])\n                          ^~~\n/tmp/tmprvubfvkg.swift:24:18:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  index++\n                 ^~\n/tmp/tmprvubfvkg.swift:27:27: error: cannot find\
    \ 'Two' in scope\n            result.append(Two[index])\n                    \
    \      ^~~\n/tmp/tmprvubfvkg.swift:28:18: error: cannot find operator '++' in\
    \ scope; did you mean '+= 1'?\n            index++\n                 ^~\n/tmp/tmprvubfvkg.swift:31:27:\
    \ error: cannot find 'Three' in scope\n            result.append(Three[index])\n\
    \                          ^~~~~\n/tmp/tmprvubfvkg.swift:32:18: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n            index++\n   \
    \              ^~\n/tmp/tmprvubfvkg.swift:35:27: error: cannot find 'Four' in\
    \ scope\n            result.append(Four[index])\n                          ^~~~\n\
    /tmp/tmprvubfvkg.swift:36:18: error: cannot find operator '++' in scope; did you\
    \ mean '+= 1'?\n            index++\n                 ^~\n/tmp/tmprvubfvkg.swift:39:27:\
    \ error: cannot find 'Five' in scope\n            result.append(Five[index])\n\
    \                          ^~~~\n/tmp/tmprvubfvkg.swift:40:18: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n            index++\n        \
    \         ^~\n/tmp/tmprvubfvkg.swift:43:27: error: cannot find 'Six' in scope\n\
    \            result.append(Six[index])\n                          ^~~\n/tmp/tmprvubfvkg.swift:44:18:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  index++\n                 ^~\n/tmp/tmprvubfvkg.swift:47:27: error: cannot find\
    \ 'Seven' in scope\n            result.append(Seven[index])\n                \
    \          ^~~~~\n/tmp/tmprvubfvkg.swift:48:18: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            index++\n                 ^~\n/tmp/tmprvubfvkg.swift:51:27:\
    \ error: cannot find 'Eight' in scope\n            result.append(Eight[index])\n\
    \                          ^~~~~\n/tmp/tmprvubfvkg.swift:52:18: "
  stdout: ''
  timestamp: 1660014115
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    let maxLength = max(arr.map { $0.count })\n    var\
    \ result = [String]()\n    for i in 0..<maxLength {\n        let index = arr.index(where:\
    \ { $0.count >= i })\n        if index == nil { return result }\n        let value\
    \ = arr[index!]\n        result.append(value)\n        arr.remove(at: index!)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpm00xf2x0.swift:16:45: error: missing argument for parameter #2\
    \ in call\n    let maxLength = max(arr.map { $0.count })\n                   \
    \                         ^\n                                            , <#[_]#>\n\
    Swift.max:1:24: note: 'max' declared here\n@inlinable public func max<T>(_ x:\
    \ T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmpm00xf2x0.swift:16:38:\
    \ error: value of type 'Int' has no member 'count'\n    let maxLength = max(arr.map\
    \ { $0.count })\n                                  ~~ ^~~~~\n/tmp/tmpm00xf2x0.swift:19:43:\
    \ error: value of type 'Int' has no member 'count'\n        let index = arr.index(where:\
    \ { $0.count >= i })\n                                       ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660014115
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var i = 0\n    for\
    \ num in arr {\n        if num >= 1 && num <= 9 {\n            result.append(String(num))\n\
    \        } else {\n            result.append(String(num))\n        }\n    }\n\
    \    for num in arr {\n        if num >= 1 && num <= 9 {\n            result[i]\
    \ = \"One\"\n            i += 1\n        }\n        if num >= 10 && num <= 99\
    \ {\n            result[i] = \"Two\"\n            i += 1\n        }\n        if\
    \ num >= 100 && num <= 999 {\n            result[i] = \"Three\"\n            i\
    \ += 1\n        }\n        if num >= 1000 && num <= 9999 {\n            result[i]\
    \ = \"Four\"\n            i += 1\n        }\n        if num >= 10000 && num <=\
    \ 99999 {\n            result[i] = \"Five\"\n            i += 1\n        }\n \
    \       if num >= 100000 && num <= 999999 {\n            result[i] = \"Six\"\n\
    \            i += 1\n        }\n        if num >= 1000000 && num <= 9999999 {\n\
    \            result[i] = \"Seven\"\n            i += 1\n        }\n        if\
    \ num >= 10000000 && num <= 99999999 {\n            result[i] = \"Eight\"\n  \
    \          i += 1\n        }\n        if num >= 100000000 && num <= 999999999\
    \ {\n            result[i] = \"Nine\"\n            i += 1\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp7kgzlrz2/tmp7kgzlrz2.swift:81: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b122c43bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b122c132b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b122c132988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b122c1317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7kgzlrz2                        0x0000562109ad29a1 <unavailable> + 6561

    5    libc.so.6                          0x00002b122c627460 __libc_start_main +
    245

    6    tmp7kgzlrz2                        0x0000562109ad2449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014116
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var last = 0\n   \
    \ for num in arr {\n        if num > 9 {\n            last = num\n        } else\
    \ {\n            if last > 0 {\n                result.append(\"\\(last)\")\n\
    \            }\n            result.append(name[num])\n            last = 0\n \
    \       }\n    }\n    if last > 0 {\n        result.append(\"\\(last)\")\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpr6e07xyh.swift:27:27: error: cannot find 'name' in scope\n    \
    \        result.append(name[num])\n                          ^~~~\n"
  stdout: ''
  timestamp: 1660014115
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let maxValue = max(arr)\n\
    \    let minValue = min(arr)\n    if maxValue == minValue {\n        return result\n\
    \    }\n    let maxDigit = maxValue % 10\n    let minDigit = minValue % 10\n \
    \   if maxDigit == minDigit {\n        return result\n    }\n    let maxDigitName\
    \ = String(maxDigit)\n    let minDigitName = String(minDigit)\n    if maxDigitName\
    \ == minDigitName {\n        return result\n    }\n    let maxDigitIndex = arr.index(of:\
    \ maxDigit)!\n    let minDigitIndex = arr.index(of: minDigit)!\n    let maxDigitName\
    \ = arr[maxDigitIndex]\n    let minDigitName = arr[minDigitIndex]\n    if maxDigitName\
    \ == minDigitName {\n        return result\n    }\n    let maxDigitNameIndex =\
    \ arr.index(of: maxDigitName)!\n    let minDigitNameIndex = arr.index(of: minDigitName)!\n\
    \    let maxDigitNameName = arr[maxDigitNameIndex]\n    let minDigitNameName =\
    \ arr[minDigitNameIndex]\n    if maxDigitNameName == minDigitNameName {\n    \
    \    return result\n    }\n    let maxDigitNameNameIndex = arr.index(of: maxDigitNameName)!\n\
    \    let minDigitNameNameIndex = arr.index(of: minDigitNameName)!\n    let maxDigitNameNameName\
    \ = arr[maxDigitNameNameIndex]\n    let minDigitNameNameName = arr[minDigitNameNameIndex]\n\
    \    if maxDigitNameNameName == minDigitNameNameName {\n        return result\n\
    \    }\n    let maxDigitNameNameNameIndex = arr.index(of: maxDigitNameNameName)!\n\
    \    let minDigitNameNameNameIndex = arr.index(of: minDigitNameNameName)!\n  \
    \  let maxDigitNameNameNameName = arr[maxDigitNameNameNameIndex]\n    let minDigitNameNameNameName\
    \ = arr[minDigitNameNameNameIndex]\n    if maxDigitNameNameNameName == minDigitNameNameNameName\
    \ {\n        return result\n    }\n    let maxDigitNameNameNameNameIndex = arr.index(of:\
    \ maxDigitNameNameNameName)!\n    let minDigitNameNameNameNameIndex = arr.index(of:\
    \ minDigitNameNameNameName)!\n    let maxDigitNameNameNameNameName = arr[maxDigitNameNameNameNameIndex]\n\
    \    let minDigitNameNameNameNameName = arr[minDigitNameNameNameNameIndex]\n \
    \   if maxDigitNameNameNameNameName == minDigitNameNameNameNameName {\n      \
    \  return result\n    }\n    let maxDigitNameNameNameNameNameIndex = arr.index(of:\
    \ maxDigitNameNameNameNameName)!\n    let minDigit\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpysmxff2r.swift:19:27: error: missing argument for parameter #2\
    \ in call\n    let maxValue = max(arr)\n                          ^\n        \
    \                  , <#[Int]#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable\
    \ public func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n             \
    \          ^\n/tmp/tmpysmxff2r.swift:20:27: error: missing argument for parameter\
    \ #2 in call\n    let minValue = min(arr)\n                          ^\n     \
    \                     , <#[Int]#>\nSwift.min:1:24: note: 'min' declared here\n\
    @inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n    \
    \                   ^\n/tmp/tmpysmxff2r.swift:70:9: error: type annotation missing\
    \ in pattern\n    let minDigit\n        ^\n"
  stdout: ''
  timestamp: 1660014115
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    var i = 0\n    for number in arr {\n        if number < 1 || number > 9 {\n\
    \            continue\n        }\n        result.append(String(number))\n    }\n\
    \    for number in arr {\n        if number < 1 || number > 9 {\n            continue\n\
    \        }\n        result[i] = \"\\(number)\"\n        i += 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1,\
    \ 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpgb_1vj_4/tmpgb_1vj_4.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a0e093c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a0dd8ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a0dd8a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a0dd897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgb_1vj_4                        0x0000561087717bb1 <unavailable> + 7089

    5    libc.so.6                          0x00002b8a0e27f460 __libc_start_main +
    245

    6    tmpgb_1vj_4                        0x0000561087717659 <unavailable> + 5721

    '
  stdout: ''
  timestamp: 1660014116
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var last = 0\n   \
    \ for num in arr {\n        if num > 9 {\n            last = num\n        } else\
    \ {\n            if last == 0 {\n                result.append(String(num))\n\
    \            } else {\n                result.append(String(last))\n         \
    \       result.append(String(num))\n            }\n            last = 0\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpkwgavjfl/tmpkwgavjfl.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b143e6c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b143e3b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b143e3b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b143e3b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkwgavjfl                        0x00005618d7ebc951 <unavailable> + 6481

    5    libc.so.6                          0x00002b143e8ae460 __libc_start_main +
    245

    6    tmpkwgavjfl                        0x00005618d7ebc3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014116
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else {\n        return []\n    }\n\n    var result: [String] = []\n    var\
    \ i = 0\n    var j = 0\n    var n = arr.count\n    var temp = 0\n\n    while i\
    \ < n {\n        temp = arr[i]\n        if temp < 10 {\n            result.append(String(temp))\n\
    \            i += 1\n            continue\n        }\n\n        if temp < 100\
    \ {\n            result.append(String(temp / 10))\n            result.append(String(temp\
    \ % 10))\n            i += 1\n            continue\n        }\n\n        if temp\
    \ < 1000 {\n            result.append(String(temp / 100))\n            result.append(String(temp\
    \ % 100))\n            result.append(String(temp / 10))\n            result.append(String(temp\
    \ % 10))\n            i += 1\n            continue\n        }\n\n        if temp\
    \ < 10000 {\n            result.append(String(temp / 1000))\n            result.append(String(temp\
    \ % 1000))\n            result.append(String(temp / 100))\n            result.append(String(temp\
    \ % 100))\n            result.append(String(temp / 10))\n            result.append(String(temp\
    \ % 10))\n            i += 1\n            continue\n        }\n\n        if temp\
    \ < 100000 {\n            result.append(String(temp / 10000))\n            result.append(String(temp\
    \ % 10000))\n            result.append(String(temp / 1000))\n            result.append(String(temp\
    \ % 1000))\n            result.append(String(temp / 100))\n            result.append(String(temp\
    \ % 100))\n            result.append(String(temp / 10))\n            result.append(String(temp\
    \ % 10))\n            i += 1\n            continue\n        }\n\n        if temp\
    \ < 1000000 {\n            result.append(String(temp / 100000))\n            result.append(String(temp\
    \ % 100000))\n            result.append(String(temp / 10000))\n            result.append(String(temp\
    \ % 10000))\n            result.append(String(temp / 1000))\n            result.append(String(temp\
    \ % 1000))\n            result.append(String(temp / 100))\n            result.append(String(temp\
    \ % 100))\n            result.append(String(temp / 10))\n            result.append(String(temp\
    \ % 10))\n            i += 1\n            continue\n        }\n\n        if temp\
    \ < 10000000 {\n            result.append(String(temp / 1000000))\n          \
    \  result.append(String(temp % 1000000))\n            result.append(String(temp\
    \ / 100000))\n            result.append(String(temp % 100000))\n            result.append(String(temp\
    \ / 10000))\n            result.append(String(temp % 10000))\n            result.append(String(temp\
    \ / 1000))\n            result.append(String(temp % 1000))\n            result.append(String(temp\
    \ / 100))\n            result.append(String(temp % 100))\n            result.append(String(temp\
    \ / 10))\n            result.append(String(temp % 10))\n            i += 1\n \
    \           continue\n        }\n\n        if temp < 100000000 {\n           \
    \ result.append(String(temp / 10000000))\n            result.append(String(temp\
    \ % 10000000))\n            result.append(String(temp / 1000000))\n          \
    \  result.append(String(temp % 1000000))\n            result.append(String(temp\
    \ / 100000))\n            result.append(String(temp % 100000))\n            result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp56gql9v6.swift:132:63: error: expected '}' at end of brace statement\n\
    assert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n       \
    \                                                       ^\n/tmp/tmp56gql9v6.swift:25:17:\
    \ note: to match this opening '{'\n    while i < n {\n                ^\n/tmp/tmp56gql9v6.swift:132:63:\
    \ error: expected '}' at end of brace statement\nassert(by_length(arr: [9, 4,\
    \ 8]) == [\"Nine\", \"Eight\", \"Four\"])\n                                  \
    \                            ^\n/tmp/tmp56gql9v6.swift:14:40: note: to match this\
    \ opening '{'\nfunc by_length(arr: [Int]) -> [String] {\n                    \
    \                   ^\n/tmp/tmp56gql9v6.swift:112:13: warning: variable is unused\n\
    \            result\n            ^~~~~~\n/tmp/tmp56gql9v6.swift:116:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmp56gql9v6.swift:21:9:\
    \ warning: initialization of variable 'j' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var j = 0\n    ~~~~^\n    _\n/tmp/tmp56gql9v6.swift:22:9:\
    \ warning: variable 'n' was never mutated; consider changing to 'let' constant\n\
    \    var n = arr.count\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660014116
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    var i = 0\n    for number in arr {\n        if number < 1 || number > 9 {\n\
    \            continue\n        }\n        i += 1\n        result.append(String(number))\n\
    \        if i == 3 {\n            i = 1\n        }\n    }\n    if i == 1 {\n \
    \       result.removeLast()\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpze005rnz/tmpze005rnz.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b10620c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1061dbbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1061dbb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1061dba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpze005rnz                        0x000055bf126f79f1 <unavailable> + 6641

    5    libc.so.6                          0x00002b10622b0460 __libc_start_main +
    245

    6    tmpze005rnz                        0x000055bf126f7499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1660014116
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty()\
    \ {\n        return []\n    }\n    var result = [String]()\n    var i = 0\n  \
    \  for number in arr {\n        if number > 9 {\n            number = number -\
    \ 10\n        }\n        result.append(name[number])\n    }\n    return result.reverse()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpxxay86j8.swift:15:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n/tmp/tmpxxay86j8.swift:22:13: error: cannot assign to value: 'number' is\
    \ a 'let' constant\n            number = number - 10\n            ^~~~~~\n/tmp/tmpxxay86j8.swift:24:23:\
    \ error: cannot find 'name' in scope\n        result.append(name[number])\n  \
    \                    ^~~~\n/tmp/tmpxxay86j8.swift:26:19: error: cannot convert\
    \ return expression of type '()' to return type '[String]'\n    return result.reverse()\n\
    \           ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014116
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for number in arr {\n        if number >= 1 && number <= 9 {\n          \
    \  result.append(name[number])\n        }\n    }\n    if result.isEmpty {\n  \
    \      return result\n    }\n    return reverse(result).map { name[$0] }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmphexnaii6.swift:18:27: error: cannot find 'name' in scope\n    \
    \        result.append(name[number])\n                          ^~~~\n/tmp/tmphexnaii6.swift:24:12:\
    \ error: cannot find 'reverse' in scope\n    return reverse(result).map { name[$0]\
    \ }\n           ^~~~~~~\n/tmp/tmphexnaii6.swift:24:34: error: cannot find 'name'\
    \ in scope\n    return reverse(result).map { name[$0] }\n                    \
    \             ^~~~\n"
  stdout: ''
  timestamp: 1660014116
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let min = 1\n    let\
    \ max = 9\n    var i = 0\n    while i < arr.count {\n        if arr[i] >= min\
    \ && arr[i] <= max {\n            result.append(String(arr[i]))\n        }\n \
    \       i += 1\n    }\n    result.reverse()\n    for element in result {\n   \
    \     if element == \"One\" {\n            result.removeFirst()\n        }\n \
    \       if element == \"Two\" {\n            result.removeLast()\n        }\n\
    \        if element == \"Three\" {\n            result.removeLast()\n        \
    \    result.removeLast()\n        }\n        if element == \"Four\" {\n      \
    \      result.removeLast()\n            result.removeLast()\n            result.removeLast()\n\
    \        }\n        if element == \"Five\" {\n            result.removeLast()\n\
    \            result.removeLast()\n            result.removeLast()\n          \
    \  result.removeLast()\n        }\n        if element == \"Six\" {\n         \
    \   result.removeLast()\n            result.removeLast()\n            result.removeLast()\n\
    \            result.removeLast()\n            result.removeLast()\n        }\n\
    \        if element == \"Seven\" {\n            result.removeLast()\n        \
    \    result.removeLast()\n            result.removeLast()\n            result.removeLast()\n\
    \            result.removeLast()\n            result.removeLast()\n        }\n\
    \        if element == \"Eight\" {\n            result.removeLast()\n        \
    \    result.removeLast()\n            result.removeLast()\n            result.removeLast()\n\
    \            result.removeLast()\n            result.removeLast()\n          \
    \  result.removeLast()\n        }\n        if element == \"Nine\" {\n        \
    \    result.removeLast()\n            result.removeLast()\n            result.removeLast()\n\
    \            result.removeLast()\n            result.removeLast()\n          \
    \  result.removeLast()\n            result.removeLast()\n            result.removeLast()\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp6ewpgbf_/tmp6ewpgbf_.swift:102: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada28afac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada287f1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada287f1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada287f07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6ewpgbf_                        0x000056424db68c31 <unavailable> + 7217

    5    libc.so.6                          0x00002ada28ce6460 __libc_start_main +
    245

    6    tmp6ewpgbf_                        0x000056424db686d9 <unavailable> + 5849

    '
  stdout: ''
  timestamp: 1660014116
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    var i = 0\n    for n in arr {\n        if n < 1 || n > 9 {\n            continue\n\
    \        }\n        if i == 0 {\n            result.append(String(format: \"%d\\\
    \"\", n))\n        } else {\n            result.append(String(format: \"%d\\\"\
    \", n - 1))\n        }\n        i += 1\n    }\n    if i == 0 {\n        return\
    \ arr\n    }\n    result.reverse()\n    for n in result {\n        if n != \"\
    0\" && n != \"1\" {\n            return arr\n        }\n    }\n    return arr\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpglyrtpke.swift:22:33: error: incorrect argument labels in call\
    \ (have 'format:_:', expected 'repeating:count:')\n            result.append(String(format:\
    \ \"%d\\\"\", n))\n                                ^~~~~~~\n                 \
    \                repeating       count: \n/tmp/tmpglyrtpke.swift:24:33: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \            result.append(String(format: \"%d\\\"\", n - 1))\n              \
    \                  ^~~~~~~\n                                 repeating       count:\
    \ \n/tmp/tmpglyrtpke.swift:29:16: error: cannot convert return expression of type\
    \ '[Int]' to return type '[String]'\n        return arr\n               ^\n/tmp/tmpglyrtpke.swift:29:16:\
    \ note: arguments to generic parameter 'Element' ('Int' and 'String') are expected\
    \ to be equal\n        return arr\n               ^\n/tmp/tmpglyrtpke.swift:34:20:\
    \ error: cannot convert return expression of type '[Int]' to return type '[String]'\n\
    \            return arr\n                   ^\n/tmp/tmpglyrtpke.swift:34:20: note:\
    \ arguments to generic parameter 'Element' ('Int' and 'String') are expected to\
    \ be equal\n            return arr\n                   ^\n/tmp/tmpglyrtpke.swift:37:12:\
    \ error: cannot convert return expression of type '[Int]' to return type '[String]'\n\
    \    return arr\n           ^\n/tmp/tmpglyrtpke.swift:37:12: note: arguments to\
    \ generic parameter 'Element' ('Int' and 'String') are expected to be equal\n\
    \    return arr\n           ^\n"
  stdout: ''
  timestamp: 1660014116
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var last = 0\n   \
    \ for num in arr {\n        if num > 9 {\n            num %= 10\n            if\
    \ last < num {\n                last = num\n            }\n        } else {\n\
    \            last = num\n        }\n        result.append(names[num])\n    }\n\
    \    result.reverse()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpk75fs5qy.swift:22:17: error: left side of mutating operator isn't\
    \ mutable: 'num' is a 'let' constant\n            num %= 10\n            ~~~ ^\n\
    /tmp/tmpk75fs5qy.swift:29:23: error: cannot find 'names' in scope\n        result.append(names[num])\n\
    \                      ^~~~~\n"
  stdout: ''
  timestamp: 1660014116
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard !arr.isEmpty\
    \ else { return [] }\n    let min = min(arr)\n    let max = max(arr)\n    var\
    \ result = [String]()\n    for n in arr {\n        if n < min || n > max {\n \
    \           continue\n        }\n        let digit = n % 10\n        let name\
    \ = digitName(digit)\n        result.append(name)\n    }\n    return result.reversed()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfbywhxds.swift:16:22: error: missing argument for parameter #2\
    \ in call\n    let min = min(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.min:1:24: note: 'min' declared here\n@inlinable public\
    \ func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmpfbywhxds.swift:17:22: error: missing argument for parameter #2\
    \ in call\n    let max = max(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable public\
    \ func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmpfbywhxds.swift:24:20: error: cannot find 'digitName' in scope\n\
    \        let name = digitName(digit)\n                   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014116
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var i = 0\n    for\
    \ n in arr {\n        if n < 1 || n > 9 {\n            continue\n        }\n \
    \       if i == 0 {\n            result.append(ones[n - 1])\n        } else {\n\
    \            result.append(names[n - 1])\n        }\n        i += 1\n    }\n \
    \   return result.reverse()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp89lu81fe.swift:25:27: error: cannot find 'ones' in scope\n    \
    \        result.append(ones[n - 1])\n                          ^~~~\n/tmp/tmp89lu81fe.swift:27:27:\
    \ error: cannot find 'names' in scope\n            result.append(names[n - 1])\n\
    \                          ^~~~~\n/tmp/tmp89lu81fe.swift:31:19: error: cannot\
    \ convert return expression of type '()' to return type '[String]'\n    return\
    \ result.reverse()\n           ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014116
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let ones = arr.filter{\
    \ $0 < 10 }\n    let tens = arr.filter{ $0 >= 10 }\n    let tensReversed = tens.reverse()\n\
    \    let tensReversedString = tensReversed.map{ String($0) }\n    let tensReversedStringString\
    \ = tensReversedString.joined(separator: \" \")\n    let tensReversedStringStringString\
    \ = tensReversedStringString.joined(separator: \" \")\n    let tensReversedStringStringString\
    \ = \"\\(tensReversedStringStringString)\"\n    let tensReversedStringStringStringString\
    \ = \"\\(tensReversedStringStringStringString)\"\n    let tensReversedStringStringStringStringString\
    \ = \"\\(tensReversedStringStringStringStringString)\"\n    let tensReversedStringStringStringStringStringString\
    \ = \"\\(tensReversedStringStringStringStringStringStringString)\"\n    let tensReversedStringStringStringStringStringStringString\
    \ = \"\\(tensReversedStringStringStringStringStringStringStringStringString)\"\
    \n    let tensReversedStringStringStringStringStringStringStringString = \"\\\
    (tensReversedStringStringStringStringStringStringStringStringStringString)\"\n\
    \    let tensReversedStringStringStringStringStringStringStringStringString =\
    \ \"\\(tensReversedStringStringStringStringStringStringStringStringStringStringString)\"\
    \n    let tensReversedStringStringStringStringStringStringStringStringStringStringString\
    \ = \"\\(tensReversedStringStringStringStringStringStringStringStringStringStringStringStringString)\"\
    \n    let tensReversedStringStringStringStringStringStringStringStringStringStringStringString\
    \ = \"\\(tensReversedStringStringStringStringStringStringStringStringStringStringStringStringStringStringString)\"\
    \n    let tensReversedStringStringStringStringStringStringStringStringStringStringStringStringString\
    \ = \"\\(tensReversedStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringString)\"\
    \n    let tensReversedStringStringStringStringStringStringStringStringStringStringStringStringStringStringString\
    \ = \"\\(tensReversedStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringString)\"\
    \n    let tensReversedStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfjadkagr.swift:21:29: error: cannot use mutating member on immutable\
    \ value: 'tens' is a 'let' constant\n    let tensReversed = tens.reverse()\n \
    \                      ~~~~ ^\n/tmp/tmpfjadkagr.swift:20:5: note: change 'let'\
    \ to 'var' to make it mutable\n    let tens = arr.filter{ $0 >= 10 }\n    ^~~\n\
    \    var\n/tmp/tmpfjadkagr.swift:26:51: error: use of local variable 'tensReversedStringStringStringString'\
    \ before its declaration\n    let tensReversedStringStringStringString = \"\\\
    (tensReversedStringStringStringString)\"\n                                   \
    \               ^\n/tmp/tmpfjadkagr.swift:26:9: note: 'tensReversedStringStringStringString'\
    \ declared here\n    let tensReversedStringStringStringString = \"\\(tensReversedStringStringStringString)\"\
    \n        ^\n/tmp/tmpfjadkagr.swift:27:57: error: use of local variable 'tensReversedStringStringStringStringString'\
    \ before its declaration\n    let tensReversedStringStringStringStringString =\
    \ \"\\(tensReversedStringStringStringStringString)\"\n                       \
    \                                 ^\n/tmp/tmpfjadkagr.swift:27:9: note: 'tensReversedStringStringStringStringString'\
    \ declared here\n    let tensReversedStringStringStringStringString = \"\\(tensReversedStringStringStringStringString)\"\
    \n        ^\n/tmp/tmpfjadkagr.swift:28:63: error: use of local variable 'tensReversedStringStringStringStringStringStringString'\
    \ before its declaration\n    let tensReversedStringStringStringStringStringString\
    \ = \"\\(tensReversedStringStringStringStringStringStringString)\"\n         \
    \                                                     ^\n/tmp/tmpfjadkagr.swift:29:9:\
    \ note: 'tensReversedStringStringStringStringStringStringString' declared here\n\
    \    let tensReversedStringStringStringStringStringStringString = \"\\(tensReversedStringStringStringStringStringStringStringStringString)\"\
    \n        ^\n/tmp/tmpfjadkagr.swift:29:69: error: use of local variable 'tensReversedStringStringStringStringStringStringStringStringString'\
    \ before its declaration\n    let tensReversedStringStringStringStringStringStringString\
    \ = \"\\(tensR"
  stdout: ''
  timestamp: 1660014116
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    let ones = arr.filter{ $0 < 10 }\n    let tens = arr.filter{\
    \ $0 >= 10 }\n    let tensReversed = tens.reverse()\n    let tensReversedString\
    \ = tensReversed.map{ String($0) }\n    let onesReversed = ones.reverse()\n  \
    \  let onesReversedString = onesReversed.map{ String($0) }\n    let onesReversedStringWithOne\
    \ = onesReversedString.append(\"One\")\n    let onesReversedStringWithTen = onesReversedStringWithOne.append(\"\
    Ten\")\n    let onesReversedStringWithTwelve = onesReversedStringWithTen.append(\"\
    Twelve\")\n    let onesReversedStringWithThirteen = onesReversedStringWithTwelve.append(\"\
    Thirteen\")\n    let onesReversedStringWithFourteen = onesReversedStringWithThirteen.append(\"\
    Fourteen\")\n    let onesReversedStringWithFifteen = onesReversedStringWithFourteen.append(\"\
    Fifteen\")\n    let onesReversedStringWithSixteen = onesReversedStringWithFifteen.append(\"\
    Sixteen\")\n    let onesReversedStringWithSeventeen = onesReversedStringWithSixteen.append(\"\
    Seventeen\")\n    let onesReversedStringWithEighteen = onesReversedStringWithSeventeen.append(\"\
    Eighteen\")\n    let onesReversedStringWithNineteen = onesReversedStringWithEighteen.append(\"\
    Nineteen\")\n    let onesReversedStringWithTwenty = onesReversedStringWithNineteen.append(\"\
    Twenty\")\n    let onesReversedStringWithTwentyOne = onesReversedStringWithTwenty.append(\"\
    TwentyOne\")\n    let onesReversedStringWithTwentyTwo = onesReversedStringWithTwentyOne.append(\"\
    TwentyTwo\")\n    let onesReversedStringWithTwentyThree = onesReversedStringWithTwentyTwo.append(\"\
    TwentyThree\")\n    let onesReversedStringWithTwentyFour = onesReversedStringWithTwentyThree.append(\"\
    TwentyFour\")\n    let onesReversedStringWithTwentyFive = onesReversedStringWithTwentyFour.append(\"\
    TwentyFive\")\n    let onesReversedStringWithTwent\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5vvadbhq.swift:18:29: error: cannot use mutating member on immutable\
    \ value: 'tens' is a 'let' constant\n    let tensReversed = tens.reverse()\n \
    \                      ~~~~ ^\n/tmp/tmp5vvadbhq.swift:17:5: note: change 'let'\
    \ to 'var' to make it mutable\n    let tens = arr.filter{ $0 >= 10 }\n    ^~~\n\
    \    var\n/tmp/tmp5vvadbhq.swift:20:29: error: cannot use mutating member on immutable\
    \ value: 'ones' is a 'let' constant\n    let onesReversed = ones.reverse()\n \
    \                      ~~~~ ^\n/tmp/tmp5vvadbhq.swift:16:5: note: change 'let'\
    \ to 'var' to make it mutable\n    let ones = arr.filter{ $0 < 10 }\n    ^~~\n\
    \    var\n/tmp/tmp5vvadbhq.swift:38:9: error: type annotation missing in pattern\n\
    \    let onesReversedStringWithTwent\n        ^\n"
  stdout: ''
  timestamp: 1660014116
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard !arr.isEmpty\
    \ else { return [] }\n    var result = [String]()\n    var last = 0\n    for num\
    \ in arr {\n        if num > 9 {\n            num = num - 10\n        }\n    \
    \    result.append(names[num])\n        last = num\n    }\n    result.reverse()\n\
    \    for num in result {\n        if num != names[last] {\n            result.remove(at:\
    \ result.index(before: result.index(before: last)))\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1,\
    \ 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsmtlul43.swift:20:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = num - 10\n            ^~~\n/tmp/tmpsmtlul43.swift:22:23:\
    \ error: cannot find 'names' in scope\n        result.append(names[num])\n   \
    \                   ^~~~~\n/tmp/tmpsmtlul43.swift:27:19: error: cannot find 'names'\
    \ in scope\n        if num != names[last] {\n                  ^~~~~\n"
  stdout: ''
  timestamp: 1660014116
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    let min = 1\n    let max = 9\n    var result = [String]()\n\
    \    for n in arr {\n        if n < min || n > max {\n            continue\n \
    \       }\n        let digit = String(n - min)\n        result.append(name[digit])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmptbwr86kr.swift:24:23: error: cannot find 'name' in scope\n    \
    \    result.append(name[digit])\n                      ^~~~\n"
  stdout: ''
  timestamp: 1660014116
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    var result = [String]()\n    var index = 0\n    while\
    \ index < arr.count {\n        let value = arr[index]\n        if value < 1 ||\
    \ value > 9 {\n            index += 1\n            continue\n        }\n     \
    \   let digit = value - 10\n        let name = digitToName(digit)\n        result.append(name)\n\
    \        index += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp6_fkfr0p.swift:25:20: error: cannot find 'digitToName' in scope\n\
    \        let name = digitToName(digit)\n                   ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014116
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result: [String]\
    \ = []\n    for number in arr {\n        switch number {\n        case 1:\n  \
    \          result.append(\"One\")\n        case 2:\n            result.append(\"\
    Two\")\n        case 3:\n            result.append(\"Three\")\n        case 4:\n\
    \            result.append(\"Four\")\n        case 5:\n            result.append(\"\
    Five\")\n        case 6:\n            result.append(\"Six\")\n        case 7:\n\
    \            result.append(\"Seven\")\n        case 8:\n            result.append(\"\
    Eight\")\n        case 9:\n            result.append(\"Nine\")\n        default:\n\
    \            continue\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpdzo9qv0b/tmpdzo9qv0b.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2861929c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2861620b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2861620988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b286161f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdzo9qv0b                        0x000055b2b18f27e1 <unavailable> + 6113

    5    libc.so.6                          0x00002b2861b15460 __libc_start_main +
    245

    6    tmpdzo9qv0b                        0x000055b2b18f2289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660014116
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for num in arr {\n        switch num {\n        case 1:\n            result.append(\"\
    One\")\n        case 2:\n            result.append(\"Two\")\n        case 3:\n\
    \            result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            continue\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp107ym1nf/tmp107ym1nf.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7fefa0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7fef701b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7fef701988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7fef7007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp107ym1nf                        0x0000555cc7e35841 <unavailable> + 6209

    5    libc.so.6                          0x00002b7fefbf6460 __libc_start_main +
    245

    6    tmp107ym1nf                        0x0000555cc7e352e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660014116
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let min = arr.min()\n\
    \    let max = arr.max()\n    if min == max {\n        return arr\n    }\n   \
    \ let digits = max - min + 1\n    let ones = Array(1...digits)\n    let tens =\
    \ Array(10...digits)\n    let hundreds = Array(100...digits)\n    let thousands\
    \ = Array(1000...digits)\n    let ten_digits = Array(10...digits)\n    let hundred_digits\
    \ = Array(100...digits)\n    let thousand_digits = Array(1000...digits)\n    let\
    \ ten_thousand_digits = Array(10000...digits)\n    let hundred_thousand_digits\
    \ = Array(100000...digits)\n    let thousand_thousand_digits = Array(1000000...digits)\n\
    \    let ten_thousand_thousand_digits = Array(10000000...digits)\n    let hundred_thousand_thousand_digits\
    \ = Array(100000000...digits)\n    let thousand_thousand_thousand_digits = Array(1000000000...digits)\n\
    \    let ten_thousand_thousand_thousand_digits = Array(10000000000...digits)\n\
    \    let hundred_thousand_thousand_thousand_digits = Array(100000000000...digits)\n\
    \    let thousand_thousand_thousand_thousand_digits = Array(1000000000000...digits)\n\
    \    let ten_thousand_thousand_thousand_thousand_digits = Array(10000000000000...digits)\n\
    \    let hundred_thousand_thousand_thousand_thousand_digits = Array(100000000000000...digits)\n\
    \    let thousand_thousand_thousand_thousand_thousand_digits = Array(1000000000000000...digits)\n\
    \    let ten_thousand_thousand_thousand_thousand_thousand_digits = Array(10000000000000000...digits)\n\
    \    let hundred_thousand_thousand_thousand_thousand_thousand_digits = Array(100000000000000000...digits)\n\
    \    let thousand_thousand_thousand_thousand_thousand_thousand_digits = Array(1000000000000000000...digits)\n\
    \    let ten_thousand_thousand_thousand_thousand_thousand_thousand_digits = Array(10000000000000000000...digits)\n\
    \    let hundred_thousand_thousand_thousand_thousand_thousand_thousand_digits\
    \ = Array(100000000000000000000...digits)\n    let thousand_thousand_thousand_thousand_thousand_thousand_thousand_digits\
    \ = Array(1000000000000000000000...digits)\n    let ten_thousand_thousand_thousand_thousand_thousand_thousand_thousand_digits\
    \ = Array(10000000000000000000000...digits)\n    let hundred_thousand_thousand_thousand_thousand_thousand_thousand_thousand_digits\
    \ = Array(\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1,\
    \ 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpu676_10e.swift:52:1: error: expected expression in list of expressions\n\
    }\n^\n/tmp/tmpu676_10e.swift:22:16: error: cannot convert return expression of\
    \ type '[Int]' to return type '[String]'\n        return arr\n               ^\n\
    /tmp/tmpu676_10e.swift:22:16: note: arguments to generic parameter 'Element' ('Int'\
    \ and 'String') are expected to be equal\n        return arr\n               ^\n\
    /tmp/tmpu676_10e.swift:24:22: error: binary operator '-' cannot be applied to\
    \ two 'Int?' operands\n    let digits = max - min + 1\n                 ~~~ ^\
    \ ~~~\n/tmp/tmpu676_10e.swift:24:22: note: overloads for '-' exist with these\
    \ partially matching parameter lists: (Int, Int)\n    let digits = max - min +\
    \ 1\n                     ^\n/tmp/tmpu676_10e.swift:51:89: error: generic parameter\
    \ 'Element' could not be inferred\n    let hundred_thousand_thousand_thousand_thousand_thousand_thousand_thousand_digits\
    \ = Array(\n                                                                 \
    \                       ^\n/tmp/tmpu676_10e.swift:51:89: note: explicitly specify\
    \ the generic arguments to fix this issue\n    let hundred_thousand_thousand_thousand_thousand_thousand_thousand_thousand_digits\
    \ = Array(\n                                                                 \
    \                       ^\n                                                  \
    \                                           <Any>\n"
  stdout: ''
  timestamp: 1660014116
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var i = 0\n    for\
    \ number in arr {\n        if number > 9 {\n            number = number - 10\n\
    \        }\n        if number < 1 {\n            number = 10 + number\n      \
    \  }\n        result.append(digits[number])\n    }\n    return result.reverse()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpwup8m765.swift:22:13: error: cannot assign to value: 'number' is\
    \ a 'let' constant\n            number = number - 10\n            ^~~~~~\n/tmp/tmpwup8m765.swift:25:13:\
    \ error: cannot assign to value: 'number' is a 'let' constant\n            number\
    \ = 10 + number\n            ^~~~~~\n/tmp/tmpwup8m765.swift:27:23: error: cannot\
    \ find 'digits' in scope\n        result.append(digits[number])\n            \
    \          ^~~~~~\n/tmp/tmpwup8m765.swift:29:19: error: cannot convert return\
    \ expression of type '()' to return type '[String]'\n    return result.reverse()\n\
    \           ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014116
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let min = min(arr)\n\
    \    let max = max(arr)\n    if min == max {\n        return arr\n    }\n    let\
    \ digits = max - min + 1\n    let ones = Array(1...digits)\n    let tens = Array(10...digits)\n\
    \    let tensDigits = Array(10...digits)\n    let tensDigitNames = tens.map {\
    \ String($0) }\n    let tensDigitNamesReversed = tensDigitNames.reversed()\n \
    \   let tensDigitNamesReversedSorted = tensDigitNamesReversed.sorted()\n    let\
    \ tensDigitNamesReversedSortedIndex = tensDigitNamesReversedSorted.index(of: min)\n\
    \    let tensDigitNamesReversedSortedIndex2 = tensDigitNamesReversedSorted.index(of:\
    \ max)\n    let tensDigitNamesReversedSortedIndex3 = tensDigitNamesReversedSorted.index(of:\
    \ min)\n    let tensDigitNamesReversedSortedIndex4 = tensDigitNamesReversedSorted.index(of:\
    \ max)\n    let tensDigitNamesReversedSortedIndex5 = tensDigitNamesReversedSorted.index(of:\
    \ min)\n    let tensDigitNamesReversedSortedIndex6 = tensDigitNamesReversedSorted.index(of:\
    \ max)\n    let tensDigitNamesReversedSortedIndex7 = tensDigitNamesReversedSorted.index(of:\
    \ min)\n    let tensDigitNamesReversedSortedIndex8 = tensDigitNamesReversedSorted.index(of:\
    \ max)\n    let tensDigitNamesReversedSortedIndex9 = tensDigitNamesReversedSorted.index(of:\
    \ min)\n    let tensDigitNamesReversedSortedIndex10 = tensDigitNamesReversedSorted.index(of:\
    \ max)\n    let tensDigitNamesReversedSortedIndex11 = tensDigitNamesReversedSorted.index(of:\
    \ min)\n    let tensDigitNamesReversedSortedIndex12 = tensDigitNamesReversedSorted.index(of:\
    \ max)\n    let tensDigitNamesReversedSortedIndex13 = tensDigitNamesReversedSorted.index(of:\
    \ min)\n    let tensDigitNamesReversedSortedIndex14 = tensDigitNamesReversedSorted.index(of:\
    \ max)\n    let tensDigitNamesReversedSortedIndex15 = tensDigitNamesReversedSorted.index(of:\
    \ min)\n    let tensDigitNamesReversedSortedIndex16\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5hwoqzvy.swift:19:22: error: missing argument for parameter #2\
    \ in call\n    let min = min(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.min:1:24: note: 'min' declared here\n@inlinable public\
    \ func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmp5hwoqzvy.swift:20:22: error: missing argument for parameter #2\
    \ in call\n    let max = max(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable public\
    \ func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmp5hwoqzvy.swift:22:16: error: cannot convert return expression of\
    \ type '[Int]' to return type '[String]'\n        return arr\n               ^\n\
    /tmp/tmp5hwoqzvy.swift:22:16: note: arguments to generic parameter 'Element' ('Int'\
    \ and 'String') are expected to be equal\n        return arr\n               ^\n\
    /tmp/tmp5hwoqzvy.swift:24:28: error: binary operator '+' cannot be applied to\
    \ operands of type 'Duration' and 'Int'\n    let digits = max - min + 1\n    \
    \             ~~~~~~~~~ ^ ~\n/tmp/tmp5hwoqzvy.swift:24:28: note: overloads for\
    \ '+' exist with these partially matching parameter lists: (Duration, Duration),\
    \ (Int, Int)\n    let digits = max - min + 1\n                           ^\n/tmp/tmp5hwoqzvy.swift:46:9:\
    \ error: type annotation missing in pattern\n    let tensDigitNamesReversedSortedIndex16\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660014116
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    let min = 1\n    let max = 9\n    var result = [String]()\n\
    \    for n in arr {\n        if min <= n && n <= max {\n            result.append(name[n\
    \ - 1])\n        }\n    }\n    result.reverse()\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpmruwzk47.swift:21:27: error: cannot find 'name' in scope\n    \
    \        result.append(name[n - 1])\n                          ^~~~\n"
  stdout: ''
  timestamp: 1660014116
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    var ones = arr.filter{\
    \ $0 < 10 }\n    var tens = arr.filter{ $0 >= 10 }\n    var tensReversed = reverseArray(tens)\n\
    \    var onesReversed = reverseArray(ones)\n    var onesReversedString = reverseString(onesReversed)\n\
    \    var tensReversedString = reverseString(tensReversed)\n    for number in onesReversedString\
    \ {\n        result.append(ones[onesReversed.index(of: number)])\n    }\n    for\
    \ number in tensReversedString {\n        result.append(tens[tensReversed.index(of:\
    \ number)])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp170atohp.swift:21:24: error: cannot find 'reverseArray' in scope\n\
    \    var tensReversed = reverseArray(tens)\n                       ^~~~~~~~~~~~\n\
    /tmp/tmp170atohp.swift:22:24: error: cannot find 'reverseArray' in scope\n   \
    \ var onesReversed = reverseArray(ones)\n                       ^~~~~~~~~~~~\n\
    /tmp/tmp170atohp.swift:23:30: error: cannot find 'reverseString' in scope\n  \
    \  var onesReversedString = reverseString(onesReversed)\n                    \
    \         ^~~~~~~~~~~~~\n/tmp/tmp170atohp.swift:24:30: error: cannot find 'reverseString'\
    \ in scope\n    var tensReversedString = reverseString(tensReversed)\n       \
    \                      ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014116
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    var min = arr[0]\n  \
    \  var max = arr[0]\n    for num in arr {\n        if num < min {\n          \
    \  min = num\n        }\n        if num > max {\n            max = num\n     \
    \   }\n    }\n    var one = One\n    var two = Two\n    var three = Three\n  \
    \  var four = Four\n    var five = Five\n    var six = Six\n    var seven = Seven\n\
    \    var eight = Eight\n    var nine = Nine\n    if min < 1 {\n        one = One\n\
    \    }\n    if min < 2 {\n        two = Two\n    }\n    if min < 3 {\n       \
    \ three = Three\n    }\n    if min < 4 {\n        four = Four\n    }\n    if min\
    \ < 5 {\n        five = Five\n    }\n    if min < 6 {\n        six = Six\n   \
    \ }\n    if min < 7 {\n        seven = Seven\n    }\n    if min < 8 {\n      \
    \  eight = Eight\n    }\n    if min < 9 {\n        nine = Nine\n    }\n    if\
    \ max > 9 {\n        one = One\n        two = Two\n        three = Three\n   \
    \     four = Four\n        five = Five\n        six = Six\n        seven = Seven\n\
    \        eight = Eight\n        nine = Nine\n    }\n    if max > 8 {\n       \
    \ one = One\n        two = Two\n        three = Three\n        four = Four\n \
    \       five = Five\n        six = Six\n        seven = Seven\n        eight =\
    \ Eight\n        nine = Nine\n    }\n    if max > 7 {\n        one = One\n   \
    \     two = Two\n        three = Three\n        four = Four\n        five = Five\n\
    \        six = Six\n        seven = Seven\n        eight = Eight\n        nine\
    \ = Nine\n    }\n    if max > 6 {\n        one = One\n        two = Two\n    \
    \    three = Three\n        four = Four\n        five = Five\n        six = Six\n\
    \        seven = Seven\n        eight = Eight\n        nine = Nine\n    }\n  \
    \  if max > 5 {\n        one = One\n        two = Two\n        three = Three\n\
    \        four = Four\n        five = Five\n        six = Six\n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpuigjznm5.swift:136:63: error: expected '}' at end of brace statement\n\
    assert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n       \
    \                                                       ^\n/tmp/tmpuigjznm5.swift:14:40:\
    \ note: to match this opening '{'\nfunc by_length(arr: [Int]) -> [String] {\n\
    \                                       ^\n/tmp/tmpuigjznm5.swift:29:15: error:\
    \ cannot find 'One' in scope\n    var one = One\n              ^~~\n/tmp/tmpuigjznm5.swift:30:15:\
    \ error: cannot find 'Two' in scope\n    var two = Two\n              ^~~\n/tmp/tmpuigjznm5.swift:31:17:\
    \ error: cannot find 'Three' in scope\n    var three = Three\n               \
    \ ^~~~~\n/tmp/tmpuigjznm5.swift:32:16: error: cannot find 'Four' in scope\n  \
    \  var four = Four\n               ^~~~\n/tmp/tmpuigjznm5.swift:33:16: error:\
    \ cannot find 'Five' in scope\n    var five = Five\n               ^~~~\n/tmp/tmpuigjznm5.swift:34:15:\
    \ error: cannot find 'Six' in scope\n    var six = Six\n              ^~~\n/tmp/tmpuigjznm5.swift:35:17:\
    \ error: cannot find 'Seven' in scope\n    var seven = Seven\n               \
    \ ^~~~~\n/tmp/tmpuigjznm5.swift:36:17: error: cannot find 'Eight' in scope\n \
    \   var eight = Eight\n                ^~~~~\n/tmp/tmpuigjznm5.swift:37:16: error:\
    \ cannot find 'Nine' in scope\n    var nine = Nine\n               ^~~~\n/tmp/tmpuigjznm5.swift:39:15:\
    \ error: cannot find 'One' in scope\n        one = One\n              ^~~\n/tmp/tmpuigjznm5.swift:42:15:\
    \ error: cannot find 'Two' in scope\n        two = Two\n              ^~~\n/tmp/tmpuigjznm5.swift:45:17:\
    \ error: cannot find 'Three' in scope\n        three = Three\n               \
    \ ^~~~~\n/tmp/tmpuigjznm5.swift:48:16: error: cannot find 'Four' in scope\n  \
    \      four = Four\n               ^~~~\n/tmp/tmpuigjznm5.swift:51:16: error:\
    \ cannot find 'Five' in scope\n        five = Five\n               ^~~~\n/tmp/tmpuigjznm5.swift:54:15:\
    \ error: cannot find 'Six' in scope\n        six = Six\n              ^~~\n/tmp/tmpuigjznm5.swift:57:17:\
    \ error: cannot find 'Seven' in scope\n        seven = Seven\n               \
    \ ^~~~~\n/tmp/tmpuigjznm5.swift:60"
  stdout: ''
  timestamp: 1660014116
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard !arr.isEmpty\
    \ else { return [] }\n    var result = [String]()\n    let maxLength = (arr.max()\
    \ ?? 9) + 1\n    for n in arr {\n        let index = n % 10\n        result.append(String(index))\n\
    \    }\n    result.reverse()\n    for n in result {\n        let index = n.index(of:\
    \ \"0\")\n        if index != nil {\n            let digit = Int(n[index!])\n\
    \            result[result.index(of: n[index!])] = String(digit)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpoitenw2t.swift:24:23: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        let index = n.index(of: \"0\")\n             \
    \         ^\n/tmp/tmpoitenw2t.swift:24:23: note: use 'firstIndex(of:)' instead\n\
    \        let index = n.index(of: \"0\")\n                      ^~~~~\n       \
    \               firstIndex\n/tmp/tmpoitenw2t.swift:26:30: error: subscript 'subscript(_:)'\
    \ requires that 'String.Index' conform to 'RangeExpression'\n            let digit\
    \ = Int(n[index!])\n                             ^\nSwift.Collection:2:23: note:\
    \ where 'R' = 'String.Index'\n    @inlinable public subscript<R>(r: R) -> Self.SubSequence\
    \ where R : RangeExpression, Self.Index == R.Bound { get }\n                 \
    \     ^\n/tmp/tmpoitenw2t.swift:27:38: error: subscript 'subscript(_:)' requires\
    \ that 'String.Index' conform to 'RangeExpression'\n            result[result.index(of:\
    \ n[index!])] = String(digit)\n                                     ^\nSwift.String:5:12:\
    \ note: where 'R' = 'String.Index'\n    public subscript<R>(bounds: R) -> String\
    \ where R : RangeExpression, R.Bound == Int { get }\n           ^\n/tmp/tmpoitenw2t.swift:27:27:\
    \ error: value of optional type 'Array<String>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<String>.Index' (aka 'Int')\n        \
    \    result[result.index(of: n[index!])] = String(digit)\n                   \
    \       ^\n/tmp/tmpoitenw2t.swift:27:27: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n            result[result.index(of:\
    \ n[index!])] = String(digit)\n                          ^\n                 \
    \                              ?? <#default value#>\n/tmp/tmpoitenw2t.swift:27:27:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n            result[result.index(of: n[index!])] = String(digit)\n   \
    \                       ^\n                                              !\n"
  stdout: ''
  timestamp: 1660014116
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var last = 0\n   \
    \ for i := 0; i < len(arr); i++ {\n        if arr[i] > 9 {\n            last =\
    \ i\n            break\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n\
    \        if i == last {\n            result.append(String(arr[i]))\n        }\
    \ else {\n            result.append(String(arr[i]))\n            result.append(\"\
    \ \u2192 \")\n            result.append(String(arr[i]))\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_dvauzbj.swift:20:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmp_dvauzbj.swift:20:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmp_dvauzbj.swift:20:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n/tmp/tmp_dvauzbj.swift:26:12:\
    \ error: expected type\n    for i := 0; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmp_dvauzbj.swift:26:12: error: expected 'in' after\
    \ for-each pattern\n    for i := 0; i < len(arr); i++ {\n           ^\n/tmp/tmp_dvauzbj.swift:26:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := 0; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014116
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    let min = 1\n    let max = 9\n    var result = [String]()\n\
    \    for n in arr {\n        if n < min || n > max {\n            continue\n \
    \       }\n        let digit = n - min\n        result.append(name[digit])\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp6bo1ncwy.swift:24:23: error: cannot find 'name' in scope\n    \
    \    result.append(name[digit])\n                      ^~~~\n"
  stdout: ''
  timestamp: 1660014116
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var i = 0\n    var\
    \ j = 0\n    var k = 0\n    var last = 0\n    for k in 0..<arr.count {\n     \
    \   if arr[k] == 1 {\n            if last == 0 {\n                last = k\n \
    \           }\n            i += 1\n        } else {\n            if last != 0\
    \ {\n                let temp = arr[last]\n                arr.removeLast()\n\
    \                arr.append(temp)\n                last = k\n            }\n \
    \           if i == 1 {\n                result.append(\"One\")\n            \
    \    i = 0\n            }\n            if i == 2 {\n                result.append(\"\
    Two\")\n                i = 0\n            }\n            if i == 3 {\n      \
    \          result.append(\"Three\")\n                i = 0\n            }\n  \
    \          if i == 4 {\n                result.append(\"Four\")\n            \
    \    i = 0\n            }\n            if i == 5 {\n                result.append(\"\
    Five\")\n                i = 0\n            }\n            if i == 6 {\n     \
    \           result.append(\"Six\")\n                i = 0\n            }\n   \
    \         if i == 7 {\n                result.append(\"Seven\")\n            \
    \    i = 0\n            }\n            if i == 8 {\n                result.append(\"\
    Eight\")\n                i = 0\n            }\n            if i == 9 {\n    \
    \            result.append(\"Nine\")\n                i = 0\n            }\n \
    \       }\n    }\n    if last != 0 {\n        let temp = arr[last]\n        arr.removeLast()\n\
    \        arr.append(temp)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkk95ifxd.swift:32:21: error: cannot use mutating member on immutable\
    \ value: 'arr' is a 'let' constant\n                arr.removeLast()\n       \
    \         ~~~ ^\n/tmp/tmpkk95ifxd.swift:33:21: error: cannot use mutating member\
    \ on immutable value: 'arr' is a 'let' constant\n                arr.append(temp)\n\
    \                ~~~ ^\n/tmp/tmpkk95ifxd.swift:76:13: error: cannot use mutating\
    \ member on immutable value: 'arr' is a 'let' constant\n        arr.removeLast()\n\
    \        ~~~ ^\n/tmp/tmpkk95ifxd.swift:77:13: error: cannot use mutating member\
    \ on immutable value: 'arr' is a 'let' constant\n        arr.append(temp)\n  \
    \      ~~~ ^\n"
  stdout: ''
  timestamp: 1660014116
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty()\
    \ {\n        return []\n    }\n    var result = [String]()\n    var i = 0\n  \
    \  for num in arr {\n        if num < 1 || num > 9 {\n            continue\n \
    \       }\n        result.append(name[num])\n    }\n    return result.reverse()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbo69kgap.swift:15:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n/tmp/tmpbo69kgap.swift:24:23: error: cannot find 'name' in scope\n      \
    \  result.append(name[num])\n                      ^~~~\n/tmp/tmpbo69kgap.swift:26:19:\
    \ error: cannot convert return expression of type '()' to return type '[String]'\n\
    \    return result.reverse()\n           ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014116
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    let ones = arr.filter{ $0 < 10 }\n    let tens = arr.filter{\
    \ $0 >= 10 }\n    let tensReversed = tens.reverse()\n    let onesReversed = ones.reverse()\n\
    \    let onesReversedString = onesReversed.map { $0.description }\n    let tensReversedString\
    \ = tensReversed.map { $0.description }\n    let reversedString = onesReversedString.append(tensReversedString)\n\
    \    return reversedString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmptrbwy6hp.swift:18:29: error: cannot use mutating member on immutable\
    \ value: 'tens' is a 'let' constant\n    let tensReversed = tens.reverse()\n \
    \                      ~~~~ ^\n/tmp/tmptrbwy6hp.swift:17:5: note: change 'let'\
    \ to 'var' to make it mutable\n    let tens = arr.filter{ $0 >= 10 }\n    ^~~\n\
    \    var\n/tmp/tmptrbwy6hp.swift:19:29: error: cannot use mutating member on immutable\
    \ value: 'ones' is a 'let' constant\n    let onesReversed = ones.reverse()\n \
    \                      ~~~~ ^\n/tmp/tmptrbwy6hp.swift:16:5: note: change 'let'\
    \ to 'var' to make it mutable\n    let ones = arr.filter{ $0 < 10 }\n    ^~~\n\
    \    var\n"
  stdout: ''
  timestamp: 1660014116
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for num in arr {\n        if num < 1 || num > 9 {\n            continue\n\
    \        }\n        switch num {\n        case 1:\n            result.append(\"\
    One\")\n        case 2:\n            result.append(\"Two\")\n        case 3:\n\
    \            result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            continue\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpezak15mw/tmpezak15mw.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c46311c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c46008b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c46008988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c460077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpezak15mw                        0x00005648830cf841 <unavailable> + 6209

    5    libc.so.6                          0x00002b7c464fd460 __libc_start_main +
    245

    6    tmpezak15mw                        0x00005648830cf2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660014116
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var i = 0\n    for\
    \ num in arr {\n        if num < 1 || num > 9 {\n            continue\n      \
    \  }\n        let digit = String(num)\n        if i == 0 {\n            result.append(digit)\n\
    \        } else {\n            result.append(digit.reversed())\n        }\n  \
    \      i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpv5603h_7.swift:28:20: error: no exact matches in call to instance\
    \ method 'append'\n            result.append(digit.reversed())\n             \
    \      ^\nSwift.Array:6:37: note: candidate expects value of type 'String' for\
    \ parameter #1 (got '[String.Element]' (aka 'Array<Character>'))\n    @inlinable\
    \ public mutating func append(_ newElement: __owned Element)\n               \
    \                     ^\nSwift.RangeReplaceableCollection:4:37: note: candidate\
    \ expects value of type 'String' for parameter #1 (got '[String.Element]' (aka\
    \ 'Array<Character>'))\n    @inlinable public mutating func append(_ newElement:\
    \ __owned Self.Element)\n                                    ^\n/tmp/tmpv5603h_7.swift:28:20:\
    \ note: found candidate with type '(__owned [String.Element]) -> ()' (aka '(__owned\
    \ Array<Character>) -> ()')\n            result.append(digit.reversed())\n   \
    \                ^\n"
  stdout: ''
  timestamp: 1660014116
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return nil\n    }\n    let len = arr.count\n    var result = [String]()\n\
    \    var i = 0\n    while i < len {\n        let num = arr[i]\n        if num\
    \ < 1 || num > 9 {\n            i += 1\n            continue\n        }\n    \
    \    let digit = num % 10\n        let name = digitName[digit]\n        if name\
    \ == nil {\n            i += 1\n            continue\n        }\n        result.append(name)\n\
    \        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_vkm7lh7.swift:16:16: error: 'nil' is incompatible with return\
    \ type '[String]'\n        return nil\n               ^\n/tmp/tmp_vkm7lh7.swift:28:20:\
    \ error: cannot find 'digitName' in scope\n        let name = digitName[digit]\n\
    \                   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014116
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result: [String] = []\n    var index = 0\n\
    \    var last = 0\n    for element in arr {\n        if element > 9 {\n      \
    \      element = element - 10\n        }\n        if element > last {\n      \
    \      result.append(String(element))\n        } else {\n            result.append(String(last))\n\
    \        }\n        last = element\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpz09q2h29.swift:23:13: error: cannot assign to value: 'element'\
    \ is a 'let' constant\n            element = element - 10\n            ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014116
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result: [String]\
    \ = []\n    if arr.isEmpty {\n        return result\n    }\n    var digits = arr.sorted()\n\
    \    var lastDigit = digits[0]\n    var lastDigitIndex = 0\n    var lastDigitName\
    \ = \"\"\n    for index in 0..<arr.count {\n        let digit = arr[index]\n \
    \       if digit == lastDigit {\n            result.append(arr[lastDigitIndex])\n\
    \            lastDigitIndex += 1\n        } else {\n            if lastDigitIndex\
    \ > 0 {\n                result.append(lastDigitName)\n            }\n       \
    \     lastDigit = digit\n            lastDigitIndex = index\n            lastDigitName\
    \ = digitName(digit)\n        }\n    }\n    if lastDigitIndex > 0 {\n        result.append(lastDigitName)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpt8u943s8.swift:26:30: error: cannot convert value of type 'Int'\
    \ to expected argument type 'String'\n            result.append(arr[lastDigitIndex])\n\
    \                             ^\n/tmp/tmpt8u943s8.swift:34:29: error: cannot find\
    \ 'digitName' in scope\n            lastDigitName = digitName(digit)\n       \
    \                     ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014116
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty()\
    \ {\n        return []\n    }\n    var result: [String] = []\n    var last = 0\n\
    \    for num in arr {\n        if num < 1 || num > 9 {\n            continue\n\
    \        }\n        if num == last {\n            continue\n        }\n      \
    \  result.append(String(num))\n        last = num\n    }\n    return result.reverse().map\
    \ { name[Int($0)] }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpyl9wzy1r.swift:15:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n/tmp/tmpyl9wzy1r.swift:30:35: error: cannot find 'name' in scope\n    return\
    \ result.reverse().map { name[Int($0)] }\n                                  ^~~~\n"
  stdout: ''
  timestamp: 1660014116
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard !arr.isEmpty\
    \ else { return [] }\n    let min = min(arr)\n    let max = max(arr)\n    var\
    \ result = [String]()\n    for n in arr {\n        if n >= min && n <= max {\n\
    \            result.append(name(n))\n        }\n    }\n    return result.reversed()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp76oqwlbj.swift:16:22: error: missing argument for parameter #2\
    \ in call\n    let min = min(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.min:1:24: note: 'min' declared here\n@inlinable public\
    \ func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmp76oqwlbj.swift:17:22: error: missing argument for parameter #2\
    \ in call\n    let max = max(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable public\
    \ func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmp76oqwlbj.swift:21:27: error: cannot find 'name' in scope\n    \
    \        result.append(name(n))\n                          ^~~~\n"
  stdout: ''
  timestamp: 1660014116
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let min = 1\n    let\
    \ max = 9\n    let len = arr.count\n    if len == 1 {\n        return arr\n  \
    \  }\n    if len == 2 {\n        if arr[0] < arr[1] {\n            result.append(String(arr[0]))\n\
    \            result.append(String(arr[1]))\n        } else {\n            result.append(String(arr[1]))\n\
    \            result.append(String(arr[0]))\n        }\n        return result\n\
    \    }\n    if len == 3 {\n        if arr[0] < arr[1] && arr[0] < arr[2] {\n \
    \           result.append(String(arr[0]))\n            result.append(String(arr[1]))\n\
    \            result.append(String(arr[2]))\n        } else {\n            if arr[1]\
    \ < arr[2] {\n                result.append(String(arr[1]))\n                result.append(String(arr[2]))\n\
    \            } else {\n                result.append(String(arr[0]))\n       \
    \         result.append(String(arr[1]))\n                result.append(String(arr[2]))\n\
    \            }\n        }\n        return result\n    }\n    if len == 4 {\n \
    \       if arr[0] < arr[1] && arr[0] < arr[2] && arr[0] < arr[3] {\n         \
    \   result.append(String(arr[0]))\n            result.append(String(arr[1]))\n\
    \            result.append(String(arr[2]))\n            result.append(String(arr[3]))\n\
    \        } else {\n            if arr[1] < arr[2] && arr[1] < arr[3] {\n     \
    \           result.append(String(arr[1]))\n                result.append(String(arr[2]))\n\
    \                result.append(String(arr[3]))\n            } else {\n       \
    \         if arr[2] < arr[3] {\n                    result.append(String(arr[2]))\n\
    \                    result.append(String(arr[3]))\n                } else {\n\
    \                    result.append(String(arr[0]))\n                    result.append(String(arr[1]))\n\
    \                    result.append(String(arr[2]))\n                    result.append(String(arr[3]))\n\
    \                }\n            }\n        }\n        return result\n    }\n \
    \   if len == 5 {\n        if arr[0] < arr[1] && arr[0] < arr[2] && arr[0] < arr[3]\
    \ && arr[0] < arr[4] {\n            result.append(String(arr[0]))\n          \
    \  result.append(String(arr[1]))\n            result.append(String(arr[2]))\n\
    \            result.append(String(arr[3]))\n            result.append(String(arr[4]))\n\
    \        } else {\n            if arr[1] < arr[2] && arr[1] < arr[3] && arr[1]\
    \ < arr[4] {\n                result.append(String(arr[1]))\n                result.append(String(arr[2]))\n\
    \                result.append(String(arr[3]))\n                result.append(String(arr[4]))\n\
    \            } else {\n                if arr[2] < arr[3] && arr[2] < arr[4] {\n\
    \                    result.append(String(arr[2]))\n                    result.append(String(arr[3]))\n\
    \                    result.append(String(arr[4]))\n                } else {\n\
    \                    if arr[3] < arr[4] {\n                        result.append(String(arr[3]))\n\
    \                        result.append(String(arr[4]))\n                    }\
    \ else {\n                        result.append(String(arr[0]))\n            \
    \            \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp59n9fdqk.swift:121:63: error: expected '}' at end of brace statement\n\
    assert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n       \
    \                                                       ^\n/tmp/tmp59n9fdqk.swift:95:24:\
    \ note: to match this opening '{'\n                } else {\n                \
    \       ^\n/tmp/tmp59n9fdqk.swift:121:63: error: expected '}' at end of brace\
    \ statement\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"\
    ])\n                                                              ^\n/tmp/tmp59n9fdqk.swift:90:20:\
    \ note: to match this opening '{'\n            } else {\n                   ^\n\
    /tmp/tmp59n9fdqk.swift:121:63: error: expected '}' at end of brace statement\n\
    assert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n       \
    \                                                       ^\n/tmp/tmp59n9fdqk.swift:84:16:\
    \ note: to match this opening '{'\n        } else {\n               ^\n/tmp/tmp59n9fdqk.swift:121:63:\
    \ error: expected '}' at end of brace statement\nassert(by_length(arr: [9, 4,\
    \ 8]) == [\"Nine\", \"Eight\", \"Four\"])\n                                  \
    \                            ^\n/tmp/tmp59n9fdqk.swift:77:17: note: to match this\
    \ opening '{'\n    if len == 5 {\n                ^\n/tmp/tmp59n9fdqk.swift:121:63:\
    \ error: expected '}' at end of brace statement\nassert(by_length(arr: [9, 4,\
    \ 8]) == [\"Nine\", \"Eight\", \"Four\"])\n                                  \
    \                            ^\n/tmp/tmp59n9fdqk.swift:14:40: note: to match this\
    \ opening '{'\nfunc by_length(arr: [Int]) -> [String] {\n                    \
    \                   ^\n/tmp/tmp59n9fdqk.swift:23:16: error: cannot convert return\
    \ expression of type '[Int]' to return type '[String]'\n        return arr\n \
    \              ^\n/tmp/tmp59n9fdqk.swift:23:16: note: arguments to generic parameter\
    \ 'Element' ('Int' and 'String') are expected to be equal\n        return arr\n\
    \               ^\n/tmp/tmp59n9fdqk.swift:105:6: error: operator functions can\
    \ only be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    "
  stdout: ''
  timestamp: 1660014116
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard !arr.isEmpty\
    \ else { return [] }\n    let min = 1\n    let max = 9\n    var result = [String]()\n\
    \    for n in arr {\n        if n < min || n > max {\n            continue\n \
    \       }\n        let digit = n - min\n        let name = String(digit)\n   \
    \     result.append(name)\n    }\n    return result.reversed()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpjbawulbx/tmpjbawulbx.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4c53c0bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4c53902b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4c53902988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4c539017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjbawulbx                        0x0000564d7a7629b1 <unavailable> + 6577

    5    libc.so.6                          0x00002b4c53df7460 __libc_start_main +
    245

    6    tmpjbawulbx                        0x0000564d7a762459 <unavailable> + 5209

    '
  stdout: ''
  timestamp: 1660014116
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for number in arr {\n        if number >= 1 && number <= 9 {\n          \
    \  result.append(name[number])\n        }\n    }\n    if result.isEmpty {\n  \
    \      return result\n    }\n    result.reverse()\n    for number in result {\n\
    \        if number == \"One\" {\n            result.removeFirst()\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmptqqxd796.swift:18:27: error: cannot find 'name' in scope\n    \
    \        result.append(name[number])\n                          ^~~~\n"
  stdout: ''
  timestamp: 1660014116
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var i = 0\n    for\
    \ num in arr {\n        if num < 1 || num > 9 {\n            continue\n      \
    \  }\n        if i == 0 {\n            result.append(String(num))\n        } else\
    \ {\n            result.append(String(num))\n        }\n        i += 1\n    }\n\
    \    return result.reverse()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpdyimglo9.swift:31:19: error: cannot convert return expression of\
    \ type '()' to return type '[String]'\n    return result.reverse()\n         \
    \  ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014116
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for n in arr {\n        if n >= 1 && n <= 9 {\n            result.append(nameOf(n))\n\
    \        }\n    }\n    if result.isEmpty {\n        return nil\n    }\n    return\
    \ result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp8wtcw893.swift:18:27: error: cannot find 'nameOf' in scope\n  \
    \          result.append(nameOf(n))\n                          ^~~~~~\n/tmp/tmp8wtcw893.swift:22:16:\
    \ error: 'nil' is incompatible with return type '[String]'\n        return nil\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014116
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    var digits = arr\n  \
    \  if digits.count > 0 {\n        digits = digits.sorted()\n    }\n    if digits.count\
    \ > 0 {\n        digits = digits.reversed()\n    }\n    if digits.count > 0 {\n\
    \        for index in 0..<digits.count {\n            let digit = digits[index]\n\
    \            let name = digitToName(digit)\n            result.append(name)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpcrkbv2dc.swift:29:24: error: cannot find 'digitToName' in scope\n\
    \            let name = digitToName(digit)\n                       ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014116
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    let arr = arr.sorted()\n    let arr = arr.reverse()\n\
    \    let arr = arr.map { $0.description }\n    return arr\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp8i5sgraj.swift:19:19: error: cannot use mutating member on immutable\
    \ value: 'arr' is a 'let' constant\n    let arr = arr.reverse()\n            \
    \  ~~~ ^\n/tmp/tmp8i5sgraj.swift:18:5: note: change 'let' to 'var' to make it\
    \ mutable\n    let arr = arr.sorted()\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660014116
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var last = 0\n   \
    \ for num in arr {\n        if num > 9 {\n            last = num\n        } else\
    \ {\n            result.append(\"One\")\n            result.append(\"Two\")\n\
    \            result.append(\"Three\")\n            result.append(\"Four\")\n \
    \           result.append(\"Five\")\n            result.append(\"Six\")\n    \
    \        result.append(\"Seven\")\n            result.append(\"Eight\")\n    \
    \        result.append(\"Nine\")\n            result.append(\"Ten\")\n       \
    \     result.append(\"Eleven\")\n            result.append(\"Twelve\")\n     \
    \       result.append(\"Thirteen\")\n            result.append(\"Fourteen\")\n\
    \            result.append(\"Fifteen\")\n            result.append(\"Sixteen\"\
    )\n            result.append(\"Seventeen\")\n            result.append(\"Eighteen\"\
    )\n            result.append(\"Nineteen\")\n            result.append(\"Twenty\"\
    )\n            result.append(\"Twenty one\")\n            result.append(\"Twenty\
    \ two\")\n            result.append(\"Twenty three\")\n            result.append(\"\
    Twenty four\")\n            result.append(\"Twenty five\")\n            result.append(\"\
    Twenty six\")\n            result.append(\"Twenty seven\")\n            result.append(\"\
    Twenty eight\")\n            result.append(\"Twenty nine\")\n            result.append(\"\
    Twenty ten\")\n            result.append(\"Twenty eleven\")\n            result.append(\"\
    Twenty twelve\")\n            result.append(\"Twenty thirteen\")\n           \
    \ result.append(\"Twenty fourteen\")\n            result.append(\"Twenty fifteen\"\
    )\n            result.append(\"Twenty sixteen\")\n            result.append(\"\
    Twenty seventeen\")\n            result.append(\"Twenty eighteen\")\n        \
    \    result.append(\"Twenty nineteen\")\n            result.append(\"Twenty twenty\"\
    )\n            result.append(\"Twenty twenty one\")\n            result.append(\"\
    Twenty twenty two\")\n            result.append(\"Twenty twenty three\")\n   \
    \         result.append(\"Twenty twenty four\")\n            result.append(\"\
    Twenty twenty five\")\n            result.append(\"Twenty twenty six\")\n    \
    \        result.append(\"Twenty twenty seven\")\n            result.append(\"\
    Twenty twenty eight\")\n            result.append(\"Twenty twenty nine\")\n  \
    \          result.append(\"Twenty twenty ten\")\n            result.append(\"\
    Twenty twenty eleven\")\n            result.append(\"Twenty twenty twelve\")\n\
    \            result.append(\"Twenty twenty thirteen\")\n            result.append(\"\
    Twenty twenty fourteen\")\n            result.append(\"Twenty twenty fifteen\"\
    )\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpw4qyrc07.swift:98:63: error: expected '}' at end of brace statement\n\
    assert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n       \
    \                                                       ^\n/tmp/tmpw4qyrc07.swift:20:20:\
    \ note: to match this opening '{'\n    for num in arr {\n                   ^\n\
    /tmp/tmpw4qyrc07.swift:98:63: error: expected '}' at end of brace statement\n\
    assert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n       \
    \                                                       ^\n/tmp/tmpw4qyrc07.swift:14:40:\
    \ note: to match this opening '{'\nfunc by_length(arr: [Int]) -> [String] {\n\
    \                                       ^\n/tmp/tmpw4qyrc07.swift:82:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpw4qyrc07.swift:19:9:\
    \ warning: variable 'last' was written to, but never read\n    var last = 0\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660014116
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    var result = [String]()\n    var i = 0\n    for n\
    \ in arr {\n        if n < 1 || n > 9 {\n            continue\n        }\n   \
    \     let digit = String(n - 1)\n        result.append(name[digit])\n    }\n \
    \   return result.reverse()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmprwsg6c1u.swift:23:23: error: cannot find 'name' in scope\n    \
    \    result.append(name[digit])\n                      ^~~~\n/tmp/tmprwsg6c1u.swift:25:19:\
    \ error: cannot convert return expression of type '()' to return type '[String]'\n\
    \    return result.reverse()\n           ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014116
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n\n    var result = [String]()\n    var last = 0\n \
    \   for num in arr {\n        if num > 9 {\n            last = num\n        }\
    \ else {\n            result.append(names[num])\n        }\n    }\n    result.reverse()\n\
    \    for index in 0..<result.count {\n        result[index] = result[index][last]\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp1ht5k8z2.swift:25:27: error: cannot find 'names' in scope\n   \
    \         result.append(names[num])\n                          ^~~~~\n/tmp/tmp1ht5k8z2.swift:30:38:\
    \ error: cannot assign value of type 'Character' to subscript of type 'String'\n\
    \        result[index] = result[index][last]\n                        ~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1660014116
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var i = 0\n    for\
    \ num in arr {\n        if num < 1 || num > 9 {\n            continue\n      \
    \  }\n        let index = num - i\n        result.append(names[index])\n     \
    \   i = num\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgsrmd7v5.swift:25:23: error: cannot find 'names' in scope\n   \
    \     result.append(names[index])\n                      ^~~~~\n"
  stdout: ''
  timestamp: 1660014116
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var index = 0\n  \
    \  var last = 0\n    var lastDigit = 0\n    var lastDigitName = \"\"\n    for\
    \ digit in arr {\n        if digit < 1 || digit > 9 {\n            continue\n\
    \        }\n        if digit == last {\n            continue\n        }\n    \
    \    lastDigit = digit\n        lastDigitName = digitName(digit)\n        if lastDigitName\
    \ != \"\" {\n            result[index] = lastDigitName\n        }\n        last\
    \ = digit\n        index++\n    }\n    if lastDigitName != \"\" {\n        result[index]\
    \ = lastDigitName\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpntzq61r6.swift:31:25: error: cannot find 'digitName' in scope\n\
    \        lastDigitName = digitName(digit)\n                        ^~~~~~~~~\n\
    /tmp/tmpntzq61r6.swift:36:14: error: cannot find operator '++' in scope; did you\
    \ mean '+= 1'?\n        index++\n             ^~\n"
  stdout: ''
  timestamp: 1660014116
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else {\n        return []\n    }\n    var result = [String]()\n    var i =\
    \ 0\n    var j = 0\n    while i < arr.count {\n        if arr[i] < 1 || arr[i]\
    \ > 9 {\n            i += 1\n            continue\n        }\n        result[j]\
    \ = names[arr[i] - 1]\n        i += 1\n        j += 1\n    }\n    result.reverse()\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5mj6rixl.swift:26:21: error: cannot find 'names' in scope\n   \
    \     result[j] = names[arr[i] - 1]\n                    ^~~~~\n"
  stdout: ''
  timestamp: 1660014116
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty()\
    \ {\n        return []\n    }\n    var result = [String]()\n    var i = 0\n  \
    \  var j = 0\n    for k in arr {\n        if i < 9 {\n            result.append(String(k))\n\
    \            i += 1\n        } else {\n            if j == 0 {\n             \
    \   result.append(String(k))\n            } else {\n                result.append(String(k)\
    \ + \" \" + result[j])\n            }\n            j += 1\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpxaj9d81b.swift:15:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n"
  stdout: ''
  timestamp: 1660014116
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard !arr.isEmpty\
    \ else { return [] }\n    var result: [String] = []\n    var last = 0\n    for\
    \ num in arr {\n        if num > 9 {\n            last = num\n        } else {\n\
    \            result.append(String(last))\n            result.append(String(num))\n\
    \            last = 0\n        }\n    }\n    result.append(String(last))\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpsz6eqjbi/tmpsz6eqjbi.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8c7511c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8c7208b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8c7208988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8c72077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsz6eqjbi                        0x000055f0344b9901 <unavailable> + 6401

    5    libc.so.6                          0x00002ac8c76fd460 __libc_start_main +
    245

    6    tmpsz6eqjbi                        0x000055f0344b93a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660014117
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var i = 0\n    for\
    \ num in arr {\n        if num < 1 || num > 9 {\n            continue\n      \
    \  }\n        let name = ones[num]\n        result.append(name)\n        i +=\
    \ 1\n    }\n    for _ in 0..<i {\n        result.append(\"\")\n    }\n    return\
    \ result.reverse()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvkj2u_zo.swift:24:20: error: cannot find 'ones' in scope\n    \
    \    let name = ones[num]\n                   ^~~~\n/tmp/tmpvkj2u_zo.swift:31:19:\
    \ error: cannot convert return expression of type '()' to return type '[String]'\n\
    \    return result.reverse()\n           ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014116
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty()\
    \ {\n        return []\n    }\n    var result = [String]()\n    var current =\
    \ 0\n    var last = 0\n    for current < arr.count {\n        if arr[current]\
    \ > 9 {\n            last = current\n        }\n        current = current + 1\n\
    \    }\n    for current < arr.count {\n        if arr[current] > 9 {\n       \
    \     arr[last] = arr[current]\n            arr[current] = 0\n            last\
    \ = current\n        }\n        current = current + 1\n    }\n    for current\
    \ < arr.count {\n        if arr[current] == 0 {\n            arr[last] = arr[current]\n\
    \            arr[current] = 0\n            last = current\n        }\n       \
    \ current = current + 1\n    }\n    for current < arr.count {\n        if arr[current]\
    \ == 0 {\n            arr[last] = arr[current]\n            arr[current] = 0\n\
    \            last = current\n        }\n        current = current + 1\n    }\n\
    \    for current < arr.count {\n        if arr[current] == 0 {\n            arr[last]\
    \ = arr[current]\n            arr[current] = 0\n            last = current\n \
    \       }\n        current = current + 1\n    }\n    for current < arr.count {\n\
    \        if arr[current] == 0 {\n            arr[last] = arr[current]\n      \
    \      arr[current] = 0\n            last = current\n        }\n        current\
    \ = current + 1\n    }\n    for current < arr.count {\n        if arr[current]\
    \ == 0 {\n            arr[last] = arr[current]\n            arr[current] = 0\n\
    \            last = current\n        }\n        current = current + 1\n    }\n\
    \    for current < arr.count {\n        if arr[current] == 0 {\n            arr[last]\
    \ = arr[current]\n            arr[current] = 0\n            last = current\n \
    \       }\n        current = current + 1\n    }\n    for current < arr.count {\n\
    \        if arr[current] == 0 {\n            arr[last] = arr[current]\n      \
    \      arr[current] = 0\n            last = current\n        }\n        current\
    \ = current + 1\n    }\n    for current < arr.count {\n        if arr[current]\
    \ == 0 {\n            arr[last] = arr[current]\n            arr[current] = 0\n\
    \            last = current\n        }\n        current = current + 1\n    }\n\
    \    for current < arr.count {\n        if arr[current] == 0 {\n            arr[last]\
    \ = arr[current]\n            arr[current] = 0\n            last = current\n \
    \       }\n        current = current + 1\n    }\n    for current < arr.count {\n\
    \        if arr[current] == 0 {\n            arr[last] = arr[current]\n      \
    \      arr[current] = 0\n            last = current\n        }\n        current\
    \ = current + 1\n    }\n    for current < arr.count {\n        if arr[current]\
    \ == 0 {\n            arr[last] = arr[current]\n            arr[current] = 0\n\
    \            last = current\n        }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmptmvg6inc.swift:21:17: error: expected 'in' after for-each pattern\n\
    \    for current < arr.count {\n                ^\n/tmp/tmptmvg6inc.swift:21:17:\
    \ error: unary operator cannot be separated from its operand\n    for current\
    \ < arr.count {\n                ^~\n                 \n/tmp/tmptmvg6inc.swift:27:17:\
    \ error: expected 'in' after for-each pattern\n    for current < arr.count {\n\
    \                ^\n/tmp/tmptmvg6inc.swift:27:17: error: unary operator cannot\
    \ be separated from its operand\n    for current < arr.count {\n             \
    \   ^~\n                 \n/tmp/tmptmvg6inc.swift:35:17: error: expected 'in'\
    \ after for-each pattern\n    for current < arr.count {\n                ^\n/tmp/tmptmvg6inc.swift:35:17:\
    \ error: unary operator cannot be separated from its operand\n    for current\
    \ < arr.count {\n                ^~\n                 \n/tmp/tmptmvg6inc.swift:43:17:\
    \ error: expected 'in' after for-each pattern\n    for current < arr.count {\n\
    \                ^\n/tmp/tmptmvg6inc.swift:43:17: error: unary operator cannot\
    \ be separated from its operand\n    for current < arr.count {\n             \
    \   ^~\n                 \n/tmp/tmptmvg6inc.swift:51:17: error: expected 'in'\
    \ after for-each pattern\n    for current < arr.count {\n                ^\n/tmp/tmptmvg6inc.swift:51:17:\
    \ error: unary operator cannot be separated from its operand\n    for current\
    \ < arr.count {\n                ^~\n                 \n/tmp/tmptmvg6inc.swift:59:17:\
    \ error: expected 'in' after for-each pattern\n    for current < arr.count {\n\
    \                ^\n/tmp/tmptmvg6inc.swift:59:17: error: unary operator cannot\
    \ be separated from its operand\n    for current < arr.count {\n             \
    \   ^~\n                 \n/tmp/tmptmvg6inc.swift:67:17: error: expected 'in'\
    \ after for-each pattern\n    for current < arr.count {\n                ^\n/tmp/tmptmvg6inc.swift:67:17:\
    \ error: unary operator cannot be separated from its operand\n    for current\
    \ < arr.count {\n                ^~\n                 \n/tmp/tmptmvg6inc.swift:75:17:\
    \ error: expected 'in' after for-each pattern\n    for current < arr.count "
  stdout: ''
  timestamp: 1660014116
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var i = 0\n    for\
    \ num in arr {\n        if num < 1 || num > 9 {\n            continue\n      \
    \  }\n        result.append(name[num])\n    }\n    return result.reverse()\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzhd0yd8h.swift:24:23: error: cannot find 'name' in scope\n    \
    \    result.append(name[num])\n                      ^~~~\n/tmp/tmpzhd0yd8h.swift:26:19:\
    \ error: cannot convert return expression of type '()' to return type '[String]'\n\
    \    return result.reverse()\n           ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014116
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty()\
    \ {\n        return []\n    }\n    var result = [String]()\n    var index = 0\n\
    \    for number in arr {\n        if number >= 1 && number <= 9 {\n          \
    \  result[index] = String(number)\n            index++\n        }\n    }\n   \
    \ for number in arr {\n        if number > 9 {\n            result[index] = String(number\
    \ % 10)\n            index++\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvpq7l6uu.swift:15:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n/tmp/tmpvpq7l6uu.swift:23:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            index++\n                 ^~\n/tmp/tmpvpq7l6uu.swift:29:18:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  index++\n                 ^~\n"
  stdout: ''
  timestamp: 1660014116
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard !arr.isEmpty\
    \ else { return [] }\n    let ones = arr.filter{ $0 < 10 }\n    let tens = arr.filter{\
    \ $0 >= 10 }\n    let tensReversed = tens.reverse()\n    let tensReversedString\
    \ = tensReversed.map{ String($0) }\n    let onesReversed = ones.reverse()\n  \
    \  let onesReversedString = onesReversed.map{ String($0) }\n    let onesReversedString2\
    \ = onesReversedString.map{ $0 + \"One\" }\n    let tensReversedString2 = tensReversedString.map{\
    \ $0 + \"Ten\" }\n    let onesReversedString3 = onesReversedString2.map{ $0 +\
    \ \"Two\" }\n    let tensReversedString3 = tensReversedString2.map{ $0 + \"Eleven\"\
    \ }\n    let onesReversedString4 = onesReversedString3.map{ $0 + \"Thirteen\"\
    \ }\n    let tensReversedString4 = tensReversedString3.map{ $0 + \"Fourteen\"\
    \ }\n    let onesReversedString5 = onesReversedString4.map{ $0 + \"Fifteen\" }\n\
    \    let tensReversedString5 = tensReversedString4.map{ $0 + \"Seventeen\" }\n\
    \    let onesReversedString6 = onesReversedString5.map{ $0 + \"Eighteen\" }\n\
    \    let tensReversedString6 = tensReversedString5.map{ $0 + \"Nineteen\" }\n\
    \    let onesReversedString7 = onesReversedString6.map{ $0 + \"Twenty\" }\n  \
    \  let tensReversedString7 = tensReversedString6.map{ $0 + \"TwentyOne\" }\n \
    \   let onesReversedString8 = onesReversedString7.map{ $0 + \"Thirty\" }\n   \
    \ let tensReversedString8 = tensReversedString7.map{ $0 + \"ThirtyOne\" }\n  \
    \  let onesReversedString9 = onesReversedString8.map{ $0 + \"Forty\" }\n    let\
    \ tensReversedString9 = tensReversedString8.map{ $0 + \"FortyOne\" }\n    let\
    \ onesReversedString10 = onesReversedString9.map{ $0 + \"Fifty\" }\n    let tensReversedString10\
    \ = tensReversedString9.map{ $0 + \"FiftyOne\" }\n    let onesReversedString11\
    \ = onesReversedString10.map{ $0 + \"Sixty\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp7ehv3jv5.swift:40:63: error: unterminated string literal\n    let\
    \ onesReversedString11 = onesReversedString10.map{ $0 + \"Sixty\n            \
    \                                                  ^\n/tmp/tmp7ehv3jv5.swift:60:63:\
    \ error: expected '}' at end of brace statement\nassert(by_length(arr: [9, 4,\
    \ 8]) == [\"Nine\", \"Eight\", \"Four\"])\n                                  \
    \                            ^\n/tmp/tmp7ehv3jv5.swift:14:40: note: to match this\
    \ opening '{'\nfunc by_length(arr: [Int]) -> [String] {\n                    \
    \                   ^\n/tmp/tmp7ehv3jv5.swift:18:29: error: cannot use mutating\
    \ member on immutable value: 'tens' is a 'let' constant\n    let tensReversed\
    \ = tens.reverse()\n                       ~~~~ ^\n/tmp/tmp7ehv3jv5.swift:17:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let tens = arr.filter{ $0\
    \ >= 10 }\n    ^~~\n    var\n/tmp/tmp7ehv3jv5.swift:20:29: error: cannot use mutating\
    \ member on immutable value: 'ones' is a 'let' constant\n    let onesReversed\
    \ = ones.reverse()\n                       ~~~~ ^\n/tmp/tmp7ehv3jv5.swift:16:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let ones = arr.filter{ $0\
    \ < 10 }\n    ^~~\n    var\n/tmp/tmp7ehv3jv5.swift:44:6: error: operator functions\
    \ can only be declared at global or in type scope\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014117
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard !arr.isEmpty\
    \ else { return [] }\n    \n    var result = [String]()\n    \n    for number\
    \ in arr {\n        let digit = number % 10\n        \n        switch digit {\n\
    \        case 1:\n            result.append(contentsOf: ones)\n        case 2:\n\
    \            result.append(contentsOf: twos)\n        case 3:\n            result.append(contentsOf:\
    \ threes)\n        case 4:\n            result.append(contentsOf: fours)\n   \
    \     case 5:\n            result.append(contentsOf: fives)\n        case 6:\n\
    \            result.append(contentsOf: sixes)\n        case 7:\n            result.append(contentsOf:\
    \ sevens)\n        case 8:\n            result.append(contentsOf: eights)\n  \
    \      case 9:\n            result.append(contentsOf: nines)\n        default:\n\
    \            break\n        }\n    }\n    \n    return result.reversed()\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgoyhts07.swift:24:39: error: cannot find 'ones' in scope\n    \
    \        result.append(contentsOf: ones)\n                                   \
    \   ^~~~\n/tmp/tmpgoyhts07.swift:26:39: error: cannot find 'twos' in scope\n \
    \           result.append(contentsOf: twos)\n                                \
    \      ^~~~\n/tmp/tmpgoyhts07.swift:28:39: error: cannot find 'threes' in scope\n\
    \            result.append(contentsOf: threes)\n                             \
    \         ^~~~~~\n/tmp/tmpgoyhts07.swift:30:39: error: cannot find 'fours' in\
    \ scope\n            result.append(contentsOf: fours)\n                      \
    \                ^~~~~\n/tmp/tmpgoyhts07.swift:32:39: error: cannot find 'fives'\
    \ in scope\n            result.append(contentsOf: fives)\n                   \
    \                   ^~~~~\n/tmp/tmpgoyhts07.swift:34:39: error: cannot find 'sixes'\
    \ in scope\n            result.append(contentsOf: sixes)\n                   \
    \                   ^~~~~\n/tmp/tmpgoyhts07.swift:36:39: error: cannot find 'sevens'\
    \ in scope\n            result.append(contentsOf: sevens)\n                  \
    \                    ^~~~~~\n/tmp/tmpgoyhts07.swift:38:39: error: cannot find\
    \ 'eights' in scope\n            result.append(contentsOf: eights)\n         \
    \                             ^~~~~~\n/tmp/tmpgoyhts07.swift:40:39: error: cannot\
    \ find 'nines' in scope\n            result.append(contentsOf: nines)\n      \
    \                                ^~~~~\n"
  stdout: ''
  timestamp: 1660014116
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    let min = min(arr)\n    let max = max(arr)\n    var\
    \ result = [String]()\n    for i in 0..<arr.count {\n        if arr[i] == min\
    \ {\n            result.append(String(format: \"One\", arguments: [arr[i]]))\n\
    \        } else if arr[i] == max {\n            result.append(String(format: \"\
    Nine\", arguments: [arr[i]]))\n        } else {\n            result.append(String(format:\
    \ \"%2d\", arguments: [arr[i]]))\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpws3n2swf.swift:16:22: error: missing argument for parameter #2\
    \ in call\n    let min = min(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.min:1:24: note: 'min' declared here\n@inlinable public\
    \ func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmpws3n2swf.swift:17:22: error: missing argument for parameter #2\
    \ in call\n    let max = max(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable public\
    \ func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmpws3n2swf.swift:21:60: error: extra argument 'arguments' in call\n\
    \            result.append(String(format: \"One\", arguments: [arr[i]]))\n   \
    \                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~\n/tmp/tmpws3n2swf.swift:23:61:\
    \ error: extra argument 'arguments' in call\n            result.append(String(format:\
    \ \"Nine\", arguments: [arr[i]]))\n                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~\n\
    /tmp/tmpws3n2swf.swift:25:60: error: extra argument 'arguments' in call\n    \
    \        result.append(String(format: \"%2d\", arguments: [arr[i]]))\n       \
    \                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014117
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard !arr.isEmpty\
    \ else { return [] }\n    let min = min(arr)\n    let max = max(arr)\n    var\
    \ result = [String]()\n    for i in arr {\n        if i <= min || i > max {\n\
    \            continue\n        }\n        let index = i - min\n        result.append(names[index])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmps0w856ez.swift:16:22: error: missing argument for parameter #2\
    \ in call\n    let min = min(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.min:1:24: note: 'min' declared here\n@inlinable public\
    \ func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmps0w856ez.swift:17:22: error: missing argument for parameter #2\
    \ in call\n    let max = max(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable public\
    \ func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmps0w856ez.swift:24:23: error: cannot find 'names' in scope\n   \
    \     result.append(names[index])\n                      ^~~~~\n"
  stdout: ''
  timestamp: 1660014116
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var i = 0\n    for\
    \ n in arr {\n        if n >= 1 && n <= 9 {\n            result.append(name[n\
    \ - 1])\n        } else {\n            result.append(\"\")\n        }\n      \
    \  i += 1\n    }\n    return result.reverse()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpretxsw_5.swift:22:27: error: cannot find 'name' in scope\n    \
    \        result.append(name[n - 1])\n                          ^~~~\n/tmp/tmpretxsw_5.swift:28:19:\
    \ error: cannot convert return expression of type '()' to return type '[String]'\n\
    \    return result.reverse()\n           ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014117
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard !arr.isEmpty\
    \ else { return [] }\n    var result = [String]()\n    var last = 0\n    for n\
    \ in arr {\n        if n < 1 {\n            continue\n        }\n        if n\
    \ > 9 {\n            n = 9\n        }\n        if n > last {\n            result.append(String(n\
    \ - last))\n        }\n        result.append(name_to_digit(n))\n        last =\
    \ n\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkkowhkl9.swift:23:13: error: cannot assign to value: 'n' is a 'let'\
    \ constant\n            n = 9\n            ^\n/tmp/tmpkkowhkl9.swift:28:23: error:\
    \ cannot find 'name_to_digit' in scope\n        result.append(name_to_digit(n))\n\
    \                      ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014117
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var i = 0\n    for\
    \ num in arr {\n        if num > 9 {\n            i += 10\n        }\n       \
    \ result.append(name[num])\n    }\n    result.reverse()\n    for num in result\
    \ {\n        if num == \"One\" {\n            result.removeFirst()\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp60boqjd5.swift:24:23: error: cannot find 'name' in scope\n    \
    \    result.append(name[num])\n                      ^~~~\n"
  stdout: ''
  timestamp: 1660014117
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    var result = [String]()\n    var last = 0\n    for\
    \ n in arr {\n        if n > 9 {\n            last = n - 9\n        } else {\n\
    \            last = n - 1\n        }\n        result.append(names[last])\n   \
    \ }\n    return result.reverse()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp8t8340je.swift:24:23: error: cannot find 'names' in scope\n   \
    \     result.append(names[last])\n                      ^~~~~\n/tmp/tmp8t8340je.swift:26:19:\
    \ error: cannot convert return expression of type '()' to return type '[String]'\n\
    \    return result.reverse()\n           ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014117
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let min = min(arr)\n\
    \    let max = max(arr)\n    for i in arr {\n        if i >= min && i <= max {\n\
    \            result.append(names[i])\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfcibc1p_.swift:19:22: error: missing argument for parameter #2\
    \ in call\n    let min = min(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.min:1:24: note: 'min' declared here\n@inlinable public\
    \ func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmpfcibc1p_.swift:20:22: error: missing argument for parameter #2\
    \ in call\n    let max = max(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable public\
    \ func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmpfcibc1p_.swift:23:27: error: cannot find 'names' in scope\n   \
    \         result.append(names[i])\n                          ^~~~~\n"
  stdout: ''
  timestamp: 1660014117
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var i = 0\n    for\
    \ num in arr {\n        if num < 1 || num > 9 {\n            continue\n      \
    \  }\n        result.append(name[num])\n    }\n    for num in arr {\n        if\
    \ num < 1 || num > 9 {\n            continue\n        }\n        result.append(name[num])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvvuoybtf.swift:24:23: error: cannot find 'name' in scope\n    \
    \    result.append(name[num])\n                      ^~~~\n/tmp/tmpvvuoybtf.swift:30:23:\
    \ error: cannot find 'name' in scope\n        result.append(name[num])\n     \
    \                 ^~~~\n"
  stdout: ''
  timestamp: 1660014117
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var i = 0\n    for\
    \ num in arr {\n        if num < 1 || num > 9 {\n            continue\n      \
    \  }\n        let index = num - 10\n        result.append(names[index])\n    }\n\
    \    return result.reverse()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpggeh2qpp.swift:25:23: error: cannot find 'names' in scope\n   \
    \     result.append(names[index])\n                      ^~~~~\n/tmp/tmpggeh2qpp.swift:27:19:\
    \ error: cannot convert return expression of type '()' to return type '[String]'\n\
    \    return result.reverse()\n           ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014117
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var last = 0\n   \
    \ for num in arr {\n        if num > 9 {\n            last = num\n        } else\
    \ {\n            if last == 0 {\n                result.append(String(num))\n\
    \            } else {\n                result.append(String(last))\n         \
    \       result.append(String(num))\n            }\n            last = 0\n    \
    \    }\n    }\n    if last != 0 {\n        result.append(String(last))\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpcv42iexs/tmpcv42iexs.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aab822ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab81fc3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aab81fc3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aab81fc27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcv42iexs                        0x000056032e716951 <unavailable> + 6481

    5    libc.so.6                          0x00002aab824b8460 __libc_start_main +
    245

    6    tmpcv42iexs                        0x000056032e7163f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014117
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for number in arr {\n        if number >= 1 && number <= 9 {\n          \
    \  result.append(String(number))\n        } else {\n            break\n      \
    \  }\n    }\n    if result.isEmpty {\n        return nil\n    }\n    var reversed\
    \ = result.reverse()\n    for number in reversed {\n        if number == \"1\"\
    \ {\n            result.removeFirst()\n        }\n        if number == \"2\" {\n\
    \            result.removeFirst()\n        }\n        if number == \"3\" {\n \
    \           result.removeFirst()\n        }\n        if number == \"4\" {\n  \
    \          result.removeFirst()\n        }\n        if number == \"5\" {\n   \
    \         result.removeFirst()\n        }\n        if number == \"6\" {\n    \
    \        result.removeFirst()\n        }\n        if number == \"7\" {\n     \
    \       result.removeFirst()\n        }\n        if number == \"8\" {\n      \
    \      result.removeFirst()\n        }\n        if number == \"9\" {\n       \
    \     result.removeFirst()\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzjinraw_.swift:24:16: error: 'nil' is incompatible with return\
    \ type '[String]'\n        return nil\n               ^\n/tmp/tmpzjinraw_.swift:26:9:\
    \ warning: variable 'reversed' inferred to have type '()', which may be unexpected\n\
    \    var reversed = result.reverse()\n        ^\n/tmp/tmpzjinraw_.swift:26:9:\
    \ note: add an explicit type annotation to silence this warning\n    var reversed\
    \ = result.reverse()\n        ^\n                : ()\n/tmp/tmpzjinraw_.swift:27:19:\
    \ error: for-in loop requires '()' to conform to 'Sequence'\n    for number in\
    \ reversed {\n                  ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660014117
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard !arr.isEmpty\
    \ else { return [] }\n    let min = min(arr)\n    let max = max(arr)\n    var\
    \ result = [String]()\n    for i in arr {\n        if i >= min && i <= max {\n\
    \            result.append(names[i])\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpu4ngrasr.swift:16:22: error: missing argument for parameter #2\
    \ in call\n    let min = min(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.min:1:24: note: 'min' declared here\n@inlinable public\
    \ func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmpu4ngrasr.swift:17:22: error: missing argument for parameter #2\
    \ in call\n    let max = max(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable public\
    \ func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmpu4ngrasr.swift:21:27: error: cannot find 'names' in scope\n   \
    \         result.append(names[i])\n                          ^~~~~\n"
  stdout: ''
  timestamp: 1660014117
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    let ones = arr.filter { $0 < 10 }\n    let tens\
    \ = arr.filter { $0 >= 10 }\n    let tensReversed = reverse(tens)\n    let tensReversedString\
    \ = reverse(tensReversed)\n    let tensReversedStringString = reverse(tensReversedString)\n\
    \    let onesString = reverse(ones)\n    let onesStringString = reverse(onesString)\n\
    \    let tensStringString = reverse(tensString).map { $0.description }\n    let\
    \ tensReversedStringStringString = reverse(tensReversedStringString).map { $0.description\
    \ }\n    let onesStringStringString = reverse(onesStringString).map { $0.description\
    \ }\n    let onesReversedStringStringString = reverse(onesReversedStringString).map\
    \ { $0.description }\n    let tensReversedStringStringStringString = reverse(tensReversedStringStringString).map\
    \ { $0.description }\n    let onesStringStringStringString = reverse(onesStringStringString).map\
    \ { $0.description }\n    let onesReversedStringStringStringString = reverse(onesReversedStringStringString).map\
    \ { $0.description }\n    let tensReversedStringStringStringStringString = reverse(tensReversedStringStringStringString).map\
    \ { $0.description }\n    let onesStringStringStringStringString = reverse(onesStringStringStringString).map\
    \ { $0.description }\n    let onesReversedStringStringStringStringString = reverse(onesReversedStringStringStringString).map\
    \ { $0.description }\n    let tensReversedStringStringStringStringStringString\
    \ = reverse(tensReversedStringStringStringStringString).map { $0.description }\n\
    \    let onesStringStringStringStringStringStringString = reverse(onesStringStringStringStringStringString).map\
    \ { $0.description }\n    let onesReversedStringStringStringStringStringStringString\
    \ = reverse(onesReversedStringStringStringStringStringString).map { $0.description\
    \ }\n    let tensReversedStringStringStringStringStringStringStringString = reverse(tensReversedStringStringStringStringStringStringStringString).map\
    \ { $0.description }\n    let onesStringStringStringStringStringStringStringStringString\
    \ = reverse(onesStringStringStringStringStringStringStringStringString).map {\
    \ $0.description }\n    let onesReversedStringStringStringStringStringStringStringStringString\
    \ = reverse(onesReversedStringStringStringStringStringStringStringStringString).map\
    \ { $0.description }\n    let tensReversedStringString\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp0ltq5kw2.swift:20:24: error: cannot find 'reverse' in scope\n \
    \   let tensReversed = reverse(tens)\n                       ^~~~~~~\n/tmp/tmp0ltq5kw2.swift:21:30:\
    \ error: cannot find 'reverse' in scope\n    let tensReversedString = reverse(tensReversed)\n\
    \                             ^~~~~~~\n/tmp/tmp0ltq5kw2.swift:22:36: error: cannot\
    \ find 'reverse' in scope\n    let tensReversedStringString = reverse(tensReversedString)\n\
    \                                   ^~~~~~~\n/tmp/tmp0ltq5kw2.swift:23:22: error:\
    \ cannot find 'reverse' in scope\n    let onesString = reverse(ones)\n       \
    \              ^~~~~~~\n/tmp/tmp0ltq5kw2.swift:24:28: error: cannot find 'reverse'\
    \ in scope\n    let onesStringString = reverse(onesString)\n                 \
    \          ^~~~~~~\n/tmp/tmp0ltq5kw2.swift:25:28: error: cannot find 'reverse'\
    \ in scope\n    let tensStringString = reverse(tensString).map { $0.description\
    \ }\n                           ^~~~~~~\n/tmp/tmp0ltq5kw2.swift:25:36: error:\
    \ cannot find 'tensString' in scope\n    let tensStringString = reverse(tensString).map\
    \ { $0.description }\n                                   ^~~~~~~~~~\n/tmp/tmp0ltq5kw2.swift:26:42:\
    \ error: cannot find 'reverse' in scope\n    let tensReversedStringStringString\
    \ = reverse(tensReversedStringString).map { $0.description }\n               \
    \                          ^~~~~~~\n/tmp/tmp0ltq5kw2.swift:27:34: error: cannot\
    \ find 'reverse' in scope\n    let onesStringStringString = reverse(onesStringString).map\
    \ { $0.description }\n                                 ^~~~~~~\n/tmp/tmp0ltq5kw2.swift:28:42:\
    \ error: cannot find 'reverse' in scope\n    let onesReversedStringStringString\
    \ = reverse(onesReversedStringString).map { $0.description }\n               \
    \                          ^~~~~~~\n/tmp/tmp0ltq5kw2.swift:28:50: error: cannot\
    \ find 'onesReversedStringString' in scope\n    let onesReversedStringStringString\
    \ = reverse(onesReversedStringString).map { $0.description }\n               \
    \                                  ^~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp0ltq5kw2.swift:29:48:\
    \ error: cannot find 'reverse' in "
  stdout: ''
  timestamp: 1660014117
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard !arr.isEmpty\
    \ else { return [] }\n    var result = [String]()\n    var last = 0\n    for num\
    \ in arr {\n        if num < 1 || num > 9 {\n            continue\n        }\n\
    \        let digit = num % 10\n        if digit == 0 {\n            continue\n\
    \        }\n        if last < digit {\n            last = digit\n            continue\n\
    \        }\n        result.append(String(last))\n        result.append(String(digit))\n\
    \        last = 0\n    }\n    result.append(String(last))\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmp96oz41no/tmp96oz41no.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b68299d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b68296c9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b68296c9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b68296c87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp96oz41no                        0x000056155d2869e1 <unavailable> + 6625

    5    libc.so.6                          0x00002b6829bbe460 __libc_start_main +
    245

    6    tmp96oz41no                        0x000056155d286489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1660014117
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty()\
    \ {\n        return []\n    }\n    var result = [String]()\n    var i = 0\n  \
    \  for num in arr {\n        if num < 1 || num > 9 {\n            continue\n \
    \       }\n        result.append(String(num))\n        i += 1\n        if i ==\
    \ 3 {\n            i = 0\n        }\n    }\n    return result.reversed()\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp41tjjf6a.swift:15:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n"
  stdout: ''
  timestamp: 1660014117
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    var result = [String]()\n    var i = 0\n    var j\
    \ = 0\n    for _ in arr {\n        if i == 0 {\n            result.append(\"\"\
    )\n        }\n        result[j] += \"One\"\n        if i == 1 {\n            result[j]\
    \ += \"Two\"\n        }\n        if i == 2 {\n            result[j] += \"Three\"\
    \n        }\n        if i == 3 {\n            result[j] += \"Four\"\n        }\n\
    \        if i == 4 {\n            result[j] += \"Five\"\n        }\n        if\
    \ i == 5 {\n            result[j] += \"Six\"\n        }\n        if i == 6 {\n\
    \            result[j] += \"Seven\"\n        }\n        if i == 7 {\n        \
    \    result[j] += \"Eight\"\n        }\n        if i == 8 {\n            result[j]\
    \ += \"Nine\"\n        }\n        if i == 9 {\n            result[j] += \"Ten\"\
    \n        }\n        i += 1\n    }\n    for _ in result {\n        result.reverse()\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpnn3okno7/tmpnn3okno7.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad02833bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad028032b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad028032988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0280317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnn3okno7                        0x00005587d6d77a11 <unavailable> + 6673

    5    libc.so.6                          0x00002ad028527460 __libc_start_main +
    245

    6    tmpnn3okno7                        0x00005587d6d774b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1660014117
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty()\
    \ {\n        return []\n    }\n    var result = [String]()\n    var last = 0\n\
    \    for num in arr {\n        if num > 9 {\n            last = num\n        }\
    \ else {\n            if last > 0 {\n                result.append(\"\\(last)\"\
    )\n            }\n            result.append(\"\\(num)\")\n            last = num\n\
    \        }\n    }\n    if last > 0 {\n        result.append(\"\\(last)\")\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpqz4el6hn.swift:15:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n"
  stdout: ''
  timestamp: 1660014117
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for num in arr {\n        switch num {\n        case 1:\n            result.append(\"\
    One\")\n        case 2:\n            result.append(\"Two\")\n        case 3:\n\
    \            result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result.reverse()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpct2x52uw.swift:40:19: error: cannot convert return expression of\
    \ type '()' to return type '[String]'\n    return result.reverse()\n         \
    \  ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014117
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return arr\n    }\n    var result = [String]()\n    var last = 0\n  \
    \  for num in arr {\n        if num > 9 {\n            last = num\n        } else\
    \ {\n            if last != 0 {\n                result.append(\"\\(last)\")\n\
    \            }\n            result.append(\"\\(num)\")\n            last = 0\n\
    \        }\n    }\n    if last != 0 {\n        result.append(\"\\(last)\")\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp8qgh800d.swift:16:16: error: cannot convert return expression of\
    \ type '[Int]' to return type '[String]'\n        return arr\n               ^\n\
    /tmp/tmp8qgh800d.swift:16:16: note: arguments to generic parameter 'Element' ('Int'\
    \ and 'String') are expected to be equal\n        return arr\n               ^\n"
  stdout: ''
  timestamp: 1660014117
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return arr\n    }\n    let ones = arr.filter{ $0 < 10 }\n    let tens\
    \ = arr.filter{ $0 >= 10 }\n    let tensReversed = tens.reverse()\n    let onesReversed\
    \ = ones.reverse()\n    let onesReversedString = onesReversed.map { String($0)\
    \ }\n    let tensReversedString = tensReversed.map { String($0) }\n    let result\
    \ = onesReversedString.append(tensReversedString)\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpp34b86oy.swift:16:16: error: cannot convert return expression of\
    \ type '[Int]' to return type '[String]'\n        return arr\n               ^\n\
    /tmp/tmpp34b86oy.swift:16:16: note: arguments to generic parameter 'Element' ('Int'\
    \ and 'String') are expected to be equal\n        return arr\n               ^\n\
    /tmp/tmpp34b86oy.swift:20:29: error: cannot use mutating member on immutable value:\
    \ 'tens' is a 'let' constant\n    let tensReversed = tens.reverse()\n        \
    \               ~~~~ ^\n/tmp/tmpp34b86oy.swift:19:5: note: change 'let' to 'var'\
    \ to make it mutable\n    let tens = arr.filter{ $0 >= 10 }\n    ^~~\n    var\n\
    /tmp/tmpp34b86oy.swift:21:29: error: cannot use mutating member on immutable value:\
    \ 'ones' is a 'let' constant\n    let onesReversed = ones.reverse()\n        \
    \               ~~~~ ^\n/tmp/tmpp34b86oy.swift:18:5: note: change 'let' to 'var'\
    \ to make it mutable\n    let ones = arr.filter{ $0 < 10 }\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660014117
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result: [String] = []\n    var last: Int =\
    \ 0\n    for num in arr {\n        if num > 9 {\n            last = num\n    \
    \    } else {\n            if last != 0 {\n                result.append(\"\\\
    (last)\")\n            }\n            result.append(\"\\(num)\")\n           \
    \ last = num\n        }\n    }\n    if last != 0 {\n        result.append(\"\\\
    (last)\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp0r9wduk2/tmp0r9wduk2.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39c12e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b39c0fdab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b39c0fda988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b39c0fd97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0r9wduk2                        0x000055b8c0474aa1 <unavailable> + 6817

    5    libc.so.6                          0x00002b39c14cf460 __libc_start_main +
    245

    6    tmp0r9wduk2                        0x000055b8c0474549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1660014117
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var last = 0\n   \
    \ for num in arr {\n        if num > 9 {\n            last = num\n        } else\
    \ {\n            if last > 0 {\n                result.append(\"\\(last)\")\n\
    \            }\n            result.append(\"\\(num)\")\n            last = num\n\
    \        }\n    }\n    if last > 0 {\n        result.append(\"\\(last)\")\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmps7m4acy4/tmps7m4acy4.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e4ccb4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e4c9abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e4c9ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e4c9aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps7m4acy4                        0x000055743efe2af1 <unavailable> + 6897

    5    libc.so.6                          0x00002b1e4cea0460 __libc_start_main +
    245

    6    tmps7m4acy4                        0x000055743efe2599 <unavailable> + 5529

    '
  stdout: ''
  timestamp: 1660014117
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty()\
    \ {\n        return []\n    }\n    var result = [String]()\n    var i = 0\n  \
    \  for number in arr {\n        if number >= 1 && number <= 9 {\n            result.append(String(number))\n\
    \        } else {\n            result.append(String(number))\n        }\n    }\n\
    \    for number in arr {\n        if number >= 1 && number <= 9 {\n          \
    \  result[i] = \"One\"\n            i += 1\n        }\n        if number >= 10\
    \ && number <= 19 {\n            result[i] = \"Two\"\n            i += 1\n   \
    \     }\n        if number >= 20 && number <= 29 {\n            result[i] = \"\
    Three\"\n            i += 1\n        }\n        if number >= 30 && number <= 39\
    \ {\n            result[i] = \"Four\"\n            i += 1\n        }\n       \
    \ if number >= 40 && number <= 49 {\n            result[i] = \"Five\"\n      \
    \      i += 1\n        }\n        if number >= 50 && number <= 59 {\n        \
    \    result[i] = \"Six\"\n            i += 1\n        }\n        if number >=\
    \ 60 && number <= 69 {\n            result[i] = \"Seven\"\n            i += 1\n\
    \        }\n        if number >= 70 && number <= 79 {\n            result[i] =\
    \ \"Eight\"\n            i += 1\n        }\n        if number >= 80 && number\
    \ <= 89 {\n            result[i] = \"Nine\"\n            i += 1\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4_wxvs10.swift:15:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n"
  stdout: ''
  timestamp: 1660014117
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    let min = min(arr)\n    let max = max(arr)\n  \
    \  var result = [String]()\n    for num in arr {\n        if num == min {\n  \
    \          result.append(\"One\")\n        } else if num == max {\n          \
    \  result.append(\"Nine\")\n        } else {\n            result.append(\"One\"\
    )\n            result.append(\"Two\")\n            result.append(\"Three\")\n\
    \            result.append(\"Four\")\n            result.append(\"Five\")\n  \
    \          result.append(\"Six\")\n            result.append(\"Seven\")\n    \
    \        result.append(\"Eight\")\n            result.append(\"Nine\")\n     \
    \   }\n    }\n    return result.reverse()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpd4kck4lw.swift:18:22: error: missing argument for parameter #2\
    \ in call\n    let min = min(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.min:1:24: note: 'min' declared here\n@inlinable public\
    \ func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmpd4kck4lw.swift:19:22: error: missing argument for parameter #2\
    \ in call\n    let max = max(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable public\
    \ func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmpd4kck4lw.swift:38:19: error: cannot convert return expression of\
    \ type '()' to return type '[String]'\n    return result.reverse()\n         \
    \  ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014117
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    var result: [String] = []\n    for i in arr {\n  \
    \      if i >= 1 && i <= 9 {\n            result.append(names[i])\n        } else\
    \ {\n            result.append(\"\")\n        }\n    }\n    result.reverse()\n\
    \    for i in result {\n        if i != \"\" {\n            arr.removeFirst()\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmppjr3bz9h.swift:19:27: error: cannot find 'names' in scope\n   \
    \         result.append(names[i])\n                          ^~~~~\n/tmp/tmppjr3bz9h.swift:27:17:\
    \ error: cannot use mutating member on immutable value: 'arr' is a 'let' constant\n\
    \            arr.removeFirst()\n            ~~~ ^\n"
  stdout: ''
  timestamp: 1660014117
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard !arr.isEmpty\
    \ else { return [] }\n    \n    var result = [String]()\n    var last = 0\n  \
    \  \n    for n in arr {\n        if n > 9 {\n            last = n - 9\n      \
    \  } else {\n            last = n - 1\n        }\n        \n        if last <\
    \ 0 {\n            last = last + 10\n        }\n        \n        result.append(names[last])\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpffsec_ng.swift:31:23: error: cannot find 'names' in scope\n   \
    \     result.append(names[last])\n                      ^~~~~\n"
  stdout: ''
  timestamp: 1660014117
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    let len = arr.count\n    let arr = arr.sorted()\n\
    \    let arr = arr.reversed()\n    let arr = arr.map { $0.description.characters.first!.capitalized()\
    \ }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpiwk56zzp.swift:20:9: error: invalid redeclaration of 'arr'\n  \
    \  let arr = arr.reversed()\n        ^\n/tmp/tmpiwk56zzp.swift:19:9: note: 'arr'\
    \ previously declared here\n    let arr = arr.sorted()\n        ^\n"
  stdout: ''
  timestamp: 1660014117
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var last = 0\n   \
    \ for num in arr {\n        if num < 1 || num > 9 {\n            continue\n  \
    \      }\n        switch num - last {\n        case 0:\n            result +=\
    \ \"One\"\n        case 1:\n            result += \"Two\"\n        case 2:\n \
    \           result += \"Three\"\n        case 3:\n            result += \"Four\"\
    \n        case 4:\n            result += \"Five\"\n        case 5:\n         \
    \   result += \"Six\"\n        case 6:\n            result += \"Seven\"\n    \
    \    case 7:\n            result += \"Eight\"\n        case 8:\n            result\
    \ += \"Nine\"\n        default:\n            break\n        }\n        last =\
    \ num\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpnt1r46d4.swift:26:20: error: operator function '+=' requires the\
    \ types 'String' and 'String.Element' (aka 'Character') be equivalent\n      \
    \      result += \"One\"\n                   ^\nSwift.RangeReplaceableCollection:4:35:\
    \ note: where 'Self.Element' = 'String', 'Other.Element' = 'String.Element' (aka\
    \ 'Character')\n    @inlinable public static func += <Other>(lhs: inout Self,\
    \ rhs: Other) where Other : Sequence, Self.Element == Other.Element\n        \
    \                          ^\n/tmp/tmpnt1r46d4.swift:28:20: error: operator function\
    \ '+=' requires the types 'String' and 'String.Element' (aka 'Character') be equivalent\n\
    \            result += \"Two\"\n                   ^\nSwift.RangeReplaceableCollection:4:35:\
    \ note: where 'Self.Element' = 'String', 'Other.Element' = 'String.Element' (aka\
    \ 'Character')\n    @inlinable public static func += <Other>(lhs: inout Self,\
    \ rhs: Other) where Other : Sequence, Self.Element == Other.Element\n        \
    \                          ^\n/tmp/tmpnt1r46d4.swift:30:20: error: operator function\
    \ '+=' requires the types 'String' and 'String.Element' (aka 'Character') be equivalent\n\
    \            result += \"Three\"\n                   ^\nSwift.RangeReplaceableCollection:4:35:\
    \ note: where 'Self.Element' = 'String', 'Other.Element' = 'String.Element' (aka\
    \ 'Character')\n    @inlinable public static func += <Other>(lhs: inout Self,\
    \ rhs: Other) where Other : Sequence, Self.Element == Other.Element\n        \
    \                          ^\n/tmp/tmpnt1r46d4.swift:32:20: error: operator function\
    \ '+=' requires the types 'String' and 'String.Element' (aka 'Character') be equivalent\n\
    \            result += \"Four\"\n                   ^\nSwift.RangeReplaceableCollection:4:35:\
    \ note: where 'Self.Element' = 'String', 'Other.Element' = 'String.Element' (aka\
    \ 'Character')\n    @inlinable public static func += <Other>(lhs: inout Self,\
    \ rhs: Other) where Other : Sequence, Self.Element == Other.Element\n        \
    \                          ^\n/tmp/tmpnt1r46d4.swift:34:20: error: operator function\
    \ '+=' requires the types 'String' and 'String.Eleme"
  stdout: ''
  timestamp: 1660014117
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    var result = [String]()\n    var i = 0\n    while\
    \ i < arr.count {\n        let value = arr[i]\n        if value < 1 || value >\
    \ 9 {\n            i += 1\n            continue\n        }\n        let index\
    \ = value - 10\n        result.append(names[index])\n        i += 1\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpqmv0x88k.swift:25:23: error: cannot find 'names' in scope\n   \
    \     result.append(names[index])\n                      ^~~~~\n"
  stdout: ''
  timestamp: 1660014117
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    let min = 1\n    let max = 9\n    var result = [String]()\n\
    \    for n in arr {\n        if n < min || n > max {\n            continue\n \
    \       }\n        let index = n - min\n        result.append(names[index])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpxqqvtfma.swift:24:23: error: cannot find 'names' in scope\n   \
    \     result.append(names[index])\n                      ^~~~~\n"
  stdout: ''
  timestamp: 1660014117
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var i = 0\n    for\
    \ num in arr {\n        if num > 9 {\n            i += 10\n        }\n       \
    \ if num > 0 {\n            result.append(String(num))\n        }\n    }\n   \
    \ if i < 10 {\n        result.append(String(i))\n    }\n    return result.reverse()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpq78q6z1x.swift:31:19: error: cannot convert return expression of\
    \ type '()' to return type '[String]'\n    return result.reverse()\n         \
    \  ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014117
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var digits = arr.sorted()\n\
    \    var lastDigit = digits[0]\n    var lastDigitName = One[lastDigit]\n    for\
    \ digit in digits {\n        if digit > 9 {\n            lastDigit = digit\n \
    \           lastDigitName = One[lastDigit]\n        }\n        result.append(lastDigitName)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmptv2udv35.swift:21:25: error: cannot find 'One' in scope\n    var\
    \ lastDigitName = One[lastDigit]\n                        ^~~\n/tmp/tmptv2udv35.swift:25:29:\
    \ error: cannot find 'One' in scope\n            lastDigitName = One[lastDigit]\n\
    \                            ^~~\n"
  stdout: ''
  timestamp: 1660014117
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard !arr.isEmpty\
    \ else { return [] }\n    let min = 1\n    let max = 9\n    var result = [String]()\n\
    \    var i = 0\n    while i < arr.count {\n        let value = arr[i]\n      \
    \  if value < min || value > max {\n            i += 1\n            continue\n\
    \        }\n        result.append(name(value))\n        i += 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1,\
    \ 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpl_q66566.swift:26:23: error: cannot find 'name' in scope\n    \
    \    result.append(name(value))\n                      ^~~~\n"
  stdout: ''
  timestamp: 1660014117
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else {\n        return []\n    }\n    let min = min(arr)\n    let max = max(arr)\n\
    \    var result = [String]()\n    for n in arr {\n        if n >= min && n <=\
    \ max {\n            result.append(name(n))\n        }\n    }\n    return result.reversed()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp8g49r2fe.swift:18:22: error: missing argument for parameter #2\
    \ in call\n    let min = min(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.min:1:24: note: 'min' declared here\n@inlinable public\
    \ func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmp8g49r2fe.swift:19:22: error: missing argument for parameter #2\
    \ in call\n    let max = max(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable public\
    \ func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmp8g49r2fe.swift:23:27: error: cannot find 'name' in scope\n    \
    \        result.append(name(n))\n                          ^~~~\n"
  stdout: ''
  timestamp: 1660014117
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    let min = 1\n    let max = 9\n    var result = [String]()\n\
    \    for n in arr {\n        if min <= n && n <= max {\n            result.append(nameForNumber(n))\n\
    \        }\n    }\n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp324ofcbz.swift:21:27: error: cannot find 'nameForNumber' in scope\n\
    \            result.append(nameForNumber(n))\n                          ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014117
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var i = 0\n    for\
    \ num in arr {\n        if num < 1 || num > 9 {\n            continue\n      \
    \  }\n        result.append(digits[num])\n        i += 1\n    }\n    for _ in\
    \ 0..<i {\n        result.append(digits[9])\n    }\n    return result.reverse()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpafp0svf3.swift:24:23: error: cannot find 'digits' in scope\n  \
    \      result.append(digits[num])\n                      ^~~~~~\n/tmp/tmpafp0svf3.swift:28:23:\
    \ error: cannot find 'digits' in scope\n        result.append(digits[9])\n   \
    \                   ^~~~~~\n/tmp/tmpafp0svf3.swift:30:19: error: cannot convert\
    \ return expression of type '()' to return type '[String]'\n    return result.reverse()\n\
    \           ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014117
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let min = min(arr)\n\
    \    let max = max(arr)\n    var i = 0\n    while i < arr.count {\n        if\
    \ arr[i] < min {\n            i += 1\n            continue\n        }\n      \
    \  if arr[i] > max {\n            i += 1\n            continue\n        }\n  \
    \      result.append(name[arr[i] - 1])\n        i += 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_2tmc0_5.swift:19:22: error: missing argument for parameter #2\
    \ in call\n    let min = min(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.min:1:24: note: 'min' declared here\n@inlinable public\
    \ func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmp_2tmc0_5.swift:20:22: error: missing argument for parameter #2\
    \ in call\n    let max = max(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable public\
    \ func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmp_2tmc0_5.swift:31:23: error: cannot find 'name' in scope\n    \
    \    result.append(name[arr[i] - 1])\n                      ^~~~\n"
  stdout: ''
  timestamp: 1660014117
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    var i = 0\n    var j\
    \ = 0\n    for _ in arr {\n        if i == 0 {\n            result.append(String(arr[j]))\n\
    \            j += 1\n            continue\n        }\n        if arr[j] < 1 {\n\
    \            result.append(String(arr[j]))\n            j += 1\n            continue\n\
    \        }\n        if arr[j] > 9 {\n            result.append(String(arr[j]))\n\
    \            j += 1\n            continue\n        }\n        if arr[j] == 1 {\n\
    \            result.append(String(arr[j]))\n            j += 1\n            continue\n\
    \        }\n        if arr[j] == 2 {\n            result.append(String(arr[j]))\n\
    \            j += 1\n            continue\n        }\n        if arr[j] == 3 {\n\
    \            result.append(String(arr[j]))\n            j += 1\n            continue\n\
    \        }\n        if arr[j] == 4 {\n            result.append(String(arr[j]))\n\
    \            j += 1\n            continue\n        }\n        if arr[j] == 5 {\n\
    \            result.append(String(arr[j]))\n            j += 1\n            continue\n\
    \        }\n        if arr[j] == 6 {\n            result.append(String(arr[j]))\n\
    \            j += 1\n            continue\n        }\n        if arr[j] == 7 {\n\
    \            result.append(String(arr[j]))\n            j += 1\n            continue\n\
    \        }\n        if arr[j] == 8 {\n            result.append(String(arr[j]))\n\
    \            j += 1\n            continue\n        }\n        if arr[j] == 9 {\n\
    \            result.append(String(arr[j]))\n            j += 1\n            continue\n\
    \        }\n        result.append(String(arr[j]))\n        j += 1\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp9m9uk0fa/tmp9m9uk0fa.swift:101: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caf9b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caf6aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caf6ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caf6ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9m9uk0fa                        0x000055cdff4679a1 <unavailable> + 6561

    5    libc.so.6                          0x00002b0cafba3460 __libc_start_main +
    245

    6    tmp9m9uk0fa                        0x000055cdff467449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014117
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var i = 0\n    for\
    \ n in arr {\n        if n < 1 || n > 9 {\n            continue\n        }\n \
    \       i += 1\n        if i == 1 {\n            result.append(String(format:\
    \ \"One\", arguments: [String(n)]))\n        } else if i == 2 {\n            result.append(String(format:\
    \ \"Two\", arguments: [String(n)]))\n        } else if i == 3 {\n            result.append(String(format:\
    \ \"Three\", arguments: [String(n)]))\n        } else if i == 4 {\n          \
    \  result.append(String(format: \"Four\", arguments: [String(n)]))\n        }\
    \ else if i == 5 {\n            result.append(String(format: \"Five\", arguments:\
    \ [String(n)]))\n        } else if i == 6 {\n            result.append(String(format:\
    \ \"Six\", arguments: [String(n)]))\n        } else if i == 7 {\n            result.append(String(format:\
    \ \"Seven\", arguments: [String(n)]))\n        } else if i == 8 {\n          \
    \  result.append(String(format: \"Eight\", arguments: [String(n)]))\n        }\
    \ else if i == 9 {\n            result.append(String(format: \"Nine\", arguments:\
    \ [String(n)]))\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmppwotjnmu.swift:26:60: error: extra argument 'arguments' in call\n\
    \            result.append(String(format: \"One\", arguments: [String(n)]))\n\
    \                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~\n/tmp/tmppwotjnmu.swift:28:60:\
    \ error: extra argument 'arguments' in call\n            result.append(String(format:\
    \ \"Two\", arguments: [String(n)]))\n                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~\n\
    /tmp/tmppwotjnmu.swift:30:62: error: extra argument 'arguments' in call\n    \
    \        result.append(String(format: \"Three\", arguments: [String(n)]))\n  \
    \                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~\n/tmp/tmppwotjnmu.swift:32:61:\
    \ error: extra argument 'arguments' in call\n            result.append(String(format:\
    \ \"Four\", arguments: [String(n)]))\n                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~\n\
    /tmp/tmppwotjnmu.swift:34:61: error: extra argument 'arguments' in call\n    \
    \        result.append(String(format: \"Five\", arguments: [String(n)]))\n   \
    \                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~\n/tmp/tmppwotjnmu.swift:36:60:\
    \ error: extra argument 'arguments' in call\n            result.append(String(format:\
    \ \"Six\", arguments: [String(n)]))\n                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~\n\
    /tmp/tmppwotjnmu.swift:38:62: error: extra argument 'arguments' in call\n    \
    \        result.append(String(format: \"Seven\", arguments: [String(n)]))\n  \
    \                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~\n/tmp/tmppwotjnmu.swift:40:62:\
    \ error: extra argument 'arguments' in call\n            result.append(String(format:\
    \ \"Eight\", arguments: [String(n)]))\n                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~\n\
    /tmp/tmppwotjnmu.swift:42:61: error: extra argument 'arguments' in call\n    \
    \        result.append(String(format: \"Nine\", arguments: [String(n)]))\n   \
    \                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014119
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result: [String] = []\n    var last = 0\n \
    \   for num in arr {\n        if num > 9 {\n            last = num\n        }\
    \ else {\n            if last > 0 {\n                result.append(\"\\(last)\"\
    )\n            }\n            result.append(\"\\(num)\")\n            last = num\n\
    \        }\n    }\n    if last > 0 {\n        result.append(\"\\(last)\")\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpt_jfbn6v/tmpt_jfbn6v.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fc4866c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fc455db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8fc455d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8fc455c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt_jfbn6v                        0x00005590554f8aa1 <unavailable> + 6817

    5    libc.so.6                          0x00002b8fc4a52460 __libc_start_main +
    245

    6    tmpt_jfbn6v                        0x00005590554f8549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1660014117
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty()\
    \ {\n        return []\n    }\n    var result = [String]()\n    var i = 0\n  \
    \  for n in arr {\n        if n < 1 || n > 9 {\n            continue\n       \
    \ }\n        if i == 0 {\n            result.append(String(n - 1))\n        }\
    \ else {\n            result.append(String(n - 1))\n            result.append(String(arr[i]\
    \ - 1))\n        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpp2up3rlg.swift:15:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n"
  stdout: ''
  timestamp: 1660014117
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var i = 0\n    for\
    \ n in arr {\n        if n < 1 || n > 9 {\n            continue\n        }\n \
    \       result[i++] = \"\\(Int(n))\"\n    }\n    result.reverse()\n    for n in\
    \ result {\n        if let n = Int(n) {\n            let name = ones[Int(n)]\n\
    \            if name != nil {\n                result[result.index(of: n)!] =\
    \ name\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpqrv476um.swift:24:17: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        result[i++] = \"\\(Int(n))\"\n               \
    \ ^~\n/tmp/tmpqrv476um.swift:29:24: error: cannot find 'ones' in scope\n     \
    \       let name = ones[Int(n)]\n                       ^~~~\n/tmp/tmpqrv476um.swift:31:41:\
    \ error: cannot convert value of type 'Int' to expected argument type 'String'\n\
    \                result[result.index(of: n)!] = name\n                       \
    \                 ^\n"
  stdout: ''
  timestamp: 1660014117
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    var result = [String]()\n    var i = 0\n    var j\
    \ = 0\n    var k = arr.count\n    while i < k {\n        if arr[i] < 1 || arr[i]\
    \ > 9 {\n            i += 1\n            continue\n        }\n        result[j]\
    \ = name[arr[i] - 1]\n        i += 1\n        j += 1\n    }\n    result.reverse()\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfh8782cz.swift:25:21: error: cannot find 'name' in scope\n    \
    \    result[j] = name[arr[i] - 1]\n                    ^~~~\n"
  stdout: ''
  timestamp: 1660014117
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    var result: [String] = []\n    var last: Int = 0\n\
    \    for num in arr {\n        if num > 9 {\n            last = num\n        }\
    \ else {\n            result.append(String(last))\n            result.append(String(num))\n\
    \            last = num\n        }\n    }\n    result.append(String(last))\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpby1onl_9/tmpby1onl_9.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab7961dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab795ed5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab795ed5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab795ed47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpby1onl_9                        0x000055affd3f6901 <unavailable> + 6401

    5    libc.so.6                          0x00002ab7963ca460 __libc_start_main +
    245

    6    tmpby1onl_9                        0x000055affd3f63a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660014117
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    let min = 1\n    let max = 9\n    var result = [String]()\n\
    \    for n in arr {\n        let index = min + n - 1\n        result.append(names[index])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp42c02gx8.swift:21:23: error: cannot find 'names' in scope\n   \
    \     result.append(names[index])\n                      ^~~~~\n"
  stdout: ''
  timestamp: 1660014117
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var i = 0\n    var\
    \ j = 0\n    var k = arr.count\n    while i < k {\n        if arr[i] < 1 || arr[i]\
    \ > 9 {\n            i += 1\n            continue\n        }\n        result[j]\
    \ = name[arr[i] - 1]\n        i += 1\n        j += 1\n    }\n    result.reverse()\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3vn44z1l.swift:27:21: error: cannot find 'name' in scope\n    \
    \    result[j] = name[arr[i] - 1]\n                    ^~~~\n"
  stdout: ''
  timestamp: 1660014117
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else {\n        return []\n    }\n    \n    var result = [String]()\n    \n\
    \    var min = 1\n    var max = 9\n    \n    for num in arr {\n        if num\
    \ < min {\n            min = num\n        } else if num > max {\n            max\
    \ = num\n        }\n    }\n    \n    for num in arr {\n        if num < min {\n\
    \            num = min - num\n        } else if num > max {\n            num =\
    \ max - num\n        }\n        \n        result.append(String(num))\n    }\n\
    \    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpn96vnxjz.swift:34:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = min - num\n            ^~~\n/tmp/tmpn96vnxjz.swift:36:13:\
    \ error: cannot assign to value: 'num' is a 'let' constant\n            num =\
    \ max - num\n            ^~~\n"
  stdout: ''
  timestamp: 1660014117
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var i = 0\n    for\
    \ num in arr {\n        if num < 1 || num > 9 {\n            continue\n      \
    \  }\n        if i == 0 {\n            result.append(String(num))\n        } else\
    \ {\n            result.append(String(num))\n            result.append(\" as \\\
    (name[num - 1])\")\n        }\n        i += 1\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpudgr6y4f.swift:28:34: error: cannot find 'name' in scope\n    \
    \        result.append(\" as \\(name[num - 1])\")\n                          \
    \       ^~~~\n"
  stdout: ''
  timestamp: 1660014117
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var index = 0\n  \
    \  var last = 0\n    var current = arr[0]\n    for number in arr {\n        if\
    \ number == current {\n            index += 1\n        } else {\n            if\
    \ index > 0 {\n                result.append(\"\\(last)\")\n            }\n  \
    \          current = number\n            index = 1\n        }\n        last =\
    \ number\n    }\n    if index > 0 {\n        result.append(\"\\(last)\")\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpkq6h1ze9/tmpkq6h1ze9.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae008138c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae007e2fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae007e2f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae007e2e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkq6h1ze9                        0x00005643f4c11b41 <unavailable> + 6977

    5    libc.so.6                          0x00002ae008324460 __libc_start_main +
    245

    6    tmpkq6h1ze9                        0x00005643f4c115e9 <unavailable> + 5609

    '
  stdout: ''
  timestamp: 1660014117
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n\n    let min = 1\n    let max = 9\n    let digits\
    \ = arr.map { $0 }\n    let reversed = digits.reverse()\n\n    let one = \"One\"\
    \n    let two = \"Two\"\n    let three = \"Three\"\n    let four = \"Four\"\n\
    \    let five = \"Five\"\n    let six = \"Six\"\n    let seven = \"Seven\"\n \
    \   let eight = \"Eight\"\n    let nine = \"Nine\"\n\n    var result = [String]()\n\
    \    for digit in reversed {\n        if digit < min {\n            continue\n\
    \        }\n        if digit > max {\n            continue\n        }\n      \
    \  result.append(one)\n        result.append(two)\n        result.append(three)\n\
    \        result.append(four)\n        result.append(five)\n        result.append(six)\n\
    \        result.append(seven)\n        result.append(eight)\n        result.append(nine)\n\
    \        result.append(digit)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpn5vthomd.swift:22:27: error: cannot use mutating member on immutable\
    \ value: 'digits' is a 'let' constant\n    let reversed = digits.reverse()\n \
    \                  ~~~~~~ ^\n/tmp/tmpn5vthomd.swift:21:5: note: change 'let' to\
    \ 'var' to make it mutable\n    let digits = arr.map { $0 }\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660014117
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let one = arr[0]\n  \
    \  let two = arr[1]\n    let three = arr[2]\n    let four = arr[3]\n    let five\
    \ = arr[4]\n    let six = arr[5]\n    let seven = arr[6]\n    let eight = arr[7]\n\
    \    let nine = arr[8]\n    let ten = arr[9]\n    let eleven = arr[10]\n    let\
    \ twelve = arr[11]\n    let thirteen = arr[12]\n    let fourteen = arr[13]\n \
    \   let fifteen = arr[14]\n    let sixteen = arr[15]\n    let seventeen = arr[16]\n\
    \    let eighteen = arr[17]\n    let nineteen = arr[18]\n    let twenty = arr[19]\n\
    \    let thirty = arr[20]\n    let forty = arr[21]\n    let fifty = arr[22]\n\
    \    let sixty = arr[23]\n    let seventy = arr[24]\n    let eighty = arr[25]\n\
    \    let ninety = arr[26]\n    let hundred = arr[27]\n    let thousand = arr[28]\n\
    \    let million = arr[29]\n    let billion = arr[30]\n    let trillion = arr[31]\n\
    \    let quadrillion = arr[32]\n    let quintillion = arr[33]\n    let sextillion\
    \ = arr[34]\n    let septillion = arr[35]\n    let octillion = arr[36]\n    let\
    \ nonillion = arr[37]\n    let decillion = arr[38]\n    let undecillion = arr[39]\n\
    \    let duodecillion = arr[40]\n    let tredecillion = arr[41]\n    let quattuordecillion\
    \ = arr[42]\n    let quindecillion = arr[43]\n    let sexdecillion = arr[44]\n\
    \    let septendecillion = arr[45]\n    let octodecillion = arr[46]\n    let novemdecillion\
    \ = arr[47]\n    let vigintillion = arr[48]\n    let unvigintillion = arr[49]\n\
    \    let duovigintillion = arr[50]\n    let trevigintillion = arr[51]\n    let\
    \ quattuorvigintillion = arr[52]\n    let quinvigintillion = arr[53]\n    let\
    \ sexvigintillion = arr[54]\n    let septenvigintillion = arr[55]\n    let octovigin\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpdzye8ep8.swift:75:9: error: type annotation missing in pattern\n\
    \    let octovigin\n        ^\n"
  stdout: ''
  timestamp: 1660014117
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var i = 0\n    for\
    \ number in arr {\n        if number > 9 {\n            number = number - 10\n\
    \        }\n        result.append(name[number])\n    }\n    return result.reverse()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzylcdect.swift:22:13: error: cannot assign to value: 'number' is\
    \ a 'let' constant\n            number = number - 10\n            ^~~~~~\n/tmp/tmpzylcdect.swift:24:23:\
    \ error: cannot find 'name' in scope\n        result.append(name[number])\n  \
    \                    ^~~~\n/tmp/tmpzylcdect.swift:26:19: error: cannot convert\
    \ return expression of type '()' to return type '[String]'\n    return result.reverse()\n\
    \           ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014117
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    var i = 0\n    for num in arr {\n        if num > 9 {\n            i += 10\n\
    \        }\n        result.append(name[num])\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpc1nz7a50.swift:21:23: error: cannot find 'name' in scope\n    \
    \    result.append(name[num])\n                      ^~~~\n"
  stdout: ''
  timestamp: 1660014117
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var last = 0\n   \
    \ for num in arr {\n        if num < 1 || num > 9 {\n            continue\n  \
    \      }\n        let index = num - last\n        result[index] = names[index][index]\n\
    \        last = num\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp58n7tmlk.swift:25:25: error: cannot find 'names' in scope\n   \
    \     result[index] = names[index][index]\n                        ^~~~~\n"
  stdout: ''
  timestamp: 1660014117
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    var result = [String]()\n    var i = 0\n    while\
    \ i < arr.count {\n        let value = arr[i]\n        if value < 1 || value >\
    \ 9 {\n            i += 1\n            continue\n        }\n        let index\
    \ = value - 10\n        result.append(names[index])\n        i += 1\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpqmv0x88k.swift:25:23: error: cannot find 'names' in scope\n   \
    \     result.append(names[index])\n                      ^~~~~\n"
  stdout: ''
  timestamp: 1660014117
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else {\n        return []\n    }\n    let ones = arr.filter {\n        guard\
    \ $0 >= 1 && $0 <= 9 else {\n            return false\n        }\n        return\
    \ true\n    }\n    let tens = arr.filter {\n        guard $0 >= 10 && $0 <= 19\
    \ else {\n            return false\n        }\n        return true\n    }\n  \
    \  let hundreds = arr.filter {\n        guard $0 >= 100 && $0 <= 999 else {\n\
    \            return false\n        }\n        return true\n    }\n    let thousands\
    \ = arr.filter {\n        guard $0 >= 1000 && $0 <= 9999 else {\n            return\
    \ false\n        }\n        return true\n    }\n    let ten_thousands = arr.filter\
    \ {\n        guard $0 >= 10000 && $0 <= 99999 else {\n            return false\n\
    \        }\n        return true\n    }\n    let hundred_thousands = arr.filter\
    \ {\n        guard $0 >= 100000 && $0 <= 999999 else {\n            return false\n\
    \        }\n        return true\n    }\n    let millions = arr.filter {\n    \
    \    guard $0 >= 1000000 && $0 <= 9999999 else {\n            return false\n \
    \       }\n        return true\n    }\n    let billions = arr.filter {\n     \
    \   guard $0 >= 100000000 && $0 <= 999999999 else {\n            return false\n\
    \        }\n        return true\n    }\n    let trillions = arr.filter {\n   \
    \     guard $0 >= 1000000000000 && $0 <= 999999999999 else {\n            return\
    \ false\n        }\n        return true\n    }\n    let quadrillions = arr.filter\
    \ {\n        guard $0 >= 1000000000000000 && $0 <= 999999999999999 else {\n  \
    \          return false\n        }\n        return true\n    }\n    let quintillions\
    \ = arr.filter {\n        guard $0 >= 1000000000000000000 && $0 <= 999999999999999999\
    \ else {\n            return false\n        }\n        return true\n    }\n  \
    \  let thousand_ones = arr.filter {\n        guard $0 >= 1000 && $0 <= 999 else\
    \ {\n            return false\n        }\n        return true\n    }\n    let\
    \ thousand_tens = arr.filter {\n        guard $0 >= 10000 && $0 <= 9999 else {\n\
    \            return false\n        }\n        return true\n    }\n    let thousand_hundreds\
    \ = arr.filter {\n        guard $0 >= 100000 && $0 <= 999999 else {\n        \
    \    return false\n        }\n        return true\n    }\n    let thousand_thousands\
    \ = arr.filter {\n        guard $0 >= 1000000 && $0 <= 9999999 else {\n\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp8ivbuu9l.swift:124:63: error: expected '}' at end of closure\n\
    assert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n       \
    \                                                       ^\n/tmp/tmp8ivbuu9l.swift:102:41:\
    \ note: to match this opening '{'\n    let thousand_thousands = arr.filter {\n\
    \                                        ^\n/tmp/tmp8ivbuu9l.swift:124:63: error:\
    \ expected '}' at end of brace statement\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\n                                         \
    \                     ^\n/tmp/tmp8ivbuu9l.swift:14:40: note: to match this opening\
    \ '{'\nfunc by_length(arr: [Int]) -> [String] {\n                            \
    \           ^\n/tmp/tmp8ivbuu9l.swift:108:6: error: operator functions can only\
    \ be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n     ^\n/tmp/tmp8ivbuu9l.swift:18:9: warning: initialization\
    \ of immutable value 'ones' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    let ones = arr.filter {\n    ~~~~^~~~\n    _\n/tmp/tmp8ivbuu9l.swift:24:9:\
    \ warning: initialization of immutable value 'tens' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    let tens = arr.filter {\n    ~~~~^~~~\n\
    \    _\n/tmp/tmp8ivbuu9l.swift:30:9: warning: initialization of immutable value\
    \ 'hundreds' was never used; consider replacing with assignment to '_' or removing\
    \ it\n    let hundreds = arr.filter {\n    ~~~~^~~~~~~~\n    _\n/tmp/tmp8ivbuu9l.swift:36:9:\
    \ warning: initialization of immutable value 'thousands' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    let thousands = arr.filter\
    \ {\n    ~~~~^~~~~~~~~\n    _\n/tmp/tmp8ivbuu9l.swift:42:9: warning: initialization\
    \ of immutable value 'ten_thousands' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    let ten_thousands = arr.filter {\n    ~~~~^~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp8ivbuu9l.swift:48:9: warning: initialization of immutable value\
    \ 'hundred_thousands' was never used; consider replacing with assign"
  stdout: ''
  timestamp: 1660014117
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else {\n        return []\n    }\n    var result = [String]()\n    var i =\
    \ 0\n    for num in arr {\n        if num > 0 && num < 10 {\n            result.append(String(num))\n\
    \        } else {\n            result.append(String(num))\n        }\n    }\n\
    \    for num in arr {\n        if num > 0 && num < 10 {\n            result[i]\
    \ = \"One\"\n        } else if num > 0 && num < 20 {\n            result[i] =\
    \ \"Two\"\n        } else if num > 0 && num < 30 {\n            result[i] = \"\
    Three\"\n        } else if num > 0 && num < 40 {\n            result[i] = \"Four\"\
    \n        } else if num > 0 && num < 50 {\n            result[i] = \"Five\"\n\
    \        } else if num > 0 && num < 60 {\n            result[i] = \"Six\"\n  \
    \      } else if num > 0 && num < 70 {\n            result[i] = \"Seven\"\n  \
    \      } else if num > 0 && num < 80 {\n            result[i] = \"Eight\"\n  \
    \      } else if num > 0 && num < 90 {\n            result[i] = \"Nine\"\n   \
    \     } else {\n            result[i] = \"Zero\"\n        }\n        i += 1\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpox397taj/tmpox397taj.swift:67: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9a0155cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9a01253b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9a01253988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9a012527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpox397taj                        0x00005568dcb3a9a1 <unavailable> + 6561

    5    libc.so.6                          0x00002b9a01748460 __libc_start_main +
    245

    6    tmpox397taj                        0x00005568dcb3a449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014117
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var i = 0\n    for\
    \ num in arr {\n        if num < 1 || num > 9 {\n            continue\n      \
    \  }\n        if i == 0 {\n            result.append(String(num))\n        } else\
    \ {\n            result.append(String(num))\n            result.append(\" as \\\
    (name[num - 1])\")\n        }\n        i += 1\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpudgr6y4f.swift:28:34: error: cannot find 'name' in scope\n    \
    \        result.append(\" as \\(name[num - 1])\")\n                          \
    \       ^~~~\n"
  stdout: ''
  timestamp: 1660014117
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for number in arr {\n        if number >= 1 && number <= 9 {\n          \
    \  result.append(numberToName(number))\n        }\n    }\n    if result.isEmpty\
    \ {\n        return nil\n    }\n    return result.reverse()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgepanvek.swift:18:27: error: cannot find 'numberToName' in scope\n\
    \            result.append(numberToName(number))\n                          ^~~~~~~~~~~~\n\
    /tmp/tmpgepanvek.swift:22:16: error: 'nil' is incompatible with return type '[String]'\n\
    \        return nil\n               ^\n/tmp/tmpgepanvek.swift:24:19: error: cannot\
    \ convert return expression of type '()' to return type '[String]'\n    return\
    \ result.reverse()\n           ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014117
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let min = arr.min()\n\
    \    let max = arr.max()\n    if min == max {\n        return result\n    }\n\
    \    let digits = String(max - min).characters\n    let reversed = Array(digits[0..<digits.count])\n\
    \    reversed.reverse()\n    for i in 0..<digits.count {\n        let index =\
    \ digits.index(after: i)\n        result.append(reversed[index])\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1,\
    \ 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpuowr6qe_.swift:24:29: error: binary operator '-' cannot be applied\
    \ to two 'Int?' operands\n    let digits = String(max - min).characters\n    \
    \                    ~~~ ^ ~~~\n/tmp/tmpuowr6qe_.swift:24:29: note: overloads\
    \ for '-' exist with these partially matching parameter lists: (Int, Int)\n  \
    \  let digits = String(max - min).characters\n                            ^\n"
  stdout: ''
  timestamp: 1660014117
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let maxLen = arr.max()!\n\
    \    let minLen = arr.min()!\n    if maxLen < minLen {\n        return result\n\
    \    }\n    let maxDigit = maxLen - minLen\n    let maxDigitDigit = maxDigit %\
    \ 10\n    let maxDigitName = [\"Zero\", \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][maxDigitDigit]\n    for num\
    \ in arr {\n        let digit = num - minLen\n        let digitDigit = digit %\
    \ 10\n        let digitName = [\"Zero\", \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][digitDigit]\n        if digit\
    \ < 0 {\n            digitName = \"\\(digitName) \\(maxDigitName)\"\n        }\n\
    \        result.append(digitName)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpjjnvnlzb.swift:32:13: error: cannot assign to value: 'digitName'\
    \ is a 'let' constant\n            digitName = \"\\(digitName) \\(maxDigitName)\"\
    \n            ^~~~~~~~~\n/tmp/tmpjjnvnlzb.swift:30:9: note: change 'let' to 'var'\
    \ to make it mutable\n        let digitName = [\"Zero\", \"One\", \"Two\", \"\
    Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][digitDigit]\n\
    \        ^~~\n        var\n"
  stdout: ''
  timestamp: 1660014117
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty()\
    \ {\n        return []\n    }\n    var result = [String]()\n    var i = 0\n  \
    \  for num in arr {\n        if num < 1 || num > 9 {\n            continue\n \
    \       }\n        let name = digits[num]\n        result.append(name)\n    }\n\
    \    return result.reverse()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpikvn45pk.swift:15:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n/tmp/tmpikvn45pk.swift:24:20: error: cannot find 'digits' in scope\n    \
    \    let name = digits[num]\n                   ^~~~~~\n/tmp/tmpikvn45pk.swift:27:19:\
    \ error: cannot convert return expression of type '()' to return type '[String]'\n\
    \    return result.reverse()\n           ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014117
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty()\
    \ {\n        return []\n    }\n    let min = arr[0]\n    let max = arr[arr.count\
    \ - 1]\n    var result = [String]()\n    for number in arr {\n        if number\
    \ >= min && number <= max {\n            result.append(String(number))\n     \
    \   }\n    }\n    result.reverse()\n    for number in result {\n        let index\
    \ = result.index(of: number)\n        result[index] = names[index]\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpxqyrpe5x.swift:15:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n/tmp/tmpxqyrpe5x.swift:28:28: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        let index = result.index(of: number)\n       \
    \                    ^\n/tmp/tmpxqyrpe5x.swift:28:28: note: use 'firstIndex(of:)'\
    \ instead\n        let index = result.index(of: number)\n                    \
    \       ^~~~~\n                           firstIndex\n/tmp/tmpxqyrpe5x.swift:29:25:\
    \ error: cannot find 'names' in scope\n        result[index] = names[index]\n\
    \                        ^~~~~\n/tmp/tmpxqyrpe5x.swift:29:16: error: value of\
    \ optional type 'Array<String>.Index?' (aka 'Optional<Int>') must be unwrapped\
    \ to a value of type 'Array<String>.Index' (aka 'Int')\n        result[index]\
    \ = names[index]\n               ^\n/tmp/tmpxqyrpe5x.swift:29:16: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \     result[index] = names[index]\n               ^\n                     ??\
    \ <#default value#>\n/tmp/tmpxqyrpe5x.swift:29:16: note: force-unwrap using '!'\
    \ to abort execution if the optional value contains 'nil'\n        result[index]\
    \ = names[index]\n               ^\n                    !\n"
  stdout: ''
  timestamp: 1660014117
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var i = 0\n    for\
    \ num in arr {\n        if num < 1 || num > 9 {\n            continue\n      \
    \  }\n        result.append(name[num])\n    }\n    for num in arr.reverse() {\n\
    \        if num < 1 || num > 9 {\n            continue\n        }\n        result.append(name[num])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvfunjh77.swift:24:23: error: cannot find 'name' in scope\n    \
    \    result.append(name[num])\n                      ^~~~\n/tmp/tmpvfunjh77.swift:26:20:\
    \ error: for-in loop requires '()' to conform to 'Sequence'\n    for num in arr.reverse()\
    \ {\n               ~~~~^~~~~~~~~\n/tmp/tmpvfunjh77.swift:26:20: error: cannot\
    \ use mutating member on immutable value: 'arr' is a 'let' constant\n    for num\
    \ in arr.reverse() {\n               ~~~ ^\n"
  stdout: ''
  timestamp: 1660014117
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let maxLen = arr.maxElement()\n\
    \    if maxLen < 1 || maxLen > 9 {\n        return result\n    }\n    var reversed\
    \ = [Int]()\n    for num in arr {\n        reversed.append(num % 10)\n    }\n\
    \    reversed.reverse()\n    for num in reversed {\n        let index = num %\
    \ 10\n        let name = ones[Int(index)]\n        result.append(name)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_foks040.swift:19:22: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    let maxLen = arr.maxElement()\n                 ~~~ ^~~~~~~~~~\n\
    /tmp/tmp_foks040.swift:30:20: error: cannot find 'ones' in scope\n        let\
    \ name = ones[Int(index)]\n                   ^~~~\n"
  stdout: ''
  timestamp: 1660014117
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    let min = min(arr)\n    let max = max(arr)\n    var\
    \ result = [String]()\n    for n in arr {\n        if n >= min && n <= max {\n\
    \            result.append(name(n))\n        }\n    }\n    return result.reversed()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp026_kfqn.swift:16:22: error: missing argument for parameter #2\
    \ in call\n    let min = min(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.min:1:24: note: 'min' declared here\n@inlinable public\
    \ func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmp026_kfqn.swift:17:22: error: missing argument for parameter #2\
    \ in call\n    let max = max(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable public\
    \ func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmp026_kfqn.swift:21:27: error: cannot find 'name' in scope\n    \
    \        result.append(name(n))\n                          ^~~~\n"
  stdout: ''
  timestamp: 1660014117
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty()\
    \ {\n        return []\n    }\n    var result = [String]()\n    var index = 0\n\
    \    for number in arr {\n        if number < 1 || number > 9 {\n            continue\n\
    \        }\n        switch number {\n        case 1:\n            result[index]\
    \ = \"One\"\n        case 2:\n            result[index] = \"Two\"\n        case\
    \ 3:\n            result[index] = \"Three\"\n        case 4:\n            result[index]\
    \ = \"Four\"\n        case 5:\n            result[index] = \"Five\"\n        case\
    \ 6:\n            result[index] = \"Six\"\n        case 7:\n            result[index]\
    \ = \"Seven\"\n        case 8:\n            result[index] = \"Eight\"\n      \
    \  case 9:\n            result[index] = \"Nine\"\n        default:\n         \
    \   break\n        }\n        index++\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpu3_dey_3.swift:15:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n/tmp/tmpu3_dey_3.swift:46:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        index++\n             ^~\n"
  stdout: ''
  timestamp: 1660014117
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var i = 0\n    for\
    \ n in arr {\n        if n > 9 {\n            i += 9 - n\n        } else {\n \
    \           i += n\n        }\n        result.append(names[i])\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1,\
    \ 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpz7mlr7w8.swift:26:23: error: cannot find 'names' in scope\n   \
    \     result.append(names[i])\n                      ^~~~~\n"
  stdout: ''
  timestamp: 1660014117
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var i = 0\n    for\
    \ num in arr {\n        if num < 1 || num > 9 {\n            continue\n      \
    \  }\n        result.append(names[num])\n    }\n    for num in arr {\n       \
    \ if num < 1 || num > 9 {\n            continue\n        }\n        result.append(names[num])\n\
    \    }\n    return result.reverse()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpwxwv2qnp.swift:24:23: error: cannot find 'names' in scope\n   \
    \     result.append(names[num])\n                      ^~~~~\n/tmp/tmpwxwv2qnp.swift:30:23:\
    \ error: cannot find 'names' in scope\n        result.append(names[num])\n   \
    \                   ^~~~~\n/tmp/tmpwxwv2qnp.swift:32:19: error: cannot convert\
    \ return expression of type '()' to return type '[String]'\n    return result.reverse()\n\
    \           ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014117
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard !arr.isEmpty\
    \ else { return [] }\n    \n    var result = [String]()\n    var last = 0\n  \
    \  \n    for num in arr {\n        if num < 1 || num > 9 {\n            continue\n\
    \        }\n        \n        if num == last {\n            continue\n       \
    \ }\n        \n        result.append(String(num))\n        last = num\n    }\n\
    \    \n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpot8_mkmy/tmpot8_mkmy.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95a3654c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95a334bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95a334b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95a334a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpot8_mkmy                        0x000055f3b23639b1 <unavailable> + 6577

    5    libc.so.6                          0x00002b95a3840460 __libc_start_main +
    245

    6    tmpot8_mkmy                        0x000055f3b2363459 <unavailable> + 5209

    '
  stdout: ''
  timestamp: 1660014118
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty()\
    \ {\n        return []\n    }\n    var result: [String] = []\n    var index =\
    \ 0\n    for number in arr {\n        if number > 9 {\n            number = number\
    \ - 10\n        }\n        result[index] = names[number]\n        index++\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpw94c4a2a.swift:15:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n/tmp/tmpw94c4a2a.swift:22:13: error: cannot assign to value: 'number' is\
    \ a 'let' constant\n            number = number - 10\n            ^~~~~~\n/tmp/tmpw94c4a2a.swift:24:25:\
    \ error: cannot find 'names' in scope\n        result[index] = names[number]\n\
    \                        ^~~~~\n/tmp/tmpw94c4a2a.swift:25:14: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n        index++\n            \
    \ ^~\n"
  stdout: ''
  timestamp: 1660014117
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var digits = arr.sorted()\n\
    \    var lastDigit = digits[0]\n    var lastDigitName = ones[lastDigit]\n    for\
    \ digit in digits {\n        if digit == lastDigit {\n            result.append(lastDigitName)\n\
    \        } else {\n            lastDigit = digit\n            lastDigitName =\
    \ ones[lastDigit]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpyuim1xij.swift:21:25: error: cannot find 'ones' in scope\n    var\
    \ lastDigitName = ones[lastDigit]\n                        ^~~~\n/tmp/tmpyuim1xij.swift:27:29:\
    \ error: cannot find 'ones' in scope\n            lastDigitName = ones[lastDigit]\n\
    \                            ^~~~\n"
  stdout: ''
  timestamp: 1660014117
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for num in arr {\n        if num < 1 || num > 9 {\n            continue\n\
    \        }\n        let index = num - 1 // zero indexed\n        result.append(names[index])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpz3vuenzh.swift:21:23: error: cannot find 'names' in scope\n   \
    \     result.append(names[index])\n                      ^~~~~\n"
  stdout: ''
  timestamp: 1660014117
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n\n    var result = [String]()\n    var digits = arr.sorted()\n\
    \    var i = 0\n    var j = 0\n    var digit = digits[0]\n    var digitNames =\
    \ [\n        \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"\n    ]\n\n    while i < arr.count {\n        if digit ==\
    \ 1 {\n            result.append(digitNames[j])\n            j++\n           \
    \ digit = digits[j]\n        } else if digit == 9 {\n            result.append(digitNames[arr.count\
    \ - j - 1])\n            j = 0\n            digit = digits[j]\n        } else\
    \ {\n            digit = digits[j]\n        }\n        i += 1\n    }\n\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1,\
    \ 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpig4jpgup.swift:31:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            j++\n             ^~\n"
  stdout: ''
  timestamp: 1660014117
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard !arr.isEmpty\
    \ else { return [] }\n    let arr = arr.sorted()\n    var result = [String]()\n\
    \    for n in arr {\n        let index = n % 10\n        result.append(names[index])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp1vcot9rp.swift:20:23: error: cannot find 'names' in scope\n   \
    \     result.append(names[index])\n                      ^~~~~\n"
  stdout: ''
  timestamp: 1660014117
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    let min = 1\n    let max = 9\n    var result = [String]()\n\
    \    var i = 0\n    for n in arr {\n        if n > max {\n            i = i +\
    \ 1\n            result.append(String(i))\n            continue\n        }\n \
    \       if n < min {\n            result.append(String(i))\n            continue\n\
    \        }\n        result.append(String(n - min))\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmpax3w3l03/tmpax3w3l03.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaca991cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaca9613b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaca9613988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaca96127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpax3w3l03                        0x0000565041fce951 <unavailable> + 6481

    5    libc.so.6                          0x00002aaca9b08460 __libc_start_main +
    245

    6    tmpax3w3l03                        0x0000565041fce3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014118
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard !arr.isEmpty\
    \ else { return [] }\n    var result = [String]()\n    var last = 0\n    for n\
    \ in arr {\n        if n > 9 {\n            last = last * 10 + n\n        } else\
    \ {\n            result.append(String(last))\n            last = n\n        }\n\
    \    }\n    result.append(String(last))\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpzwjlub02/tmpzwjlub02.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af290446c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af29013db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af29013d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af29013c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzwjlub02                        0x0000558d852d0951 <unavailable> + 6481

    5    libc.so.6                          0x00002af290632460 __libc_start_main +
    245

    6    tmpzwjlub02                        0x0000558d852d03f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014118
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    \n    var result: [String] = []\n    \n    for number\
    \ in arr {\n        let index = Int(number) - 1\n        \n        if index >=\
    \ 0 && index < 10 {\n            result.append(String(index))\n        } else\
    \ {\n            result.append(String(number))\n        }\n    }\n    \n    return\
    \ result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpdnweugsb/tmpdnweugsb.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1abf471c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1abf168b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1abf168988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1abf1677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdnweugsb                        0x000055834143daa1 <unavailable> + 6817

    5    libc.so.6                          0x00002b1abf65d460 __libc_start_main +
    245

    6    tmpdnweugsb                        0x000055834143d549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1660014118
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty()\
    \ {\n        return arr\n    }\n    var result = [String]()\n    var index = 0\n\
    \    for number in arr {\n        if number >= 1 && number <= 9 {\n          \
    \  result[index] = String(number)\n            index++\n        }\n    }\n   \
    \ if index == 0 {\n        return arr\n    }\n    for number in arr {\n      \
    \  if number >= 1 && number <= 9 {\n            result[index] = String(number)\n\
    \            index++\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpeds8kxed.swift:15:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n/tmp/tmpeds8kxed.swift:16:16: error: cannot convert return expression of\
    \ type '[Int]' to return type '[String]'\n        return arr\n               ^\n\
    /tmp/tmpeds8kxed.swift:16:16: note: arguments to generic parameter 'Element' ('Int'\
    \ and 'String') are expected to be equal\n        return arr\n               ^\n\
    /tmp/tmpeds8kxed.swift:23:18: error: cannot find operator '++' in scope; did you\
    \ mean '+= 1'?\n            index++\n                 ^~\n/tmp/tmpeds8kxed.swift:27:16:\
    \ error: cannot convert return expression of type '[Int]' to return type '[String]'\n\
    \        return arr\n               ^\n/tmp/tmpeds8kxed.swift:27:16: note: arguments\
    \ to generic parameter 'Element' ('Int' and 'String') are expected to be equal\n\
    \        return arr\n               ^\n/tmp/tmpeds8kxed.swift:32:18: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n            index++\n   \
    \              ^~\n"
  stdout: ''
  timestamp: 1660014118
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    let len = arr.count\n    let reversed = arr.reverse()\n\
    \    var result = [String]()\n    for i in 0..<len {\n        let digit = reversed[i]\n\
    \        if digit < 10 {\n            result.append(String(digit))\n        }\
    \ else {\n            let index = digit - 10\n            let name = digitNames[index]\n\
    \            result.append(name)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpwkus_t3a.swift:19:24: error: cannot use mutating member on immutable\
    \ value: 'arr' is a 'let' constant\n    let reversed = arr.reverse()\n       \
    \            ~~~ ^\n/tmp/tmpwkus_t3a.swift:27:24: error: cannot find 'digitNames'\
    \ in scope\n            let name = digitNames[index]\n                       ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014118
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let maxLength = arr.max()\
    \ % 10 + 1\n    for number in arr {\n        if number < 1 || number > 9 {\n \
    \           continue\n        }\n        let index = number % 10\n        let\
    \ digit = String(index)\n        if digit == \"0\" {\n            digit = \"One\"\
    \n        } else if digit == \"1\" {\n            digit = \"Two\"\n        } else\
    \ if digit == \"2\" {\n            digit = \"Three\"\n        } else if digit\
    \ == \"3\" {\n            digit = \"Four\"\n        } else if digit == \"4\" {\n\
    \            digit = \"Five\"\n        } else if digit == \"5\" {\n          \
    \  digit = \"Six\"\n        } else if digit == \"6\" {\n            digit = \"\
    Seven\"\n        } else if digit == \"7\" {\n            digit = \"Eight\"\n \
    \       } else if digit == \"8\" {\n            digit = \"Nine\"\n        }\n\
    \        result.append(digit)\n    }\n    if maxLength == 1 {\n        return\
    \ result\n    }\n    return result.prefix(maxLength).reversed()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpih3zew_4.swift:19:25: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    let maxLength = arr.max() % 10 +\
    \ 1\n                        ^\n/tmp/tmpih3zew_4.swift:19:25: note: coalesce using\
    \ '??' to provide a default when the optional value contains 'nil'\n    let maxLength\
    \ = arr.max() % 10 + 1\n                        ^\n                    (     \
    \    ?? <#default value#>)\n/tmp/tmpih3zew_4.swift:19:25: note: force-unwrap using\
    \ '!' to abort execution if the optional value contains 'nil'\n    let maxLength\
    \ = arr.max() % 10 + 1\n                        ^\n                          \
    \   !\n/tmp/tmpih3zew_4.swift:27:13: error: cannot assign to value: 'digit' is\
    \ a 'let' constant\n            digit = \"One\"\n            ^~~~~\n/tmp/tmpih3zew_4.swift:25:9:\
    \ note: change 'let' to 'var' to make it mutable\n        let digit = String(index)\n\
    \        ^~~\n        var\n/tmp/tmpih3zew_4.swift:29:13: error: cannot assign\
    \ to value: 'digit' is a 'let' constant\n            digit = \"Two\"\n       \
    \     ^~~~~\n/tmp/tmpih3zew_4.swift:25:9: note: change 'let' to 'var' to make\
    \ it mutable\n        let digit = String(index)\n        ^~~\n        var\n/tmp/tmpih3zew_4.swift:31:13:\
    \ error: cannot assign to value: 'digit' is a 'let' constant\n            digit\
    \ = \"Three\"\n            ^~~~~\n/tmp/tmpih3zew_4.swift:25:9: note: change 'let'\
    \ to 'var' to make it mutable\n        let digit = String(index)\n        ^~~\n\
    \        var\n/tmp/tmpih3zew_4.swift:33:13: error: cannot assign to value: 'digit'\
    \ is a 'let' constant\n            digit = \"Four\"\n            ^~~~~\n/tmp/tmpih3zew_4.swift:25:9:\
    \ note: change 'let' to 'var' to make it mutable\n        let digit = String(index)\n\
    \        ^~~\n        var\n/tmp/tmpih3zew_4.swift:35:13: error: cannot assign\
    \ to value: 'digit' is a 'let' constant\n            digit = \"Five\"\n      \
    \      ^~~~~\n/tmp/tmpih3zew_4.swift:25:9: note: change 'let' to 'var' to make\
    \ it mutable\n        let digit = String(index)\n        ^~~\n        var\n/tmp/tmpih3zew_4.swift:37:13:\
    \ error: cannot assign to value: 'digit' is a 'let' constant\n "
  stdout: ''
  timestamp: 1660014118
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for num in arr {\n        switch num {\n        case 1:\n            result.append(\"\
    One\")\n        case 2:\n            result.append(\"Two\")\n        case 3:\n\
    \            result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            continue\n\
    \        }\n    }\n    return result.reverse()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpqcgjhyv3.swift:40:19: error: cannot convert return expression of\
    \ type '()' to return type '[String]'\n    return result.reverse()\n         \
    \  ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014118
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty()\
    \ {\n        return arr\n    }\n    var result = [String]()\n    var i = 0\n \
    \   for v in arr {\n        if v < 1 || v > 9 {\n            continue\n      \
    \  }\n        if i == 0 {\n            result.append(String(v))\n        } else\
    \ {\n            result.append(String(v - 1))\n        }\n        i += 1\n   \
    \ }\n    return result.reverse()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpu_ej27d5.swift:15:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n/tmp/tmpu_ej27d5.swift:16:16: error: cannot convert return expression of\
    \ type '[Int]' to return type '[String]'\n        return arr\n               ^\n\
    /tmp/tmpu_ej27d5.swift:16:16: note: arguments to generic parameter 'Element' ('Int'\
    \ and 'String') are expected to be equal\n        return arr\n               ^\n\
    /tmp/tmpu_ej27d5.swift:31:19: error: cannot convert return expression of type\
    \ '()' to return type '[String]'\n    return result.reverse()\n           ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014118
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty()\
    \ {\n        return nil\n    }\n    var result = [String]()\n    var i = 0\n \
    \   for n in arr {\n        if n < 1 || n > 9 {\n            continue\n      \
    \  }\n        i += 1\n        if i == 1 {\n            result.append(String(n))\n\
    \        } else {\n            result.append(String(n))\n            result.append(String(n))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpnpizotci.swift:15:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n/tmp/tmpnpizotci.swift:16:16: error: 'nil' is incompatible with return type\
    \ '[String]'\n        return nil\n               ^\n"
  stdout: ''
  timestamp: 1660014118
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for num in arr {\n        if num < 1 || num > 9 {\n            continue\n\
    \        }\n        let name = numToName(num)\n        result.append(name)\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpqrn31wy8.swift:20:20: error: cannot find 'numToName' in scope\n\
    \        let name = numToName(num)\n                   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014118
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var index = 0\n  \
    \  var current = 0\n    var last = 0\n    for current in arr {\n        if current\
    \ > 9 {\n            last = current\n        } else {\n            if current\
    \ > last {\n                result.append(\"One\")\n                last = current\n\
    \            } else {\n                result.append(\"Two\")\n              \
    \  last = current\n            }\n        }\n    }\n    if last > 0 {\n      \
    \  result.append(\"One\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpf1_00vuv/tmpf1_00vuv.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4fcdc97c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4fcd98eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4fcd98e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4fcd98d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf1_00vuv                        0x0000560d37275891 <unavailable> + 6289

    5    libc.so.6                          0x00002b4fcde83460 __libc_start_main +
    245

    6    tmpf1_00vuv                        0x0000560d37275339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660014118
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for number in arr {\n        if number >= 1 && number <= 9 {\n          \
    \  result.append(String(number))\n        } else {\n            break\n      \
    \  }\n    }\n    if result.isEmpty {\n        return nil\n    }\n    result.reverse()\n\
    \    for number in result {\n        result[result.index(number)] = names[number]\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpa_gckb0u.swift:24:16: error: 'nil' is incompatible with return\
    \ type '[String]'\n        return nil\n               ^\n/tmp/tmpa_gckb0u.swift:28:40:\
    \ error: cannot find 'names' in scope\n        result[result.index(number)] =\
    \ names[number]\n                                       ^~~~~\n/tmp/tmpa_gckb0u.swift:28:23:\
    \ error: value of optional type 'Array<String>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<String>.Index' (aka 'Int')\n        result[result.index(number)]\
    \ = names[number]\n                      ^\n/tmp/tmpa_gckb0u.swift:28:23: note:\
    \ coalesce using '??' to provide a default when the optional value contains 'nil'\n\
    \        result[result.index(number)] = names[number]\n                      ^\n\
    \                                    ?? <#default value#>\n/tmp/tmpa_gckb0u.swift:28:23:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        result[result.index(number)] = names[number]\n              \
    \        ^\n                                   !\n/tmp/tmpa_gckb0u.swift:28:29:\
    \ error: missing argument label 'of:' in call\n        result[result.index(number)]\
    \ = names[number]\n                            ^\n                           \
    \ of: \n"
  stdout: ''
  timestamp: 1660014118
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let min = arr[0]\n  \
    \  let max = arr[arr.count - 1]\n    for number in arr {\n        if number <\
    \ min {\n            continue\n        }\n        if number > max {\n        \
    \    break\n        }\n        let index = number - min\n        result.append(names[index])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpjiuottus.swift:29:23: error: cannot find 'names' in scope\n   \
    \     result.append(names[index])\n                      ^~~~~\n"
  stdout: ''
  timestamp: 1660014118
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var last = 0\n   \
    \ for num in arr {\n        if num > 9 {\n            last = num\n        } else\
    \ {\n            if last > 0 {\n                result.append(\"\\(last)\")\n\
    \            }\n            result.append(\"\\(num)\")\n            last = num\n\
    \        }\n    }\n    if last > 0 {\n        result.append(\"\\(last)\")\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmps7m4acy4/tmps7m4acy4.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e4ccb4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e4c9abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e4c9ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e4c9aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps7m4acy4                        0x000055743efe2af1 <unavailable> + 6897

    5    libc.so.6                          0x00002b1e4cea0460 __libc_start_main +
    245

    6    tmps7m4acy4                        0x000055743efe2599 <unavailable> + 5529

    '
  stdout: ''
  timestamp: 1660014117
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    var result = [String]()\n    var i = 0\n    while\
    \ i < arr.count {\n        let n = arr[i]\n        if n >= 1 && n <= 9 {\n   \
    \         result.append(String(n))\n        } else {\n            result.append(String(n))\n\
    \        }\n        i += 1\n    }\n    result.reverse()\n    for n in result {\n\
    \        if let index = one_to_nine.index(of: n) {\n            result[index]\
    \ = one_to_nine[index]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmppuy0kjf8.swift:29:24: error: cannot find 'one_to_nine' in scope\n\
    \        if let index = one_to_nine.index(of: n) {\n                       ^~~~~~~~~~~\n\
    /tmp/tmppuy0kjf8.swift:30:29: error: cannot find 'one_to_nine' in scope\n    \
    \        result[index] = one_to_nine[index]\n                            ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014118
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var last = 0\n   \
    \ for num in arr {\n        if num < 1 || num > 9 {\n            continue\n  \
    \      }\n        if num == last {\n            continue\n        }\n        result.append(String(num))\n\
    \        last = num\n    }\n    return result.reverse().map { $0.capitalized }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpltp0c2n1.swift:30:29: error: value of tuple type '()' has no member\
    \ 'map'\n    return result.reverse().map { $0.capitalized }\n           ~~~~~~~~~~~~~~~~\
    \ ^~~\n"
  stdout: ''
  timestamp: 1660014118
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty()\
    \ {\n        return []\n    }\n    var result = [String]()\n    var last = 0\n\
    \    for num in arr {\n        if num < 1 || num > 9 {\n            continue\n\
    \        }\n        switch num - last {\n        case 0:\n            result.append(\"\
    One\")\n        case 1:\n            result.append(\"Two\")\n        case 2:\n\
    \            result.append(\"Three\")\n        case 3:\n            result.append(\"\
    Four\")\n        case 4:\n            result.append(\"Five\")\n        case 5:\n\
    \            result.append(\"Six\")\n        case 6:\n            result.append(\"\
    Seven\")\n        case 7:\n            result.append(\"Eight\")\n        case\
    \ 8:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n        last = num\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvc5p809j.swift:15:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n"
  stdout: ''
  timestamp: 1660014118
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else {\n        return []\n    }\n    var result = [String]()\n    var i =\
    \ 0\n    for n in arr {\n        if n > 0 && n < 10 {\n            result.append(String(format:\
    \ \"%d\\\"\", n))\n        } else {\n            result.append(String(format:\
    \ \"%d\\\"\", n - 10))\n        }\n        i += 1\n    }\n    result.reverse()\n\
    \    for n in result {\n        result[i] = \"One\"\n        i += 1\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3dr5993v.swift:22:33: error: incorrect argument labels in call\
    \ (have 'format:_:', expected 'repeating:count:')\n            result.append(String(format:\
    \ \"%d\\\"\", n))\n                                ^~~~~~~\n                 \
    \                repeating       count: \n/tmp/tmp3dr5993v.swift:24:33: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \            result.append(String(format: \"%d\\\"\", n - 10))\n             \
    \                   ^~~~~~~\n                                 repeating      \
    \ count: \n"
  stdout: ''
  timestamp: 1660014118
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else {\n        return []\n    }\n    \n    var result = [String]()\n    \n\
    \    var start = 0\n    var end = arr.count - 1\n    \n    while start < end {\n\
    \        let mid = start + (end - start) / 2\n        let value = arr[mid]\n \
    \       \n        if value < 1 || value > 9 {\n            start = mid + 1\n \
    \           continue\n        }\n        \n        let index = value - 10\n  \
    \      \n        if index < 0 {\n            start = mid + 1\n            continue\n\
    \        }\n        \n        result.append(names[index])\n        start = mid\
    \ + 1\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpk_qdfoj0.swift:40:23: error: cannot find 'names' in scope\n   \
    \     result.append(names[index])\n                      ^~~~~\n"
  stdout: ''
  timestamp: 1660014118
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    let min = min(arr)\n    let max = max(arr)\n  \
    \  var result = [String]()\n    for i in arr {\n        if min <= i && i <= max\
    \ {\n            result.append(names[i])\n        }\n    }\n    return result.reversed()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp2j84qc0l.swift:18:22: error: missing argument for parameter #2\
    \ in call\n    let min = min(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.min:1:24: note: 'min' declared here\n@inlinable public\
    \ func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmp2j84qc0l.swift:19:22: error: missing argument for parameter #2\
    \ in call\n    let max = max(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable public\
    \ func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmp2j84qc0l.swift:23:27: error: cannot find 'names' in scope\n   \
    \         result.append(names[i])\n                          ^~~~~\n"
  stdout: ''
  timestamp: 1660014118
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    let min = min(arr)\n    let max = max(arr)\n    var\
    \ result = [String]()\n    for n in arr {\n        if n >= min && n <= max {\n\
    \            result.append(name(n))\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp2sobglob.swift:16:22: error: missing argument for parameter #2\
    \ in call\n    let min = min(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.min:1:24: note: 'min' declared here\n@inlinable public\
    \ func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmp2sobglob.swift:17:22: error: missing argument for parameter #2\
    \ in call\n    let max = max(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable public\
    \ func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmp2sobglob.swift:21:27: error: cannot find 'name' in scope\n    \
    \        result.append(name(n))\n                          ^~~~\n"
  stdout: ''
  timestamp: 1660014118
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var i = 0\n    for\
    \ num in arr {\n        if num < 1 || num > 9 {\n            continue\n      \
    \  }\n        if i == 0 {\n            result.append(String(num))\n        } else\
    \ {\n            result.append(String(num))\n            result.append(\" as \\\
    (name[num - 1])\")\n        }\n        i += 1\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpudgr6y4f.swift:28:34: error: cannot find 'name' in scope\n    \
    \        result.append(\" as \\(name[num - 1])\")\n                          \
    \       ^~~~\n"
  stdout: ''
  timestamp: 1660014117
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var index = 0\n  \
    \  while index < arr.count {\n        if arr[index] < 1 || arr[index] > 9 {\n\
    \            index += 1\n            continue\n        }\n        let digit =\
    \ String(arr[index])\n        let name = digit.unicodeScalars.first!.rawValue\n\
    \        result.append(name)\n        index += 1\n    }\n    return result.reversed()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgmr2bu68.swift:26:48: error: value of type 'Unicode.Scalar' has\
    \ no member 'rawValue'\n        let name = digit.unicodeScalars.first!.rawValue\n\
    \                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660014118
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty()\
    \ {\n        return []\n    }\n    var result = [String]()\n    var i = 0\n  \
    \  var j = 0\n    var k = arr.count\n    while i < k {\n        if arr[i] < 1\
    \ || arr[i] > 9 {\n            i += 1\n            continue\n        }\n     \
    \   if i == k {\n            break\n        }\n        if arr[i] == 1 {\n    \
    \        result.append(One)\n            i += 1\n            continue\n      \
    \  }\n        if arr[i] == 2 {\n            result.append(Two)\n            i\
    \ += 1\n            continue\n        }\n        if arr[i] == 3 {\n          \
    \  result.append(Three)\n            i += 1\n            continue\n        }\n\
    \        if arr[i] == 4 {\n            result.append(Four)\n            i += 1\n\
    \            continue\n        }\n        if arr[i] == 5 {\n            result.append(Five)\n\
    \            i += 1\n            continue\n        }\n        if arr[i] == 6 {\n\
    \            result.append(Six)\n            i += 1\n            continue\n  \
    \      }\n        if arr[i] == 7 {\n            result.append(Seven)\n       \
    \     i += 1\n            continue\n        }\n        if arr[i] == 8 {\n    \
    \        result.append(Eight)\n            i += 1\n            continue\n    \
    \    }\n        if arr[i] == 9 {\n            result.append(Nine)\n          \
    \  i += 1\n            continue\n        }\n    }\n    for ; i < k; i++ {\n  \
    \      result.append(arr[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpz4_g5uqq.swift:76:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for ; i < k; i++ {\n    ^   ~~~~~~~~~~~~\n/tmp/tmpz4_g5uqq.swift:15:12:\
    \ error: cannot call value of non-function type 'Bool'\n    if arr.isEmpty() {\n\
    \           ^      ~~\n                  \n/tmp/tmpz4_g5uqq.swift:31:27: error:\
    \ cannot find 'One' in scope\n            result.append(One)\n               \
    \           ^~~\n/tmp/tmpz4_g5uqq.swift:36:27: error: cannot find 'Two' in scope\n\
    \            result.append(Two)\n                          ^~~\n/tmp/tmpz4_g5uqq.swift:41:27:\
    \ error: cannot find 'Three' in scope\n            result.append(Three)\n    \
    \                      ^~~~~\n/tmp/tmpz4_g5uqq.swift:46:27: error: cannot find\
    \ 'Four' in scope\n            result.append(Four)\n                         \
    \ ^~~~\n/tmp/tmpz4_g5uqq.swift:51:27: error: cannot find 'Five' in scope\n   \
    \         result.append(Five)\n                          ^~~~\n/tmp/tmpz4_g5uqq.swift:56:27:\
    \ error: cannot find 'Six' in scope\n            result.append(Six)\n        \
    \                  ^~~\n/tmp/tmpz4_g5uqq.swift:61:27: error: cannot find 'Seven'\
    \ in scope\n            result.append(Seven)\n                          ^~~~~\n\
    /tmp/tmpz4_g5uqq.swift:66:27: error: cannot find 'Eight' in scope\n          \
    \  result.append(Eight)\n                          ^~~~~\n/tmp/tmpz4_g5uqq.swift:71:27:\
    \ error: cannot find 'Nine' in scope\n            result.append(Nine)\n      \
    \                    ^~~~\n"
  stdout: ''
  timestamp: 1660014118
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return arr\n    }\n    var result = [String]()\n    var i = 0\n    var\
    \ j = 0\n    var n = arr.count\n    while i < n {\n        if arr[i] > 9 {\n \
    \           j = i\n            while j < n && arr[j] > 9 {\n                j\
    \ += 1\n            }\n            if j == n {\n                break\n      \
    \      }\n            var tmp = arr[i]\n            arr[i] = arr[j]\n        \
    \    arr[j] = tmp\n        }\n        i += 1\n    }\n    for k in arr {\n    \
    \    if k > 9 {\n            result.append(String(k - 10))\n        } else {\n\
    \            result.append(String(k))\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpg92u5wy9.swift:16:16: error: cannot convert return expression of\
    \ type '[Int]' to return type '[String]'\n        return arr\n               ^\n\
    /tmp/tmpg92u5wy9.swift:16:16: note: arguments to generic parameter 'Element' ('Int'\
    \ and 'String') are expected to be equal\n        return arr\n               ^\n\
    /tmp/tmpg92u5wy9.swift:32:16: error: cannot assign through subscript: 'arr' is\
    \ a 'let' constant\n            arr[i] = arr[j]\n            ~~~^\n/tmp/tmpg92u5wy9.swift:33:16:\
    \ error: cannot assign through subscript: 'arr' is a 'let' constant\n        \
    \    arr[j] = tmp\n            ~~~^\n"
  stdout: ''
  timestamp: 1660014118
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n\n    var result = [String]()\n    var index = 0\n\
    \    var digit = arr[0]\n    var length = arr[0]\n    var isNegative = false\n\
    \n    for index in 1..<arr.count {\n        digit = arr[index]\n        length\
    \ = digit - length\n        if length == 0 {\n            result.append(\"\")\n\
    \        } else {\n            isNegative = length < 0\n            if isNegative\
    \ {\n                length *= -1\n            }\n            if length < 10 {\n\
    \                result.append(String(digit))\n            } else {\n        \
    \        result.append(by_length(arr[index..<arr.count]))\n            }\n   \
    \     }\n    }\n\n    if isNegative {\n        result.reverse()\n    }\n\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpz33ei_nf.swift:38:31: error: missing argument label 'contentsOf:'\
    \ in call\n                result.append(by_length(arr[index..<arr.count]))\n\
    \                              ^\n                              contentsOf: \n\
    /tmp/tmpz33ei_nf.swift:38:41: error: missing argument label 'arr:' in call\n \
    \               result.append(by_length(arr[index..<arr.count]))\n           \
    \                             ^\n                                        arr:\
    \ \n/tmp/tmpz33ei_nf.swift:38:44: error: cannot convert value of type 'ArraySlice<Int>'\
    \ to expected argument type '[Int]'\n                result.append(by_length(arr[index..<arr.count]))\n\
    \                                           ^\n"
  stdout: ''
  timestamp: 1660014118
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty()\
    \ {\n        return []\n    }\n    var result = [String]()\n    var digits = [0]\n\
    \    var index = 0\n    for num in arr {\n        if num < 1 || num > 9 {\n  \
    \          continue\n        }\n        digits[index] = num\n        index++\n\
    \    }\n    for index in 0..<index {\n        let digit = digits[index]\n    \
    \    let name = digitToName(digit)\n        result.append(name)\n    }\n    return\
    \ result.reverse()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp7stte3rc.swift:15:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n/tmp/tmp7stte3rc.swift:26:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        index++\n             ^~\n/tmp/tmp7stte3rc.swift:30:20:\
    \ error: cannot find 'digitToName' in scope\n        let name = digitToName(digit)\n\
    \                   ^~~~~~~~~~~\n/tmp/tmp7stte3rc.swift:33:19: error: cannot convert\
    \ return expression of type '()' to return type '[String]'\n    return result.reverse()\n\
    \           ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014118
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let maxLen = arr.max()\
    \ % 10\n    for num in arr {\n        let digit = num % 10\n        let index\
    \ = digit + maxLen\n        result[index] = names[index[digit]]\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1,\
    \ 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgh4zz5e5.swift:19:22: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    let maxLen = arr.max() % 10\n   \
    \                  ^\n/tmp/tmpgh4zz5e5.swift:19:22: note: coalesce using '??'\
    \ to provide a default when the optional value contains 'nil'\n    let maxLen\
    \ = arr.max() % 10\n                     ^\n                 (         ?? <#default\
    \ value#>)\n/tmp/tmpgh4zz5e5.swift:19:22: note: force-unwrap using '!' to abort\
    \ execution if the optional value contains 'nil'\n    let maxLen = arr.max() %\
    \ 10\n                     ^\n                          !\n/tmp/tmpgh4zz5e5.swift:23:25:\
    \ error: cannot find 'names' in scope\n        result[index] = names[index[digit]]\n\
    \                        ^~~~~\n"
  stdout: ''
  timestamp: 1660014118
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    var result = [String]()\n    var i = 0\n    while\
    \ i < arr.count {\n        if arr[i] < 1 || arr[i] > 9 {\n            i += 1\n\
    \            continue\n        }\n        result.append(name[arr[i] - 1])\n  \
    \      i += 1\n    }\n    return result.reverse()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmphvqqays7.swift:23:23: error: cannot find 'name' in scope\n    \
    \    result.append(name[arr[i] - 1])\n                      ^~~~\n/tmp/tmphvqqays7.swift:26:19:\
    \ error: cannot convert return expression of type '()' to return type '[String]'\n\
    \    return result.reverse()\n           ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014118
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result: [String]\
    \ = []\n    var i = 0\n    for n in arr {\n        if n < 1 || n > 9 {\n     \
    \       continue\n        }\n        result.append(name(n))\n        i += 1\n\
    \    }\n    if i == 0 {\n        return result\n    }\n    for n < 10 {\n    \
    \    result.append(name(n))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp73j0oegc.swift:27:11: error: expected 'in' after for-each pattern\n\
    \    for n < 10 {\n          ^\n/tmp/tmp73j0oegc.swift:27:11: error: unary operator\
    \ cannot be separated from its operand\n    for n < 10 {\n          ^~\n     \
    \      \n/tmp/tmp73j0oegc.swift:21:23: error: cannot find 'name' in scope\n  \
    \      result.append(name(n))\n                      ^~~~\n/tmp/tmp73j0oegc.swift:27:11:\
    \ error: '<' is not a prefix unary operator\n    for n < 10 {\n          ^\n"
  stdout: ''
  timestamp: 1660014118
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result = [String]()\n    var i = 0\n    for\
    \ number in arr {\n        if number < 1 || number > 9 {\n            continue\n\
    \        }\n        if i == 0 {\n            result.append(String(number))\n \
    \       } else {\n            result.append(String(number))\n            result.append(\"\
    \ as \\(name[number])\")\n        }\n        i += 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgbypl6ly.swift:28:34: error: cannot find 'name' in scope\n    \
    \        result.append(\" as \\(name[number])\")\n                           \
    \      ^~~~\n"
  stdout: ''
  timestamp: 1660014118
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard !arr.isEmpty\
    \ else { return [] }\n    let min = 1\n    let max = 9\n    var result = [String]()\n\
    \    for n in arr {\n        let digit = n % 10\n        if digit < min || digit\
    \ > max {\n            continue\n        }\n        result.append(name[digit])\n\
    \    }\n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpci14k585.swift:24:23: error: cannot find 'name' in scope\n    \
    \    result.append(name[digit])\n                      ^~~~\n"
  stdout: ''
  timestamp: 1660014118
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    let digits = arr.map { String($0) }\n    let reversed\
    \ = digits.reverse()\n    let ones = reversed.map { $0 == \"1\" ? \"One\" : $0\
    \ }\n    let tens = reversed.map { $0 == \"10\" ? \"Ten\" : $0 }\n    let hundreds\
    \ = reversed.map { $0 == \"100\" ? \"Hundred\" : $0 }\n    let thousands = reversed.map\
    \ { $0 == \"1000\" ? \"Thousand\" : $0 }\n    let millions = reversed.map { $0\
    \ == \"1000000\" ? \"Million\" : $0 }\n    let billions = reversed.map { $0 ==\
    \ \"1000000000\" ? \"Billion\" : $0 }\n    let trillions = reversed.map { $0 ==\
    \ \"1000000000000\" ? \"Trillion\" : $0 }\n    let quadrillions = reversed.map\
    \ { $0 == \"1000000000000000\" ? \"Quadrillion\" : $0 }\n    let quintillions\
    \ = reversed.map { $0 == \"1000000000000000000\" ? \"Quintillion\" : $0 }\n  \
    \  let sextillions = reversed.map { $0 == \"1000000000000000000000\" ? \"Sextillion\"\
    \ : $0 }\n    let septillions = reversed.map { $0 == \"1000000000000000000000000\"\
    \ ? \"Septillion\" : $0 }\n    let octillions = reversed.map { $0 == \"1000000000000000000000000000\"\
    \ ? \"Octillion\" : $0 }\n    let nonillions = reversed.map { $0 == \"1000000000000000000000000000000\"\
    \ ? \"Nonillion\" : $0 }\n    let decillions = reversed.map { $0 == \"1000000000000000000000000000000000\"\
    \ ? \"Decillion\" : $0 }\n    let undecillions = reversed.map { $0 == \"100000000000000000000000000000000000\"\
    \ ? \"Undecillion\" : $0 }\n    let duodecillions = reversed.map { $0 == \"100000000000000000000000000000000000000\"\
    \ ? \"Duodecillion\" : $0 }\n    let tredecillions = reversed.map { $0 == \"100000000000000000000000000000000000000000\"\
    \ ? \"Tredecillion\" : $0 }\n    let quattuordecillions = reversed.map { $0 ==\
    \ \"10000000000000000000000000000000000000000000\" ? \"Quattuordecillion\" : $0\
    \ }\n    let quindecillions = reversed.map { $0 == \"10000000000000000000000000000000000000000000000\"\
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr:\
    \ [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\"\
    , \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpblayn3er.swift:58:63: error: expected '}' at end of brace statement\n\
    assert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n       \
    \                                                       ^\n/tmp/tmpblayn3er.swift:14:40:\
    \ note: to match this opening '{'\nfunc by_length(arr: [Int]) -> [String] {\n\
    \                                       ^\n/tmp/tmpblayn3er.swift:19:27: error:\
    \ cannot use mutating member on immutable value: 'digits' is a 'let' constant\n\
    \    let reversed = digits.reverse()\n                   ~~~~~~ ^\n/tmp/tmpblayn3er.swift:18:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let digits = arr.map { String($0)\
    \ }\n    ^~~\n    var\n/tmp/tmpblayn3er.swift:42:6: error: operator functions\
    \ can only be declared at global or in type scope\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014118
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    var i = 0\n    for n in arr {\n        if n < 1 || n > 9 {\n            continue\n\
    \        }\n        if i == 0 {\n            result.append(String(format: \"%d\\\
    \"\", n))\n        } else {\n            result.append(String(format: \"%d\\\"\
    \", n - 1))\n        }\n        i += 1\n    }\n    if i == 0 {\n        return\
    \ result\n    }\n    for n in arr {\n        if n < 1 || n > 9 {\n           \
    \ continue\n        }\n        result.append(String(format: \"%d\\\"\", n - 1))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpj0zqricp.swift:22:33: error: incorrect argument labels in call\
    \ (have 'format:_:', expected 'repeating:count:')\n            result.append(String(format:\
    \ \"%d\\\"\", n))\n                                ^~~~~~~\n                 \
    \                repeating       count: \n/tmp/tmpj0zqricp.swift:24:33: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \            result.append(String(format: \"%d\\\"\", n - 1))\n              \
    \                  ^~~~~~~\n                                 repeating       count:\
    \ \n/tmp/tmpj0zqricp.swift:35:29: error: incorrect argument labels in call (have\
    \ 'format:_:', expected 'repeating:count:')\n        result.append(String(format:\
    \ \"%d\\\"\", n - 1))\n                            ^~~~~~~\n                 \
    \            repeating       count: \n"
  stdout: ''
  timestamp: 1660014118
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    let min = arr[0]\n    let max = arr[arr.count - 1]\n\
    \    var result = [String]()\n    for number in arr {\n        if number < min\
    \ || number > max {\n            continue\n        }\n        result.append(numberToName(number))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmplwtx1efy.swift:23:23: error: cannot find 'numberToName' in scope\n\
    \        result.append(numberToName(number))\n                      ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014118
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n\n    var result = [String]()\n    var last = 0\n \
    \   var lastDigit = 0\n    for num in arr {\n        if num > 9 {\n          \
    \  lastDigit = num % 10\n            num = num / 10\n        } else {\n      \
    \      lastDigit = 0\n        }\n\n        if num == 1 {\n            result.append(names[lastDigit])\n\
    \        } else {\n            if last == 0 {\n                result.append(names[num])\n\
    \            } else {\n                result.append(names[lastDigit])\n     \
    \           result.append(names[num])\n            }\n        }\n\n        last\
    \ = num\n    }\n\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4fmxmn71.swift:25:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = num / 10\n            ^~~\n/tmp/tmp4fmxmn71.swift:31:27:\
    \ error: cannot find 'names' in scope\n            result.append(names[lastDigit])\n\
    \                          ^~~~~\n/tmp/tmp4fmxmn71.swift:34:31: error: cannot\
    \ find 'names' in scope\n                result.append(names[num])\n         \
    \                     ^~~~~\n/tmp/tmp4fmxmn71.swift:36:31: error: cannot find\
    \ 'names' in scope\n                result.append(names[lastDigit])\n        \
    \                      ^~~~~\n/tmp/tmp4fmxmn71.swift:37:31: error: cannot find\
    \ 'names' in scope\n                result.append(names[num])\n              \
    \                ^~~~~\n"
  stdout: ''
  timestamp: 1660014118
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var result: [String] = []\n    var last: Int =\
    \ 0\n    for num in arr {\n        if num < 1 || num > 9 {\n            continue\n\
    \        }\n        if last < num {\n            last = num\n        }\n    }\n\
    \    for num in arr {\n        if num < 1 || num > 9 {\n            continue\n\
    \        }\n        if last < num {\n            last = num\n        }\n     \
    \   if last == num {\n            result.append(String(num))\n        } else {\n\
    \            result.append(String(last))\n            result.append(String(num))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpz281s612/tmpz281s612.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05c1169c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05c0e60b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05c0e60988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05c0e5f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz281s612                        0x000055a09e6ea901 <unavailable> + 6401

    5    libc.so.6                          0x00002b05c1355460 __libc_start_main +
    245

    6    tmpz281s612                        0x000055a09e6ea3a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660014118
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let one = arr[0]\n  \
    \  let two = arr[1]\n    let three = arr[2]\n    let four = arr[3]\n    let five\
    \ = arr[4]\n    let six = arr[5]\n    let seven = arr[6]\n    let eight = arr[7]\n\
    \    let nine = arr[8]\n    let ten = arr[9]\n    let eleven = arr[10]\n    let\
    \ twelve = arr[11]\n    let thirteen = arr[12]\n    let fourteen = arr[13]\n \
    \   let fifteen = arr[14]\n    let sixteen = arr[15]\n    let seventeen = arr[16]\n\
    \    let eighteen = arr[17]\n    let nineteen = arr[18]\n    let twenty = arr[19]\n\
    \    let thirty = arr[20]\n    let forty = arr[21]\n    let fifty = arr[22]\n\
    \    let sixty = arr[23]\n    let seventy = arr[24]\n    let eighty = arr[25]\n\
    \    let ninety = arr[26]\n    let hundred = arr[27]\n    let thousand = arr[28]\n\
    \    let million = arr[29]\n    let billion = arr[30]\n    let trillion = arr[31]\n\
    \    let quadrillion = arr[32]\n    let quintillion = arr[33]\n    let sextillion\
    \ = arr[34]\n    let septillion = arr[35]\n    let octillion = arr[36]\n    let\
    \ nonillion = arr[37]\n    let decillion = arr[38]\n    let undecillion = arr[39]\n\
    \    let duodecillion = arr[40]\n    let tredecillion = arr[41]\n    let quattuordecillion\
    \ = arr[42]\n    let quindecillion = arr[43]\n    let sexdecillion = arr[44]\n\
    \    let septendecillion = arr[45]\n    let octodecillion = arr[46]\n    let novemdecillion\
    \ = arr[47]\n    let vigintillion = arr[48]\n    let unvigintillion = arr[49]\n\
    \    let duovigintillion = arr[50]\n    let trevigintillion = arr[51]\n    let\
    \ quattuorvigintillion = arr[52]\n    let quinvigintillion = arr[53]\n    let\
    \ sexvigintillion = arr[54]\n    let septenvigintillion = arr[55]\n    let octovigin\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpdzye8ep8.swift:75:9: error: type annotation missing in pattern\n\
    \    let octovigin\n        ^\n"
  stdout: ''
  timestamp: 1660014117
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    let maxLen = arr.maxElement()\n    var result =\
    \ [String]()\n    for num in arr {\n        if num == 1 {\n            result.append(\"\
    One\")\n        } else if num == 2 {\n            result.append(\"Two\")\n   \
    \     } else if num == 3 {\n            result.append(\"Three\")\n        } else\
    \ if num == 4 {\n            result.append(\"Four\")\n        } else if num ==\
    \ 5 {\n            result.append(\"Five\")\n        } else if num == 6 {\n   \
    \         result.append(\"Six\")\n        } else if num == 7 {\n            result.append(\"\
    Seven\")\n        } else if num == 8 {\n            result.append(\"Eight\")\n\
    \        } else if num == 9 {\n            result.append(\"Nine\")\n        }\
    \ else {\n            result.append(String(num))\n        }\n    }\n    result.reverse()\n\
    \    for index in 0..<maxLen {\n        result[index] = result[index].reversed()\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpnow7k2xe.swift:18:22: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    let maxLen = arr.maxElement()\n                 ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014118
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else {\n        return []\n    }\n    var result = [String]()\n    var last\
    \ = 0\n    for num in arr {\n        if num < 1 || num > 9 {\n            continue\n\
    \        }\n        let index = num - last\n        result.append(String(index))\n\
    \        last = num\n    }\n    return result.reversed()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpkqefdi_v/tmpkqefdi_v.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad319ea5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad319b9cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad319b9c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad319b9b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkqefdi_v                        0x00005639cac069b1 <unavailable> + 6577

    5    libc.so.6                          0x00002ad31a091460 __libc_start_main +
    245

    6    tmpkqefdi_v                        0x00005639cac06459 <unavailable> + 5209

    '
  stdout: ''
  timestamp: 1660014118
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard !arr.isEmpty\
    \ else { return [] }\n    let min = min(arr)\n    let max = max(arr)\n    var\
    \ result = [String]()\n    for n in arr {\n        if n < min || n > max {\n \
    \           continue\n        }\n        let digit = Int(log2(n))\n        result.append(digits[digit])\n\
    \    }\n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmplwpalx45.swift:16:22: error: missing argument for parameter #2\
    \ in call\n    let min = min(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.min:1:24: note: 'min' declared here\n@inlinable public\
    \ func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmplwpalx45.swift:17:22: error: missing argument for parameter #2\
    \ in call\n    let max = max(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable public\
    \ func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmplwpalx45.swift:23:25: error: cannot find 'log2' in scope\n    \
    \    let digit = Int(log2(n))\n                        ^~~~\n/tmp/tmplwpalx45.swift:24:23:\
    \ error: cannot find 'digits' in scope\n        result.append(digits[digit])\n\
    \                      ^~~~~~\n"
  stdout: ''
  timestamp: 1660014118
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for number in arr {\n        if number < 1 || number > 9 {\n            continue\n\
    \        }\n        let index = number - 1\n        result.append(names[index])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp2y37urjo.swift:21:23: error: cannot find 'names' in scope\n   \
    \     result.append(names[index])\n                      ^~~~~\n"
  stdout: ''
  timestamp: 1660014118
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let min = min(arr)\n\
    \    let max = max(arr)\n    for num in arr {\n        if num < min || num > max\
    \ {\n            continue\n        }\n        let index = num - min\n        result.append(names[index])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4pe13mxp.swift:19:22: error: missing argument for parameter #2\
    \ in call\n    let min = min(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.min:1:24: note: 'min' declared here\n@inlinable public\
    \ func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmp4pe13mxp.swift:20:22: error: missing argument for parameter #2\
    \ in call\n    let max = max(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable public\
    \ func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmp4pe13mxp.swift:26:23: error: cannot find 'names' in scope\n   \
    \     result.append(names[index])\n                      ^~~~~\n"
  stdout: ''
  timestamp: 1660014118
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let min = arr[0]\n  \
    \  let max = arr[0]\n    for i in arr {\n        if i > max {\n            max\
    \ = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n\
    \    let one = String(format: \"%@\", One)\n    let two = String(format: \"%@\"\
    , Two)\n    let three = String(format: \"%@\", Three)\n    let four = String(format:\
    \ \"%@\", Four)\n    let five = String(format: \"%@\", Five)\n    let six = String(format:\
    \ \"%@\", Six)\n    let seven = String(format: \"%@\", Seven)\n    let eight =\
    \ String(format: \"%@\", Eight)\n    let nine = String(format: \"%@\", Nine)\n\
    \    if min == 1 {\n        result.append(one)\n    }\n    if min == 2 {\n   \
    \     result.append(two)\n    }\n    if min == 3 {\n        result.append(three)\n\
    \    }\n    if min == 4 {\n        result.append(four)\n    }\n    if min == 5\
    \ {\n        result.append(five)\n    }\n    if min == 6 {\n        result.append(six)\n\
    \    }\n    if min == 7 {\n        result.append(seven)\n    }\n    if min ==\
    \ 8 {\n        result.append(eight)\n    }\n    if min == 9 {\n        result.append(nine)\n\
    \    }\n    if max == 9 {\n        result.append(nine)\n    }\n    if max > 9\
    \ {\n        for i in 1...9 {\n            if arr[i] == max {\n              \
    \  result.append(String(format: \"%@\", i))\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgg48pph3.swift:23:13: error: cannot assign to value: 'max' is a\
    \ 'let' constant\n            max = i\n            ^~~\n/tmp/tmpgg48pph3.swift:20:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let max = arr[0]\n    ^~~\n\
    \    var\n/tmp/tmpgg48pph3.swift:26:13: error: cannot assign to value: 'min' is\
    \ a 'let' constant\n            min = i\n            ^~~\n/tmp/tmpgg48pph3.swift:19:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let min = arr[0]\n    ^~~\n\
    \    var\n/tmp/tmpgg48pph3.swift:29:36: error: cannot find 'One' in scope\n  \
    \  let one = String(format: \"%@\", One)\n                                   ^~~\n\
    /tmp/tmpgg48pph3.swift:29:21: error: incorrect argument labels in call (have 'format:_:',\
    \ expected 'repeating:count:')\n    let one = String(format: \"%@\", One)\n  \
    \                  ^~~~~~~\n                     repeating     count: \n/tmp/tmpgg48pph3.swift:30:36:\
    \ error: cannot find 'Two' in scope\n    let two = String(format: \"%@\", Two)\n\
    \                                   ^~~\n/tmp/tmpgg48pph3.swift:30:21: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    let two = String(format: \"%@\", Two)\n                    ^~~~~~~\n    \
    \                 repeating     count: \n/tmp/tmpgg48pph3.swift:31:38: error:\
    \ cannot find 'Three' in scope\n    let three = String(format: \"%@\", Three)\n\
    \                                     ^~~~~\n/tmp/tmpgg48pph3.swift:31:23: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    let three = String(format: \"%@\", Three)\n                      ^~~~~~~\n\
    \                       repeating     count: \n/tmp/tmpgg48pph3.swift:32:37: error:\
    \ cannot find 'Four' in scope\n    let four = String(format: \"%@\", Four)\n \
    \                                   ^~~~\n/tmp/tmpgg48pph3.swift:32:22: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    let four = String(format: \"%@\", Four)\n                     ^~~~~~~\n \
    \                     repeating     count: \n/tmp/tmpgg48pph3.swift:33:37: error:\
    \ cannot find 'Five' i"
  stdout: ''
  timestamp: 1660014118
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty()\
    \ {\n        return []\n    }\n    var result = [String]()\n    var index = 0\n\
    \    while index < arr.count {\n        let value = arr[index]\n        if value\
    \ < 1 || value > 9 {\n            index += 1\n            continue\n        }\n\
    \        let digit = value - 10\n        let name = digitToName(digit)\n     \
    \   result.append(name)\n        index += 1\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpmelkegv_.swift:15:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n/tmp/tmpmelkegv_.swift:27:20: error: cannot find 'digitToName' in scope\n\
    \        let name = digitToName(digit)\n                   ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014118
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    \n    var result = [String]()\n    \n    for number\
    \ in arr {\n        switch number {\n        case 1:\n            result.append(contentsOf:\
    \ [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"])\n        case 2:\n            result.append(contentsOf: [\"Two\"\
    , \"One\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ])\n        case 3:\n            result.append(contentsOf: [\"Three\", \"Two\"\
    , \"One\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"])\n   \
    \     case 4:\n            result.append(contentsOf: [\"Four\", \"Three\", \"\
    Two\", \"One\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"])\n        case\
    \ 5:\n            result.append(contentsOf: [\"Five\", \"Four\", \"Three\", \"\
    Two\", \"One\", \"Six\", \"Seven\", \"Eight\", \"Nine\"])\n        case 6:\n \
    \           result.append(contentsOf: [\"Six\", \"Five\", \"Four\", \"Three\"\
    , \"Two\", \"One\", \"Seven\", \"Eight\", \"Nine\"])\n        case 7:\n      \
    \      result.append(contentsOf: [\"Seven\", \"Six\", \"Five\", \"Four\", \"Three\"\
    , \"Two\", \"One\", \"Eight\", \"Nine\"])\n        case 8:\n            result.append(contentsOf:\
    \ [\"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"\
    , \"Nine\"])\n        case 9:\n            result.append(contentsOf: [\"Nine\"\
    , \"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"\
    ])\n        default:\n            break\n        }\n    }\n    \n    return result.reversed()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmp451s3npu/tmp451s3npu.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b76a7cfdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b76a79f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b76a79f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b76a79f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp451s3npu                        0x0000563b5e80e911 <unavailable> + 6417

    5    libc.so.6                          0x00002b76a7ee9460 __libc_start_main +
    245

    6    tmp451s3npu                        0x0000563b5e80e3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660014118
