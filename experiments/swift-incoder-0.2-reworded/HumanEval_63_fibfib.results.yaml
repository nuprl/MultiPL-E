language: swift
name: HumanEval_63_fibfib
results:
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = [Int]()\n\
    \  fibfib[0] = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for var i = 2; i <= n; i++\
    \ {\n    fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  }\n  return fibfib[n]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpsg4mnxjh.swift:19:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for var i = 2; i <= n; i++ {\n  ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = [Int]()\n\
    \  fibfib[0] = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for i : Int in 2...n {\n\
    \    fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  }\n  return fibfib[n]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002addad451c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002addad148561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002addad148286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002addad14813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002addad147bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002addacf477ec <unavailable> + 186348

    6    tmpe36fy6zj                        0x000055c1c97d17b6 <unavailable> + 6070

    7    tmpe36fy6zj                        0x000055c1c97d13cb <unavailable> + 5067

    8    libc.so.6                          0x00002addad63d460 __libc_start_main +
    245

    9    tmpe36fy6zj                        0x000055c1c97d10e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n\
    \    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for var i = 2; i\
    \ <= n; i++ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n \
    \   }\n    return fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp1ks47ilw.swift:19:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 2; i <= n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    return fibfibHelper(n,\
    \ 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpva7x33e5.swift:15:12: error: cannot find 'fibfibHelper' in scope\n\
    \    return fibfibHelper(n, 0)\n           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = [Int]()\n\
    \  fibfib[0] = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for var i = 2; i < n; i++\
    \ {\n    fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  }\n  return fibfib[n]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpm3mq_ym8.swift:19:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for var i = 2; i < n; i++ {\n  ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n\
    \    for _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpf30yqlgi/tmpf30yqlgi.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a6a60cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a6a303b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a6a303988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a6a3027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf30yqlgi                        0x0000561761c63338 <unavailable> + 4920

    5    libc.so.6                          0x00002b8a6a7f8460 __libc_start_main +
    245

    6    tmpf30yqlgi                        0x0000561761c62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = [Int]()\n\
    \  fibfib[0] = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for var i = 2; i < n; i++\
    \ {\n    fibfib[i] = fibfib[i - 1] + fibfib[i - 2] + fibfib[i - 3]\n  }\n  return\
    \ fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp4trll3u8.swift:19:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for var i = 2; i < n; i++ {\n  ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib: Int\
    \ = 0\n  for _ in 0..<n {\n    fibfib = fibfib + fibfib\n  }\n  return fibfib\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpg9rz3jvz/tmpg9rz3jvz.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8090723c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b809041ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b809041a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80904197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg9rz3jvz                        0x00005595cda54338 <unavailable> + 4920

    5    libc.so.6                          0x00002b809090f460 __libc_start_main +
    245

    6    tmpg9rz3jvz                        0x00005595cda53fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib: Int\
    \ = 0\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return\
    \ 1\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 832040\n\
    \    }\n    if n == 31 {\n        return 1346269\n    }\n    if n == 32 {\n  \
    \      return 2178309\n    }\n    if n == 33 {\n        return 3524578\n    }\n\
    \    if n == 34 {\n        return 5702887\n    }\n    if n == 35 {\n        return\
    \ 9273529\n    }\n    if n == 36 {\n        return 14961447\n    }\n    if n ==\
    \ 37 {\n        return 24178588\n    }\n    if n == 38 {\n        return 39088169\n\
    \    }\n    if n == 39 {\n        return 51422919\n    }\n    if n == 40 {\n \
    \       return 73400863\n    }\n    if n == 41 {\n        return 94970459\n  \
    \  }\n    if n == 42 {\n        return 137471257\n    }\n    if n == 43 {\n  \
    \      return 189952127\n    }\n    if n == 44 {\n        return 255451481\n \
    \   }\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp6lnk1qk6.swift:15:9: warning: variable 'fibfib' was never used;\
    \ consider replacing with '_' or removing it\n    var fibfib: Int = 0\n      \
    \  ^~~~~~\n        _\n/tmp/tmp6lnk1qk6.swift:152:1: error: missing return in global\
    \ function expected to return 'Int'\n}\n^\n"
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = [Int]()\n\
    \  fibfib[0] = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for i : Int in stride(from:\
    \ 3, through: n, by: 2) {\n    fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n\
    \  }\n  return fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae3872a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae386f97561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae386f97286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae386f9713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae386f96bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae386d967ec <unavailable> + 186348

    6    tmp7qwuy8af                        0x000055e5cd988856 <unavailable> + 6230

    7    tmp7qwuy8af                        0x000055e5cd98846b <unavailable> + 5227

    8    libc.so.6                          0x00002ae38748c460 __libc_start_main +
    245

    9    tmp7qwuy8af                        0x000055e5cd988189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = [Int]()\n\
    \  fibfib[0] = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for var i = 2; i <= n; i++\
    \ {\n    fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  }\n  return fibfib[n]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpsg4mnxjh.swift:19:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for var i = 2; i <= n; i++ {\n  ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib: Int\
    \ = 0\n    for _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpu8bbd83_/tmpu8bbd83_.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0f01e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0efeddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0efedd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0efedc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu8bbd83_                        0x0000562bf369d338 <unavailable> + 4920

    5    libc.so.6                          0x00002ab0f03d2460 __libc_start_main +
    245

    6    tmpu8bbd83_                        0x0000562bf369cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = [Int]()\n\
    \  fibfib[0] = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for i : Int in stride(from:\
    \ 3, to: n, by: 1) {\n    fibfib[i] = fibfib[i - 1] + fibfib[i - 2] + fibfib[i\
    \ - 3]\n  }\n  return fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ba085653c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba08534a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba08534a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba08534a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba085349bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ba0851497ec <unavailable> + 186348

    6    tmpxl71sotj                        0x0000560e54551836 <unavailable> + 6198

    7    tmpxl71sotj                        0x0000560e5455144b <unavailable> + 5195

    8    libc.so.6                          0x00002ba08583f460 __libc_start_main +
    245

    9    tmpxl71sotj                        0x0000560e54551169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n\
    \    for _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp0axx6rt9/tmp0axx6rt9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1bbdc73c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1bbd96ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1bbd96a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1bbd9697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0axx6rt9                        0x000055cdea3e3338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1bbde5f460 __libc_start_main +
    245

    6    tmp0axx6rt9                        0x000055cdea3e2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n\
    \    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n\
    \    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n        return\
    \ 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n      \
    \  return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n == 7 {\n\
    \        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n    if n\
    \ == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n    }\n\
    \    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n        return\
    \ 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n == 14 {\n\
    \        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n    if\
    \ n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return 1597\n\
    \    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n     \
    \   return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n    if n\
    \ == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return 17711\n\
    \    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24 {\n    \
    \    return 46368\n    }\n    if n == 25 {\n        return 75025\n    }\n    if\
    \ n == 26 {\n        return 121393\n    }\n    if n == 27 {\n        return 196418\n\
    \    }\n    if n == 28 {\n        return 317811\n    }\n    if n == 29 {\n   \
    \     return 514229\n    }\n    if n == 30 {\n        return 832040\n    }\n \
    \   if n == 31 {\n        return 1346269\n    }\n    if n == 32 {\n        return\
    \ 2178309\n    }\n    if n == 33 {\n        return 3524578\n    }\n    if n ==\
    \ 34 {\n        return 5702887\n    }\n    if n == 35 {\n        return 9273521\n\
    \    }\n    if n == 36 {\n        return 14961417\n    }\n    if n == 37 {\n \
    \       return 21948453\n    }\n    if n == 38 {\n        return 29622263\n  \
    \  }\n    if n == 39 {\n        return 43044901\n    }\n    if n == 40 {\n   \
    \     return 58820639\n    }\n    if n == 41 {\n        return 74710923\n    }\n\
    \    if n == 42 {\n        return 94975591\n    }\n    if n == 43 {\n        return\
    \ 121957431\n    }\n    if n == 44 {\n        return 152383867\n    }\n    if\
    \ n == 45\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: SyntaxError
  stderr: "/tmp/tmppbq_yxct.swift:151:15: error: expected '{' after 'if' condition\n\
    \    if n == 45\n              ^\n/tmp/tmppbq_yxct.swift:15:9: warning: initialization\
    \ of variable 'fibfib' was never used; consider replacing with assignment to '_'\
    \ or removing it\n    var fibfib = 0\n    ~~~~^~~~~~\n    _\n"
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var result = 1\n\
    \  for _ in 1...n {\n    result *= n\n  }\n  return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp__v424dg/tmp__v424dg.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8b6b3b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8b6b0b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8b6b0b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8b6b0af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__v424dg                        0x00005632b639b338 <unavailable> + 4920

    5    libc.so.6                          0x00002b8b6b5a5460 __libc_start_main +
    245

    6    tmp__v424dg                        0x00005632b639afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n\
    \    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for var i = 2; i\
    \ <= n; i++ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n \
    \   }\n    return fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp1ks47ilw.swift:19:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 2; i <= n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  if n < 0 {\n   \
    \ fatalError(\"fibfib: negative input\")\n  }\n  var fibfib = [Int]()\n  fibfib[0]\
    \ = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for i := 3; i <= n; i++ {\n    fibfib[i]\
    \ = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  }\n  return fibfib[n]\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp_d46wahp.swift:22:10: error: expected type\n  for i := 3; i <=\
    \ n; i++ {\n         ^\n          <#type#>\n/tmp/tmp_d46wahp.swift:22:10: error:\
    \ expected 'in' after for-each pattern\n  for i := 3; i <= n; i++ {\n        \
    \ ^\n/tmp/tmp_d46wahp.swift:22:10: error: expected Sequence expression for for-each\
    \ loop\n  for i := 3; i <= n; i++ {\n         ^\n"
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib: Int\
    \ = 0\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return\
    \ 1\n    }\n    if n == 2 {\n        return 1\n    }\n    if n > 2 {\n       \
    \ fibfib += fibfib(n-1) + fibfib(n-2)\n    }\n    return fibfib\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp46mpuvf2.swift:26:19: error: cannot call value of non-function\
    \ type 'Int'\n        fibfib += fibfib(n-1) + fibfib(n-2)\n                  ^\n\
    /tmp/tmp46mpuvf2.swift:26:33: error: cannot call value of non-function type 'Int'\n\
    \        fibfib += fibfib(n-1) + fibfib(n-2)\n                               \
    \ ^\n"
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = [Int]()\n\
    \  fibfib[0] = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for index in 3 ..< n {\n\
    \    fibfib[index] = fibfib[index-1] + fibfib[index-2] + fibfib[index-3]\n  }\n\
    \  return fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae83524dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae834f44561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae834f44286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae834f4413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae834f43bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae834d437ec <unavailable> + 186348

    6    tmpql7hdxxa                        0x000055c7545867b6 <unavailable> + 6070

    7    tmpql7hdxxa                        0x000055c7545863cb <unavailable> + 5067

    8    libc.so.6                          0x00002ae835439460 __libc_start_main +
    245

    9    tmpql7hdxxa                        0x000055c7545860e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n\
    \    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for var i = 2; i\
    \ < n; i++ {\n        fibfib[i] = fibfib[i-2] + fibfib[i-1] + fibfib[i-3]\n  \
    \  }\n    return fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpsoor_l2i.swift:19:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 2; i < n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = [Int]()\n\
    \  fibfib[0] = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for i in  3...n {\n    fibfib[i]\
    \ = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  }\n  return fibfib[n]\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b9c66f82c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9c66c79561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b9c66c79286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b9c66c7913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b9c66c78bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b9c66a787ec <unavailable> + 186348

    6    tmpsk1jxyma                        0x000055f92e3687b6 <unavailable> + 6070

    7    tmpsk1jxyma                        0x000055f92e3683cb <unavailable> + 5067

    8    libc.so.6                          0x00002b9c6716e460 __libc_start_main +
    245

    9    tmpsk1jxyma                        0x000055f92e3680e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = 0\n\
    \  for _ in 0..<n {\n    fibfib = fibfib + fibfib\n  }\n  return fibfib\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpvie7_wg3/tmpvie7_wg3.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d20b3bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d20832b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d20832988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d208317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvie7_wg3                        0x000055f257a63338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1d20d27460 __libc_start_main +
    245

    6    tmpvie7_wg3                        0x000055f257a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = [Int]()\n\
    \  fibfib[0] = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for var i = 2; i <= n; i++\
    \ {\n    fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  }\n  return fibfib[n]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpsg4mnxjh.swift:19:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for var i = 2; i <= n; i++ {\n  ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n\
    \    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for var i = 2; i\
    \ < n; i++ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  \
    \  }\n    return fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmprhchyp1d.swift:19:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 2; i < n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  if n == 0 || n ==\
    \ 1 {\n    return 0\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpy3v0e1e1.swift:18:17: error: missing argument label 'n:' in call\n\
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                ^\n       \
    \         n: \n/tmp/tmpy3v0e1e1.swift:18:31: error: missing argument label 'n:'\
    \ in call\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                \
    \              ^\n                              n: \n/tmp/tmpy3v0e1e1.swift:18:45:\
    \ error: missing argument label 'n:' in call\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                            ^\n             \
    \                               n: \n"
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = [Int]()\n\
    \  fibfib[0] = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for var i = 2; i < n; i++\
    \ {\n    fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  }\n  return fibfib[n]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpm3mq_ym8.swift:19:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for var i = 2; i < n; i++ {\n  ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n\
    \    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for var i = 2; i\
    \ < n; i++ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  \
    \  }\n    return fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmprhchyp1d.swift:19:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 2; i < n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = 0\n\
    \  for _ in 0..<n {\n    fibfib = fibfib + fibfib\n  }\n  return fibfib\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpvie7_wg3/tmpvie7_wg3.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d20b3bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d20832b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d20832988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d208317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvie7_wg3                        0x000055f257a63338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1d20d27460 __libc_start_main +
    245

    6    tmpvie7_wg3                        0x000055f257a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = [Int]()\n\
    \  fibfib[0] = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for var i = 2; i <= n; i++\
    \ {\n    fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  }\n  return fibfib[n]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpsg4mnxjh.swift:19:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for var i = 2; i <= n; i++ {\n  ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n < 0 {\n \
    \       return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp3ifnwcki.swift:24:19: error: missing argument label 'n:' in call\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                  ^\n   \
    \               n: \n/tmp/tmp3ifnwcki.swift:24:33: error: missing argument label\
    \ 'n:' in call\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n         \
    \                       ^\n                                n: \n/tmp/tmp3ifnwcki.swift:24:47:\
    \ error: missing argument label 'n:' in call\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                              ^\n           \
    \                                   n: \n"
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  if n == 0 || n ==\
    \ 1 {\n    return 0\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpy3v0e1e1.swift:18:17: error: missing argument label 'n:' in call\n\
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                ^\n       \
    \         n: \n/tmp/tmpy3v0e1e1.swift:18:31: error: missing argument label 'n:'\
    \ in call\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                \
    \              ^\n                              n: \n/tmp/tmpy3v0e1e1.swift:18:45:\
    \ error: missing argument label 'n:' in call\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                            ^\n             \
    \                               n: \n"
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n\
    \    for _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpf30yqlgi/tmpf30yqlgi.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a6a60cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a6a303b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a6a303988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a6a3027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf30yqlgi                        0x0000561761c63338 <unavailable> + 4920

    5    libc.so.6                          0x00002b8a6a7f8460 __libc_start_main +
    245

    6    tmpf30yqlgi                        0x0000561761c62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  if n < 0 {\n   \
    \ return 0\n  }\n  if n == 0 {\n    return 0\n  }\n  if n == 1 {\n    return 0\n\
    \  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp6z8sbx13.swift:24:17: error: missing argument label 'n:' in call\n\
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                ^\n       \
    \         n: \n/tmp/tmp6z8sbx13.swift:24:31: error: missing argument label 'n:'\
    \ in call\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                \
    \              ^\n                              n: \n/tmp/tmp6z8sbx13.swift:24:45:\
    \ error: missing argument label 'n:' in call\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                            ^\n             \
    \                               n: \n"
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n\
    \    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for var i = 2; i\
    \ < n; i++ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  \
    \  }\n    return fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmprhchyp1d.swift:19:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 2; i < n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n < 0 {\n \
    \       return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp3ifnwcki.swift:24:19: error: missing argument label 'n:' in call\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                  ^\n   \
    \               n: \n/tmp/tmp3ifnwcki.swift:24:33: error: missing argument label\
    \ 'n:' in call\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n         \
    \                       ^\n                                n: \n/tmp/tmp3ifnwcki.swift:24:47:\
    \ error: missing argument label 'n:' in call\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                              ^\n           \
    \                                   n: \n"
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = 0\n\
    \  for _ in 0..<n {\n    fibfib += fibfib\n  }\n  return fibfib\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp7_jfoxma/tmp7_jfoxma.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b069ac04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b069a8fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b069a8fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b069a8fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7_jfoxma                        0x00005603a0e12338 <unavailable> + 4920

    5    libc.so.6                          0x00002b069adf0460 __libc_start_main +
    245

    6    tmp7_jfoxma                        0x00005603a0e11fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib: Int\
    \ = 0\n    for _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpu8bbd83_/tmpu8bbd83_.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0f01e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0efeddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0efedd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0efedc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu8bbd83_                        0x0000562bf369d338 <unavailable> + 4920

    5    libc.so.6                          0x00002ab0f03d2460 __libc_start_main +
    245

    6    tmpu8bbd83_                        0x0000562bf369cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n\
    \    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for var i = 2; i\
    \ <= n; i++ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n \
    \   }\n    return fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp1ks47ilw.swift:19:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 2; i <= n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  // TODO: Write code\
    \ here\n  return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'tmpivc5e5ex/tmpivc5e5ex.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e24c51c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e24948b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e24948988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e249477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpivc5e5ex                        0x0000560eba68c1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002b8e24e3d460 __libc_start_main +
    245

    6    tmpivc5e5ex                        0x0000560eba68be69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  // TODO: Write code\
    \ here\n  return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'tmpivc5e5ex/tmpivc5e5ex.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e24c51c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e24948b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e24948988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e249477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpivc5e5ex                        0x0000560eba68c1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002b8e24e3d460 __libc_start_main +
    245

    6    tmpivc5e5ex                        0x0000560eba68be69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = 0\n\
    \  for _ in 0..<n {\n    fibfib = fibfib + fibfib + 1\n  }\n  return fibfib\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpnqn9pa3d/tmpnqn9pa3d.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b29be3b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b29be0abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b29be0ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29be0aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnqn9pa3d                        0x0000559b4f150338 <unavailable> + 4920

    5    libc.so.6                          0x00002b29be5a0460 __libc_start_main +
    245

    6    tmpnqn9pa3d                        0x0000559b4f14ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 || n\
    \ == 1 {\n        return 0\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpqsaw1ida.swift:18:19: error: missing argument label 'n:' in call\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                  ^\n   \
    \               n: \n/tmp/tmpqsaw1ida.swift:18:33: error: missing argument label\
    \ 'n:' in call\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n         \
    \                       ^\n                                n: \n/tmp/tmpqsaw1ida.swift:18:47:\
    \ error: missing argument label 'n:' in call\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                              ^\n           \
    \                                   n: \n"
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n\
    \    for _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpf30yqlgi/tmpf30yqlgi.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a6a60cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a6a303b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a6a303988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a6a3027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf30yqlgi                        0x0000561761c63338 <unavailable> + 4920

    5    libc.so.6                          0x00002b8a6a7f8460 __libc_start_main +
    245

    6    tmpf30yqlgi                        0x0000561761c62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  // TODO: Write code\
    \ here\n  return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'tmpivc5e5ex/tmpivc5e5ex.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e24c51c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e24948b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e24948988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e249477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpivc5e5ex                        0x0000560eba68c1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002b8e24e3d460 __libc_start_main +
    245

    6    tmpivc5e5ex                        0x0000560eba68be69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = [Int]()\n\
    \  fibfib[0] = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for i := 3; i <= n; i++\
    \ {\n    fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  }\n  return fibfib[n]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpcd9ya9y9.swift:19:10: error: expected type\n  for i := 3; i <=\
    \ n; i++ {\n         ^\n          <#type#>\n/tmp/tmpcd9ya9y9.swift:19:10: error:\
    \ expected 'in' after for-each pattern\n  for i := 3; i <= n; i++ {\n        \
    \ ^\n/tmp/tmpcd9ya9y9.swift:19:10: error: expected Sequence expression for for-each\
    \ loop\n  for i := 3; i <= n; i++ {\n         ^\n"
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib: Int\
    \ = 0\n  for _ in 0..<n {\n    fibfib = fibfib + fibfib\n  }\n  return fibfib\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpg9rz3jvz/tmpg9rz3jvz.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8090723c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b809041ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b809041a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80904197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg9rz3jvz                        0x00005595cda54338 <unavailable> + 4920

    5    libc.so.6                          0x00002b809090f460 __libc_start_main +
    245

    6    tmpg9rz3jvz                        0x00005595cda53fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n < 2 {\n \
    \       return 0\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp7k6fu014.swift:18:19: error: missing argument label 'n:' in call\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                  ^\n   \
    \               n: \n/tmp/tmp7k6fu014.swift:18:33: error: missing argument label\
    \ 'n:' in call\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n         \
    \                       ^\n                                n: \n/tmp/tmp7k6fu014.swift:18:47:\
    \ error: missing argument label 'n:' in call\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                              ^\n           \
    \                                   n: \n"
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n\
    \    for _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpf30yqlgi/tmpf30yqlgi.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a6a60cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a6a303b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a6a303988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a6a3027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf30yqlgi                        0x0000561761c63338 <unavailable> + 4920

    5    libc.so.6                          0x00002b8a6a7f8460 __libc_start_main +
    245

    6    tmpf30yqlgi                        0x0000561761c62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = [Int]()\n\
    \  fibfib[0] = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for i in  3...n {\n    fibfib[i]\
    \ = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  }\n  return fibfib[n]\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b9c66f82c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9c66c79561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b9c66c79286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b9c66c7913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b9c66c78bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b9c66a787ec <unavailable> + 186348

    6    tmpsk1jxyma                        0x000055f92e3687b6 <unavailable> + 6070

    7    tmpsk1jxyma                        0x000055f92e3683cb <unavailable> + 5067

    8    libc.so.6                          0x00002b9c6716e460 __libc_start_main +
    245

    9    tmpsk1jxyma                        0x000055f92e3680e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n\
    \    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for var i = 2; i\
    \ <= n; i++ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n \
    \   }\n    return fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp1ks47ilw.swift:19:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 2; i <= n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = [Int]()\n\
    \  fibfib[0] = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for var i = 2; i < n; i++\
    \ {\n    fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  }\n  return fibfib[n]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpm3mq_ym8.swift:19:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for var i = 2; i < n; i++ {\n  ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = [Int]()\n\
    \  fibfib[0] = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for var i = 2; i <= n; i++\
    \ {\n    fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  }\n  return fibfib[n]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpsg4mnxjh.swift:19:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for var i = 2; i <= n; i++ {\n  ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib: Int\
    \ = 0\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return\
    \ 1\n    }\n    if n == 2 {\n        return 1\n    }\n    if n > 2 {\n       \
    \ fibfib += fibfib(n-1) + fibfib(n-2)\n    }\n    return fibfib\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp46mpuvf2.swift:26:19: error: cannot call value of non-function\
    \ type 'Int'\n        fibfib += fibfib(n-1) + fibfib(n-2)\n                  ^\n\
    /tmp/tmp46mpuvf2.swift:26:33: error: cannot call value of non-function type 'Int'\n\
    \        fibfib += fibfib(n-1) + fibfib(n-2)\n                               \
    \ ^\n"
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n\tif n == 0 || n ==\
    \ 1 {\n\t\treturn 0\n\t}\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpqpn08dh4.swift:18:16: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpqpn08dh4.swift:18:30: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpqpn08dh4.swift:18:44: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib: Int\
    \ = 0\n    for _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return\
    \ fibfib\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'tmp9fnl7cyw/tmp9fnl7cyw.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada3865fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada38356b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada38356988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada383557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9fnl7cyw                        0x00005638509d1338 <unavailable> + 4920

    5    libc.so.6                          0x00002ada3884b460 __libc_start_main +
    245

    6    tmp9fnl7cyw                        0x00005638509d0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = 0\n\
    \  for _ in 0..<n {\n    fibfib = fibfib + fibfib\n  }\n  return fibfib\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpvie7_wg3/tmpvie7_wg3.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d20b3bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d20832b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d20832988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d208317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvie7_wg3                        0x000055f257a63338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1d20d27460 __libc_start_main +
    245

    6    tmpvie7_wg3                        0x000055f257a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 || n\
    \ == 1 {\n        return 0\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpqsaw1ida.swift:18:19: error: missing argument label 'n:' in call\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                  ^\n   \
    \               n: \n/tmp/tmpqsaw1ida.swift:18:33: error: missing argument label\
    \ 'n:' in call\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n         \
    \                       ^\n                                n: \n/tmp/tmpqsaw1ida.swift:18:47:\
    \ error: missing argument label 'n:' in call\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                              ^\n           \
    \                                   n: \n"
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = 0\n\
    \  for _ in 0..<n {\n    fibfib = fibfib + fibfib\n  }\n  return fibfib\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpvie7_wg3/tmpvie7_wg3.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d20b3bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d20832b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d20832988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d208317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvie7_wg3                        0x000055f257a63338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1d20d27460 __libc_start_main +
    245

    6    tmpvie7_wg3                        0x000055f257a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  // TODO: Write code\
    \ here\n  return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'tmpivc5e5ex/tmpivc5e5ex.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e24c51c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e24948b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e24948988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e249477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpivc5e5ex                        0x0000560eba68c1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002b8e24e3d460 __libc_start_main +
    245

    6    tmpivc5e5ex                        0x0000560eba68be69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  if n < 0 {\n   \
    \ return 0\n  }\n  if n == 0 || n == 1 {\n    return 0\n  }\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmps3s9hp6p.swift:21:17: error: missing argument label 'n:' in call\n\
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                ^\n       \
    \         n: \n/tmp/tmps3s9hp6p.swift:21:31: error: missing argument label 'n:'\
    \ in call\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                \
    \              ^\n                              n: \n/tmp/tmps3s9hp6p.swift:21:45:\
    \ error: missing argument label 'n:' in call\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                            ^\n             \
    \                               n: \n"
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = [Int]()\n\
    \  fibfib[0] = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for index in 3 ..< n {\n\
    \    fibfib[index] = fibfib[index - 1] + fibfib[index - 2] + fibfib[index - 3]\n\
    \  }\n  return fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b531e034c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b531dd2b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b531dd2b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b531dd2b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b531dd2abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b531db2a7ec <unavailable> + 186348

    6    tmpuzwf1oro                        0x00005591d901c7b6 <unavailable> + 6070

    7    tmpuzwf1oro                        0x00005591d901c3cb <unavailable> + 5067

    8    libc.so.6                          0x00002b531e220460 __libc_start_main +
    245

    9    tmpuzwf1oro                        0x00005591d901c0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n\
    \    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for var i = 2; i\
    \ < n; i++ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  \
    \  }\n    return fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmprhchyp1d.swift:19:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 2; i < n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = [Int]()\n\
    \  fibfib[0] = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for var i = 2; i <= n; i++\
    \ {\n    fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  }\n  return fibfib[n]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpsg4mnxjh.swift:19:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for var i = 2; i <= n; i++ {\n  ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n\treturn fibfibHelper(n,\
    \ n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp5t8wbp54.swift:15:9: error: cannot find 'fibfibHelper' in scope\n\
    \        return fibfibHelper(n, n)\n               ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = [Int]()\n\
    \  fibfib[0] = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for var i = 2; i <= n; i++\
    \ {\n    fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  }\n  return fibfib[n]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpsg4mnxjh.swift:19:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for var i = 2; i <= n; i++ {\n  ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib: Int\
    \ = 0\n    for _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return\
    \ fibfib\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'tmp9fnl7cyw/tmp9fnl7cyw.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada3865fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada38356b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada38356988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada383557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9fnl7cyw                        0x00005638509d1338 <unavailable> + 4920

    5    libc.so.6                          0x00002ada3884b460 __libc_start_main +
    245

    6    tmp9fnl7cyw                        0x00005638509d0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = 0\n\
    \  for _ in 0..<n {\n    fibfib = fibfib + fibfib\n  }\n  return fibfib\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpvie7_wg3/tmpvie7_wg3.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d20b3bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d20832b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d20832988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d208317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvie7_wg3                        0x000055f257a63338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1d20d27460 __libc_start_main +
    245

    6    tmpvie7_wg3                        0x000055f257a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = 0\n\
    \  for _ in 0..<n {\n    fibfib = fibfib + fibfib + 1\n  }\n  return fibfib\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpnqn9pa3d/tmpnqn9pa3d.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b29be3b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b29be0abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b29be0ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29be0aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnqn9pa3d                        0x0000559b4f150338 <unavailable> + 4920

    5    libc.so.6                          0x00002b29be5a0460 __libc_start_main +
    245

    6    tmpnqn9pa3d                        0x0000559b4f14ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = [Int]()\n\
    \  fibfib[0] = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for var i = 2; i <= n; i++\
    \ {\n    fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  }\n  return fibfib[n]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpsg4mnxjh.swift:19:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for var i = 2; i <= n; i++ {\n  ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = [Int]()\n\
    \  fibfib[0] = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for var i = 2; i <= n; i++\
    \ {\n    fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  }\n  return fibfib[n]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpsg4mnxjh.swift:19:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for var i = 2; i <= n; i++ {\n  ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n\
    \    for _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp0axx6rt9/tmp0axx6rt9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1bbdc73c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1bbd96ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1bbd96a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1bbd9697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0axx6rt9                        0x000055cdea3e3338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1bbde5f460 __libc_start_main +
    245

    6    tmp0axx6rt9                        0x000055cdea3e2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n\
    \    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for var i = 2; i\
    \ <= n; i++ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n \
    \   }\n    return fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp1ks47ilw.swift:19:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 2; i <= n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n\tif n < 0 {\n\t\t\
    panic(\"fibfib: negative number\")\n\t}\n\tif n == 0 || n == 1 {\n\t\treturn 0\n\
    \t}\n\tif n == 2 {\n\t\treturn 1\n\t}\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp5_xw6kt4.swift:16:3: error: cannot find 'panic' in scope\n    \
    \            panic(\"fibfib: negative number\")\n                ^~~~~\n/tmp/tmp5_xw6kt4.swift:24:16:\
    \ error: missing argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                      ^\n                      n: \n/tmp/tmp5_xw6kt4.swift:24:30:\
    \ error: missing argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                    ^\n                     \
    \               n: \n/tmp/tmp5_xw6kt4.swift:24:44: error: missing argument label\
    \ 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n     \
    \                                             ^\n                            \
    \                      n: \n"
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = [Int]()\n\
    \  fibfib[0] = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for var i = 2; i < n; i++\
    \ {\n    fibfib[i] = fibfib[i-2] + fibfib[i-1]\n  }\n  return fibfib[n]\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp1iup0435.swift:19:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for var i = 2; i < n; i++ {\n  ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n\
    \    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for var i = 2; i\
    \ <= n; i++ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n \
    \   }\n    return fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp1ks47ilw.swift:19:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 2; i <= n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n\
    \    for _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpf30yqlgi/tmpf30yqlgi.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a6a60cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a6a303b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a6a303988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a6a3027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf30yqlgi                        0x0000561761c63338 <unavailable> + 4920

    5    libc.so.6                          0x00002b8a6a7f8460 __libc_start_main +
    245

    6    tmpf30yqlgi                        0x0000561761c62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n\
    \    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for var i = 3; i\
    \ <= n; i++ {\n        fibfib[i] = fibfib[i - 1] + fibfib[i - 2] + fibfib[i -\
    \ 3]\n    }\n    return fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp3o8bbgu5.swift:19:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 3; i <= n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n\treturn fibfibHelper(n,\
    \ 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmph0u635cs.swift:15:9: error: cannot find 'fibfibHelper' in scope\n\
    \        return fibfibHelper(n, 0)\n               ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  // TODO: Write code\
    \ here\n  return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'tmpivc5e5ex/tmpivc5e5ex.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e24c51c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e24948b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e24948988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e249477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpivc5e5ex                        0x0000560eba68c1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002b8e24e3d460 __libc_start_main +
    245

    6    tmpivc5e5ex                        0x0000560eba68be69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = [Int]()\n\
    \  fibfib[0] = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for i : Int in stride(from:\
    \ 3, through: n, by: 2) {\n    fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n\
    \  }\n  return fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae3872a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae386f97561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae386f97286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae386f9713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae386f96bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae386d967ec <unavailable> + 186348

    6    tmp7qwuy8af                        0x000055e5cd988856 <unavailable> + 6230

    7    tmp7qwuy8af                        0x000055e5cd98846b <unavailable> + 5227

    8    libc.so.6                          0x00002ae38748c460 __libc_start_main +
    245

    9    tmp7qwuy8af                        0x000055e5cd988189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = [Int]()\n\
    \  fibfib[0] = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for i : Int in 2..<n {\n\
    \    fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  }\n  return fibfib[n]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b5050ccdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b50509c4561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b50509c4286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b50509c413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b50509c3bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b50507c37ec <unavailable> + 186348

    6    tmp4d4x92jo                        0x0000563ba50fe7b6 <unavailable> + 6070

    7    tmp4d4x92jo                        0x0000563ba50fe3cb <unavailable> + 5067

    8    libc.so.6                          0x00002b5050eb9460 __libc_start_main +
    245

    9    tmp4d4x92jo                        0x0000563ba50fe0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n\
    \    for _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpf30yqlgi/tmpf30yqlgi.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a6a60cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a6a303b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a6a303988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a6a3027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf30yqlgi                        0x0000561761c63338 <unavailable> + 4920

    5    libc.so.6                          0x00002b8a6a7f8460 __libc_start_main +
    245

    6    tmpf30yqlgi                        0x0000561761c62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n\
    \    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for index in 3 ..<\
    \ n {\n        fibfib[index] = fibfib[index-1] + fibfib[index-2] + fibfib[index-3]\n\
    \    }\n    return fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b914de0fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b914db06561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b914db06286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b914db0613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b914db05bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b914d9057ec <unavailable> + 186348

    6    tmpmp9tcla2                        0x000055e0932b67b6 <unavailable> + 6070

    7    tmpmp9tcla2                        0x000055e0932b63cb <unavailable> + 5067

    8    libc.so.6                          0x00002b914dffb460 __libc_start_main +
    245

    9    tmpmp9tcla2                        0x000055e0932b60e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib: Int\
    \ = 0\n    for _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return\
    \ fibfib\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'tmp9fnl7cyw/tmp9fnl7cyw.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada3865fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada38356b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada38356988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada383557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9fnl7cyw                        0x00005638509d1338 <unavailable> + 4920

    5    libc.so.6                          0x00002ada3884b460 __libc_start_main +
    245

    6    tmp9fnl7cyw                        0x00005638509d0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib: Int\
    \ = 0\n  var fibfib1: Int = 0\n  var fibfib2: Int = 0\n  var fibfib3: Int = 0\n\
    \  for var i = 0; i < n; i++ {\n    fibfib1 = fibfib2\n    fibfib2 = fibfib3\n\
    \    fibfib3 = fibfibfib1 + fibfib2 + fibfib3\n    fibfib = fibfibfib3\n  }\n\
    \  return fibfib\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpbwn672ea.swift:19:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for var i = 0; i < n; i++ {\n  ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib: Int\
    \ = 0\n    for _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return\
    \ fibfib\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'tmp9fnl7cyw/tmp9fnl7cyw.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada3865fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada38356b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada38356988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada383557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9fnl7cyw                        0x00005638509d1338 <unavailable> + 4920

    5    libc.so.6                          0x00002ada3884b460 __libc_start_main +
    245

    6    tmp9fnl7cyw                        0x00005638509d0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = [Int]()\n\
    \  fibfib[0] = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for i : Int in stride(from:\
    \ 3, through: n, by: -1) {\n    fibfib[i] = fibfib[i-2] + fibfib[i-1] + fibfib[i-3]\n\
    \  }\n  return fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ef1648c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ef133f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3ef133f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3ef133f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3ef133ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b3ef113e7ec <unavailable> + 186348

    6    tmppll2fhax                        0x000055b1c9cc3856 <unavailable> + 6230

    7    tmppll2fhax                        0x000055b1c9cc346b <unavailable> + 5227

    8    libc.so.6                          0x00002b3ef1834460 __libc_start_main +
    245

    9    tmppll2fhax                        0x000055b1c9cc3189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = [Int]()\n\
    \  fibfib[0] = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for i : Int in 3...n {\n\
    \    fibfib[i] = fibfib[i - 1] + fibfib[i - 2] + fibfib[i - 3]\n  }\n  return\
    \ fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a31cdbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a319d2561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7a319d2286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7a319d213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7a319d1bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b7a317d17ec <unavailable> + 186348

    6    tmpxxo6lcyx                        0x0000556b3282d7b6 <unavailable> + 6070

    7    tmpxxo6lcyx                        0x0000556b3282d3cb <unavailable> + 5067

    8    libc.so.6                          0x00002b7a31ec7460 __libc_start_main +
    245

    9    tmpxxo6lcyx                        0x0000556b3282d0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n\treturn fibfibHelper(n,\
    \ n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp5t8wbp54.swift:15:9: error: cannot find 'fibfibHelper' in scope\n\
    \        return fibfibHelper(n, n)\n               ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n\treturn fibfibHelper(n,\
    \ 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmph0u635cs.swift:15:9: error: cannot find 'fibfibHelper' in scope\n\
    \        return fibfibHelper(n, 0)\n               ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib: Int\
    \ = 0\n  for _ in 0..<n {\n    fibfib = fibfib + fibfib + 1\n  }\n  return fibfib\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpmwspy751/tmpmwspy751.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae33e800c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae33e4f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae33e4f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae33e4f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmwspy751                        0x000055ecd0599338 <unavailable> + 4920

    5    libc.so.6                          0x00002ae33e9ec460 __libc_start_main +
    245

    6    tmpmwspy751                        0x000055ecd0598fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n < 0 {\n \
    \       return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp3ifnwcki.swift:24:19: error: missing argument label 'n:' in call\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                  ^\n   \
    \               n: \n/tmp/tmp3ifnwcki.swift:24:33: error: missing argument label\
    \ 'n:' in call\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n         \
    \                       ^\n                                n: \n/tmp/tmp3ifnwcki.swift:24:47:\
    \ error: missing argument label 'n:' in call\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                              ^\n           \
    \                                   n: \n"
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n\
    \    for _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp0axx6rt9/tmp0axx6rt9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1bbdc73c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1bbd96ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1bbd96a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1bbd9697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0axx6rt9                        0x000055cdea3e3338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1bbde5f460 __libc_start_main +
    245

    6    tmp0axx6rt9                        0x000055cdea3e2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  if n < 0 {\n   \
    \ return 0\n  }\n  if n == 0 {\n    return 0\n  }\n  if n == 1 {\n    return 0\n\
    \  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp6z8sbx13.swift:24:17: error: missing argument label 'n:' in call\n\
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                ^\n       \
    \         n: \n/tmp/tmp6z8sbx13.swift:24:31: error: missing argument label 'n:'\
    \ in call\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                \
    \              ^\n                              n: \n/tmp/tmp6z8sbx13.swift:24:45:\
    \ error: missing argument label 'n:' in call\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                            ^\n             \
    \                               n: \n"
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n\
    \    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for var i = 2; i\
    \ < n; i++ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  \
    \  }\n    return fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmprhchyp1d.swift:19:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 2; i < n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n <= 1 {\n\
    \        return 0\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwd_l9rc3.swift:18:19: error: missing argument label 'n:' in call\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                  ^\n   \
    \               n: \n/tmp/tmpwd_l9rc3.swift:18:33: error: missing argument label\
    \ 'n:' in call\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n         \
    \                       ^\n                                n: \n/tmp/tmpwd_l9rc3.swift:18:47:\
    \ error: missing argument label 'n:' in call\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                              ^\n           \
    \                                   n: \n"
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = [Int]()\n\
    \  fibfib[0] = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for i : Int in 0..<n {\n\
    \    fibfib[i] = fibfib[i-2] + fibfib[i-1] + fibfib[i-3]\n  }\n  return fibfib[n]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab82a0bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab829db2561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab829db2286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab829db213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab829db1bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab829bb37ec <unavailable> + 186348

    6    tmpv8a09858                        0x00005583d7ecf7b6 <unavailable> + 6070

    7    tmpv8a09858                        0x00005583d7ecf3cb <unavailable> + 5067

    8    libc.so.6                          0x00002ab82a2a7460 __libc_start_main +
    245

    9    tmpv8a09858                        0x00005583d7ecf0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib: Int\
    \ = 0\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return\
    \ 1\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765167\n\
    \    }\n    if n == 31 {\n        return 1179648\n    }\n    if n == 32 {\n  \
    \      return 1597697\n    }\n    if n == 33 {\n        return 2584471\n    }\n\
    \    if n == 34 {\n        return 4181159\n    }\n    if n == 35 {\n        return\
    \ 6765819\n    }\n    if n == 36 {\n        return 10946577\n    }\n    if n ==\
    \ 37 {\n        return 17711457\n    }\n    if n == 38 {\n        return 28657567\n\
    \    }\n    if n == 39 {\n        return 46368719\n    }\n    if n == 40 {\n \
    \       return 7502519\n    }\n    if n == 41 {\n        return 121393719\n  \
    \  }\n    if n == 42 {\n        return 196418577\n    }\n    if n == 43 {\n  \
    \      return 317811457\n    }\n    if n == 44 {\n        return 51422919\n  \
    \  }\n    if n == 45 {\n        return \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\n\
    assert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12)\
    \ == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpyml3xca1.swift:174:29: error: expected '}' at end of brace statement\n\
    assert(fibfib(n: 14) == 927)\n                            ^\n/tmp/tmpyml3xca1.swift:14:28:\
    \ note: to match this opening '{'\nfunc fibfib(n: Int) -> Int {\n            \
    \               ^\n/tmp/tmpyml3xca1.swift:152:9: error: non-void function should\
    \ return a value\n        return \n        ^\n/tmp/tmpyml3xca1.swift:156:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpyml3xca1.swift:168:8:\
    \ error: cannot call value of non-function type 'Int'\nassert(fibfib(n: 2) ==\
    \ 1)\n       ^\n/tmp/tmpyml3xca1.swift:169:8: error: cannot call value of non-function\
    \ type 'Int'\nassert(fibfib(n: 1) == 0)\n       ^\n/tmp/tmpyml3xca1.swift:170:8:\
    \ error: cannot call value of non-function type 'Int'\nassert(fibfib(n: 5) ==\
    \ 4)\n       ^\n/tmp/tmpyml3xca1.swift:171:8: error: cannot call value of non-function\
    \ type 'Int'\nassert(fibfib(n: 8) == 24)\n       ^\n/tmp/tmpyml3xca1.swift:172:8:\
    \ error: cannot call value of non-function type 'Int'\nassert(fibfib(n: 10) ==\
    \ 81)\n       ^\n/tmp/tmpyml3xca1.swift:173:8: error: cannot call value of non-function\
    \ type 'Int'\nassert(fibfib(n: 12) == 274)\n       ^\n/tmp/tmpyml3xca1.swift:174:8:\
    \ error: cannot call value of non-function type 'Int'\nassert(fibfib(n: 14) ==\
    \ 927)\n       ^\n"
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n\
    \    for _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpf30yqlgi/tmpf30yqlgi.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a6a60cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a6a303b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a6a303988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a6a3027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf30yqlgi                        0x0000561761c63338 <unavailable> + 4920

    5    libc.so.6                          0x00002b8a6a7f8460 __libc_start_main +
    245

    6    tmpf30yqlgi                        0x0000561761c62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 || n\
    \ == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpp9emx9ie.swift:21:19: error: missing argument label 'n:' in call\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                  ^\n   \
    \               n: \n/tmp/tmpp9emx9ie.swift:21:33: error: missing argument label\
    \ 'n:' in call\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n         \
    \                       ^\n                                n: \n/tmp/tmpp9emx9ie.swift:21:47:\
    \ error: missing argument label 'n:' in call\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                              ^\n           \
    \                                   n: \n"
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = 0\n\
    \  for _ in 0..<n {\n    fibfib += fibfib\n  }\n  return fibfib\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp7_jfoxma/tmp7_jfoxma.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b069ac04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b069a8fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b069a8fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b069a8fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7_jfoxma                        0x00005603a0e12338 <unavailable> + 4920

    5    libc.so.6                          0x00002b069adf0460 __libc_start_main +
    245

    6    tmp7_jfoxma                        0x00005603a0e11fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = [Int]()\n\
    \  fibfib[0] = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for var i = 2; i < n; i++\
    \ {\n    fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  }\n  return fibfib[n]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpm3mq_ym8.swift:19:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for var i = 2; i < n; i++ {\n  ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  // TODO: Write code\
    \ here\n  return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'tmpivc5e5ex/tmpivc5e5ex.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e24c51c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e24948b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e24948988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e249477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpivc5e5ex                        0x0000560eba68c1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002b8e24e3d460 __libc_start_main +
    245

    6    tmpivc5e5ex                        0x0000560eba68be69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = 0\n\
    \  for _ in 0..<n {\n    fibfib = fibfib + fibfib\n  }\n  return fibfib\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpvie7_wg3/tmpvie7_wg3.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d20b3bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d20832b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d20832988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d208317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvie7_wg3                        0x000055f257a63338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1d20d27460 __libc_start_main +
    245

    6    tmpvie7_wg3                        0x000055f257a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n\
    \    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for var i = 2; i\
    \ <= n; i++ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n \
    \   }\n    return fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp1ks47ilw.swift:19:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 2; i <= n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = 0\n\
    \  for _ in 0..<n {\n    fibfib = fibfib + fibfib\n  }\n  return fibfib\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpvie7_wg3/tmpvie7_wg3.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d20b3bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d20832b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d20832988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d208317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvie7_wg3                        0x000055f257a63338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1d20d27460 __libc_start_main +
    245

    6    tmpvie7_wg3                        0x000055f257a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n\tif n < 0 {\n\t\t\
    return 0\n\t}\n\tif n == 0 {\n\t\treturn 0\n\t}\n\tif n == 1 {\n\t\treturn 0\n\
    \t}\n\tif n == 2 {\n\t\treturn 1\n\t}\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp23viqnd8.swift:27:16: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmp23viqnd8.swift:27:30: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmp23viqnd8.swift:27:44: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib: Int\
    \ = 0\n  for _ in 0..<n {\n    fibfib = fibfib + fibfib\n  }\n  return fibfib\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpg9rz3jvz/tmpg9rz3jvz.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8090723c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b809041ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b809041a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80904197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg9rz3jvz                        0x00005595cda54338 <unavailable> + 4920

    5    libc.so.6                          0x00002b809090f460 __libc_start_main +
    245

    6    tmpg9rz3jvz                        0x00005595cda53fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n\
    \    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for var i = 3; i\
    \ <= n; i++ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n \
    \   }\n    return fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp0x7bue5p.swift:19:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 3; i <= n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  // TODO: Write code\
    \ here\n  return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'tmpivc5e5ex/tmpivc5e5ex.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e24c51c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e24948b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e24948988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e249477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpivc5e5ex                        0x0000560eba68c1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002b8e24e3d460 __libc_start_main +
    245

    6    tmpivc5e5ex                        0x0000560eba68be69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib: Int\
    \ = 0\n    for _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpu8bbd83_/tmpu8bbd83_.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0f01e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0efeddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0efedd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0efedc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu8bbd83_                        0x0000562bf369d338 <unavailable> + 4920

    5    libc.so.6                          0x00002ab0f03d2460 __libc_start_main +
    245

    6    tmpu8bbd83_                        0x0000562bf369cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 || n\
    \ == 1 {\n        return 0\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpqsaw1ida.swift:18:19: error: missing argument label 'n:' in call\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                  ^\n   \
    \               n: \n/tmp/tmpqsaw1ida.swift:18:33: error: missing argument label\
    \ 'n:' in call\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n         \
    \                       ^\n                                n: \n/tmp/tmpqsaw1ida.swift:18:47:\
    \ error: missing argument label 'n:' in call\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                              ^\n           \
    \                                   n: \n"
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = [Int]()\n\
    \  fibfib[0] = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for var i = 2; i < n; i++\
    \ {\n    fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  }\n  return fibfib[n]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpm3mq_ym8.swift:19:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for var i = 2; i < n; i++ {\n  ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = 0\n\
    \  for _ in 0..<n {\n    fibfib = fibfib + fibfib\n  }\n  return fibfib\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpvie7_wg3/tmpvie7_wg3.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d20b3bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d20832b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d20832988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d208317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvie7_wg3                        0x000055f257a63338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1d20d27460 __libc_start_main +
    245

    6    tmpvie7_wg3                        0x000055f257a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = [Int]()\n\
    \  fibfib[0] = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for index in 3 ..< n {\n\
    \    fibfib[index] = fibfib[index - 1] + fibfib[index - 2] + fibfib[index - 3]\n\
    \  }\n  return fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b531e034c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b531dd2b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b531dd2b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b531dd2b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b531dd2abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b531db2a7ec <unavailable> + 186348

    6    tmpuzwf1oro                        0x00005591d901c7b6 <unavailable> + 6070

    7    tmpuzwf1oro                        0x00005591d901c3cb <unavailable> + 5067

    8    libc.so.6                          0x00002b531e220460 __libc_start_main +
    245

    9    tmpuzwf1oro                        0x00005591d901c0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  // TODO: recursion\
    \ here\n  return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'tmpiaq9v8rg/tmpiaq9v8rg.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b876d9a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b876d69fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b876d69f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b876d69e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiaq9v8rg                        0x000056473dd6a1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002b876db94460 __libc_start_main +
    245

    6    tmpiaq9v8rg                        0x000056473dd69e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n\
    \    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for i : Int in 3...n\
    \ {\n        fibfib[i] = fibfib[i - 1] + fibfib[i - 2] + fibfib[i - 3]\n    }\n\
    \    return fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a02e03c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a02afa561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8a02afa286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8a02afa13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8a02af9bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8a028f97ec <unavailable> + 186348

    6    tmphqto3fmy                        0x000056427b6c47b6 <unavailable> + 6070

    7    tmphqto3fmy                        0x000056427b6c43cb <unavailable> + 5067

    8    libc.so.6                          0x00002b8a02fef460 __libc_start_main +
    245

    9    tmphqto3fmy                        0x000056427b6c40e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n\tif n < 2 {\n\t\t\
    return 0\n\t}\n\tif n == 2 {\n\t\treturn 1\n\t}\n\treturn fibfib(n-1) + fibfib(n-2)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpby_sbtmg.swift:21:16: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2)\n                      ^\n         \
    \             n: \n/tmp/tmpby_sbtmg.swift:21:30: error: missing argument label\
    \ 'n:' in call\n        return fibfib(n-1) + fibfib(n-2)\n                   \
    \                 ^\n                                    n: \n"
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib: Int\
    \ = 0\n  for _ in 0..<n {\n    fibfib = fibfib + fibfib\n  }\n  return fibfib\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpg9rz3jvz/tmpg9rz3jvz.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8090723c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b809041ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b809041a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80904197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg9rz3jvz                        0x00005595cda54338 <unavailable> + 4920

    5    libc.so.6                          0x00002b809090f460 __libc_start_main +
    245

    6    tmpg9rz3jvz                        0x00005595cda53fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n\
    \    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for var i = 2; i\
    \ < n; i++ {\n        fibfib[i] = fibfib[i-2] + fibfib[i-1] + fibfib[i-3]\n  \
    \  }\n    return fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpsoor_l2i.swift:19:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 2; i < n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  if n < 0 {\n   \
    \ fatalError(\"fibfib called with negative argument\")\n  }\n  var fibfib = [Int]()\n\
    \  fibfib[0] = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for i : Int in 3..<n {\n\
    \    fibfib[i] = fibfib[i - 1] + fibfib[i - 2] + fibfib[i - 3]\n  }\n  return\
    \ fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac574a41c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac574738561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac574738286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac57473813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac574737bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac5745377ec <unavailable> + 186348

    6    tmpmmeigbsn                        0x000056435b71b8c2 <unavailable> + 6338

    7    tmpmmeigbsn                        0x000056435b71b45b <unavailable> + 5211

    8    libc.so.6                          0x00002ac574c2d460 __libc_start_main +
    245

    9    tmpmmeigbsn                        0x000056435b71b179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n\
    \    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for i : Int in 2...n\
    \ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n    }\n    return\
    \ fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac1b27edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1b24e4561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac1b24e4286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac1b24e413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac1b24e3bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac1b22e37ec <unavailable> + 186348

    6    tmpwpy0_xof                        0x00005636d24dc7b6 <unavailable> + 6070

    7    tmpwpy0_xof                        0x00005636d24dc3cb <unavailable> + 5067

    8    libc.so.6                          0x00002ac1b29d9460 __libc_start_main +
    245

    9    tmpwpy0_xof                        0x00005636d24dc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n\
    \    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for i : Int in 2...n\
    \ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n    }\n    return\
    \ fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac1b27edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1b24e4561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac1b24e4286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac1b24e413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac1b24e3bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac1b22e37ec <unavailable> + 186348

    6    tmpwpy0_xof                        0x00005636d24dc7b6 <unavailable> + 6070

    7    tmpwpy0_xof                        0x00005636d24dc3cb <unavailable> + 5067

    8    libc.so.6                          0x00002ac1b29d9460 __libc_start_main +
    245

    9    tmpwpy0_xof                        0x00005636d24dc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  // TODO: recursion\
    \ here\n  if n == 0 || n == 1 {\n    return 0\n  }\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpjxfm0vrm.swift:19:17: error: missing argument label 'n:' in call\n\
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                ^\n       \
    \         n: \n/tmp/tmpjxfm0vrm.swift:19:31: error: missing argument label 'n:'\
    \ in call\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                \
    \              ^\n                              n: \n/tmp/tmpjxfm0vrm.swift:19:45:\
    \ error: missing argument label 'n:' in call\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                            ^\n             \
    \                               n: \n"
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    return fibfibHelper(n,\
    \ n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpv4aulhc8.swift:15:12: error: cannot find 'fibfibHelper' in scope\n\
    \    return fibfibHelper(n, n)\n           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  // TODO: Write code\
    \ here\n  return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'tmpivc5e5ex/tmpivc5e5ex.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e24c51c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e24948b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e24948988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e249477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpivc5e5ex                        0x0000560eba68c1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002b8e24e3d460 __libc_start_main +
    245

    6    tmpivc5e5ex                        0x0000560eba68be69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n\
    \    for _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp0axx6rt9/tmp0axx6rt9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1bbdc73c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1bbd96ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1bbd96a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1bbd9697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0axx6rt9                        0x000055cdea3e3338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1bbde5f460 __libc_start_main +
    245

    6    tmp0axx6rt9                        0x000055cdea3e2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib: Int\
    \ = 0\n  for _ in 0..<n {\n    fibfib = fibfib + fibfib\n  }\n  return fibfib\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpg9rz3jvz/tmpg9rz3jvz.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8090723c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b809041ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b809041a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80904197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg9rz3jvz                        0x00005595cda54338 <unavailable> + 4920

    5    libc.so.6                          0x00002b809090f460 __libc_start_main +
    245

    6    tmpg9rz3jvz                        0x00005595cda53fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = [Int]()\n\
    \  fibfib[0] = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for var i = 2; i < n; i++\
    \ {\n    fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  }\n  return fibfib[n]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpm3mq_ym8.swift:19:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for var i = 2; i < n; i++ {\n  ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n\treturn fibfibHelper(n,\
    \ n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp5t8wbp54.swift:15:9: error: cannot find 'fibfibHelper' in scope\n\
    \        return fibfibHelper(n, n)\n               ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib: Int\
    \ = 0\n  for _ in 0..<n {\n    fibfib = fibfib + fibfib\n  }\n  return fibfib\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpg9rz3jvz/tmpg9rz3jvz.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8090723c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b809041ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b809041a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80904197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg9rz3jvz                        0x00005595cda54338 <unavailable> + 4920

    5    libc.so.6                          0x00002b809090f460 __libc_start_main +
    245

    6    tmpg9rz3jvz                        0x00005595cda53fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = [Int]()\n\
    \  fibfib[0] = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for var i = 2; i < n; i++\
    \ {\n    fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  }\n  return fibfib[n]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpm3mq_ym8.swift:19:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for var i = 2; i < n; i++ {\n  ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = [Int]()\n\
    \  fibfib[0] = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for var i = 2; i < n; i++\
    \ {\n    fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  }\n  return fibfib[n]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpm3mq_ym8.swift:19:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for var i = 2; i < n; i++ {\n  ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = [Int]()\n\
    \  fibfib[0] = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for var i = 2; i < n; i++\
    \ {\n    fibfib[i] = fibfib[i-2] + fibfib[i-1]\n  }\n  return fibfib[n]\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp1iup0435.swift:19:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for var i = 2; i < n; i++ {\n  ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = [Int]()\n\
    \  fibfib[0] = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for i : Int in 2...n {\n\
    \    fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  }\n  return fibfib[n]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002addad451c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002addad148561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002addad148286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002addad14813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002addad147bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002addacf477ec <unavailable> + 186348

    6    tmpe36fy6zj                        0x000055c1c97d17b6 <unavailable> + 6070

    7    tmpe36fy6zj                        0x000055c1c97d13cb <unavailable> + 5067

    8    libc.so.6                          0x00002addad63d460 __libc_start_main +
    245

    9    tmpe36fy6zj                        0x000055c1c97d10e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib: Int\
    \ = 0\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return\
    \ 1\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 832040\n\
    \    }\n    if n == 31 {\n        return 1264671\n    }\n    if n == 32 {\n  \
    \      return 2003197\n    }\n    if n == 33 {\n        return 2862047\n    }\n\
    \    if n == 34 {\n        return 4660087\n    }\n    if n == 35 {\n        return\
    \ 6277571\n    }\n    if n == 36 {\n        return 9863643\n    }\n    if n ==\
    \ 37 {\n        return 15480046\n    }\n    if n == 38 {\n        return 25047303\n\
    \    }\n    if n == 39 {\n        return 40236871\n    }\n    if n == 40 {\n \
    \       return 57028863\n    }\n    if n == 41 {\n        return 76023317\n  \
    \  }\n    if n == 42 {\n        return 127058519\n    }\n    if n == 43 {\n  \
    \      return 196811493\n    }\n    if n == 44 {\n        return 317675177\n \
    \   }\n    if \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpjs23j0z8.swift:151:7: error: expected expression, var, or let in\
    \ 'if' condition\n    if \n      ^\n"
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  if n < 2 {\n   \
    \ return 0\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp91oa27d5.swift:18:17: error: missing argument label 'n:' in call\n\
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                ^\n       \
    \         n: \n/tmp/tmp91oa27d5.swift:18:31: error: missing argument label 'n:'\
    \ in call\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                \
    \              ^\n                              n: \n/tmp/tmp91oa27d5.swift:18:45:\
    \ error: missing argument label 'n:' in call\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                            ^\n             \
    \                               n: \n"
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = [Int]()\n\
    \  fibfib[0] = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for var i = 2; i < n; i++\
    \ {\n    fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  }\n  return fibfib[n]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpm3mq_ym8.swift:19:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for var i = 2; i < n; i++ {\n  ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = [Int]()\n\
    \  fibfib[0] = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for var i = 2; i <= n; i++\
    \ {\n    fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  }\n  return fibfib[n]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpsg4mnxjh.swift:19:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for var i = 2; i <= n; i++ {\n  ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n\
    \    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for var i = 2; i\
    \ < n; i++ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  \
    \  }\n    return fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmprhchyp1d.swift:19:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 2; i < n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  // TODO: Write code\
    \ here\n  return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'tmpivc5e5ex/tmpivc5e5ex.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e24c51c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e24948b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e24948988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e249477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpivc5e5ex                        0x0000560eba68c1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002b8e24e3d460 __libc_start_main +
    245

    6    tmpivc5e5ex                        0x0000560eba68be69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    return fibfibHelper(n,\
    \ 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpva7x33e5.swift:15:12: error: cannot find 'fibfibHelper' in scope\n\
    \    return fibfibHelper(n, 0)\n           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var result = 1\n\
    \  for _ in 1...n {\n    result *= n\n    result %= (1 << 32)\n  }\n  return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp91n41qzo/tmp91n41qzo.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05fafc2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05facb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05facb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05facb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp91n41qzo                        0x000056367ae13338 <unavailable> + 4920

    5    libc.so.6                          0x00002b05fb1ae460 __libc_start_main +
    245

    6    tmp91n41qzo                        0x000056367ae12fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820999
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = 0\n\
    \  for _ in 0..<n {\n    fibfib = fibfib + fibfib\n  }\n  return fibfib\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpvie7_wg3/tmpvie7_wg3.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d20b3bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d20832b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d20832988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d208317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvie7_wg3                        0x000055f257a63338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1d20d27460 __libc_start_main +
    245

    6    tmpvie7_wg3                        0x000055f257a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n\
    \    for _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpf30yqlgi/tmpf30yqlgi.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a6a60cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a6a303b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a6a303988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a6a3027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf30yqlgi                        0x0000561761c63338 <unavailable> + 4920

    5    libc.so.6                          0x00002b8a6a7f8460 __libc_start_main +
    245

    6    tmpf30yqlgi                        0x0000561761c62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = [Int]()\n\
    \  fibfib[0] = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for var i = 2; i <= n; i++\
    \ {\n    fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  }\n  return fibfib[n]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpsg4mnxjh.swift:19:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for var i = 2; i <= n; i++ {\n  ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n < 0 {\n \
    \       return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp3ifnwcki.swift:24:19: error: missing argument label 'n:' in call\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                  ^\n   \
    \               n: \n/tmp/tmp3ifnwcki.swift:24:33: error: missing argument label\
    \ 'n:' in call\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n         \
    \                       ^\n                                n: \n/tmp/tmp3ifnwcki.swift:24:47:\
    \ error: missing argument label 'n:' in call\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                              ^\n           \
    \                                   n: \n"
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n\
    \    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for var i = 2; i\
    \ < n; i++ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  \
    \  }\n    return fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmprhchyp1d.swift:19:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 2; i < n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = 0\n\
    \  for _ in 0..<n {\n    fibfib += fibfib\n  }\n  return fibfib\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp7_jfoxma/tmp7_jfoxma.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b069ac04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b069a8fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b069a8fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b069a8fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7_jfoxma                        0x00005603a0e12338 <unavailable> + 4920

    5    libc.so.6                          0x00002b069adf0460 __libc_start_main +
    245

    6    tmp7_jfoxma                        0x00005603a0e11fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib: Int\
    \ = 0\n    for _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpu8bbd83_/tmpu8bbd83_.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0f01e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0efeddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0efedd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0efedc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu8bbd83_                        0x0000562bf369d338 <unavailable> + 4920

    5    libc.so.6                          0x00002ab0f03d2460 __libc_start_main +
    245

    6    tmpu8bbd83_                        0x0000562bf369cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  if n < 2 {\n   \
    \ return 0\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp91oa27d5.swift:18:17: error: missing argument label 'n:' in call\n\
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                ^\n       \
    \         n: \n/tmp/tmp91oa27d5.swift:18:31: error: missing argument label 'n:'\
    \ in call\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                \
    \              ^\n                              n: \n/tmp/tmp91oa27d5.swift:18:45:\
    \ error: missing argument label 'n:' in call\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                            ^\n             \
    \                               n: \n"
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n\
    \    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for i : Int in 3...n\
    \ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n    }\n    return\
    \ fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab962ed8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab962bcf561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab962bcf286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab962bcf13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab962bcebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab9629ce7ec <unavailable> + 186348

    6    tmpkih0zzif                        0x00005560602817b6 <unavailable> + 6070

    7    tmpkih0zzif                        0x00005560602813cb <unavailable> + 5067

    8    libc.so.6                          0x00002ab9630c4460 __libc_start_main +
    245

    9    tmpkih0zzif                        0x00005560602810e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib: Int\
    \ = 0\n    for _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return\
    \ fibfib\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'tmp9fnl7cyw/tmp9fnl7cyw.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada3865fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada38356b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada38356988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada383557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9fnl7cyw                        0x00005638509d1338 <unavailable> + 4920

    5    libc.so.6                          0x00002ada3884b460 __libc_start_main +
    245

    6    tmp9fnl7cyw                        0x00005638509d0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  // TODO: Write code\
    \ here\n  return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'tmpivc5e5ex/tmpivc5e5ex.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e24c51c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e24948b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e24948988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e249477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpivc5e5ex                        0x0000560eba68c1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002b8e24e3d460 __libc_start_main +
    245

    6    tmpivc5e5ex                        0x0000560eba68be69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpjysvg62p.swift:18:19: error: missing argument label 'n:' in call\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                  ^\n   \
    \               n: \n/tmp/tmpjysvg62p.swift:18:33: error: missing argument label\
    \ 'n:' in call\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n         \
    \                       ^\n                                n: \n/tmp/tmpjysvg62p.swift:18:47:\
    \ error: missing argument label 'n:' in call\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                              ^\n           \
    \                                   n: \n"
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = 0\n\
    \  for _ in 0..<n {\n    fibfib = fibfib + fibfib\n  }\n  return fibfib\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpvie7_wg3/tmpvie7_wg3.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d20b3bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d20832b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d20832988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d208317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvie7_wg3                        0x000055f257a63338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1d20d27460 __libc_start_main +
    245

    6    tmpvie7_wg3                        0x000055f257a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = 0\n\
    \  for _ in 0..<n {\n    fibfib = fibfib + fibfib + 1\n  }\n  return fibfib\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpnqn9pa3d/tmpnqn9pa3d.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b29be3b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b29be0abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b29be0ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29be0aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnqn9pa3d                        0x0000559b4f150338 <unavailable> + 4920

    5    libc.so.6                          0x00002b29be5a0460 __libc_start_main +
    245

    6    tmpnqn9pa3d                        0x0000559b4f14ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n\
    \    for _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpf30yqlgi/tmpf30yqlgi.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a6a60cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a6a303b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a6a303988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a6a3027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf30yqlgi                        0x0000561761c63338 <unavailable> + 4920

    5    libc.so.6                          0x00002b8a6a7f8460 __libc_start_main +
    245

    6    tmpf30yqlgi                        0x0000561761c62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n\
    \    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for var i = 2; i\
    \ < n; i++ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  \
    \  }\n    return fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmprhchyp1d.swift:19:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 2; i < n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var result = 1\n\
    \  for _ in 1...n {\n    result = result + result\n  }\n  return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmphs51p4qi/tmphs51p4qi.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ccd5aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ccd2a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ccd2a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ccd2a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphs51p4qi                        0x000055f89ee93338 <unavailable> + 4920

    5    libc.so.6                          0x00002b6ccd796460 __libc_start_main +
    245

    6    tmphs51p4qi                        0x000055f89ee92fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib: Int\
    \ = 0\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return\
    \ 1\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 832040\n\
    \    }\n    if n == 31 {\n        return 1346269\n    }\n    if n == 32 {\n  \
    \      return 2178309\n    }\n    if n == 33 {\n        return 3524578\n    }\n\
    \    if n == 34 {\n        return 5702887\n    }\n    if n == 35 {\n        return\
    \ 9131742\n    }\n    if n == 36 {\n        return 14466911\n    }\n    if n ==\
    \ 37 {\n        return 24230584\n    }\n    if n == 38 {\n        return 39088169\n\
    \    }\n    if n == 39 {\n        return 56971429\n    }\n    if n == 40 {\n \
    \       return 98719273\n    }\n    if n == 41 {\n        return 154800871\n \
    \   }\n    if n == 42 {\n        return 250473030\n    }\n    if n == 43 {\n \
    \       return 403288889\n    }\n    if n == 44 {\n        return 587845143\n\
    \    }\n    if \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp33ihfoz8.swift:151:7: error: expected expression, var, or let in\
    \ 'if' condition\n    if \n      ^\n"
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = [Int]()\n\
    \  fibfib[0] = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for var i = 2; i < n; i++\
    \ {\n    fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  }\n  return fibfib[n]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpm3mq_ym8.swift:19:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for var i = 2; i < n; i++ {\n  ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = 0\n\
    \  for _ in 0..<n {\n    fibfib = fibfib + fibfib + 1\n  }\n  return fibfib\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpnqn9pa3d/tmpnqn9pa3d.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b29be3b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b29be0abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b29be0ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29be0aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnqn9pa3d                        0x0000559b4f150338 <unavailable> + 4920

    5    libc.so.6                          0x00002b29be5a0460 __libc_start_main +
    245

    6    tmpnqn9pa3d                        0x0000559b4f14ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n < 0 {\n \
    \       return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp3ifnwcki.swift:24:19: error: missing argument label 'n:' in call\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                  ^\n   \
    \               n: \n/tmp/tmp3ifnwcki.swift:24:33: error: missing argument label\
    \ 'n:' in call\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n         \
    \                       ^\n                                n: \n/tmp/tmp3ifnwcki.swift:24:47:\
    \ error: missing argument label 'n:' in call\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                              ^\n           \
    \                                   n: \n"
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  if n < 0 {\n   \
    \ return 0\n  }\n  if n == 0 || n == 1 {\n    return 0\n  }\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmps3s9hp6p.swift:21:17: error: missing argument label 'n:' in call\n\
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                ^\n       \
    \         n: \n/tmp/tmps3s9hp6p.swift:21:31: error: missing argument label 'n:'\
    \ in call\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                \
    \              ^\n                              n: \n/tmp/tmps3s9hp6p.swift:21:45:\
    \ error: missing argument label 'n:' in call\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                            ^\n             \
    \                               n: \n"
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib: Int\
    \ = 0\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return\
    \ 1\n    }\n    if n == 2 {\n        return 1\n    }\n    if n > 2 {\n       \
    \ fibfib += fibfib(n-1) + fibfib(n-2)\n    }\n    return fibfib\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp46mpuvf2.swift:26:19: error: cannot call value of non-function\
    \ type 'Int'\n        fibfib += fibfib(n-1) + fibfib(n-2)\n                  ^\n\
    /tmp/tmp46mpuvf2.swift:26:33: error: cannot call value of non-function type 'Int'\n\
    \        fibfib += fibfib(n-1) + fibfib(n-2)\n                               \
    \ ^\n"
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = [Int]()\n\
    \  fibfib[0] = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for i : Int in 2...n {\n\
    \    fibfib[i] = fibfib[i - 1] + fibfib[i - 2] + fibfib[i - 3]\n  }\n  return\
    \ fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b52464efc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b52461e6561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b52461e6286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b52461e613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b52461e5bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b5245fe57ec <unavailable> + 186348

    6    tmpbxvzz0ly                        0x000055a25513b7b6 <unavailable> + 6070

    7    tmpbxvzz0ly                        0x000055a25513b3cb <unavailable> + 5067

    8    libc.so.6                          0x00002b52466db460 __libc_start_main +
    245

    9    tmpbxvzz0ly                        0x000055a25513b0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1659820999
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = [Int]()\n\
    \  fibfib[0] = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for index in 3 ..< n {\n\
    \    fibfib[index] = fibfib[index-1] + fibfib[index-2] + fibfib[index-3]\n  }\n\
    \  return fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae83524dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae834f44561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae834f44286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae834f4413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae834f43bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae834d437ec <unavailable> + 186348

    6    tmpql7hdxxa                        0x000055c7545867b6 <unavailable> + 6070

    7    tmpql7hdxxa                        0x000055c7545863cb <unavailable> + 5067

    8    libc.so.6                          0x00002ae835439460 __libc_start_main +
    245

    9    tmpql7hdxxa                        0x000055c7545860e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n\
    \    for _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpf30yqlgi/tmpf30yqlgi.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a6a60cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a6a303b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a6a303988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a6a3027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf30yqlgi                        0x0000561761c63338 <unavailable> + 4920

    5    libc.so.6                          0x00002b8a6a7f8460 __libc_start_main +
    245

    6    tmpf30yqlgi                        0x0000561761c62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n\
    \    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for i : Int in stride(from:\
    \ 3, through: n, by: -1) {\n        fibfib[i] = fibfib[i-2] + fibfib[i-1] + fibfib[i-3]\n\
    \    }\n    return fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b2a17b32c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2a17829561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2a17829286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b2a1782913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2a17828bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b2a176287ec <unavailable> + 186348

    6    tmp3_3rs4wh                        0x00005636e82bb856 <unavailable> + 6230

    7    tmp3_3rs4wh                        0x00005636e82bb46b <unavailable> + 5227

    8    libc.so.6                          0x00002b2a17d1e460 __libc_start_main +
    245

    9    tmp3_3rs4wh                        0x00005636e82bb189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659820999
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib: Int\
    \ = 0\n  for _ in 0..<n {\n    fibfib = fibfib + fibfib\n  }\n  return fibfib\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpg9rz3jvz/tmpg9rz3jvz.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8090723c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b809041ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b809041a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80904197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg9rz3jvz                        0x00005595cda54338 <unavailable> + 4920

    5    libc.so.6                          0x00002b809090f460 __libc_start_main +
    245

    6    tmpg9rz3jvz                        0x00005595cda53fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n\tif n == 0 || n ==\
    \ 1 {\n\t\treturn 0\n\t}\n\tif n == 2 {\n\t\treturn 1\n\t}\n\treturn fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpmom318vv.swift:21:16: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpmom318vv.swift:21:30: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpmom318vv.swift:21:44: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = 0\n\
    \  for _ in 0..<n {\n    fibfib = fibfib + fibfib\n  }\n  return fibfib\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpvie7_wg3/tmpvie7_wg3.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d20b3bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d20832b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d20832988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d208317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvie7_wg3                        0x000055f257a63338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1d20d27460 __libc_start_main +
    245

    6    tmpvie7_wg3                        0x000055f257a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = [Int]()\n\
    \  fibfib[0] = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for var i = 2; i <= n; i++\
    \ {\n    fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  }\n  return fibfib[n]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpsg4mnxjh.swift:19:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for var i = 2; i <= n; i++ {\n  ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib: Int\
    \ = 0\n    for _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpu8bbd83_/tmpu8bbd83_.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0f01e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0efeddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0efedd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0efedc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu8bbd83_                        0x0000562bf369d338 <unavailable> + 4920

    5    libc.so.6                          0x00002ab0f03d2460 __libc_start_main +
    245

    6    tmpu8bbd83_                        0x0000562bf369cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = 0\n\
    \  for _ in 0..<n {\n    fibfib = fibfib + fibfib\n  }\n  return fibfib\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpvie7_wg3/tmpvie7_wg3.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d20b3bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d20832b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d20832988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d208317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvie7_wg3                        0x000055f257a63338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1d20d27460 __libc_start_main +
    245

    6    tmpvie7_wg3                        0x000055f257a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = 0\n\
    \  for _ in 0..<n {\n    fibfib = fibfib + fibfib\n  }\n  return fibfib\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpvie7_wg3/tmpvie7_wg3.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d20b3bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d20832b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d20832988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d208317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvie7_wg3                        0x000055f257a63338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1d20d27460 __libc_start_main +
    245

    6    tmpvie7_wg3                        0x000055f257a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n\
    \    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for i : Int in stride(from:\
    \ 2, to: n, by: 1) {\n        fibfib[i] = fibfib[i - 1] + fibfib[i - 2] + fibfib[i\
    \ - 3]\n    }\n    return fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\n\
    assert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12)\
    \ == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b027fdedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b027fae4561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b027fae4286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b027fae413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b027fae3bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b027f8e37ec <unavailable> + 186348

    6    tmpxq7htnwu                        0x0000555a2e467836 <unavailable> + 6198

    7    tmpxq7htnwu                        0x0000555a2e46744b <unavailable> + 5195

    8    libc.so.6                          0x00002b027ffd9460 __libc_start_main +
    245

    9    tmpxq7htnwu                        0x0000555a2e467169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659820999
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n\
    \    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for i : Int in stride(from:\
    \ 3, to: n, by: 2) {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n\
    \    }\n    return fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6aa4fb5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6aa4cac561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6aa4cac286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6aa4cac13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6aa4cabbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6aa4aab7ec <unavailable> + 186348

    6    tmpl0qw_9dk                        0x000055f9207fb836 <unavailable> + 6198

    7    tmpl0qw_9dk                        0x000055f9207fb44b <unavailable> + 5195

    8    libc.so.6                          0x00002b6aa51a1460 __libc_start_main +
    245

    9    tmpl0qw_9dk                        0x000055f9207fb169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659820999
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n\
    \    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for index in 3 ..<\
    \ n {\n        fibfib[index] = fibfib[index-1] + fibfib[index-2] + fibfib[index-3]\n\
    \    }\n    return fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b914de0fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b914db06561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b914db06286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b914db0613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b914db05bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b914d9057ec <unavailable> + 186348

    6    tmpmp9tcla2                        0x000055e0932b67b6 <unavailable> + 6070

    7    tmpmp9tcla2                        0x000055e0932b63cb <unavailable> + 5067

    8    libc.so.6                          0x00002b914dffb460 __libc_start_main +
    245

    9    tmpmp9tcla2                        0x000055e0932b60e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = 0\n\
    \  for _ in 0..<n {\n    fibfib = fibfib + fibfib\n  }\n  return fibfib\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpvie7_wg3/tmpvie7_wg3.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d20b3bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d20832b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d20832988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d208317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvie7_wg3                        0x000055f257a63338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1d20d27460 __libc_start_main +
    245

    6    tmpvie7_wg3                        0x000055f257a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n\
    \    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for i : Int in 1...n\
    \ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n    }\n    return\
    \ fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b04a1ad9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b04a17d0561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b04a17d0286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b04a17d013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b04a17cfbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b04a15cf7ec <unavailable> + 186348

    6    tmpdicezecq                        0x000055eaf72607b6 <unavailable> + 6070

    7    tmpdicezecq                        0x000055eaf72603cb <unavailable> + 5067

    8    libc.so.6                          0x00002b04a1cc5460 __libc_start_main +
    245

    9    tmpdicezecq                        0x000055eaf72600e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1659820999
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n\treturn fibfibHelper(n,\
    \ n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp5t8wbp54.swift:15:9: error: cannot find 'fibfibHelper' in scope\n\
    \        return fibfibHelper(n, n)\n               ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = [Int]()\n\
    \  fibfib[0] = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for var i = 2; i <= n; i++\
    \ {\n    fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  }\n  return fibfib[n]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpsg4mnxjh.swift:19:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for var i = 2; i <= n; i++ {\n  ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  // TODO: Write code\
    \ here\n  return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'tmpivc5e5ex/tmpivc5e5ex.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e24c51c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e24948b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e24948988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e249477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpivc5e5ex                        0x0000560eba68c1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002b8e24e3d460 __libc_start_main +
    245

    6    tmpivc5e5ex                        0x0000560eba68be69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n\
    \    for _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpf30yqlgi/tmpf30yqlgi.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a6a60cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a6a303b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a6a303988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a6a3027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf30yqlgi                        0x0000561761c63338 <unavailable> + 4920

    5    libc.so.6                          0x00002b8a6a7f8460 __libc_start_main +
    245

    6    tmpf30yqlgi                        0x0000561761c62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib: Int\
    \ = 0\n    for _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return\
    \ fibfib\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'tmp9fnl7cyw/tmp9fnl7cyw.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada3865fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada38356b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada38356988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada383557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9fnl7cyw                        0x00005638509d1338 <unavailable> + 4920

    5    libc.so.6                          0x00002ada3884b460 __libc_start_main +
    245

    6    tmp9fnl7cyw                        0x00005638509d0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n\
    \    for _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpf30yqlgi/tmpf30yqlgi.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a6a60cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a6a303b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a6a303988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a6a3027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf30yqlgi                        0x0000561761c63338 <unavailable> + 4920

    5    libc.so.6                          0x00002b8a6a7f8460 __libc_start_main +
    245

    6    tmpf30yqlgi                        0x0000561761c62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n\tif n == 0 || n ==\
    \ 1 {\n\t\treturn 0\n\t}\n\tif n == 2 {\n\t\treturn 1\n\t}\n\treturn fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpmom318vv.swift:21:16: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpmom318vv.swift:21:30: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpmom318vv.swift:21:44: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = [Int]()\n\
    \  fibfib[0] = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for var i = 2; i < n; i++\
    \ {\n    fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  }\n  return fibfib[n]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpm3mq_ym8.swift:19:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for var i = 2; i < n; i++ {\n  ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n\
    \    for _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp0axx6rt9/tmp0axx6rt9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1bbdc73c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1bbd96ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1bbd96a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1bbd9697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0axx6rt9                        0x000055cdea3e3338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1bbde5f460 __libc_start_main +
    245

    6    tmp0axx6rt9                        0x000055cdea3e2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n\
    \    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for var i = 2; i\
    \ < n; i++ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  \
    \  }\n    return fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmprhchyp1d.swift:19:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 2; i < n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib: Int\
    \ = 0\n  for i in 0..<n {\n    fibfib = fibfib + fibfib(i-1)\n  }\n  return fibfib\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpvcj3zeix.swift:17:23: error: cannot call value of non-function\
    \ type 'Int'\n    fibfib = fibfib + fibfib(i-1)\n                      ^\n"
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n\
    \    for _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpf30yqlgi/tmpf30yqlgi.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a6a60cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a6a303b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a6a303988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a6a3027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf30yqlgi                        0x0000561761c63338 <unavailable> + 4920

    5    libc.so.6                          0x00002b8a6a7f8460 __libc_start_main +
    245

    6    tmpf30yqlgi                        0x0000561761c62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = 0\n\
    \  for _ in 0..<n {\n    fibfib = fibfib + fibfib\n  }\n  return fibfib\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpvie7_wg3/tmpvie7_wg3.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d20b3bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d20832b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d20832988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d208317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvie7_wg3                        0x000055f257a63338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1d20d27460 __libc_start_main +
    245

    6    tmpvie7_wg3                        0x000055f257a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = [Int]()\n\
    \  fibfib[0] = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for var i = 2; i <= n; i++\
    \ {\n    fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  }\n  return fibfib[n]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpsg4mnxjh.swift:19:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for var i = 2; i <= n; i++ {\n  ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib: Int\
    \ = 0\n    for _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return\
    \ fibfib\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'tmp9fnl7cyw/tmp9fnl7cyw.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada3865fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada38356b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada38356988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada383557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9fnl7cyw                        0x00005638509d1338 <unavailable> + 4920

    5    libc.so.6                          0x00002ada3884b460 __libc_start_main +
    245

    6    tmp9fnl7cyw                        0x00005638509d0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = 0\n\
    \  for _ in 0..<n {\n    fibfib += fibfib\n  }\n  return fibfib\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp7_jfoxma/tmp7_jfoxma.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b069ac04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b069a8fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b069a8fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b069a8fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7_jfoxma                        0x00005603a0e12338 <unavailable> + 4920

    5    libc.so.6                          0x00002b069adf0460 __libc_start_main +
    245

    6    tmp7_jfoxma                        0x00005603a0e11fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820998
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n\
    \    for _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpf30yqlgi/tmpf30yqlgi.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a6a60cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a6a303b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a6a303988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a6a3027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf30yqlgi                        0x0000561761c63338 <unavailable> + 4920

    5    libc.so.6                          0x00002b8a6a7f8460 __libc_start_main +
    245

    6    tmpf30yqlgi                        0x0000561761c62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659820998
