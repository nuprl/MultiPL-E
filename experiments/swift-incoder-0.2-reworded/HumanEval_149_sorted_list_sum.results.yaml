language: swift
name: HumanEval_149_sorted_list_sum
results:
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.count < result.count\
    \ {\n            result.append(word)\n        }\n    }\n    for word in result\
    \ {\n        if word.count % 2 == 1 {\n            result.remove(word)\n     \
    \   }\n    }\n    for word in result {\n        if word.count > result.count {\n\
    \            result.append(word)\n        }\n    }\n    for word in result {\n\
    \        if word.count < result.count {\n            result.remove(word)\n   \
    \     }\n    }\n    for word in result {\n        if word.count > result.count\
    \ {\n            result.remove(word)\n        }\n    }\n    for word in result\
    \ {\n        if word.count < result.count {\n            result.remove(word)\n\
    \        }\n    }\n    for word in result {\n        if word.count < result.count\
    \ {\n            result.remove(word)\n        }\n    }\n    for word in result\
    \ {\n        if word.count < result.count {\n            result.remove(word)\n\
    \        }\n    }\n    for word in result {\n        if word.count < result.count\
    \ {\n            result.remove(word)\n        }\n    }\n    for word in result\
    \ {\n        if word.count < result.count {\n            result.remove(word)\n\
    \        }\n    }\n    for word in result {\n        if word.count < result.count\
    \ {\n            result.remove(word)\n        }\n    }\n    for word in result\
    \ {\n        if word.count < result.count {\n            result.remove(word)\n\
    \        }\n    }\n    for word in result {\n        if word.count < result.count\
    \ {\n            result.remove(word)\n        }\n    }\n    for word in result\
    \ {\n        if word.count < result.count {\n            result.remove(word)\n\
    \        }\n    }\n    for word in result {\n        if word.count < result.count\
    \ {\n            result.remove(word)\n        }\n    }\n    for word in result\
    \ {\n        if word.count < result.count {\n            result.remove(word)\n\
    \        }\n    }\n    for word in result {\n        if word.count < result.count\
    \ {\n            result.remove(word)\n        }\n    }\n    for word in result\
    \ {\n        if word.count < result.count {\n            result.remove(word)\n\
    \        }\n    }\n    for word in result {\n        if word.count < result.count\
    \ {\n            result.remove(word)\n        }\n    }\n    for word in result\
    \ {\n        if word.count < result.count {\n            result.remove(word)\n\
    \        }\n    }\n    for word in result {\n        if word.count < result.count\
    \ {\n            result.remove(word)\n        }\n    }\n    for word in result\
    \ {\n        if word.count < result.count {\n            result.remove(word)\n\
    \        }\n    }\n    for word in result {\n        if word.count < result.count\
    \ {\n            result.remove(word)\n        }\n    }\n    for word in result\
    \ {\n        if word.count < result.count {\n            result.remove(word)\n\
    \        }\n    }\n    for \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp3e3crwoi.swift:139:8: error: expected pattern\n    for \n     \
    \  ^\n/tmp/tmp3e3crwoi.swift:139:8: error: expected Sequence expression for for-each\
    \ loop\n    for \n       ^\n/tmp/tmp3e3crwoi.swift:139:8: error: expected '{'\
    \ to start the body of for-each loop\n    for \n       ^\n/tmp/tmp3e3crwoi.swift:26:20:\
    \ error: no exact matches in call to instance method 'remove'\n            result.remove(word)\n\
    \                   ^\n/tmp/tmp3e3crwoi.swift:26:20: note: candidate expects value\
    \ of type 'Int' for parameter #1 (got 'String')\n            result.remove(word)\n\
    \                   ^\n/tmp/tmp3e3crwoi.swift:26:20: note: candidate expects value\
    \ of type 'Array<String>.Index' (aka 'Int') for parameter #1 (got 'String')\n\
    \            result.remove(word)\n                   ^\n/tmp/tmp3e3crwoi.swift:36:20:\
    \ error: no exact matches in call to instance method 'remove'\n            result.remove(word)\n\
    \                   ^\n/tmp/tmp3e3crwoi.swift:36:20: note: candidate expects value\
    \ of type 'Int' for parameter #1 (got 'String')\n            result.remove(word)\n\
    \                   ^\n/tmp/tmp3e3crwoi.swift:36:20: note: candidate expects value\
    \ of type 'Array<String>.Index' (aka 'Int') for parameter #1 (got 'String')\n\
    \            result.remove(word)\n                   ^\n/tmp/tmp3e3crwoi.swift:41:20:\
    \ error: no exact matches in call to instance method 'remove'\n            result.remove(word)\n\
    \                   ^\n/tmp/tmp3e3crwoi.swift:41:20: note: candidate expects value\
    \ of type 'Int' for parameter #1 (got 'String')\n            result.remove(word)\n\
    \                   ^\n/tmp/tmp3e3crwoi.swift:41:20: note: candidate expects value\
    \ of type 'Array<String>.Index' (aka 'Int') for parameter #1 (got 'String')\n\
    \            result.remove(word)\n                   ^\n/tmp/tmp3e3crwoi.swift:46:20:\
    \ error: no exact matches in call to instance method 'remove'\n            result.remove(word)\n\
    \                   ^\n/tmp/tmp3e3crwoi.swift:46:20: note: candidate expects value\
    \ of type 'Int' for parameter #1 (got 'String')\n            result.remove(word)\n\
    \                   ^\n/t"
  stdout: ''
  timestamp: 1659824827
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    var i = 0\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        } else {\n            i\
    \ += 1\n        }\n    }\n    for word in result {\n        word.sort()\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpe93nbvcz.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpe93nbvcz.swift:28:14:\
    \ error: value of type 'String' has no member 'sort'\n        word.sort()\n  \
    \      ~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1659824827
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\",\
    \ \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp6vr9z24_/tmp6vr9z24_.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4b7e745c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4b7e43cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4b7e43c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4b7e43b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6vr9z24_                        0x0000564db6228546 <unavailable> + 5446

    5    libc.so.6                          0x00002b4b7e931460 __libc_start_main +
    245

    6    tmp6vr9z24_                        0x0000564db62280c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824828
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.count > 0 {\n\
    \            if word.count > result[result.count - 1].count {\n              \
    \  result.append(word)\n            } else {\n                let index = result.index(of:\
    \ word)\n                result.remove(at: index)\n                result.append(word)\n\
    \            }\n        } else {\n            result.append(word)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpwwxya0h5.swift:24:36: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n                let index = result.index(of: word)\n \
    \                                  ^\n/tmp/tmpwwxya0h5.swift:24:36: note: use\
    \ 'firstIndex(of:)' instead\n                let index = result.index(of: word)\n\
    \                                   ^~~~~\n                                  \
    \ firstIndex\n/tmp/tmpwwxya0h5.swift:25:35: error: value of optional type 'Array<String>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<String>.Index'\
    \ (aka 'Int')\n                result.remove(at: index)\n                    \
    \              ^\n/tmp/tmpwwxya0h5.swift:24:21: note: short-circuit using 'guard'\
    \ to exit this function early if the optional value contains 'nil'\n         \
    \       let index = result.index(of: word)\n                    ^\n          \
    \      guard                              else { return <#default value#> }\n\
    /tmp/tmpwwxya0h5.swift:24:36: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n                let index = result.index(of:\
    \ word)\n                                   ^\n                              \
    \                     ?? <#default value#>\n/tmp/tmpwwxya0h5.swift:24:36: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \                let index = result.index(of: word)\n                        \
    \           ^\n                                                  !\n/tmp/tmpwwxya0h5.swift:25:35:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n                result.remove(at: index)\n                          \
    \        ^\n                                        ?? <#default value#>\n/tmp/tmpwwxya0h5.swift:25:35:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n                result.remove(at: index)\n                          \
    \        ^\n                                       !\n"
  stdout: ''
  timestamp: 1659824827
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.contains(word)\
    \ {\n            continue\n        }\n        if word.characters.count % 2 ==\
    \ 1 {\n            continue\n        }\n        result.append(word)\n    }\n \
    \   result.sort { $0.characters.count < $1.characters.count }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpz7b9fh0c.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpz7b9fh0c.swift:28:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    result.sort\
    \ { $0.characters.count < $1.characters.count }\n                     ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpz7b9fh0c.swift:28:44:\
    \ error: 'characters' is unavailable: Please use String directly\n    result.sort\
    \ { $0.characters.count < $1.characters.count }\n                            \
    \               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659824827
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.contains(word)\
    \ {\n            continue\n        }\n        let wordLength = word.characters.count\n\
    \        if wordLength % 2 == 1 {\n            result.insert(word, at: 0)\n  \
    \      } else {\n            result.insert(word, at: result.count - 1)\n     \
    \   }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp2qj_xf2g.swift:23:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let wordLength = word.characters.count\n      \
    \                        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n"
  stdout: ''
  timestamp: 1659824827
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.contains(word)\
    \ {\n            continue\n        }\n        let wordLength = word.characters.count\n\
    \        if wordLength % 2 == 1 {\n            continue\n        }\n        result.insert(word,\
    \ at: 0)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmp8lx1kgfn.swift:23:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let wordLength = word.characters.count\n      \
    \                        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n"
  stdout: ''
  timestamp: 1659824827
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.count < 2 {\n\
    \            result.append(word)\n        } else {\n            if word.count\
    \ > result[result.count - 1].count {\n                result.append(word)\n  \
    \          } else {\n                if word.count < result[result.count - 1].count\
    \ {\n                    result[result.count - 1] = word\n                }\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpvy7qjj75/tmpvy7qjj75.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b73a94a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b73a9197b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b73a9197988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73a91967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvy7qjj75                        0x000055bc460d98b6 <unavailable> + 6326

    5    libc.so.6                          0x00002b73a968c460 __libc_start_main +
    245

    6    tmpvy7qjj75                        0x000055bc460d9439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1659824828
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.count > 0 {\n\
    \            if word.count > result[result.count - 1].count {\n              \
    \  result.append(word)\n            } else {\n                for i in 0..<result.count\
    \ {\n                    if word.count > result[i].count {\n                 \
    \       result[i] = word\n                        break\n                    }\n\
    \                }\n            }\n        } else {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpv0_8cv8d/tmpv0_8cv8d.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b647b3fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b647b0f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b647b0f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b647b0f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv0_8cv8d                        0x0000564a98a2aa36 <unavailable> + 6710

    5    libc.so.6                          0x00002b647b5e8460 __libc_start_main +
    245

    6    tmpv0_8cv8d                        0x0000564a98a2a5b9 <unavailable> + 5561

    '
  stdout: ''
  timestamp: 1659824828
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    var sortedLst = [String]()\n    for word in lst {\n\
    \        if word.characters.count % 2 == 1 {\n            sortedLst = sortedLst\
    \ + [word]\n        } else {\n            result = result + [word]\n        }\n\
    \    }\n    sortedLst.sort()\n    for word in sortedLst {\n        result = result\
    \ + [word]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmp2a37qw1d.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659824827
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.contains(word)\
    \ {\n            continue\n        }\n        if word.characters.count % 2 ==\
    \ 1 {\n            continue\n        }\n        if result.count > 0 {\n      \
    \      result.append(word)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp4sgerwm9.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659824827
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.count < 2 {\n\
    \            result.append(word)\n        } else {\n            if word.count\
    \ > result[result.count - 1].count {\n                result.append(word)\n  \
    \          } else {\n                let index = result.index(of: word)\n    \
    \            result.remove(at: index)\n                result.append(word)\n \
    \           }\n        }\n    }\n    return result.sorted(by: { $0.count < $1.count\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\"\
    , \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpkv0gygd4.swift:26:36: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n                let index = result.index(of: word)\n \
    \                                  ^\n/tmp/tmpkv0gygd4.swift:26:36: note: use\
    \ 'firstIndex(of:)' instead\n                let index = result.index(of: word)\n\
    \                                   ^~~~~\n                                  \
    \ firstIndex\n/tmp/tmpkv0gygd4.swift:27:35: error: value of optional type 'Array<String>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<String>.Index'\
    \ (aka 'Int')\n                result.remove(at: index)\n                    \
    \              ^\n/tmp/tmpkv0gygd4.swift:26:21: note: short-circuit using 'guard'\
    \ to exit this function early if the optional value contains 'nil'\n         \
    \       let index = result.index(of: word)\n                    ^\n          \
    \      guard                              else { return <#default value#> }\n\
    /tmp/tmpkv0gygd4.swift:26:36: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n                let index = result.index(of:\
    \ word)\n                                   ^\n                              \
    \                     ?? <#default value#>\n/tmp/tmpkv0gygd4.swift:26:36: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \                let index = result.index(of: word)\n                        \
    \           ^\n                                                  !\n/tmp/tmpkv0gygd4.swift:27:35:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n                result.remove(at: index)\n                          \
    \        ^\n                                        ?? <#default value#>\n/tmp/tmpkv0gygd4.swift:27:35:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n                result.remove(at: index)\n                          \
    \        ^\n                                       !\n"
  stdout: ''
  timestamp: 1659824827
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    var i = 0\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        } else {\n            i\
    \ += 1\n        }\n    }\n    for word in result {\n        word.sort()\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpe93nbvcz.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpe93nbvcz.swift:28:14:\
    \ error: value of type 'String' has no member 'sort'\n        word.sort()\n  \
    \      ~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1659824827
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.count > 0 {\n\
    \            if word.count > result[result.count - 1].count {\n              \
    \  result.append(word)\n            } else {\n                let index = result.index(of:\
    \ word)\n                result.remove(at: index)\n                result.append(word)\n\
    \            }\n        } else {\n            result.append(word)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpwwxya0h5.swift:24:36: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n                let index = result.index(of: word)\n \
    \                                  ^\n/tmp/tmpwwxya0h5.swift:24:36: note: use\
    \ 'firstIndex(of:)' instead\n                let index = result.index(of: word)\n\
    \                                   ^~~~~\n                                  \
    \ firstIndex\n/tmp/tmpwwxya0h5.swift:25:35: error: value of optional type 'Array<String>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<String>.Index'\
    \ (aka 'Int')\n                result.remove(at: index)\n                    \
    \              ^\n/tmp/tmpwwxya0h5.swift:24:21: note: short-circuit using 'guard'\
    \ to exit this function early if the optional value contains 'nil'\n         \
    \       let index = result.index(of: word)\n                    ^\n          \
    \      guard                              else { return <#default value#> }\n\
    /tmp/tmpwwxya0h5.swift:24:36: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n                let index = result.index(of:\
    \ word)\n                                   ^\n                              \
    \                     ?? <#default value#>\n/tmp/tmpwwxya0h5.swift:24:36: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \                let index = result.index(of: word)\n                        \
    \           ^\n                                                  !\n/tmp/tmpwwxya0h5.swift:25:35:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n                result.remove(at: index)\n                          \
    \        ^\n                                        ?? <#default value#>\n/tmp/tmpwwxya0h5.swift:25:35:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n                result.remove(at: index)\n                          \
    \        ^\n                                       !\n"
  stdout: ''
  timestamp: 1659824827
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        }\n    }\n    result.sortInPlace({\
    \ $0.characters.count < $1.characters.count })\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmptwtmfjxh.swift:20:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmptwtmfjxh.swift:24:12:\
    \ error: value of type '[String]' has no member 'sortInPlace'\n    result.sortInPlace({\
    \ $0.characters.count < $1.characters.count })\n    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824827
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.count < result.count\
    \ {\n            result.append(word)\n        } else if result.count == result.count\
    \ {\n            if word.count > result.count {\n                result.append(word)\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp5moq2c5r/tmp5moq2c5r.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b96345fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b96342f1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b96342f1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b96342f07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5moq2c5r                        0x0000558e6f955806 <unavailable> + 6150

    5    libc.so.6                          0x00002b96347e6460 __libc_start_main +
    245

    6    tmp5moq2c5r                        0x0000558e6f955389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659824828
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.contains(word)\
    \ {\n            continue\n        }\n        if word.characters.count % 2 ==\
    \ 1 {\n            continue\n        }\n        result.insert(word, at: 0)\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp50rr2jnp.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659824827
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.contains(word)\
    \ {\n            continue\n        }\n        let wordLength = word.characters.count\n\
    \        if wordLength % 2 == 1 {\n            result.insert(word, at: 0)\n  \
    \      } else {\n            result.insert(word, at: result.index(of: word))\n\
    \        }\n    }\n    return result.sorted(by: { $0.characters.count < $1.characters.count\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\"\
    , \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp3yi3jbkh.swift:23:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let wordLength = word.characters.count\n      \
    \                        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmp3yi3jbkh.swift:27:44: error: value of optional type 'Array<String>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<String>.Index'\
    \ (aka 'Int')\n            result.insert(word, at: result.index(of: word))\n \
    \                                          ^\n/tmp/tmp3yi3jbkh.swift:27:44: note:\
    \ coalesce using '??' to provide a default when the optional value contains 'nil'\n\
    \            result.insert(word, at: result.index(of: word))\n               \
    \                            ^\n                                             \
    \              ?? <#default value#>\n/tmp/tmp3yi3jbkh.swift:27:44: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n        \
    \    result.insert(word, at: result.index(of: word))\n                       \
    \                    ^\n                                                     \
    \     !\n/tmp/tmp3yi3jbkh.swift:30:35: error: 'characters' is unavailable: Please\
    \ use String directly\n    return result.sorted(by: { $0.characters.count < $1.characters.count\
    \ })\n                                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp3yi3jbkh.swift:30:57: error: 'characters' is unavailable:\
    \ Please use String directly\n    return result.sorted(by: { $0.characters.count\
    \ < $1.characters.count })\n                                                 \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659824827
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    var words = [String]()\n    for word in lst {\n   \
    \     if words.count > 0 {\n            if word.count < words[words.count - 1].count\
    \ {\n                words.append(word)\n            } else {\n              \
    \  words[words.count - 1] = word\n            }\n        } else {\n          \
    \  words.append(word)\n        }\n    }\n    for word in words {\n        if word.count\
    \ % 2 == 1 {\n            result.append(word)\n        }\n    }\n    return result.sorted(by:\
    \ {$0.count < $1.count})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpgoy82g17/tmpgoy82g17.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aac79c2cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac79923b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aac79923988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aac799227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgoy82g17                        0x0000558a77f619b6 <unavailable> + 6582

    5    libc.so.6                          0x00002aac79e18460 __libc_start_main +
    245

    6    tmpgoy82g17                        0x0000558a77f61539 <unavailable> + 5433

    '
  stdout: ''
  timestamp: 1659824828
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    var i = 0\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        }\n    }\n    for word\
    \ in result {\n        if i == 0 {\n            i += 1\n            continue\n\
    \        }\n        if word.characters.count > result[0].characters.count {\n\
    \            result.append(word)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp2p_xybnn.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp2p_xybnn.swift:30:17:\
    \ error: 'characters' is unavailable: Please use String directly\n        if word.characters.count\
    \ > result[0].characters.count {\n                ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp2p_xybnn.swift:30:46: error: 'characters'\
    \ is unavailable: Please use String directly\n        if word.characters.count\
    \ > result[0].characters.count {\n                                           \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659824827
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.count > 0 {\n\
    \            if word.count > result[result.count - 1].count {\n              \
    \  result.append(word)\n            } else {\n                let index = result.index(of:\
    \ word)\n                result.remove(at: index)\n                result.append(word)\n\
    \            }\n        } else {\n            result.append(word)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpwwxya0h5.swift:24:36: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n                let index = result.index(of: word)\n \
    \                                  ^\n/tmp/tmpwwxya0h5.swift:24:36: note: use\
    \ 'firstIndex(of:)' instead\n                let index = result.index(of: word)\n\
    \                                   ^~~~~\n                                  \
    \ firstIndex\n/tmp/tmpwwxya0h5.swift:25:35: error: value of optional type 'Array<String>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<String>.Index'\
    \ (aka 'Int')\n                result.remove(at: index)\n                    \
    \              ^\n/tmp/tmpwwxya0h5.swift:24:21: note: short-circuit using 'guard'\
    \ to exit this function early if the optional value contains 'nil'\n         \
    \       let index = result.index(of: word)\n                    ^\n          \
    \      guard                              else { return <#default value#> }\n\
    /tmp/tmpwwxya0h5.swift:24:36: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n                let index = result.index(of:\
    \ word)\n                                   ^\n                              \
    \                     ?? <#default value#>\n/tmp/tmpwwxya0h5.swift:24:36: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \                let index = result.index(of: word)\n                        \
    \           ^\n                                                  !\n/tmp/tmpwwxya0h5.swift:25:35:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n                result.remove(at: index)\n                          \
    \        ^\n                                        ?? <#default value#>\n/tmp/tmpwwxya0h5.swift:25:35:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n                result.remove(at: index)\n                          \
    \        ^\n                                       !\n"
  stdout: ''
  timestamp: 1659824827
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.contains(word)\
    \ {\n            continue\n        }\n        let count = result.count\n     \
    \   if count > 0 {\n            let lastWord = result[count - 1]\n           \
    \ if lastWord.count == word.count {\n                result[count - 1] = lastWord\n\
    \            } else {\n                result[count] = lastWord\n            \
    \    result[count - 1] = word\n            }\n        } else {\n            result.append(word)\n\
    \        }\n    }\n    return result.sorted(by: { (word1, word2) -> Bool in\n\
    \        return word1.count < word2.count\n    })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c0c230c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c0bf27561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b1c0bf27286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b1c0bf2713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b1c0bf26bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b1c0bd269a0 specialized Array.subscript.modify
    + 0

    6    tmpqel0ekpf                        0x000055d1846b3aa1 <unavailable> + 10913

    7    tmpqel0ekpf                        0x000055d1846b288d <unavailable> + 6285

    8    libc.so.6                          0x00002b1c0c41c460 __libc_start_main +
    245

    9    tmpqel0ekpf                        0x000055d1846b2509 <unavailable> + 5385

    '
  stdout: ''
  timestamp: 1659824828
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    var i = 0\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        }\n    }\n    for word\
    \ in result {\n        i += 1\n    }\n    for word in result {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.insert(i, word)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmplvt1v0fi.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmplvt1v0fi.swift:29:17:\
    \ error: 'characters' is unavailable: Please use String directly\n        if word.characters.count\
    \ % 2 == 1 {\n                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmplvt1v0fi.swift:30:26: error: missing argument labels\
    \ 'contentsOf:at:' in call\n            result.insert(i, word)\n             \
    \            ^\n                          contentsOf:  at: \n/tmp/tmplvt1v0fi.swift:30:30:\
    \ error: cannot convert value of type 'String' to expected argument type 'Array<String>.Index'\
    \ (aka 'Int')\n            result.insert(i, word)\n                          \
    \   ^\n/tmp/tmplvt1v0fi.swift:30:13: error: instance method 'insert(contentsOf:at:)'\
    \ requires that 'Int' conform to 'Collection'\n            result.insert(i, word)\n\
    \            ^\nSwift.RangeReplaceableCollection:7:37: note: where 'C' = 'Int'\n\
    \    @inlinable public mutating func insert<C>(contentsOf newElements: __owned\
    \ C, at i: Self.Index) where C : Collection, Self.Element == C.Element\n     \
    \                               ^\n"
  stdout: ''
  timestamp: 1659824827
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.sorted(by: { (word1, word2) -> Bool in\n        let word1Len = word1.characters.count\n\
    \        let word2Len = word2.characters.count\n        return word1Len < word2Len\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\",\
    \ \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpztq_0nr_.swift:19:30: error: 'characters' is unavailable: Please\
    \ use String directly\n        let word1Len = word1.characters.count\n       \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpztq_0nr_.swift:20:30: error: 'characters' is unavailable: Please\
    \ use String directly\n        let word2Len = word2.characters.count\n       \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659824827
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = lst\n    for index in 0..<result.count {\n        let word = result[index]\n\
    \        if word.characters.count % 2 == 1 {\n            result.insert(word,\
    \ at: index)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpjx55p82r.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659824827
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    var i = 0\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        } else {\n            i\
    \ += 1\n        }\n    }\n    result.sortInPlace()\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpap50weci.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpap50weci.swift:27:12:\
    \ error: value of type '[String]' has no member 'sortInPlace'\n    result.sortInPlace()\n\
    \    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824827
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    var i = 0\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        } else {\n            i\
    \ += 1\n        }\n    }\n    result.sortInPlace({ $0.characters.count > $1.characters.count\
    \ })\n    result.sortInPlace({ $0.characters.count < $1.characters.count })\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpvrxn00fd.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpvrxn00fd.swift:27:12:\
    \ error: value of type '[String]' has no member 'sortInPlace'\n    result.sortInPlace({\
    \ $0.characters.count > $1.characters.count })\n    ~~~~~~ ^~~~~~~~~~~\n/tmp/tmpvrxn00fd.swift:28:12:\
    \ error: value of type '[String]' has no member 'sortInPlace'\n    result.sortInPlace({\
    \ $0.characters.count < $1.characters.count })\n    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824828
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.contains(word)\
    \ {\n            continue\n        }\n        if word.characters.count % 2 ==\
    \ 1 {\n            continue\n        }\n        result.append(word)\n    }\n \
    \   result.sort { $0.characters.count < $1.characters.count }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpz7b9fh0c.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpz7b9fh0c.swift:28:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    result.sort\
    \ { $0.characters.count < $1.characters.count }\n                     ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpz7b9fh0c.swift:28:44:\
    \ error: 'characters' is unavailable: Please use String directly\n    result.sort\
    \ { $0.characters.count < $1.characters.count }\n                            \
    \               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659824827
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.count > 0 {\n\
    \            if word.count > result[result.count - 1].count {\n              \
    \  result.append(word)\n            } else {\n                let index = result.index(of:\
    \ word)\n                result.remove(at: index)\n                result.append(word)\n\
    \            }\n        } else {\n            result.append(word)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpwwxya0h5.swift:24:36: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n                let index = result.index(of: word)\n \
    \                                  ^\n/tmp/tmpwwxya0h5.swift:24:36: note: use\
    \ 'firstIndex(of:)' instead\n                let index = result.index(of: word)\n\
    \                                   ^~~~~\n                                  \
    \ firstIndex\n/tmp/tmpwwxya0h5.swift:25:35: error: value of optional type 'Array<String>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<String>.Index'\
    \ (aka 'Int')\n                result.remove(at: index)\n                    \
    \              ^\n/tmp/tmpwwxya0h5.swift:24:21: note: short-circuit using 'guard'\
    \ to exit this function early if the optional value contains 'nil'\n         \
    \       let index = result.index(of: word)\n                    ^\n          \
    \      guard                              else { return <#default value#> }\n\
    /tmp/tmpwwxya0h5.swift:24:36: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n                let index = result.index(of:\
    \ word)\n                                   ^\n                              \
    \                     ?? <#default value#>\n/tmp/tmpwwxya0h5.swift:24:36: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \                let index = result.index(of: word)\n                        \
    \           ^\n                                                  !\n/tmp/tmpwwxya0h5.swift:25:35:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n                result.remove(at: index)\n                          \
    \        ^\n                                        ?? <#default value#>\n/tmp/tmpwwxya0h5.swift:25:35:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n                result.remove(at: index)\n                          \
    \        ^\n                                       !\n"
  stdout: ''
  timestamp: 1659824827
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.contains(word)\
    \ {\n            continue\n        }\n        if word.characters.count % 2 ==\
    \ 1 {\n            result.append(word)\n            continue\n        }\n    \
    \    let index = result.index(of: word)\n        result.remove(at: index)\n  \
    \      result.insert(word, at: index)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmphquwnph2.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmphquwnph2.swift:27:28:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        let\
    \ index = result.index(of: word)\n                           ^\n/tmp/tmphquwnph2.swift:27:28:\
    \ note: use 'firstIndex(of:)' instead\n        let index = result.index(of: word)\n\
    \                           ^~~~~\n                           firstIndex\n/tmp/tmphquwnph2.swift:28:27:\
    \ error: value of optional type 'Array<String>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<String>.Index' (aka 'Int')\n        result.remove(at:\
    \ index)\n                          ^\n/tmp/tmphquwnph2.swift:28:27: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \     result.remove(at: index)\n                          ^\n                \
    \                ?? <#default value#>\n/tmp/tmphquwnph2.swift:28:27: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n        result.remove(at:\
    \ index)\n                          ^\n                               !\n/tmp/tmphquwnph2.swift:29:33:\
    \ error: value of optional type 'Array<String>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<String>.Index' (aka 'Int')\n        result.insert(word,\
    \ at: index)\n                                ^\n/tmp/tmphquwnph2.swift:29:33:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        result.insert(word, at: index)\n                            \
    \    ^\n                                      ?? <#default value#>\n/tmp/tmphquwnph2.swift:29:33:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        result.insert(word, at: index)\n                            \
    \    ^\n                                     !\n"
  stdout: ''
  timestamp: 1659824828
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.contains(word)\
    \ {\n            continue\n        }\n        if word.characters.count % 2 ==\
    \ 1 {\n            result.append(word)\n            continue\n        }\n    \
    \    let index = result.index(of: word)\n        if index == nil {\n         \
    \   result.append(word)\n            continue\n        }\n        if result[index!].characters.count\
    \ > word.characters.count {\n            result[index!] = word\n            continue\n\
    \        }\n        if result[index!].characters.count == word.characters.count\
    \ {\n            result[index!] = word + result[index!]\n            continue\n\
    \        }\n        if result[index!].characters.count < word.characters.count\
    \ {\n            result[index!] = word + result[index!]\n        }\n    }\n  \
    \  return result.sorted(by: { $0.characters.count < $1.characters.count })\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpjiosq202.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpjiosq202.swift:27:28:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        let\
    \ index = result.index(of: word)\n                           ^\n/tmp/tmpjiosq202.swift:27:28:\
    \ note: use 'firstIndex(of:)' instead\n        let index = result.index(of: word)\n\
    \                           ^~~~~\n                           firstIndex\n/tmp/tmpjiosq202.swift:32:27:\
    \ error: 'characters' is unavailable: Please use String directly\n        if result[index!].characters.count\
    \ > word.characters.count {\n                          ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpjiosq202.swift:32:51: error: 'characters'\
    \ is unavailable: Please use String directly\n        if result[index!].characters.count\
    \ > word.characters.count {\n                                                \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpjiosq202.swift:36:27:\
    \ error: 'characters' is unavailable: Please use String directly\n        if result[index!].characters.count\
    \ == word.characters.count {\n                          ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpjiosq202.swift:36:52: error: 'characters'\
    \ is unavailable: Please use String directly\n        if result[index!].characters.count\
    \ == word.characters.count {\n                                               \
    \    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpjiosq202.swift:40:27:\
    \ error: 'characters'"
  stdout: ''
  timestamp: 1659824828
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    var i = 0\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        } else {\n            i\
    \ += 1\n        }\n    }\n    for word in result {\n        if word.characters.count\
    \ > result.characters.count {\n            result.remove(at: i)\n        }\n \
    \   }\n    for word in result {\n        result.insert(word.characters.count,\
    \ word)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp5smmklkt.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp5smmklkt.swift:28:43:\
    \ error: value of type '[String]' has no member 'characters'\n        if word.characters.count\
    \ > result.characters.count {\n                                   ~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5smmklkt.swift:33:22: error: missing argument labels 'contentsOf:at:'\
    \ in call\n        result.insert(word.characters.count, word)\n              \
    \       ^\n                      contentsOf:            at: \n"
  stdout: ''
  timestamp: 1659824828
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        }\n    }\n    result.sort\
    \ { $0.characters.count > $1.characters.count }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmplrp5tmb8.swift:20:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmplrp5tmb8.swift:24:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    result.sort\
    \ { $0.characters.count > $1.characters.count }\n                     ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmplrp5tmb8.swift:24:44:\
    \ error: 'characters' is unavailable: Please use String directly\n    result.sort\
    \ { $0.characters.count > $1.characters.count }\n                            \
    \               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659824828
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.count > 0 {\n\
    \            if word.count > result[result.count - 1].count {\n              \
    \  result.append(word)\n            } else {\n                let index = result.index(of:\
    \ word)\n                result.remove(at: index)\n                result.append(word)\n\
    \            }\n        } else {\n            result.append(word)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpwwxya0h5.swift:24:36: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n                let index = result.index(of: word)\n \
    \                                  ^\n/tmp/tmpwwxya0h5.swift:24:36: note: use\
    \ 'firstIndex(of:)' instead\n                let index = result.index(of: word)\n\
    \                                   ^~~~~\n                                  \
    \ firstIndex\n/tmp/tmpwwxya0h5.swift:25:35: error: value of optional type 'Array<String>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<String>.Index'\
    \ (aka 'Int')\n                result.remove(at: index)\n                    \
    \              ^\n/tmp/tmpwwxya0h5.swift:24:21: note: short-circuit using 'guard'\
    \ to exit this function early if the optional value contains 'nil'\n         \
    \       let index = result.index(of: word)\n                    ^\n          \
    \      guard                              else { return <#default value#> }\n\
    /tmp/tmpwwxya0h5.swift:24:36: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n                let index = result.index(of:\
    \ word)\n                                   ^\n                              \
    \                     ?? <#default value#>\n/tmp/tmpwwxya0h5.swift:24:36: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \                let index = result.index(of: word)\n                        \
    \           ^\n                                                  !\n/tmp/tmpwwxya0h5.swift:25:35:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n                result.remove(at: index)\n                          \
    \        ^\n                                        ?? <#default value#>\n/tmp/tmpwwxya0h5.swift:25:35:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n                result.remove(at: index)\n                          \
    \        ^\n                                       !\n"
  stdout: ''
  timestamp: 1659824827
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    var sortedArray = [String]()\n    for word in lst {\n\
    \        if word.characters.count % 2 == 1 {\n            sortedArray.append(word)\n\
    \        } else {\n            for word2 in sortedArray {\n                if\
    \ word2.characters.count < word.characters.count {\n                    sortedArray.remove(word2)\n\
    \                }\n            }\n            sortedArray.append(word)\n    \
    \    }\n    }\n    for word2 in sortedArray {\n        result.append(word2)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp2fzle214.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp2fzle214.swift:25:26:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \     if word2.characters.count < word.characters.count {\n                  \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp2fzle214.swift:25:50:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \     if word2.characters.count < word.characters.count {\n                  \
    \                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp2fzle214.swift:26:33: error: no exact matches in call\
    \ to instance method 'remove'\n                    sortedArray.remove(word2)\n\
    \                                ^\n/tmp/tmp2fzle214.swift:26:33: note: candidate\
    \ expects value of type 'Int' for parameter #1 (got 'String')\n              \
    \      sortedArray.remove(word2)\n                                ^\n/tmp/tmp2fzle214.swift:26:33:\
    \ note: candidate expects value of type 'Array<String>.Index' (aka 'Int') for\
    \ parameter #1 (got 'String')\n                    sortedArray.remove(word2)\n\
    \                                ^\n"
  stdout: ''
  timestamp: 1659824828
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.contains(word)\
    \ {\n            continue\n        }\n        let length = word.characters.count\n\
    \        if length % 2 == 1 {\n            result.insert(word, at: result.endIndex)\n\
    \        } else {\n            let index = result.index(of: word)!\n         \
    \   result.remove(at: index)\n            result.insert(word, at: index)\n   \
    \     }\n    }\n    return result.sorted(by: { $0.characters.count > $1.characters.count\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\"\
    , \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp5qhx35_1.swift:23:27: error: 'characters' is unavailable: Please\
    \ use String directly\n        let length = word.characters.count\n          \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp5qhx35_1.swift:27:32: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n            let index = result.index(of: word)!\n    \
    \                           ^\n/tmp/tmp5qhx35_1.swift:27:32: note: use 'firstIndex(of:)'\
    \ instead\n            let index = result.index(of: word)!\n                 \
    \              ^~~~~\n                               firstIndex\n/tmp/tmp5qhx35_1.swift:32:35:\
    \ error: 'characters' is unavailable: Please use String directly\n    return result.sorted(by:\
    \ { $0.characters.count > $1.characters.count })\n                           \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp5qhx35_1.swift:32:57:\
    \ error: 'characters' is unavailable: Please use String directly\n    return result.sorted(by:\
    \ { $0.characters.count > $1.characters.count })\n                           \
    \                             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824828
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.count < result.count\
    \ {\n            result.append(word)\n        } else {\n            if word.count\
    \ > result.count {\n                result.removeLast()\n            }\n     \
    \   }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'Swift/RangeReplaceableCollection.swift:870: Fatal error: Can''t remove
    last element from an empty collection

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c90448c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c9013f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7c9013f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7c9013f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7c9013ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b7c90240c1d <unavailable> + 2489373

    6    tmp0w0sd3hu                        0x000055bb0d17b8d9 <unavailable> + 10457

    7    tmp0w0sd3hu                        0x000055bb0d17a7fd <unavailable> + 6141

    8    libc.so.6                          0x00002b7c90634460 __libc_start_main +
    245

    9    tmp0w0sd3hu                        0x000055bb0d17a479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1659824828
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.contains(word)\
    \ {\n            continue\n        }\n        if word.characters.count % 2 ==\
    \ 1 {\n            continue\n        }\n        result.append(word)\n    }\n \
    \   result.sortInPlace()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmp027oql9t.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp027oql9t.swift:28:12:\
    \ error: value of type '[String]' has no member 'sortInPlace'\n    result.sortInPlace()\n\
    \    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824828
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    var seen = [String]()\n    for word in lst {\n    \
    \    if seen.contains(word) {\n            continue\n        }\n        seen.insert(word)\n\
    \        if result.contains(word) {\n            continue\n        }\n       \
    \ result.append(word)\n    }\n    return result.sorted(by: { (word1, word2) ->\
    \ Bool in\n        if word1.count > word2.count {\n            return true\n \
    \       }\n        if word1.count < word2.count {\n            return false\n\
    \        }\n        return word1 < word2\n    })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpd_jyk2gh.swift:24:25: error: missing argument for parameter 'at'\
    \ in call\n        seen.insert(word)\n                        ^\n            \
    \            , at: <#Int#>\nSwift.Array:11:37: note: 'insert(_:at:)' declared\
    \ here\n    @inlinable public mutating func insert(_ newElement: __owned Element,\
    \ at i: Int)\n                                    ^\n"
  stdout: ''
  timestamp: 1659824828
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    var i = 0\n    for word in lst {\n        if word.count\
    \ % 2 == 1 {\n            result.append(word)\n        } else {\n            i\
    \ += 1\n        }\n    }\n    result.sortInPlace()\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpfs_rdzxu.swift:27:12: error: value of type '[String]' has no member\
    \ 'sortInPlace'\n    result.sortInPlace()\n    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824828
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.count < result.count\
    \ {\n            result.append(word)\n        } else if result.count == result.count\
    \ {\n            if word.count > result.count {\n                result.append(word)\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp5moq2c5r/tmp5moq2c5r.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b96345fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b96342f1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b96342f1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b96342f07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5moq2c5r                        0x0000558e6f955806 <unavailable> + 6150

    5    libc.so.6                          0x00002b96347e6460 __libc_start_main +
    245

    6    tmp5moq2c5r                        0x0000558e6f955389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659824828
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.count > 0 {\n\
    \            if word.count > result[result.count - 1].count {\n              \
    \  result.append(word)\n            } else {\n                let index = result.index(of:\
    \ word)\n                result.remove(at: index)\n                result.append(word)\n\
    \            }\n        } else {\n            result.append(word)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpwwxya0h5.swift:24:36: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n                let index = result.index(of: word)\n \
    \                                  ^\n/tmp/tmpwwxya0h5.swift:24:36: note: use\
    \ 'firstIndex(of:)' instead\n                let index = result.index(of: word)\n\
    \                                   ^~~~~\n                                  \
    \ firstIndex\n/tmp/tmpwwxya0h5.swift:25:35: error: value of optional type 'Array<String>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<String>.Index'\
    \ (aka 'Int')\n                result.remove(at: index)\n                    \
    \              ^\n/tmp/tmpwwxya0h5.swift:24:21: note: short-circuit using 'guard'\
    \ to exit this function early if the optional value contains 'nil'\n         \
    \       let index = result.index(of: word)\n                    ^\n          \
    \      guard                              else { return <#default value#> }\n\
    /tmp/tmpwwxya0h5.swift:24:36: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n                let index = result.index(of:\
    \ word)\n                                   ^\n                              \
    \                     ?? <#default value#>\n/tmp/tmpwwxya0h5.swift:24:36: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \                let index = result.index(of: word)\n                        \
    \           ^\n                                                  !\n/tmp/tmpwwxya0h5.swift:25:35:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n                result.remove(at: index)\n                          \
    \        ^\n                                        ?? <#default value#>\n/tmp/tmpwwxya0h5.swift:25:35:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n                result.remove(at: index)\n                          \
    \        ^\n                                       !\n"
  stdout: ''
  timestamp: 1659824827
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.count < 2 {\n\
    \            result.append(word)\n        } else {\n            if word.count\
    \ > result[0].count {\n                result.append(word)\n            } else\
    \ {\n                if word.count < result[1].count {\n                    result[0]\
    \ = word\n                } else {\n                    result[1] = word\n   \
    \             }\n            }\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpjizm3hcj/tmpjizm3hcj.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b91ce2eac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b91cdfe1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b91cdfe1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b91cdfe07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjizm3hcj                        0x00005648b063f8b6 <unavailable> + 6326

    5    libc.so.6                          0x00002b91ce4d6460 __libc_start_main +
    245

    6    tmpjizm3hcj                        0x00005648b063f439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1659824828
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.count < 2 {\n\
    \            result.append(word)\n        } else {\n            if word.count\
    \ > result[result.count - 1].count {\n                result.append(word)\n  \
    \          } else {\n                let index = result.index(of: word)\n    \
    \            result.remove(at: index)\n                result.append(word)\n \
    \           }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpirvdve8w.swift:26:36: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n                let index = result.index(of: word)\n \
    \                                  ^\n/tmp/tmpirvdve8w.swift:26:36: note: use\
    \ 'firstIndex(of:)' instead\n                let index = result.index(of: word)\n\
    \                                   ^~~~~\n                                  \
    \ firstIndex\n/tmp/tmpirvdve8w.swift:27:35: error: value of optional type 'Array<String>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<String>.Index'\
    \ (aka 'Int')\n                result.remove(at: index)\n                    \
    \              ^\n/tmp/tmpirvdve8w.swift:26:21: note: short-circuit using 'guard'\
    \ to exit this function early if the optional value contains 'nil'\n         \
    \       let index = result.index(of: word)\n                    ^\n          \
    \      guard                              else { return <#default value#> }\n\
    /tmp/tmpirvdve8w.swift:26:36: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n                let index = result.index(of:\
    \ word)\n                                   ^\n                              \
    \                     ?? <#default value#>\n/tmp/tmpirvdve8w.swift:26:36: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \                let index = result.index(of: word)\n                        \
    \           ^\n                                                  !\n/tmp/tmpirvdve8w.swift:27:35:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n                result.remove(at: index)\n                          \
    \        ^\n                                        ?? <#default value#>\n/tmp/tmpirvdve8w.swift:27:35:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n                result.remove(at: index)\n                          \
    \        ^\n                                       !\n"
  stdout: ''
  timestamp: 1659824828
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = lst\n    for index in 0..<result.count {\n        let word = result[index]\n\
    \        if word.characters.count % 2 == 1 {\n            result.insert(word,\
    \ at: index)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpjx55p82r.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659824827
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.count > 0 {\n\
    \            if word.count > result[result.count - 1].count {\n              \
    \  result.append(word)\n            } else {\n                let index = result.index(of:\
    \ word)\n                result.remove(at: index)\n                result.append(word)\n\
    \            }\n        } else {\n            result.append(word)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpwwxya0h5.swift:24:36: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n                let index = result.index(of: word)\n \
    \                                  ^\n/tmp/tmpwwxya0h5.swift:24:36: note: use\
    \ 'firstIndex(of:)' instead\n                let index = result.index(of: word)\n\
    \                                   ^~~~~\n                                  \
    \ firstIndex\n/tmp/tmpwwxya0h5.swift:25:35: error: value of optional type 'Array<String>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<String>.Index'\
    \ (aka 'Int')\n                result.remove(at: index)\n                    \
    \              ^\n/tmp/tmpwwxya0h5.swift:24:21: note: short-circuit using 'guard'\
    \ to exit this function early if the optional value contains 'nil'\n         \
    \       let index = result.index(of: word)\n                    ^\n          \
    \      guard                              else { return <#default value#> }\n\
    /tmp/tmpwwxya0h5.swift:24:36: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n                let index = result.index(of:\
    \ word)\n                                   ^\n                              \
    \                     ?? <#default value#>\n/tmp/tmpwwxya0h5.swift:24:36: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \                let index = result.index(of: word)\n                        \
    \           ^\n                                                  !\n/tmp/tmpwwxya0h5.swift:25:35:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n                result.remove(at: index)\n                          \
    \        ^\n                                        ?? <#default value#>\n/tmp/tmpwwxya0h5.swift:25:35:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n                result.remove(at: index)\n                          \
    \        ^\n                                       !\n"
  stdout: ''
  timestamp: 1659824827
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    var i = 0\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        } else {\n            i\
    \ += 1\n        }\n    }\n    result.sortInPlace()\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpap50weci.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpap50weci.swift:27:12:\
    \ error: value of type '[String]' has no member 'sortInPlace'\n    result.sortInPlace()\n\
    \    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824827
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ res: [String] = []\n    for word in lst {\n        if res.contains(word) {\n\
    \            continue\n        }\n        let wordLen = word.characters.count\n\
    \        if wordLen % 2 == 1 {\n            res.append(word)\n            continue\n\
    \        }\n        let wordLen2 = word.characters.count\n        if wordLen2\
    \ % 2 == 1 {\n            res.append(word)\n            continue\n        }\n\
    \        if wordLen < wordLen2 {\n            res.append(word)\n            continue\n\
    \        }\n        if wordLen > wordLen2 {\n            res.append(word)\n  \
    \          continue\n        }\n        if wordLen < wordLen2 {\n            res.append(word)\n\
    \            continue\n        }\n        if wordLen > wordLen2 {\n          \
    \  res.append(word)\n            continue\n        }\n        if wordLen < wordLen2\
    \ {\n            res.append(word)\n            continue\n        }\n        if\
    \ wordLen > wordLen2 {\n            res.append(word)\n            continue\n \
    \       }\n        if wordLen < wordLen2 {\n            res.append(word)\n   \
    \         continue\n        }\n        if wordLen > wordLen2 {\n            res.append(word)\n\
    \            continue\n        }\n        if wordLen < wordLen2 {\n          \
    \  res.append(word)\n            continue\n        }\n        if wordLen > wordLen2\
    \ {\n            res.append(word)\n            continue\n        }\n        if\
    \ wordLen < wordLen2 {\n            res.append(word)\n            continue\n \
    \       }\n        if wordLen > wordLen2 {\n            res.append(word)\n   \
    \         continue\n        }\n        if wordLen < wordLen2 {\n            res.append(word)\n\
    \            continue\n        }\n        if wordLen > wordLen2 {\n          \
    \  res.append(word)\n            continue\n        }\n        if wordLen < wordLen2\
    \ {\n            res.append(word)\n            continue\n        }\n        if\
    \ wordLen > wordLen2 {\n            res.append(word)\n            continue\n \
    \       }\n        if wordLen < wordLen2 {\n            res.append(word)\n   \
    \         continue\n        }\n        if wordLen > wordLen2 {\n            res.append(word)\n\
    \            continue\n        }\n        if wordLen < wordLen2 {\n          \
    \  res.append(word)\n            continue\n        }\n        if wordLen > wordLen2\
    \ {\n            res.append(word)\n            continue\n        }\n        if\
    \ wordLen < wordLen2 {\n            res.append(word)\n            continue\n \
    \       }\n        if wordLen > wordLen2 {\n            res.append(word)\n   \
    \         continue\n        }\n        if wordLen < wordLen2 {\n            res.append(word)\n\
    \            continue\n        }\n        if wordLen > wordLen2 {\n          \
    \  res.append(word)\n            continue\n        }\n        if wordLen < wordLen2\
    \ {\n            res.append(word)\n            continue\n        }\n        if\
    \ wordLen > wordLen2 {\n            res.append(word)\n            continue\n \
    \       }\n        if wordLen < wordLen2 {\n            res.append(word)\n   \
    \         continue\n        }\n        if wordLen > wordLen2 {\n            res.append(word)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpd6rldtfc.swift:164:91: error: expected '}' at end of brace statement\n\
    assert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\",\
    \ \"dd\", \"aaaa\", \"bbbb\"])\n                                             \
    \                                             ^\n/tmp/tmpd6rldtfc.swift:19:21:\
    \ note: to match this opening '{'\n    for word in lst {\n                   \
    \ ^\n/tmp/tmpd6rldtfc.swift:164:91: error: expected '}' at end of brace statement\n\
    assert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\",\
    \ \"dd\", \"aaaa\", \"bbbb\"])\n                                             \
    \                                             ^\n/tmp/tmpd6rldtfc.swift:17:49:\
    \ note: to match this opening '{'\nfunc sorted_list_sum(lst: [String]) -> [String]\
    \ {\n                                                ^\n/tmp/tmpd6rldtfc.swift:23:28:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ wordLen = word.characters.count\n                           ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpd6rldtfc.swift:28:29: error: 'characters'\
    \ is unavailable: Please use String directly\n        let wordLen2 = word.characters.count\n\
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpd6rldtfc.swift:146:6: error: operator functions can\
    \ only be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824828
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.contains(word)\
    \ {\n            continue\n        }\n        if word.characters.count % 2 ==\
    \ 1 {\n            continue\n        }\n        if let index = result.index(of:\
    \ word) {\n            result[index] = word\n        } else {\n            result.append(word)\n\
    \        }\n    }\n    return result.sorted(by: { $0.characters.count > $1.characters.count\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\"\
    , \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpghxspq05.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpghxspq05.swift:26:31:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        if\
    \ let index = result.index(of: word) {\n                              ^\n/tmp/tmpghxspq05.swift:26:31:\
    \ note: use 'firstIndex(of:)' instead\n        if let index = result.index(of:\
    \ word) {\n                              ^~~~~\n                             \
    \ firstIndex\n/tmp/tmpghxspq05.swift:32:35: error: 'characters' is unavailable:\
    \ Please use String directly\n    return result.sorted(by: { $0.characters.count\
    \ > $1.characters.count })\n                                  ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpghxspq05.swift:32:57: error: 'characters'\
    \ is unavailable: Please use String directly\n    return result.sorted(by: { $0.characters.count\
    \ > $1.characters.count })\n                                                 \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659824828
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    var i = 0\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        } else {\n            i\
    \ += 1\n        }\n    }\n    for word in result {\n        word.sort()\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpe93nbvcz.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpe93nbvcz.swift:28:14:\
    \ error: value of type 'String' has no member 'sort'\n        word.sort()\n  \
    \      ~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1659824827
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if word.count % 2 == 1 {\n\
    \            result.append(word)\n        }\n    }\n    result.sortInPlace()\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpz2q5ugnf.swift:24:12: error: value of type '[String]' has no member\
    \ 'sortInPlace'\n    result.sortInPlace()\n    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824828
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.contains(word)\
    \ {\n            continue\n        }\n        result.append(word)\n    }\n   \
    \ result.sort { $0.count < $1.count }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp3jvynr4w/tmp3jvynr4w.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2bf167cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2bf1373b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2bf1373988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2bf13727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3jvynr4w                        0x0000555ecb6b7896 <unavailable> + 6294

    5    libc.so.6                          0x00002b2bf1868460 __libc_start_main +
    245

    6    tmp3jvynr4w                        0x0000555ecb6b7419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659824828
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.contains(word)\
    \ {\n            continue\n        }\n        if word.characters.count % 2 ==\
    \ 1 {\n            continue\n        }\n        result.append(word)\n    }\n \
    \   result.sortInPlace({ $0.characters.count > $1.characters.count })\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpnl1i13_m.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpnl1i13_m.swift:28:12:\
    \ error: value of type '[String]' has no member 'sortInPlace'\n    result.sortInPlace({\
    \ $0.characters.count > $1.characters.count })\n    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824828
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    var i = 0\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        } else {\n            i\
    \ += 1\n        }\n    }\n    result.sortInPlace({ $0.characters.count < $1.characters.count\
    \ })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpile1f1f9.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpile1f1f9.swift:27:12:\
    \ error: value of type '[String]' has no member 'sortInPlace'\n    result.sortInPlace({\
    \ $0.characters.count < $1.characters.count })\n    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824828
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ res: [String] = []\n    var i = 0\n    for word in lst {\n        if i % 2 ==\
    \ 0 {\n            res.append(word)\n        }\n        i += 1\n    }\n    res.sort()\n\
    \    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpeh9fl29q/tmpeh9fl29q.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4fcbe6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4fc8ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4fc8dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4fc8dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeh9fl29q                        0x000055dd594cc8b6 <unavailable> + 6326

    5    libc.so.6                          0x00002af4fcdd2460 __libc_start_main +
    245

    6    tmpeh9fl29q                        0x000055dd594cc439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1659824828
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        }\n    }\n    result.sort()\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp4hoexcfe.swift:20:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659824828
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if word.count % 2 == 1 {\n\
    \            result.append(word)\n        }\n    }\n    result.sortInPlace()\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpz2q5ugnf.swift:24:12: error: value of type '[String]' has no member\
    \ 'sortInPlace'\n    result.sortInPlace()\n    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824828
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ res: [String] = []\n    for word in lst {\n        if res.count < 2 {\n    \
    \        res.append(word)\n        } else {\n            if word.count > res[0].count\
    \ {\n                res[0] = word\n            } else {\n                res[1]\
    \ = word\n            }\n        }\n    }\n    return res\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpe466xle8/tmpe466xle8.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b52f8107c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b52f7dfeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b52f7dfe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b52f7dfd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe466xle8                        0x00005654254e9856 <unavailable> + 6230

    5    libc.so.6                          0x00002b52f82f3460 __libc_start_main +
    245

    6    tmpe466xle8                        0x00005654254e93d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659824828
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.count < result.count\
    \ {\n            result.append(word)\n        } else if result.count == result.count\
    \ {\n            if word.count < result[0].count {\n                result.append(word)\n\
    \            } else {\n                result.sort()\n            }\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b54cd002c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b54cccf9561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b54cccf9286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b54cccf913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b54cccf8bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b54ccaf8fc3 <unavailable> + 188355

    6    tmp8sljctva                        0x000055bcb6eb396b <unavailable> + 10603

    7    tmp8sljctva                        0x000055bcb6eb287d <unavailable> + 6269

    8    libc.so.6                          0x00002b54cd1ee460 __libc_start_main +
    245

    9    tmp8sljctva                        0x000055bcb6eb24f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1659824828
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = lst\n    for i in 0..<result.count {\n        for j in (i+1)..<result.count\
    \ {\n            if result[i].characters.count == result[j].characters.count {\n\
    \                if result[i].characters.count > result[j].characters.count {\n\
    \                    let temp = result[i]\n                    result[i] = result[j]\n\
    \                    result[j] = temp\n                }\n            }\n    \
    \    }\n    }\n    return result.sorted(by: {$0.characters.count > $1.characters.count})\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmphb3y4io8.swift:21:26: error: 'characters' is unavailable: Please\
    \ use String directly\n            if result[i].characters.count == result[j].characters.count\
    \ {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmphb3y4io8.swift:21:56: error: 'characters' is unavailable:\
    \ Please use String directly\n            if result[i].characters.count == result[j].characters.count\
    \ {\n                                                       ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmphb3y4io8.swift:22:30: error: 'characters'\
    \ is unavailable: Please use String directly\n                if result[i].characters.count\
    \ > result[j].characters.count {\n                             ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmphb3y4io8.swift:22:59: error: 'characters'\
    \ is unavailable: Please use String directly\n                if result[i].characters.count\
    \ > result[j].characters.count {\n                                           \
    \               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmphb3y4io8.swift:30:34: error: 'characters' is unavailable: Please\
    \ use String directly\n    return result.sorted(by: {$0.characters.count > $1.characters.count})\n\
    \                                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmphb3y4io8.swift:30:56: error: 'characters' is unavailable:\
    \ Please use String directly\n    return result.sorted(by: {$0.characters.count\
    \ > $1.characters.count})\n                                                  \
    \     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var"
  stdout: ''
  timestamp: 1659824828
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.count < 2 {\n\
    \            result.append(word)\n            continue\n        }\n        if\
    \ word.count > result[0].count {\n            result.append(word)\n          \
    \  continue\n        }\n        if word.count < result[1].count {\n          \
    \  result[0] = word\n            continue\n        }\n        if word.count >\
    \ result[1].count {\n            result[1] = word\n            continue\n    \
    \    }\n        if word.count < result[2].count {\n            result[2] = word\n\
    \            continue\n        }\n        if word.count > result[2].count {\n\
    \            result[2] = word\n            continue\n        }\n        if word.count\
    \ < result[3].count {\n            result[3] = word\n            continue\n  \
    \      }\n        if word.count > result[3].count {\n            result[3] = word\n\
    \            continue\n        }\n        if word.count < result[4].count {\n\
    \            result[4] = word\n            continue\n        }\n        if word.count\
    \ > result[4].count {\n            result[4] = word\n            continue\n  \
    \      }\n        if word.count < result[5].count {\n            result[5] = word\n\
    \            continue\n        }\n        if word.count > result[5].count {\n\
    \            result[5] = word\n            continue\n        }\n        if word.count\
    \ < result[6].count {\n            result[6] = word\n            continue\n  \
    \      }\n        if word.count > result[6].count {\n            result[6] = word\n\
    \            continue\n        }\n        if word.count < result[7].count {\n\
    \            result[7] = word\n            continue\n        }\n        if word.count\
    \ > result[7].count {\n            result[7] = word\n            continue\n  \
    \      }\n        if word.count < result[8].count {\n            result[8] = word\n\
    \            continue\n        }\n        if word.count > result[8].count {\n\
    \            result[8] = word\n            continue\n        }\n        if word.count\
    \ < result[9].count {\n            result[9] = word\n            continue\n  \
    \      }\n        if word.count > result[9].count {\n            result[9] = word\n\
    \            continue\n        }\n        if word.count < result[10].count {\n\
    \            result[10] = word\n            continue\n        }\n        if word.count\
    \ > result[10].count {\n            result[10] = word\n            continue\n\
    \        }\n        if word.count < result[11].count {\n            result[11]\
    \ = word\n            continue\n        }\n        if word.count > result[11].count\
    \ {\n            result[11] = word\n            continue\n        }\n        if\
    \ word.count < result[12].count {\n            result[12] = word\n           \
    \ continue\n        }\n        if word.count > result[12].count {\n          \
    \  result[12] = word\n            continue\n        }\n        if word.count <\
    \ result[13].count {\n            result[13] = word\n            continue\n  \
    \      }\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp2n9gf4sg.swift:150:91: error: expected '}' at end of brace statement\n\
    assert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\",\
    \ \"dd\", \"aaaa\", \"bbbb\"])\n                                             \
    \                                             ^\n/tmp/tmp2n9gf4sg.swift:17:49:\
    \ note: to match this opening '{'\nfunc sorted_list_sum(lst: [String]) -> [String]\
    \ {\n                                                ^\n/tmp/tmp2n9gf4sg.swift:132:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824828
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ res: [String] = []\n    for word in lst {\n        if res.count < res.count\
    \ {\n            res.append(word)\n        } else if res.count == res.count {\n\
    \            if word.count < res[res.count-1].count {\n                res[res.count-1]\
    \ = word\n            } else {\n                res[res.count] = word\n      \
    \      }\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b3fff978c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3fff66f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3fff66f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3fff66f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3fff66ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b3fff46efc3 <unavailable> + 188355

    6    tmp3fd1h27a                        0x000055ac163008b0 <unavailable> + 10416

    7    tmp3fd1h27a                        0x000055ac162ff75d <unavailable> + 5981

    8    libc.so.6                          0x00002b3fffb64460 __libc_start_main +
    245

    9    tmp3fd1h27a                        0x000055ac162ff3d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659824828
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = lst\n    for index in 0..<result.count {\n        let word = result[index]\n\
    \        if word.characters.count % 2 == 1 {\n            result.insert(word,\
    \ at: index)\n        }\n    }\n    return result.sorted(by: { $0.characters.count\
    \ > $1.characters.count })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpqr80nkzm.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpqr80nkzm.swift:25:35:\
    \ error: 'characters' is unavailable: Please use String directly\n    return result.sorted(by:\
    \ { $0.characters.count > $1.characters.count })\n                           \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpqr80nkzm.swift:25:57:\
    \ error: 'characters' is unavailable: Please use String directly\n    return result.sorted(by:\
    \ { $0.characters.count > $1.characters.count })\n                           \
    \                             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824828
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.count < 2 {\n\
    \            result.append(word)\n        } else {\n            if word.count\
    \ > result[result.count - 1].count {\n                result.append(word)\n  \
    \          } else {\n                let index = result.index(of: word)\n    \
    \            result.remove(at: index)\n                result.append(word)\n \
    \           }\n        }\n    }\n    return result.sorted(by: { $0.count > $1.count\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\"\
    , \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpxdswyb10.swift:26:36: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n                let index = result.index(of: word)\n \
    \                                  ^\n/tmp/tmpxdswyb10.swift:26:36: note: use\
    \ 'firstIndex(of:)' instead\n                let index = result.index(of: word)\n\
    \                                   ^~~~~\n                                  \
    \ firstIndex\n/tmp/tmpxdswyb10.swift:27:35: error: value of optional type 'Array<String>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<String>.Index'\
    \ (aka 'Int')\n                result.remove(at: index)\n                    \
    \              ^\n/tmp/tmpxdswyb10.swift:26:21: note: short-circuit using 'guard'\
    \ to exit this function early if the optional value contains 'nil'\n         \
    \       let index = result.index(of: word)\n                    ^\n          \
    \      guard                              else { return <#default value#> }\n\
    /tmp/tmpxdswyb10.swift:26:36: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n                let index = result.index(of:\
    \ word)\n                                   ^\n                              \
    \                     ?? <#default value#>\n/tmp/tmpxdswyb10.swift:26:36: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \                let index = result.index(of: word)\n                        \
    \           ^\n                                                  !\n/tmp/tmpxdswyb10.swift:27:35:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n                result.remove(at: index)\n                          \
    \        ^\n                                        ?? <#default value#>\n/tmp/tmpxdswyb10.swift:27:35:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n                result.remove(at: index)\n                          \
    \        ^\n                                       !\n"
  stdout: ''
  timestamp: 1659824828
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.count < 2 {\n\
    \            result.append(word)\n        } else {\n            if word.count\
    \ > result[result.count - 1].count {\n                result.append(word)\n  \
    \          } else {\n                if word.count < result[result.count - 1].count\
    \ {\n                    result.removeLast()\n                    result.append(word)\n\
    \                }\n            }\n        }\n    }\n    return result.sorted(by:\
    \ { (word1, word2) -> Bool in\n        return word1.count < word2.count\n    })\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp_px0emxb/tmp_px0emxb.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3f09db7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3f09aaeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3f09aae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3f09aad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_px0emxb                        0x00005624f8e949b6 <unavailable> + 6582

    5    libc.so.6                          0x00002b3f09fa3460 __libc_start_main +
    245

    6    tmp_px0emxb                        0x00005624f8e94539 <unavailable> + 5433

    '
  stdout: ''
  timestamp: 1659824828
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.contains(word)\
    \ {\n            continue\n        }\n        if word.count % 2 == 1 {\n     \
    \       continue\n        }\n        result.append(word)\n    }\n    result.sort\
    \ { $0.count < $1.count }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpj60_19fb/tmpj60_19fb.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1569b94c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b156988bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b156988b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b156988a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj60_19fb                        0x0000564282121f7f <unavailable> + 8063

    5    libc.so.6                          0x00002b1569d80460 __libc_start_main +
    245

    6    tmpj60_19fb                        0x00005642821214a9 <unavailable> + 5289

    '
  stdout: ''
  timestamp: 1659824828
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.contains(word)\
    \ {\n            continue\n        }\n        if word.characters.count % 2 ==\
    \ 1 {\n            continue\n        }\n        result.insert(word, at: 0)\n \
    \   }\n    return result.sorted(by: { (word1, word2) -> Bool in\n        return\
    \ word1.characters.count < word2.characters.count\n    })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpefmc7put.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpefmc7put.swift:29:22:\
    \ error: 'characters' is unavailable: Please use String directly\n        return\
    \ word1.characters.count < word2.characters.count\n                     ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpefmc7put.swift:29:47:\
    \ error: 'characters' is unavailable: Please use String directly\n        return\
    \ word1.characters.count < word2.characters.count\n                          \
    \                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659824828
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    var i = 0\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        } else {\n            result.append(word[0..<word.characters.count-1])\n\
    \        }\n    }\n    for word in result {\n        word.sort()\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpw1s_q250.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpw1s_q250.swift:24:27:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an integer\
    \ range, use a String.Index range instead.\n            result.append(word[0..<word.characters.count-1])\n\
    \                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:5:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript<R>(bounds: R) -> String where R : RangeExpression, R.Bound == Int\
    \ { get }\n           ^\n/tmp/tmpw1s_q250.swift:24:41: error: 'characters' is\
    \ unavailable: Please use String directly\n            result.append(word[0..<word.characters.count-1])\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpw1s_q250.swift:28:14: error: value of type\
    \ 'String' has no member 'sort'\n        word.sort()\n        ~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1659824828
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        }\n    }\n    result.sortInPlace({\
    \ $0.characters.count > $1.characters.count })\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp1wjyxd5k.swift:20:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp1wjyxd5k.swift:24:12:\
    \ error: value of type '[String]' has no member 'sortInPlace'\n    result.sortInPlace({\
    \ $0.characters.count > $1.characters.count })\n    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824828
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.sorted(by: { (word1, word2) -> Bool in\n        let len1 = word1.count\n\
    \        let len2 = word2.count\n        return len1 < len2\n    })\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmptkqkaxo8/tmptkqkaxo8.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ece240c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ecdf37b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ecdf37988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ecdf367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptkqkaxo8                        0x00005603a7304606 <unavailable> + 5638

    5    libc.so.6                          0x00002b3ece42c460 __libc_start_main +
    245

    6    tmptkqkaxo8                        0x00005603a7304189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659824828
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    var words = [String]()\n    for s in lst {\n      \
    \  if words.contains(s) {\n            words.append(s)\n        } else {\n   \
    \         result.append(s)\n            words.append(s)\n        }\n    }\n  \
    \  for s in words {\n        if result.contains(s) {\n            result.remove(s)\n\
    \        } else {\n            result.append(s)\n        }\n    }\n    result.sort()\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp0fqfd_id.swift:30:20: error: no exact matches in call to instance\
    \ method 'remove'\n            result.remove(s)\n                   ^\n/tmp/tmp0fqfd_id.swift:30:20:\
    \ note: candidate expects value of type 'Int' for parameter #1 (got 'String')\n\
    \            result.remove(s)\n                   ^\n/tmp/tmp0fqfd_id.swift:30:20:\
    \ note: candidate expects value of type 'Array<String>.Index' (aka 'Int') for\
    \ parameter #1 (got 'String')\n            result.remove(s)\n                \
    \   ^\n"
  stdout: ''
  timestamp: 1659824828
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ res: [String] = []\n    for word in lst {\n        if res.contains(word) {\n\
    \            continue\n        }\n        let wordLength = word.characters.count\n\
    \        if wordLength % 2 == 1 {\n            res.append(word)\n            continue\n\
    \        }\n        let index = lst.index(of: word)\n        let word1 = lst[index\
    \ - 1]\n        let word2 = lst[index + 1]\n        if word1.characters.count\
    \ == word2.characters.count {\n            let word1Length = word1.characters.count\n\
    \            let word2Length = word2.characters.count\n            if word1Length\
    \ > word2Length {\n                res.insert(word, at: index)\n            }\
    \ else {\n                res.insert(word, at: index + 1)\n            }\n   \
    \     } else {\n            res.insert(word, at: index)\n        }\n    }\n  \
    \  return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpmn1r56lc.swift:23:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let wordLength = word.characters.count\n      \
    \                        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpmn1r56lc.swift:28:25: warning: 'index(of:)' is deprecated:\
    \ renamed to 'firstIndex(of:)'\n        let index = lst.index(of: word)\n    \
    \                    ^\n/tmp/tmpmn1r56lc.swift:28:25: note: use 'firstIndex(of:)'\
    \ instead\n        let index = lst.index(of: word)\n                        ^~~~~\n\
    \                        firstIndex\n/tmp/tmpmn1r56lc.swift:29:25: error: value\
    \ of optional type 'Array<String>.Index?' (aka 'Optional<Int>') must be unwrapped\
    \ to a value of type 'Array<String>.Index' (aka 'Int')\n        let word1 = lst[index\
    \ - 1]\n                        ^\n/tmp/tmpmn1r56lc.swift:29:25: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \     let word1 = lst[index - 1]\n                        ^\n                \
    \        (     ?? <#default value#>)\n/tmp/tmpmn1r56lc.swift:29:25: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n        let\
    \ word1 = lst[index - 1]\n                        ^\n                        \
    \     !\n/tmp/tmpmn1r56lc.swift:30:25: error: value of optional type 'Array<String>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<String>.Index'\
    \ (aka 'Int')\n        let word2 = lst[index + 1]\n                        ^\n\
    /tmp/tmpmn1r56lc.swift:30:25: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n        let word2 = lst[index + 1]\n    \
    \                    ^\n                        (     ?? <#default value#>)\n\
    /tmp/tmpmn1r56lc.swift:30:25: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n        let word2 = lst[index + 1]\n \
    \                       ^\n                             !\n/tmp/tmpmn1r56lc.swift:35:38:\
    \ error: value of optional type "
  stdout: ''
  timestamp: 1659824828
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.count < 2 {\n\
    \            result.append(word)\n        } else if result.count == 2 {\n    \
    \        if word < result[1] {\n                result.append(word)\n        \
    \    } else {\n                result[1] = word\n            }\n        } else\
    \ {\n            if word < result[1] {\n                result[1] = word\n   \
    \         } else {\n                result[2] = word\n            }\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpt7lebnwq/tmpt7lebnwq.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4c9cb40c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4c9c837b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4c9c837988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4c9c8367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt7lebnwq                        0x000055e6a48118b6 <unavailable> + 6326

    5    libc.so.6                          0x00002b4c9cd2c460 __libc_start_main +
    245

    6    tmpt7lebnwq                        0x000055e6a4811439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1659824828
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        }\n    }\n    result.sortInPlace({\
    \ $0.characters.count > $1.characters.count })\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp1wjyxd5k.swift:20:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp1wjyxd5k.swift:24:12:\
    \ error: value of type '[String]' has no member 'sortInPlace'\n    result.sortInPlace({\
    \ $0.characters.count > $1.characters.count })\n    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824828
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ res = lst\n    for i in 0..<res.count {\n        if res[i].count % 2 == 1 {\n\
    \            res[i] = res[i].sorted()\n        }\n    }\n    return res\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmplhtb9did.swift:21:29: error: cannot assign value of type '[String.Element]'\
    \ (aka 'Array<Character>') to subscript of type 'String'\n            res[i] =\
    \ res[i].sorted()\n                     ~~~~~~~^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824828
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ res: [String] = []\n    for word in lst {\n        if res.contains(word) {\n\
    \            continue\n        }\n        let wordLen = word.characters.count\n\
    \        if wordLen % 2 == 1 {\n            res.append(word)\n            continue\n\
    \        }\n        let lastWord = res.last\n        let lastWordLen = lastWord.characters.count\n\
    \        if lastWordLen > wordLen {\n            res.append(word)\n          \
    \  continue\n        }\n        if lastWordLen < wordLen {\n            let lastWordIndex\
    \ = res.index(of: lastWord)!\n            let wordIndex = res.index(of: word)!\n\
    \            let temp = res[lastWordIndex..<wordIndex]\n            res[lastWordIndex..<wordIndex]\
    \ = res[wordIndex..<lastWordIndex]\n            res[wordIndex..<lastWordIndex]\
    \ = temp\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmprqt0g97e.swift:23:28: error: 'characters' is unavailable: Please\
    \ use String directly\n        let wordLen = word.characters.count\n         \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmprqt0g97e.swift:29:27: error: value of optional type 'String?' must\
    \ be unwrapped to refer to member 'characters' of wrapped base type 'String'\n\
    \        let lastWordLen = lastWord.characters.count\n                       \
    \   ^\n/tmp/tmprqt0g97e.swift:29:27: note: chain the optional using '?' to access\
    \ member 'characters' only for non-'nil' base values\n        let lastWordLen\
    \ = lastWord.characters.count\n                          ^\n                 \
    \                 ?\n/tmp/tmprqt0g97e.swift:29:27: note: force-unwrap using '!'\
    \ to abort execution if the optional value contains 'nil'\n        let lastWordLen\
    \ = lastWord.characters.count\n                          ^\n                 \
    \                 !\n/tmp/tmprqt0g97e.swift:35:47: error: value of optional type\
    \ 'String?' must be unwrapped to a value of type 'String'\n            let lastWordIndex\
    \ = res.index(of: lastWord)!\n                                              ^\n\
    /tmp/tmprqt0g97e.swift:35:47: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n            let lastWordIndex = res.index(of:\
    \ lastWord)!\n                                              ^\n              \
    \                                         ?? <#default value#>\n/tmp/tmprqt0g97e.swift:35:47:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n            let lastWordIndex = res.index(of: lastWord)!\n          \
    \                                    ^\n                                     \
    \                 !\n/tmp/tmprqt0g97e.swift:36:33: warning: 'index(of:)' is deprecated:\
    \ renamed to 'firstIndex(of:)'\n            let wordIndex = res.index(of: word)!\n\
    \                                ^\n/tmp/tmprqt0g97e.swift:36:33: note: use 'firstIndex(of:)'\
    \ instead\n   "
  stdout: ''
  timestamp: 1659824828
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.contains(word)\
    \ {\n            continue\n        }\n        let wordLength = word.characters.count\n\
    \        if wordLength % 2 == 1 {\n            result.insert(word, at: 0)\n  \
    \      } else {\n            let index = result.index(of: word)!\n           \
    \ result.remove(at: index)\n            result.insert(word, at: index)\n     \
    \   }\n    }\n    return result.sorted(by: { (word1, word2) -> Bool in\n     \
    \   let word1Length = word1.characters.count\n        let word2Length = word2.characters.count\n\
    \        return word1Length > word2Length\n    })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp9x8y8ll6.swift:23:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let wordLength = word.characters.count\n      \
    \                        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmp9x8y8ll6.swift:27:32: warning: 'index(of:)' is deprecated:\
    \ renamed to 'firstIndex(of:)'\n            let index = result.index(of: word)!\n\
    \                               ^\n/tmp/tmp9x8y8ll6.swift:27:32: note: use 'firstIndex(of:)'\
    \ instead\n            let index = result.index(of: word)!\n                 \
    \              ^~~~~\n                               firstIndex\n/tmp/tmp9x8y8ll6.swift:33:33:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ word1Length = word1.characters.count\n                                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp9x8y8ll6.swift:34:33:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ word2Length = word2.characters.count\n                                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659824828
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    var seen = [String]()\n    for s in lst {\n       \
    \ if seen.contains(s) {\n            continue\n        }\n        seen.insert(s)\n\
    \        if result.contains(s) {\n            continue\n        }\n        result.append(s)\n\
    \    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmpag4_v7er.swift:24:22: error: missing argument for parameter 'at'\
    \ in call\n        seen.insert(s)\n                     ^\n                  \
    \   , at: <#Int#>\nSwift.Array:11:37: note: 'insert(_:at:)' declared here\n  \
    \  @inlinable public mutating func insert(_ newElement: __owned Element, at i:\
    \ Int)\n                                    ^\n"
  stdout: ''
  timestamp: 1659824828
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.count > 0 {\n\
    \            if word.count > result[result.count - 1].count {\n              \
    \  result[result.count - 1] = word\n            } else {\n                result[result.count]\
    \ = word\n            }\n        } else {\n            result.append(word)\n \
    \       }\n    }\n    for index in 0..<result.count {\n        if result[index].count\
    \ % 2 == 1 {\n            result.remove(at: index)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b861de29c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b861db20561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b861db20286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b861db2013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b861db1fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b861d91f9a0 specialized Array.subscript.modify
    + 0

    6    tmpjlx5ock2                        0x000055758819eb74 <unavailable> + 11124

    7    tmpjlx5ock2                        0x000055758819d98d <unavailable> + 6541

    8    libc.so.6                          0x00002b861e015460 __libc_start_main +
    245

    9    tmpjlx5ock2                        0x000055758819d609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1659824828
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if word.count % 2 == 1 {\n\
    \            result.append(word)\n        }\n    }\n    result.sortInPlace(by:\
    \ { (word1, word2) -> Bool in\n        return word1.count < word2.count\n    })\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmptv18atzv.swift:24:12: error: value of type '[String]' has no member\
    \ 'sortInPlace'\n    result.sortInPlace(by: { (word1, word2) -> Bool in\n    ~~~~~~\
    \ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824828
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.count < 2 {\n\
    \            result.append(word)\n        } else {\n            if word.count\
    \ > result[result.count - 1].count {\n                result.append(word)\n  \
    \          } else {\n                let index = result.index(of: word)\n    \
    \            result.remove(at: index)\n                result.append(word)\n \
    \           }\n        }\n    }\n    return result.sorted(by: { $0.count > $1.count\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\"\
    , \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpxdswyb10.swift:26:36: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n                let index = result.index(of: word)\n \
    \                                  ^\n/tmp/tmpxdswyb10.swift:26:36: note: use\
    \ 'firstIndex(of:)' instead\n                let index = result.index(of: word)\n\
    \                                   ^~~~~\n                                  \
    \ firstIndex\n/tmp/tmpxdswyb10.swift:27:35: error: value of optional type 'Array<String>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<String>.Index'\
    \ (aka 'Int')\n                result.remove(at: index)\n                    \
    \              ^\n/tmp/tmpxdswyb10.swift:26:21: note: short-circuit using 'guard'\
    \ to exit this function early if the optional value contains 'nil'\n         \
    \       let index = result.index(of: word)\n                    ^\n          \
    \      guard                              else { return <#default value#> }\n\
    /tmp/tmpxdswyb10.swift:26:36: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n                let index = result.index(of:\
    \ word)\n                                   ^\n                              \
    \                     ?? <#default value#>\n/tmp/tmpxdswyb10.swift:26:36: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \                let index = result.index(of: word)\n                        \
    \           ^\n                                                  !\n/tmp/tmpxdswyb10.swift:27:35:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n                result.remove(at: index)\n                          \
    \        ^\n                                        ?? <#default value#>\n/tmp/tmpxdswyb10.swift:27:35:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n                result.remove(at: index)\n                          \
    \        ^\n                                       !\n"
  stdout: ''
  timestamp: 1659824828
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    var i = 0\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        } else {\n            i\
    \ += 1\n        }\n    }\n    result.sortInPlace()\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpap50weci.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpap50weci.swift:27:12:\
    \ error: value of type '[String]' has no member 'sortInPlace'\n    result.sortInPlace()\n\
    \    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824827
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    var i = 0\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        }\n    }\n    for word\
    \ in result {\n        if i == result.count {\n            break\n        }\n\
    \        if word.characters.count > result[i].characters.count {\n           \
    \ result.append(word)\n        }\n    }\n    for word in result {\n        if\
    \ i == result.count {\n            break\n        }\n        if word.characters.count\
    \ < result[i].characters.count {\n            result.remove(at: i)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpx75om870.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpx75om870.swift:29:17:\
    \ error: 'characters' is unavailable: Please use String directly\n        if word.characters.count\
    \ > result[i].characters.count {\n                ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpx75om870.swift:29:46: error: 'characters'\
    \ is unavailable: Please use String directly\n        if word.characters.count\
    \ > result[i].characters.count {\n                                           \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpx75om870.swift:37:17:\
    \ error: 'characters' is unavailable: Please use String directly\n        if word.characters.count\
    \ < result[i].characters.count {\n                ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpx75om870.swift:37:46: error: 'characters'\
    \ is unavailable: Please use String directly\n        if word.characters.count\
    \ < result[i].characters.count {\n                                           \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpx75om870.swift:19:9:\
    \ warning: variable 'i' was never mutated; consider changing to 'let' constant\n\
    \    var i = 0\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1659824828
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.contains(word)\
    \ {\n            continue\n        }\n        if word.characters.count % 2 ==\
    \ 1 {\n            result.append(word)\n            continue\n        }\n    \
    \    if word.characters.count > result.count {\n            result.append(word)\n\
    \            continue\n        }\n        if word.characters.count < result[result.count-1].characters.count\
    \ {\n            result.append(word)\n            continue\n        }\n      \
    \  if word.characters.count > result[result.count-1].characters.count {\n    \
    \        result.append(word)\n            continue\n        }\n        if word.characters.count\
    \ < result[result.count-1].characters.count {\n            result.append(word)\n\
    \            continue\n        }\n        if word.characters.count > result[result.count-1].characters.count\
    \ {\n            result.append(word)\n            continue\n        }\n      \
    \  if word.characters.count < result[result.count-1].characters.count {\n    \
    \        result.append(word)\n            continue\n        }\n        if word.characters.count\
    \ > result[result.count-1].characters.count {\n            result.append(word)\n\
    \            continue\n        }\n        if word.characters.count < result[result.count-1].characters.count\
    \ {\n            result.append(word)\n            continue\n        }\n      \
    \  if word.characters.count > result[result.count-1].characters.count {\n    \
    \        result.append(word)\n            continue\n        }\n        if word.characters.count\
    \ < result[result.count-1].characters.count {\n            result.append(word)\n\
    \            continue\n        }\n        if word.characters.count > result[result.count-1].characters.count\
    \ {\n            result.append(word)\n            continue\n        }\n      \
    \  if word.characters.count < result[result.count-1].characters.count {\n    \
    \        result.append(word)\n            continue\n        }\n        if word.characters.count\
    \ > result[result.count-1].characters.count {\n            result.append(word)\n\
    \            continue\n        }\n        if word.characters.count < result[result.count-1].characters.count\
    \ {\n            result.append(word)\n            continue\n        }\n      \
    \  if word.characters.count > result[result.count-1].characters.count {\n    \
    \        result.append(word)\n            continue\n        }\n        if word.characters.count\
    \ < result[result.count-1].characters.count {\n            result.append(word)\n\
    \            continue\n        }\n        if word.characters.count > result[result.count-1].characters.count\
    \ {\n            result.append(word)\n            continue\n        }\n      \
    \  if word.characters.count < result[result.count-1].characters.count {\n    \
    \        result.append(word)\n            continue\n        }\n        if word.characters.count\
    \ > result[result.count-1].characters.count {\n            result.append(word)\n\
    \            continue\n        }\n        if word.characters.count < result[result.count-1].characters.count\
    \ {\n            result.append(word)\n            continue\n        }\n      \
    \  if word.characters.count > result[result.count-1].characters.count {\n    \
    \        result.append(word)\n            continue\n        }\n        if word.characters.count\
    \ < result[result.count-1].characters.count {\n            result.append(\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp8mdkb3id.swift:113:1: error: expected expression in list of expressions\n\
    }\n^\n/tmp/tmp8mdkb3id.swift:134:91: error: expected '}' at end of brace statement\n\
    assert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\",\
    \ \"dd\", \"aaaa\", \"bbbb\"])\n                                             \
    \                                             ^\n/tmp/tmp8mdkb3id.swift:19:21:\
    \ note: to match this opening '{'\n    for word in lst {\n                   \
    \ ^\n/tmp/tmp8mdkb3id.swift:134:91: error: expected '}' at end of brace statement\n\
    assert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\",\
    \ \"dd\", \"aaaa\", \"bbbb\"])\n                                             \
    \                                             ^\n/tmp/tmp8mdkb3id.swift:17:49:\
    \ note: to match this opening '{'\nfunc sorted_list_sum(lst: [String]) -> [String]\
    \ {\n                                                ^\n/tmp/tmp8mdkb3id.swift:23:17:\
    \ error: 'characters' is unavailable: Please use String directly\n        if word.characters.count\
    \ % 2 == 1 {\n                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp8mdkb3id.swift:27:17: error: 'characters' is unavailable:\
    \ Please use String directly\n        if word.characters.count > result.count\
    \ {\n                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp8mdkb3id.swift:31:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count < result[result.count-1].characters.count\
    \ {\n                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp8mdkb3id.swift:31:59: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count < result[result.count-1].characters.count\
    \ {\n                                                          ^~~~~~~~~~\nSwift.String:5:16:\
    \ not"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    var i = 0\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        } else {\n            result.append(word.sorted())\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmp1hwn5oiq.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp1hwn5oiq.swift:24:20:\
    \ error: no exact matches in call to instance method 'append'\n            result.append(word.sorted())\n\
    \                   ^\nSwift.Array:6:37: note: candidate expects value of type\
    \ 'String' for parameter #1 (got '[String.Element]' (aka 'Array<Character>'))\n\
    \    @inlinable public mutating func append(_ newElement: __owned Element)\n \
    \                                   ^\nSwift.RangeReplaceableCollection:4:37:\
    \ note: candidate expects value of type 'String' for parameter #1 (got '[String.Element]'\
    \ (aka 'Array<Character>'))\n    @inlinable public mutating func append(_ newElement:\
    \ __owned Self.Element)\n                                    ^\n/tmp/tmp1hwn5oiq.swift:24:20:\
    \ note: found candidate with type '(__owned [String.Element]) -> ()' (aka '(__owned\
    \ Array<Character>) -> ()')\n            result.append(word.sorted())\n      \
    \             ^\n"
  stdout: ''
  timestamp: 1659824828
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.contains(word)\
    \ {\n            continue\n        }\n        result.append(word)\n    }\n   \
    \ result.sort(byLength)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmpjq32axxi.swift:25:17: error: cannot find 'byLength' in scope\n\
    \    result.sort(byLength)\n                ^~~~~~~~\n/tmp/tmpjq32axxi.swift:25:17:\
    \ error: missing argument label 'by:' in call\n    result.sort(byLength)\n   \
    \             ^\n                by: \n/tmp/tmpjq32axxi.swift:25:17: error: converting\
    \ non-escaping value to '(String, String) throws -> Bool' may allow it to escape\n\
    \    result.sort(byLength)\n                ^\n"
  stdout: ''
  timestamp: 1659824828
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.contains(word)\
    \ {\n            continue\n        }\n        if word.characters.count % 2 ==\
    \ 1 {\n            continue\n        }\n        result.insert(word, at: 0)\n \
    \   }\n    return result.sorted(by: { $0.characters.count > $1.characters.count\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\"\
    , \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpdgqouhbm.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpdgqouhbm.swift:28:35:\
    \ error: 'characters' is unavailable: Please use String directly\n    return result.sorted(by:\
    \ { $0.characters.count > $1.characters.count })\n                           \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpdgqouhbm.swift:28:57:\
    \ error: 'characters' is unavailable: Please use String directly\n    return result.sorted(by:\
    \ { $0.characters.count > $1.characters.count })\n                           \
    \                             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824828
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.contains(word)\
    \ {\n            continue\n        }\n        result.append(word)\n    }\n   \
    \ result.sort { $0.count < $1.count }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp3jvynr4w/tmp3jvynr4w.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2bf167cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2bf1373b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2bf1373988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2bf13727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3jvynr4w                        0x0000555ecb6b7896 <unavailable> + 6294

    5    libc.so.6                          0x00002b2bf1868460 __libc_start_main +
    245

    6    tmp3jvynr4w                        0x0000555ecb6b7419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659824828
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.count < 2 {\n\
    \            result.append(word)\n        } else if result.count == 2 {\n    \
    \        if word.length > result[0].count {\n                result[0] = word\n\
    \            } else {\n                result[1] = word\n            }\n     \
    \   } else {\n            if word.length > result[0].count {\n               \
    \ result[0] = word\n            } else {\n                result[1] = word\n \
    \           }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmphop2s5d5.swift:23:21: error: value of type 'String' has no member\
    \ 'length'\n            if word.length > result[0].count {\n               ~~~~\
    \ ^~~~~~\n/tmp/tmphop2s5d5.swift:29:21: error: value of type 'String' has no member\
    \ 'length'\n            if word.length > result[0].count {\n               ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824828
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    var i = 0\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        }\n    }\n    for word\
    \ in result {\n        i += 1\n    }\n    for word in result {\n        if i >\
    \ 1 {\n            if word.characters.count < result[i-1].characters.count {\n\
    \                result.remove(at: i - 1)\n            }\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpv50ng_sh.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpv50ng_sh.swift:30:21:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \ if word.characters.count < result[i-1].characters.count {\n                \
    \    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpv50ng_sh.swift:30:52:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \ if word.characters.count < result[i-1].characters.count {\n                \
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpv50ng_sh.swift:25:9: warning: immutable value 'word'\
    \ was never used; consider replacing with '_' or removing it\n    for word in\
    \ result {\n        ^~~~\n        _\n"
  stdout: ''
  timestamp: 1659824828
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ res: [String] = []\n    for str in lst {\n        if res.contains(str) {\n \
    \           continue\n        }\n        let len = str.count\n        if len %\
    \ 2 == 1 {\n            res.append(str)\n            continue\n        }\n   \
    \     let mid = len / 2\n        let left = str.prefix(mid)\n        let right\
    \ = str.suffix(mid)\n        if left < right {\n            res.append(left)\n\
    \        } else {\n            res.append(right)\n        }\n    }\n    res.sort()\n\
    \    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpjp992rt5.swift:32:17: error: no exact matches in call to instance\
    \ method 'append'\n            res.append(left)\n                ^\nSwift.Array:6:37:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'String.SubSequence'\
    \ (aka 'Substring'))\n    @inlinable public mutating func append(_ newElement:\
    \ __owned Element)\n                                    ^\nSwift.RangeReplaceableCollection:4:37:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'String.SubSequence'\
    \ (aka 'Substring'))\n    @inlinable public mutating func append(_ newElement:\
    \ __owned Self.Element)\n                                    ^\n/tmp/tmpjp992rt5.swift:32:17:\
    \ note: found candidate with type '(__owned String.SubSequence) -> ()' (aka '(__owned\
    \ Substring) -> ()')\n            res.append(left)\n                ^\n/tmp/tmpjp992rt5.swift:34:17:\
    \ error: no exact matches in call to instance method 'append'\n            res.append(right)\n\
    \                ^\nSwift.Array:6:37: note: candidate expects value of type 'String'\
    \ for parameter #1 (got 'String.SubSequence' (aka 'Substring'))\n    @inlinable\
    \ public mutating func append(_ newElement: __owned Element)\n               \
    \                     ^\nSwift.RangeReplaceableCollection:4:37: note: candidate\
    \ expects value of type 'String' for parameter #1 (got 'String.SubSequence' (aka\
    \ 'Substring'))\n    @inlinable public mutating func append(_ newElement: __owned\
    \ Self.Element)\n                                    ^\n/tmp/tmpjp992rt5.swift:34:17:\
    \ note: found candidate with type '(__owned String.SubSequence) -> ()' (aka '(__owned\
    \ Substring) -> ()')\n            res.append(right)\n                ^\n"
  stdout: ''
  timestamp: 1659824828
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.contains(word)\
    \ {\n            continue\n        }\n        let wordLength = word.characters.count\n\
    \        if wordLength % 2 == 1 {\n            result.insert(word, at: 0)\n  \
    \      } else {\n            result.insert(word, at: result.count - 1)\n     \
    \   }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp2qj_xf2g.swift:23:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let wordLength = word.characters.count\n      \
    \                        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n"
  stdout: ''
  timestamp: 1659824827
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.count < 2 {\n\
    \            result.append(word)\n            continue\n        }\n        if\
    \ word.count > result[0].count {\n            result.append(word)\n          \
    \  continue\n        }\n        if word.count < result[1].count {\n          \
    \  result[1] = word\n            continue\n        }\n        if word.count >\
    \ result[2].count {\n            result[2] = word\n            continue\n    \
    \    }\n        if word.count < result[3].count {\n            result[3] = word\n\
    \            continue\n        }\n        if word.count > result[4].count {\n\
    \            result[4] = word\n            continue\n        }\n        if word.count\
    \ < result[5].count {\n            result[5] = word\n            continue\n  \
    \      }\n        if word.count > result[6].count {\n            result[6] = word\n\
    \            continue\n        }\n        if word.count < result[7].count {\n\
    \            result[7] = word\n            continue\n        }\n        if word.count\
    \ > result[8].count {\n            result[8] = word\n            continue\n  \
    \      }\n        if word.count < result[9].count {\n            result[9] = word\n\
    \            continue\n        }\n        if word.count > result[10].count {\n\
    \            result[10] = word\n            continue\n        }\n        if word.count\
    \ < result[11].count {\n            result[11] = word\n            continue\n\
    \        }\n        if word.count > result[12].count {\n            result[12]\
    \ = word\n            continue\n        }\n        if word.count < result[13].count\
    \ {\n            result[13] = word\n            continue\n        }\n        if\
    \ word.count > result[14].count {\n            result[14] = word\n           \
    \ continue\n        }\n        if word.count < result[15].count {\n          \
    \  result[15] = word\n            continue\n        }\n        if word.count >\
    \ result[16].count {\n            result[16] = word\n            continue\n  \
    \      }\n        if word.count < result[17].count {\n            result[17] =\
    \ word\n            continue\n        }\n        if word.count > result[18].count\
    \ {\n            result[18] = word\n            continue\n        }\n        if\
    \ word.count < result[19].count {\n            result[19] = word\n           \
    \ continue\n        }\n        if word.count > result[20].count {\n          \
    \  result[20] = word\n            continue\n        }\n        if word.count <\
    \ result[21].count {\n            result[21] = word\n            continue\n  \
    \      }\n        if word.count > result[22].count {\n            result[22] =\
    \ word\n            continue\n        }\n        if word.count < result[23].count\
    \ {\n            result[23] = word\n            continue\n        }\n        if\
    \ word.count > result[24].count {\n            result[24] = word\n           \
    \ continue\n        }\n        if word.count < result[\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpbnxpc8nm.swift:125:1: error: expected expression in list of expressions\n\
    }\n^\n/tmp/tmpbnxpc8nm.swift:146:91: error: expected '}' at end of brace statement\n\
    assert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\",\
    \ \"dd\", \"aaaa\", \"bbbb\"])\n                                             \
    \                                             ^\n/tmp/tmpbnxpc8nm.swift:17:49:\
    \ note: to match this opening '{'\nfunc sorted_list_sum(lst: [String]) -> [String]\
    \ {\n                                                ^\n/tmp/tmpbnxpc8nm.swift:124:23:\
    \ error: binary operator '<' cannot be applied to operands of type 'Int' and 'String'\n\
    \        if word.count < result[\n           ~~~~~~~~~~ ^ ~~~~~~~\n/tmp/tmpbnxpc8nm.swift:124:23:\
    \ note: overloads for '<' exist with these partially matching parameter lists:\
    \ (Int, Int), (String, String)\n        if word.count < result[\n            \
    \          ^\n/tmp/tmpbnxpc8nm.swift:124:31: error: missing argument for parameter\
    \ #1 in call\n        if word.count < result[\n                              ^\n\
    \                              <#Int#>\nSwift.Array:16:23: note: 'subscript(_:)'\
    \ declared here\n    @inlinable public subscript(index: Int) -> Element { get\
    \ set }\n                      ^\n/tmp/tmpbnxpc8nm.swift:128:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    var i = 0\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        } else {\n            i\
    \ += 1\n        }\n    }\n    result.sort(by: { (word1, word2) -> Bool in\n  \
    \      if word1.characters.count < word2.characters.count {\n            return\
    \ true\n        }\n        if word1.characters.count > word2.characters.count\
    \ {\n            return false\n        }\n        return word1 < word2\n    })\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpzh3p9428.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpzh3p9428.swift:28:18:\
    \ error: 'characters' is unavailable: Please use String directly\n        if word1.characters.count\
    \ < word2.characters.count {\n                 ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpzh3p9428.swift:28:43: error: 'characters'\
    \ is unavailable: Please use String directly\n        if word1.characters.count\
    \ < word2.characters.count {\n                                          ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpzh3p9428.swift:31:18:\
    \ error: 'characters' is unavailable: Please use String directly\n        if word1.characters.count\
    \ > word2.characters.count {\n                 ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpzh3p9428.swift:31:43: error: 'characters'\
    \ is unavailable: Please use String directly\n        if word1.characters.count\
    \ > word2.characters.count {\n                                          ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659824828
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    var i = 0\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        } else {\n            i\
    \ += 1\n        }\n    }\n    result.sortInPlace()\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpap50weci.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpap50weci.swift:27:12:\
    \ error: value of type '[String]' has no member 'sortInPlace'\n    result.sortInPlace()\n\
    \    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824827
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = lst\n    for index in 0..<result.count {\n        let word = result[index]\n\
    \        let length = word.characters.count\n        if length % 2 == 1 {\n  \
    \          result.remove(at: index)\n        }\n    }\n    return result.sorted(by:\
    \ { (word1, word2) -> Bool in\n        let length1 = word1.characters.count\n\
    \        let length2 = word2.characters.count\n        return length1 < length2\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\",\
    \ \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpsjuzqm9x.swift:21:27: error: 'characters' is unavailable: Please\
    \ use String directly\n        let length = word.characters.count\n          \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpsjuzqm9x.swift:27:29: error: 'characters' is unavailable: Please\
    \ use String directly\n        let length1 = word1.characters.count\n        \
    \                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpsjuzqm9x.swift:28:29: error: 'characters' is unavailable: Please\
    \ use String directly\n        let length2 = word2.characters.count\n        \
    \                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.count < 2 {\n\
    \            result.append(word)\n        } else if result.count == 2 {\n    \
    \        if word.length < result[0].length {\n                result.append(word)\n\
    \            } else {\n                if word.length > result[0].length {\n \
    \                   result[0] = word\n                }\n            }\n     \
    \   } else {\n            if word.length < result[0].length {\n              \
    \  result.append(word)\n            } else {\n                if word.length >\
    \ result[0].length {\n                    result[0] = word\n                }\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmph5bx8lfn.swift:23:21: error: value of type 'String' has no member\
    \ 'length'\n            if word.length < result[0].length {\n               ~~~~\
    \ ^~~~~~\n/tmp/tmph5bx8lfn.swift:23:40: error: value of type 'String' has no member\
    \ 'length'\n            if word.length < result[0].length {\n                \
    \             ~~~~~~~~~ ^~~~~~\n/tmp/tmph5bx8lfn.swift:26:25: error: value of\
    \ type 'String' has no member 'length'\n                if word.length > result[0].length\
    \ {\n                   ~~~~ ^~~~~~\n/tmp/tmph5bx8lfn.swift:26:44: error: value\
    \ of type 'String' has no member 'length'\n                if word.length > result[0].length\
    \ {\n                                 ~~~~~~~~~ ^~~~~~\n/tmp/tmph5bx8lfn.swift:31:21:\
    \ error: value of type 'String' has no member 'length'\n            if word.length\
    \ < result[0].length {\n               ~~~~ ^~~~~~\n/tmp/tmph5bx8lfn.swift:31:40:\
    \ error: value of type 'String' has no member 'length'\n            if word.length\
    \ < result[0].length {\n                             ~~~~~~~~~ ^~~~~~\n/tmp/tmph5bx8lfn.swift:34:25:\
    \ error: value of type 'String' has no member 'length'\n                if word.length\
    \ > result[0].length {\n                   ~~~~ ^~~~~~\n/tmp/tmph5bx8lfn.swift:34:44:\
    \ error: value of type 'String' has no member 'length'\n                if word.length\
    \ > result[0].length {\n                                 ~~~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\",\
    \ \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp6vr9z24_/tmp6vr9z24_.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4b7e745c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4b7e43cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4b7e43c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4b7e43b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6vr9z24_                        0x0000564db6228546 <unavailable> + 5446

    5    libc.so.6                          0x00002b4b7e931460 __libc_start_main +
    245

    6    tmp6vr9z24_                        0x0000564db62280c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824828
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.contains(word)\
    \ {\n            continue\n        }\n        if word.characters.count % 2 ==\
    \ 1 {\n            result.append(word)\n            continue\n        }\n    \
    \    var i = 0\n        var j = word.characters.count - 1\n        while i < j\
    \ {\n            if word.characters.count > 1 {\n                if word.characters[i]\
    \ != word.characters[j] {\n                    break\n                }\n    \
    \        }\n            i += 1\n            j -= 1\n        }\n        if i ==\
    \ j {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmptvg886rl.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmptvg886rl.swift:28:22:\
    \ error: 'characters' is unavailable: Please use String directly\n        var\
    \ j = word.characters.count - 1\n                     ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmptvg886rl.swift:30:21: error: 'characters'\
    \ is unavailable: Please use String directly\n            if word.characters.count\
    \ > 1 {\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmptvg886rl.swift:31:20: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \       if word.characters[i] != word.characters[j] {\n                   ^~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmptvg886rl.swift:31:25:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \     if word.characters[i] != word.characters[j] {\n                        ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmptvg886rl.swift:31:42:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n                if word.characters[i] != word.characters[j]\
    \ {\n                                         ^~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmptvg886rl.swift:31:47:\
    \ error: 'characters' is unavailab"
  stdout: ''
  timestamp: 1659824829
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.count < 2 {\n\
    \            result.append(word)\n        } else if result.count > 2 {\n     \
    \       if word.count < result[0].count {\n                result.removeFirst()\n\
    \                result.append(word)\n            } else {\n                if\
    \ word.count > result[1].count {\n                    result.removeLast()\n  \
    \                  result.append(word)\n                } else {\n           \
    \         if word.count > result[0].count {\n                        result.removeFirst()\n\
    \                        result.removeLast()\n                        result.append(word)\n\
    \                    }\n                }\n            }\n        } else {\n \
    \           if word.count < result[0].count {\n                result.removeFirst()\n\
    \                result.append(word)\n            } else {\n                if\
    \ word.count > result[1].count {\n                    result.removeLast()\n  \
    \                  result.append(word)\n                } else {\n           \
    \         if word.count > result[0].count {\n                        result.removeFirst()\n\
    \                        result.removeLast()\n                        result.append(word)\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpbvooaeio/tmpbvooaeio.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b40543b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b40540aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b40540ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b40540ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbvooaeio                        0x0000555ed8a599a6 <unavailable> + 6566

    5    libc.so.6                          0x00002b40545a3460 __libc_start_main +
    245

    6    tmpbvooaeio                        0x0000555ed8a59529 <unavailable> + 5417

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.count < 2 {\n\
    \            result.append(word)\n            continue\n        }\n        if\
    \ word.count > result[result.count - 1].count {\n            result.append(word)\n\
    \            continue\n        }\n        if word.count < result[result.count\
    \ - 2].count {\n            result.append(word)\n            continue\n      \
    \  }\n        if word.count > result[result.count - 3].count {\n            result.append(word)\n\
    \            continue\n        }\n        if word.count < result[result.count\
    \ - 4].count {\n            result.append(word)\n            continue\n      \
    \  }\n        if word.count > result[result.count - 5].count {\n            result.append(word)\n\
    \            continue\n        }\n        if word.count < result[result.count\
    \ - 6].count {\n            result.append(word)\n            continue\n      \
    \  }\n        if word.count > result[result.count - 7].count {\n            result.append(word)\n\
    \            continue\n        }\n        if word.count < result[result.count\
    \ - 8].count {\n            result.append(word)\n            continue\n      \
    \  }\n        if word.count > result[result.count - 9].count {\n            result.append(word)\n\
    \            continue\n        }\n        if word.count < result[result.count\
    \ - 10].count {\n            result.append(word)\n            continue\n     \
    \   }\n        if word.count > result[result.count - 11].count {\n           \
    \ result.append(word)\n            continue\n        }\n        if word.count\
    \ < result[result.count - 12].count {\n            result.append(word)\n     \
    \       continue\n        }\n        if word.count > result[result.count - 13].count\
    \ {\n            result.append(word)\n            continue\n        }\n      \
    \  if word.count < result[result.count - 14].count {\n            result.append(word)\n\
    \            continue\n        }\n        if word.count > result[result.count\
    \ - 15].count {\n            result.append(word)\n            continue\n     \
    \   }\n        if word.count < result[result.count - 16].count {\n           \
    \ result.append(word)\n            continue\n        }\n        if word.count\
    \ > result[result.count - 17].count {\n            result.append(word)\n     \
    \       continue\n        }\n        if word.count < result[result.count - 18].count\
    \ {\n            result.append(word)\n            continue\n        }\n      \
    \  if word.count > result[result.count - 19].count {\n            result.append(word)\n\
    \            continue\n        }\n        if word.count < result[result.count\
    \ - 20].count {\n            result.append(word)\n            continue\n     \
    \   }\n        if word.count > result[result.count - 21].count {\n           \
    \ result.append(word)\n            continue\n        }\n        if word.count\
    \ < result[result.count - 22].count {\n            result.append(word)\n     \
    \       continue\n        }\n        if word.count > result[result.count - 23].count\
    \ {\n            result.append(word)\n            continue\n        }\n      \
    \  if word.count < \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpaniyqqiw.swift:117:1: error: expected expression after operator\n\
    }\n^\n/tmp/tmpaniyqqiw.swift:138:91: error: expected '}' at end of brace statement\n\
    assert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\",\
    \ \"dd\", \"aaaa\", \"bbbb\"])\n                                             \
    \                                             ^\n/tmp/tmpaniyqqiw.swift:17:49:\
    \ note: to match this opening '{'\nfunc sorted_list_sum(lst: [String]) -> [String]\
    \ {\n                                                ^\n/tmp/tmpaniyqqiw.swift:120:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    var i = 0\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        } else {\n            i\
    \ += 1\n        }\n    }\n    result.sortInPlace({ $0.characters.count > $1.characters.count\
    \ })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp5rdso736.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp5rdso736.swift:27:12:\
    \ error: value of type '[String]' has no member 'sortInPlace'\n    result.sortInPlace({\
    \ $0.characters.count > $1.characters.count })\n    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ res = lst\n    for index in 0..<res.count {\n        if res[index].count % 2\
    \ == 1 {\n            res[index] = res[index].sorted()\n        }\n    }\n   \
    \ return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp2ged6ap9.swift:21:37: error: cannot assign value of type '[String.Element]'\
    \ (aka 'Array<Character>') to subscript of type 'String'\n            res[index]\
    \ = res[index].sorted()\n                         ~~~~~~~~~~~^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.count > 0 {\n\
    \            if word.count > result[result.count - 1].count {\n              \
    \  result.append(word)\n            } else {\n                let index = result.index(of:\
    \ word)\n                result.remove(at: index)\n                result.append(word)\n\
    \            }\n        } else {\n            result.append(word)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpwwxya0h5.swift:24:36: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n                let index = result.index(of: word)\n \
    \                                  ^\n/tmp/tmpwwxya0h5.swift:24:36: note: use\
    \ 'firstIndex(of:)' instead\n                let index = result.index(of: word)\n\
    \                                   ^~~~~\n                                  \
    \ firstIndex\n/tmp/tmpwwxya0h5.swift:25:35: error: value of optional type 'Array<String>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<String>.Index'\
    \ (aka 'Int')\n                result.remove(at: index)\n                    \
    \              ^\n/tmp/tmpwwxya0h5.swift:24:21: note: short-circuit using 'guard'\
    \ to exit this function early if the optional value contains 'nil'\n         \
    \       let index = result.index(of: word)\n                    ^\n          \
    \      guard                              else { return <#default value#> }\n\
    /tmp/tmpwwxya0h5.swift:24:36: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n                let index = result.index(of:\
    \ word)\n                                   ^\n                              \
    \                     ?? <#default value#>\n/tmp/tmpwwxya0h5.swift:24:36: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \                let index = result.index(of: word)\n                        \
    \           ^\n                                                  !\n/tmp/tmpwwxya0h5.swift:25:35:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n                result.remove(at: index)\n                          \
    \        ^\n                                        ?? <#default value#>\n/tmp/tmpwwxya0h5.swift:25:35:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n                result.remove(at: index)\n                          \
    \        ^\n                                       !\n"
  stdout: ''
  timestamp: 1659824827
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    var i = 0\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        } else {\n            i\
    \ += 1\n        }\n    }\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.insert(i, word)\n            i += 1\n       \
    \ }\n    }\n    result.sortInPlace({ $0.characters.count < $1.characters.count\
    \ })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpx6kju2xu.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpx6kju2xu.swift:28:17:\
    \ error: 'characters' is unavailable: Please use String directly\n        if word.characters.count\
    \ % 2 == 1 {\n                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpx6kju2xu.swift:29:13: error: instance method 'insert(contentsOf:at:)'\
    \ requires that 'Int' conform to 'Collection'\n            result.insert(i, word)\n\
    \            ^\nSwift.RangeReplaceableCollection:7:37: note: where 'C' = 'Int'\n\
    \    @inlinable public mutating func insert<C>(contentsOf newElements: __owned\
    \ C, at i: Self.Index) where C : Collection, Self.Element == C.Element\n     \
    \                               ^\n/tmp/tmpx6kju2xu.swift:29:26: error: missing\
    \ argument labels 'contentsOf:at:' in call\n            result.insert(i, word)\n\
    \                         ^\n                          contentsOf:  at: \n/tmp/tmpx6kju2xu.swift:29:30:\
    \ error: cannot convert value of type 'String' to expected argument type 'Array<String>.Index'\
    \ (aka 'Int')\n            result.insert(i, word)\n                          \
    \   ^\n/tmp/tmpx6kju2xu.swift:33:12: error: value of type '[String]' has no member\
    \ 'sortInPlace'\n    result.sortInPlace({ $0.characters.count < $1.characters.count\
    \ })\n    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        }\n    }\n    result.sort\
    \ { (word1, word2) -> Bool in\n        return word1.characters.count < word2.characters.count\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp5r8vgxd8.swift:20:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp5r8vgxd8.swift:25:22:\
    \ error: 'characters' is unavailable: Please use String directly\n        return\
    \ word1.characters.count < word2.characters.count\n                     ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp5r8vgxd8.swift:25:47:\
    \ error: 'characters' is unavailable: Please use String directly\n        return\
    \ word1.characters.count < word2.characters.count\n                          \
    \                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ res = lst\n    for index in 0..<res.count {\n        let word = res[index]\n\
    \        let length = word.characters.count\n        if length % 2 == 1 {\n  \
    \          res[index] = word.characters.sorted()\n        }\n    }\n    return\
    \ res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\",\
    \ \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpwhb8top9.swift:21:27: error: 'characters' is unavailable: Please\
    \ use String directly\n        let length = word.characters.count\n          \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpwhb8top9.swift:23:42: error: cannot assign value of type '[String.Element]'\
    \ (aka 'Array<Character>') to subscript of type 'String'\n            res[index]\
    \ = word.characters.sorted()\n                         ~~~~~~~~~~~~~~~~^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.count > 0 {\n\
    \            if word.count > result[result.count - 1].count {\n              \
    \  result.append(word)\n            } else {\n                for i in 0..<result.count\
    \ {\n                    if word.count < result[i].count {\n                 \
    \       result.removeAtIndex(i)\n                        break\n             \
    \       }\n                }\n                result.append(word)\n          \
    \  }\n        } else {\n            result.append(word)\n        }\n    }\n  \
    \  return result.sorted(by: {$0.count > $1.count})\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp_ykhmaba.swift:26:32: error: value of type '[String]' has no member\
    \ 'removeAtIndex'\n                        result.removeAtIndex(i)\n         \
    \               ~~~~~~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    var seen = [String]()\n    for word in lst {\n    \
    \    if seen.contains(word) {\n            continue\n        }\n        seen.insert(word)\n\
    \        if result.contains(word) {\n            continue\n        }\n       \
    \ result.append(word)\n    }\n    result.sort(byLength)\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpiqnzdles.swift:24:25: error: missing argument for parameter 'at'\
    \ in call\n        seen.insert(word)\n                        ^\n            \
    \            , at: <#Int#>\nSwift.Array:11:37: note: 'insert(_:at:)' declared\
    \ here\n    @inlinable public mutating func insert(_ newElement: __owned Element,\
    \ at i: Int)\n                                    ^\n/tmp/tmpiqnzdles.swift:30:17:\
    \ error: cannot find 'byLength' in scope\n    result.sort(byLength)\n        \
    \        ^~~~~~~~\n/tmp/tmpiqnzdles.swift:30:17: error: missing argument label\
    \ 'by:' in call\n    result.sort(byLength)\n                ^\n              \
    \  by: \n/tmp/tmpiqnzdles.swift:30:17: error: converting non-escaping value to\
    \ '(String, String) throws -> Bool' may allow it to escape\n    result.sort(byLength)\n\
    \                ^\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ res: [String] = []\n    var i = 0\n    for word in lst {\n        if i % 2 ==\
    \ 0 {\n            res.append(word)\n        }\n        i += 1\n    }\n    res.sort()\n\
    \    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpeh9fl29q/tmpeh9fl29q.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4fcbe6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4fc8ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4fc8dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4fc8dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeh9fl29q                        0x000055dd594cc8b6 <unavailable> + 6326

    5    libc.so.6                          0x00002af4fcdd2460 __libc_start_main +
    245

    6    tmpeh9fl29q                        0x000055dd594cc439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1659824828
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.count > 0 {\n\
    \            if word.count > result[result.count - 1].count {\n              \
    \  result.append(word)\n            } else {\n                for i in 0..<result.count\
    \ {\n                    if word.count < result[i].count {\n                 \
    \       result.removeAtIndex(i)\n                        break\n             \
    \       }\n                }\n                result.append(word)\n          \
    \  }\n        } else {\n            result.append(word)\n        }\n    }\n  \
    \  result.sortInPlace({ $0.count < $1.count })\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpshis2nz_.swift:26:32: error: value of type '[String]' has no member\
    \ 'removeAtIndex'\n                        result.removeAtIndex(i)\n         \
    \               ~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmpshis2nz_.swift:36:12: error: value\
    \ of type '[String]' has no member 'sortInPlace'\n    result.sortInPlace({ $0.count\
    \ < $1.count })\n    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    var i = 0\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        } else {\n            i\
    \ += 1\n        }\n    }\n    result.sort(byLength)\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp19r7vslf.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp19r7vslf.swift:27:17:\
    \ error: cannot find 'byLength' in scope\n    result.sort(byLength)\n        \
    \        ^~~~~~~~\n/tmp/tmp19r7vslf.swift:27:17: error: missing argument label\
    \ 'by:' in call\n    result.sort(byLength)\n                ^\n              \
    \  by: \n/tmp/tmp19r7vslf.swift:27:17: error: converting non-escaping value to\
    \ '(String, String) throws -> Bool' may allow it to escape\n    result.sort(byLength)\n\
    \                ^\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    var i = 0\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        } else {\n            i\
    \ += 1\n        }\n    }\n    result.sort(by: { (word1, word2) -> Bool in\n  \
    \      if word1.characters.count > word2.characters.count {\n            return\
    \ true\n        } else if word1.characters.count == word2.characters.count {\n\
    \            return word1 < word2\n        } else {\n            return false\n\
    \        }\n    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmptlxr0hj2.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmptlxr0hj2.swift:28:18:\
    \ error: 'characters' is unavailable: Please use String directly\n        if word1.characters.count\
    \ > word2.characters.count {\n                 ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmptlxr0hj2.swift:28:43: error: 'characters'\
    \ is unavailable: Please use String directly\n        if word1.characters.count\
    \ > word2.characters.count {\n                                          ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmptlxr0hj2.swift:30:25:\
    \ error: 'characters' is unavailable: Please use String directly\n        } else\
    \ if word1.characters.count == word2.characters.count {\n                    \
    \    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmptlxr0hj2.swift:30:51:\
    \ error: 'characters' is unavailable: Please use String directly\n        } else\
    \ if word1.characters.count == word2.characters.count {\n                    \
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.contains(word)\
    \ {\n            continue\n        }\n        if word.characters.count % 2 ==\
    \ 1 {\n            continue\n        }\n        result.insert(word, at: 0)\n \
    \   }\n    return result.sorted(by: { $0.characters.count > $1.characters.count\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\"\
    , \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpdgqouhbm.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpdgqouhbm.swift:28:35:\
    \ error: 'characters' is unavailable: Please use String directly\n    return result.sorted(by:\
    \ { $0.characters.count > $1.characters.count })\n                           \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpdgqouhbm.swift:28:57:\
    \ error: 'characters' is unavailable: Please use String directly\n    return result.sorted(by:\
    \ { $0.characters.count > $1.characters.count })\n                           \
    \                             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824828
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    var i = 0\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        } else {\n            i\
    \ += 1\n        }\n    }\n    result.sortInPlace()\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpap50weci.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpap50weci.swift:27:12:\
    \ error: value of type '[String]' has no member 'sortInPlace'\n    result.sortInPlace()\n\
    \    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824827
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ res = lst\n    for index in 0..<res.count {\n        if res[index].count % 2\
    \ == 1 {\n            res[index].sort { $0 < $1 }\n        }\n    }\n    return\
    \ res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\",\
    \ \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpymj1pvat.swift:21:16: error: no exact matches in call to subscript\
    \ \n            res[index].sort { $0 < $1 }\n               ^\nSwift.Array:17:23:\
    \ note: candidate expects value of type 'Range<Int>' for parameter #1 (got 'Int')\n\
    \    @inlinable public subscript(bounds: Range<Int>) -> ArraySlice<Element> {\
    \ get set }\n                      ^\nSwift.MutableCollection:3:23: note: candidate\
    \ expects value of type '(UnboundedRange_) -> ()' for parameter #1 (got 'Int')\n\
    \    @inlinable public subscript(x: (UnboundedRange_) -> ()) -> Self.SubSequence\
    \ { get set }\n                      ^\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.count > 0 {\n\
    \            if word.count > result[result.count - 1].count {\n              \
    \  result.append(word)\n            } else {\n                for i in 0..<result.count\
    \ {\n                    if word.count > result[i].count {\n                 \
    \       result.removeAtIndex(i)\n                        break\n             \
    \       }\n                }\n                result.append(word)\n          \
    \  }\n        } else {\n            result.append(word)\n        }\n    }\n  \
    \  return result.sorted(by: {$0.count > $1.count})\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpsoz1h6be.swift:26:32: error: value of type '[String]' has no member\
    \ 'removeAtIndex'\n                        result.removeAtIndex(i)\n         \
    \               ~~~~~~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if word.count % 2 == 1 {\n\
    \            result.append(word)\n        }\n    }\n    result.sortInPlace()\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpz2q5ugnf.swift:24:12: error: value of type '[String]' has no member\
    \ 'sortInPlace'\n    result.sortInPlace()\n    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824828
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.count > 0 {\n\
    \            if word.count > result[result.count - 1].count {\n              \
    \  result.append(word)\n            } else {\n                let index = result.index(of:\
    \ word)\n                result.remove(at: index)\n                result.append(word)\n\
    \            }\n        } else {\n            result.append(word)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpwwxya0h5.swift:24:36: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n                let index = result.index(of: word)\n \
    \                                  ^\n/tmp/tmpwwxya0h5.swift:24:36: note: use\
    \ 'firstIndex(of:)' instead\n                let index = result.index(of: word)\n\
    \                                   ^~~~~\n                                  \
    \ firstIndex\n/tmp/tmpwwxya0h5.swift:25:35: error: value of optional type 'Array<String>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<String>.Index'\
    \ (aka 'Int')\n                result.remove(at: index)\n                    \
    \              ^\n/tmp/tmpwwxya0h5.swift:24:21: note: short-circuit using 'guard'\
    \ to exit this function early if the optional value contains 'nil'\n         \
    \       let index = result.index(of: word)\n                    ^\n          \
    \      guard                              else { return <#default value#> }\n\
    /tmp/tmpwwxya0h5.swift:24:36: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n                let index = result.index(of:\
    \ word)\n                                   ^\n                              \
    \                     ?? <#default value#>\n/tmp/tmpwwxya0h5.swift:24:36: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \                let index = result.index(of: word)\n                        \
    \           ^\n                                                  !\n/tmp/tmpwwxya0h5.swift:25:35:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n                result.remove(at: index)\n                          \
    \        ^\n                                        ?? <#default value#>\n/tmp/tmpwwxya0h5.swift:25:35:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n                result.remove(at: index)\n                          \
    \        ^\n                                       !\n"
  stdout: ''
  timestamp: 1659824827
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    var i = 0\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        } else {\n            i\
    \ += 1\n        }\n    }\n    result.sort(byLength)\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp19r7vslf.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp19r7vslf.swift:27:17:\
    \ error: cannot find 'byLength' in scope\n    result.sort(byLength)\n        \
    \        ^~~~~~~~\n/tmp/tmp19r7vslf.swift:27:17: error: missing argument label\
    \ 'by:' in call\n    result.sort(byLength)\n                ^\n              \
    \  by: \n/tmp/tmp19r7vslf.swift:27:17: error: converting non-escaping value to\
    \ '(String, String) throws -> Bool' may allow it to escape\n    result.sort(byLength)\n\
    \                ^\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.count > 0 {\n\
    \            if word.count > result[result.count - 1].count {\n              \
    \  result.append(word)\n            } else {\n                for i in 0..<result.count\
    \ {\n                    if word.count > result[i].count {\n                 \
    \       result[i] = word\n                        break\n                    }\n\
    \                }\n            }\n        } else {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpv0_8cv8d/tmpv0_8cv8d.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b647b3fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b647b0f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b647b0f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b647b0f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv0_8cv8d                        0x0000564a98a2aa36 <unavailable> + 6710

    5    libc.so.6                          0x00002b647b5e8460 __libc_start_main +
    245

    6    tmpv0_8cv8d                        0x0000564a98a2a5b9 <unavailable> + 5561

    '
  stdout: ''
  timestamp: 1659824828
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    var i = 0\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        } else {\n            i\
    \ += 1\n        }\n    }\n    result.sortInPlace({ $0.characters.count > $1.characters.count\
    \ })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp5rdso736.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp5rdso736.swift:27:12:\
    \ error: value of type '[String]' has no member 'sortInPlace'\n    result.sortInPlace({\
    \ $0.characters.count > $1.characters.count })\n    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = lst\n    for index in 0..<result.count {\n        if result[index].count\
    \ % 2 == 1 {\n            result.removeAtIndex(index)\n        }\n    }\n    return\
    \ result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp3k63mzt_.swift:21:20: error: value of type '[String]' has no member\
    \ 'removeAtIndex'\n            result.removeAtIndex(index)\n            ~~~~~~\
    \ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.contains(word)\
    \ {\n            continue\n        }\n        if word.characters.count % 2 ==\
    \ 1 {\n            result.append(word)\n            continue\n        }\n    \
    \    let index = result.index(of: word)\n        if index == nil {\n         \
    \   result.append(word)\n            continue\n        }\n        if result[index!].characters.count\
    \ > word.characters.count {\n            result[index!] = word\n        }\n  \
    \  }\n    return result.sorted(by: { $0.characters.count < $1.characters.count\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\"\
    , \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmplsc7eol9.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmplsc7eol9.swift:27:28:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        let\
    \ index = result.index(of: word)\n                           ^\n/tmp/tmplsc7eol9.swift:27:28:\
    \ note: use 'firstIndex(of:)' instead\n        let index = result.index(of: word)\n\
    \                           ^~~~~\n                           firstIndex\n/tmp/tmplsc7eol9.swift:32:27:\
    \ error: 'characters' is unavailable: Please use String directly\n        if result[index!].characters.count\
    \ > word.characters.count {\n                          ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmplsc7eol9.swift:32:51: error: 'characters'\
    \ is unavailable: Please use String directly\n        if result[index!].characters.count\
    \ > word.characters.count {\n                                                \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmplsc7eol9.swift:36:35:\
    \ error: 'characters' is unavailable: Please use String directly\n    return result.sorted(by:\
    \ { $0.characters.count < $1.characters.count })\n                           \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmplsc7eol9.swift:36:57:\
    \ error: 'characters' is unavailable: Please use String directly\n    return result.sorted(by:\
    \ { $0.characters.count < $1.characters.count })\n                           \
    \                             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ res: [String] = []\n    for str in lst {\n        if res.contains(str) {\n \
    \           continue\n        }\n        res.append(str)\n    }\n    res.sortInPlace()\n\
    \    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpqwhgqwya.swift:25:9: error: value of type '[String]' has no member\
    \ 'sortInPlace'\n    res.sortInPlace()\n    ~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.contains(word)\
    \ {\n            continue\n        }\n        if word.characters.count % 2 ==\
    \ 1 {\n            continue\n        }\n        if let index = result.index(of:\
    \ word) {\n            result[index] = word\n        } else {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmpiw91w155.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpiw91w155.swift:26:31:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        if\
    \ let index = result.index(of: word) {\n                              ^\n/tmp/tmpiw91w155.swift:26:31:\
    \ note: use 'firstIndex(of:)' instead\n        if let index = result.index(of:\
    \ word) {\n                              ^~~~~\n                             \
    \ firstIndex\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ res = lst\n    for index in 0..<res.count {\n        if res[index].count % 2\
    \ == 1 {\n            res[index] = res[index].sorted()\n        }\n    }\n   \
    \ return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp2ged6ap9.swift:21:37: error: cannot assign value of type '[String.Element]'\
    \ (aka 'Array<Character>') to subscript of type 'String'\n            res[index]\
    \ = res[index].sorted()\n                         ~~~~~~~~~~~^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.contains(word)\
    \ {\n            continue\n        }\n        if word.characters.count % 2 ==\
    \ 1 {\n            continue\n        }\n        result.append(word)\n    }\n \
    \   result.sortInPlace()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmp027oql9t.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp027oql9t.swift:28:12:\
    \ error: value of type '[String]' has no member 'sortInPlace'\n    result.sortInPlace()\n\
    \    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824828
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        }\n    }\n    result.sort()\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp4hoexcfe.swift:20:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659824828
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    var words = [String]()\n    for word in lst {\n   \
    \     if words.contains(word) {\n            continue\n        }\n        words.append(word)\n\
    \    }\n    for word in words {\n        if result.contains(word) {\n        \
    \    continue\n        }\n        result.append(word)\n    }\n    for word in\
    \ result {\n        if result.contains(word) {\n            continue\n       \
    \ }\n        result.append(word)\n    }\n    for word in result {\n        if\
    \ result.contains(word) {\n            continue\n        }\n        result.append(word)\n\
    \    }\n    for word in result {\n        if result.contains(word) {\n       \
    \     continue\n        }\n        result.append(word)\n    }\n    for word in\
    \ result {\n        if result.contains(word) {\n            continue\n       \
    \ }\n        result.append(word)\n    }\n    for word in result {\n        if\
    \ result.contains(word) {\n            continue\n        }\n        result.append(word)\n\
    \    }\n    for word in result {\n        if result.contains(word) {\n       \
    \     continue\n        }\n        result.append(word)\n    }\n    for word in\
    \ result {\n        if result.contains(word) {\n            continue\n       \
    \ }\n        result.append(word)\n    }\n    for word in result {\n        if\
    \ result.contains(word) {\n            continue\n        }\n        result.append(word)\n\
    \    }\n    for word in result {\n        if result.contains(word) {\n       \
    \     continue\n        }\n        result.append(word)\n    }\n    for word in\
    \ result {\n        if result.contains(word) {\n            continue\n       \
    \ }\n        result.append(word)\n    }\n    for word in result {\n        if\
    \ result.contains(word) {\n            continue\n        }\n        result.append(word)\n\
    \    }\n    for word in result {\n        if result.contains(word) {\n       \
    \     continue\n        }\n        result.append(word)\n    }\n    for word in\
    \ result {\n        if result.contains(word) {\n            continue\n       \
    \ }\n        result.append(word)\n    }\n    for word in result {\n        if\
    \ result.contains(word) {\n            continue\n        }\n        result.append(word)\n\
    \    }\n    for word in result {\n        if result.contains(word) {\n       \
    \     continue\n        }\n        result.append(word)\n    }\n    for word in\
    \ result {\n        if result.contains(word) {\n            continue\n       \
    \ }\n        result.append(word)\n    }\n    for word in result {\n        if\
    \ result.contains(word) {\n            continue\n        }\n        result.append(word)\n\
    \    }\n    for word in result {\n        if result.contains(word) {\n       \
    \     continue\n        }\n        result.append(word)\n    }\n    for word in\
    \ result {\n        if result.contains(word) {\n            continue\n       \
    \ }\n        result.append(word)\n    }\n    for word in result {\n        if\
    \ result.contains(word) {\n            continue\n        }\n        result.append(word)\n\
    \    }\n    for word in result {\n        if result.contains(word) {\n       \
    \     continue\n        }\n        result.append(word)\n    }\n    for word in\
    \ result {\n        if result.contains(word) {\n            continue\n\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp5p773vwb.swift:183:91: error: expected '}' at end of brace statement\n\
    assert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\",\
    \ \"dd\", \"aaaa\", \"bbbb\"])\n                                             \
    \                                             ^\n/tmp/tmp5p773vwb.swift:158:24:\
    \ note: to match this opening '{'\n    for word in result {\n                \
    \       ^\n/tmp/tmp5p773vwb.swift:183:91: error: expected '}' at end of brace\
    \ statement\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\", \"dd\", \"cc\"])\
    \ == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n                                 \
    \                                                         ^\n/tmp/tmp5p773vwb.swift:17:49:\
    \ note: to match this opening '{'\nfunc sorted_list_sum(lst: [String]) -> [String]\
    \ {\n                                                ^\n/tmp/tmp5p773vwb.swift:165:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.contains(word)\
    \ {\n            continue\n        }\n        if word.characters.count % 2 ==\
    \ 1 {\n            result.append(word)\n            continue\n        }\n    \
    \    let index = result.index(of: word)\n        if index == nil {\n         \
    \   result.append(word)\n            continue\n        }\n        let word1 =\
    \ result[index!]\n        let word2 = word\n        if word1.characters.count\
    \ < word2.characters.count {\n            result[index!] = word2\n        } else\
    \ {\n            result[index!] = word1\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpm2j5path.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpm2j5path.swift:27:28:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        let\
    \ index = result.index(of: word)\n                           ^\n/tmp/tmpm2j5path.swift:27:28:\
    \ note: use 'firstIndex(of:)' instead\n        let index = result.index(of: word)\n\
    \                           ^~~~~\n                           firstIndex\n/tmp/tmpm2j5path.swift:34:18:\
    \ error: 'characters' is unavailable: Please use String directly\n        if word1.characters.count\
    \ < word2.characters.count {\n                 ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpm2j5path.swift:34:43: error: 'characters'\
    \ is unavailable: Please use String directly\n        if word1.characters.count\
    \ < word2.characters.count {\n                                          ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        } else {\n            let\
    \ index = result.index(of: word)\n            result.remove(at: index)\n     \
    \   }\n    }\n    return result.sorted(by: { $0.characters.count > $1.characters.count\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\"\
    , \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpxt480l_v.swift:20:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpxt480l_v.swift:23:32:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        \
    \    let index = result.index(of: word)\n                               ^\n/tmp/tmpxt480l_v.swift:23:32:\
    \ note: use 'firstIndex(of:)' instead\n            let index = result.index(of:\
    \ word)\n                               ^~~~~\n                              \
    \ firstIndex\n/tmp/tmpxt480l_v.swift:24:31: error: value of optional type 'Array<String>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<String>.Index'\
    \ (aka 'Int')\n            result.remove(at: index)\n                        \
    \      ^\n/tmp/tmpxt480l_v.swift:23:17: note: short-circuit using 'guard' to exit\
    \ this function early if the optional value contains 'nil'\n            let index\
    \ = result.index(of: word)\n                ^\n            guard             \
    \                 else { return <#default value#> }\n/tmp/tmpxt480l_v.swift:23:32:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n            let index = result.index(of: word)\n                    \
    \           ^\n                                               ?? <#default value#>\n\
    /tmp/tmpxt480l_v.swift:23:32: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n            let index = result.index(of:\
    \ word)\n                               ^\n                                  \
    \            !\n/tmp/tmpxt480l_v.swift:24:31: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n            result.remove(at:\
    \ index)\n                              ^\n                                  \
    \  ?? <#default value#>\n/tmp/tmpxt480l_v.swift:24:31: note: force-unwrap using\
    \ '!' to abort execution if the optional value contains 'nil'\n    "
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.count < 2 {\n\
    \            result.append(word)\n            continue\n        }\n        if\
    \ word.count > result[result.count - 1].count {\n            result.append(word)\n\
    \            continue\n        }\n        if word.count < result[result.count\
    \ - 2].count {\n            result.append(word)\n            continue\n      \
    \  }\n        if word.count > result[result.count - 3].count {\n            result.append(word)\n\
    \            continue\n        }\n        if word.count < result[result.count\
    \ - 4].count {\n            result.append(word)\n            continue\n      \
    \  }\n        if word.count > result[result.count - 5].count {\n            result.append(word)\n\
    \            continue\n        }\n        if word.count < result[result.count\
    \ - 6].count {\n            result.append(word)\n            continue\n      \
    \  }\n        if word.count > result[result.count - 7].count {\n            result.append(word)\n\
    \            continue\n        }\n        if word.count < result[result.count\
    \ - 8].count {\n            result.append(word)\n            continue\n      \
    \  }\n        if word.count > result[result.count - 9].count {\n            result.append(word)\n\
    \            continue\n        }\n        if word.count < result[result.count\
    \ - 10].count {\n            result.append(word)\n            continue\n     \
    \   }\n        if word.count > result[result.count - 11].count {\n           \
    \ result.append(word)\n            continue\n        }\n        if word.count\
    \ < result[result.count - 12].count {\n            result.append(word)\n     \
    \       continue\n        }\n        if word.count > result[result.count - 13].count\
    \ {\n            result.append(word)\n            continue\n        }\n      \
    \  if word.count < result[result.count - 14].count {\n            result.append(word)\n\
    \            continue\n        }\n        if word.count > result[result.count\
    \ - 15].count {\n            result.append(word)\n            continue\n     \
    \   }\n        if word.count < result[result.count - 16].count {\n           \
    \ result.append(word)\n            continue\n        }\n        if word.count\
    \ > result[result.count - 17].count {\n            result.append(word)\n     \
    \       continue\n        }\n        if word.count < result[result.count - 18].count\
    \ {\n            result.append(word)\n            continue\n        }\n      \
    \  if word.count > result[result.count - 19].count {\n            result.append(word)\n\
    \            continue\n        }\n        if word.count < result[result.count\
    \ - 20].count {\n            result.append(word)\n            continue\n     \
    \   }\n        if word.count > result[result.count - 21].count {\n           \
    \ result.append(word)\n            continue\n        }\n        if word.count\
    \ < result[result.count - 22].count {\n            result.append(word)\n     \
    \       continue\n        }\n        if word.count > result[result.count - 23].count\
    \ {\n            result.append(word)\n            continue\n        }\n      \
    \  if word.count < \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpaniyqqiw.swift:117:1: error: expected expression after operator\n\
    }\n^\n/tmp/tmpaniyqqiw.swift:138:91: error: expected '}' at end of brace statement\n\
    assert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\",\
    \ \"dd\", \"aaaa\", \"bbbb\"])\n                                             \
    \                                             ^\n/tmp/tmpaniyqqiw.swift:17:49:\
    \ note: to match this opening '{'\nfunc sorted_list_sum(lst: [String]) -> [String]\
    \ {\n                                                ^\n/tmp/tmpaniyqqiw.swift:120:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.contains(word)\
    \ {\n            continue\n        }\n        if word.characters.count % 2 ==\
    \ 1 {\n            result.append(word)\n            continue\n        }\n    \
    \    let index = result.index(of: word)\n        if index == nil {\n         \
    \   result.append(word)\n            continue\n        }\n        let tmp = result[index!]\n\
    \        result[index!] = word\n        result.removeSubrange(index!..<result.endIndex)\n\
    \        result.append(tmp)\n    }\n    result.sort { $0.characters.count > $1.characters.count\
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpy1ogzmnx.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpy1ogzmnx.swift:27:28:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        let\
    \ index = result.index(of: word)\n                           ^\n/tmp/tmpy1ogzmnx.swift:27:28:\
    \ note: use 'firstIndex(of:)' instead\n        let index = result.index(of: word)\n\
    \                           ^~~~~\n                           firstIndex\n/tmp/tmpy1ogzmnx.swift:37:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    result.sort\
    \ { $0.characters.count > $1.characters.count }\n                     ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpy1ogzmnx.swift:37:44:\
    \ error: 'characters' is unavailable: Please use String directly\n    result.sort\
    \ { $0.characters.count > $1.characters.count }\n                            \
    \               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        }\n    }\n    result.sort()\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp4hoexcfe.swift:20:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659824828
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    var i = 0\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        } else {\n            i\
    \ += 1\n        }\n    }\n    result.sortInPlace()\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpap50weci.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpap50weci.swift:27:12:\
    \ error: value of type '[String]' has no member 'sortInPlace'\n    result.sortInPlace()\n\
    \    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824827
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.contains(word)\
    \ {\n            continue\n        }\n        if word.characters.count % 2 ==\
    \ 1 {\n            result.append(word)\n            continue\n        }\n    \
    \    let index = result.index(of: word)\n        if index != nil {\n         \
    \   result[index!] = word\n        }\n    }\n    return result.sorted(by: { (word1,\
    \ word2) -> Bool in\n        if word1.characters.count < word2.characters.count\
    \ {\n            return true\n        }\n        if word1.characters.count ==\
    \ word2.characters.count {\n            return word1 < word2\n        }\n    \
    \    return false\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpjs6siany.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpjs6siany.swift:27:28:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        let\
    \ index = result.index(of: word)\n                           ^\n/tmp/tmpjs6siany.swift:27:28:\
    \ note: use 'firstIndex(of:)' instead\n        let index = result.index(of: word)\n\
    \                           ^~~~~\n                           firstIndex\n/tmp/tmpjs6siany.swift:33:18:\
    \ error: 'characters' is unavailable: Please use String directly\n        if word1.characters.count\
    \ < word2.characters.count {\n                 ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpjs6siany.swift:33:43: error: 'characters'\
    \ is unavailable: Please use String directly\n        if word1.characters.count\
    \ < word2.characters.count {\n                                          ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpjs6siany.swift:36:18:\
    \ error: 'characters' is unavailable: Please use String directly\n        if word1.characters.count\
    \ == word2.characters.count {\n                 ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpjs6siany.swift:36:44: error: 'characters'\
    \ is unavailable: Please use String directly\n        if word1.characters.count\
    \ == word2.characters.count {\n                                           ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.contains(word)\
    \ {\n            continue\n        }\n        let wordLength = word.characters.count\n\
    \        if wordLength % 2 == 1 {\n            result.append(word)\n         \
    \   continue\n        }\n        let index = result.index(of: word)\n        if\
    \ index != nil {\n            result.remove(at: index!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpv62jkknh.swift:23:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let wordLength = word.characters.count\n      \
    \                        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpv62jkknh.swift:28:28: warning: 'index(of:)' is deprecated:\
    \ renamed to 'firstIndex(of:)'\n        let index = result.index(of: word)\n \
    \                          ^\n/tmp/tmpv62jkknh.swift:28:28: note: use 'firstIndex(of:)'\
    \ instead\n        let index = result.index(of: word)\n                      \
    \     ^~~~~\n                           firstIndex\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.contains(word)\
    \ {\n            continue\n        }\n        result.append(word)\n    }\n   \
    \ result.sort { (a, b) -> Bool in\n        let aLen = a.count\n        let bLen\
    \ = b.count\n        if aLen > bLen {\n            return true\n        }\n  \
    \      if aLen < bLen {\n            return false\n        }\n        return a.localizedStandardCompare(b)\
    \ == .orderedAscending\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpn_871904.swift:34:18: error: value of type 'String' has no member\
    \ 'localizedStandardCompare'\n        return a.localizedStandardCompare(b) ==\
    \ .orderedAscending\n               ~ ^~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        }\n    }\n    result.sortInPlace()\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp2c9qbd9t.swift:20:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp2c9qbd9t.swift:24:12:\
    \ error: value of type '[String]' has no member 'sortInPlace'\n    result.sortInPlace()\n\
    \    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = lst\n    for index in 0..<result.count {\n        if result[index].count\
    \ % 2 == 1 {\n            result.remove(at: index)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b49a317fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49a2e76561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b49a2e76286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b49a2e7613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b49a2e75bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b49a2c75fc3 <unavailable> + 188355

    6    tmp2fp633ba                        0x00005614f67b770c <unavailable> + 9996

    7    tmp2fp633ba                        0x00005614f67b672d <unavailable> + 5933

    8    libc.so.6                          0x00002b49a336b460 __libc_start_main +
    245

    9    tmp2fp633ba                        0x00005614f67b63a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.count > 0 {\n\
    \            if word.count > result[result.count - 1].count {\n              \
    \  result.append(word)\n            } else {\n                for i in 0..<result.count\
    \ {\n                    if word.count < result[i].count {\n                 \
    \       result.removeAtIndex(i)\n                        break\n             \
    \       }\n                }\n                result.append(word)\n          \
    \  }\n        } else {\n            result.append(word)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpca6xhrfu.swift:26:32: error: value of type '[String]' has no member\
    \ 'removeAtIndex'\n                        result.removeAtIndex(i)\n         \
    \               ~~~~~~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        }\n    }\n    result.sort()\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp4hoexcfe.swift:20:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659824828
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\",\
    \ \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp6vr9z24_/tmp6vr9z24_.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4b7e745c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4b7e43cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4b7e43c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4b7e43b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6vr9z24_                        0x0000564db6228546 <unavailable> + 5446

    5    libc.so.6                          0x00002b4b7e931460 __libc_start_main +
    245

    6    tmp6vr9z24_                        0x0000564db62280c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824828
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.count < 2 {\n\
    \            result.append(word)\n        } else if result.count > 2 {\n     \
    \       if word.count < result[0].count {\n                result[0] = word\n\
    \            } else {\n                result[1] = word\n            }\n     \
    \   } else {\n            if word.count < result[0].count {\n                result[0]\
    \ = word\n            } else {\n                result[1] = word\n           \
    \ }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpb5eeijcb/tmpb5eeijcb.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b88a06e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b88a03d7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b88a03d7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b88a03d67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb5eeijcb                        0x00005591231ca8b6 <unavailable> + 6326

    5    libc.so.6                          0x00002b88a08cc460 __libc_start_main +
    245

    6    tmpb5eeijcb                        0x00005591231ca439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ res: [String] = []\n    for word in lst {\n        if res.contains(word) {\n\
    \            continue\n        }\n        let wordLen = word.characters.count\n\
    \        if wordLen % 2 == 1 {\n            res.append(word)\n            continue\n\
    \        }\n        let wordLen2 = word.characters.count\n        if wordLen2\
    \ < wordLen {\n            res.append(word)\n            continue\n        }\n\
    \        let wordLen3 = word.characters.count\n        if wordLen3 < wordLen {\n\
    \            res.append(word)\n            continue\n        }\n        let wordLen4\
    \ = word.characters.count\n        if wordLen4 < wordLen {\n            res.append(word)\n\
    \            continue\n        }\n        let wordLen5 = word.characters.count\n\
    \        if wordLen5 < wordLen {\n            res.append(word)\n            continue\n\
    \        }\n        let wordLen6 = word.characters.count\n        if wordLen6\
    \ < wordLen {\n            res.append(word)\n            continue\n        }\n\
    \        let wordLen7 = word.characters.count\n        if wordLen7 < wordLen {\n\
    \            res.append(word)\n            continue\n        }\n        let wordLen8\
    \ = word.characters.count\n        if wordLen8 < wordLen {\n            res.append(word)\n\
    \            continue\n        }\n        let wordLen9 = word.characters.count\n\
    \        if wordLen9 < wordLen {\n            res.append(word)\n            continue\n\
    \        }\n        let wordLen10 = word.characters.count\n        if wordLen10\
    \ < wordLen {\n            res.append(word)\n            continue\n        }\n\
    \        let wordLen11 = word.characters.count\n        if wordLen11 < wordLen\
    \ {\n            res.append(word)\n            continue\n        }\n        let\
    \ wordLen12 = word.characters.count\n        if wordLen12 < wordLen {\n      \
    \      res.append(word)\n            continue\n        }\n        let wordLen13\
    \ = word.characters.count\n        if wordLen13 < wordLen {\n            res.append(word)\n\
    \            continue\n        }\n        let wordLen14 = word.characters.count\n\
    \        if wordLen14 < wordLen {\n            res.append(word)\n            continue\n\
    \        }\n        let wordLen15 = word.characters.count\n        if wordLen15\
    \ < wordLen {\n            res.append(word)\n            continue\n        }\n\
    \        let wordLen16 = word.characters.count\n        if wordLen16 < wordLen\
    \ {\n            res.append(word)\n            continue\n        }\n        let\
    \ wordLen17 = word.characters.count\n        if wordLen17 < wordLen {\n      \
    \      res.append(word)\n            continue\n        }\n        let wordLen18\
    \ = word.characters.count\n        if wordLen18 < wordLen {\n            res.append(word)\n\
    \            continue\n        }\n        let wordLen19 = word.characters.count\n\
    \        if wordLen19 < wordLen {\n            res.append(word)\n            continue\n\
    \        }\n        let wordLen20 = word.characters.count\n        if wordLen\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp9asr3688.swift:119:19: error: expected '{' after 'if' condition\n\
    \        if wordLen\n                  ^\n/tmp/tmp9asr3688.swift:141:91: error:\
    \ expected '}' at end of brace statement\nassert(sorted_list_sum(lst: [\"aaaa\"\
    , \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n      \
    \                                                                            \
    \        ^\n/tmp/tmp9asr3688.swift:17:49: note: to match this opening '{'\nfunc\
    \ sorted_list_sum(lst: [String]) -> [String] {\n                             \
    \                   ^\n/tmp/tmp9asr3688.swift:23:28: error: 'characters' is unavailable:\
    \ Please use String directly\n        let wordLen = word.characters.count\n  \
    \                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmp9asr3688.swift:28:29: error: 'characters' is unavailable:\
    \ Please use String directly\n        let wordLen2 = word.characters.count\n \
    \                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp9asr3688.swift:33:29: error: 'characters' is unavailable:\
    \ Please use String directly\n        let wordLen3 = word.characters.count\n \
    \                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp9asr3688.swift:38:29: error: 'characters' is unavailable:\
    \ Please use String directly\n        let wordLen4 = word.characters.count\n \
    \                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp9asr3688.swift:43:29: error: 'characters' is unavailable:\
    \ Please use String directly\n        let wordLen5 = word.characters.count\n \
    \                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \         "
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    var i = 0\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        } else {\n            i\
    \ += 1\n        }\n    }\n    result.sort(by: {$0.characters.count > $1.characters.count})\n\
    \    result.sort(by: {$0.characters.count < $1.characters.count})\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpw9eq108t.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpw9eq108t.swift:27:25:\
    \ error: 'characters' is unavailable: Please use String directly\n    result.sort(by:\
    \ {$0.characters.count > $1.characters.count})\n                        ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpw9eq108t.swift:27:47:\
    \ error: 'characters' is unavailable: Please use String directly\n    result.sort(by:\
    \ {$0.characters.count > $1.characters.count})\n                             \
    \                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpw9eq108t.swift:28:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    result.sort(by: {$0.characters.count < $1.characters.count})\n\
    \                        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpw9eq108t.swift:28:47: error: 'characters' is unavailable:\
    \ Please use String directly\n    result.sort(by: {$0.characters.count < $1.characters.count})\n\
    \                                              ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    var i = 0\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        } else {\n            i\
    \ += 1\n        }\n    }\n    result.sortInPlace()\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpap50weci.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpap50weci.swift:27:12:\
    \ error: value of type '[String]' has no member 'sortInPlace'\n    result.sortInPlace()\n\
    \    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824827
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    var seen = [String]()\n    for word in lst {\n    \
    \    if seen.contains(word) {\n            continue\n        }\n        seen.insert(word)\n\
    \        if result.count < 2 {\n            result.append(word)\n            continue\n\
    \        }\n        if word.count > result[result.count - 1].count {\n       \
    \     result.append(word)\n            continue\n        }\n        if word.count\
    \ < result[result.count - 2].count {\n            result[result.count - 1] = word\n\
    \            continue\n        }\n        if word.count > result[result.count\
    \ - 3].count {\n            result[result.count - 2] = word\n            continue\n\
    \        }\n        if word.count < result[result.count - 4].count {\n       \
    \     result[result.count - 3] = word\n            continue\n        }\n     \
    \   if word.count > result[result.count - 5].count {\n            result[result.count\
    \ - 4] = word\n            continue\n        }\n        if word.count < result[result.count\
    \ - 6].count {\n            result[result.count - 5] = word\n            continue\n\
    \        }\n        if word.count > result[result.count - 7].count {\n       \
    \     result[result.count - 6] = word\n            continue\n        }\n     \
    \   if word.count < result[result.count - 8].count {\n            result[result.count\
    \ - 7] = word\n            continue\n        }\n        if word.count > result[result.count\
    \ - 9].count {\n            result[result.count - 8] = word\n            continue\n\
    \        }\n        if word.count < result[result.count - 10].count {\n      \
    \      result[result.count - 9] = word\n            continue\n        }\n    \
    \    if word.count > result[result.count - 11].count {\n            result[result.count\
    \ - 10] = word\n            continue\n        }\n        if word.count < result[result.count\
    \ - 12].count {\n            result[result.count - 11] = word\n            continue\n\
    \        }\n        if word.count > result[result.count - 13].count {\n      \
    \      result[result.count - 12] = word\n            continue\n        }\n   \
    \     if word.count < result[result.count - 14].count {\n            result[result.count\
    \ - 13] = word\n            continue\n        }\n        if word.count > result[result.count\
    \ - 15].count {\n            result[result.count - 14] = word\n            continue\n\
    \        }\n        if word.count < result[result.count - 16].count {\n      \
    \      result[result.count - 15] = word\n            continue\n        }\n   \
    \     if word.count > result[result.count - 17].count {\n            result[result.count\
    \ - 16] = word\n            continue\n        }\n        if word.count < result[result.count\
    \ - 18].count {\n            result[result.count - 17] = word\n            continue\n\
    \        }\n        if word.count \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmpog8pvgdi.swift:101:22: error: expected '{' after 'if' condition\n\
    \        if word.count \n                     ^\n/tmp/tmpog8pvgdi.swift:123:91:\
    \ error: expected '}' at end of brace statement\nassert(sorted_list_sum(lst: [\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    \                                                                            \
    \              ^\n/tmp/tmpog8pvgdi.swift:17:49: note: to match this opening '{'\n\
    func sorted_list_sum(lst: [String]) -> [String] {\n                          \
    \                      ^\n/tmp/tmpog8pvgdi.swift:24:25: error: missing argument\
    \ for parameter 'at' in call\n        seen.insert(word)\n                    \
    \    ^\n                        , at: <#Int#>\nSwift.Array:11:37: note: 'insert(_:at:)'\
    \ declared here\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\n/tmp/tmpog8pvgdi.swift:101:17:\
    \ error: type 'Int' cannot be used as a boolean; test for '!= 0' instead\n   \
    \     if word.count \n                ^\n           (          != 0)\n/tmp/tmpog8pvgdi.swift:105:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = lst\n    for index in 0..<result.count {\n        if result[index].count\
    \ % 2 == 1 {\n            result.remove(at: index)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b49a317fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49a2e76561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b49a2e76286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b49a2e7613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b49a2e75bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b49a2c75fc3 <unavailable> + 188355

    6    tmp2fp633ba                        0x00005614f67b770c <unavailable> + 9996

    7    tmp2fp633ba                        0x00005614f67b672d <unavailable> + 5933

    8    libc.so.6                          0x00002b49a336b460 __libc_start_main +
    245

    9    tmp2fp633ba                        0x00005614f67b63a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.count > 0 {\n\
    \            if word.count > result[result.count - 1].count {\n              \
    \  result.append(word)\n            } else {\n                let index = result.index(of:\
    \ word)\n                result.remove(at: index)\n                result.append(word)\n\
    \            }\n        } else {\n            result.append(word)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpwwxya0h5.swift:24:36: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n                let index = result.index(of: word)\n \
    \                                  ^\n/tmp/tmpwwxya0h5.swift:24:36: note: use\
    \ 'firstIndex(of:)' instead\n                let index = result.index(of: word)\n\
    \                                   ^~~~~\n                                  \
    \ firstIndex\n/tmp/tmpwwxya0h5.swift:25:35: error: value of optional type 'Array<String>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<String>.Index'\
    \ (aka 'Int')\n                result.remove(at: index)\n                    \
    \              ^\n/tmp/tmpwwxya0h5.swift:24:21: note: short-circuit using 'guard'\
    \ to exit this function early if the optional value contains 'nil'\n         \
    \       let index = result.index(of: word)\n                    ^\n          \
    \      guard                              else { return <#default value#> }\n\
    /tmp/tmpwwxya0h5.swift:24:36: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n                let index = result.index(of:\
    \ word)\n                                   ^\n                              \
    \                     ?? <#default value#>\n/tmp/tmpwwxya0h5.swift:24:36: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \                let index = result.index(of: word)\n                        \
    \           ^\n                                                  !\n/tmp/tmpwwxya0h5.swift:25:35:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n                result.remove(at: index)\n                          \
    \        ^\n                                        ?? <#default value#>\n/tmp/tmpwwxya0h5.swift:25:35:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n                result.remove(at: index)\n                          \
    \        ^\n                                       !\n"
  stdout: ''
  timestamp: 1659824827
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.count < 2 {\n\
    \            result.append(word)\n            continue\n        }\n        if\
    \ word.count > result[0].count {\n            result.append(word)\n          \
    \  continue\n        }\n        if word.count < result[1].count {\n          \
    \  result.append(word)\n            continue\n        }\n        if word.count\
    \ > result[2].count {\n            result.append(word)\n            continue\n\
    \        }\n        if word.count < result[3].count {\n            result.append(word)\n\
    \            continue\n        }\n        if word.count > result[4].count {\n\
    \            result.append(word)\n            continue\n        }\n        if\
    \ word.count < result[5].count {\n            result.append(word)\n          \
    \  continue\n        }\n        if word.count > result[6].count {\n          \
    \  result.append(word)\n            continue\n        }\n        if word.count\
    \ < result[7].count {\n            result.append(word)\n            continue\n\
    \        }\n        if word.count > result[8].count {\n            result.append(word)\n\
    \            continue\n        }\n        if word.count < result[9].count {\n\
    \            result.append(word)\n            continue\n        }\n        if\
    \ word.count > result[10].count {\n            result.append(word)\n         \
    \   continue\n        }\n        if word.count < result[11].count {\n        \
    \    result.append(word)\n            continue\n        }\n        if word.count\
    \ > result[12].count {\n            result.append(word)\n            continue\n\
    \        }\n        if word.count < result[13].count {\n            result.append(word)\n\
    \            continue\n        }\n        if word.count > result[14].count {\n\
    \            result.append(word)\n            continue\n        }\n        if\
    \ word.count < result[15].count {\n            result.append(word)\n         \
    \   continue\n        }\n        if word.count > result[16].count {\n        \
    \    result.append(word)\n            continue\n        }\n        if word.count\
    \ < result[17].count {\n            result.append(word)\n            continue\n\
    \        }\n        if word.count > result[18].count {\n            result.append(word)\n\
    \            continue\n        }\n        if word.count < result[19].count {\n\
    \            result.append(word)\n            continue\n        }\n        if\
    \ word.count > result[20].count {\n            result.append(word)\n         \
    \   continue\n        }\n        if word.count < result[21].count {\n        \
    \    result.append(word)\n            continue\n        }\n        if word.count\
    \ > result[22].count {\n            result.append(word)\n            continue\n\
    \        }\n        if word.count < result[23].count {\n            result.append(word)\n\
    \            continue\n        }\n        if word.count > result[24].count {\n\
    \            result.append(word)\n            continue\n        }\n        if\
    \ word.count < result[25].count {\n            result.append(word)\n         \
    \   continue\n        }\n        if word.count > result[26].count {\n        \
    \    result.append(word)\n            continue\n        }\n        if word.\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpgpdt5s1v.swift:132:16: error: expected member name following '.'\n\
    \        if word.\n               ^\n/tmp/tmpgpdt5s1v.swift:132:17: error: expected\
    \ '{' after 'if' condition\n        if word.\n                ^\n/tmp/tmpgpdt5s1v.swift:154:91:\
    \ error: expected '}' at end of brace statement\nassert(sorted_list_sum(lst: [\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    \                                                                            \
    \              ^\n/tmp/tmpgpdt5s1v.swift:17:49: note: to match this opening '{'\n\
    func sorted_list_sum(lst: [String]) -> [String] {\n                          \
    \                      ^\n/tmp/tmpgpdt5s1v.swift:136:6: error: operator functions\
    \ can only be declared at global or in type scope\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        }\n    }\n    result.sortInPlace()\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp2c9qbd9t.swift:20:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp2c9qbd9t.swift:24:12:\
    \ error: value of type '[String]' has no member 'sortInPlace'\n    result.sortInPlace()\n\
    \    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ res: [String] = []\n    for word in lst {\n        if res.count < 2 {\n    \
    \        res.append(word)\n        } else if res.count > 2 {\n            if word.count\
    \ < res[0].count {\n                res.remove(at: 0)\n                res.insert(word,\
    \ at: 0)\n            } else if word.count > res[0].count {\n                res.remove(at:\
    \ 0)\n                res.insert(word, at: 0)\n            } else {\n        \
    \        res.remove(at: 0)\n                res.insert(word, at: 0)\n        \
    \    }\n        } else {\n            if word.count < res[0].count {\n       \
    \         res.remove(at: 0)\n                res.insert(word, at: 0)\n       \
    \     } else {\n                res.remove(at: 0)\n                res.insert(word,\
    \ at: 0)\n            }\n        }\n    }\n    return res\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp1gf58ru7/tmp1gf58ru7.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0980a2dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0980724b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0980724988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09807237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1gf58ru7                        0x0000562ed3fa98b6 <unavailable> + 6326

    5    libc.so.6                          0x00002b0980c19460 __libc_start_main +
    245

    6    tmp1gf58ru7                        0x0000562ed3fa9439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    var seen = [String]()\n    for word in lst {\n    \
    \    if seen.contains(word) {\n            continue\n        }\n        seen.insert(word)\n\
    \        if result.contains(word) {\n            continue\n        }\n       \
    \ result.append(word)\n    }\n    result.sortInPlace()\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpwmx7fq0a.swift:24:25: error: missing argument for parameter 'at'\
    \ in call\n        seen.insert(word)\n                        ^\n            \
    \            , at: <#Int#>\nSwift.Array:11:37: note: 'insert(_:at:)' declared\
    \ here\n    @inlinable public mutating func insert(_ newElement: __owned Element,\
    \ at i: Int)\n                                    ^\n/tmp/tmpwmx7fq0a.swift:30:12:\
    \ error: value of type '[String]' has no member 'sortInPlace'\n    result.sortInPlace()\n\
    \    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        }\n    }\n    result.sortInPlace({\
    \ $0.characters.count > $1.characters.count })\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp1wjyxd5k.swift:20:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp1wjyxd5k.swift:24:12:\
    \ error: value of type '[String]' has no member 'sortInPlace'\n    result.sortInPlace({\
    \ $0.characters.count > $1.characters.count })\n    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824828
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    var i = 0\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        }\n    }\n    for word\
    \ in result {\n        if let index = result.index(of: word) {\n            result.remove(at:\
    \ index)\n        }\n    }\n    for word in result {\n        if let index = result.index(of:\
    \ word) {\n            result.insert(word, at: index)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpefnr876e.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpefnr876e.swift:26:31:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        if\
    \ let index = result.index(of: word) {\n                              ^\n/tmp/tmpefnr876e.swift:26:31:\
    \ note: use 'firstIndex(of:)' instead\n        if let index = result.index(of:\
    \ word) {\n                              ^~~~~\n                             \
    \ firstIndex\n/tmp/tmpefnr876e.swift:31:31: warning: 'index(of:)' is deprecated:\
    \ renamed to 'firstIndex(of:)'\n        if let index = result.index(of: word)\
    \ {\n                              ^\n/tmp/tmpefnr876e.swift:31:31: note: use\
    \ 'firstIndex(of:)' instead\n        if let index = result.index(of: word) {\n\
    \                              ^~~~~\n                              firstIndex\n\
    /tmp/tmpefnr876e.swift:19:9: warning: initialization of variable 'i' was never\
    \ used; consider replacing with assignment to '_' or removing it\n    var i =\
    \ 0\n    ~~~~^\n    _\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.count > 0 {\n\
    \            if word.count > result[result.count - 1].count {\n              \
    \  result.append(word)\n            } else {\n                let index = result.index(of:\
    \ word)\n                result.remove(at: index)\n                result.append(word)\n\
    \            }\n        } else {\n            result.append(word)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpwwxya0h5.swift:24:36: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n                let index = result.index(of: word)\n \
    \                                  ^\n/tmp/tmpwwxya0h5.swift:24:36: note: use\
    \ 'firstIndex(of:)' instead\n                let index = result.index(of: word)\n\
    \                                   ^~~~~\n                                  \
    \ firstIndex\n/tmp/tmpwwxya0h5.swift:25:35: error: value of optional type 'Array<String>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<String>.Index'\
    \ (aka 'Int')\n                result.remove(at: index)\n                    \
    \              ^\n/tmp/tmpwwxya0h5.swift:24:21: note: short-circuit using 'guard'\
    \ to exit this function early if the optional value contains 'nil'\n         \
    \       let index = result.index(of: word)\n                    ^\n          \
    \      guard                              else { return <#default value#> }\n\
    /tmp/tmpwwxya0h5.swift:24:36: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n                let index = result.index(of:\
    \ word)\n                                   ^\n                              \
    \                     ?? <#default value#>\n/tmp/tmpwwxya0h5.swift:24:36: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \                let index = result.index(of: word)\n                        \
    \           ^\n                                                  !\n/tmp/tmpwwxya0h5.swift:25:35:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n                result.remove(at: index)\n                          \
    \        ^\n                                        ?? <#default value#>\n/tmp/tmpwwxya0h5.swift:25:35:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n                result.remove(at: index)\n                          \
    \        ^\n                                       !\n"
  stdout: ''
  timestamp: 1659824827
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = lst\n    for index in 0..<result.count {\n        if result[index].count\
    \ % 2 == 1 {\n            result.remove(at: index)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b49a317fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49a2e76561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b49a2e76286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b49a2e7613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b49a2e75bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b49a2c75fc3 <unavailable> + 188355

    6    tmp2fp633ba                        0x00005614f67b770c <unavailable> + 9996

    7    tmp2fp633ba                        0x00005614f67b672d <unavailable> + 5933

    8    libc.so.6                          0x00002b49a336b460 __libc_start_main +
    245

    9    tmp2fp633ba                        0x00005614f67b63a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\",\
    \ \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp6vr9z24_/tmp6vr9z24_.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4b7e745c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4b7e43cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4b7e43c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4b7e43b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6vr9z24_                        0x0000564db6228546 <unavailable> + 5446

    5    libc.so.6                          0x00002b4b7e931460 __libc_start_main +
    245

    6    tmp6vr9z24_                        0x0000564db62280c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824828
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if word.count % 2 == 1 {\n\
    \            result.append(word)\n        }\n    }\n    result.sortInPlace()\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpz2q5ugnf.swift:24:12: error: value of type '[String]' has no member\
    \ 'sortInPlace'\n    result.sortInPlace()\n    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824828
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.contains(word)\
    \ {\n            continue\n        }\n        let wordLength = word.characters.count\n\
    \        if wordLength % 2 == 1 {\n            result.insert(word, at: result.index(of:\
    \ word))\n        } else {\n            let index = result.index(of: word)\n \
    \           result.insert(word, at: index + 1)\n        }\n    }\n    return result.sorted(by:\
    \ { $0.characters.count > $1.characters.count })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpxhl80m0n.swift:23:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let wordLength = word.characters.count\n      \
    \                        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpxhl80m0n.swift:25:44: error: value of optional type 'Array<String>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<String>.Index'\
    \ (aka 'Int')\n            result.insert(word, at: result.index(of: word))\n \
    \                                          ^\n/tmp/tmpxhl80m0n.swift:25:44: note:\
    \ coalesce using '??' to provide a default when the optional value contains 'nil'\n\
    \            result.insert(word, at: result.index(of: word))\n               \
    \                            ^\n                                             \
    \              ?? <#default value#>\n/tmp/tmpxhl80m0n.swift:25:44: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n        \
    \    result.insert(word, at: result.index(of: word))\n                       \
    \                    ^\n                                                     \
    \     !\n/tmp/tmpxhl80m0n.swift:27:32: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n            let index = result.index(of: word)\n     \
    \                          ^\n/tmp/tmpxhl80m0n.swift:27:32: note: use 'firstIndex(of:)'\
    \ instead\n            let index = result.index(of: word)\n                  \
    \             ^~~~~\n                               firstIndex\n/tmp/tmpxhl80m0n.swift:28:37:\
    \ error: value of optional type 'Array<String>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<String>.Index' (aka 'Int')\n        \
    \    result.insert(word, at: index + 1)\n                                    ^\n\
    /tmp/tmpxhl80m0n.swift:27:17: note: short-circuit using 'guard' to exit this function\
    \ early if the optional value contains 'nil'\n            let index = result.index(of:\
    \ word)\n                ^\n            guard                              else\
    \ { "
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        }\n    }\n    result.sortInPlace()\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp2c9qbd9t.swift:20:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp2c9qbd9t.swift:24:12:\
    \ error: value of type '[String]' has no member 'sortInPlace'\n    result.sortInPlace()\n\
    \    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.count > 0 {\n\
    \            if word.count > result[result.count - 1].count {\n              \
    \  result.append(word)\n            } else {\n                let index = result.index(of:\
    \ word)\n                result.remove(at: index)\n                result.append(word)\n\
    \            }\n        } else {\n            result.append(word)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpwwxya0h5.swift:24:36: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n                let index = result.index(of: word)\n \
    \                                  ^\n/tmp/tmpwwxya0h5.swift:24:36: note: use\
    \ 'firstIndex(of:)' instead\n                let index = result.index(of: word)\n\
    \                                   ^~~~~\n                                  \
    \ firstIndex\n/tmp/tmpwwxya0h5.swift:25:35: error: value of optional type 'Array<String>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<String>.Index'\
    \ (aka 'Int')\n                result.remove(at: index)\n                    \
    \              ^\n/tmp/tmpwwxya0h5.swift:24:21: note: short-circuit using 'guard'\
    \ to exit this function early if the optional value contains 'nil'\n         \
    \       let index = result.index(of: word)\n                    ^\n          \
    \      guard                              else { return <#default value#> }\n\
    /tmp/tmpwwxya0h5.swift:24:36: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n                let index = result.index(of:\
    \ word)\n                                   ^\n                              \
    \                     ?? <#default value#>\n/tmp/tmpwwxya0h5.swift:24:36: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \                let index = result.index(of: word)\n                        \
    \           ^\n                                                  !\n/tmp/tmpwwxya0h5.swift:25:35:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n                result.remove(at: index)\n                          \
    \        ^\n                                        ?? <#default value#>\n/tmp/tmpwwxya0h5.swift:25:35:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n                result.remove(at: index)\n                          \
    \        ^\n                                       !\n"
  stdout: ''
  timestamp: 1659824827
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    var i = 0\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        } else {\n            i\
    \ += 1\n        }\n    }\n    result.sort(byLength)\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp19r7vslf.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp19r7vslf.swift:27:17:\
    \ error: cannot find 'byLength' in scope\n    result.sort(byLength)\n        \
    \        ^~~~~~~~\n/tmp/tmp19r7vslf.swift:27:17: error: missing argument label\
    \ 'by:' in call\n    result.sort(byLength)\n                ^\n              \
    \  by: \n/tmp/tmp19r7vslf.swift:27:17: error: converting non-escaping value to\
    \ '(String, String) throws -> Bool' may allow it to escape\n    result.sort(byLength)\n\
    \                ^\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = lst\n    for index in 0..<result.count {\n        let word = result[index]\n\
    \        if word.characters.count % 2 == 1 {\n            result.remove(at: index)\n\
    \        }\n    }\n    return result.sorted(by: { $0.characters.count > $1.characters.count\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\"\
    , \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp1e6u1zby.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp1e6u1zby.swift:25:35:\
    \ error: 'characters' is unavailable: Please use String directly\n    return result.sorted(by:\
    \ { $0.characters.count > $1.characters.count })\n                           \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp1e6u1zby.swift:25:57:\
    \ error: 'characters' is unavailable: Please use String directly\n    return result.sorted(by:\
    \ { $0.characters.count > $1.characters.count })\n                           \
    \                             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.count > 0 {\n\
    \            if word.count > result[result.count - 1].count {\n              \
    \  result.append(word)\n            } else {\n                let index = result.index(of:\
    \ word)\n                result.remove(at: index)\n                result.append(word)\n\
    \            }\n        } else {\n            result.append(word)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpwwxya0h5.swift:24:36: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n                let index = result.index(of: word)\n \
    \                                  ^\n/tmp/tmpwwxya0h5.swift:24:36: note: use\
    \ 'firstIndex(of:)' instead\n                let index = result.index(of: word)\n\
    \                                   ^~~~~\n                                  \
    \ firstIndex\n/tmp/tmpwwxya0h5.swift:25:35: error: value of optional type 'Array<String>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<String>.Index'\
    \ (aka 'Int')\n                result.remove(at: index)\n                    \
    \              ^\n/tmp/tmpwwxya0h5.swift:24:21: note: short-circuit using 'guard'\
    \ to exit this function early if the optional value contains 'nil'\n         \
    \       let index = result.index(of: word)\n                    ^\n          \
    \      guard                              else { return <#default value#> }\n\
    /tmp/tmpwwxya0h5.swift:24:36: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n                let index = result.index(of:\
    \ word)\n                                   ^\n                              \
    \                     ?? <#default value#>\n/tmp/tmpwwxya0h5.swift:24:36: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \                let index = result.index(of: word)\n                        \
    \           ^\n                                                  !\n/tmp/tmpwwxya0h5.swift:25:35:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n                result.remove(at: index)\n                          \
    \        ^\n                                        ?? <#default value#>\n/tmp/tmpwwxya0h5.swift:25:35:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n                result.remove(at: index)\n                          \
    \        ^\n                                       !\n"
  stdout: ''
  timestamp: 1659824827
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.count < 2 {\n\
    \            result.append(word)\n        } else if result.count > 2 {\n     \
    \       if word.count < result[0].count {\n                result.remove(at: 0)\n\
    \                result.append(word)\n            } else if word.count > result[0].count\
    \ {\n                result.remove(at: 0)\n                result.append(word)\n\
    \            } else {\n                if word.count < result[1].count {\n   \
    \                 result.remove(at: 1)\n                    result.append(word)\n\
    \                } else if word.count > result[1].count {\n                  \
    \  result.remove(at: 1)\n                    result.append(word)\n           \
    \     } else {\n                    result.remove(at: 1)\n                   \
    \ result.remove(at: 0)\n                    result.append(word)\n            \
    \    }\n            }\n        } else {\n            if word.count < result[0].count\
    \ {\n                result.remove(at: 0)\n                result.append(word)\n\
    \            } else if word.count > result[0].count {\n                result.remove(at:\
    \ 0)\n                result.append(word)\n            }\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpp7yibda2/tmpp7yibda2.swift:68: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b971bcf0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b971b9e7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b971b9e7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b971b9e67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp7yibda2                        0x0000560820f598b6 <unavailable> + 6326

    5    libc.so.6                          0x00002b971bedc460 __libc_start_main +
    245

    6    tmpp7yibda2                        0x0000560820f59439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ res: [String] = []\n    for word in lst {\n        if res.contains(word) {\n\
    \            continue\n        }\n        res.append(word)\n    }\n    res.sortInPlace()\n\
    \    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp87fvmfzo.swift:25:9: error: value of type '[String]' has no member\
    \ 'sortInPlace'\n    res.sortInPlace()\n    ~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.contains(word)\
    \ {\n            continue\n        }\n        if word.characters.count % 2 ==\
    \ 1 {\n            continue\n        }\n        result.insert(word, at: 0)\n \
    \   }\n    return result.sorted(by: { $0.characters.count > $1.characters.count\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\"\
    , \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpdgqouhbm.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpdgqouhbm.swift:28:35:\
    \ error: 'characters' is unavailable: Please use String directly\n    return result.sorted(by:\
    \ { $0.characters.count > $1.characters.count })\n                           \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpdgqouhbm.swift:28:57:\
    \ error: 'characters' is unavailable: Please use String directly\n    return result.sorted(by:\
    \ { $0.characters.count > $1.characters.count })\n                           \
    \                             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824828
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.count < 2 {\n\
    \            result.append(word)\n        } else {\n            if word.count\
    \ > result[result.count - 1].count {\n                result.append(word)\n  \
    \          } else {\n                if word.count < result[result.count - 1].count\
    \ {\n                    result.removeLast()\n                    result.append(word)\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpvwro2_uj/tmpvwro2_uj.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019568ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0195381b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0195381988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01953807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvwro2_uj                        0x000055891be19946 <unavailable> + 6470

    5    libc.so.6                          0x00002b0195876460 __libc_start_main +
    245

    6    tmpvwro2_uj                        0x000055891be194c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    var i = 0\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        } else {\n            i\
    \ += 1\n        }\n    }\n    for word in result {\n        word.sort()\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpe93nbvcz.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpe93nbvcz.swift:28:14:\
    \ error: value of type 'String' has no member 'sort'\n        word.sort()\n  \
    \      ~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1659824827
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.contains(word)\
    \ {\n            continue\n        }\n        result.append(word)\n    }\n   \
    \ for word in result {\n        if word.characters.count % 2 == 1 {\n        \
    \    result.sort(by: {$0.characters.count > $1.characters.count})\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpb6xbxxfa.swift:26:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpb6xbxxfa.swift:27:33:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \ result.sort(by: {$0.characters.count > $1.characters.count})\n             \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpb6xbxxfa.swift:27:55: error: 'characters' is unavailable: Please\
    \ use String directly\n            result.sort(by: {$0.characters.count > $1.characters.count})\n\
    \                                                      ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    var i = 0\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        } else {\n            i\
    \ += 1\n        }\n    }\n    result.sort(byLength)\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp19r7vslf.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp19r7vslf.swift:27:17:\
    \ error: cannot find 'byLength' in scope\n    result.sort(byLength)\n        \
    \        ^~~~~~~~\n/tmp/tmp19r7vslf.swift:27:17: error: missing argument label\
    \ 'by:' in call\n    result.sort(byLength)\n                ^\n              \
    \  by: \n/tmp/tmp19r7vslf.swift:27:17: error: converting non-escaping value to\
    \ '(String, String) throws -> Bool' may allow it to escape\n    result.sort(byLength)\n\
    \                ^\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    var i = 0\n    for word in lst {\n        if word.count\
    \ % 2 == 1 {\n            result.append(word)\n        }\n    }\n    for word\
    \ in result {\n        i += 1\n    }\n    result.sortInPlace()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpldnd5h3u.swift:28:12: error: value of type '[String]' has no member\
    \ 'sortInPlace'\n    result.sortInPlace()\n    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    var i = 0\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        } else {\n            i\
    \ += 1\n        }\n    }\n    result.sort { $0.characters.count < $1.characters.count\
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpusk1uivk.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpusk1uivk.swift:27:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    result.sort\
    \ { $0.characters.count < $1.characters.count }\n                     ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpusk1uivk.swift:27:44:\
    \ error: 'characters' is unavailable: Please use String directly\n    result.sort\
    \ { $0.characters.count < $1.characters.count }\n                            \
    \               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.count > 0 {\n\
    \            if word.count > result[result.count - 1].count {\n              \
    \  result.append(word)\n            } else {\n                let index = result.index(of:\
    \ word)\n                result.remove(at: index)\n                result.append(word)\n\
    \            }\n        } else {\n            result.append(word)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpwwxya0h5.swift:24:36: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n                let index = result.index(of: word)\n \
    \                                  ^\n/tmp/tmpwwxya0h5.swift:24:36: note: use\
    \ 'firstIndex(of:)' instead\n                let index = result.index(of: word)\n\
    \                                   ^~~~~\n                                  \
    \ firstIndex\n/tmp/tmpwwxya0h5.swift:25:35: error: value of optional type 'Array<String>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<String>.Index'\
    \ (aka 'Int')\n                result.remove(at: index)\n                    \
    \              ^\n/tmp/tmpwwxya0h5.swift:24:21: note: short-circuit using 'guard'\
    \ to exit this function early if the optional value contains 'nil'\n         \
    \       let index = result.index(of: word)\n                    ^\n          \
    \      guard                              else { return <#default value#> }\n\
    /tmp/tmpwwxya0h5.swift:24:36: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n                let index = result.index(of:\
    \ word)\n                                   ^\n                              \
    \                     ?? <#default value#>\n/tmp/tmpwwxya0h5.swift:24:36: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \                let index = result.index(of: word)\n                        \
    \           ^\n                                                  !\n/tmp/tmpwwxya0h5.swift:25:35:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n                result.remove(at: index)\n                          \
    \        ^\n                                        ?? <#default value#>\n/tmp/tmpwwxya0h5.swift:25:35:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n                result.remove(at: index)\n                          \
    \        ^\n                                       !\n"
  stdout: ''
  timestamp: 1659824827
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.contains(word)\
    \ {\n            continue\n        }\n        if word.characters.count % 2 ==\
    \ 1 {\n            continue\n        }\n        result.append(word)\n    }\n \
    \   result.sortInPlace()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmp027oql9t.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp027oql9t.swift:28:12:\
    \ error: value of type '[String]' has no member 'sortInPlace'\n    result.sortInPlace()\n\
    \    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824828
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    var i = 0\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        } else {\n            i\
    \ += 1\n        }\n    }\n    result.sortInPlace({ $0.characters.count > $1.characters.count\
    \ })\n    result.sortInPlace({ $0.characters.count < $1.characters.count })\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpvrxn00fd.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpvrxn00fd.swift:27:12:\
    \ error: value of type '[String]' has no member 'sortInPlace'\n    result.sortInPlace({\
    \ $0.characters.count > $1.characters.count })\n    ~~~~~~ ^~~~~~~~~~~\n/tmp/tmpvrxn00fd.swift:28:12:\
    \ error: value of type '[String]' has no member 'sortInPlace'\n    result.sortInPlace({\
    \ $0.characters.count < $1.characters.count })\n    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824828
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.contains(word)\
    \ {\n            continue\n        }\n        if word.characters.count % 2 ==\
    \ 1 {\n            result.append(word)\n            continue\n        }\n    \
    \    let index = result.index(of: word)\n        if index != nil {\n         \
    \   result.remove(at: index!)\n        }\n    }\n    return result.sorted(by:\
    \ { (word1, word2) -> Bool in\n        return word1.characters.count < word2.characters.count\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\",\
    \ \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpgpk8lo6z.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpgpk8lo6z.swift:27:28:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        let\
    \ index = result.index(of: word)\n                           ^\n/tmp/tmpgpk8lo6z.swift:27:28:\
    \ note: use 'firstIndex(of:)' instead\n        let index = result.index(of: word)\n\
    \                           ^~~~~\n                           firstIndex\n/tmp/tmpgpk8lo6z.swift:33:22:\
    \ error: 'characters' is unavailable: Please use String directly\n        return\
    \ word1.characters.count < word2.characters.count\n                     ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpgpk8lo6z.swift:33:47:\
    \ error: 'characters' is unavailable: Please use String directly\n        return\
    \ word1.characters.count < word2.characters.count\n                          \
    \                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    var i = 0\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        } else {\n            i\
    \ += 1\n        }\n    }\n    result.sort(by: { (word1, word2) -> Bool in\n  \
    \      if word1.characters.count > word2.characters.count {\n            return\
    \ true\n        }\n        return false\n    })\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpu6bxcfe9.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpu6bxcfe9.swift:28:18:\
    \ error: 'characters' is unavailable: Please use String directly\n        if word1.characters.count\
    \ > word2.characters.count {\n                 ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpu6bxcfe9.swift:28:43: error: 'characters'\
    \ is unavailable: Please use String directly\n        if word1.characters.count\
    \ > word2.characters.count {\n                                          ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    var i = 0\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        } else {\n            i\
    \ += 1\n        }\n    }\n    result.sortInPlace({ $0.characters.count > $1.characters.count\
    \ })\n    result.sortInPlace({ $0.characters.count < $1.characters.count })\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpvrxn00fd.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpvrxn00fd.swift:27:12:\
    \ error: value of type '[String]' has no member 'sortInPlace'\n    result.sortInPlace({\
    \ $0.characters.count > $1.characters.count })\n    ~~~~~~ ^~~~~~~~~~~\n/tmp/tmpvrxn00fd.swift:28:12:\
    \ error: value of type '[String]' has no member 'sortInPlace'\n    result.sortInPlace({\
    \ $0.characters.count < $1.characters.count })\n    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824828
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.count > 0 {\n\
    \            if word.count > result[result.count - 1].count {\n              \
    \  result.append(word)\n            } else {\n                let index = result.index(of:\
    \ word)\n                result.remove(at: index)\n                result.append(word)\n\
    \            }\n        } else {\n            result.append(word)\n        }\n\
    \    }\n    return result.sorted(by: { $0.count < $1.count })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpba7z3j0m.swift:24:36: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n                let index = result.index(of: word)\n \
    \                                  ^\n/tmp/tmpba7z3j0m.swift:24:36: note: use\
    \ 'firstIndex(of:)' instead\n                let index = result.index(of: word)\n\
    \                                   ^~~~~\n                                  \
    \ firstIndex\n/tmp/tmpba7z3j0m.swift:25:35: error: value of optional type 'Array<String>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<String>.Index'\
    \ (aka 'Int')\n                result.remove(at: index)\n                    \
    \              ^\n/tmp/tmpba7z3j0m.swift:24:21: note: short-circuit using 'guard'\
    \ to exit this function early if the optional value contains 'nil'\n         \
    \       let index = result.index(of: word)\n                    ^\n          \
    \      guard                              else { return <#default value#> }\n\
    /tmp/tmpba7z3j0m.swift:24:36: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n                let index = result.index(of:\
    \ word)\n                                   ^\n                              \
    \                     ?? <#default value#>\n/tmp/tmpba7z3j0m.swift:24:36: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \                let index = result.index(of: word)\n                        \
    \           ^\n                                                  !\n/tmp/tmpba7z3j0m.swift:25:35:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n                result.remove(at: index)\n                          \
    \        ^\n                                        ?? <#default value#>\n/tmp/tmpba7z3j0m.swift:25:35:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n                result.remove(at: index)\n                          \
    \        ^\n                                       !\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    var i = 0\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        }\n    }\n    for word\
    \ in result {\n        i += 1\n    }\n    for word in result {\n        if word.characters.count\
    \ > i {\n            result.insert(i, word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpxp3zd53f.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpxp3zd53f.swift:29:17:\
    \ error: 'characters' is unavailable: Please use String directly\n        if word.characters.count\
    \ > i {\n                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpxp3zd53f.swift:30:26: error: missing argument labels 'contentsOf:at:'\
    \ in call\n            result.insert(i, word)\n                         ^\n  \
    \                        contentsOf:  at: \n/tmp/tmpxp3zd53f.swift:30:30: error:\
    \ cannot convert value of type 'String' to expected argument type 'Array<String>.Index'\
    \ (aka 'Int')\n            result.insert(i, word)\n                          \
    \   ^\n/tmp/tmpxp3zd53f.swift:30:13: error: instance method 'insert(contentsOf:at:)'\
    \ requires that 'Int' conform to 'Collection'\n            result.insert(i, word)\n\
    \            ^\nSwift.RangeReplaceableCollection:7:37: note: where 'C' = 'Int'\n\
    \    @inlinable public mutating func insert<C>(contentsOf newElements: __owned\
    \ C, at i: Self.Index) where C : Collection, Self.Element == C.Element\n     \
    \                               ^\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if word.count % 2 == 1 {\n\
    \            result.append(word)\n        }\n    }\n    result.sortInPlace()\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpz2q5ugnf.swift:24:12: error: value of type '[String]' has no member\
    \ 'sortInPlace'\n    result.sortInPlace()\n    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824828
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        }\n    }\n    result.sortInPlace({\
    \ $0.characters.count > $1.characters.count })\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp1wjyxd5k.swift:20:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp1wjyxd5k.swift:24:12:\
    \ error: value of type '[String]' has no member 'sortInPlace'\n    result.sortInPlace({\
    \ $0.characters.count > $1.characters.count })\n    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824828
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    var i = 0\n    for word in lst {\n        if word.count\
    \ % 2 == 1 {\n            result.append(word)\n        } else {\n            i\
    \ += 1\n        }\n    }\n    result.sortInPlace()\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpfs_rdzxu.swift:27:12: error: value of type '[String]' has no member\
    \ 'sortInPlace'\n    result.sortInPlace()\n    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824828
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.count < result.count\
    \ {\n            result.append(word)\n        } else {\n            if word.count\
    \ > result.count {\n                result.removeFirst()\n            }\n    \
    \        result.append(word)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'Swift/RangeReplaceableCollection.swift:623: Fatal error: Can''t remove
    first element from an empty collection

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fa3075c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fa2d6c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fa2d6c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fa2d6c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fa2d6bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b8fa2d5bff0 RangeReplaceableCollection.removeFirst()
    + 272

    6    tmp50fuejqs                        0x000055cefe567885 <unavailable> + 10373

    7    tmp50fuejqs                        0x000055cefe5667ad <unavailable> + 6061

    8    libc.so.6                          0x00002b8fa3261460 __libc_start_main +
    245

    9    tmp50fuejqs                        0x000055cefe566429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.contains(word)\
    \ {\n            continue\n        }\n        let wordLength = word.characters.count\n\
    \        if wordLength % 2 == 1 {\n            result.insert(word, at: 0)\n  \
    \      } else {\n            result.insert(word, at: result.count - 1)\n     \
    \   }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp2qj_xf2g.swift:23:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let wordLength = word.characters.count\n      \
    \                        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n"
  stdout: ''
  timestamp: 1659824827
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.contains(word)\
    \ {\n            continue\n        }\n        if word.characters.count % 2 ==\
    \ 1 {\n            continue\n        }\n        result.append(word)\n    }\n \
    \   result.sortInPlace()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmp027oql9t.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp027oql9t.swift:28:12:\
    \ error: value of type '[String]' has no member 'sortInPlace'\n    result.sortInPlace()\n\
    \    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824828
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    var i = 0\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        }\n    }\n    for word\
    \ in result {\n        if word.characters.count > 1 {\n            result.insert(i,\
    \ word)\n            i += 1\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp59yj875n.swift:21:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp59yj875n.swift:26:17:\
    \ error: 'characters' is unavailable: Please use String directly\n        if word.characters.count\
    \ > 1 {\n                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmp59yj875n.swift:27:13: error: instance method 'insert(contentsOf:at:)'\
    \ requires that 'Int' conform to 'Collection'\n            result.insert(i, word)\n\
    \            ^\nSwift.RangeReplaceableCollection:7:37: note: where 'C' = 'Int'\n\
    \    @inlinable public mutating func insert<C>(contentsOf newElements: __owned\
    \ C, at i: Self.Index) where C : Collection, Self.Element == C.Element\n     \
    \                               ^\n/tmp/tmp59yj875n.swift:27:26: error: missing\
    \ argument labels 'contentsOf:at:' in call\n            result.insert(i, word)\n\
    \                         ^\n                          contentsOf:  at: \n/tmp/tmp59yj875n.swift:27:30:\
    \ error: cannot convert value of type 'String' to expected argument type 'Array<String>.Index'\
    \ (aka 'Int')\n            result.insert(i, word)\n                          \
    \   ^\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.contains(word)\
    \ {\n            continue\n        }\n        if word.characters.count % 2 ==\
    \ 1 {\n            continue\n        }\n        result.insert(word, at: 0)\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp50rr2jnp.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659824827
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.count < 2 {\n\
    \            result.append(word)\n        } else {\n            if word.count\
    \ > result[0].count {\n                result.append(word)\n            } else\
    \ {\n                if word.count < result[1].count {\n                    result[1]\
    \ = word\n                } else {\n                    result[0] = word\n   \
    \             }\n            }\n        }\n    }\n    return result.sorted(by:\
    \ { (word1, word2) -> Bool in\n        return word1.count < word2.count\n    })\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpj0q5f36i/tmpj0q5f36i.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a20f5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a20c55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a20c55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a20c547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj0q5f36i                        0x0000555d8048b926 <unavailable> + 6438

    5    libc.so.6                          0x00002b6a2114a460 __libc_start_main +
    245

    6    tmpj0q5f36i                        0x0000555d8048b4a9 <unavailable> + 5289

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if word.count % 2 == 1 {\n\
    \            result.append(word)\n        }\n    }\n    result.sortInPlace()\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpz2q5ugnf.swift:24:12: error: value of type '[String]' has no member\
    \ 'sortInPlace'\n    result.sortInPlace()\n    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824828
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ res: [String] = []\n    for str in lst {\n        if res.contains(str) {\n \
    \           continue\n        }\n        if str.isEmpty {\n            continue\n\
    \        }\n        if str.count % 2 == 1 {\n            continue\n        }\n\
    \        res.append(str)\n    }\n    res.sort()\n    return res\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpbxdo2u7z/tmpbxdo2u7z.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae5359a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae535699b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae535699988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5356987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbxdo2u7z                        0x000055812f9df72b <unavailable> + 10027

    5    libc.so.6                          0x00002ae535b8e460 __libc_start_main +
    245

    6    tmpbxdo2u7z                        0x000055812f9de549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.count < result.count\
    \ {\n            result.append(word)\n        }\n    }\n    for word in result\
    \ {\n        if word.count % 2 == 1 {\n            result.sort(by: { (word1, word2)\
    \ -> Bool in\n                return word1.count < word2.count\n            })\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmptb9plf55/tmptb9plf55.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7929b36c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b792982db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b792982d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b792982c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptb9plf55                        0x000056151852f916 <unavailable> + 6422

    5    libc.so.6                          0x00002b7929d22460 __libc_start_main +
    245

    6    tmptb9plf55                        0x000056151852f499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.count < 2 {\n\
    \            result.append(word)\n        } else if result.count == 2 {\n    \
    \        if word.count > result[0].count {\n                result[0] = word\n\
    \            } else {\n                result[1] = word\n            }\n     \
    \   } else {\n            if word.count > result[0].count {\n                result[0]\
    \ = word\n            } else {\n                if word.count > result[1].count\
    \ {\n                    result[1] = word\n                } else {\n        \
    \            result[2] = word\n                }\n            }\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpru4j6ox9/tmpru4j6ox9.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b14d41c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b14d3ec0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b14d3ec0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b14d3ebf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpru4j6ox9                        0x000055cf7da9f8b6 <unavailable> + 6326

    5    libc.so.6                          0x00002b14d43b5460 __libc_start_main +
    245

    6    tmpru4j6ox9                        0x000055cf7da9f439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.contains(word)\
    \ {\n            continue\n        }\n        if word.characters.count % 2 ==\
    \ 1 {\n            continue\n        }\n        result.append(word)\n    }\n \
    \   result.sortInPlace({ $0.characters.count < $1.characters.count })\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpmaqx_vhn.swift:23:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpmaqx_vhn.swift:28:12:\
    \ error: value of type '[String]' has no member 'sortInPlace'\n    result.sortInPlace({\
    \ $0.characters.count < $1.characters.count })\n    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if result.count > 0 {\n\
    \            if word.count > result[result.count - 1].count {\n              \
    \  result.append(word)\n            } else {\n                let index = result.index(of:\
    \ word)\n                result.remove(at: index)\n                result.append(word)\n\
    \            }\n        } else {\n            result.append(word)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpwwxya0h5.swift:24:36: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n                let index = result.index(of: word)\n \
    \                                  ^\n/tmp/tmpwwxya0h5.swift:24:36: note: use\
    \ 'firstIndex(of:)' instead\n                let index = result.index(of: word)\n\
    \                                   ^~~~~\n                                  \
    \ firstIndex\n/tmp/tmpwwxya0h5.swift:25:35: error: value of optional type 'Array<String>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<String>.Index'\
    \ (aka 'Int')\n                result.remove(at: index)\n                    \
    \              ^\n/tmp/tmpwwxya0h5.swift:24:21: note: short-circuit using 'guard'\
    \ to exit this function early if the optional value contains 'nil'\n         \
    \       let index = result.index(of: word)\n                    ^\n          \
    \      guard                              else { return <#default value#> }\n\
    /tmp/tmpwwxya0h5.swift:24:36: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n                let index = result.index(of:\
    \ word)\n                                   ^\n                              \
    \                     ?? <#default value#>\n/tmp/tmpwwxya0h5.swift:24:36: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \                let index = result.index(of: word)\n                        \
    \           ^\n                                                  !\n/tmp/tmpwwxya0h5.swift:25:35:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n                result.remove(at: index)\n                          \
    \        ^\n                                        ?? <#default value#>\n/tmp/tmpwwxya0h5.swift:25:35:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n                result.remove(at: index)\n                          \
    \        ^\n                                       !\n"
  stdout: ''
  timestamp: 1659824827
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        }\n    }\n    result.sortInPlace({\
    \ $0.characters.count > $1.characters.count })\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp1wjyxd5k.swift:20:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp1wjyxd5k.swift:24:12:\
    \ error: value of type '[String]' has no member 'sortInPlace'\n    result.sortInPlace({\
    \ $0.characters.count > $1.characters.count })\n    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824828
