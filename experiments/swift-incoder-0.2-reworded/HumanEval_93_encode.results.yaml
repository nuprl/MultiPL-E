language: swift
name: HumanEval_93_encode
results:
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result += \"A\"\n        case \"e\":\n            result +=\
    \ \"E\"\n        case \"i\":\n            result += \"I\"\n        case \"o\"\
    :\n            result += \"O\"\n        case \"u\":\n            result += \"\
    U\"\n        default:\n            result += letter\n        }\n    }\n    for\
    \ letter in result {\n        switch letter {\n        case \"A\":\n         \
    \   result += \"a\"\n        case \"E\":\n            result += \"e\"\n      \
    \  case \"I\":\n            result += \"i\"\n        case \"O\":\n           \
    \ result += \"o\"\n        case \"U\":\n            result += \"u\"\n        default:\n\
    \            result += letter\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpooaw0hvw.swift:27:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n/tmp/tmpooaw0hvw.swift:43:23: error: cannot convert value of\
    \ type 'Character' to expected argument type 'String'\n            result += letter\n\
    \                      ^\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let replacement = alphabet[index + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ \"A\", with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpmc5qoaid.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmpmc5qoaid.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index + 2]\n                          ^~~~~~~~\n\
    /tmp/tmpmc5qoaid.swift:17:34: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \        result += String(letter).replacingOccurrences(of: \"A\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)\n        let replacement = alphabet[index + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ \"AEIOUaeiou\", with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpr715gtt8.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)\n                    ^~~~~~~~\n\
    /tmp/tmpr715gtt8.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index + 2]\n                          ^~~~~~~~\n\
    /tmp/tmpr715gtt8.swift:17:34: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \        result += String(letter).replacingOccurrences(of: \"AEIOUaeiou\", with:\
    \ replacement)\n                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)\n        let replacement = alphabet[index! + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ \"A\", with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpavu74_ts.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)\n                    ^~~~~~~~\n\
    /tmp/tmpavu74_ts.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index! + 2]\n                          ^~~~~~~~\n\
    /tmp/tmpavu74_ts.swift:17:34: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \        result += String(letter).replacingOccurrences(of: \"A\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n        case \"e\":\n        case \"i\":\n        case \"o\":\n        case\
    \ \"u\":\n            result += letter\n        default:\n            result +=\
    \ letter.swapCase()\n        }\n    }\n    for vowel in \"aeiou\" {\n        result\
    \ += vowel.swapCase()\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpse5leemb.swift:16:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmpse5leemb.swift:17:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmpse5leemb.swift:18:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpse5leemb.swift:19:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpse5leemb.swift:21:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmpse5leemb.swift:23:30:\
    \ error: value of type 'Character' has no member 'swapCase'\n            result\
    \ += letter.swapCase()\n                      ~~~~~~ ^~~~~~~~\n/tmp/tmpse5leemb.swift:27:25:\
    \ error: value of type 'Character' has no member 'swapCase'\n        result +=\
    \ vowel.swapCase()\n                  ~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)\n        let replacement = alphabet[index! + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ \"A\", with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpavu74_ts.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)\n                    ^~~~~~~~\n\
    /tmp/tmpavu74_ts.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index! + 2]\n                          ^~~~~~~~\n\
    /tmp/tmpavu74_ts.swift:17:34: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \        result += String(letter).replacingOccurrences(of: \"A\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n        case \"e\":\n        case \"i\":\n        case \"o\":\n        case\
    \ \"u\":\n            result += letter\n        default:\n            result +=\
    \ String(letter).swapCase()\n        }\n    }\n    for vowel in \"aeiou\" {\n\
    \        result += String(vowel).swapCase()\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpx4_0f_63.swift:16:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmpx4_0f_63.swift:17:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmpx4_0f_63.swift:18:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpx4_0f_63.swift:19:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpx4_0f_63.swift:21:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmpx4_0f_63.swift:23:38:\
    \ error: value of type 'String' has no member 'swapCase'\n            result +=\
    \ String(letter).swapCase()\n                      ~~~~~~~~~~~~~~ ^~~~~~~~\n/tmp/tmpx4_0f_63.swift:27:33:\
    \ error: value of type 'String' has no member 'swapCase'\n        result += String(vowel).swapCase()\n\
    \                  ~~~~~~~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result += \"A\"\n        case \"b\":\n            result +=\
    \ \"B\"\n        case \"c\":\n            result += \"C\"\n        case \"d\"\
    :\n            result += \"D\"\n        case \"e\":\n            result += \"\
    E\"\n        case \"f\":\n            result += \"F\"\n        case \"g\":\n \
    \           result += \"G\"\n        case \"h\":\n            result += \"H\"\n\
    \        case \"i\":\n            result += \"I\"\n        case \"j\":\n     \
    \       result += \"J\"\n        case \"k\":\n            result += \"K\"\n  \
    \      case \"l\":\n            result += \"L\"\n        case \"m\":\n       \
    \     result += \"M\"\n        case \"n\":\n            result += \"N\"\n    \
    \    case \"o\":\n            result += \"O\"\n        case \"p\":\n         \
    \   result += \"P\"\n        case \"q\":\n            result += \"Q\"\n      \
    \  case \"r\":\n            result += \"R\"\n        case \"s\":\n           \
    \ result += \"S\"\n        case \"t\":\n            result += \"T\"\n        case\
    \ \"u\":\n            result += \"U\"\n        case \"v\":\n            result\
    \ += \"V\"\n        case \"w\":\n            result += \"W\"\n        case \"\
    x\":\n            result += \"X\"\n        case \"y\":\n            result +=\
    \ \"Y\"\n        case \"z\":\n            result += \"Z\"\n        default:\n\
    \            result += letter\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpijzvts68.swift:69:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += letter.lowercased()\n        } else {\n            result += letter.uppercased()\n\
    \        }\n    }\n    for letter in result {\n        if letter == \"A\" || letter\
    \ == \"E\" || letter == \"I\" || letter == \"O\" || letter == \"U\" {\n      \
    \      result += letter\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp1bnjjad0.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmp1bnjjad0.swift:23:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += letter.lowercased()\n        } else {\n            result += letter.uppercased()\n\
    \        }\n    }\n    for vowel in \"AEIOUaeiou\" {\n        let index = result.index(of:\
    \ vowel)\n        if index != nil {\n            let replacement = result.index(before:\
    \ index!)\n            if replacement != nil {\n                let replacementString\
    \ = result.substring(from: replacement!)\n                let replacementIndex\
    \ = replacementString.index(of: vowel)\n                if replacementIndex !=\
    \ nil {\n                    let replacementString2 = replacementString.substring(from:\
    \ replacementIndex!)\n                    let replacementIndex2 = replacementString2.index(of:\
    \ vowel)\n                    if replacementIndex2 != nil {\n                \
    \        let replacementString3 = replacementString2.substring(from: replacementIndex2!)\n\
    \                        let replacementIndex3 = replacementString3.index(of:\
    \ vowel)\n                        if replacementIndex3 != nil {\n            \
    \                let replacementString4 = replacementString3.substring(from: replacementIndex3!)\n\
    \                            let replacementIndex4 = replacementString4.index(of:\
    \ vowel)\n                            if replacementIndex4 != nil {\n        \
    \                        let replacementString5 = replacementString4.substring(from:\
    \ replacementIndex4!)\n                                let replacementIndex5 =\
    \ replacementString5.index(of: vowel)\n                                if replacementIndex5\
    \ != nil {\n                                    let replacementString6 = replacementString5.substring(from:\
    \ replacementIndex5!)\n                                    let replacementIndex6\
    \ = replacementString6.index(of: vowel)\n                                    if\
    \ replacementIndex6 != nil {\n                                        let replacementString7\
    \ = replacementString6.substring(from: replacementIndex6!)\n                 \
    \                       let replacementIndex7 = replacementString7.index(of: vowel)\n\
    \                                        if replacementIndex7 != nil {\n     \
    \                                       let replacementString8 = replacementString7.substring(from:\
    \ replacementIndex7!)\n                                            let replacementIndex8\
    \ = replacementString8.index(of: vowel)\n                                    \
    \        if replacementIndex8 != nil {\n                                     \
    \           let replacementString9 = replacementString8.substring(from: replacementIndex8!)\n\
    \                                                let replacementIndex9 = replacementString9.index(of:\
    \ vowel)\n                                                if replacementIndex9\
    \ != nil {\n                                                    let replacementString10\
    \ = replacementString9.substring(from: replacementIndex9!)\n                 \
    \                                   let replacementIndex10 = replacementString10.index(of:\
    \ vowel)\n                                                    if replacementIndex10\
    \ != nil {\n                                                        let replacementString11\
    \ = replacementString10.substring(from: replacementIndex10!)\n               \
    \                                         let replacementIndex11 = replacementString11.index(of:\
    \ vowel)\n                                                        if replacementIndex11\
    \ != nil {\n                                                            let replacementString12\
    \ = replacementString11.substring(from: replacementIndex11!)\n               \
    \                                             let replacement\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpc6hohtai.swift:80:84: error: expected '}' at end of brace statement\n\
    assert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq\
    \ wRkTg\")\n                                                                 \
    \                  ^\n/tmp/tmpc6hohtai.swift:55:82: note: to match this opening\
    \ '{'\n                                                    if replacementIndex10\
    \ != nil {\n                                                                 \
    \                ^\n/tmp/tmpc6hohtai.swift:80:84: error: expected '}' at end of\
    \ brace statement\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")\n                                               \
    \                                    ^\n/tmp/tmpc6hohtai.swift:52:77: note: to\
    \ match this opening '{'\n                                                if replacementIndex9\
    \ != nil {\n                                                                 \
    \           ^\n/tmp/tmpc6hohtai.swift:80:84: error: expected '}' at end of brace\
    \ statement\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\")\n                                                    \
    \                               ^\n/tmp/tmpc6hohtai.swift:49:73: note: to match\
    \ this opening '{'\n                                            if replacementIndex8\
    \ != nil {\n                                                                 \
    \       ^\n/tmp/tmpc6hohtai.swift:80:84: error: expected '}' at end of brace statement\n\
    assert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq\
    \ wRkTg\")\n                                                                 \
    \                  ^\n/tmp/tmpc6hohtai.swift:46:69: note: to match this opening\
    \ '{'\n                                        if replacementIndex7 != nil {\n\
    \                                                                    ^\n/tmp/tmpc6hohtai.swift:80:84:\
    \ error: expected '}' at end of brace statement\nassert(encode(message: \"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\n                  \
    \                                "
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)\n        let replacement = alphabet[index! + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ \"A\", with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpavu74_ts.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)\n                    ^~~~~~~~\n\
    /tmp/tmpavu74_ts.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index! + 2]\n                          ^~~~~~~~\n\
    /tmp/tmpavu74_ts.swift:17:34: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \        result += String(letter).replacingOccurrences(of: \"A\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += letter.lowercased()\n        } else {\n            result += letter.uppercased()\n\
    \        }\n    }\n    for vowel in \"AEIOUaeiou\" {\n        result = result.replacingOccurrences(of:\
    \ vowel, with: vowel.lowercased())\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmphf5v0q9s.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmphf5v0q9s.swift:22:25:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result = result.replacingOccurrences(of: vowel, with: vowel.lowercased())\n\
    \                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n        case \"e\":\n        case \"i\":\n        case \"o\":\n        case\
    \ \"u\":\n            result += letter\n        default:\n            result +=\
    \ letter + String(letter).characters.index(of: letter)\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpjcke0e98.swift:16:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmpjcke0e98.swift:17:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmpjcke0e98.swift:18:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpjcke0e98.swift:19:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpjcke0e98.swift:21:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmpjcke0e98.swift:23:20:\
    \ error: binary operator '+=' cannot be applied to two 'String' operands\n   \
    \         result += letter + String(letter).characters.index(of: letter)\n   \
    \         ~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjcke0e98.swift:23:20:\
    \ note: overloads for '+=' exist with these partially matching parameter lists:\
    \ (inout String, String)\n            result += letter + String(letter).characters.index(of:\
    \ letter)\n                   ^\n/tmp/tmpjcke0e98.swift:23:30: error: binary operator\
    \ '+' cannot be applied to operands of type 'Character' and 'String.Index?'\n\
    \            result += letter + String(letter).characters.index(of: letter)\n\
    \                      ~~~~~~ ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result += \"A\"\n        case \"b\":\n            result +=\
    \ \"B\"\n        case \"c\":\n            result += \"C\"\n        case \"d\"\
    :\n            result += \"D\"\n        case \"e\":\n            result += \"\
    E\"\n        case \"f\":\n            result += \"F\"\n        case \"g\":\n \
    \           result += \"G\"\n        case \"h\":\n            result += \"H\"\n\
    \        case \"i\":\n            result += \"I\"\n        case \"j\":\n     \
    \       result += \"J\"\n        case \"k\":\n            result += \"K\"\n  \
    \      case \"l\":\n            result += \"L\"\n        case \"m\":\n       \
    \     result += \"M\"\n        case \"n\":\n            result += \"N\"\n    \
    \    case \"o\":\n            result += \"O\"\n        case \"p\":\n         \
    \   result += \"P\"\n        case \"q\":\n            result += \"Q\"\n      \
    \  case \"r\":\n            result += \"R\"\n        case \"s\":\n           \
    \ result += \"S\"\n        case \"t\":\n            result += \"T\"\n        case\
    \ \"u\":\n            result += \"U\"\n        case \"v\":\n            result\
    \ += \"V\"\n        case \"w\":\n            result += \"W\"\n        case \"\
    x\":\n            result += \"X\"\n        case \"y\":\n            result +=\
    \ \"Y\"\n        case \"z\":\n            result += \"Z\"\n        default:\n\
    \            result += letter\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpijzvts68.swift:69:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = english.index(of: letter)\n\
    \        let replacement = english[index! + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ \"A\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"E\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"I\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"O\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"U\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"Y\", with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmplburdqta.swift:15:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmplburdqta.swift:16:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!\
    \ + 2]\n                          ^~~~~~~\n/tmp/tmplburdqta.swift:17:34: error:\
    \ value of type 'String' has no member 'replacingOccurrences'\n        result\
    \ += String(letter).replacingOccurrences(of: \"A\", with: replacement)\n     \
    \             ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmplburdqta.swift:18:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"E\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmplburdqta.swift:19:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"I\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmplburdqta.swift:20:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"O\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmplburdqta.swift:21:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"U\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmplburdqta.swift:22:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"Y\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += letter.lowercased()\n        } else {\n            result += letter.uppercased()\n\
    \        }\n    }\n    for vowel in vowels {\n        if let index = result.rangeOfString(vowel)\
    \ {\n            let replacement = result.substringWithRange(index).lowercased()\n\
    \            let replacementIndex = result.rangeOfString(vowel, options: .BackwardsSearch).lowerBound\n\
    \            let replacementRange = NSRange(location: replacementIndex, length:\
    \ 1)\n            result = result.stringByReplacingCharactersInRange(replacementRange,\
    \ withString: replacement)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpsmtd90f7.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmpsmtd90f7.swift:21:18:\
    \ error: cannot find 'vowels' in scope\n    for vowel in vowels {\n          \
    \       ^~~~~~\n/tmp/tmpsmtd90f7.swift:22:31: error: value of type 'String' has\
    \ no member 'rangeOfString'\n        if let index = result.rangeOfString(vowel)\
    \ {\n                       ~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmpsmtd90f7.swift:23:38:\
    \ error: value of type 'String' has no member 'substringWithRange'\n         \
    \   let replacement = result.substringWithRange(index).lowercased()\n        \
    \                      ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpsmtd90f7.swift:24:43:\
    \ error: value of type 'String' has no member 'rangeOfString'\n            let\
    \ replacementIndex = result.rangeOfString(vowel, options: .BackwardsSearch).lowerBound\n\
    \                                   ~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmpsmtd90f7.swift:24:74:\
    \ error: cannot infer contextual base in reference to member 'BackwardsSearch'\n\
    \            let replacementIndex = result.rangeOfString(vowel, options: .BackwardsSearch).lowerBound\n\
    \                                                                        ~^~~~~~~~~~~~~~~\n\
    /tmp/tmpsmtd90f7.swift:25:36: error: cannot find 'NSRange' in scope\n        \
    \    let replacementRange = NSRange(location: replacementIndex, length: 1)\n \
    \                                  ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let replacement = alphabet[index + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ \"A\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"E\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"I\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"O\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"U\", with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp2y2rmi4n.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmp2y2rmi4n.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index + 2]\n                          ^~~~~~~~\n\
    /tmp/tmp2y2rmi4n.swift:17:34: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \        result += String(letter).replacingOccurrences(of: \"A\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2y2rmi4n.swift:18:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"E\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2y2rmi4n.swift:19:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"I\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2y2rmi4n.swift:20:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"O\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2y2rmi4n.swift:21:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"U\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let replacement = alphabet[index + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ vowel, with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp8qiy7t7b.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmp8qiy7t7b.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index + 2]\n                          ^~~~~~~~\n\
    /tmp/tmp8qiy7t7b.swift:17:59: error: cannot find 'vowel' in scope\n        result\
    \ += String(letter).replacingOccurrences(of: vowel, with: replacement)\n     \
    \                                                     ^~~~~\n/tmp/tmp8qiy7t7b.swift:17:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: vowel, with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result = \"t\"\n        case \"e\":\n            result = \"\
    h\"\n        case \"i\":\n            result = \"k\"\n        case \"o\":\n  \
    \          result = \"g\"\n        case \"u\":\n            result = \"s\"\n \
    \       default:\n            result = letter\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpdujgdhfs.swift:27:22: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            result = letter\n                     ^~~~~~\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result += \"A\"\n        case \"b\":\n            result +=\
    \ \"B\"\n        case \"c\":\n            result += \"C\"\n        case \"d\"\
    :\n            result += \"D\"\n        case \"e\":\n            result += \"\
    E\"\n        case \"f\":\n            result += \"F\"\n        case \"g\":\n \
    \           result += \"G\"\n        case \"h\":\n            result += \"H\"\n\
    \        case \"i\":\n            result += \"I\"\n        case \"j\":\n     \
    \       result += \"J\"\n        case \"k\":\n            result += \"K\"\n  \
    \      case \"l\":\n            result += \"L\"\n        case \"m\":\n       \
    \     result += \"M\"\n        case \"n\":\n            result += \"N\"\n    \
    \    case \"o\":\n            result += \"O\"\n        case \"p\":\n         \
    \   result += \"P\"\n        case \"q\":\n            result += \"Q\"\n      \
    \  case \"r\":\n            result += \"R\"\n        case \"s\":\n           \
    \ result += \"S\"\n        case \"t\":\n            result += \"T\"\n        case\
    \ \"u\":\n            result += \"U\"\n        case \"v\":\n            result\
    \ += \"V\"\n        case \"w\":\n            result += \"W\"\n        case \"\
    x\":\n            result += \"X\"\n        case \"y\":\n            result +=\
    \ \"Y\"\n        case \"z\":\n            result += \"Z\"\n        default:\n\
    \            result += letter\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpijzvts68.swift:69:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n        case \"e\":\n        case \"i\":\n        case \"o\":\n        case\
    \ \"u\":\n            result += letter\n        default:\n            result +=\
    \ letter + String(letter)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpo4hk7s38.swift:16:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmpo4hk7s38.swift:17:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmpo4hk7s38.swift:18:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpo4hk7s38.swift:19:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpo4hk7s38.swift:21:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmpo4hk7s38.swift:23:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter + String(letter)\n                      ^\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = english.index(of: letter)\n\
    \        let replacement = english[index! + 2]\n        result += english[index!]\
    \ + replacement\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpfrjk18mk.swift:15:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmpfrjk18mk.swift:16:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!\
    \ + 2]\n                          ^~~~~~~\n/tmp/tmpfrjk18mk.swift:17:19: error:\
    \ cannot find 'english' in scope\n        result += english[index!] + replacement\n\
    \                  ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let replacement = alphabet[index + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ \"A\", with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpmc5qoaid.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmpmc5qoaid.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index + 2]\n                          ^~~~~~~~\n\
    /tmp/tmpmc5qoaid.swift:17:34: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \        result += String(letter).replacingOccurrences(of: \"A\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let replacement = alphabet[index + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ \"A\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"E\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"I\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"O\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"U\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"Y\", with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp8dg237sf.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmp8dg237sf.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index + 2]\n                          ^~~~~~~~\n\
    /tmp/tmp8dg237sf.swift:17:34: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \        result += String(letter).replacingOccurrences(of: \"A\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8dg237sf.swift:18:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"E\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8dg237sf.swift:19:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"I\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8dg237sf.swift:20:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"O\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8dg237sf.swift:21:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"U\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8dg237sf.swift:22:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"Y\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = english.index(of: letter)\n\
    \        let replacement = english[english.index(of: letter, offsetBy: 2)]\n \
    \       result += english[index...index+1] + replacement\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp25uwwomp.swift:15:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmp25uwwomp.swift:16:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[english.index(of:\
    \ letter, offsetBy: 2)]\n                          ^~~~~~~\n/tmp/tmp25uwwomp.swift:16:35:\
    \ error: cannot find 'english' in scope\n        let replacement = english[english.index(of:\
    \ letter, offsetBy: 2)]\n                                  ^~~~~~~\n/tmp/tmp25uwwomp.swift:17:19:\
    \ error: cannot find 'english' in scope\n        result += english[index...index+1]\
    \ + replacement\n                  ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let replacement = alphabet[index + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ \"A\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"E\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"I\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"O\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"U\", with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp2y2rmi4n.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmp2y2rmi4n.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index + 2]\n                          ^~~~~~~~\n\
    /tmp/tmp2y2rmi4n.swift:17:34: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \        result += String(letter).replacingOccurrences(of: \"A\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2y2rmi4n.swift:18:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"E\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2y2rmi4n.swift:19:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"I\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2y2rmi4n.swift:20:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"O\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2y2rmi4n.swift:21:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"U\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for char in message {\n        let index = english.index(of: char)\n\
    \        let replacement = english[index! + 2]\n        result += String(char).replacingOccurrences(of:\
    \ \"A\", with: replacement)\n        result += String(char).replacingOccurrences(of:\
    \ \"E\", with: replacement)\n        result += String(char).replacingOccurrences(of:\
    \ \"I\", with: replacement)\n        result += String(char).replacingOccurrences(of:\
    \ \"O\", with: replacement)\n        result += String(char).replacingOccurrences(of:\
    \ \"U\", with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp_u6_a38c.swift:15:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: char)\n                    ^~~~~~~\n/tmp/tmp_u6_a38c.swift:16:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!\
    \ + 2]\n                          ^~~~~~~\n/tmp/tmp_u6_a38c.swift:17:32: error:\
    \ value of type 'String' has no member 'replacingOccurrences'\n        result\
    \ += String(char).replacingOccurrences(of: \"A\", with: replacement)\n       \
    \           ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_u6_a38c.swift:18:32: error:\
    \ value of type 'String' has no member 'replacingOccurrences'\n        result\
    \ += String(char).replacingOccurrences(of: \"E\", with: replacement)\n       \
    \           ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_u6_a38c.swift:19:32: error:\
    \ value of type 'String' has no member 'replacingOccurrences'\n        result\
    \ += String(char).replacingOccurrences(of: \"I\", with: replacement)\n       \
    \           ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_u6_a38c.swift:20:32: error:\
    \ value of type 'String' has no member 'replacingOccurrences'\n        result\
    \ += String(char).replacingOccurrences(of: \"O\", with: replacement)\n       \
    \           ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_u6_a38c.swift:21:32: error:\
    \ value of type 'String' has no member 'replacingOccurrences'\n        result\
    \ += String(char).replacingOccurrences(of: \"U\", with: replacement)\n       \
    \           ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result += \"A\"\n        case \"b\":\n            result +=\
    \ \"B\"\n        case \"c\":\n            result += \"C\"\n        case \"d\"\
    :\n            result += \"D\"\n        case \"e\":\n            result += \"\
    E\"\n        case \"f\":\n            result += \"F\"\n        case \"g\":\n \
    \           result += \"G\"\n        case \"h\":\n            result += \"H\"\n\
    \        case \"i\":\n            result += \"I\"\n        case \"j\":\n     \
    \       result += \"J\"\n        case \"k\":\n            result += \"K\"\n  \
    \      case \"l\":\n            result += \"L\"\n        case \"m\":\n       \
    \     result += \"M\"\n        case \"n\":\n            result += \"N\"\n    \
    \    case \"o\":\n            result += \"O\"\n        case \"p\":\n         \
    \   result += \"P\"\n        case \"q\":\n            result += \"Q\"\n      \
    \  case \"r\":\n            result += \"R\"\n        case \"s\":\n           \
    \ result += \"S\"\n        case \"t\":\n            result += \"T\"\n        case\
    \ \"u\":\n            result += \"U\"\n        case \"v\":\n            result\
    \ += \"V\"\n        case \"w\":\n            result += \"W\"\n        case \"\
    x\":\n            result += \"X\"\n        case \"y\":\n            result +=\
    \ \"Y\"\n        case \"z\":\n            result += \"Z\"\n        default:\n\
    \            result += letter\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpijzvts68.swift:69:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = english.index(of: letter)!\n\
    \        let replacement = english[index + 2]\n        result += english[letter]\n\
    \        result += replacement\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpbl68cqkm.swift:15:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)!\n                    ^~~~~~~\n\
    /tmp/tmpbl68cqkm.swift:16:27: error: cannot find 'english' in scope\n        let\
    \ replacement = english[index + 2]\n                          ^~~~~~~\n/tmp/tmpbl68cqkm.swift:17:19:\
    \ error: cannot find 'english' in scope\n        result += english[letter]\n \
    \                 ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n        case \"e\":\n        case \"i\":\n        case \"o\":\n        case\
    \ \"u\":\n            result += letter\n        default:\n            result +=\
    \ letter\n        }\n    }\n    for letter in result {\n        if let index =\
    \ english.index(of: letter) {\n            let twoLettersAhead = english[index\
    \ + 1]\n            result += twoLettersAhead\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpv90vx1if.swift:16:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmpv90vx1if.swift:17:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmpv90vx1if.swift:18:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpv90vx1if.swift:19:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpv90vx1if.swift:21:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmpv90vx1if.swift:23:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmpv90vx1if.swift:27:24:\
    \ error: cannot find 'english' in scope\n        if let index = english.index(of:\
    \ letter) {\n                       ^~~~~~~\n/tmp/tmpv90vx1if.swift:28:35: error:\
    \ cannot find 'english' in scope\n            let twoLettersAhead = english[index\
    \ + 1]\n                                  ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += String(letter).swapCase()\n        } else {\n            result\
    \ += String(letter)\n        }\n    }\n    for vowel in \"aeiouAEIOU\" {\n   \
    \     result += String(vowel).swapCase()\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpr79xovl2.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmpr79xovl2.swift:16:38:\
    \ error: value of type 'String' has no member 'swapCase'\n            result +=\
    \ String(letter).swapCase()\n                      ~~~~~~~~~~~~~~ ^~~~~~~~\n/tmp/tmpr79xovl2.swift:22:33:\
    \ error: value of type 'String' has no member 'swapCase'\n        result += String(vowel).swapCase()\n\
    \                  ~~~~~~~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let replacement = alphabet[index + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ \"A\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"E\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"I\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"O\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"U\", with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp2y2rmi4n.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmp2y2rmi4n.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index + 2]\n                          ^~~~~~~~\n\
    /tmp/tmp2y2rmi4n.swift:17:34: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \        result += String(letter).replacingOccurrences(of: \"A\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2y2rmi4n.swift:18:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"E\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2y2rmi4n.swift:19:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"I\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2y2rmi4n.swift:20:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"O\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2y2rmi4n.swift:21:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"U\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result += \"A\"\n        case \"b\":\n            result +=\
    \ \"B\"\n        case \"c\":\n            result += \"C\"\n        case \"d\"\
    :\n            result += \"D\"\n        case \"e\":\n            result += \"\
    E\"\n        case \"f\":\n            result += \"F\"\n        case \"g\":\n \
    \           result += \"G\"\n        case \"h\":\n            result += \"H\"\n\
    \        case \"i\":\n            result += \"I\"\n        case \"j\":\n     \
    \       result += \"J\"\n        case \"k\":\n            result += \"K\"\n  \
    \      case \"l\":\n            result += \"L\"\n        case \"m\":\n       \
    \     result += \"M\"\n        case \"n\":\n            result += \"N\"\n    \
    \    case \"o\":\n            result += \"O\"\n        case \"p\":\n         \
    \   result += \"P\"\n        case \"q\":\n            result += \"Q\"\n      \
    \  case \"r\":\n            result += \"R\"\n        case \"s\":\n           \
    \ result += \"S\"\n        case \"t\":\n            result += \"T\"\n        case\
    \ \"u\":\n            result += \"U\"\n        case \"v\":\n            result\
    \ += \"V\"\n        case \"w\":\n            result += \"W\"\n        case \"\
    x\":\n            result += \"X\"\n        case \"y\":\n            result +=\
    \ \"Y\"\n        case \"z\":\n            result += \"Z\"\n        default:\n\
    \            result += letter\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpijzvts68.swift:69:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)\n        let replacement = alphabet[index! + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ \"A\", with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpavu74_ts.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)\n                    ^~~~~~~~\n\
    /tmp/tmpavu74_ts.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index! + 2]\n                          ^~~~~~~~\n\
    /tmp/tmpavu74_ts.swift:17:34: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \        result += String(letter).replacingOccurrences(of: \"A\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)\n        let nextIndex = alphabet.index(of: letter, offsetBy: index\
    \ + 1)\n        let replacement = alphabet[nextIndex!]\n        result += replacement\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpy1g5euyc.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)\n                    ^~~~~~~~\n\
    /tmp/tmpy1g5euyc.swift:16:25: error: cannot find 'alphabet' in scope\n       \
    \ let nextIndex = alphabet.index(of: letter, offsetBy: index + 1)\n          \
    \              ^~~~~~~~\n/tmp/tmpy1g5euyc.swift:17:27: error: cannot find 'alphabet'\
    \ in scope\n        let replacement = alphabet[nextIndex!]\n                 \
    \         ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result += \"A\"\n        case \"b\":\n            result +=\
    \ \"B\"\n        case \"c\":\n            result += \"C\"\n        case \"d\"\
    :\n            result += \"D\"\n        case \"e\":\n            result += \"\
    E\"\n        case \"f\":\n            result += \"F\"\n        case \"g\":\n \
    \           result += \"G\"\n        case \"h\":\n            result += \"H\"\n\
    \        case \"i\":\n            result += \"I\"\n        case \"j\":\n     \
    \       result += \"J\"\n        case \"k\":\n            result += \"K\"\n  \
    \      case \"l\":\n            result += \"L\"\n        case \"m\":\n       \
    \     result += \"M\"\n        case \"n\":\n            result += \"N\"\n    \
    \    case \"o\":\n            result += \"O\"\n        case \"p\":\n         \
    \   result += \"P\"\n        case \"q\":\n            result += \"Q\"\n      \
    \  case \"r\":\n            result += \"R\"\n        case \"s\":\n           \
    \ result += \"S\"\n        case \"t\":\n            result += \"T\"\n        case\
    \ \"u\":\n            result += \"U\"\n        case \"v\":\n            result\
    \ += \"V\"\n        case \"w\":\n            result += \"W\"\n        case \"\
    x\":\n            result += \"X\"\n        case \"y\":\n            result +=\
    \ \"Y\"\n        case \"z\":\n            result += \"Z\"\n        default:\n\
    \            result += letter\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpijzvts68.swift:69:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let replacement = alphabet[index + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ \"A\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"E\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"I\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"O\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"U\", with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp2y2rmi4n.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmp2y2rmi4n.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index + 2]\n                          ^~~~~~~~\n\
    /tmp/tmp2y2rmi4n.swift:17:34: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \        result += String(letter).replacingOccurrences(of: \"A\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2y2rmi4n.swift:18:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"E\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2y2rmi4n.swift:19:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"I\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2y2rmi4n.swift:20:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"O\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2y2rmi4n.swift:21:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"U\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += letter.lowercased()\n        } else {\n            result += letter.uppercased()\n\
    \        }\n    }\n    for letter in result {\n        if letter.isUpper() {\n\
    \            result += letter.lowercased()\n        } else {\n            result\
    \ += letter.uppercased()\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpn8aviskb.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmpn8aviskb.swift:22:19:\
    \ error: value of type 'Character' has no member 'isUpper'\n        if letter.isUpper()\
    \ {\n           ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result += \"A\"\n        case \"b\":\n            result +=\
    \ \"B\"\n        case \"c\":\n            result += \"C\"\n        case \"d\"\
    :\n            result += \"D\"\n        case \"e\":\n            result += \"\
    E\"\n        case \"f\":\n            result += \"F\"\n        case \"g\":\n \
    \           result += \"G\"\n        case \"h\":\n            result += \"H\"\n\
    \        case \"i\":\n            result += \"I\"\n        case \"j\":\n     \
    \       result += \"J\"\n        case \"k\":\n            result += \"K\"\n  \
    \      case \"l\":\n            result += \"L\"\n        case \"m\":\n       \
    \     result += \"M\"\n        case \"n\":\n            result += \"N\"\n    \
    \    case \"o\":\n            result += \"O\"\n        case \"p\":\n         \
    \   result += \"P\"\n        case \"q\":\n            result += \"Q\"\n      \
    \  case \"r\":\n            result += \"R\"\n        case \"s\":\n           \
    \ result += \"S\"\n        case \"t\":\n            result += \"T\"\n        case\
    \ \"u\":\n            result += \"U\"\n        case \"v\":\n            result\
    \ += \"V\"\n        case \"w\":\n            result += \"W\"\n        case \"\
    x\":\n            result += \"X\"\n        case \"y\":\n            result +=\
    \ \"Y\"\n        case \"z\":\n            result += \"Z\"\n        default:\n\
    \            result += letter\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpijzvts68.swift:69:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)\n        let replacement = alphabet[index! + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ vowel, with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpuzejo_f4.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)\n                    ^~~~~~~~\n\
    /tmp/tmpuzejo_f4.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index! + 2]\n                          ^~~~~~~~\n\
    /tmp/tmpuzejo_f4.swift:17:59: error: cannot find 'vowel' in scope\n        result\
    \ += String(letter).replacingOccurrences(of: vowel, with: replacement)\n     \
    \                                                     ^~~~~\n/tmp/tmpuzejo_f4.swift:17:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: vowel, with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = english.index(of: letter)\n\
    \        if index != nil {\n            let vowel = english[index! + 1]\n    \
    \        let replacement = vowels[vowel]\n            result += replacement\n\
    \        } else {\n            result += letter\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpkp1ydz31.swift:15:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmpkp1ydz31.swift:17:25:\
    \ error: cannot find 'english' in scope\n            let vowel = english[index!\
    \ + 1]\n                        ^~~~~~~\n/tmp/tmpkp1ydz31.swift:18:31: error:\
    \ cannot find 'vowels' in scope\n            let replacement = vowels[vowel]\n\
    \                              ^~~~~~\n/tmp/tmpkp1ydz31.swift:21:23: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \       result += letter\n                      ^\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result += \"A\"\n        case \"b\":\n            result +=\
    \ \"B\"\n        case \"c\":\n            result += \"C\"\n        case \"d\"\
    :\n            result += \"D\"\n        case \"e\":\n            result += \"\
    E\"\n        case \"f\":\n            result += \"F\"\n        case \"g\":\n \
    \           result += \"G\"\n        case \"h\":\n            result += \"H\"\n\
    \        case \"i\":\n            result += \"I\"\n        case \"j\":\n     \
    \       result += \"J\"\n        case \"k\":\n            result += \"K\"\n  \
    \      case \"l\":\n            result += \"L\"\n        case \"m\":\n       \
    \     result += \"M\"\n        case \"n\":\n            result += \"N\"\n    \
    \    case \"o\":\n            result += \"O\"\n        case \"p\":\n         \
    \   result += \"P\"\n        case \"q\":\n            result += \"Q\"\n      \
    \  case \"r\":\n            result += \"R\"\n        case \"s\":\n           \
    \ result += \"S\"\n        case \"t\":\n            result += \"T\"\n        case\
    \ \"u\":\n            result += \"U\"\n        case \"v\":\n            result\
    \ += \"V\"\n        case \"w\":\n            result += \"W\"\n        case \"\
    x\":\n            result += \"X\"\n        case \"y\":\n            result +=\
    \ \"Y\"\n        case \"z\":\n            result += \"Z\"\n        default:\n\
    \            result += letter\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpijzvts68.swift:69:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += letter.lowercased()\n        } else {\n            result += letter.uppercased()\n\
    \        }\n    }\n    for vowel in \"AEIOUaeiou\" {\n        result = result.replacingOccurrences(of:\
    \ vowel, with: vowel.lowercased())\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmphf5v0q9s.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmphf5v0q9s.swift:22:25:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result = result.replacingOccurrences(of: vowel, with: vowel.lowercased())\n\
    \                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = english.index(of: letter)\n\
    \        let vowelIndex = index(of: \"a\")\n        let vowel = english[vowelIndex!]\n\
    \        let vowelIndex = index(of: \"e\")\n        let vowel = english[vowelIndex!]\n\
    \        let vowelIndex = index(of: \"i\")\n        let vowel = english[vowelIndex!]\n\
    \        let vowelIndex = index(of: \"o\")\n        let vowel = english[vowelIndex!]\n\
    \        let vowelIndex = index(of: \"u\")\n        let vowel = english[vowelIndex!]\n\
    \        let vowelIndex = index(of: \"A\")\n        let vowel = english[vowelIndex!]\n\
    \        let vowelIndex = index(of: \"E\")\n        let vowel = english[vowelIndex!]\n\
    \        let vowelIndex = index(of: \"I\")\n        let vowel = english[vowelIndex!]\n\
    \        let vowelIndex = index(of: \"O\")\n        let vowel = english[vowelIndex!]\n\
    \        let vowelIndex = index(of: \"U\")\n        let vowel = english[vowelIndex!]\n\
    \        let vowelIndex = index(of: \"a\")\n        let vowel = english[vowelIndex!]\n\
    \        let vowelIndex = index(of: \"e\")\n        let vowel = english[vowelIndex!]\n\
    \        let vowelIndex = index(of: \"i\")\n        let vowel = english[vowelIndex!]\n\
    \        let vowelIndex = index(of: \"o\")\n        let vowel = english[vowelIndex!]\n\
    \        let vowelIndex = index(of: \"u\")\n        let vowel = english[vowelIndex!]\n\
    \        let vowelIndex = index(of: \"A\")\n        let vowel = english[vowelIndex!]\n\
    \        let vowelIndex = index(of: \"E\")\n        let vowel = english[vowelIndex!]\n\
    \        let vowelIndex = index(of: \"I\")\n        let vowel = english[vowelIndex!]\n\
    \        let vowelIndex = index(of: \"O\")\n        let vowel = english[vowelIndex!]\n\
    \        let vowelIndex = index(of: \"U\")\n        let vowel = english[vowelIndex!]\n\
    \        let vowelIndex = index(of: \"a\")\n        let vowel = english[vowelIndex!]\n\
    \        let vowelIndex = index(of: \"e\")\n        let vowel = english[vowelIndex!]\n\
    \        let vowelIndex = index(of: \"i\")\n        let vowel = english[vowelIndex!]\n\
    \        let vowelIndex = index(of: \"o\")\n        let vowel = english[vowelIndex!]\n\
    \        let vowelIndex = index(of: \"u\")\n        let vowel = english[vowelIndex!]\n\
    \        let vowelIndex = index(of: \"A\")\n        let vowel = english[vowelIndex!]\n\
    \        let \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp95tvb9dp.swift:68:12: error: expected pattern\n        let \n \
    \          ^\n/tmp/tmp95tvb9dp.swift:88:84: error: expected '}' at end of brace\
    \ statement\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\")\n                                                    \
    \                               ^\n/tmp/tmp95tvb9dp.swift:12:40: note: to match\
    \ this opening '{'\nfunc encode(message: String) -> String {\n               \
    \                        ^\n/tmp/tmp95tvb9dp.swift:15:21: error: cannot find 'english'\
    \ in scope\n        let index = english.index(of: letter)\n                  \
    \  ^~~~~~~\n/tmp/tmp95tvb9dp.swift:17:21: error: cannot find 'english' in scope\n\
    \        let vowel = english[vowelIndex!]\n                    ^~~~~~~\n/tmp/tmp95tvb9dp.swift:19:21:\
    \ error: cannot find 'english' in scope\n        let vowel = english[vowelIndex!]\n\
    \                    ^~~~~~~\n/tmp/tmp95tvb9dp.swift:21:21: error: cannot find\
    \ 'english' in scope\n        let vowel = english[vowelIndex!]\n             \
    \       ^~~~~~~\n/tmp/tmp95tvb9dp.swift:23:21: error: cannot find 'english' in\
    \ scope\n        let vowel = english[vowelIndex!]\n                    ^~~~~~~\n\
    /tmp/tmp95tvb9dp.swift:25:21: error: cannot find 'english' in scope\n        let\
    \ vowel = english[vowelIndex!]\n                    ^~~~~~~\n/tmp/tmp95tvb9dp.swift:27:21:\
    \ error: cannot find 'english' in scope\n        let vowel = english[vowelIndex!]\n\
    \                    ^~~~~~~\n/tmp/tmp95tvb9dp.swift:29:21: error: cannot find\
    \ 'english' in scope\n        let vowel = english[vowelIndex!]\n             \
    \       ^~~~~~~\n/tmp/tmp95tvb9dp.swift:31:21: error: cannot find 'english' in\
    \ scope\n        let vowel = english[vowelIndex!]\n                    ^~~~~~~\n\
    /tmp/tmp95tvb9dp.swift:33:21: error: cannot find 'english' in scope\n        let\
    \ vowel = english[vowelIndex!]\n                    ^~~~~~~\n/tmp/tmp95tvb9dp.swift:35:21:\
    \ error: cannot find 'english' in scope\n        let vowel = english[vowelIndex!]\n\
    \                    ^~~~~~~\n/tmp/tmp95tvb9dp.swift:37:21: error: cannot find\
    \ 'english' in scope"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let replacement = alphabet[index + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ \"A\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"E\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"I\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"O\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"U\", with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp2y2rmi4n.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmp2y2rmi4n.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index + 2]\n                          ^~~~~~~~\n\
    /tmp/tmp2y2rmi4n.swift:17:34: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \        result += String(letter).replacingOccurrences(of: \"A\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2y2rmi4n.swift:18:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"E\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2y2rmi4n.swift:19:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"I\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2y2rmi4n.swift:20:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"O\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2y2rmi4n.swift:21:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"U\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result = \"t\"\n        case \"b\":\n            result = \"\
    h\"\n        case \"c\":\n            result = \"k\"\n        case \"d\":\n  \
    \          result = \"g\"\n        case \"e\":\n            result = \"s\"\n \
    \       case \"f\":\n            result = \"c\"\n        case \"g\":\n       \
    \     result = \"g\"\n        case \"h\":\n            result = \"h\"\n      \
    \  case \"i\":\n            result = \"k\"\n        case \"j\":\n            result\
    \ = \"g\"\n        case \"k\":\n            result = \"k\"\n        case \"l\"\
    :\n            result = \"s\"\n        case \"m\":\n            result = \"c\"\
    \n        case \"n\":\n            result = \"g\"\n        case \"o\":\n     \
    \       result = \"s\"\n        case \"p\":\n            result = \"c\"\n    \
    \    case \"q\":\n            result = \"g\"\n        case \"r\":\n          \
    \  result = \"s\"\n        case \"s\":\n            result = \"s\"\n        case\
    \ \"t\":\n            result = \"t\"\n        case \"u\":\n            result\
    \ = \"k\"\n        case \"v\":\n            result = \"g\"\n        case \"w\"\
    :\n            result = \"k\"\n        case \"x\":\n            result = \"g\"\
    \n        case \"y\":\n            result = \"k\"\n        case \"z\":\n     \
    \       result = \"g\"\n        default:\n            result = letter\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmplnd7prys.swift:69:22: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            result = letter\n                     ^~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)\n        let replacement = alphabet[index! + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ \"A\", with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpavu74_ts.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)\n                    ^~~~~~~~\n\
    /tmp/tmpavu74_ts.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index! + 2]\n                          ^~~~~~~~\n\
    /tmp/tmpavu74_ts.swift:17:34: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \        result += String(letter).replacingOccurrences(of: \"A\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let replacement = alphabet[index + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ vowel, with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp8qiy7t7b.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmp8qiy7t7b.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index + 2]\n                          ^~~~~~~~\n\
    /tmp/tmp8qiy7t7b.swift:17:59: error: cannot find 'vowel' in scope\n        result\
    \ += String(letter).replacingOccurrences(of: vowel, with: replacement)\n     \
    \                                                     ^~~~~\n/tmp/tmp8qiy7t7b.swift:17:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: vowel, with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += String(letter).swapCase()\n        } else {\n            result\
    \ += letter\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpb8lcw8nf.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmpb8lcw8nf.swift:16:38:\
    \ error: value of type 'String' has no member 'swapCase'\n            result +=\
    \ String(letter).swapCase()\n                      ~~~~~~~~~~~~~~ ^~~~~~~~\n/tmp/tmpb8lcw8nf.swift:18:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let replacement = alphabet[index + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ \"AEIOUaeiou\", with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpbcjstxg4.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmpbcjstxg4.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index + 2]\n                          ^~~~~~~~\n\
    /tmp/tmpbcjstxg4.swift:17:34: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \        result += String(letter).replacingOccurrences(of: \"AEIOUaeiou\", with:\
    \ replacement)\n                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let replacement = alphabet[index + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ \"AEIOUaeiou\", with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpbcjstxg4.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmpbcjstxg4.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index + 2]\n                          ^~~~~~~~\n\
    /tmp/tmpbcjstxg4.swift:17:34: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \        result += String(letter).replacingOccurrences(of: \"AEIOUaeiou\", with:\
    \ replacement)\n                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += String(letter).swapCase()\n        } else {\n            result\
    \ += String(letter)\n        }\n    }\n    for vowel in \"aeiouAEIOU\" {\n   \
    \     let index = message.index(of: vowel)\n        if index != nil {\n      \
    \      let vowelIndex = index! + 2\n            let vowel = String(message[vowelIndex])\n\
    \            result += String(vowel)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpub94cb8j.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmpub94cb8j.swift:16:38:\
    \ error: value of type 'String' has no member 'swapCase'\n            result +=\
    \ String(letter).swapCase()\n                      ~~~~~~~~~~~~~~ ^~~~~~~~\n/tmp/tmpub94cb8j.swift:22:29:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        let\
    \ index = message.index(of: vowel)\n                            ^\n/tmp/tmpub94cb8j.swift:22:29:\
    \ note: use 'firstIndex(of:)' instead\n        let index = message.index(of: vowel)\n\
    \                            ^~~~~\n                            firstIndex\n/tmp/tmpub94cb8j.swift:24:35:\
    \ error: cannot convert value of type 'String.Index' to expected argument type\
    \ 'Int'\n            let vowelIndex = index! + 2\n                           \
    \       ^\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += letter.lowercased()\n        } else {\n            result += letter.uppercased()\n\
    \        }\n    }\n    for letter in result {\n        if letter.hasPrefix(\"\
    A\") {\n            letter = letter.lowercased()\n        } else if letter.hasPrefix(\"\
    E\") {\n            letter = letter.uppercased()\n        }\n    }\n    for letter\
    \ in result {\n        if letter.hasPrefix(\"A\") {\n            letter = letter.lowercased()\n\
    \        } else if letter.hasPrefix(\"E\") {\n            letter = letter.uppercased()\n\
    \        }\n    }\n    for letter in result {\n        if letter.hasPrefix(\"\
    A\") {\n            letter = letter.lowercased()\n        } else if letter.hasPrefix(\"\
    E\") {\n            letter = letter.uppercased()\n        }\n    }\n    for letter\
    \ in result {\n        if letter.hasPrefix(\"A\") {\n            letter = letter.lowercased()\n\
    \        } else if letter.hasPrefix(\"E\") {\n            letter = letter.uppercased()\n\
    \        }\n    }\n    for letter in result {\n        if letter.hasPrefix(\"\
    A\") {\n            letter = letter.lowercased()\n        } else if letter.hasPrefix(\"\
    E\") {\n            letter = letter.uppercased()\n        }\n    }\n    for letter\
    \ in result {\n        if letter.hasPrefix(\"A\") {\n            letter = letter.lowercased()\n\
    \        } else if letter.hasPrefix(\"E\") {\n            letter = letter.uppercased()\n\
    \        }\n    }\n    for letter in result {\n        if letter.hasPrefix(\"\
    A\") {\n            letter = letter.lowercased()\n        } else if letter.hasPrefix(\"\
    E\") {\n            letter = letter.uppercased()\n        }\n    }\n    for letter\
    \ in result {\n        if letter.hasPrefix(\"A\") {\n            letter = letter.lowercased()\n\
    \        } else if letter.hasPrefix(\"E\") {\n            letter = letter.uppercased()\n\
    \        }\n    }\n    for letter in result {\n        if letter.hasPrefix(\"\
    A\") {\n            letter = letter.lowercased()\n        } else if letter.hasPrefix(\"\
    E\") {\n            letter = letter.uppercased()\n        }\n    }\n    for letter\
    \ in result {\n        if letter.hasPrefix(\"A\") {\n            letter = letter.lowercased()\n\
    \        } else if letter.hasPrefix(\"E\") {\n            letter = letter.uppercased()\n\
    \        }\n    }\n    for letter in result {\n        if letter.hasPrefix(\"\
    A\") {\n            \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpoa9jtc41.swift:113:84: error: expected '}' at end of brace statement\n\
    assert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq\
    \ wRkTg\")\n                                                                 \
    \                  ^\n/tmp/tmpoa9jtc41.swift:91:26: note: to match this opening\
    \ '{'\n    for letter in result {\n                         ^\n/tmp/tmpoa9jtc41.swift:113:84:\
    \ error: expected '}' at end of brace statement\nassert(encode(message: \"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\n                  \
    \                                                                 ^\n/tmp/tmpoa9jtc41.swift:12:40:\
    \ note: to match this opening '{'\nfunc encode(message: String) -> String {\n\
    \                                       ^\n/tmp/tmpoa9jtc41.swift:15:19: error:\
    \ value of type 'Character' has no member 'isUpper'\n        if letter.isUpper()\
    \ {\n           ~~~~~~ ^~~~~~~\n/tmp/tmpoa9jtc41.swift:22:19: error: value of\
    \ type 'Character' has no member 'hasPrefix'\n        if letter.hasPrefix(\"A\"\
    ) {\n           ~~~~~~ ^~~~~~~~~\n/tmp/tmpoa9jtc41.swift:23:13: error: cannot\
    \ assign to value: 'letter' is a 'let' constant\n            letter = letter.lowercased()\n\
    \            ^~~~~~\n/tmp/tmpoa9jtc41.swift:23:29: error: cannot assign value\
    \ of type 'String' to type 'Character'\n            letter = letter.lowercased()\n\
    \                     ~~~~~~~^~~~~~~~~~~~\n/tmp/tmpoa9jtc41.swift:24:26: error:\
    \ value of type 'Character' has no member 'hasPrefix'\n        } else if letter.hasPrefix(\"\
    E\") {\n                  ~~~~~~ ^~~~~~~~~\n/tmp/tmpoa9jtc41.swift:25:13: error:\
    \ cannot assign to value: 'letter' is a 'let' constant\n            letter = letter.uppercased()\n\
    \            ^~~~~~\n/tmp/tmpoa9jtc41.swift:25:29: error: cannot assign value\
    \ of type 'String' to type 'Character'\n            letter = letter.uppercased()\n\
    \                     ~~~~~~~^~~~~~~~~~~~\n/tmp/tmpoa9jtc41.swift:29:19: error:\
    \ value of type 'Character' has no member 'hasPrefix'\n        if letter.hasPrefix(\"\
    A\") {\n           ~~~~~~ ^~~~~~~~~\n/tmp/tmpoa9jtc41.swift:30:13: e"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result += \"A\"\n        case \"b\":\n            result +=\
    \ \"B\"\n        case \"c\":\n            result += \"C\"\n        case \"d\"\
    :\n            result += \"D\"\n        case \"e\":\n            result += \"\
    E\"\n        case \"f\":\n            result += \"F\"\n        case \"g\":\n \
    \           result += \"G\"\n        case \"h\":\n            result += \"H\"\n\
    \        case \"i\":\n            result += \"I\"\n        case \"j\":\n     \
    \       result += \"J\"\n        case \"k\":\n            result += \"K\"\n  \
    \      case \"l\":\n            result += \"L\"\n        case \"m\":\n       \
    \     result += \"M\"\n        case \"n\":\n            result += \"N\"\n    \
    \    case \"o\":\n            result += \"O\"\n        case \"p\":\n         \
    \   result += \"P\"\n        case \"q\":\n            result += \"Q\"\n      \
    \  case \"r\":\n            result += \"R\"\n        case \"s\":\n           \
    \ result += \"S\"\n        case \"t\":\n            result += \"T\"\n        case\
    \ \"u\":\n            result += \"U\"\n        case \"v\":\n            result\
    \ += \"V\"\n        case \"w\":\n            result += \"W\"\n        case \"\
    x\":\n            result += \"X\"\n        case \"y\":\n            result +=\
    \ \"Y\"\n        case \"z\":\n            result += \"Z\"\n        default:\n\
    \            result += letter\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpijzvts68.swift:69:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += String(letter).swapCase()\n        } else {\n            result\
    \ += String(letter)\n        }\n    }\n    for letter in result {\n        if\
    \ letter.isUpper() {\n            result += String(letter).swapCase()\n      \
    \  } else {\n            result += String(letter)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpxmxlux6e.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmpxmxlux6e.swift:16:38:\
    \ error: value of type 'String' has no member 'swapCase'\n            result +=\
    \ String(letter).swapCase()\n                      ~~~~~~~~~~~~~~ ^~~~~~~~\n/tmp/tmpxmxlux6e.swift:22:19:\
    \ error: value of type 'Character' has no member 'isUpper'\n        if letter.isUpper()\
    \ {\n           ~~~~~~ ^~~~~~~\n/tmp/tmpxmxlux6e.swift:23:38: error: value of\
    \ type 'String' has no member 'swapCase'\n            result += String(letter).swapCase()\n\
    \                      ~~~~~~~~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let replacement = alphabet[index + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ \"A\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"E\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"I\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"O\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"U\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"Y\", with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp8dg237sf.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmp8dg237sf.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index + 2]\n                          ^~~~~~~~\n\
    /tmp/tmp8dg237sf.swift:17:34: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \        result += String(letter).replacingOccurrences(of: \"A\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8dg237sf.swift:18:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"E\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8dg237sf.swift:19:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"I\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8dg237sf.swift:20:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"O\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8dg237sf.swift:21:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"U\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8dg237sf.swift:22:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"Y\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += letter.lowercased()\n        } else {\n            result += letter.uppercased()\n\
    \        }\n    }\n    for letter in result {\n        if letter == \"A\" {\n\
    \            result += \"B\"\n        } else if letter == \"B\" {\n          \
    \  result += \"A\"\n        } else if letter == \"C\" {\n            result +=\
    \ \"D\"\n        } else if letter == \"D\" {\n            result += \"C\"\n  \
    \      } else if letter == \"E\" {\n            result += \"F\"\n        } else\
    \ if letter == \"F\" {\n            result += \"E\"\n        } else if letter\
    \ == \"G\" {\n            result += \"H\"\n        } else if letter == \"H\" {\n\
    \            result += \"G\"\n        } else if letter == \"I\" {\n          \
    \  result += \"J\"\n        } else if letter == \"J\" {\n            result +=\
    \ \"I\"\n        } else if letter == \"K\" {\n            result += \"L\"\n  \
    \      } else if letter == \"L\" {\n            result += \"K\"\n        } else\
    \ if letter == \"M\" {\n            result += \"N\"\n        } else if letter\
    \ == \"N\" {\n            result += \"M\"\n        } else if letter == \"O\" {\n\
    \            result += \"P\"\n        } else if letter == \"P\" {\n          \
    \  result += \"O\"\n        } else if letter == \"Q\" {\n            result +=\
    \ \"R\"\n        } else if letter == \"R\" {\n            result += \"Q\"\n  \
    \      } else if letter == \"S\" {\n            result += \"T\"\n        } else\
    \ if letter == \"T\" {\n            result += \"S\"\n        } else if letter\
    \ == \"U\" {\n            result += \"V\"\n        } else if letter == \"V\" {\n\
    \            result += \"U\"\n        } else if letter == \"W\" {\n          \
    \  result += \"X\"\n        } else if letter == \"X\" {\n            result +=\
    \ \"W\"\n        } else if letter == \"Y\" {\n            result += \"Z\"\n  \
    \      } else if letter == \"Z\" {\n            result += \"Y\"\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp7qgpx7wr.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += String(letter).swapCase()\n        } else {\n            result\
    \ += letter\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpb8lcw8nf.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmpb8lcw8nf.swift:16:38:\
    \ error: value of type 'String' has no member 'swapCase'\n            result +=\
    \ String(letter).swapCase()\n                      ~~~~~~~~~~~~~~ ^~~~~~~~\n/tmp/tmpb8lcw8nf.swift:18:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = english.index(of: letter)\n\
    \        let replacement = english[english.index(of: letter, offsetBy: index!)]\n\
    \        result += replacement\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp031khn23.swift:15:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmp031khn23.swift:16:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[english.index(of:\
    \ letter, offsetBy: index!)]\n                          ^~~~~~~\n/tmp/tmp031khn23.swift:16:35:\
    \ error: cannot find 'english' in scope\n        let replacement = english[english.index(of:\
    \ letter, offsetBy: index!)]\n                                  ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let nextLetter = alphabet[index + 1]\n        if letter.isUppercase\
    \ {\n            result += nextLetter\n        } else {\n            result +=\
    \ nextLetter.lowercased()\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp0n93l42u.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmp0n93l42u.swift:16:26: error: cannot find 'alphabet' in scope\n       \
    \ let nextLetter = alphabet[index + 1]\n                         ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += String(letter)\n        } else {\n            result += String(letter).swapCase()\n\
    \        }\n    }\n    for vowel in \"aeiou\" {\n        result += String(vowel)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpgoknfhv_.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmpgoknfhv_.swift:18:38:\
    \ error: value of type 'String' has no member 'swapCase'\n            result +=\
    \ String(letter).swapCase()\n                      ~~~~~~~~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += letter.lowercased()\n        } else {\n            result += letter.uppercased()\n\
    \        }\n    }\n    for letter in result {\n        if letter.isUpper() {\n\
    \            result += letter.lowercased()\n        } else {\n            result\
    \ += letter.uppercased()\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpn8aviskb.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmpn8aviskb.swift:22:19:\
    \ error: value of type 'Character' has no member 'isUpper'\n        if letter.isUpper()\
    \ {\n           ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += String(letter).swapCase()\n        } else {\n            result\
    \ += String(letter)\n        }\n    }\n    for letter in result {\n        if\
    \ letter.isLetter() {\n            if let vowel = vowels[letter] {\n         \
    \       result += String(vowel)\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpf75q8m8a.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmpf75q8m8a.swift:16:38:\
    \ error: value of type 'String' has no member 'swapCase'\n            result +=\
    \ String(letter).swapCase()\n                      ~~~~~~~~~~~~~~ ^~~~~~~~\n/tmp/tmpf75q8m8a.swift:22:19:\
    \ error: cannot call value of non-function type 'Bool'\n        if letter.isLetter()\
    \ {\n                  ^       ~~\n                          \n/tmp/tmpf75q8m8a.swift:23:28:\
    \ error: cannot find 'vowels' in scope\n            if let vowel = vowels[letter]\
    \ {\n                           ^~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n        case \"e\":\n        case \"i\":\n        case \"o\":\n        case\
    \ \"u\":\n            result += letter\n        default:\n            result +=\
    \ letter.swapCase()\n        }\n    }\n    for letter in result {\n        if\
    \ let vowel = vowels.firstIndex(of: letter) {\n            let index = vowel +\
    \ 2\n            if index >= result.count {\n                result += letter\n\
    \            } else {\n                result += result[index]\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmptv8ma8z6.swift:16:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmptv8ma8z6.swift:17:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmptv8ma8z6.swift:18:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmptv8ma8z6.swift:19:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmptv8ma8z6.swift:21:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmptv8ma8z6.swift:23:30:\
    \ error: value of type 'Character' has no member 'swapCase'\n            result\
    \ += letter.swapCase()\n                      ~~~~~~ ^~~~~~~~\n/tmp/tmptv8ma8z6.swift:27:24:\
    \ error: cannot find 'vowels' in scope\n        if let vowel = vowels.firstIndex(of:\
    \ letter) {\n                       ^~~~~~\n/tmp/tmptv8ma8z6.swift:30:27: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                result += letter\n                          ^\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for char in message {\n        let index = english.index(of: char)\n\
    \        let replacement = english[index! + 1]\n        result += String(char).replacingOccurrences(of:\
    \ char, with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpea1813c4.swift:15:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: char)\n                    ^~~~~~~\n/tmp/tmpea1813c4.swift:16:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!\
    \ + 1]\n                          ^~~~~~~\n/tmp/tmpea1813c4.swift:17:32: error:\
    \ value of type 'String' has no member 'replacingOccurrences'\n        result\
    \ += String(char).replacingOccurrences(of: char, with: replacement)\n        \
    \          ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result += \"A\"\n        case \"b\":\n            result +=\
    \ \"B\"\n        case \"c\":\n            result += \"C\"\n        case \"d\"\
    :\n            result += \"D\"\n        case \"e\":\n            result += \"\
    E\"\n        case \"f\":\n            result += \"F\"\n        case \"g\":\n \
    \           result += \"G\"\n        case \"h\":\n            result += \"H\"\n\
    \        case \"i\":\n            result += \"I\"\n        case \"j\":\n     \
    \       result += \"J\"\n        case \"k\":\n            result += \"K\"\n  \
    \      case \"l\":\n            result += \"L\"\n        case \"m\":\n       \
    \     result += \"M\"\n        case \"n\":\n            result += \"N\"\n    \
    \    case \"o\":\n            result += \"O\"\n        case \"p\":\n         \
    \   result += \"P\"\n        case \"q\":\n            result += \"Q\"\n      \
    \  case \"r\":\n            result += \"R\"\n        case \"s\":\n           \
    \ result += \"S\"\n        case \"t\":\n            result += \"T\"\n        case\
    \ \"u\":\n            result += \"U\"\n        case \"v\":\n            result\
    \ += \"V\"\n        case \"w\":\n            result += \"W\"\n        case \"\
    x\":\n            result += \"X\"\n        case \"y\":\n            result +=\
    \ \"Y\"\n        case \"z\":\n            result += \"Z\"\n        default:\n\
    \            result += letter\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpijzvts68.swift:69:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += letter\n        } else {\n            result += letter.lowercased()\n\
    \        }\n    }\n    for letter in result {\n        if letter.hasPrefix(\"\
    A\") {\n            letter = letter.lowercased()\n        }\n        if letter.hasPrefix(\"\
    E\") {\n            letter = letter.lowercased()\n        }\n        if letter.hasPrefix(\"\
    I\") {\n            letter = letter.lowercased()\n        }\n        if letter.hasPrefix(\"\
    O\") {\n            letter = letter.lowercased()\n        }\n        if letter.hasPrefix(\"\
    U\") {\n            letter = letter.lowercased()\n        }\n        if letter.hasPrefix(\"\
    a\") {\n            letter = letter.lowercased()\n        }\n        if letter.hasPrefix(\"\
    e\") {\n            letter = letter.lowercased()\n        }\n        if letter.hasPrefix(\"\
    i\") {\n            letter = letter.lowercased()\n        }\n        if letter.hasPrefix(\"\
    o\") {\n            letter = letter.lowercased()\n        }\n        if letter.hasPrefix(\"\
    u\") {\n            letter = letter.lowercased()\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp_tv7jbvw.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmp_tv7jbvw.swift:16:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmp_tv7jbvw.swift:22:19:\
    \ error: value of type 'Character' has no member 'hasPrefix'\n        if letter.hasPrefix(\"\
    A\") {\n           ~~~~~~ ^~~~~~~~~\n/tmp/tmp_tv7jbvw.swift:23:13: error: cannot\
    \ assign to value: 'letter' is a 'let' constant\n            letter = letter.lowercased()\n\
    \            ^~~~~~\n/tmp/tmp_tv7jbvw.swift:23:29: error: cannot assign value\
    \ of type 'String' to type 'Character'\n            letter = letter.lowercased()\n\
    \                     ~~~~~~~^~~~~~~~~~~~\n/tmp/tmp_tv7jbvw.swift:25:19: error:\
    \ value of type 'Character' has no member 'hasPrefix'\n        if letter.hasPrefix(\"\
    E\") {\n           ~~~~~~ ^~~~~~~~~\n/tmp/tmp_tv7jbvw.swift:26:13: error: cannot\
    \ assign to value: 'letter' is a 'let' constant\n            letter = letter.lowercased()\n\
    \            ^~~~~~\n/tmp/tmp_tv7jbvw.swift:26:29: error: cannot assign value\
    \ of type 'String' to type 'Character'\n            letter = letter.lowercased()\n\
    \                     ~~~~~~~^~~~~~~~~~~~\n/tmp/tmp_tv7jbvw.swift:28:19: error:\
    \ value of type 'Character' has no member 'hasPrefix'\n        if letter.hasPrefix(\"\
    I\") {\n           ~~~~~~ ^~~~~~~~~\n/tmp/tmp_tv7jbvw.swift:29:13: error: cannot\
    \ assign to value: 'letter' is a 'let' constant\n            letter = letter.lowercased()\n\
    \            ^~~~~~\n/tmp/tmp_tv7jbvw.swift:29:29: error: cannot assign value\
    \ of type 'String' to type 'Character'\n            letter = letter.lowercased()\n\
    \                     ~~~~~~~^~~~~~~~~~~~\n/tmp/tmp_tv7jbvw.swift:31:19: error:\
    \ value of type 'Character' has no member 'hasPrefix'\n        if letter.hasPrefix(\"\
    O\") {\n           ~~~~~~ ^~~~~~~~~\n/tmp/tmp_tv7jbvw.swift:32:13: error: cannot\
    \ assign to value: 'letter' is a 'let' constant\n            letter = letter.lowercased()\n\
    \            ^~~~~~\n/tm"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result += \"A\"\n        case \"b\":\n            result +=\
    \ \"B\"\n        case \"c\":\n            result += \"C\"\n        case \"d\"\
    :\n            result += \"D\"\n        case \"e\":\n            result += \"\
    E\"\n        case \"f\":\n            result += \"F\"\n        case \"g\":\n \
    \           result += \"G\"\n        case \"h\":\n            result += \"H\"\n\
    \        case \"i\":\n            result += \"I\"\n        case \"j\":\n     \
    \       result += \"J\"\n        case \"k\":\n            result += \"K\"\n  \
    \      case \"l\":\n            result += \"L\"\n        case \"m\":\n       \
    \     result += \"M\"\n        case \"n\":\n            result += \"N\"\n    \
    \    case \"o\":\n            result += \"O\"\n        case \"p\":\n         \
    \   result += \"P\"\n        case \"q\":\n            result += \"Q\"\n      \
    \  case \"r\":\n            result += \"R\"\n        case \"s\":\n           \
    \ result += \"S\"\n        case \"t\":\n            result += \"T\"\n        case\
    \ \"u\":\n            result += \"U\"\n        case \"v\":\n            result\
    \ += \"V\"\n        case \"w\":\n            result += \"W\"\n        case \"\
    x\":\n            result += \"X\"\n        case \"y\":\n            result +=\
    \ \"Y\"\n        case \"z\":\n            result += \"Z\"\n        case \"A\"\
    :\n            result += \"a\"\n        case \"B\":\n            result += \"\
    b\"\n        case \"C\":\n            result += \"c\"\n        case \"D\":\n \
    \           result += \"d\"\n        case \"E\":\n            result += \"e\"\n\
    \        case \"F\":\n            result += \"f\"\n        case \"G\":\n     \
    \       result += \"g\"\n        case \"H\":\n            result += \"h\"\n  \
    \      case \"I\":\n            result += \"i\"\n        case \"J\":\n       \
    \     result += \"j\"\n        case \"K\":\n            result += \"k\"\n    \
    \    case \"L\":\n            result += \"l\"\n        case \"M\":\n         \
    \   result += \"m\"\n        case \"N\":\n            result += \"n\"\n      \
    \  case \"O\":\n            result += \"o\"\n        case \"P\":\n           \
    \ result += \"p\"\n        case \"Q\":\n            result += \"q\"\n        case\
    \ \"R\":\n            result += \"r\"\n        case \"S\":\n            result\
    \ += \"s\"\n        case \"T\":\n            result += \"t\"\n        case \"\
    U\":\n            \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpcm61vkcn.swift:108:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"U\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmpcm61vkcn.swift:129:84: error: expected '}' at\
    \ end of brace statement\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\")\n                                        \
    \                                           ^\n/tmp/tmpcm61vkcn.swift:14:27: note:\
    \ to match this opening '{'\n    for letter in message {\n                   \
    \       ^\n/tmp/tmpcm61vkcn.swift:129:84: error: expected '}' at end of brace\
    \ statement\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\")\n                                                    \
    \                               ^\n/tmp/tmpcm61vkcn.swift:12:40: note: to match\
    \ this opening '{'\nfunc encode(message: String) -> String {\n               \
    \                        ^\n/tmp/tmpcm61vkcn.swift:15:9: error: switch must be\
    \ exhaustive\n        switch letter {\n        ^\n/tmp/tmpcm61vkcn.swift:15:9:\
    \ note: do you want to add a default clause?\n        switch letter {\n      \
    \  ^\n/tmp/tmpcm61vkcn.swift:113:6: error: operator functions can only be declared\
    \ at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)\n        let replacement = alphabet[index! + 1]\n        result += String(letter).replacingOccurrences(of:\
    \ vowel, with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpbe85510r.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)\n                    ^~~~~~~~\n\
    /tmp/tmpbe85510r.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index! + 1]\n                          ^~~~~~~~\n\
    /tmp/tmpbe85510r.swift:17:59: error: cannot find 'vowel' in scope\n        result\
    \ += String(letter).replacingOccurrences(of: vowel, with: replacement)\n     \
    \                                                     ^~~~~\n/tmp/tmpbe85510r.swift:17:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: vowel, with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)\n        if index != nil {\n            let nextLetter = alphabet[index!\
    \ + 1]\n            let replacement = alphabet.index(of: nextLetter)\n       \
    \     if replacement != nil {\n                result += alphabet[replacement!!]\n\
    \            } else {\n                result += alphabet[index]!\n          \
    \  }\n        } else {\n            result += letter\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpbepn5k9j.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)\n                    ^~~~~~~~\n\
    /tmp/tmpbepn5k9j.swift:17:30: error: cannot find 'alphabet' in scope\n       \
    \     let nextLetter = alphabet[index! + 1]\n                             ^~~~~~~~\n\
    /tmp/tmpbepn5k9j.swift:18:31: error: cannot find 'alphabet' in scope\n       \
    \     let replacement = alphabet.index(of: nextLetter)\n                     \
    \         ^~~~~~~~\n/tmp/tmpbepn5k9j.swift:20:27: error: cannot find 'alphabet'\
    \ in scope\n                result += alphabet[replacement!!]\n              \
    \            ^~~~~~~~\n/tmp/tmpbepn5k9j.swift:22:27: error: cannot find 'alphabet'\
    \ in scope\n                result += alphabet[index]!\n                     \
    \     ^~~~~~~~\n/tmp/tmpbepn5k9j.swift:25:23: error: cannot convert value of type\
    \ 'Character' to expected argument type 'String'\n            result += letter\n\
    \                      ^\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result += \"A\"\n        case \"b\":\n            result +=\
    \ \"B\"\n        case \"c\":\n            result += \"C\"\n        case \"d\"\
    :\n            result += \"D\"\n        case \"e\":\n            result += \"\
    E\"\n        case \"f\":\n            result += \"F\"\n        case \"g\":\n \
    \           result += \"G\"\n        case \"h\":\n            result += \"H\"\n\
    \        case \"i\":\n            result += \"I\"\n        case \"j\":\n     \
    \       result += \"J\"\n        case \"k\":\n            result += \"K\"\n  \
    \      case \"l\":\n            result += \"L\"\n        case \"m\":\n       \
    \     result += \"M\"\n        case \"n\":\n            result += \"N\"\n    \
    \    case \"o\":\n            result += \"O\"\n        case \"p\":\n         \
    \   result += \"P\"\n        case \"q\":\n            result += \"Q\"\n      \
    \  case \"r\":\n            result += \"R\"\n        case \"s\":\n           \
    \ result += \"S\"\n        case \"t\":\n            result += \"T\"\n        case\
    \ \"u\":\n            result += \"U\"\n        case \"v\":\n            result\
    \ += \"V\"\n        case \"w\":\n            result += \"W\"\n        case \"\
    x\":\n            result += \"X\"\n        case \"y\":\n            result +=\
    \ \"Y\"\n        case \"z\":\n            result += \"Z\"\n        default:\n\
    \            result += letter\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpijzvts68.swift:69:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += String(letter).swapCase()\n        } else {\n            result\
    \ += letter\n        }\n    }\n    for vowel in \"aeiouAEIOU\" {\n        result\
    \ += String(vowel).swapCase()\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp875g4q1c.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmp875g4q1c.swift:16:38:\
    \ error: value of type 'String' has no member 'swapCase'\n            result +=\
    \ String(letter).swapCase()\n                      ~~~~~~~~~~~~~~ ^~~~~~~~\n/tmp/tmp875g4q1c.swift:18:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmp875g4q1c.swift:22:33:\
    \ error: value of type 'String' has no member 'swapCase'\n        result += String(vowel).swapCase()\n\
    \                  ~~~~~~~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result += \"A\"\n        case \"b\":\n            result +=\
    \ \"B\"\n        case \"c\":\n            result += \"C\"\n        case \"d\"\
    :\n            result += \"D\"\n        case \"e\":\n            result += \"\
    E\"\n        case \"f\":\n            result += \"F\"\n        case \"g\":\n \
    \           result += \"G\"\n        case \"h\":\n            result += \"H\"\n\
    \        case \"i\":\n            result += \"I\"\n        case \"j\":\n     \
    \       result += \"J\"\n        case \"k\":\n            result += \"K\"\n  \
    \      case \"l\":\n            result += \"L\"\n        case \"m\":\n       \
    \     result += \"M\"\n        case \"n\":\n            result += \"N\"\n    \
    \    case \"o\":\n            result += \"O\"\n        case \"p\":\n         \
    \   result += \"P\"\n        case \"q\":\n            result += \"Q\"\n      \
    \  case \"r\":\n            result += \"R\"\n        case \"s\":\n           \
    \ result += \"S\"\n        case \"t\":\n            result += \"T\"\n        case\
    \ \"u\":\n            result += \"U\"\n        case \"v\":\n            result\
    \ += \"V\"\n        case \"w\":\n            result += \"W\"\n        case \"\
    x\":\n            result += \"X\"\n        case \"y\":\n            result +=\
    \ \"Y\"\n        case \"z\":\n            result += \"Z\"\n        default:\n\
    \            result += letter\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpijzvts68.swift:69:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)\n        let replacement = alphabet[(index! + 2) % alphabet.count]\n\
    \        result += String(letter).replacingOccurrences(of: letter, with: replacement)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpw5mlt2m8.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)\n                    ^~~~~~~~\n\
    /tmp/tmpw5mlt2m8.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[(index! + 2) % alphabet.count]\n                \
    \          ^~~~~~~~\n/tmp/tmpw5mlt2m8.swift:16:51: error: cannot find 'alphabet'\
    \ in scope\n        let replacement = alphabet[(index! + 2) % alphabet.count]\n\
    \                                                  ^~~~~~~~\n/tmp/tmpw5mlt2m8.swift:17:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: letter, with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let replacement = alphabet[index + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ \"AEIOUaeiou\", with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpbcjstxg4.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmpbcjstxg4.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index + 2]\n                          ^~~~~~~~\n\
    /tmp/tmpbcjstxg4.swift:17:34: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \        result += String(letter).replacingOccurrences(of: \"AEIOUaeiou\", with:\
    \ replacement)\n                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)\n        let replacement = alphabet[index! + 1]\n        result += String(letter).replacingOccurrences(of:\
    \ letter, with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmprvgifg62.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)\n                    ^~~~~~~~\n\
    /tmp/tmprvgifg62.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index! + 1]\n                          ^~~~~~~~\n\
    /tmp/tmprvgifg62.swift:17:34: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \        result += String(letter).replacingOccurrences(of: letter, with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += letter.lowercased()\n        } else {\n            result += letter.uppercased()\n\
    \        }\n    }\n    for vowel in \"AEIOUaeiou\" {\n        let index = result.index(of:\
    \ vowel)\n        if index != nil {\n            let twoLettersBefore = result[index!.advanced(by:\
    \ 1)!]\n            let index = result.index(of: vowel)\n            let twoLettersAfter\
    \ = result[index!.advanced(by: 2)!]\n            let replacement = twoLettersAfter.lowercased()\
    \ + vowel.lowercased()\n            result = result.replacingOccurrences(of: vowel,\
    \ with: replacement)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpcka22nx8.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmpcka22nx8.swift:22:28:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        let\
    \ index = result.index(of: vowel)\n                           ^\n/tmp/tmpcka22nx8.swift:22:28:\
    \ note: use 'firstIndex(of:)' instead\n        let index = result.index(of: vowel)\n\
    \                           ^~~~~\n                           firstIndex\n/tmp/tmpcka22nx8.swift:24:50:\
    \ error: value of type 'String.Index' has no member 'advanced'\n            let\
    \ twoLettersBefore = result[index!.advanced(by: 1)!]\n                       \
    \                   ~~~~~~ ^~~~~~~~\n/tmp/tmpcka22nx8.swift:25:32: warning: 'index(of:)'\
    \ is deprecated: renamed to 'firstIndex(of:)'\n            let index = result.index(of:\
    \ vowel)\n                               ^\n/tmp/tmpcka22nx8.swift:25:32: note:\
    \ use 'firstIndex(of:)' instead\n            let index = result.index(of: vowel)\n\
    \                               ^~~~~\n                               firstIndex\n\
    /tmp/tmpcka22nx8.swift:26:49: error: value of type 'String.Index' has no member\
    \ 'advanced'\n            let twoLettersAfter = result[index!.advanced(by: 2)!]\n\
    \                                         ~~~~~~ ^~~~~~~~\n/tmp/tmpcka22nx8.swift:28:29:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \     result = result.replacingOccurrences(of: vowel, with: replacement)\n   \
    \                  ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let replacement = alphabet[(index + 1) % alphabet.count]\n\
    \        result += String(letter).replacingOccurrences(of: letter, with: replacement)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp5acyu_by.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmp5acyu_by.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[(index + 1) % alphabet.count]\n                 \
    \         ^~~~~~~~\n/tmp/tmp5acyu_by.swift:16:50: error: cannot find 'alphabet'\
    \ in scope\n        let replacement = alphabet[(index + 1) % alphabet.count]\n\
    \                                                 ^~~~~~~~\n/tmp/tmp5acyu_by.swift:17:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: letter, with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n        case \"e\":\n        case \"i\":\n        case \"o\":\n        case\
    \ \"u\":\n            result += letter\n        default:\n            result +=\
    \ letter + String(letter).characters.index(of: letter)\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpjcke0e98.swift:16:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmpjcke0e98.swift:17:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmpjcke0e98.swift:18:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpjcke0e98.swift:19:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpjcke0e98.swift:21:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmpjcke0e98.swift:23:20:\
    \ error: binary operator '+=' cannot be applied to two 'String' operands\n   \
    \         result += letter + String(letter).characters.index(of: letter)\n   \
    \         ~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjcke0e98.swift:23:20:\
    \ note: overloads for '+=' exist with these partially matching parameter lists:\
    \ (inout String, String)\n            result += letter + String(letter).characters.index(of:\
    \ letter)\n                   ^\n/tmp/tmpjcke0e98.swift:23:30: error: binary operator\
    \ '+' cannot be applied to operands of type 'Character' and 'String.Index?'\n\
    \            result += letter + String(letter).characters.index(of: letter)\n\
    \                      ~~~~~~ ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)\n        let replacement = alphabet[(index + 2) % 26]\n        result\
    \ += String(letter).replacingOccurrences(of: letter, with: replacement)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpz2b0r2wj.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)\n                    ^~~~~~~~\n\
    /tmp/tmpz2b0r2wj.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[(index + 2) % 26]\n                          ^~~~~~~~\n\
    /tmp/tmpz2b0r2wj.swift:17:34: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \        result += String(letter).replacingOccurrences(of: letter, with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result = \"t\"\n        case \"e\":\n            result = \"\
    h\"\n        case \"i\":\n            result = \"k\"\n        case \"o\":\n  \
    \          result = \"g\"\n        case \"u\":\n            result = \"s\"\n \
    \       case \"A\":\n            result = \"T\"\n        case \"E\":\n       \
    \     result = \"H\"\n        case \"I\":\n            result = \"K\"\n      \
    \  case \"O\":\n            result = \"G\"\n        case \"U\":\n            result\
    \ = \"S\"\n        default:\n            result = letter\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpty2fdcxx.swift:37:22: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            result = letter\n                     ^~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = english.index(of: letter)!\n\
    \        let replacement = english[index + 2]\n        result += String(letter).uppercased()\
    \ + replacement\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp6k6j7f69.swift:15:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)!\n                    ^~~~~~~\n\
    /tmp/tmp6k6j7f69.swift:16:27: error: cannot find 'english' in scope\n        let\
    \ replacement = english[index + 2]\n                          ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += String(letter).swapCase()\n        } else {\n            result\
    \ += String(letter)\n        }\n    }\n    for vowel in \"aeiouAEIOU\" {\n   \
    \     result += String(vowel)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp77gt1em5.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmp77gt1em5.swift:16:38:\
    \ error: value of type 'String' has no member 'swapCase'\n            result +=\
    \ String(letter).swapCase()\n                      ~~~~~~~~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = english.index(of: letter)\n\
    \        let nextLetter = english[index!.advanced(by: 1)]\n        let nextIndex\
    \ = english.index(of: nextLetter)\n        let vowelIndex = english.index(of:\
    \ \"a\")\n        let vowel = english[vowelIndex!.advanced(by: 1)]\n        if\
    \ index == nil {\n            result += letter\n        } else if vowelIndex !=\
    \ nil {\n            result += vowel\n        } else {\n            result +=\
    \ english[index!.advanced(by: 2)]\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp27lkylqi.swift:15:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmp27lkylqi.swift:16:26:\
    \ error: cannot find 'english' in scope\n        let nextLetter = english[index!.advanced(by:\
    \ 1)]\n                         ^~~~~~~\n/tmp/tmp27lkylqi.swift:17:25: error:\
    \ cannot find 'english' in scope\n        let nextIndex = english.index(of: nextLetter)\n\
    \                        ^~~~~~~\n/tmp/tmp27lkylqi.swift:18:26: error: cannot\
    \ find 'english' in scope\n        let vowelIndex = english.index(of: \"a\")\n\
    \                         ^~~~~~~\n/tmp/tmp27lkylqi.swift:19:21: error: cannot\
    \ find 'english' in scope\n        let vowel = english[vowelIndex!.advanced(by:\
    \ 1)]\n                    ^~~~~~~\n/tmp/tmp27lkylqi.swift:21:23: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \       result += letter\n                      ^\n/tmp/tmp27lkylqi.swift:25:23:\
    \ error: cannot find 'english' in scope\n            result += english[index!.advanced(by:\
    \ 2)]\n                      ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result = \"t\"\n        case \"e\":\n            result = \"\
    h\"\n        case \"i\":\n            result = \"k\"\n        case \"o\":\n  \
    \          result = \"s\"\n        case \"u\":\n            result = \"c\"\n \
    \       case \"A\":\n            result = \"T\"\n        case \"E\":\n       \
    \     result = \"H\"\n        case \"I\":\n            result = \"K\"\n      \
    \  case \"O\":\n            result = \"S\"\n        case \"U\":\n            result\
    \ = \"C\"\n        default:\n            result = letter\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpqh4bgv9f.swift:37:22: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            result = letter\n                     ^~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += String(letter).swapCase()\n        } else {\n            result\
    \ += String(letter)\n        }\n    }\n    for vowel in \"aeiouAEIOU\" {\n   \
    \     let index = message.index(of: vowel)\n        let nextIndex = message.index(of:\
    \ vowel, offsetBy: index + 1)\n        if index != nextIndex {\n            result\
    \ += String(vowel)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpzzii2g1n.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmpzzii2g1n.swift:16:38:\
    \ error: value of type 'String' has no member 'swapCase'\n            result +=\
    \ String(letter).swapCase()\n                      ~~~~~~~~~~~~~~ ^~~~~~~~\n/tmp/tmpzzii2g1n.swift:22:29:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        let\
    \ index = message.index(of: vowel)\n                            ^\n/tmp/tmpzzii2g1n.swift:22:29:\
    \ note: use 'firstIndex(of:)' instead\n        let index = message.index(of: vowel)\n\
    \                            ^~~~~\n                            firstIndex\n/tmp/tmpzzii2g1n.swift:23:60:\
    \ error: cannot convert value of type 'String.Index?' to expected argument type\
    \ 'Int'\n        let nextIndex = message.index(of: vowel, offsetBy: index + 1)\n\
    \                                                           ^\n/tmp/tmpzzii2g1n.swift:23:33:\
    \ error: no exact matches in call to instance method 'index'\n        let nextIndex\
    \ = message.index(of: vowel, offsetBy: index + 1)\n                          \
    \      ^\n/tmp/tmpzzii2g1n.swift:23:33: note: candidate has partially matching\
    \ parameter list (String.Index, offsetBy: Int)\n        let nextIndex = message.index(of:\
    \ vowel, offsetBy: index + 1)\n                                ^\n/tmp/tmpzzii2g1n.swift:23:33:\
    \ note: candidate has partially matching parameter list (String.Index, offsetBy:\
    \ Int)\n        let nextIndex = message.index(of: vowel, offsetBy: index + 1)\n\
    \                                ^\n/tmp/tmpzzii2g1n.swift:23:33: note: candidate\
    \ has partially matching parameter list (of: String.Element)\n        let nextIndex\
    \ = message.index(of: vowel, offsetBy: index + 1)\n                          \
    \      ^\n/tmp/tmpzzii2g1n.swift:23:33: note: candidate has partially matching\
    \ parameter list (String.Index, offsetBy: Int)\n        let nextIndex = message.index(of:\
    \ vowel, offsetBy: index + 1)\n                                ^\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result = \"t\"\n        case \"b\":\n            result = \"\
    g\"\n        case \"c\":\n            result = \"k\"\n        case \"d\":\n  \
    \          result = \"s\"\n        case \"e\":\n            result = \"h\"\n \
    \       case \"f\":\n            result = \"j\"\n        case \"g\":\n       \
    \     result = \"x\"\n        case \"h\":\n            result = \"q\"\n      \
    \  case \"i\":\n            result = \"y\"\n        case \"j\":\n            result\
    \ = \"v\"\n        case \"k\":\n            result = \"b\"\n        case \"l\"\
    :\n            result = \"m\"\n        case \"m\":\n            result = \"n\"\
    \n        case \"n\":\n            result = \"o\"\n        case \"o\":\n     \
    \       result = \"p\"\n        case \"p\":\n            result = \"o\"\n    \
    \    case \"q\":\n            result = \"r\"\n        case \"r\":\n          \
    \  result = \"t\"\n        case \"s\":\n            result = \"v\"\n        case\
    \ \"t\":\n            result = \"h\"\n        case \"u\":\n            result\
    \ = \"u\"\n        case \"v\":\n            result = \"y\"\n        case \"w\"\
    :\n            result = \"x\"\n        case \"x\":\n            result = \"g\"\
    \n        case \"y\":\n            result = \"q\"\n        case \"z\":\n     \
    \       result = \"j\"\n        default:\n            result = letter\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp1h25lq76.swift:69:22: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            result = letter\n                     ^~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += letter.lowercased()\n        } else {\n            result += letter.uppercased()\n\
    \        }\n    }\n    for letter in result {\n        if letter == \"A\" {\n\
    \            result += \"B\"\n        } else if letter == \"B\" {\n          \
    \  result += \"A\"\n        } else if letter == \"C\" {\n            result +=\
    \ \"D\"\n        } else if letter == \"D\" {\n            result += \"C\"\n  \
    \      } else if letter == \"E\" {\n            result += \"F\"\n        } else\
    \ if letter == \"F\" {\n            result += \"E\"\n        } else if letter\
    \ == \"G\" {\n            result += \"H\"\n        } else if letter == \"H\" {\n\
    \            result += \"G\"\n        } else if letter == \"I\" {\n          \
    \  result += \"J\"\n        } else if letter == \"J\" {\n            result +=\
    \ \"I\"\n        } else if letter == \"K\" {\n            result += \"L\"\n  \
    \      } else if letter == \"L\" {\n            result += \"K\"\n        } else\
    \ if letter == \"M\" {\n            result += \"N\"\n        } else if letter\
    \ == \"N\" {\n            result += \"M\"\n        } else if letter == \"O\" {\n\
    \            result += \"P\"\n        } else if letter == \"P\" {\n          \
    \  result += \"O\"\n        } else if letter == \"Q\" {\n            result +=\
    \ \"R\"\n        } else if letter == \"R\" {\n            result += \"Q\"\n  \
    \      } else if letter == \"S\" {\n            result += \"T\"\n        } else\
    \ if letter == \"T\" {\n            result += \"S\"\n        } else if letter\
    \ == \"U\" {\n            result += \"V\"\n        } else if letter == \"V\" {\n\
    \            result += \"U\"\n        } else if letter == \"W\" {\n          \
    \  result += \"X\"\n        } else if letter == \"X\" {\n            result +=\
    \ \"W\"\n        } else if letter == \"Y\" {\n            result += \"Z\"\n  \
    \      } else if letter == \"Z\" {\n            result += \"Y\"\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp7qgpx7wr.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n        case \"e\":\n        case \"i\":\n        case \"o\":\n        case\
    \ \"u\":\n            result += letter\n        default:\n            result +=\
    \ letter.swapCase()\n        }\n    }\n    for vowel in \"aeiou\" {\n        result\
    \ += vowel.swapCase()\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpse5leemb.swift:16:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmpse5leemb.swift:17:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmpse5leemb.swift:18:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpse5leemb.swift:19:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpse5leemb.swift:21:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmpse5leemb.swift:23:30:\
    \ error: value of type 'Character' has no member 'swapCase'\n            result\
    \ += letter.swapCase()\n                      ~~~~~~ ^~~~~~~~\n/tmp/tmpse5leemb.swift:27:25:\
    \ error: value of type 'Character' has no member 'swapCase'\n        result +=\
    \ vowel.swapCase()\n                  ~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = english.index(of: letter)\n\
    \        let replacement = english[index!.advanced(by: 2)!]\n        result +=\
    \ String(letter).replacingOccurrences(of: \"AEIOUaeiou\", with: replacement)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpzmlt5l58.swift:15:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmpzmlt5l58.swift:16:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!.advanced(by:\
    \ 2)!]\n                          ^~~~~~~\n/tmp/tmpzmlt5l58.swift:17:34: error:\
    \ value of type 'String' has no member 'replacingOccurrences'\n        result\
    \ += String(letter).replacingOccurrences(of: \"AEIOUaeiou\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = english.index(of: letter)!\n\
    \        let nextLetter = english[index + 1]\n        if letter.isUppercase {\n\
    \            result += nextLetter\n        } else {\n            result += english[english.index(of:\
    \ letter)! + 2]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp2kqsc2jl.swift:15:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)!\n                    ^~~~~~~\n\
    /tmp/tmp2kqsc2jl.swift:16:26: error: cannot find 'english' in scope\n        let\
    \ nextLetter = english[index + 1]\n                         ^~~~~~~\n/tmp/tmp2kqsc2jl.swift:20:23:\
    \ error: cannot find 'english' in scope\n            result += english[english.index(of:\
    \ letter)! + 2]\n                      ^~~~~~~\n/tmp/tmp2kqsc2jl.swift:20:31:\
    \ error: cannot find 'english' in scope\n            result += english[english.index(of:\
    \ letter)! + 2]\n                              ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)\n        let nextIndex = alphabet.index(of: letter, offsetBy: index\
    \ + 1)\n        if index != nextIndex {\n            result += alphabet[index]\
    \ + alphabet[nextIndex]\n        } else {\n            result += letter\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpoc0i_wjk.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)\n                    ^~~~~~~~\n\
    /tmp/tmpoc0i_wjk.swift:16:25: error: cannot find 'alphabet' in scope\n       \
    \ let nextIndex = alphabet.index(of: letter, offsetBy: index + 1)\n          \
    \              ^~~~~~~~\n/tmp/tmpoc0i_wjk.swift:18:23: error: cannot find 'alphabet'\
    \ in scope\n            result += alphabet[index] + alphabet[nextIndex]\n    \
    \                  ^~~~~~~~\n/tmp/tmpoc0i_wjk.swift:18:41: error: cannot find\
    \ 'alphabet' in scope\n            result += alphabet[index] + alphabet[nextIndex]\n\
    \                                        ^~~~~~~~\n/tmp/tmpoc0i_wjk.swift:20:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result += \"A\"\n        case \"b\":\n            result +=\
    \ \"B\"\n        case \"c\":\n            result += \"C\"\n        case \"d\"\
    :\n            result += \"D\"\n        case \"e\":\n            result += \"\
    E\"\n        case \"f\":\n            result += \"F\"\n        case \"g\":\n \
    \           result += \"G\"\n        case \"h\":\n            result += \"H\"\n\
    \        case \"i\":\n            result += \"I\"\n        case \"j\":\n     \
    \       result += \"J\"\n        case \"k\":\n            result += \"K\"\n  \
    \      case \"l\":\n            result += \"L\"\n        case \"m\":\n       \
    \     result += \"M\"\n        case \"n\":\n            result += \"N\"\n    \
    \    case \"o\":\n            result += \"O\"\n        case \"p\":\n         \
    \   result += \"P\"\n        case \"q\":\n            result += \"Q\"\n      \
    \  case \"r\":\n            result += \"R\"\n        case \"s\":\n           \
    \ result += \"S\"\n        case \"t\":\n            result += \"T\"\n        case\
    \ \"u\":\n            result += \"U\"\n        case \"v\":\n            result\
    \ += \"V\"\n        case \"w\":\n            result += \"W\"\n        case \"\
    x\":\n            result += \"X\"\n        case \"y\":\n            result +=\
    \ \"Y\"\n        case \"z\":\n            result += \"Z\"\n        default:\n\
    \            result += letter\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpijzvts68.swift:69:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let replacement = alphabet[index + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ \"A\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"E\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"I\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"O\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"U\", with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp2y2rmi4n.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmp2y2rmi4n.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index + 2]\n                          ^~~~~~~~\n\
    /tmp/tmp2y2rmi4n.swift:17:34: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \        result += String(letter).replacingOccurrences(of: \"A\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2y2rmi4n.swift:18:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"E\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2y2rmi4n.swift:19:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"I\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2y2rmi4n.swift:20:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"O\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2y2rmi4n.swift:21:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"U\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result += \"a\"\n        case \"e\":\n            result +=\
    \ \"e\"\n        case \"i\":\n            result += \"i\"\n        case \"o\"\
    :\n            result += \"o\"\n        case \"u\":\n            result += \"\
    u\"\n        case \"A\":\n            result += \"A\"\n        case \"E\":\n \
    \           result += \"E\"\n        case \"I\":\n            result += \"I\"\n\
    \        case \"O\":\n            result += \"O\"\n        case \"U\":\n     \
    \       result += \"U\"\n        default:\n            result += letter\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpytgr6ipk.swift:37:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for char in message {\n        if char.lowercased() != char {\n\
    \            result += char.lowercased()\n        } else {\n            result\
    \ += char\n        }\n    }\n    for char in result {\n        if char.lowercased()\
    \ == \"a\" {\n            result += \"g\"\n        } else if char.lowercased()\
    \ == \"e\" {\n            result += \"h\"\n        } else if char.lowercased()\
    \ == \"i\" {\n            result += \"j\"\n        } else if char.lowercased()\
    \ == \"o\" {\n            result += \"k\"\n        } else if char.lowercased()\
    \ == \"u\" {\n            result += \"l\"\n        } else if char.lowercased()\
    \ == \"y\" {\n            result += \"m\"\n        } else if char.lowercased()\
    \ == \"s\" {\n            result += \"n\"\n        } else if char.lowercased()\
    \ == \"c\" {\n            result += \"p\"\n        } else if char.lowercased()\
    \ == \"g\" {\n            result += \"q\"\n        } else if char.lowercased()\
    \ == \"h\" {\n            result += \"r\"\n        } else if char.lowercased()\
    \ == \"j\" {\n            result += \"s\"\n        } else if char.lowercased()\
    \ == \"k\" {\n            result += \"t\"\n        } else if char.lowercased()\
    \ == \"l\" {\n            result += \"v\"\n        } else if char.lowercased()\
    \ == \"m\" {\n            result += \"w\"\n        } else if char.lowercased()\
    \ == \"n\" {\n            result += \"x\"\n        } else if char.lowercased()\
    \ == \"p\" {\n            result += \"y\"\n        } else if char.lowercased()\
    \ == \"q\" {\n            result += \"z\"\n        } else if char.lowercased()\
    \ == \"r\" {\n            result += \"a\"\n        } else if char.lowercased()\
    \ == \"s\" {\n            result += \"b\"\n        } else if char.lowercased()\
    \ == \"t\" {\n            result += \"c\"\n        } else if char.lowercased()\
    \ == \"v\" {\n            result += \"d\"\n        } else if char.lowercased()\
    \ == \"w\" {\n            result += \"e\"\n        } else if char.lowercased()\
    \ == \"x\" {\n            result += \"f\"\n        } else if char.lowercased()\
    \ == \"y\" {\n            result += \"g\"\n        } else if char.lowercased()\
    \ == \"z\" {\n            result += \"h\"\n        } else if char.lowercased()\
    \ == \"a\" {\n            result += \"j\"\n        } else if char.lowercased()\
    \ == \"b\" {\n            result += \"k\"\n        } else \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp55m7xzud.swift:76:15: error: expected '{' or 'if' after 'else'\n\
    \        } else \n              ^\n/tmp/tmp55m7xzud.swift:96:84: error: expected\
    \ '}' at end of brace statement\nassert(encode(message: \"I DoNt KnOw WhAt tO\
    \ WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\n                               \
    \                                                    ^\n/tmp/tmp55m7xzud.swift:12:40:\
    \ note: to match this opening '{'\nfunc encode(message: String) -> String {\n\
    \                                       ^\n/tmp/tmp55m7xzud.swift:15:33: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \        if char.lowercased() != char {\n                                ^\n/tmp/tmp55m7xzud.swift:18:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += char\n                      ^\n/tmp/tmp55m7xzud.swift:80:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result = \"t\"\n        case \"b\":\n            result = \"\
    h\"\n        case \"c\":\n            result = \"k\"\n        case \"d\":\n  \
    \          result = \"g\"\n        case \"e\":\n            result = \"s\"\n \
    \       case \"f\":\n            result = \"c\"\n        case \"g\":\n       \
    \     result = \"g\"\n        case \"h\":\n            result = \"h\"\n      \
    \  case \"i\":\n            result = \"k\"\n        case \"j\":\n            result\
    \ = \"g\"\n        case \"k\":\n            result = \"k\"\n        case \"l\"\
    :\n            result = \"s\"\n        case \"m\":\n            result = \"c\"\
    \n        case \"n\":\n            result = \"g\"\n        case \"o\":\n     \
    \       result = \"s\"\n        case \"p\":\n            result = \"c\"\n    \
    \    case \"q\":\n            result = \"g\"\n        case \"r\":\n          \
    \  result = \"s\"\n        case \"s\":\n            result = \"s\"\n        case\
    \ \"t\":\n            result = \"t\"\n        case \"u\":\n            result\
    \ = \"k\"\n        case \"v\":\n            result = \"k\"\n        case \"w\"\
    :\n            result = \"k\"\n        case \"x\":\n            result = \"k\"\
    \n        case \"y\":\n            result = \"k\"\n        case \"z\":\n     \
    \       result = \"k\"\n        default:\n            result = letter\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpyav4i4fc.swift:69:22: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            result = letter\n                     ^~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += String(letter).swapCase()\n        } else {\n            result\
    \ += String(letter)\n        }\n    }\n    for vowel in vowels {\n        result\
    \ += String(vowel)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp1461ykp9.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmp1461ykp9.swift:16:38:\
    \ error: value of type 'String' has no member 'swapCase'\n            result +=\
    \ String(letter).swapCase()\n                      ~~~~~~~~~~~~~~ ^~~~~~~~\n/tmp/tmp1461ykp9.swift:21:18:\
    \ error: cannot find 'vowels' in scope\n    for vowel in vowels {\n          \
    \       ^~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = english.index(of: letter)\n\
    \        let replacement = english[english.index(of: letter, offsetBy: index!)]\n\
    \        result += replacement\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp031khn23.swift:15:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmp031khn23.swift:16:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[english.index(of:\
    \ letter, offsetBy: index!)]\n                          ^~~~~~~\n/tmp/tmp031khn23.swift:16:35:\
    \ error: cannot find 'english' in scope\n        let replacement = english[english.index(of:\
    \ letter, offsetBy: index!)]\n                                  ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += letter.lowercased()\n        } else {\n            result += letter.uppercased()\n\
    \        }\n    }\n    for vowel in \"AEIOUaeiou\" {\n        result = result.replacingOccurrences(of:\
    \ vowel, with: vowel.lowercased())\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmphf5v0q9s.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmphf5v0q9s.swift:22:25:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result = result.replacingOccurrences(of: vowel, with: vowel.lowercased())\n\
    \                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let replacement = alphabet[index + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ \"A\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"E\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"I\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"O\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"U\", with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp2y2rmi4n.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmp2y2rmi4n.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index + 2]\n                          ^~~~~~~~\n\
    /tmp/tmp2y2rmi4n.swift:17:34: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \        result += String(letter).replacingOccurrences(of: \"A\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2y2rmi4n.swift:18:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"E\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2y2rmi4n.swift:19:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"I\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2y2rmi4n.swift:20:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"O\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2y2rmi4n.swift:21:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"U\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)\n        let replacement = alphabet[index! + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ \"A\", with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpavu74_ts.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)\n                    ^~~~~~~~\n\
    /tmp/tmpavu74_ts.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index! + 2]\n                          ^~~~~~~~\n\
    /tmp/tmpavu74_ts.swift:17:34: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \        result += String(letter).replacingOccurrences(of: \"A\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = english.index(of: letter)\n\
    \        let replacement = english[index!.advanced(by: 2)!]\n        result +=\
    \ String(letter).replacingOccurrences(of: \"A\", with: replacement)\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp8rs51czn.swift:15:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmp8rs51czn.swift:16:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!.advanced(by:\
    \ 2)!]\n                          ^~~~~~~\n/tmp/tmp8rs51czn.swift:17:34: error:\
    \ value of type 'String' has no member 'replacingOccurrences'\n        result\
    \ += String(letter).replacingOccurrences(of: \"A\", with: replacement)\n     \
    \             ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = english.index(of: letter)\n\
    \        let replacement = english[english.index(of: letter, offsetBy: index)]\n\
    \        result += String(letter).replacingOccurrences(of: letter, with: replacement)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpwu9vnxiq.swift:15:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmpwu9vnxiq.swift:16:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[english.index(of:\
    \ letter, offsetBy: index)]\n                          ^~~~~~~\n/tmp/tmpwu9vnxiq.swift:16:35:\
    \ error: cannot find 'english' in scope\n        let replacement = english[english.index(of:\
    \ letter, offsetBy: index)]\n                                  ^~~~~~~\n/tmp/tmpwu9vnxiq.swift:17:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: letter, with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result += \"A\"\n        case \"b\":\n            result +=\
    \ \"B\"\n        case \"c\":\n            result += \"C\"\n        case \"d\"\
    :\n            result += \"D\"\n        case \"e\":\n            result += \"\
    E\"\n        case \"f\":\n            result += \"F\"\n        case \"g\":\n \
    \           result += \"G\"\n        case \"h\":\n            result += \"H\"\n\
    \        case \"i\":\n            result += \"I\"\n        case \"j\":\n     \
    \       result += \"J\"\n        case \"k\":\n            result += \"K\"\n  \
    \      case \"l\":\n            result += \"L\"\n        case \"m\":\n       \
    \     result += \"M\"\n        case \"n\":\n            result += \"N\"\n    \
    \    case \"o\":\n            result += \"O\"\n        case \"p\":\n         \
    \   result += \"P\"\n        case \"q\":\n            result += \"Q\"\n      \
    \  case \"r\":\n            result += \"R\"\n        case \"s\":\n           \
    \ result += \"S\"\n        case \"t\":\n            result += \"T\"\n        case\
    \ \"u\":\n            result += \"U\"\n        case \"v\":\n            result\
    \ += \"V\"\n        case \"w\":\n            result += \"W\"\n        case \"\
    x\":\n            result += \"X\"\n        case \"y\":\n            result +=\
    \ \"Y\"\n        case \"z\":\n            result += \"Z\"\n        case \"A\"\
    :\n            result += \"a\"\n        case \"B\":\n            result += \"\
    b\"\n        case \"C\":\n            result += \"c\"\n        case \"D\":\n \
    \           result += \"d\"\n        case \"E\":\n            result += \"e\"\n\
    \        case \"F\":\n            result += \"f\"\n        case \"G\":\n     \
    \       result += \"g\"\n        case \"H\":\n            result += \"h\"\n  \
    \      case \"I\":\n            result += \"i\"\n        case \"J\":\n       \
    \     result += \"j\"\n        case \"K\":\n            result += \"k\"\n    \
    \    case \"L\":\n            result += \"l\"\n        case \"M\":\n         \
    \   result += \"m\"\n        case \"N\":\n            result += \"n\"\n      \
    \  case \"O\":\n            result += \"o\"\n        case \"P\":\n           \
    \ result += \"p\"\n        case \"Q\":\n            result += \"q\"\n        case\
    \ \"R\":\n            result += \"r\"\n        case \"S\":\n            result\
    \ += \"s\"\n        case \"T\":\n            result += \"t\"\n        case \"\
    U\":\n            \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpcm61vkcn.swift:108:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"U\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmpcm61vkcn.swift:129:84: error: expected '}' at\
    \ end of brace statement\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\")\n                                        \
    \                                           ^\n/tmp/tmpcm61vkcn.swift:14:27: note:\
    \ to match this opening '{'\n    for letter in message {\n                   \
    \       ^\n/tmp/tmpcm61vkcn.swift:129:84: error: expected '}' at end of brace\
    \ statement\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\")\n                                                    \
    \                               ^\n/tmp/tmpcm61vkcn.swift:12:40: note: to match\
    \ this opening '{'\nfunc encode(message: String) -> String {\n               \
    \                        ^\n/tmp/tmpcm61vkcn.swift:15:9: error: switch must be\
    \ exhaustive\n        switch letter {\n        ^\n/tmp/tmpcm61vkcn.swift:15:9:\
    \ note: do you want to add a default clause?\n        switch letter {\n      \
    \  ^\n/tmp/tmpcm61vkcn.swift:113:6: error: operator functions can only be declared\
    \ at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n        case \"e\":\n        case \"i\":\n        case \"o\":\n        case\
    \ \"u\":\n            result += letter\n        default:\n            result +=\
    \ String(letter).swapcase()\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpw1pm8o3w.swift:16:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmpw1pm8o3w.swift:17:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmpw1pm8o3w.swift:18:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpw1pm8o3w.swift:19:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpw1pm8o3w.swift:21:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmpw1pm8o3w.swift:23:38:\
    \ error: value of type 'String' has no member 'swapcase'\n            result +=\
    \ String(letter).swapcase()\n                      ~~~~~~~~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let replacement = alphabet[(index + 1) % alphabet.count]\n\
    \        result += String(letter).replacingOccurrences(of: letter, with: replacement)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp5acyu_by.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmp5acyu_by.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[(index + 1) % alphabet.count]\n                 \
    \         ^~~~~~~~\n/tmp/tmp5acyu_by.swift:16:50: error: cannot find 'alphabet'\
    \ in scope\n        let replacement = alphabet[(index + 1) % alphabet.count]\n\
    \                                                 ^~~~~~~~\n/tmp/tmp5acyu_by.swift:17:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: letter, with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let replacement = alphabet[index + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ \"A\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"E\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"I\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"O\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"U\", with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp2y2rmi4n.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmp2y2rmi4n.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index + 2]\n                          ^~~~~~~~\n\
    /tmp/tmp2y2rmi4n.swift:17:34: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \        result += String(letter).replacingOccurrences(of: \"A\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2y2rmi4n.swift:18:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"E\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2y2rmi4n.swift:19:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"I\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2y2rmi4n.swift:20:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"O\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2y2rmi4n.swift:21:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"U\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result += \"A\"\n        case \"b\":\n            result +=\
    \ \"B\"\n        case \"c\":\n            result += \"C\"\n        case \"d\"\
    :\n            result += \"D\"\n        case \"e\":\n            result += \"\
    E\"\n        case \"f\":\n            result += \"F\"\n        case \"g\":\n \
    \           result += \"G\"\n        case \"h\":\n            result += \"H\"\n\
    \        case \"i\":\n            result += \"I\"\n        case \"j\":\n     \
    \       result += \"J\"\n        case \"k\":\n            result += \"K\"\n  \
    \      case \"l\":\n            result += \"L\"\n        case \"m\":\n       \
    \     result += \"M\"\n        case \"n\":\n            result += \"N\"\n    \
    \    case \"o\":\n            result += \"O\"\n        case \"p\":\n         \
    \   result += \"P\"\n        case \"q\":\n            result += \"Q\"\n      \
    \  case \"r\":\n            result += \"R\"\n        case \"s\":\n           \
    \ result += \"S\"\n        case \"t\":\n            result += \"T\"\n        case\
    \ \"u\":\n            result += \"U\"\n        case \"v\":\n            result\
    \ += \"V\"\n        case \"w\":\n            result += \"W\"\n        case \"\
    x\":\n            result += \"X\"\n        case \"y\":\n            result +=\
    \ \"Y\"\n        case \"z\":\n            result += \"Z\"\n        default:\n\
    \            result += letter\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpijzvts68.swift:69:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += letter\n        } else {\n            result += letter.lowercased()\n\
    \        }\n    }\n    for letter in result {\n        if letter.isUpper() {\n\
    \            result += letter.lowercased()\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpxdeay5dr.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmpxdeay5dr.swift:16:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmpxdeay5dr.swift:22:19:\
    \ error: value of type 'Character' has no member 'isUpper'\n        if letter.isUpper()\
    \ {\n           ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)\n        let replacement = alphabet[index! + 1]\n        result += String(letter).replacingOccurrences(of:\
    \ letter, with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmprvgifg62.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)\n                    ^~~~~~~~\n\
    /tmp/tmprvgifg62.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index! + 1]\n                          ^~~~~~~~\n\
    /tmp/tmprvgifg62.swift:17:34: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \        result += String(letter).replacingOccurrences(of: letter, with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)\n        let replacement = alphabet[index! + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ \"A\", with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpavu74_ts.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)\n                    ^~~~~~~~\n\
    /tmp/tmpavu74_ts.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index! + 2]\n                          ^~~~~~~~\n\
    /tmp/tmpavu74_ts.swift:17:34: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \        result += String(letter).replacingOccurrences(of: \"A\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result += \"A\"\n        case \"b\":\n            result +=\
    \ \"B\"\n        case \"c\":\n            result += \"C\"\n        case \"d\"\
    :\n            result += \"D\"\n        case \"e\":\n            result += \"\
    E\"\n        case \"f\":\n            result += \"F\"\n        case \"g\":\n \
    \           result += \"G\"\n        case \"h\":\n            result += \"H\"\n\
    \        case \"i\":\n            result += \"I\"\n        case \"j\":\n     \
    \       result += \"J\"\n        case \"k\":\n            result += \"K\"\n  \
    \      case \"l\":\n            result += \"L\"\n        case \"m\":\n       \
    \     result += \"M\"\n        case \"n\":\n            result += \"N\"\n    \
    \    case \"o\":\n            result += \"O\"\n        case \"p\":\n         \
    \   result += \"P\"\n        case \"q\":\n            result += \"Q\"\n      \
    \  case \"r\":\n            result += \"R\"\n        case \"s\":\n           \
    \ result += \"S\"\n        case \"t\":\n            result += \"T\"\n        case\
    \ \"u\":\n            result += \"U\"\n        case \"v\":\n            result\
    \ += \"V\"\n        case \"w\":\n            result += \"W\"\n        case \"\
    x\":\n            result += \"X\"\n        case \"y\":\n            result +=\
    \ \"Y\"\n        case \"z\":\n            result += \"Z\"\n        default:\n\
    \            result += letter\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpijzvts68.swift:69:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result += \"A\"\n        case \"b\":\n            result +=\
    \ \"B\"\n        case \"c\":\n            result += \"C\"\n        case \"d\"\
    :\n            result += \"D\"\n        case \"e\":\n            result += \"\
    E\"\n        case \"f\":\n            result += \"F\"\n        case \"g\":\n \
    \           result += \"G\"\n        case \"h\":\n            result += \"H\"\n\
    \        case \"i\":\n            result += \"I\"\n        case \"j\":\n     \
    \       result += \"J\"\n        case \"k\":\n            result += \"K\"\n  \
    \      case \"l\":\n            result += \"L\"\n        case \"m\":\n       \
    \     result += \"M\"\n        case \"n\":\n            result += \"N\"\n    \
    \    case \"o\":\n            result += \"O\"\n        case \"p\":\n         \
    \   result += \"P\"\n        case \"q\":\n            result += \"Q\"\n      \
    \  case \"r\":\n            result += \"R\"\n        case \"s\":\n           \
    \ result += \"S\"\n        case \"t\":\n            result += \"T\"\n        case\
    \ \"u\":\n            result += \"U\"\n        case \"v\":\n            result\
    \ += \"V\"\n        case \"w\":\n            result += \"W\"\n        case \"\
    x\":\n            result += \"X\"\n        case \"y\":\n            result +=\
    \ \"Y\"\n        case \"z\":\n            result += \"Z\"\n        default:\n\
    \            result += letter\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpijzvts68.swift:69:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result += \"A\"\n        case \"b\":\n            result +=\
    \ \"B\"\n        case \"c\":\n            result += \"C\"\n        case \"d\"\
    :\n            result += \"D\"\n        case \"e\":\n            result += \"\
    E\"\n        case \"f\":\n            result += \"F\"\n        case \"g\":\n \
    \           result += \"G\"\n        case \"h\":\n            result += \"H\"\n\
    \        case \"i\":\n            result += \"I\"\n        case \"j\":\n     \
    \       result += \"J\"\n        case \"k\":\n            result += \"K\"\n  \
    \      case \"l\":\n            result += \"L\"\n        case \"m\":\n       \
    \     result += \"M\"\n        case \"n\":\n            result += \"N\"\n    \
    \    case \"o\":\n            result += \"O\"\n        case \"p\":\n         \
    \   result += \"P\"\n        case \"q\":\n            result += \"Q\"\n      \
    \  case \"r\":\n            result += \"R\"\n        case \"s\":\n           \
    \ result += \"S\"\n        case \"t\":\n            result += \"T\"\n        case\
    \ \"u\":\n            result += \"U\"\n        case \"v\":\n            result\
    \ += \"V\"\n        case \"w\":\n            result += \"W\"\n        case \"\
    x\":\n            result += \"X\"\n        case \"y\":\n            result +=\
    \ \"Y\"\n        case \"z\":\n            result += \"Z\"\n        default:\n\
    \            result += letter\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpijzvts68.swift:69:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let replacement = alphabet[index + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ \"A\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"E\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"I\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"O\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"U\", with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp2y2rmi4n.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmp2y2rmi4n.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index + 2]\n                          ^~~~~~~~\n\
    /tmp/tmp2y2rmi4n.swift:17:34: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \        result += String(letter).replacingOccurrences(of: \"A\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2y2rmi4n.swift:18:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"E\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2y2rmi4n.swift:19:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"I\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2y2rmi4n.swift:20:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"O\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2y2rmi4n.swift:21:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"U\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = english.index(of: letter)\n\
    \        let replacement = english[index! + 2]\n        result += String(letter).uppercased()\
    \ + replacement\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpthus5zwc.swift:15:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmpthus5zwc.swift:16:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!\
    \ + 2]\n                          ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)\n        let replacement = alphabet[index + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ \"A\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"E\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"I\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"O\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"U\", with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp85iv4_9w.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)\n                    ^~~~~~~~\n\
    /tmp/tmp85iv4_9w.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index + 2]\n                          ^~~~~~~~\n\
    /tmp/tmp85iv4_9w.swift:17:34: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \        result += String(letter).replacingOccurrences(of: \"A\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp85iv4_9w.swift:18:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"E\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp85iv4_9w.swift:19:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"I\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp85iv4_9w.swift:20:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"O\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp85iv4_9w.swift:21:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"U\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = english.index(of: letter)\n\
    \        let replacement = english[index! + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ \"A\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"E\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"I\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"O\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"U\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"Y\", with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmplburdqta.swift:15:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmplburdqta.swift:16:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!\
    \ + 2]\n                          ^~~~~~~\n/tmp/tmplburdqta.swift:17:34: error:\
    \ value of type 'String' has no member 'replacingOccurrences'\n        result\
    \ += String(letter).replacingOccurrences(of: \"A\", with: replacement)\n     \
    \             ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmplburdqta.swift:18:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"E\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmplburdqta.swift:19:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"I\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmplburdqta.swift:20:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"O\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmplburdqta.swift:21:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"U\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmplburdqta.swift:22:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"Y\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += letter.lowercased()\n        } else {\n            result += letter.uppercased()\n\
    \        }\n    }\n    for vowel in \"AEIOUaeiou\" {\n        let index = result.index(of:\
    \ vowel)\n        if index != nil {\n            let nextIndex = index! + 2\n\
    \            if nextIndex < result.count {\n                result += result[nextIndex]\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp20jpzjg_.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmp20jpzjg_.swift:22:28:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        let\
    \ index = result.index(of: vowel)\n                           ^\n/tmp/tmp20jpzjg_.swift:22:28:\
    \ note: use 'firstIndex(of:)' instead\n        let index = result.index(of: vowel)\n\
    \                           ^~~~~\n                           firstIndex\n/tmp/tmp20jpzjg_.swift:24:34:\
    \ error: cannot convert value of type 'String.Index' to expected argument type\
    \ 'Int'\n            let nextIndex = index! + 2\n                            \
    \     ^\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += String(letter).swapCase()\n        } else {\n            result\
    \ += letter\n        }\n    }\n    for letter in result {\n        if letter.isLetter()\
    \ {\n            if let index = result.index(of: letter) {\n                let\
    \ vowel = String(result[index]).swapped()\n                let vowelIndex = result.index(of:\
    \ vowel)\n                result[index] = vowel\n                result[vowelIndex]\
    \ = letter\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpskqlndxh.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmpskqlndxh.swift:16:38:\
    \ error: value of type 'String' has no member 'swapCase'\n            result +=\
    \ String(letter).swapCase()\n                      ~~~~~~~~~~~~~~ ^~~~~~~~\n/tmp/tmpskqlndxh.swift:18:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmpskqlndxh.swift:22:19:\
    \ error: cannot call value of non-function type 'Bool'\n        if letter.isLetter()\
    \ {\n                  ^       ~~\n                          \n/tmp/tmpskqlndxh.swift:23:35:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        \
    \    if let index = result.index(of: letter) {\n                             \
    \     ^\n/tmp/tmpskqlndxh.swift:23:35: note: use 'firstIndex(of:)' instead\n \
    \           if let index = result.index(of: letter) {\n                      \
    \            ^~~~~\n                                  firstIndex\n/tmp/tmpskqlndxh.swift:24:51:\
    \ error: value of type 'String' has no member 'swapped'\n                let vowel\
    \ = String(result[index]).swapped()\n                            ~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~\n/tmp/tmpskqlndxh.swift:26:23: error: cannot assign through subscript:\
    \ subscript is get-only\n                result[index] = vowel\n             \
    \   ~~~~~~^~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = english.index(of: letter)\n\
    \        let replacement = english[index! + 2]\n        result += String(letter).uppercased()\
    \ + replacement\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpthus5zwc.swift:15:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmpthus5zwc.swift:16:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!\
    \ + 2]\n                          ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = english.index(of: letter)!\n\
    \        let replacement = english[index + 2]\n        result += english[index]\n\
    \        result += replacement\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpd9m3y9fg.swift:15:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)!\n                    ^~~~~~~\n\
    /tmp/tmpd9m3y9fg.swift:16:27: error: cannot find 'english' in scope\n        let\
    \ replacement = english[index + 2]\n                          ^~~~~~~\n/tmp/tmpd9m3y9fg.swift:17:19:\
    \ error: cannot find 'english' in scope\n        result += english[index]\n  \
    \                ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let letterIndex = alphabet.index(of: letter)! - index\n  \
    \      let replacement = alphabet[letterIndex + 2]\n        result += alphabet[letterIndex]\
    \ + replacement\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpg8mcb8mc.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmpg8mcb8mc.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let letterIndex = alphabet.index(of: letter)! - index\n                    \
    \      ^~~~~~~~\n/tmp/tmpg8mcb8mc.swift:17:27: error: cannot find 'alphabet' in\
    \ scope\n        let replacement = alphabet[letterIndex + 2]\n               \
    \           ^~~~~~~~\n/tmp/tmpg8mcb8mc.swift:18:19: error: cannot find 'alphabet'\
    \ in scope\n        result += alphabet[letterIndex] + replacement\n          \
    \        ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let replacement = alphabet[index + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ \"AEIOUaeiou\", with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpbcjstxg4.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmpbcjstxg4.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index + 2]\n                          ^~~~~~~~\n\
    /tmp/tmpbcjstxg4.swift:17:34: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \        result += String(letter).replacingOccurrences(of: \"AEIOUaeiou\", with:\
    \ replacement)\n                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = english.index(of: letter)\n\
    \        if index != nil {\n            let vowel = english[index! + 1]\n    \
    \        let replacement = english[index! - 1]\n            let replacementIndex\
    \ = english.index(of: replacement)\n            let replacementString = String(replacement)\n\
    \            if replacementIndex != nil {\n                result += String(letter)\n\
    \                result += String(replacementString)\n            } else {\n \
    \               result += String(letter)\n                result += String(vowel)\n\
    \            }\n        } else {\n            result += String(letter)\n     \
    \   }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpatx_5nju.swift:15:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmpatx_5nju.swift:17:25:\
    \ error: cannot find 'english' in scope\n            let vowel = english[index!\
    \ + 1]\n                        ^~~~~~~\n/tmp/tmpatx_5nju.swift:18:31: error:\
    \ cannot find 'english' in scope\n            let replacement = english[index!\
    \ - 1]\n                              ^~~~~~~\n/tmp/tmpatx_5nju.swift:19:36: error:\
    \ cannot find 'english' in scope\n            let replacementIndex = english.index(of:\
    \ replacement)\n                                   ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += String(letter).swapCase()\n        } else {\n            result\
    \ += letter\n        }\n    }\n    for letter in result {\n        if letter.isLetter()\
    \ {\n            if let vowelIndex = vowels.indexOf(letter) {\n              \
    \  let vowel = vowels[vowelIndex]\n                let vowelIndex = vowels.index(vowel,\
    \ offsetBy: 2)\n                let replacement = vowels[vowelIndex]\n       \
    \         result += replacement\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp065gwii0.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmp065gwii0.swift:16:38:\
    \ error: value of type 'String' has no member 'swapCase'\n            result +=\
    \ String(letter).swapCase()\n                      ~~~~~~~~~~~~~~ ^~~~~~~~\n/tmp/tmp065gwii0.swift:18:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmp065gwii0.swift:22:19:\
    \ error: cannot call value of non-function type 'Bool'\n        if letter.isLetter()\
    \ {\n                  ^       ~~\n                          \n/tmp/tmp065gwii0.swift:23:33:\
    \ error: cannot find 'vowels' in scope\n            if let vowelIndex = vowels.indexOf(letter)\
    \ {\n                                ^~~~~~\n/tmp/tmp065gwii0.swift:24:29: error:\
    \ cannot find 'vowels' in scope\n                let vowel = vowels[vowelIndex]\n\
    \                            ^~~~~~\n/tmp/tmp065gwii0.swift:25:34: error: cannot\
    \ find 'vowels' in scope\n                let vowelIndex = vowels.index(vowel,\
    \ offsetBy: 2)\n                                 ^~~~~~\n/tmp/tmp065gwii0.swift:26:35:\
    \ error: cannot find 'vowels' in scope\n                let replacement = vowels[vowelIndex]\n\
    \                                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += letter.lowercased()\n        } else {\n            result += letter.uppercased()\n\
    \        }\n    }\n    for vowel in \"AEIOUaeiou\" {\n        let index = result.index(of:\
    \ vowel)\n        if index != nil {\n            let replacement = result.index(before:\
    \ index!)\n            let replacementLetter = result.substring(from: replacement)\n\
    \            result += replacementLetter\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpn54moopi.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmpn54moopi.swift:22:28:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        let\
    \ index = result.index(of: vowel)\n                           ^\n/tmp/tmpn54moopi.swift:22:28:\
    \ note: use 'firstIndex(of:)' instead\n        let index = result.index(of: vowel)\n\
    \                           ^~~~~\n                           firstIndex\n/tmp/tmpn54moopi.swift:25:44:\
    \ error: value of type 'String' has no member 'substring'\n            let replacementLetter\
    \ = result.substring(from: replacement)\n                                    ~~~~~~\
    \ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += letter.lowercased()\n        } else {\n            result += letter.uppercased()\n\
    \        }\n    }\n    for letter in result {\n        if let index = english.index(of:\
    \ letter) {\n            let vowel = vowels[index]\n            let vowelIndex\
    \ = index - vowel.count + 1\n            result += vowel\n            if vowelIndex\
    \ < 2 {\n                result += vowel.lowercased()\n            } else {\n\
    \                result += vowel.uppercased()\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpgiewlbtf.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmpgiewlbtf.swift:22:24:\
    \ error: cannot find 'english' in scope\n        if let index = english.index(of:\
    \ letter) {\n                       ^~~~~~~\n/tmp/tmpgiewlbtf.swift:23:25: error:\
    \ cannot find 'vowels' in scope\n            let vowel = vowels[index]\n     \
    \                   ^~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)\n        let replacement = alphabet[index! + 1]\n        result += String(letter).replacingOccurrences(of:\
    \ \"a\", with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpvjk8y4xh.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)\n                    ^~~~~~~~\n\
    /tmp/tmpvjk8y4xh.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index! + 1]\n                          ^~~~~~~~\n\
    /tmp/tmpvjk8y4xh.swift:17:34: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \        result += String(letter).replacingOccurrences(of: \"a\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += letter.lowercased()\n        } else {\n            result += letter.uppercased()\n\
    \        }\n    }\n    for vowel in \"AEIOUaeiou\" {\n        let index = result.index(of:\
    \ vowel)\n        let replacement = result.index(index, offsetBy: 2)\n       \
    \ if replacement != nil {\n            result = result.replacingCharacters(in:\
    \ Range(uncheckedBounds: (lower: index, upper: replacement!)), with: vowel.lowercased())\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmprrgyrz73.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmprrgyrz73.swift:22:28:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        let\
    \ index = result.index(of: vowel)\n                           ^\n/tmp/tmprrgyrz73.swift:22:28:\
    \ note: use 'firstIndex(of:)' instead\n        let index = result.index(of: vowel)\n\
    \                           ^~~~~\n                           firstIndex\n/tmp/tmprrgyrz73.swift:23:40:\
    \ error: value of optional type 'String.Index?' must be unwrapped to a value of\
    \ type 'String.Index'\n        let replacement = result.index(index, offsetBy:\
    \ 2)\n                                       ^\n/tmp/tmprrgyrz73.swift:23:40:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        let replacement = result.index(index, offsetBy: 2)\n        \
    \                               ^\n                                          \
    \   ?? <#default value#>\n/tmp/tmprrgyrz73.swift:23:40: note: force-unwrap using\
    \ '!' to abort execution if the optional value contains 'nil'\n        let replacement\
    \ = result.index(index, offsetBy: 2)\n                                       ^\n\
    \                                            !\n/tmp/tmprrgyrz73.swift:25:29:\
    \ error: value of type 'String' has no member 'replacingCharacters'\n        \
    \    result = result.replacingCharacters(in: Range(uncheckedBounds: (lower: index,\
    \ upper: replacement!)), with: vowel.lowercased())\n                     ~~~~~~\
    \ ^~~~~~~~~~~~~~~~~~~\n/tmp/tmprrgyrz73.swift:25:76: error: tuple type '(lower:\
    \ String.Index?, upper: String.Index)' is not convertible to tuple type '(lower:\
    \ String.Index, upper: String.Index)'\n            result = result.replacingCharacters(in:\
    \ Range(uncheckedBounds: (lower: index, upper: replacement!)), with: vowel.lowercased())\n\
    \                                                                           ^\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result += \"A\"\n        case \"b\":\n            result +=\
    \ \"B\"\n        case \"c\":\n            result += \"C\"\n        case \"d\"\
    :\n            result += \"D\"\n        case \"e\":\n            result += \"\
    E\"\n        case \"f\":\n            result += \"F\"\n        case \"g\":\n \
    \           result += \"G\"\n        case \"h\":\n            result += \"H\"\n\
    \        case \"i\":\n            result += \"I\"\n        case \"j\":\n     \
    \       result += \"J\"\n        case \"k\":\n            result += \"K\"\n  \
    \      case \"l\":\n            result += \"L\"\n        case \"m\":\n       \
    \     result += \"M\"\n        case \"n\":\n            result += \"N\"\n    \
    \    case \"o\":\n            result += \"O\"\n        case \"p\":\n         \
    \   result += \"P\"\n        case \"q\":\n            result += \"Q\"\n      \
    \  case \"r\":\n            result += \"R\"\n        case \"s\":\n           \
    \ result += \"S\"\n        case \"t\":\n            result += \"T\"\n        case\
    \ \"u\":\n            result += \"U\"\n        case \"v\":\n            result\
    \ += \"V\"\n        case \"w\":\n            result += \"W\"\n        case \"\
    x\":\n            result += \"X\"\n        case \"y\":\n            result +=\
    \ \"Y\"\n        case \"z\":\n            result += \"Z\"\n        default:\n\
    \            result += letter\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpijzvts68.swift:69:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let replacement = alphabet[index + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ vowel, with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp8qiy7t7b.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmp8qiy7t7b.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index + 2]\n                          ^~~~~~~~\n\
    /tmp/tmp8qiy7t7b.swift:17:59: error: cannot find 'vowel' in scope\n        result\
    \ += String(letter).replacingOccurrences(of: vowel, with: replacement)\n     \
    \                                                     ^~~~~\n/tmp/tmp8qiy7t7b.swift:17:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: vowel, with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result += \"A\"\n        case \"b\":\n            result +=\
    \ \"B\"\n        case \"c\":\n            result += \"C\"\n        case \"d\"\
    :\n            result += \"D\"\n        case \"e\":\n            result += \"\
    E\"\n        case \"f\":\n            result += \"F\"\n        case \"g\":\n \
    \           result += \"G\"\n        case \"h\":\n            result += \"H\"\n\
    \        case \"i\":\n            result += \"I\"\n        case \"j\":\n     \
    \       result += \"J\"\n        case \"k\":\n            result += \"K\"\n  \
    \      case \"l\":\n            result += \"L\"\n        case \"m\":\n       \
    \     result += \"M\"\n        case \"n\":\n            result += \"N\"\n    \
    \    case \"o\":\n            result += \"O\"\n        case \"p\":\n         \
    \   result += \"P\"\n        case \"q\":\n            result += \"Q\"\n      \
    \  case \"r\":\n            result += \"R\"\n        case \"s\":\n           \
    \ result += \"S\"\n        case \"t\":\n            result += \"T\"\n        case\
    \ \"u\":\n            result += \"U\"\n        case \"v\":\n            result\
    \ += \"V\"\n        case \"w\":\n            result += \"W\"\n        case \"\
    x\":\n            result += \"X\"\n        case \"y\":\n            result +=\
    \ \"Y\"\n        case \"z\":\n            result += \"Z\"\n        default:\n\
    \            result += letter\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpijzvts68.swift:69:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)\n        let replacement = alphabet[index! + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ \"AEIOUaeiou\", with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpb83g5ns5.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)\n                    ^~~~~~~~\n\
    /tmp/tmpb83g5ns5.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index! + 2]\n                          ^~~~~~~~\n\
    /tmp/tmpb83g5ns5.swift:17:34: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \        result += String(letter).replacingOccurrences(of: \"AEIOUaeiou\", with:\
    \ replacement)\n                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += letter.lowercased()\n        } else {\n            result += letter.uppercased()\n\
    \        }\n    }\n    for letter in result {\n        if letter.isUpper() {\n\
    \            result += letter.lowercased()\n        } else {\n            result\
    \ += letter.uppercased()\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpn8aviskb.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmpn8aviskb.swift:22:19:\
    \ error: value of type 'Character' has no member 'isUpper'\n        if letter.isUpper()\
    \ {\n           ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let replacement = alphabet[index + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ \"A\", with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpmc5qoaid.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmpmc5qoaid.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index + 2]\n                          ^~~~~~~~\n\
    /tmp/tmpmc5qoaid.swift:17:34: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \        result += String(letter).replacingOccurrences(of: \"A\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result += \"A\"\n        case \"b\":\n            result +=\
    \ \"B\"\n        case \"c\":\n            result += \"C\"\n        case \"d\"\
    :\n            result += \"D\"\n        case \"e\":\n            result += \"\
    E\"\n        case \"f\":\n            result += \"F\"\n        case \"g\":\n \
    \           result += \"G\"\n        case \"h\":\n            result += \"H\"\n\
    \        case \"i\":\n            result += \"I\"\n        case \"j\":\n     \
    \       result += \"J\"\n        case \"k\":\n            result += \"K\"\n  \
    \      case \"l\":\n            result += \"L\"\n        case \"m\":\n       \
    \     result += \"M\"\n        case \"n\":\n            result += \"N\"\n    \
    \    case \"o\":\n            result += \"O\"\n        case \"p\":\n         \
    \   result += \"P\"\n        case \"q\":\n            result += \"Q\"\n      \
    \  case \"r\":\n            result += \"R\"\n        case \"s\":\n           \
    \ result += \"S\"\n        case \"t\":\n            result += \"T\"\n        case\
    \ \"u\":\n            result += \"U\"\n        case \"v\":\n            result\
    \ += \"V\"\n        case \"w\":\n            result += \"W\"\n        case \"\
    x\":\n            result += \"X\"\n        case \"y\":\n            result +=\
    \ \"Y\"\n        case \"z\":\n            result += \"Z\"\n        default:\n\
    \            result += letter\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpijzvts68.swift:69:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)\n        let replacement = alphabet[index! + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ vowel, with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpuzejo_f4.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)\n                    ^~~~~~~~\n\
    /tmp/tmpuzejo_f4.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index! + 2]\n                          ^~~~~~~~\n\
    /tmp/tmpuzejo_f4.swift:17:59: error: cannot find 'vowel' in scope\n        result\
    \ += String(letter).replacingOccurrences(of: vowel, with: replacement)\n     \
    \                                                     ^~~~~\n/tmp/tmpuzejo_f4.swift:17:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: vowel, with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result += \"A\"\n        case \"b\":\n            result +=\
    \ \"B\"\n        case \"c\":\n            result += \"C\"\n        case \"d\"\
    :\n            result += \"D\"\n        case \"e\":\n            result += \"\
    E\"\n        case \"f\":\n            result += \"F\"\n        case \"g\":\n \
    \           result += \"G\"\n        case \"h\":\n            result += \"H\"\n\
    \        case \"i\":\n            result += \"I\"\n        case \"j\":\n     \
    \       result += \"J\"\n        case \"k\":\n            result += \"K\"\n  \
    \      case \"l\":\n            result += \"L\"\n        case \"m\":\n       \
    \     result += \"M\"\n        case \"n\":\n            result += \"N\"\n    \
    \    case \"o\":\n            result += \"O\"\n        case \"p\":\n         \
    \   result += \"P\"\n        case \"q\":\n            result += \"Q\"\n      \
    \  case \"r\":\n            result += \"R\"\n        case \"s\":\n           \
    \ result += \"S\"\n        case \"t\":\n            result += \"T\"\n        case\
    \ \"u\":\n            result += \"U\"\n        case \"v\":\n            result\
    \ += \"V\"\n        case \"w\":\n            result += \"W\"\n        case \"\
    x\":\n            result += \"X\"\n        case \"y\":\n            result +=\
    \ \"Y\"\n        case \"z\":\n            result += \"Z\"\n        default:\n\
    \            result += letter\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpijzvts68.swift:69:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += letter.lowercased()\n        } else {\n            result += letter.uppercased()\n\
    \        }\n    }\n    for letter in result {\n        if letter.isUpper() {\n\
    \            result += letter.lowercased()\n        } else {\n            result\
    \ += letter.uppercased()\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpn8aviskb.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmpn8aviskb.swift:22:19:\
    \ error: value of type 'Character' has no member 'isUpper'\n        if letter.isUpper()\
    \ {\n           ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)\n        let replacement = alphabet[index! + 1]\n        result += String(letter).replacingOccurrences(of:\
    \ replacement, with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpikmi7nvb.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)\n                    ^~~~~~~~\n\
    /tmp/tmpikmi7nvb.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index! + 1]\n                          ^~~~~~~~\n\
    /tmp/tmpikmi7nvb.swift:17:34: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \        result += String(letter).replacingOccurrences(of: replacement, with:\
    \ replacement)\n                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = english.index(of: letter)\n\
    \        let replacement = english[index! + 2]\n        result += String(letter).uppercased()\
    \ + replacement\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpthus5zwc.swift:15:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmpthus5zwc.swift:16:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!\
    \ + 2]\n                          ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result += \"A\"\n        case \"b\":\n            result +=\
    \ \"B\"\n        case \"c\":\n            result += \"C\"\n        case \"d\"\
    :\n            result += \"D\"\n        case \"e\":\n            result += \"\
    E\"\n        case \"f\":\n            result += \"F\"\n        case \"g\":\n \
    \           result += \"G\"\n        case \"h\":\n            result += \"H\"\n\
    \        case \"i\":\n            result += \"I\"\n        case \"j\":\n     \
    \       result += \"J\"\n        case \"k\":\n            result += \"K\"\n  \
    \      case \"l\":\n            result += \"L\"\n        case \"m\":\n       \
    \     result += \"M\"\n        case \"n\":\n            result += \"N\"\n    \
    \    case \"o\":\n            result += \"O\"\n        case \"p\":\n         \
    \   result += \"P\"\n        case \"q\":\n            result += \"Q\"\n      \
    \  case \"r\":\n            result += \"R\"\n        case \"s\":\n           \
    \ result += \"S\"\n        case \"t\":\n            result += \"T\"\n        case\
    \ \"u\":\n            result += \"U\"\n        case \"v\":\n            result\
    \ += \"V\"\n        case \"w\":\n            result += \"W\"\n        case \"\
    x\":\n            result += \"X\"\n        case \"y\":\n            result +=\
    \ \"Y\"\n        case \"z\":\n            result += \"Z\"\n        default:\n\
    \            result += letter\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpijzvts68.swift:69:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result += \"A\"\n        case \"b\":\n            result +=\
    \ \"B\"\n        case \"c\":\n            result += \"C\"\n        case \"d\"\
    :\n            result += \"D\"\n        case \"e\":\n            result += \"\
    E\"\n        case \"f\":\n            result += \"F\"\n        case \"g\":\n \
    \           result += \"G\"\n        case \"h\":\n            result += \"H\"\n\
    \        case \"i\":\n            result += \"I\"\n        case \"j\":\n     \
    \       result += \"J\"\n        case \"k\":\n            result += \"K\"\n  \
    \      case \"l\":\n            result += \"L\"\n        case \"m\":\n       \
    \     result += \"M\"\n        case \"n\":\n            result += \"N\"\n    \
    \    case \"o\":\n            result += \"O\"\n        case \"p\":\n         \
    \   result += \"P\"\n        case \"q\":\n            result += \"Q\"\n      \
    \  case \"r\":\n            result += \"R\"\n        case \"s\":\n           \
    \ result += \"S\"\n        case \"t\":\n            result += \"T\"\n        case\
    \ \"u\":\n            result += \"U\"\n        case \"v\":\n            result\
    \ += \"V\"\n        case \"w\":\n            result += \"W\"\n        case \"\
    x\":\n            result += \"X\"\n        case \"y\":\n            result +=\
    \ \"Y\"\n        case \"z\":\n            result += \"Z\"\n        default:\n\
    \            result += letter\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpijzvts68.swift:69:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let nextIndex = alphabet.index(of: letter, offsetBy: 2)!\n\
    \        let replacement = alphabet[nextIndex]\n        result += alphabet[alphabet.index(of:\
    \ replacement)!]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpn4zzr0ji.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmpn4zzr0ji.swift:16:25: error: cannot find 'alphabet' in scope\n       \
    \ let nextIndex = alphabet.index(of: letter, offsetBy: 2)!\n                 \
    \       ^~~~~~~~\n/tmp/tmpn4zzr0ji.swift:17:27: error: cannot find 'alphabet'\
    \ in scope\n        let replacement = alphabet[nextIndex]\n                  \
    \        ^~~~~~~~\n/tmp/tmpn4zzr0ji.swift:18:19: error: cannot find 'alphabet'\
    \ in scope\n        result += alphabet[alphabet.index(of: replacement)!]\n   \
    \               ^~~~~~~~\n/tmp/tmpn4zzr0ji.swift:18:28: error: cannot find 'alphabet'\
    \ in scope\n        result += alphabet[alphabet.index(of: replacement)!]\n   \
    \                        ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result += \"A\"\n        case \"b\":\n            result +=\
    \ \"B\"\n        case \"c\":\n            result += \"C\"\n        case \"d\"\
    :\n            result += \"D\"\n        case \"e\":\n            result += \"\
    E\"\n        case \"f\":\n            result += \"F\"\n        case \"g\":\n \
    \           result += \"G\"\n        case \"h\":\n            result += \"H\"\n\
    \        case \"i\":\n            result += \"I\"\n        case \"j\":\n     \
    \       result += \"J\"\n        case \"k\":\n            result += \"K\"\n  \
    \      case \"l\":\n            result += \"L\"\n        case \"m\":\n       \
    \     result += \"M\"\n        case \"n\":\n            result += \"N\"\n    \
    \    case \"o\":\n            result += \"O\"\n        case \"p\":\n         \
    \   result += \"P\"\n        case \"q\":\n            result += \"Q\"\n      \
    \  case \"r\":\n            result += \"R\"\n        case \"s\":\n           \
    \ result += \"S\"\n        case \"t\":\n            result += \"T\"\n        case\
    \ \"u\":\n            result += \"U\"\n        case \"v\":\n            result\
    \ += \"V\"\n        case \"w\":\n            result += \"W\"\n        case \"\
    x\":\n            result += \"X\"\n        case \"y\":\n            result +=\
    \ \"Y\"\n        case \"z\":\n            result += \"Z\"\n        default:\n\
    \            result += letter\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpijzvts68.swift:69:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)\n        let replacement = alphabet[alphabet.index(of: alphabet[index!],\
    \ offsetBy: 2)]\n        result += String(letter).replacingOccurrences(of: letter,\
    \ with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp0uv2nvc0.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)\n                    ^~~~~~~~\n\
    /tmp/tmp0uv2nvc0.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[alphabet.index(of: alphabet[index!], offsetBy: 2)]\n\
    \                          ^~~~~~~~\n/tmp/tmp0uv2nvc0.swift:16:36: error: cannot\
    \ find 'alphabet' in scope\n        let replacement = alphabet[alphabet.index(of:\
    \ alphabet[index!], offsetBy: 2)]\n                                   ^~~~~~~~\n\
    /tmp/tmp0uv2nvc0.swift:16:55: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[alphabet.index(of: alphabet[index!], offsetBy: 2)]\n\
    \                                                      ^~~~~~~~\n/tmp/tmp0uv2nvc0.swift:17:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: letter, with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)\n        let replacement = alphabet[index! + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ \"A\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"E\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"I\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"O\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"U\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"a\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"e\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"i\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"o\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"u\", with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp76__549f.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)\n                    ^~~~~~~~\n\
    /tmp/tmp76__549f.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index! + 2]\n                          ^~~~~~~~\n\
    /tmp/tmp76__549f.swift:17:34: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \        result += String(letter).replacingOccurrences(of: \"A\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp76__549f.swift:18:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"E\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp76__549f.swift:19:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"I\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp76__549f.swift:20:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"O\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp76__549f.swift:21:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"U\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp76__549f.swift:22:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"a\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp76__549f.swift:23:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"e\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp76__549f.swift:24:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let replacement = alphabet[(index + 1)..<alphabet.count]\n\
    \        result += String(replacement)\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpb1np4moi.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmpb1np4moi.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[(index + 1)..<alphabet.count]\n                 \
    \         ^~~~~~~~\n/tmp/tmpb1np4moi.swift:16:50: error: cannot find 'alphabet'\
    \ in scope\n        let replacement = alphabet[(index + 1)..<alphabet.count]\n\
    \                                                 ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result += \"A\"\n        case \"e\":\n            result +=\
    \ \"E\"\n        case \"i\":\n            result += \"I\"\n        case \"o\"\
    :\n            result += \"O\"\n        case \"u\":\n            result += \"\
    U\"\n        case \"A\":\n            result += \"a\"\n        case \"E\":\n \
    \           result += \"e\"\n        case \"I\":\n            result += \"i\"\n\
    \        case \"O\":\n            result += \"o\"\n        case \"U\":\n     \
    \       result += \"u\"\n        default:\n            result += letter\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpb_1vr8dk.swift:37:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)\n        let nextIndex = alphabet.index(of: letter, offsetBy: index\
    \ + 1)\n        if nextIndex == nil {\n            result += letter\n        }\
    \ else {\n            result += alphabet[nextIndex!]\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp7ycotq2u.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)\n                    ^~~~~~~~\n\
    /tmp/tmp7ycotq2u.swift:16:25: error: cannot find 'alphabet' in scope\n       \
    \ let nextIndex = alphabet.index(of: letter, offsetBy: index + 1)\n          \
    \              ^~~~~~~~\n/tmp/tmp7ycotq2u.swift:18:23: error: cannot convert value\
    \ of type 'Character' to expected argument type 'String'\n            result +=\
    \ letter\n                      ^\n/tmp/tmp7ycotq2u.swift:20:23: error: cannot\
    \ find 'alphabet' in scope\n            result += alphabet[nextIndex!]\n     \
    \                 ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let replacement = alphabet[index + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ \"A\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"E\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"I\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"O\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"U\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"Y\", with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp8dg237sf.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmp8dg237sf.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index + 2]\n                          ^~~~~~~~\n\
    /tmp/tmp8dg237sf.swift:17:34: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \        result += String(letter).replacingOccurrences(of: \"A\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8dg237sf.swift:18:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"E\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8dg237sf.swift:19:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"I\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8dg237sf.swift:20:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"O\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8dg237sf.swift:21:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"U\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8dg237sf.swift:22:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"Y\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let nextLetter = alphabet[index + 1]\n        let replacement\
    \ = alphabet.index(of: nextLetter)!\n        result += alphabet[replacement]\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpl4wdup9g.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmpl4wdup9g.swift:16:26: error: cannot find 'alphabet' in scope\n       \
    \ let nextLetter = alphabet[index + 1]\n                         ^~~~~~~~\n/tmp/tmpl4wdup9g.swift:17:27:\
    \ error: cannot find 'alphabet' in scope\n        let replacement = alphabet.index(of:\
    \ nextLetter)!\n                          ^~~~~~~~\n/tmp/tmpl4wdup9g.swift:18:19:\
    \ error: cannot find 'alphabet' in scope\n        result += alphabet[replacement]\n\
    \                  ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = english.index(of: letter)\n\
    \        let replacement = english[index!.advanced(by: 2)!]\n        result +=\
    \ String(letter).replacingOccurrences(of: \"A\", with: replacement)\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp8rs51czn.swift:15:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmp8rs51czn.swift:16:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!.advanced(by:\
    \ 2)!]\n                          ^~~~~~~\n/tmp/tmp8rs51czn.swift:17:34: error:\
    \ value of type 'String' has no member 'replacingOccurrences'\n        result\
    \ += String(letter).replacingOccurrences(of: \"A\", with: replacement)\n     \
    \             ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result += \"A\"\n        case \"b\":\n            result +=\
    \ \"B\"\n        case \"c\":\n            result += \"C\"\n        case \"d\"\
    :\n            result += \"D\"\n        case \"e\":\n            result += \"\
    E\"\n        case \"f\":\n            result += \"F\"\n        case \"g\":\n \
    \           result += \"G\"\n        case \"h\":\n            result += \"H\"\n\
    \        case \"i\":\n            result += \"I\"\n        case \"j\":\n     \
    \       result += \"J\"\n        case \"k\":\n            result += \"K\"\n  \
    \      case \"l\":\n            result += \"L\"\n        case \"m\":\n       \
    \     result += \"M\"\n        case \"n\":\n            result += \"N\"\n    \
    \    case \"o\":\n            result += \"O\"\n        case \"p\":\n         \
    \   result += \"P\"\n        case \"q\":\n            result += \"Q\"\n      \
    \  case \"r\":\n            result += \"R\"\n        case \"s\":\n           \
    \ result += \"S\"\n        case \"t\":\n            result += \"T\"\n        case\
    \ \"u\":\n            result += \"U\"\n        case \"v\":\n            result\
    \ += \"V\"\n        case \"w\":\n            result += \"W\"\n        case \"\
    x\":\n            result += \"X\"\n        case \"y\":\n            result +=\
    \ \"Y\"\n        case \"z\":\n            result += \"Z\"\n        case \"A\"\
    :\n            result += \"a\"\n        case \"B\":\n            result += \"\
    b\"\n        case \"C\":\n            result += \"c\"\n        case \"D\":\n \
    \           result += \"d\"\n        case \"E\":\n            result += \"e\"\n\
    \        case \"F\":\n            result += \"f\"\n        case \"G\":\n     \
    \       result += \"g\"\n        case \"H\":\n            result += \"h\"\n  \
    \      case \"I\":\n            result += \"i\"\n        case \"J\":\n       \
    \     result += \"j\"\n        case \"K\":\n            result += \"k\"\n    \
    \    case \"L\":\n            result += \"l\"\n        case \"M\":\n         \
    \   result += \"m\"\n        case \"N\":\n            result += \"n\"\n      \
    \  case \"O\":\n            result += \"o\"\n        case \"P\":\n           \
    \ result += \"p\"\n        case \"Q\":\n            result += \"q\"\n        case\
    \ \"R\":\n            result += \"r\"\n        case \"S\":\n            result\
    \ += \"s\"\n        case \"T\":\n            result += \"t\"\n        case \"\
    U\":\n            \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpcm61vkcn.swift:108:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"U\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmpcm61vkcn.swift:129:84: error: expected '}' at\
    \ end of brace statement\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\")\n                                        \
    \                                           ^\n/tmp/tmpcm61vkcn.swift:14:27: note:\
    \ to match this opening '{'\n    for letter in message {\n                   \
    \       ^\n/tmp/tmpcm61vkcn.swift:129:84: error: expected '}' at end of brace\
    \ statement\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\")\n                                                    \
    \                               ^\n/tmp/tmpcm61vkcn.swift:12:40: note: to match\
    \ this opening '{'\nfunc encode(message: String) -> String {\n               \
    \                        ^\n/tmp/tmpcm61vkcn.swift:15:9: error: switch must be\
    \ exhaustive\n        switch letter {\n        ^\n/tmp/tmpcm61vkcn.swift:15:9:\
    \ note: do you want to add a default clause?\n        switch letter {\n      \
    \  ^\n/tmp/tmpcm61vkcn.swift:113:6: error: operator functions can only be declared\
    \ at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for char in message {\n        switch char {\n        case \"a\"\
    :\n        case \"e\":\n        case \"i\":\n        case \"o\":\n        case\
    \ \"u\":\n            result += char\n        default:\n            result +=\
    \ char.swapCase()\n        }\n    }\n    for char in result {\n        switch\
    \ char {\n        case \"A\":\n        case \"E\":\n        case \"I\":\n    \
    \    case \"O\":\n        case \"U\":\n            result += char\n        default:\n\
    \            result += char.swapCase()\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpzm9jpb27.swift:16:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmpzm9jpb27.swift:17:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmpzm9jpb27.swift:18:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpzm9jpb27.swift:19:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpzm9jpb27.swift:28:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"A\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpzm9jpb27.swift:29:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"E\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpzm9jpb27.swift:30:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"I\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpzm9jpb27.swift:31:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"O\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpzm9jpb27.swift:21:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += char\n                      ^\n/tmp/tmpzm9jpb27.swift:23:28:\
    \ error: value of type 'Character' has no member 'swapCase'\n            result\
    \ += char.swapCase()\n                      ~~~~ ^~~~~~~~\n/tmp/tmpzm9jpb27.swift:33:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += char\n                      ^\n/tmp/tmpzm9jpb27.swift:35:28:\
    \ error: value of type 'Character' has no member 'swapCase'\n            result\
    \ += char.swapCase()\n                      ~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n        case \"e\":\n        case \"i\":\n        case \"o\":\n        case\
    \ \"u\":\n            result += letter\n        default:\n            result +=\
    \ String(letter).swapcase()\n        }\n    }\n    for vowel in \"aeiou\" {\n\
    \        result += String(vowel).swapcase()\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpto82fyqp.swift:16:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmpto82fyqp.swift:17:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmpto82fyqp.swift:18:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpto82fyqp.swift:19:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpto82fyqp.swift:21:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmpto82fyqp.swift:23:38:\
    \ error: value of type 'String' has no member 'swapcase'\n            result +=\
    \ String(letter).swapcase()\n                      ~~~~~~~~~~~~~~ ^~~~~~~~\n/tmp/tmpto82fyqp.swift:27:33:\
    \ error: value of type 'String' has no member 'swapcase'\n        result += String(vowel).swapcase()\n\
    \                  ~~~~~~~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = english.index(of: letter)\n\
    \        let replacement = english[index! + 2]\n        result += String(letter).uppercased()\
    \ + replacement\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpthus5zwc.swift:15:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmpthus5zwc.swift:16:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!\
    \ + 2]\n                          ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let nextLetter = alphabet[index + 1]\n        if letter !=\
    \ nextLetter {\n            result += nextLetter\n        } else {\n         \
    \   result += letter\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpx4zbu0lx.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmpx4zbu0lx.swift:16:26: error: cannot find 'alphabet' in scope\n       \
    \ let nextLetter = alphabet[index + 1]\n                         ^~~~~~~~\n/tmp/tmpx4zbu0lx.swift:20:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = english.index(of: letter)\n\
    \        let replacement = english[index! + 2]\n        result += english[index!]\
    \ + replacement\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpfrjk18mk.swift:15:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmpfrjk18mk.swift:16:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!\
    \ + 2]\n                          ^~~~~~~\n/tmp/tmpfrjk18mk.swift:17:19: error:\
    \ cannot find 'english' in scope\n        result += english[index!] + replacement\n\
    \                  ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let replacement = alphabet[(index + 1) % alphabet.count]\n\
    \        result += String(letter).replacingOccurrences(of: letter, with: replacement)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp5acyu_by.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmp5acyu_by.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[(index + 1) % alphabet.count]\n                 \
    \         ^~~~~~~~\n/tmp/tmp5acyu_by.swift:16:50: error: cannot find 'alphabet'\
    \ in scope\n        let replacement = alphabet[(index + 1) % alphabet.count]\n\
    \                                                 ^~~~~~~~\n/tmp/tmp5acyu_by.swift:17:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: letter, with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let replacement = alphabet[index + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ \"A\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"E\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"I\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"O\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"U\", with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp2y2rmi4n.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmp2y2rmi4n.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index + 2]\n                          ^~~~~~~~\n\
    /tmp/tmp2y2rmi4n.swift:17:34: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \        result += String(letter).replacingOccurrences(of: \"A\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2y2rmi4n.swift:18:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"E\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2y2rmi4n.swift:19:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"I\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2y2rmi4n.swift:20:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"O\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2y2rmi4n.swift:21:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"U\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = english.index(of: letter)\n\
    \        let vowelIndex = index(of: \"a\")!\n        let vowel = english[vowelIndex]\n\
    \        let vowelIndex = index(of: vowel)!\n        let vowel2 = english[vowelIndex\
    \ + 2]\n        let replacement = String(letter).uppercased().replacingOccurrences(of:\
    \ vowel, with: vowel2)\n        result += replacement\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp2m2u7fem.swift:15:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmp2m2u7fem.swift:17:21:\
    \ error: cannot find 'english' in scope\n        let vowel = english[vowelIndex]\n\
    \                    ^~~~~~~\n/tmp/tmp2m2u7fem.swift:19:22: error: cannot find\
    \ 'english' in scope\n        let vowel2 = english[vowelIndex + 2]\n         \
    \            ^~~~~~~\n/tmp/tmp2m2u7fem.swift:20:55: error: value of type 'String'\
    \ has no member 'replacingOccurrences'\n        let replacement = String(letter).uppercased().replacingOccurrences(of:\
    \ vowel, with: vowel2)\n                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)\n        let replacement = alphabet[(index! + 2) % alphabet.count]\n\
    \        result += String(letter).replacingOccurrences(of: letter, with: replacement)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpw5mlt2m8.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)\n                    ^~~~~~~~\n\
    /tmp/tmpw5mlt2m8.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[(index! + 2) % alphabet.count]\n                \
    \          ^~~~~~~~\n/tmp/tmpw5mlt2m8.swift:16:51: error: cannot find 'alphabet'\
    \ in scope\n        let replacement = alphabet[(index! + 2) % alphabet.count]\n\
    \                                                  ^~~~~~~~\n/tmp/tmpw5mlt2m8.swift:17:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: letter, with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let replacement = alphabet[index + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ \"A\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"E\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"I\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"O\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"U\", with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp2y2rmi4n.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmp2y2rmi4n.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index + 2]\n                          ^~~~~~~~\n\
    /tmp/tmp2y2rmi4n.swift:17:34: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \        result += String(letter).replacingOccurrences(of: \"A\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2y2rmi4n.swift:18:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"E\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2y2rmi4n.swift:19:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"I\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2y2rmi4n.swift:20:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"O\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2y2rmi4n.swift:21:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"U\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = english.index(of: letter)\n\
    \        if index != nil {\n            let twoLettersAhead = english.index(of:\
    \ letter, offsetBy: index! + 1)\n            let replacement = english[index!\
    \ + 1]\n            let replacementIndex = twoLettersAhead == nil ? 0 : twoLettersAhead!\n\
    \            let replacementLetter = english[replacementIndex]\n            result\
    \ = result + String(letter).replacingOccurrences(of: replacement, with: replacementLetter)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpq4w_qs2c.swift:15:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmpq4w_qs2c.swift:17:35:\
    \ error: cannot find 'english' in scope\n            let twoLettersAhead = english.index(of:\
    \ letter, offsetBy: index! + 1)\n                                  ^~~~~~~\n/tmp/tmpq4w_qs2c.swift:18:31:\
    \ error: cannot find 'english' in scope\n            let replacement = english[index!\
    \ + 1]\n                              ^~~~~~~\n/tmp/tmpq4w_qs2c.swift:20:37: error:\
    \ cannot find 'english' in scope\n            let replacementLetter = english[replacementIndex]\n\
    \                                    ^~~~~~~\n/tmp/tmpq4w_qs2c.swift:21:46: error:\
    \ value of type 'String' has no member 'replacingOccurrences'\n            result\
    \ = result + String(letter).replacingOccurrences(of: replacement, with: replacementLetter)\n\
    \                              ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += String(letter).swapCase()\n        } else {\n            result\
    \ += letter\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpb8lcw8nf.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmpb8lcw8nf.swift:16:38:\
    \ error: value of type 'String' has no member 'swapCase'\n            result +=\
    \ String(letter).swapCase()\n                      ~~~~~~~~~~~~~~ ^~~~~~~~\n/tmp/tmpb8lcw8nf.swift:18:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = english.index(of: letter)\n\
    \        let replacement = english[english.index(of: letter, offsetBy: index)]\n\
    \        result += String(letter).replacingOccurrences(of: letter, with: replacement)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpwu9vnxiq.swift:15:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmpwu9vnxiq.swift:16:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[english.index(of:\
    \ letter, offsetBy: index)]\n                          ^~~~~~~\n/tmp/tmpwu9vnxiq.swift:16:35:\
    \ error: cannot find 'english' in scope\n        let replacement = english[english.index(of:\
    \ letter, offsetBy: index)]\n                                  ^~~~~~~\n/tmp/tmpwu9vnxiq.swift:17:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: letter, with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = english.index(of: letter)\n\
    \        let replacement = english[index! + 2]\n        result += String(letter).uppercased()\
    \ + replacement\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpthus5zwc.swift:15:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmpthus5zwc.swift:16:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!\
    \ + 2]\n                          ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n        case \"e\":\n        case \"i\":\n        case \"o\":\n        case\
    \ \"u\":\n        case \"A\":\n        case \"E\":\n        case \"I\":\n    \
    \    case \"O\":\n        case \"U\":\n            result += letter\n        default:\n\
    \            result += letter.lowercased()\n        }\n    }\n    for vowel in\
    \ \"aeiouAEIOU\" {\n        let index = result.index(of: vowel)\n        if index\
    \ != nil {\n            let nextIndex = index! + 1\n            let nextLetter\
    \ = result[index!]\n            let nextLetterIndex = result.index(of: nextLetter)\n\
    \            if nextLetterIndex != nil {\n                let nextVowelIndex =\
    \ nextLetterIndex! + 1\n                let nextVowel = result[nextLetterIndex!]\n\
    \                let nextVowelIndex = result.index(of: nextVowel)\n          \
    \      if nextVowelIndex != nil {\n                    let nextVowelIndex = nextVowelIndex!\
    \ + 1\n                    let nextVowel = result[nextVowelIndex!]\n         \
    \           let nextVowelIndex = result.index(of: nextVowel)\n               \
    \     if nextVowelIndex != nil {\n                        let nextVowelIndex =\
    \ nextVowelIndex! + 1\n                        let nextVowel = result[nextVowelIndex!]\n\
    \                        let nextVowelIndex = result.index(of: nextVowel)\n  \
    \                      if nextVowelIndex != nil {\n                          \
    \  let nextVowelIndex = nextVowelIndex! + 1\n                            let nextVowel\
    \ = result[nextVowelIndex!]\n                            let nextVowelIndex =\
    \ result.index(of: nextVowel)\n                            if nextVowelIndex !=\
    \ nil {\n                                let nextVowelIndex = nextVowelIndex!\
    \ + 1\n                                let nextVowel = result[nextVowelIndex!]\n\
    \                                let nextVowelIndex = result.index(of: nextVowel)\n\
    \                                if nextVowelIndex != nil {\n                \
    \                    let nextVowelIndex = nextVowelIndex! + 1\n              \
    \                      let nextVowel = result[nextVowelIndex!]\n             \
    \                       let nextVowelIndex = result.index(of: nextVowel)\n   \
    \                                 if nextVowelIndex != nil {\n               \
    \                         let nextVowelIndex = nextVowelIndex! + 1\n         \
    \                               let nextVowel = result[nextVowelIndex!]\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpdxj8t1r8.swift:16:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmpdxj8t1r8.swift:17:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmpdxj8t1r8.swift:18:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpdxj8t1r8.swift:19:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpdxj8t1r8.swift:20:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"u\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpdxj8t1r8.swift:21:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"A\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpdxj8t1r8.swift:22:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"E\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpdxj8t1r8.swift:23:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"I\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpdxj8t1r8.swift:24:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"O\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpdxj8t1r8.swift:83:84:\
    \ error: expected '}' at end of brace statement\nassert(encode(message: \"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\n                  \
    \                                                                 ^\n/tmp/tmpdxj8t1r8.swift:57:58:\
    \ note: to match this opening '{'\n                                if nextVowelIndex\
    \ != nil {\n                                                         ^\n/tmp/tmpdxj8t1r8.swift:83:84:\
    \ error: expected '}' at end of brace statement\nassert(encode(message: \"I DoNt\
    \ KnOw WhAt tO "
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result += \"A\"\n        case \"b\":\n            result +=\
    \ \"B\"\n        case \"c\":\n            result += \"C\"\n        case \"d\"\
    :\n            result += \"D\"\n        case \"e\":\n            result += \"\
    E\"\n        case \"f\":\n            result += \"F\"\n        case \"g\":\n \
    \           result += \"G\"\n        case \"h\":\n            result += \"H\"\n\
    \        case \"i\":\n            result += \"I\"\n        case \"j\":\n     \
    \       result += \"J\"\n        case \"k\":\n            result += \"K\"\n  \
    \      case \"l\":\n            result += \"L\"\n        case \"m\":\n       \
    \     result += \"M\"\n        case \"n\":\n            result += \"N\"\n    \
    \    case \"o\":\n            result += \"O\"\n        case \"p\":\n         \
    \   result += \"P\"\n        case \"q\":\n            result += \"Q\"\n      \
    \  case \"r\":\n            result += \"R\"\n        case \"s\":\n           \
    \ result += \"S\"\n        case \"t\":\n            result += \"T\"\n        case\
    \ \"u\":\n            result += \"U\"\n        case \"v\":\n            result\
    \ += \"V\"\n        case \"w\":\n            result += \"W\"\n        case \"\
    x\":\n            result += \"X\"\n        case \"y\":\n            result +=\
    \ \"Y\"\n        case \"z\":\n            result += \"Z\"\n        default:\n\
    \            result += letter\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpijzvts68.swift:69:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let replacement = alphabet[(index + 2)%26]\n        result\
    \ += String(letter).replacingOccurrences(of: letter, with: replacement)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp8w89f723.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmp8w89f723.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[(index + 2)%26]\n                          ^~~~~~~~\n\
    /tmp/tmp8w89f723.swift:17:34: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \        result += String(letter).replacingOccurrences(of: letter, with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += String(letter).swapCase()\n        } else {\n            result\
    \ += String(letter)\n        }\n    }\n    for vowel in \"AEIOUaeiou\" {\n   \
    \     let index = message.index(of: vowel)\n        let nextIndex = message.index(of:\
    \ vowel, offsetBy: index + 1)\n        if index != nil && nextIndex != nil {\n\
    \            let replacement = String(message[index! + 1]).swapCase()\n      \
    \      result += String(message[index!]).replacingOccurrences(of: vowel, with:\
    \ replacement)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpf351u96h.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmpf351u96h.swift:16:38:\
    \ error: value of type 'String' has no member 'swapCase'\n            result +=\
    \ String(letter).swapCase()\n                      ~~~~~~~~~~~~~~ ^~~~~~~~\n/tmp/tmpf351u96h.swift:22:29:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        let\
    \ index = message.index(of: vowel)\n                            ^\n/tmp/tmpf351u96h.swift:22:29:\
    \ note: use 'firstIndex(of:)' instead\n        let index = message.index(of: vowel)\n\
    \                            ^~~~~\n                            firstIndex\n/tmp/tmpf351u96h.swift:23:60:\
    \ error: cannot convert value of type 'String.Index?' to expected argument type\
    \ 'Int'\n        let nextIndex = message.index(of: vowel, offsetBy: index + 1)\n\
    \                                                           ^\n/tmp/tmpf351u96h.swift:23:33:\
    \ error: no exact matches in call to instance method 'index'\n        let nextIndex\
    \ = message.index(of: vowel, offsetBy: index + 1)\n                          \
    \      ^\n/tmp/tmpf351u96h.swift:23:33: note: candidate has partially matching\
    \ parameter list (String.Index, offsetBy: Int)\n        let nextIndex = message.index(of:\
    \ vowel, offsetBy: index + 1)\n                                ^\n/tmp/tmpf351u96h.swift:23:33:\
    \ note: candidate has partially matching parameter list (String.Index, offsetBy:\
    \ Int)\n        let nextIndex = message.index(of: vowel, offsetBy: index + 1)\n\
    \                                ^\n/tmp/tmpf351u96h.swift:23:33: note: candidate\
    \ has partially matching parameter list (of: String.Element)\n        let nextIndex\
    \ = message.index(of: vowel, offsetBy: index + 1)\n                          \
    \      ^\n/tmp/tmpf351u96h.swift:23:33: note: candidate has partially matching\
    \ parameter list (String.Index, offsetBy: Int)\n        let nextIndex = message.index(of:\
    \ vowel, offsetBy: index + 1)\n                                ^\n/tmp/tmpf351u96h.swift:25:51:\
    \ error: cannot convert value of type 'Str"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let replacement = alphabet[(index + 1) % alphabet.count]\n\
    \        result += replacement\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp7qphd0ll.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmp7qphd0ll.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[(index + 1) % alphabet.count]\n                 \
    \         ^~~~~~~~\n/tmp/tmp7qphd0ll.swift:16:50: error: cannot find 'alphabet'\
    \ in scope\n        let replacement = alphabet[(index + 1) % alphabet.count]\n\
    \                                                 ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)\n        let replacement = alphabet[index! + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ \"A\", with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpavu74_ts.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)\n                    ^~~~~~~~\n\
    /tmp/tmpavu74_ts.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index! + 2]\n                          ^~~~~~~~\n\
    /tmp/tmpavu74_ts.swift:17:34: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \        result += String(letter).replacingOccurrences(of: \"A\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = english.index(of: letter)\n\
    \        let replacement = english[index!.advanced(by: 2)!]\n        result +=\
    \ replacement\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpwg18874u.swift:15:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmpwg18874u.swift:16:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!.advanced(by:\
    \ 2)!]\n                          ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result += \"A\"\n        case \"b\":\n            result +=\
    \ \"B\"\n        case \"c\":\n            result += \"C\"\n        case \"d\"\
    :\n            result += \"D\"\n        case \"e\":\n            result += \"\
    E\"\n        case \"f\":\n            result += \"F\"\n        case \"g\":\n \
    \           result += \"G\"\n        case \"h\":\n            result += \"H\"\n\
    \        case \"i\":\n            result += \"I\"\n        case \"j\":\n     \
    \       result += \"J\"\n        case \"k\":\n            result += \"K\"\n  \
    \      case \"l\":\n            result += \"L\"\n        case \"m\":\n       \
    \     result += \"M\"\n        case \"n\":\n            result += \"N\"\n    \
    \    case \"o\":\n            result += \"O\"\n        case \"p\":\n         \
    \   result += \"P\"\n        case \"q\":\n            result += \"Q\"\n      \
    \  case \"r\":\n            result += \"R\"\n        case \"s\":\n           \
    \ result += \"S\"\n        case \"t\":\n            result += \"T\"\n        case\
    \ \"u\":\n            result += \"U\"\n        case \"v\":\n            result\
    \ += \"V\"\n        case \"w\":\n            result += \"W\"\n        case \"\
    x\":\n            result += \"X\"\n        case \"y\":\n            result +=\
    \ \"Y\"\n        case \"z\":\n            result += \"Z\"\n        case \"A\"\
    :\n            result += \"a\"\n        case \"B\":\n            result += \"\
    b\"\n        case \"C\":\n            result += \"c\"\n        case \"D\":\n \
    \           result += \"d\"\n        case \"E\":\n            result += \"e\"\n\
    \        case \"F\":\n            result += \"f\"\n        case \"G\":\n     \
    \       result += \"g\"\n        case \"H\":\n            result += \"h\"\n  \
    \      case \"I\":\n            result += \"i\"\n        case \"J\":\n       \
    \     result += \"j\"\n        case \"K\":\n            result += \"k\"\n    \
    \    case \"L\":\n            result += \"l\"\n        case \"M\":\n         \
    \   result += \"m\"\n        case \"N\":\n            result += \"n\"\n      \
    \  case \"O\":\n            result += \"o\"\n        case \"P\":\n           \
    \ result += \"p\"\n        case \"Q\":\n            result += \"q\"\n        case\
    \ \"R\":\n            result += \"r\"\n        case \"S\":\n            result\
    \ += \"s\"\n        case \"T\":\n            result += \"t\"\n        case \"\
    U\":\n            \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpcm61vkcn.swift:108:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"U\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmpcm61vkcn.swift:129:84: error: expected '}' at\
    \ end of brace statement\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\")\n                                        \
    \                                           ^\n/tmp/tmpcm61vkcn.swift:14:27: note:\
    \ to match this opening '{'\n    for letter in message {\n                   \
    \       ^\n/tmp/tmpcm61vkcn.swift:129:84: error: expected '}' at end of brace\
    \ statement\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\")\n                                                    \
    \                               ^\n/tmp/tmpcm61vkcn.swift:12:40: note: to match\
    \ this opening '{'\nfunc encode(message: String) -> String {\n               \
    \                        ^\n/tmp/tmpcm61vkcn.swift:15:9: error: switch must be\
    \ exhaustive\n        switch letter {\n        ^\n/tmp/tmpcm61vkcn.swift:15:9:\
    \ note: do you want to add a default clause?\n        switch letter {\n      \
    \  ^\n/tmp/tmpcm61vkcn.swift:113:6: error: operator functions can only be declared\
    \ at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result = \"t\"\n        case \"e\":\n            result = \"\
    h\"\n        case \"i\":\n            result = \"k\"\n        case \"o\":\n  \
    \          result = \"s\"\n        case \"u\":\n            result = \"g\"\n \
    \       default:\n            result = letter\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpb823qgua.swift:27:22: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            result = letter\n                     ^~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)\n        let replacement = alphabet[index! + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ vowel, with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpuzejo_f4.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)\n                    ^~~~~~~~\n\
    /tmp/tmpuzejo_f4.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index! + 2]\n                          ^~~~~~~~\n\
    /tmp/tmpuzejo_f4.swift:17:59: error: cannot find 'vowel' in scope\n        result\
    \ += String(letter).replacingOccurrences(of: vowel, with: replacement)\n     \
    \                                                     ^~~~~\n/tmp/tmpuzejo_f4.swift:17:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: vowel, with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let replacement = alphabet[(index + 1) % alphabet.count]\n\
    \        result += String(letter).replacingOccurrences(of: letter, with: replacement)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp5acyu_by.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmp5acyu_by.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[(index + 1) % alphabet.count]\n                 \
    \         ^~~~~~~~\n/tmp/tmp5acyu_by.swift:16:50: error: cannot find 'alphabet'\
    \ in scope\n        let replacement = alphabet[(index + 1) % alphabet.count]\n\
    \                                                 ^~~~~~~~\n/tmp/tmp5acyu_by.swift:17:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: letter, with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)\n        let replacement = alphabet[(index + 2) % alphabet.count]\n\
    \        result += String(letter).replacingOccurrences(of: letter, with: replacement)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp0qyyv9az.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)\n                    ^~~~~~~~\n\
    /tmp/tmp0qyyv9az.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[(index + 2) % alphabet.count]\n                 \
    \         ^~~~~~~~\n/tmp/tmp0qyyv9az.swift:16:50: error: cannot find 'alphabet'\
    \ in scope\n        let replacement = alphabet[(index + 2) % alphabet.count]\n\
    \                                                 ^~~~~~~~\n/tmp/tmp0qyyv9az.swift:17:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: letter, with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = english.index(of: letter)\n\
    \        let replacement = english[index! + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ \"A\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"E\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"I\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"O\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"U\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"Y\", with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmplburdqta.swift:15:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmplburdqta.swift:16:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!\
    \ + 2]\n                          ^~~~~~~\n/tmp/tmplburdqta.swift:17:34: error:\
    \ value of type 'String' has no member 'replacingOccurrences'\n        result\
    \ += String(letter).replacingOccurrences(of: \"A\", with: replacement)\n     \
    \             ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmplburdqta.swift:18:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"E\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmplburdqta.swift:19:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"I\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmplburdqta.swift:20:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"O\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmplburdqta.swift:21:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"U\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmplburdqta.swift:22:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"Y\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)\n        let replacement = alphabet[index! + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ \"AEIOUaeiou\", with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpb83g5ns5.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)\n                    ^~~~~~~~\n\
    /tmp/tmpb83g5ns5.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index! + 2]\n                          ^~~~~~~~\n\
    /tmp/tmpb83g5ns5.swift:17:34: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \        result += String(letter).replacingOccurrences(of: \"AEIOUaeiou\", with:\
    \ replacement)\n                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)\n        if index != nil {\n            let twoLettersBefore = alphabet[index!.advanced(by:\
    \ 2)] ?? \"\"\n            let replacement = alphabet[index!.advanced(by: 1)]\
    \ ?? \"\"\n            let replacementIndex = alphabet.index(of: replacement)\n\
    \            let replacementLetter = alphabet[replacementIndex!] ?? \"\"\n   \
    \         let replacementLetterIndex = alphabet.index(of: replacementLetter)\n\
    \            let replacementLetterTwo = alphabet[replacementLetterIndex!] ?? \"\
    \"\n            let replacementLetterThree = alphabet[replacementLetterTwo!] ??\
    \ \"\"\n            let replacementLetterFour = alphabet[replacementLetterThree!]\
    \ ?? \"\"\n            let replacementLetterFive = alphabet[replacementLetterFour!]\
    \ ?? \"\"\n            let replacementLetterSix = alphabet[replacementLetterFive!]\
    \ ?? \"\"\n            let replacementLetterSeven = alphabet[replacementLetterSix!]\
    \ ?? \"\"\n            let replacementLetterEight = alphabet[replacementLetterSeven!]\
    \ ?? \"\"\n            let replacementLetterNine = alphabet[replacementLetterEight!]\
    \ ?? \"\"\n            let replacementLetterTen = alphabet[replacementLetterNine!]\
    \ ?? \"\"\n            let replacementLetterEleven = alphabet[replacementLetterTen!]\
    \ ?? \"\"\n            let replacementLetterTwelve = alphabet[replacementLetterEleven!]\
    \ ?? \"\"\n            let replacementLetterThirteen = alphabet[replacementLetterTwelve!]\
    \ ?? \"\"\n            let replacementLetterFourteen = alphabet[replacementLetterThirteen!]\
    \ ?? \"\"\n            let replacementLetterFifteen = alphabet[replacementLetterFourteen!]\
    \ ?? \"\"\n            let replacementLetterSixteen = alphabet[replacementLetterFifteen!]\
    \ ?? \"\"\n            let replacementLetterSeventeen = alphabet[replacementLetterSixteen!]\
    \ ?? \"\"\n            let replacementLetterEighteen = alphabet[replacementLetterSeventeen!]\
    \ ?? \"\"\n            let replacementLetterNineteen = alphabet[replacementLetterEighteen!]\
    \ ?? \"\"\n            let replacementLetterTwenty = alphabet[replacementLetterNineteen!]\
    \ ?? \"\"\n            let replacementLetterTwentyOne = alphabet[replacementLetterTwenty!]\
    \ ?? \"\"\n            let replacementLetterTwentyTwo = alphabet[replacementLetterTwentyOne!]\
    \ ?? \"\"\n            let replacementLetterTwentyThree = alphabet[replacementLetterTwentyTwo!]\
    \ ?? \"\"\n            let replacementLetterTwent\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpxog6pzc4.swift:64:84: error: expected '}' at end of brace statement\n\
    assert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq\
    \ wRkTg\")\n                                                                 \
    \                  ^\n/tmp/tmpxog6pzc4.swift:14:27: note: to match this opening\
    \ '{'\n    for letter in message {\n                          ^\n/tmp/tmpxog6pzc4.swift:64:84:\
    \ error: expected '}' at end of brace statement\nassert(encode(message: \"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\n                  \
    \                                                                 ^\n/tmp/tmpxog6pzc4.swift:12:40:\
    \ note: to match this opening '{'\nfunc encode(message: String) -> String {\n\
    \                                       ^\n/tmp/tmpxog6pzc4.swift:15:21: error:\
    \ cannot find 'alphabet' in scope\n        let index = alphabet.index(of: letter)\n\
    \                    ^~~~~~~~\n/tmp/tmpxog6pzc4.swift:17:36: error: cannot find\
    \ 'alphabet' in scope\n            let twoLettersBefore = alphabet[index!.advanced(by:\
    \ 2)] ?? \"\"\n                                   ^~~~~~~~\n/tmp/tmpxog6pzc4.swift:18:31:\
    \ error: cannot find 'alphabet' in scope\n            let replacement = alphabet[index!.advanced(by:\
    \ 1)] ?? \"\"\n                              ^~~~~~~~\n/tmp/tmpxog6pzc4.swift:19:36:\
    \ error: cannot find 'alphabet' in scope\n            let replacementIndex = alphabet.index(of:\
    \ replacement)\n                                   ^~~~~~~~\n/tmp/tmpxog6pzc4.swift:20:37:\
    \ error: cannot find 'alphabet' in scope\n            let replacementLetter =\
    \ alphabet[replacementIndex!] ?? \"\"\n                                    ^~~~~~~~\n\
    /tmp/tmpxog6pzc4.swift:21:42: error: cannot find 'alphabet' in scope\n       \
    \     let replacementLetterIndex = alphabet.index(of: replacementLetter)\n   \
    \                                      ^~~~~~~~\n/tmp/tmpxog6pzc4.swift:22:40:\
    \ error: cannot find 'alphabet' in scope\n            let replacementLetterTwo\
    \ = alphabet[replacementLetterIndex!] ?? \"\"\n                              \
    \         ^~~~~~~~\n/tmp/tmpxog6pzc4.swift:23:42:"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)\n        let replacement = alphabet[index! + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ vowel, with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpuzejo_f4.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)\n                    ^~~~~~~~\n\
    /tmp/tmpuzejo_f4.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index! + 2]\n                          ^~~~~~~~\n\
    /tmp/tmpuzejo_f4.swift:17:59: error: cannot find 'vowel' in scope\n        result\
    \ += String(letter).replacingOccurrences(of: vowel, with: replacement)\n     \
    \                                                     ^~~~~\n/tmp/tmpuzejo_f4.swift:17:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: vowel, with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += letter\n        } else {\n            result += letter.lowercased()\n\
    \        }\n    }\n    for letter in result {\n        if letter.isLetter() {\n\
    \            result += letter.lowercased()\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpiddzydy7.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmpiddzydy7.swift:16:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmpiddzydy7.swift:22:19:\
    \ error: cannot call value of non-function type 'Bool'\n        if letter.isLetter()\
    \ {\n                  ^       ~~\n                          \n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let replacement = alphabet[index + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ vowel, with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp8qiy7t7b.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmp8qiy7t7b.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index + 2]\n                          ^~~~~~~~\n\
    /tmp/tmp8qiy7t7b.swift:17:59: error: cannot find 'vowel' in scope\n        result\
    \ += String(letter).replacingOccurrences(of: vowel, with: replacement)\n     \
    \                                                     ^~~~~\n/tmp/tmp8qiy7t7b.swift:17:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: vowel, with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)\n        let replacement = alphabet[(index! + 2) % 26]\n        result\
    \ += String(letter).replacingOccurrences(of: letter, with: replacement)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpdjcifxnz.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)\n                    ^~~~~~~~\n\
    /tmp/tmpdjcifxnz.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[(index! + 2) % 26]\n                          ^~~~~~~~\n\
    /tmp/tmpdjcifxnz.swift:17:34: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \        result += String(letter).replacingOccurrences(of: letter, with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += String(letter)\n        } else {\n            result += String(letter).swapCase()\n\
    \        }\n    }\n    for vowel in \"aeiou\" {\n        let index = result.index(of:\
    \ vowel)\n        if index != nil {\n            let index = index! + 2\n    \
    \        let letter = String(result[index])\n            result += letter\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpmlhvsx0l.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmpmlhvsx0l.swift:18:38:\
    \ error: value of type 'String' has no member 'swapCase'\n            result +=\
    \ String(letter).swapCase()\n                      ~~~~~~~~~~~~~~ ^~~~~~~~\n/tmp/tmpmlhvsx0l.swift:22:28:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        let\
    \ index = result.index(of: vowel)\n                           ^\n/tmp/tmpmlhvsx0l.swift:22:28:\
    \ note: use 'firstIndex(of:)' instead\n        let index = result.index(of: vowel)\n\
    \                           ^~~~~\n                           firstIndex\n/tmp/tmpmlhvsx0l.swift:24:30:\
    \ error: cannot convert value of type 'String.Index' to expected argument type\
    \ 'Int'\n            let index = index! + 2\n                             ^\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for char in message {\n        let index = english.index(of: char)\n\
    \        let replacement = english[index!.advanced(by: 2)!]\n        result +=\
    \ String(char).replacingOccurrences(of: char, with: replacement)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpcrajwxi2.swift:15:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: char)\n                    ^~~~~~~\n/tmp/tmpcrajwxi2.swift:16:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!.advanced(by:\
    \ 2)!]\n                          ^~~~~~~\n/tmp/tmpcrajwxi2.swift:17:32: error:\
    \ value of type 'String' has no member 'replacingOccurrences'\n        result\
    \ += String(char).replacingOccurrences(of: char, with: replacement)\n        \
    \          ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = english.index(of: letter)\n\
    \        let replacement = english[index! + 2]\n        result += String(letter).uppercased()\
    \ + replacement\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpthus5zwc.swift:15:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmpthus5zwc.swift:16:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!\
    \ + 2]\n                          ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = english.index(of: letter)\n\
    \        let replacement = english[index! + 2]\n        result += english[index!]\
    \ + replacement\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpfrjk18mk.swift:15:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmpfrjk18mk.swift:16:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!\
    \ + 2]\n                          ^~~~~~~\n/tmp/tmpfrjk18mk.swift:17:19: error:\
    \ cannot find 'english' in scope\n        result += english[index!] + replacement\n\
    \                  ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = english.index(of: letter)\n\
    \        let nextLetter = english[index!.advanced(by: 1)]\n        let nextIndex\
    \ = english.index(of: nextLetter)\n        let nextLetterIndex = index!.advanced(by:\
    \ 1)\n        if index != nil && nextIndex != nil {\n            if index! < nextIndex!\
    \ {\n                result += nextLetter\n            } else {\n            \
    \    result += nextLetter\n            }\n        } else {\n            result\
    \ += letter\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpk5_ijvsr.swift:15:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmpk5_ijvsr.swift:16:26:\
    \ error: cannot find 'english' in scope\n        let nextLetter = english[index!.advanced(by:\
    \ 1)]\n                         ^~~~~~~\n/tmp/tmpk5_ijvsr.swift:17:25: error:\
    \ cannot find 'english' in scope\n        let nextIndex = english.index(of: nextLetter)\n\
    \                        ^~~~~~~\n/tmp/tmpk5_ijvsr.swift:26:23: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \       result += letter\n                      ^\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let replacement = alphabet[index + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ \"A\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"E\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"I\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"O\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"U\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"Y\", with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp8dg237sf.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmp8dg237sf.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index + 2]\n                          ^~~~~~~~\n\
    /tmp/tmp8dg237sf.swift:17:34: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \        result += String(letter).replacingOccurrences(of: \"A\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8dg237sf.swift:18:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"E\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8dg237sf.swift:19:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"I\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8dg237sf.swift:20:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"O\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8dg237sf.swift:21:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"U\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8dg237sf.swift:22:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"Y\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)\n        let replacement = alphabet[(index + 2) % 26]\n        result\
    \ += String(letter).replacingOccurrences(of: letter, with: replacement)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpz2b0r2wj.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)\n                    ^~~~~~~~\n\
    /tmp/tmpz2b0r2wj.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[(index + 2) % 26]\n                          ^~~~~~~~\n\
    /tmp/tmpz2b0r2wj.swift:17:34: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \        result += String(letter).replacingOccurrences(of: letter, with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for char in message {\n        let index = english.index(of: char)\n\
    \        let replacement = english[index! + 1]\n        result += String(char).replacingOccurrences(of:\
    \ \"A\", with: replacement)\n        result += String(char).replacingOccurrences(of:\
    \ \"E\", with: replacement)\n        result += String(char).replacingOccurrences(of:\
    \ \"I\", with: replacement)\n        result += String(char).replacingOccurrences(of:\
    \ \"O\", with: replacement)\n        result += String(char).replacingOccurrences(of:\
    \ \"U\", with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpfsf5m58l.swift:15:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: char)\n                    ^~~~~~~\n/tmp/tmpfsf5m58l.swift:16:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!\
    \ + 1]\n                          ^~~~~~~\n/tmp/tmpfsf5m58l.swift:17:32: error:\
    \ value of type 'String' has no member 'replacingOccurrences'\n        result\
    \ += String(char).replacingOccurrences(of: \"A\", with: replacement)\n       \
    \           ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpfsf5m58l.swift:18:32: error:\
    \ value of type 'String' has no member 'replacingOccurrences'\n        result\
    \ += String(char).replacingOccurrences(of: \"E\", with: replacement)\n       \
    \           ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpfsf5m58l.swift:19:32: error:\
    \ value of type 'String' has no member 'replacingOccurrences'\n        result\
    \ += String(char).replacingOccurrences(of: \"I\", with: replacement)\n       \
    \           ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpfsf5m58l.swift:20:32: error:\
    \ value of type 'String' has no member 'replacingOccurrences'\n        result\
    \ += String(char).replacingOccurrences(of: \"O\", with: replacement)\n       \
    \           ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpfsf5m58l.swift:21:32: error:\
    \ value of type 'String' has no member 'replacingOccurrences'\n        result\
    \ += String(char).replacingOccurrences(of: \"U\", with: replacement)\n       \
    \           ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let nextLetter = alphabet[index + 1]\n        let replacement\
    \ = alphabet[alphabet.index(of: nextLetter)!]\n        result += String(letter).replacingOccurrences(of:\
    \ letter, with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp4umoc_ns.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmp4umoc_ns.swift:16:26: error: cannot find 'alphabet' in scope\n       \
    \ let nextLetter = alphabet[index + 1]\n                         ^~~~~~~~\n/tmp/tmp4umoc_ns.swift:17:27:\
    \ error: cannot find 'alphabet' in scope\n        let replacement = alphabet[alphabet.index(of:\
    \ nextLetter)!]\n                          ^~~~~~~~\n/tmp/tmp4umoc_ns.swift:17:36:\
    \ error: cannot find 'alphabet' in scope\n        let replacement = alphabet[alphabet.index(of:\
    \ nextLetter)!]\n                                   ^~~~~~~~\n/tmp/tmp4umoc_ns.swift:18:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: letter, with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result += \"A\"\n        case \"b\":\n            result +=\
    \ \"B\"\n        case \"c\":\n            result += \"C\"\n        case \"d\"\
    :\n            result += \"D\"\n        case \"e\":\n            result += \"\
    E\"\n        case \"f\":\n            result += \"F\"\n        case \"g\":\n \
    \           result += \"G\"\n        case \"h\":\n            result += \"H\"\n\
    \        case \"i\":\n            result += \"I\"\n        case \"j\":\n     \
    \       result += \"J\"\n        case \"k\":\n            result += \"K\"\n  \
    \      case \"l\":\n            result += \"L\"\n        case \"m\":\n       \
    \     result += \"M\"\n        case \"n\":\n            result += \"N\"\n    \
    \    case \"o\":\n            result += \"O\"\n        case \"p\":\n         \
    \   result += \"P\"\n        case \"q\":\n            result += \"Q\"\n      \
    \  case \"r\":\n            result += \"R\"\n        case \"s\":\n           \
    \ result += \"S\"\n        case \"t\":\n            result += \"T\"\n        case\
    \ \"u\":\n            result += \"U\"\n        case \"v\":\n            result\
    \ += \"V\"\n        case \"w\":\n            result += \"W\"\n        case \"\
    x\":\n            result += \"X\"\n        case \"y\":\n            result +=\
    \ \"Y\"\n        case \"z\":\n            result += \"Z\"\n        case \"A\"\
    :\n            result += \"a\"\n        case \"B\":\n            result += \"\
    b\"\n        case \"C\":\n            result += \"c\"\n        case \"D\":\n \
    \           result += \"d\"\n        case \"E\":\n            result += \"e\"\n\
    \        case \"F\":\n            result += \"f\"\n        case \"G\":\n     \
    \       result += \"g\"\n        case \"H\":\n            result += \"h\"\n  \
    \      case \"I\":\n            result += \"i\"\n        case \"J\":\n       \
    \     result += \"j\"\n        case \"K\":\n            result += \"k\"\n    \
    \    case \"L\":\n            result += \"l\"\n        case \"M\":\n         \
    \   result += \"m\"\n        case \"N\":\n            result += \"n\"\n      \
    \  case \"O\":\n            result += \"o\"\n        case \"P\":\n           \
    \ result += \"p\"\n        case \"Q\":\n            result += \"q\"\n        case\
    \ \"R\":\n            result += \"r\"\n        case \"S\":\n            result\
    \ += \"s\"\n        case \"T\":\n            result += \"t\"\n        case \"\
    U\":\n            \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpcm61vkcn.swift:108:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"U\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmpcm61vkcn.swift:129:84: error: expected '}' at\
    \ end of brace statement\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\")\n                                        \
    \                                           ^\n/tmp/tmpcm61vkcn.swift:14:27: note:\
    \ to match this opening '{'\n    for letter in message {\n                   \
    \       ^\n/tmp/tmpcm61vkcn.swift:129:84: error: expected '}' at end of brace\
    \ statement\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\")\n                                                    \
    \                               ^\n/tmp/tmpcm61vkcn.swift:12:40: note: to match\
    \ this opening '{'\nfunc encode(message: String) -> String {\n               \
    \                        ^\n/tmp/tmpcm61vkcn.swift:15:9: error: switch must be\
    \ exhaustive\n        switch letter {\n        ^\n/tmp/tmpcm61vkcn.swift:15:9:\
    \ note: do you want to add a default clause?\n        switch letter {\n      \
    \  ^\n/tmp/tmpcm61vkcn.swift:113:6: error: operator functions can only be declared\
    \ at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += String(letter)\n        } else {\n            result += String(letter).swapCase()\n\
    \        }\n    }\n    for letter in result {\n        if letter.isLetter() {\n\
    \            if let index = result.index(of: letter) {\n                let vowel\
    \ = String(result[index + 1])\n                let vowelIndex = result.index(of:\
    \ vowel)\n                result[index] = vowel\n                result[vowelIndex]\
    \ = letter\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp0_laimls.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmp0_laimls.swift:18:38:\
    \ error: value of type 'String' has no member 'swapCase'\n            result +=\
    \ String(letter).swapCase()\n                      ~~~~~~~~~~~~~~ ^~~~~~~~\n/tmp/tmp0_laimls.swift:22:19:\
    \ error: cannot call value of non-function type 'Bool'\n        if letter.isLetter()\
    \ {\n                  ^       ~~\n                          \n/tmp/tmp0_laimls.swift:23:35:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        \
    \    if let index = result.index(of: letter) {\n                             \
    \     ^\n/tmp/tmp0_laimls.swift:23:35: note: use 'firstIndex(of:)' instead\n \
    \           if let index = result.index(of: letter) {\n                      \
    \            ^~~~~\n                                  firstIndex\n/tmp/tmp0_laimls.swift:24:43:\
    \ error: cannot convert value of type 'String.Index' to expected argument type\
    \ 'Int'\n                let vowel = String(result[index + 1])\n             \
    \                             ^\n/tmp/tmp0_laimls.swift:26:23: error: cannot assign\
    \ through subscript: subscript is get-only\n                result[index] = vowel\n\
    \                ~~~~~~^~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
