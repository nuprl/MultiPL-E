language: swift
name: HumanEval_147_get_max_triples
results:
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && j != k && i !=\
    \ k {\n                    if a[i] < a[j] + a[k] {\n                        a[i]\
    \ = a[j] + a[k]\n                    }\n                }\n            }\n   \
    \     }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abc5d9bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc5d6b5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abc5d6b5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abc5d6b513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abc5d6b4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abc5d4b4e83 <unavailable> + 188035

    6    tmpqcrc18q1                        0x000055b816cf5ab0 <unavailable> + 6832

    7    tmpqcrc18q1                        0x000055b816cf5468 <unavailable> + 5224

    8    libc.so.6                          0x00002abc5dbaa460 __libc_start_main +
    245

    9    tmpqcrc18q1                        0x000055b816cf5189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && j != k && i !=\
    \ k && a[i] + a[j] + a[k] == 3 {\n                    a.append(i)\n          \
    \          a.append(j)\n                    a.append(k)\n                }\n \
    \           }\n        }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b62a75ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b62a72e2561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b62a72e2286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b62a72e213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b62a72e1bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b62a70e1e83 <unavailable> + 188035

    6    tmpqg3xtqf2                        0x0000562916f70ac0 <unavailable> + 6848

    7    tmpqg3xtqf2                        0x0000562916f70478 <unavailable> + 5240

    8    libc.so.6                          0x00002b62a77d7460 __libc_start_main +
    245

    9    tmpqg3xtqf2                        0x0000562916f70199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    a[i] = a[i] + a[j] + a[k]\n                }\n    \
    \        }\n        }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6e34a74c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6e3476b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6e3476b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6e3476b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6e3476abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6e3456ae83 <unavailable> + 188035

    6    tmp_nh1wdig                        0x000055b1d6b54ab0 <unavailable> + 6832

    7    tmp_nh1wdig                        0x000055b1d6b54468 <unavailable> + 5224

    8    libc.so.6                          0x00002b6e34c60460 __libc_start_main +
    245

    9    tmp_nh1wdig                        0x000055b1d6b54189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    a[i] = a[i] + a[j] + a[k]\n                }\n    \
    \        }\n        }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6e34a74c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6e3476b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6e3476b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6e3476b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6e3476abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6e3456ae83 <unavailable> + 188035

    6    tmp_nh1wdig                        0x000055b1d6b54ab0 <unavailable> + 6832

    7    tmp_nh1wdig                        0x000055b1d6b54468 <unavailable> + 5224

    8    libc.so.6                          0x00002b6e34c60460 __libc_start_main +
    245

    9    tmp_nh1wdig                        0x000055b1d6b54189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array(0..<n)\n    var count = 0\n    for i in 0..<n {\n\
    \        for j in 0..<n {\n            for k in 0..<n {\n                if i\
    \ != j && i != k && j != k {\n                    a[i] = i * i - i + 1\n     \
    \               count += 1\n                }\n            }\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpvlnu1qsj/tmpvlnu1qsj.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acc011cac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc00ec1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acc00ec1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acc00ec07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvlnu1qsj                        0x00005646809cc4c5 <unavailable> + 5317

    5    libc.so.6                          0x00002acc013b6460 __libc_start_main +
    245

    6    tmpvlnu1qsj                        0x00005646809cc179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>(n)\n    for i in 0..<n {\n        a[i] = i\
    \ * i - i + 1\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            for k in 0..<n {\n                if i != j && i != k &&\
    \ j != k {\n                    if a[i] < a[j] && a[i] < a[k] {\n            \
    \            count += 1\n                    }\n                }\n          \
    \  }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpepopq1kv.swift:13:24: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array<Int>(n)\n                       ^\n             \
    \          arrayLiteral: \n"
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for _ in 1...n {\n        a.append(0)\n\
    \    }\n    for i in  1...n {\n        for j in i+1...n {\n            for k in\
    \ j+1...n {\n                if a[i] < a[j] && a[i] < a[k] {\n               \
    \     a[i] = a[i] + a[j] + a[k]\n                }\n            }\n        }\n\
    \    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d97929c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d97620561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6d97620286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6d9762013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6d9761fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpp7__0esi                        0x00005607d74f5b79 <unavailable> + 7033

    6    tmpp7__0esi                        0x00005607d74f54c8 <unavailable> + 5320

    7    libc.so.6                          0x00002b6d97b15460 __libc_start_main +
    245

    8    tmpp7__0esi                        0x00005607d74f51e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array(0..<n)\n    var count = 0\n    for i in 0..<n {\n\
    \        for j in 0..<n {\n            for k in 0..<n {\n                if i\
    \ < j < k {\n                    a[i] = i * i - i + 1\n                    count\
    \ += 1\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpp9xb0c6o.swift:18:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpp9xb0c6o.swift:18:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824871
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>(n)\n    for i in 0..<n {\n        a[i] = i\
    \ * i - i + 1\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            for k in 0..<n {\n                if i < j < k {\n    \
    \                if a[i] < a[j] && a[j] < a[k] {\n                        count\
    \ += 1\n                    }\n                }\n            }\n        }\n \
    \   }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpd10lje7j.swift:13:24: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array<Int>(n)\n                       ^\n             \
    \          arrayLiteral: \n/tmp/tmpd10lje7j.swift:21:22: error: adjacent operators\
    \ are in non-associative precedence group 'ComparisonPrecedence'\n           \
    \     if i < j < k {\n                     ^   ~\n/tmp/tmpd10lje7j.swift:21:22:\
    \ error: cannot convert value of type 'Bool' to expected argument type 'Int'\n\
    \                if i < j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824871
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j\
    \ in 0..<n {\n            for k in 0..<n {\n                if i < j < k {\n \
    \                   if a[i] < a[j] + a[k] {\n                        count +=\
    \ 1\n                    }\n                }\n            }\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpn4t5c8sv.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpn4t5c8sv.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [0]\n    for i in 1...n {\n        for j in 1...n {\n\
    \            for k in 1...n {\n                if i != j && i != k && j != k {\n\
    \                    if a[i] + a[j] + a[k] == 3 {\n                        return\
    \ 1\n                    }\n                }\n            }\n        }\n    \
    \    a[0] = a[i] + 1\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb1b60dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb1b304561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aeb1b304286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aeb1b30413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aeb1b303bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aeb1b103e83 <unavailable> + 188035

    6    tmp2dqegfmu                        0x000055f262f22ae2 <unavailable> + 6882

    7    tmp2dqegfmu                        0x000055f262f22478 <unavailable> + 5240

    8    libc.so.6                          0x00002aeb1b7f9460 __libc_start_main +
    245

    9    tmp2dqegfmu                        0x000055f262f22199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for _ in 1...n {\n        a.append(0)\n \
    \   }\n    for _ in 1...n {\n        for _ in 1...n {\n            for _ in 1...n\
    \ {\n                a[n] = a[n] + 1\n                if a[n] == 3 {\n       \
    \             return n\n                }\n            }\n        }\n    }\n \
    \   return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b9010e28c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9010b1f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b9010b1f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b9010b1f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b9010b1ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b901091ee83 <unavailable> + 188035

    6    tmpikh_i0sv                        0x00005569ac986a4f <unavailable> + 6735

    7    tmpikh_i0sv                        0x00005569ac986428 <unavailable> + 5160

    8    libc.so.6                          0x00002b9011014460 __libc_start_main +
    245

    9    tmpikh_i0sv                        0x00005569ac986149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    return a.maxElement()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp1b7pa21x.swift:17:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824871
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    \n    var count = 0\n    for i in 0..<n {\n       \
    \ for j in 0..<n {\n            for k in 0..<n {\n                if i < j < k\
    \ {\n                    if a[i] < a[j] + a[k] {\n                        count\
    \ += 1\n                    }\n                }\n            }\n        }\n \
    \   }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp9j8cc2e4.swift:22:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmp9j8cc2e4.swift:22:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp_42tbj6u/tmp_42tbj6u.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7390c0fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7390906b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7390906988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73909057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_42tbj6u                        0x000055b12be59495 <unavailable> + 5269

    5    libc.so.6                          0x00002b7390dfb460 __libc_start_main +
    245

    6    tmp_42tbj6u                        0x000055b12be59149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    a[i] = a[i] + a[j] + a[k]\n                }\n    \
    \        }\n        }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6e34a74c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6e3476b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6e3476b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6e3476b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6e3476abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6e3456ae83 <unavailable> + 188035

    6    tmp_nh1wdig                        0x000055b1d6b54ab0 <unavailable> + 6832

    7    tmp_nh1wdig                        0x000055b1d6b54468 <unavailable> + 5224

    8    libc.so.6                          0x00002b6e34c60460 __libc_start_main +
    245

    9    tmp_nh1wdig                        0x000055b1d6b54189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && j != k && i !=\
    \ k {\n                    let sum = i * i - i + j * j + k * k\n             \
    \       if sum % 3 == 0 {\n                        a.append(sum)\n           \
    \         }\n                }\n            }\n        }\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmp3e3yikp_/tmp3e3yikp_.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2bc8de9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2bc8ae0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2bc8ae0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2bc8adf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3e3yikp_                        0x000055d5d62ed495 <unavailable> + 5269

    5    libc.so.6                          0x00002b2bc8fd5460 __libc_start_main +
    245

    6    tmp3e3yikp_                        0x000055d5d62ed149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>(n)\n    for i in 0..<n {\n        a[i] = i\
    \ * i - i + 1\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            for k in 0..<n {\n                if i < j < k {\n    \
    \                if a[i] < a[j] + a[k] {\n                        count += 1\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp87t24vp0.swift:13:24: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array<Int>(n)\n                       ^\n             \
    \          arrayLiteral: \n/tmp/tmp87t24vp0.swift:21:22: error: adjacent operators\
    \ are in non-associative precedence group 'ComparisonPrecedence'\n           \
    \     if i < j < k {\n                     ^   ~\n/tmp/tmp87t24vp0.swift:21:22:\
    \ error: cannot convert value of type 'Bool' to expected argument type 'Int'\n\
    \                if i < j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824871
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    return a.maxElement()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp1b7pa21x.swift:17:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp_42tbj6u/tmp_42tbj6u.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7390c0fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7390906b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7390906988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73909057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_42tbj6u                        0x000055b12be59495 <unavailable> + 5269

    5    libc.so.6                          0x00002b7390dfb460 __libc_start_main +
    245

    6    tmp_42tbj6u                        0x000055b12be59149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>(n)\n    for i in 0..<n {\n        a[i] = i\
    \ * i - i + 1\n    }\n    return a.maxTriples(of: 3)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpdr7t3an9.swift:13:24: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array<Int>(n)\n                       ^\n             \
    \          arrayLiteral: \n"
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [0]\n    for i in 1..<n {\n        for j in 1..<n {\n\
    \            for k in 1..<n {\n                if i != j && i != k && j != k {\n\
    \                    if a[i] + a[j] + a[k] == i*i*i - i*i + i*i*i + j*j*j + j*j*j\
    \ + k*k*k {\n                        a += [i]\n                    }\n       \
    \         }\n            }\n        }\n    }\n    return a.count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a8a0c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a89dbc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b4a89dbc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b4a89dbc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b4a89dbbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b4a89bbbe83 <unavailable> + 188035

    6    tmp5er6s24h                        0x0000564a4e68bb1b <unavailable> + 6939

    7    tmp5er6s24h                        0x0000564a4e68b4d8 <unavailable> + 5336

    8    libc.so.6                          0x00002b4a8a2b1460 __libc_start_main +
    245

    9    tmp5er6s24h                        0x0000564a4e68b1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [0]\n    for i in 1...n {\n        a[i] = a[i] * a[i]\
    \ - a[i] + i + 1\n    }\n    return a.maxElement()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpaqlg_ywi.swift:17:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824871
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    return a.filter({ (i, j, k) -> Bool in\n        i <\
    \ j < k\n    }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmptjr7pk_r.swift:18:11: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n        i < j < k\n          ^   ~\n\
    /tmp/tmptjr7pk_r.swift:17:23: error: contextual closure type '(Int) throws ->\
    \ Bool' expects 1 argument, but 3 were used in closure body\n    return a.filter({\
    \ (i, j, k) -> Bool in\n                      ^\n/tmp/tmptjr7pk_r.swift:18:15:\
    \ error: binary operator '<' cannot be applied to operands of type 'Bool' and\
    \ '()'\n        i < j < k\n        ~~~~~ ^ ~\n/tmp/tmptjr7pk_r.swift:18:15: note:\
    \ overloads for '<' exist with these partially matching parameter lists: ((),\
    \ ()), (AnyIndex, AnyIndex), (Character, Character), (ContinuousClock.Instant,\
    \ ContinuousClock.Instant), (Duration, Duration), (Int, Int), (Int16, Int16),\
    \ (Int32, Int32), (Int64, Int64), (Int8, Int8), (Never, Never), (ObjectIdentifier,\
    \ ObjectIdentifier), (String, String), (String.Index, String.Index), (SuspendingClock.Instant,\
    \ SuspendingClock.Instant), (TaskPriority, TaskPriority), (UInt, UInt), (UInt16,\
    \ UInt16), (UInt32, UInt32), (UInt64, UInt64), (UInt8, UInt8), (Unicode.CanonicalCombiningClass,\
    \ Unicode.CanonicalCombiningClass), (Unicode.Scalar, Unicode.Scalar), (_ValidUTF8Buffer.Index,\
    \ _ValidUTF8Buffer.Index)\n        i < j < k\n              ^\n"
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && j != k && i !=\
    \ k {\n                    let sum = i * i + j * j + k * k\n                 \
    \   if sum % 3 == 0 {\n                        a.append(sum)\n               \
    \     }\n                }\n            }\n        }\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmp8vv_qwls/tmp8vv_qwls.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6bcef6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6bcbedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6bcbed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6bcbec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8vv_qwls                        0x0000563e44ab5495 <unavailable> + 5269

    5    libc.so.6                          0x00002ac6bd0e2460 __libc_start_main +
    245

    6    tmp8vv_qwls                        0x0000563e44ab5149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    let sum = i * i - i + j * j + k * k\n             \
    \       if sum % 3 == 0 {\n                        a.append(sum)\n           \
    \         }\n                }\n            }\n        }\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpb9yowzko/tmpb9yowzko.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adcd212cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adcd1e23b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adcd1e23988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adcd1e227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb9yowzko                        0x0000562bff87e495 <unavailable> + 5269

    5    libc.so.6                          0x00002adcd2318460 __libc_start_main +
    245

    6    tmpb9yowzko                        0x0000562bff87e149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [0]\n    for i in 1..<n {\n        a[i] = a[i] * a[i]\
    \ - a[i] + i + 1\n    }\n    return a.maxElement()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpraycf9tr.swift:17:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824871
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [0]\n    for i in 1...n {\n        a[i] = a[i] * a[i]\
    \ - a[i] + i + 1\n    }\n    return a.maxElement()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpaqlg_ywi.swift:17:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    a.append(i*i - i + 1)\n                }\n        \
    \    }\n        }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpetk7_ark/tmpetk7_ark.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b722f180c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b722ee77b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b722ee77988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b722ee767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpetk7_ark                        0x000056377eff7495 <unavailable> + 5269

    5    libc.so.6                          0x00002b722f36c460 __libc_start_main +
    245

    6    tmpetk7_ark                        0x000056377eff7149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && j != k && i !=\
    \ k {\n                    if a[i] + a[j] + a[k] == i*i*i + j*j*j + k*k*k {\n\
    \                        a.append(i*i*i + j*j*j + k*k*k)\n                   \
    \ }\n                }\n            }\n        }\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aca5bc96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca5b98d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aca5b98d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aca5b98d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aca5b98cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aca5b78ce83 <unavailable> + 188035

    6    tmp2ufmq4lb                        0x000055fcfb071ac0 <unavailable> + 6848

    7    tmp2ufmq4lb                        0x000055fcfb071478 <unavailable> + 5240

    8    libc.so.6                          0x00002aca5be82460 __libc_start_main +
    245

    9    tmp2ufmq4lb                        0x000055fcfb071199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && j != k && i !=\
    \ k {\n                    if a[j] > a[k] {\n                        a[k] = a[j]\n\
    \                    } else if a[k] > a[j] {\n                        a[j] = a[k]\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b9164b3ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9164831561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b9164831286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b916483113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b9164830bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b9164630e83 <unavailable> + 188035

    6    tmppcm6htpr                        0x000055a201ea9ab0 <unavailable> + 6832

    7    tmppcm6htpr                        0x000055a201ea9468 <unavailable> + 5224

    8    libc.so.6                          0x00002b9164d26460 __libc_start_main +
    245

    9    tmppcm6htpr                        0x000055a201ea9189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i < j < k {\n          \
    \          let triple = i * i - i + j + k\n                    if triple % 3 ==\
    \ 0 {\n                        a.append(triple)\n                    }\n     \
    \           }\n            }\n        }\n    }\n    return a.count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpkqmwf6ws.swift:17:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpkqmwf6ws.swift:17:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824871
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for _ in 1...n {\n        a.append(0)\n \
    \   }\n    var count = 0\n    for _ in 1...n {\n        for j in 1...n {\n   \
    \         for k in 1...n {\n                if i < j && j < k && i < k {\n   \
    \                 a[i] = a[i] + a[j] + a[k]\n                    count += 1\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpgfk4cq_o.swift:21:20: error: cannot find 'i' in scope\n       \
    \         if i < j && j < k && i < k {\n                   ^\n/tmp/tmpgfk4cq_o.swift:21:38:\
    \ error: cannot find 'i' in scope\n                if i < j && j < k && i < k\
    \ {\n                                     ^\n/tmp/tmpgfk4cq_o.swift:22:23: error:\
    \ cannot find 'i' in scope\n                    a[i] = a[i] + a[j] + a[k]\n  \
    \                    ^\n/tmp/tmpgfk4cq_o.swift:22:30: error: cannot find 'i' in\
    \ scope\n                    a[i] = a[i] + a[j] + a[k]\n                     \
    \        ^\n"
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[j] > a[k] && a[j] > a[i] {\n                 \
    \       a[j] = a[k]\n                    }\n                    if a[k] > a[j]\
    \ && a[k] > a[i] {\n                        a[k] = a[j]\n                    }\n\
    \                    if a[i] > a[j] && a[i] > a[k] {\n                       \
    \ a[i] = a[j]\n                    }\n                }\n            }\n     \
    \   }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b26b43bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26b40b3561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b26b40b3286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b26b40b313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b26b40b2bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b26b3eb2e83 <unavailable> + 188035

    6    tmpq831zwrr                        0x0000556a4c3a6ab0 <unavailable> + 6832

    7    tmpq831zwrr                        0x0000556a4c3a6468 <unavailable> + 5224

    8    libc.so.6                          0x00002b26b45a8460 __libc_start_main +
    245

    9    tmpq831zwrr                        0x0000556a4c3a6189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [0]\n    for i in 1...n {\n        a[i] = a[i] * a[i]\
    \ - a[i] + i + 1\n    }\n    return a.maxElement()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpaqlg_ywi.swift:17:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    let triple = i * i * i + j * j + k * k\n          \
    \          if triple % 3 == 0 {\n                        a.append(triple)\n  \
    \                  }\n                }\n            }\n        }\n    }\n   \
    \ return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpv3yr2n3j/tmpv3yr2n3j.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b68b6965c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b68b665cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b68b665c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b68b665b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv3yr2n3j                        0x0000563f72103495 <unavailable> + 5269

    5    libc.so.6                          0x00002b68b6b51460 __libc_start_main +
    245

    6    tmpv3yr2n3j                        0x0000563f72103149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array(n + 1)\n    for i := 0; i < n; i++ {\n        a[i]\
    \ = i * i - i + 1\n    }\n    var count = 0\n    for i := 0; i < n; i++ {\n  \
    \      for j := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n\
    \                if a[i] < a[j] && a[i] < a[k] && a[j] < a[k] {\n            \
    \        count++\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5) ==\
    \ 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) == 36)\n\
    assert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp_589vcud.swift:14:12: error: expected type\n    for i := 0; i <\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmp_589vcud.swift:14:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < n; i++ {\n\
    \           ^\n/tmp/tmp_589vcud.swift:14:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < n; i++ {\n           ^\n/tmp/tmp_589vcud.swift:18:12:\
    \ error: expected type\n    for i := 0; i < n; i++ {\n           ^\n         \
    \   <#type#>\n/tmp/tmp_589vcud.swift:18:12: error: expected 'in' after for-each\
    \ pattern\n    for i := 0; i < n; i++ {\n           ^\n/tmp/tmp_589vcud.swift:18:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := 0; i < n;\
    \ i++ {\n           ^\n/tmp/tmp_589vcud.swift:19:16: error: expected type\n  \
    \      for j := i + 1; j < n; j++ {\n               ^\n                <#type#>\n\
    /tmp/tmp_589vcud.swift:19:16: error: expected 'in' after for-each pattern\n  \
    \      for j := i + 1; j < n; j++ {\n               ^\n/tmp/tmp_589vcud.swift:19:16:\
    \ error: expected Sequence expression for for-each loop\n        for j := i +\
    \ 1; j < n; j++ {\n               ^\n/tmp/tmp_589vcud.swift:20:20: error: expected\
    \ type\n            for k := j + 1; k < n; k++ {\n                   ^\n     \
    \               <#type#>\n/tmp/tmp_589vcud.swift:20:20: error: expected 'in' after\
    \ for-each pattern\n            for k := j + 1; k < n; k++ {\n               \
    \    ^\n/tmp/tmp_589vcud.swift:20:20: error: expected Sequence expression for\
    \ for-each loop\n            for k := j + 1; k < n; k++ {\n                  \
    \ ^\n/tmp/tmp_589vcud.swift:13:19: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array(n + 1)\n                  ^\n                  arrayLiteral:\
    \ \n"
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    let sum = i * i - i + j * j + k * k\n             \
    \       if sum % 3 == 0 {\n                        a.append(sum)\n           \
    \         }\n                }\n            }\n        }\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpb9yowzko/tmpb9yowzko.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adcd212cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adcd1e23b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adcd1e23988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adcd1e227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb9yowzko                        0x0000562bff87e495 <unavailable> + 5269

    5    libc.so.6                          0x00002adcd2318460 __libc_start_main +
    245

    6    tmpb9yowzko                        0x0000562bff87e149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a: [Int] = []\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && j != k && i !=\
    \ k {\n                    if a[i] + a[j] + a[k] == i*i*i - j*j*j + k*k*k {\n\
    \                        a.append(i)\n                        a.append(j)\n  \
    \                      a.append(k)\n                    }\n                }\n\
    \            }\n        }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac3f7952c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac3f7649561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac3f7649286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac3f764913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac3f7648bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac3f7448e83 <unavailable> + 188035

    6    tmpzyzysqgx                        0x000055c3a875eaeb <unavailable> + 6891

    7    tmpzyzysqgx                        0x000055c3a875e498 <unavailable> + 5272

    8    libc.so.6                          0x00002ac3f7b3e460 __libc_start_main +
    245

    9    tmpzyzysqgx                        0x000055c3a875e1b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i < j < k {\n          \
    \          let sum = i * i - i + j * j + k * k\n                    if sum % 3\
    \ == 0 {\n                        a.append(sum)\n                    }\n     \
    \           }\n            }\n        }\n    }\n    return a.count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp_q_rz3re.swift:17:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmp_q_rz3re.swift:17:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    a.append(i*i - i + 1)\n                }\n        \
    \    }\n        }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpetk7_ark/tmpetk7_ark.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b722f180c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b722ee77b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b722ee77988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b722ee767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpetk7_ark                        0x000056377eff7495 <unavailable> + 5269

    5    libc.so.6                          0x00002b722f36c460 __libc_start_main +
    245

    6    tmpetk7_ark                        0x000056377eff7149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for _ in 1...n {\n        a.append(0)\n \
    \   }\n    var count = 0\n    for i in 1...n {\n        for j in 1...n {\n   \
    \         for k in 1...n {\n                if i < j < k {\n                 \
    \   a[i] += a[j] + a[k]\n                    if a[i] % 3 == 0 {\n            \
    \            count += 1\n                    }\n                }\n          \
    \  }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpsswkex97.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpsswkex97.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] + a[k] {\n                        a[i]\
    \ = a[j] + a[k]\n                    }\n                }\n            }\n   \
    \     }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b1ba5026c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1ba4d1d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b1ba4d1d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b1ba4d1d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b1ba4d1cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b1ba4b1ce83 <unavailable> + 188035

    6    tmpfhjz5m9d                        0x000055fb56877ab0 <unavailable> + 6832

    7    tmpfhjz5m9d                        0x000055fb56877468 <unavailable> + 5224

    8    libc.so.6                          0x00002b1ba5212460 __libc_start_main +
    245

    9    tmpfhjz5m9d                        0x000055fb56877189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a: [Int] = []\n    for i in 1...n {\n        a[i] = i * i\
    \ - i + 1\n    }\n    var triples = 0\n    for i in 0..(n-1) { \n        for j\
    \ in (i+1)..(n) {\n            for k in (j+1)..(n) {\n                if a[i]\
    \ < a[j] && a[i] < a[k] && a[j] < a[k] {\n                    triples += 1\n \
    \               }\n            }\n        }\n    }\n    return triples\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpvd5qukaq.swift:18:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 0..(n-1) { \n              ^~\n          \
    \    ...\n/tmp/tmpvd5qukaq.swift:19:23: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n        for j in (i+1)..(n) {\n                      ^~\n\
    \                      ...\n/tmp/tmpvd5qukaq.swift:20:27: error: cannot find operator\
    \ '..' in scope; did you mean '...'?\n            for k in (j+1)..(n) {\n    \
    \                      ^~\n                          ...\n"
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for i in 1...n {\n        a[i] = i * i -\
    \ i + 1\n    }\n    var count = 0\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] && a[i] < a[k] {\n                 \
    \       count += 1\n                    }\n                    if a[j] < a[i]\
    \ && a[j] < a[k] {\n                        count += 1\n                    }\n\
    \                    if a[k] < a[i] && a[k] < a[j] {\n                       \
    \ count += 1\n                    }\n                }\n            }\n      \
    \  }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8567d41c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8567a38561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8567a38286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8567a3813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8567a37bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b85678377ec <unavailable> + 186348

    6    tmpkdcu_gar                        0x00005653b9457801 <unavailable> + 6145

    7    tmpkdcu_gar                        0x00005653b94573c8 <unavailable> + 5064

    8    libc.so.6                          0x00002b8567f2d460 __libc_start_main +
    245

    9    tmpkdcu_gar                        0x00005653b94570e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [0]\n    for i in 1...n {\n        for j in 1...n {\n\
    \            for k in 1...n {\n                if i != j && i != k && j != k {\n\
    \                    a[0] += i * i - i + 1\n                    a[1] += j * j\
    \ - j + 1\n                    a[2] += k * k - k + 1\n                }\n    \
    \        }\n        }\n    }\n    return a[0]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae82dd18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae82da0f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae82da0f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae82da0f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae82da0ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae82d80e7ec <unavailable> + 186348

    6    tmpv29da7i0                        0x00005576f708cc1a <unavailable> + 7194

    7    tmpv29da7i0                        0x00005576f708c478 <unavailable> + 5240

    8    libc.so.6                          0x00002ae82df04460 __libc_start_main +
    245

    9    tmpv29da7i0                        0x00005576f708c199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    a[i] = a[i] + a[j] + a[k]\n                }\n    \
    \        }\n        }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6e34a74c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6e3476b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6e3476b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6e3476b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6e3476abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6e3456ae83 <unavailable> + 188035

    6    tmp_nh1wdig                        0x000055b1d6b54ab0 <unavailable> + 6832

    7    tmp_nh1wdig                        0x000055b1d6b54468 <unavailable> + 5224

    8    libc.so.6                          0x00002b6e34c60460 __libc_start_main +
    245

    9    tmp_nh1wdig                        0x000055b1d6b54189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a: [Int] = []\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && j != k && i !=\
    \ k && a[i] + a[j] + a[k] == i*i*i - i*i + i*i + i*i + i*i + 1 {\n           \
    \         a.append(i*i*i - i*i + i*i + i*i + i*i + i*i + 1)\n                }\n\
    \            }\n        }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b9749492c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9749189561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b9749189286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b974918913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b9749188bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b9748f88e83 <unavailable> + 188035

    6    tmpsb6re5n9                        0x000055d4c7274aeb <unavailable> + 6891

    7    tmpsb6re5n9                        0x000055d4c7274498 <unavailable> + 5272

    8    libc.so.6                          0x00002b974967e460 __libc_start_main +
    245

    9    tmpsb6re5n9                        0x000055d4c72741b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    let sum = i * i - i + j * j + k * k\n             \
    \       if sum % 3 == 0 {\n                        a.append(sum)\n           \
    \         }\n                }\n            }\n        }\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpb9yowzko/tmpb9yowzko.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adcd212cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adcd1e23b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adcd1e23988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adcd1e227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb9yowzko                        0x0000562bff87e495 <unavailable> + 5269

    5    libc.so.6                          0x00002adcd2318460 __libc_start_main +
    245

    6    tmpb9yowzko                        0x0000562bff87e149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a: [Int] = []\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && j != k && i !=\
    \ k && a[i] + a[j] + a[k] == 3 {\n                    a.append(i)\n          \
    \          a.append(j)\n                    a.append(k)\n                }\n \
    \           }\n        }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b1087671c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1087368561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b1087368286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b108736813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b1087367bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b1087167e83 <unavailable> + 188035

    6    tmp98duzny4                        0x000055cec6912aeb <unavailable> + 6891

    7    tmp98duzny4                        0x000055cec6912498 <unavailable> + 5272

    8    libc.so.6                          0x00002b108785d460 __libc_start_main +
    245

    9    tmp98duzny4                        0x000055cec69121b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>(n)\n    for i in 0..<n {\n        a[i] = i\
    \ * i - i + 1\n    }\n    var triples = 0\n    for i in 0..<n {\n        for j\
    \ in 0..<n {\n            for k in 0..<n {\n                if i != j && i !=\
    \ k && j != k {\n                    if a[i] < a[j] && a[i] < a[k] {\n       \
    \                 triples += 1\n                    }\n                }\n   \
    \         }\n        }\n    }\n    return triples\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpth30ygpd.swift:13:24: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array<Int>(n)\n                       ^\n             \
    \          arrayLiteral: \n"
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    let sum = i * i - i + j * j + k * k\n             \
    \       if sum % 3 == 0 {\n                        a.append(sum)\n           \
    \         }\n                }\n            }\n        }\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpdpvf0fs5/tmpdpvf0fs5.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aada77f0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aada74e7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aada74e7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aada74e67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdpvf0fs5                        0x0000564c1b89c495 <unavailable> + 5269

    5    libc.so.6                          0x00002aada79dc460 __libc_start_main +
    245

    6    tmpdpvf0fs5                        0x0000564c1b89c149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for _ in 1...n {\n        a.append(0)\n\
    \    }\n    for _ in 1...n {\n        a[n - 1] += 1\n    }\n    for _ in 1...n\
    \ {\n        a[n - 1] += 1\n    }\n    return a.filter{ $0 % 3 == 0 }.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpc0dn2lax/tmpc0dn2lax.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c9b698c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c9b38fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c9b38f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c9b38e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc0dn2lax                        0x000055d537e665a5 <unavailable> + 5541

    5    libc.so.6                          0x00002b0c9b884460 __libc_start_main +
    245

    6    tmpc0dn2lax                        0x000055d537e66259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp_42tbj6u/tmp_42tbj6u.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7390c0fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7390906b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7390906988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73909057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_42tbj6u                        0x000055b12be59495 <unavailable> + 5269

    5    libc.so.6                          0x00002b7390dfb460 __libc_start_main +
    245

    6    tmp_42tbj6u                        0x000055b12be59149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] + a[k] {\n                        a[i]\
    \ = a[j] + a[k]\n                    }\n                }\n            }\n   \
    \     }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b1ba5026c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1ba4d1d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b1ba4d1d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b1ba4d1d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b1ba4d1cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b1ba4b1ce83 <unavailable> + 188035

    6    tmpfhjz5m9d                        0x000055fb56877ab0 <unavailable> + 6832

    7    tmpfhjz5m9d                        0x000055fb56877468 <unavailable> + 5224

    8    libc.so.6                          0x00002b1ba5212460 __libc_start_main +
    245

    9    tmpfhjz5m9d                        0x000055fb56877189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [0]\n    for i in 1...n {\n        for j in 1...n {\n\
    \            for k in 1...n {\n                if i != j && i != k && j != k {\n\
    \                    a[0] += i * i - i + 1\n                    a[1] += j * j\
    \ - j + 1\n                    a[2] += k * k - k + 1\n                }\n    \
    \        }\n        }\n    }\n    return a[0]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae82dd18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae82da0f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae82da0f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae82da0f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae82da0ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae82d80e7ec <unavailable> + 186348

    6    tmpv29da7i0                        0x00005576f708cc1a <unavailable> + 7194

    7    tmpv29da7i0                        0x00005576f708c478 <unavailable> + 5240

    8    libc.so.6                          0x00002ae82df04460 __libc_start_main +
    245

    9    tmpv29da7i0                        0x00005576f708c199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    let triple = i * i * i - i * i + i * j + i * k\n  \
    \                  if triple % 3 == 0 {\n                        a.append(triple)\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpw0q0g6xi/tmpw0q0g6xi.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca761bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca7312b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca7312988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca73117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw0q0g6xi                        0x000055b939711495 <unavailable> + 5269

    5    libc.so.6                          0x00002b3ca7807460 __libc_start_main +
    245

    6    tmpw0q0g6xi                        0x000055b939711149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && j != k && i !=\
    \ k {\n                    a.append(i * i - i + 1)\n                }\n      \
    \      }\n        }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpja4tr_k_/tmpja4tr_k_.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7df628fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7df5f86b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7df5f86988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7df5f857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpja4tr_k_                        0x000055e94dfdf495 <unavailable> + 5269

    5    libc.so.6                          0x00002b7df647b460 __libc_start_main +
    245

    6    tmpja4tr_k_                        0x000055e94dfdf149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a: [Int] = []\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i < j < k {\n          \
    \          a[i] = i * i - i + 1\n                }\n            }\n        }\n\
    \    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmplscxzdff.swift:17:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmplscxzdff.swift:17:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i < j && j < k && i < k\
    \ {\n                    a.append(i*i - i + 1)\n                }\n          \
    \  }\n        }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp53sqh_po/tmp53sqh_po.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2086042c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2085d39b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2085d39988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2085d387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp53sqh_po                        0x0000557cd68dd495 <unavailable> + 5269

    5    libc.so.6                          0x00002b208622e460 __libc_start_main +
    245

    6    tmp53sqh_po                        0x0000557cd68dd149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && j != k && i !=\
    \ k {\n                    if a[i] + a[j] + a[k] == i*i*i + j*j*j + k*k*k {\n\
    \                        a.append(i)\n                        a.append(j)\n  \
    \                      a.append(k)\n                    }\n                }\n\
    \            }\n        }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b5383f11c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5383c08561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5383c08286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b5383c0813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5383c07bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b5383a07e83 <unavailable> + 188035

    6    tmphwy8xqfb                        0x000055dd0a485ac0 <unavailable> + 6848

    7    tmphwy8xqfb                        0x000055dd0a485478 <unavailable> + 5240

    8    libc.so.6                          0x00002b53840fd460 __libc_start_main +
    245

    9    tmphwy8xqfb                        0x000055dd0a485199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    let triple = i * i - i + 1 + j * j - j + k * k\n  \
    \                  if triple % 3 == 0 {\n                        a.append(triple)\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp3fwrivqq/tmp3fwrivqq.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b74b2b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74b285cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74b285c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74b285b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3fwrivqq                        0x0000563208850495 <unavailable> + 5269

    5    libc.so.6                          0x00002b74b2d51460 __libc_start_main +
    245

    6    tmp3fwrivqq                        0x0000563208850149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i < j < k {\n          \
    \          a.append(i * i - i + 1)\n                }\n            }\n       \
    \ }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpqkoourtf.swift:17:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpqkoourtf.swift:17:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824871
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i < j < k {\n          \
    \          a.append(i*i - i + 1)\n                }\n            }\n        }\n\
    \    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpvzbnexa8.swift:17:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpvzbnexa8.swift:17:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824871
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array(0..<n).map { Int($0 * $0 - $0 + 1) }\n    var count\
    \ = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n\
    \ {\n                if i < j < k {\n                    let sum = Int(a[i] +\
    \ a[j] + a[k])\n                    if sum % 3 == 0 {\n                      \
    \  count += 1\n                    }\n                }\n            }\n     \
    \   }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmptcz18792.swift:18:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmptcz18792.swift:18:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824876
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [0]\n    for i in 1...n {\n        a[i] = i * i - i +\
    \ 1\n    }\n    return a.maxElement()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpt52am3bh.swift:17:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] + a[k] {\n                        a[i]\
    \ = a[j] + a[k]\n                    }\n                }\n            }\n   \
    \     }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b1ba5026c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1ba4d1d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b1ba4d1d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b1ba4d1d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b1ba4d1cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b1ba4b1ce83 <unavailable> + 188035

    6    tmpfhjz5m9d                        0x000055fb56877ab0 <unavailable> + 6832

    7    tmpfhjz5m9d                        0x000055fb56877468 <unavailable> + 5224

    8    libc.so.6                          0x00002b1ba5212460 __libc_start_main +
    245

    9    tmpfhjz5m9d                        0x000055fb56877189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array(0..<n)\n    var count = 0\n    for i in 0..<n {\n\
    \        for j in 0..<n {\n            for k in 0..<n {\n                if i\
    \ != j && i != k && j != k {\n                    a[i] = a[i] + a[j] + a[k]\n\
    \                    if a[i] % 3 == 0 {\n                        count += 1\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmps6p_occi/tmps6p_occi.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad18db8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad18aafb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad18aaf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad18aae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps6p_occi                        0x0000557d62a91515 <unavailable> + 5397

    5    libc.so.6                          0x00002aad18fa4460 __libc_start_main +
    245

    6    tmps6p_occi                        0x0000557d62a911c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array(0..<n)\n    var count = 0\n    for i in 0..<n {\n\
    \        for j in 0..<n {\n            for k in 0..<n {\n                if i\
    \ < j < k {\n                    a[i] = i * i - i + 1\n                    count\
    \ += 1\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpp9xb0c6o.swift:18:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpp9xb0c6o.swift:18:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824871
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    return a.maxElement()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp1b7pa21x.swift:17:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for _ in 1...n {\n        a.append(0)\n \
    \   }\n    for _ in 1...n {\n        for _ in 1...n {\n            for _ in 1...n\
    \ {\n                a[n-1] += a[n-1] + a[n-1]\n            }\n        }\n   \
    \ }\n    return a[n-1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpnd1u2b1b/tmpnd1u2b1b.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acbb3ee2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acbb3bd9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acbb3bd9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acbb3bd87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnd1u2b1b                        0x00005599311e9495 <unavailable> + 5269

    5    libc.so.6                          0x00002acbb40ce460 __libc_start_main +
    245

    6    tmpnd1u2b1b                        0x00005599311e9149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array(0..<n)\n    var count = 0\n    for i in 0..<n {\n\
    \        for j in 0..<n {\n            for k in 0..<n {\n                if i\
    \ != j && i != k && j != k {\n                    a[i] = i * i - i + 1\n     \
    \               count += 1\n                }\n            }\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpvlnu1qsj/tmpvlnu1qsj.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acc011cac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc00ec1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acc00ec1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acc00ec07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvlnu1qsj                        0x00005646809cc4c5 <unavailable> + 5317

    5    libc.so.6                          0x00002acc013b6460 __libc_start_main +
    245

    6    tmpvlnu1qsj                        0x00005646809cc179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && j != k && i !=\
    \ k {\n                    if a[j] > a[k] && a[j] > a[i] {\n                 \
    \       a[j] = a[k]\n                    }\n                    if a[k] > a[j]\
    \ && a[k] > a[i] {\n                        a[k] = a[j]\n                    }\n\
    \                    if a[i] > a[j] && a[i] > a[k] {\n                       \
    \ a[i] = a[j]\n                    }\n                }\n            }\n     \
    \   }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b088f8dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b088f5d2561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b088f5d2286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b088f5d213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b088f5d1bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b088f3d1e83 <unavailable> + 188035

    6    tmplnza29u6                        0x00005645f8648ab0 <unavailable> + 6832

    7    tmplnza29u6                        0x00005645f8648468 <unavailable> + 5224

    8    libc.so.6                          0x00002b088fac7460 __libc_start_main +
    245

    9    tmplnza29u6                        0x00005645f8648189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>(n)\n    for i in 0..<n {\n        a[i] = i\
    \ * i - i + 1\n    }\n    return a.filter { (i, j, k) -> Bool in\n        i <\
    \ j < k\n    }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpfaz4mrcg.swift:13:24: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array<Int>(n)\n                       ^\n             \
    \          arrayLiteral: \n/tmp/tmpfaz4mrcg.swift:18:11: error: adjacent operators\
    \ are in non-associative precedence group 'ComparisonPrecedence'\n        i <\
    \ j < k\n          ^   ~\n/tmp/tmpfaz4mrcg.swift:18:15: error: binary operator\
    \ '<' cannot be applied to operands of type 'Bool' and '()'\n        i < j < k\n\
    \        ~~~~~ ^ ~\n/tmp/tmpfaz4mrcg.swift:18:15: note: overloads for '<' exist\
    \ with these partially matching parameter lists: ((), ()), (AnyIndex, AnyIndex),\
    \ (Character, Character), (ContinuousClock.Instant, ContinuousClock.Instant),\
    \ (Duration, Duration), (Int, Int), (Int16, Int16), (Int32, Int32), (Int64, Int64),\
    \ (Int8, Int8), (Never, Never), (ObjectIdentifier, ObjectIdentifier), (String,\
    \ String), (String.Index, String.Index), (SuspendingClock.Instant, SuspendingClock.Instant),\
    \ (TaskPriority, TaskPriority), (UInt, UInt), (UInt16, UInt16), (UInt32, UInt32),\
    \ (UInt64, UInt64), (UInt8, UInt8), (Unicode.CanonicalCombiningClass, Unicode.CanonicalCombiningClass),\
    \ (Unicode.Scalar, Unicode.Scalar), (_ValidUTF8Buffer.Index, _ValidUTF8Buffer.Index)\n\
    \        i < j < k\n              ^\n"
  stdout: ''
  timestamp: 1659824872
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    return a.maxElement()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp1b7pa21x.swift:17:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for _ in 1...n {\n        a.append(0)\n \
    \   }\n    var count = 0\n    for i in 1...n {\n        for j in 1...n {\n   \
    \         for k in 1...n {\n                if i != j && i != k && j != k {\n\
    \                    a[i] = a[i] + a[j] + a[k]\n                    if a[i] %\
    \ 3 == 0 {\n                        count += 1\n                    }\n      \
    \          }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b822177cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8221473561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8221473286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b822147313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8221472bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8221272e83 <unavailable> + 188035

    6    tmp5ldvvk70                        0x00005559891f0c0a <unavailable> + 7178

    7    tmp5ldvvk70                        0x00005559891f0428 <unavailable> + 5160

    8    libc.so.6                          0x00002b8221968460 __libc_start_main +
    245

    9    tmp5ldvvk70                        0x00005559891f0149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && j != k && i !=\
    \ k {\n                    if a[i] == a[j] + a[k] {\n                        return\
    \ 1\n                    }\n                }\n            }\n        }\n    }\n\
    \    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ade4d3bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade4d0b1561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ade4d0b1286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ade4d0b113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ade4d0b0bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ade4ceb0e83 <unavailable> + 188035

    6    tmpl__6s940                        0x00005618227c7a4d <unavailable> + 6733

    7    tmpl__6s940                        0x00005618227c73c8 <unavailable> + 5064

    8    libc.so.6                          0x00002ade4d5a6460 __libc_start_main +
    245

    9    tmpl__6s940                        0x00005618227c70e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    let sum = i * i - i + j * j + k * k\n             \
    \       if sum % 3 == 0 {\n                        a.append(sum)\n           \
    \         }\n                }\n            }\n        }\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpb9yowzko/tmpb9yowzko.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adcd212cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adcd1e23b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adcd1e23988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adcd1e227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb9yowzko                        0x0000562bff87e495 <unavailable> + 5269

    5    libc.so.6                          0x00002adcd2318460 __libc_start_main +
    245

    6    tmpb9yowzko                        0x0000562bff87e149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] + a[j] + a[k] == i*i*i + j*j*j + k*k*k {\n\
    \                        a.append(i)\n                        a.append(j)\n  \
    \                      a.append(k)\n                    }\n                }\n\
    \            }\n        }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b41ea6c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b41ea3b8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b41ea3b8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b41ea3b813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b41ea3b7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b41ea1b7e83 <unavailable> + 188035

    6    tmp48c1h9sk                        0x000055b940493ac0 <unavailable> + 6848

    7    tmp48c1h9sk                        0x000055b940493478 <unavailable> + 5240

    8    libc.so.6                          0x00002b41ea8ad460 __libc_start_main +
    245

    9    tmp48c1h9sk                        0x000055b940493199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>(n)\n    for i in 0..<n {\n        a[i] = i\
    \ * i - i + 1\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            for k in 0..<n {\n                if i < j < k {\n    \
    \                if a[i] < a[j] && a[i] < a[k] {\n                        count\
    \ += 1\n                    }\n                    if a[j] < a[i] && a[j] < a[k]\
    \ {\n                        count += 1\n                    }\n             \
    \       if a[k] < a[i] && a[k] < a[j] {\n                        count += 1\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp0kfrlq62.swift:13:24: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array<Int>(n)\n                       ^\n             \
    \          arrayLiteral: \n/tmp/tmp0kfrlq62.swift:21:22: error: adjacent operators\
    \ are in non-associative precedence group 'ComparisonPrecedence'\n           \
    \     if i < j < k {\n                     ^   ~\n/tmp/tmp0kfrlq62.swift:21:22:\
    \ error: cannot convert value of type 'Bool' to expected argument type 'Int'\n\
    \                if i < j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp_42tbj6u/tmp_42tbj6u.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7390c0fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7390906b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7390906988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73909057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_42tbj6u                        0x000055b12be59495 <unavailable> + 5269

    5    libc.so.6                          0x00002b7390dfb460 __libc_start_main +
    245

    6    tmp_42tbj6u                        0x000055b12be59149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            if i != j {\n                for k in 1...n {\n             \
    \       if i != k && j != k {\n                        if a[k] > a[i] + a[j] +\
    \ a[k] {\n                            a[k] = a[i] + a[j] + a[k]\n            \
    \            }\n                    }\n                }\n            }\n    \
    \    }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aad23062c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad22d59561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aad22d59286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aad22d5913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aad22d58bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aad22b58e83 <unavailable> + 188035

    6    tmph6yzfut_                        0x000055d6f8d6ba8d <unavailable> + 6797

    7    tmph6yzfut_                        0x000055d6f8d6b468 <unavailable> + 5224

    8    libc.so.6                          0x00002aad2324e460 __libc_start_main +
    245

    9    tmph6yzfut_                        0x000055d6f8d6b189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array(0..<n).map { Int($0 * $0 - $0 + 1) }\n    var count\
    \ = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n\
    \ {\n                if i < j < k {\n                    if a[i] < a[j] + a[k]\
    \ {\n                        count += 1\n                    }\n             \
    \   }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmputcia0zf.swift:18:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmputcia0zf.swift:18:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824876
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && j != k && i !=\
    \ k && a[i] + a[j] + a[k] == i*i*i - i*i + i*i + i*i + i*i + i + i + i + i + i\
    \ + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i\
    \ + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i\
    \ + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i\
    \ + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i\
    \ + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i\
    \ + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i\
    \ + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i\
    \ + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i\
    \ + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i\
    \ + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i\
    \ + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i\
    \ + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i\
    \ + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i\
    \ + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i\
    \ + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i\
    \ + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i\
    \ + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i\
    \ + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i\
    \ + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i\
    \ + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i\
    \ + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i\
    \ + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i\
    \ + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i\
    \ + i + i + i + i + i + i + i + i + i + i + i + i + i + i + \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmprnuj8s19.swift:18:1: error: expected expression after operator\n\
    }\n^\n/tmp/tmprnuj8s19.swift:36:41: error: expected '}' at end of brace statement\n\
    assert(get_max_triples(n: 100) == 53361)\n                                   \
    \     ^\n/tmp/tmprnuj8s19.swift:15:24: note: to match this opening '{'\n     \
    \   for j in 1...n {\n                       ^\n/tmp/tmprnuj8s19.swift:36:41:\
    \ error: expected '}' at end of brace statement\nassert(get_max_triples(n: 100)\
    \ == 53361)\n                                        ^\n/tmp/tmprnuj8s19.swift:14:20:\
    \ note: to match this opening '{'\n    for i in 1...n {\n                   ^\n\
    /tmp/tmprnuj8s19.swift:36:41: error: expected '}' at end of brace statement\n\
    assert(get_max_triples(n: 100) == 53361)\n                                   \
    \     ^\n/tmp/tmprnuj8s19.swift:12:37: note: to match this opening '{'\nfunc get_max_triples(n:\
    \ Int) -> Int {\n                                    ^\n/tmp/tmprnuj8s19.swift:21:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824871
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j\
    \ in 0..<n {\n            for k in 0..<n {\n                if i < j < k {\n \
    \                   if a[i] < a[j] + a[k] {\n                        count +=\
    \ 1\n                    }\n                }\n            }\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpn4t5c8sv.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpn4t5c8sv.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array(0..<n)\n    var count = 0\n    for i in 0..<n {\n\
    \        for j in 0..<n {\n            for k in 0..<n {\n                if i\
    \ < j && j < k && i < k {\n                    a[i] = a[i] + a[j] + a[k]\n   \
    \                 count += 1\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp_e2ilq08/tmp_e2ilq08.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad447651c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad447348b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad447348988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad4473477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_e2ilq08                        0x00005560a2839515 <unavailable> + 5397

    5    libc.so.6                          0x00002ad44783d460 __libc_start_main +
    245

    6    tmp_e2ilq08                        0x00005560a28391c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [0]\n    for i in 1...n {\n        a[i] = a[i] * a[i]\
    \ - a[i] + i + 1\n    }\n    return a.maxElement()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpaqlg_ywi.swift:17:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824871
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [0]\n    for i in 1...n {\n        a[i] = a[i] * a[i]\
    \ - a[i] + i + 1\n    }\n    return a.maxElement()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpaqlg_ywi.swift:17:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            if i != j {\n                for k in 1...n {\n             \
    \       if i != k && j != k {\n                        if a[k] == 0 || (a[k] ==\
    \ (a[i] + a[j] + a[k]) % 3) {\n                            a[k] = (a[i] + a[j]\
    \ + a[k]) % 3\n                        }\n                    }\n            \
    \    }\n            }\n        }\n    }\n    return a.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b2358c47c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b235893e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b235893e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b235893e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b235893dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b235873de83 <unavailable> + 188035

    6    tmp79d3_1z9                        0x000055d8bb611a8d <unavailable> + 6797

    7    tmp79d3_1z9                        0x000055d8bb611468 <unavailable> + 5224

    8    libc.so.6                          0x00002b2358e33460 __libc_start_main +
    245

    9    tmp79d3_1z9                        0x000055d8bb611189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for _ in 1...n {\n        a.append(0)\n\
    \    }\n    for _ in 1...n {\n        for _ in 1...n {\n            for _ in 1...n\
    \ {\n                a[n] = a[n] * a[n] - a[n] + 1\n                if a[n] %\
    \ 3 == 0 {\n                    return Int(a[n] / 3)\n                }\n    \
    \        }\n        }\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b31ebc44c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b31eb93b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b31eb93b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b31eb93b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b31eb93abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b31eb73ae83 <unavailable> + 188035

    6    tmpct65sg8k                        0x0000561283ec8b7f <unavailable> + 7039

    7    tmpct65sg8k                        0x0000561283ec8558 <unavailable> + 5464

    8    libc.so.6                          0x00002b31ebe30460 __libc_start_main +
    245

    9    tmpct65sg8k                        0x0000561283ec8279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && j != k && i !=\
    \ k {\n                    a.append(i*i - i + 1)\n                }\n        \
    \    }\n        }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpdyo8x7q7/tmpdyo8x7q7.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c49b13c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c4980ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c4980a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c498097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdyo8x7q7                        0x0000561bb9781495 <unavailable> + 5269

    5    libc.so.6                          0x00002b7c49cff460 __libc_start_main +
    245

    6    tmpdyo8x7q7                        0x0000561bb9781149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>(n)\n    for i in 0..<n {\n        a[i] = i\
    \ * i - i + 1\n    }\n    return a.maxTriples(of: 3)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpdr7t3an9.swift:13:24: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array<Int>(n)\n                       ^\n             \
    \          arrayLiteral: \n"
  stdout: ''
  timestamp: 1659824871
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>(n)\n    for i in 0..<n {\n        a[i] = i\
    \ * i - i + 1\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            for k in 0..<n {\n                if i != j && i != k &&\
    \ j != k {\n                    if a[i] < a[j] && a[i] < a[k] {\n            \
    \            if a[j] < a[k] {\n                            count += 1\n      \
    \                  }\n                    }\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmphc877e8k.swift:13:24: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array<Int>(n)\n                       ^\n             \
    \          arrayLiteral: \n"
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && j != k && i !=\
    \ k {\n                    let sum = i * i - i + j * j + k * k\n             \
    \       if sum % 3 == 0 {\n                        a.append(sum)\n           \
    \         }\n                }\n            }\n        }\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmp3e3yikp_/tmp3e3yikp_.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2bc8de9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2bc8ae0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2bc8ae0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2bc8adf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3e3yikp_                        0x000055d5d62ed495 <unavailable> + 5269

    5    libc.so.6                          0x00002b2bc8fd5460 __libc_start_main +
    245

    6    tmp3e3yikp_                        0x000055d5d62ed149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    let sum = i * i - i + j * j + k * k\n             \
    \       if sum % 3 == 0 {\n                        a.append(sum)\n           \
    \         }\n                }\n            }\n        }\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpdpvf0fs5/tmpdpvf0fs5.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aada77f0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aada74e7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aada74e7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aada74e67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdpvf0fs5                        0x0000564c1b89c495 <unavailable> + 5269

    5    libc.so.6                          0x00002aada79dc460 __libc_start_main +
    245

    6    tmpdpvf0fs5                        0x0000564c1b89c149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array(0..<n)\n    var count = 0\n    for i in 0..<n {\n\
    \        for j in 0..<n {\n            for k in 0..<n {\n                if i\
    \ < j < k {\n                    a[i] = i * i - i + 1\n                    count\
    \ += 1\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpp9xb0c6o.swift:18:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpp9xb0c6o.swift:18:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    let triple = i * i - i + j + k\n                  \
    \  if triple % 3 == 0 {\n                        a.append(triple)\n          \
    \          }\n                }\n            }\n        }\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpvkcqdp7p/tmpvkcqdp7p.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af072b58c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af07284fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af07284f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af07284e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvkcqdp7p                        0x00005626e9336495 <unavailable> + 5269

    5    libc.so.6                          0x00002af072d44460 __libc_start_main +
    245

    6    tmpvkcqdp7p                        0x00005626e9336149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [0]\n    for i in 1...n {\n        a[i] = a[i] * a[i]\
    \ - a[i] + i + 1\n    }\n    return a.maxElement()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpaqlg_ywi.swift:17:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    let sum = i * i - i + j * j + k * k\n             \
    \       if sum % 3 == 0 {\n                        a.append(sum)\n           \
    \         }\n                }\n            }\n        }\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpdpvf0fs5/tmpdpvf0fs5.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aada77f0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aada74e7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aada74e7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aada74e67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdpvf0fs5                        0x0000564c1b89c495 <unavailable> + 5269

    5    libc.so.6                          0x00002aada79dc460 __libc_start_main +
    245

    6    tmpdpvf0fs5                        0x0000564c1b89c149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j\
    \ in 0..<n {\n            for k in 0..<n {\n                if i < j < k {\n \
    \                   if a[i] < a[j] + a[k] {\n                        count +=\
    \ 1\n                    }\n                }\n            }\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpn4t5c8sv.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpn4t5c8sv.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824871
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>(n)\n    for i in 0..<n {\n        a[i] = i\
    \ * i - i + 1\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            for k in 0..<n {\n                if i < j < k {\n    \
    \                if a[i] < a[j] || a[i] < a[k] || a[j] < a[k] {\n            \
    \            count += 1\n                    }\n                }\n          \
    \  }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpsfi77rfj.swift:13:24: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array<Int>(n)\n                       ^\n             \
    \          arrayLiteral: \n/tmp/tmpsfi77rfj.swift:21:22: error: adjacent operators\
    \ are in non-associative precedence group 'ComparisonPrecedence'\n           \
    \     if i < j < k {\n                     ^   ~\n/tmp/tmpsfi77rfj.swift:21:22:\
    \ error: cannot convert value of type 'Bool' to expected argument type 'Int'\n\
    \                if i < j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824873
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    return a.maxElement()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp1b7pa21x.swift:17:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824871
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j\
    \ in 0..<n {\n            for k in 0..<n {\n                if i < j < k {\n \
    \                   if a[i] < a[j] < a[k] {\n                        count +=\
    \ 1\n                    }\n                }\n            }\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp3w30jspx.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmp3w30jspx.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n/tmp/tmp3w30jspx.swift:22:29: error: adjacent\
    \ operators are in non-associative precedence group 'ComparisonPrecedence'\n \
    \                   if a[i] < a[j] < a[k] {\n                            ^   \
    \   ~\n/tmp/tmp3w30jspx.swift:22:29: error: cannot convert value of type 'Bool'\
    \ to expected argument type 'Int'\n                    if a[i] < a[j] < a[k] {\n\
    \                            ^\n"
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    a[i] = a[i] + a[j] + a[k]\n                }\n    \
    \        }\n        }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6e34a74c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6e3476b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6e3476b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6e3476b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6e3476abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6e3456ae83 <unavailable> + 188035

    6    tmp_nh1wdig                        0x000055b1d6b54ab0 <unavailable> + 6832

    7    tmp_nh1wdig                        0x000055b1d6b54468 <unavailable> + 5224

    8    libc.so.6                          0x00002b6e34c60460 __libc_start_main +
    245

    9    tmp_nh1wdig                        0x000055b1d6b54189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i < j < k {\n          \
    \          let triple = i + j + k\n                    if triple % 3 == 0 {\n\
    \                        a.append(triple)\n                    }\n           \
    \     }\n            }\n        }\n    }\n    return a.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp5yjb0lsh.swift:17:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmp5yjb0lsh.swift:17:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824871
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i*i\
    \ - i + 1)\n    }\n    return a.maxElement()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp48hjf58g.swift:17:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            if i != j {\n                for k in 1...n {\n             \
    \       if i != k {\n                        if j != k {\n                   \
    \         if i != j && j != k && k != i {\n                                a.append(i*i*i\
    \ - i*i + i*j + i*k)\n                            }\n                        }\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp7di6z0mf/tmp7di6z0mf.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d49f92c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d49c89b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d49c89988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d49c887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7di6z0mf                        0x000055d9d5a91495 <unavailable> + 5269

    5    libc.so.6                          0x00002b4d4a17e460 __libc_start_main +
    245

    6    tmp7di6z0mf                        0x000055d9d5a91149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824872
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for _ in 1...n {\n        a.append(0)\n \
    \   }\n    for _ in 1...n {\n        a[n - 1] += 1\n    }\n    var count = 0\n\
    \    for _ in 1...n {\n        if a[n - 1] % 3 == 0 {\n            count += 1\n\
    \        }\n        a[n - 1] -= 1\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpx5zcfgj3/tmpx5zcfgj3.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b74b19b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74b16abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74b16ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74b16aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx5zcfgj3                        0x000055cf546ef510 <unavailable> + 5392

    5    libc.so.6                          0x00002b74b1ba0460 __libc_start_main +
    245

    6    tmpx5zcfgj3                        0x000055cf546ef149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824872
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a: [Int] = []\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    let sum = i * i + j * j + k * k\n                 \
    \   if sum % 3 == 0 {\n                        a.append(sum)\n               \
    \     }\n                }\n            }\n        }\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpl10n944f/tmpl10n944f.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4033efec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4033bf5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4033bf5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4033bf47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl10n944f                        0x00005632835224a5 <unavailable> + 5285

    5    libc.so.6                          0x00002b40340ea460 __libc_start_main +
    245

    6    tmpl10n944f                        0x0000563283522159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1659824872
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    a[i] = a[i] + a[j] + a[k]\n                }\n    \
    \        }\n        }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6e34a74c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6e3476b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6e3476b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6e3476b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6e3476abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6e3456ae83 <unavailable> + 188035

    6    tmp_nh1wdig                        0x000055b1d6b54ab0 <unavailable> + 6832

    7    tmp_nh1wdig                        0x000055b1d6b54468 <unavailable> + 5224

    8    libc.so.6                          0x00002b6e34c60460 __libc_start_main +
    245

    9    tmp_nh1wdig                        0x000055b1d6b54189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a: [Int] = []\n    for _ in 1...n {\n        a.append(0)\n\
    \    }\n    var count = 0\n    for i in 1...n {\n        for j in 1...n {\n  \
    \          for k in 1...n {\n                if i < j < k {\n                \
    \    a[i] = a[i] + a[j] + a[k]\n                    if a[i] % 3 == 0 {\n     \
    \                   count += 1\n                    }\n                }\n   \
    \         }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpfmyu03q9.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpfmyu03q9.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824872
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [0]\n    for i in 1...n {\n        for j in 1...n {\n\
    \            for k in 1...n {\n                if i < j < k {\n              \
    \      a[i] = a[i] + a[j] + a[k]\n                }\n            }\n        }\n\
    \    }\n    return a.max() % 3 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpz_shvyaq.swift:17:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpz_shvyaq.swift:17:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n/tmp/tmpz_shvyaq.swift:23:14: error: value\
    \ of optional type 'Int?' must be unwrapped to a value of type 'Int'\n    return\
    \ a.max() % 3 == 0\n             ^\n/tmp/tmpz_shvyaq.swift:23:14: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \ return a.max() % 3 == 0\n             ^\n           (       ?? <#default value#>)\n\
    /tmp/tmpz_shvyaq.swift:23:14: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n    return a.max() % 3 == 0\n        \
    \     ^\n                  !\n/tmp/tmpz_shvyaq.swift:23:24: error: cannot convert\
    \ return expression of type 'Bool' to return type 'Int'\n    return a.max() %\
    \ 3 == 0\n           ~~~~~~~~~~~~^~~~\n"
  stdout: ''
  timestamp: 1659824872
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && j != k && i !=\
    \ k {\n                    let sum = i * i - i + j * j + k * k\n             \
    \       if sum % 3 == 0 {\n                        a.append(sum)\n           \
    \         }\n                }\n            }\n        }\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmp3e3yikp_/tmp3e3yikp_.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2bc8de9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2bc8ae0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2bc8ae0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2bc8adf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3e3yikp_                        0x000055d5d62ed495 <unavailable> + 5269

    5    libc.so.6                          0x00002b2bc8fd5460 __libc_start_main +
    245

    6    tmp3e3yikp_                        0x000055d5d62ed149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    return a.maxElement()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp1b7pa21x.swift:17:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824871
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array(n + 1)\n    for i : Int in 1...n {\n        a[i]\
    \ = i * i - i + 1\n    }\n    var count = 0\n    for i : Int in 1...n {\n    \
    \    for j : Int in 1...n {\n            for k : Int in 1...n {\n            \
    \    if i != j && i != k && j != k {\n                    if a[i + j] + a[j +\
    \ k] == a[i + k] {\n                        count += 1\n                    }\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpp3bnd2j4.swift:13:19: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array(n + 1)\n                  ^\n                  arrayLiteral:\
    \ \n"
  stdout: ''
  timestamp: 1659824874
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    a[i] = a[i] + a[j] + a[k]\n                }\n    \
    \        }\n        }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6e34a74c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6e3476b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6e3476b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6e3476b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6e3476abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6e3456ae83 <unavailable> + 188035

    6    tmp_nh1wdig                        0x000055b1d6b54ab0 <unavailable> + 6832

    7    tmp_nh1wdig                        0x000055b1d6b54468 <unavailable> + 5224

    8    libc.so.6                          0x00002b6e34c60460 __libc_start_main +
    245

    9    tmp_nh1wdig                        0x000055b1d6b54189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    return a.maxElement()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp1b7pa21x.swift:17:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824871
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [0]\n    for i in 1...n {\n        a[i] = a[i] * a[i]\
    \ - a[i] + i + 1\n    }\n    return a.maxElement()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpaqlg_ywi.swift:17:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a: [Int] = []\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    a[i] = a[i] + a[j] + a[k]\n                }\n    \
    \        }\n        }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002afff896bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afff8662561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002afff8662286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002afff866213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002afff8661bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002afff8461e83 <unavailable> + 188035

    6    tmp80nih8m0                        0x00005573dd2ceadb <unavailable> + 6875

    7    tmp80nih8m0                        0x00005573dd2ce488 <unavailable> + 5256

    8    libc.so.6                          0x00002afff8b57460 __libc_start_main +
    245

    9    tmp80nih8m0                        0x00005573dd2ce1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824872
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [0]\n    for i in 1...n {\n        a[i] = a[i] * a[i]\
    \ - a[i] + i + 1\n    }\n    return a.maxElement()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpaqlg_ywi.swift:17:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824871
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>(n)\n    for i in 0..<n {\n        a[i] = i\
    \ * i - i + 1\n    }\n    return a.maxTriples()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp3duq1y9a.swift:13:24: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array<Int>(n)\n                       ^\n             \
    \          arrayLiteral: \n"
  stdout: ''
  timestamp: 1659824872
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>(n)\n    for i in 0..<n {\n        a[i] = i\
    \ * i - i + 1\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            for k in 0..<n {\n                if i < j < k {\n    \
    \                if a[i] < a[j] + a[k] {\n                        count += 1\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp87t24vp0.swift:13:24: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array<Int>(n)\n                       ^\n             \
    \          arrayLiteral: \n/tmp/tmp87t24vp0.swift:21:22: error: adjacent operators\
    \ are in non-associative precedence group 'ComparisonPrecedence'\n           \
    \     if i < j < k {\n                     ^   ~\n/tmp/tmp87t24vp0.swift:21:22:\
    \ error: cannot convert value of type 'Bool' to expected argument type 'Int'\n\
    \                if i < j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp_42tbj6u/tmp_42tbj6u.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7390c0fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7390906b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7390906988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73909057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_42tbj6u                        0x000055b12be59495 <unavailable> + 5269

    5    libc.so.6                          0x00002b7390dfb460 __libc_start_main +
    245

    6    tmp_42tbj6u                        0x000055b12be59149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [0]\n    for i in 1...n {\n        a[i] = a[i] * a[i]\
    \ - a[i] + i + 1\n    }\n    return a.maxElement()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpaqlg_ywi.swift:17:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && j != k && i !=\
    \ k {\n                    a[i] = a[i] + a[j] + a[k]\n                }\n    \
    \        }\n        }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c60df4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c60aeb561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8c60aeb286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8c60aeb13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8c60aeabb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8c608eae83 <unavailable> + 188035

    6    tmpvtom7yw2                        0x000055f5d571eab0 <unavailable> + 6832

    7    tmpvtom7yw2                        0x000055f5d571e468 <unavailable> + 5224

    8    libc.so.6                          0x00002b8c60fe0460 __libc_start_main +
    245

    9    tmpvtom7yw2                        0x000055f5d571e189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659824872
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array(0..<n)\n    var count = 0\n    for i in 0..<n {\n\
    \        for j in 0..<n {\n            for k in 0..<n {\n                if i\
    \ != j && i != k && j != k {\n                    a[i] = i * i - i + 1\n     \
    \               count += 1\n                }\n            }\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpvlnu1qsj/tmpvlnu1qsj.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acc011cac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc00ec1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acc00ec1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acc00ec07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvlnu1qsj                        0x00005646809cc4c5 <unavailable> + 5317

    5    libc.so.6                          0x00002acc013b6460 __libc_start_main +
    245

    6    tmpvlnu1qsj                        0x00005646809cc179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for _ in 1...n {\n        a.append(0)\n \
    \   }\n    var count = 0\n    for _ in 1...n {\n        if a[0] > 0 {\n      \
    \      count += 1\n        }\n        a[0] += a[0] + a[1] + a[2]\n        a[1]\
    \ += a[0] + a[1] + a[2]\n        a[2] += a[0] + a[1] + a[2]\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5) ==\
    \ 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) == 36)\n\
    assert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpumfwka3w/tmpumfwka3w.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b63722d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6371fc9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6371fc9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6371fc87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpumfwka3w                        0x0000559aa95f7495 <unavailable> + 5269

    5    libc.so.6                          0x00002b63724be460 __libc_start_main +
    245

    6    tmpumfwka3w                        0x0000559aa95f7149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824872
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>(n)\n    for i in 0..<n {\n        a[i] = i\
    \ * i - i + 1\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            for k in 0..<n {\n                if i < j < k {\n    \
    \                if a[i] < a[j] < a[k] {\n                        count += 1\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpjblt8g95.swift:13:24: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array<Int>(n)\n                       ^\n             \
    \          arrayLiteral: \n/tmp/tmpjblt8g95.swift:21:22: error: adjacent operators\
    \ are in non-associative precedence group 'ComparisonPrecedence'\n           \
    \     if i < j < k {\n                     ^   ~\n/tmp/tmpjblt8g95.swift:21:22:\
    \ error: cannot convert value of type 'Bool' to expected argument type 'Int'\n\
    \                if i < j < k {\n                     ^\n/tmp/tmpjblt8g95.swift:22:29:\
    \ error: adjacent operators are in non-associative precedence group 'ComparisonPrecedence'\n\
    \                    if a[i] < a[j] < a[k] {\n                            ^  \
    \    ~\n/tmp/tmpjblt8g95.swift:22:36: error: binary operator '<' cannot be applied\
    \ to operands of type 'Bool' and '()'\n                    if a[i] < a[j] < a[k]\
    \ {\n                       ~~~~~~~~~~~ ^ ~~~~\n/tmp/tmpjblt8g95.swift:22:36:\
    \ note: overloads for '<' exist with these partially matching parameter lists:\
    \ ((), ()), (AnyIndex, AnyIndex), (Character, Character), (ContinuousClock.Instant,\
    \ ContinuousClock.Instant), (Duration, Duration), (Int, Int), (Int16, Int16),\
    \ (Int32, Int32), (Int64, Int64), (Int8, Int8), (Never, Never), (ObjectIdentifier,\
    \ ObjectIdentifier), (String, String), (String.Index, String.Index), (SuspendingClock.Instant,\
    \ SuspendingClock.Instant), (TaskPriority, TaskPriority), (UInt, UInt), (UInt16,\
    \ UInt16), (UInt32, UInt32), (UInt64, UInt64), (UInt8, UInt8), (Unicode.CanonicalCombiningClass,\
    \ Unicode.CanonicalCombiningClass), (Unicode.Scalar, Unicode.Scalar), (_ValidUTF8Buffer.Index,\
    \ _ValidUTF8Buffer.Index)\n                    if a[i] < a[j] < a[k] {\n     \
    \                              ^\n"
  stdout: ''
  timestamp: 1659824872
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a: [Int] = []\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] == a[j] + a[k] {\n                        return\
    \ 1\n                    }\n                }\n            }\n        }\n    }\n\
    \    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b43d70c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b43a67561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b9b43a67286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b9b43a6713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b9b43a66bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b9b43866e83 <unavailable> + 188035

    6    tmpued7ie1a                        0x000055a0bc44fa78 <unavailable> + 6776

    7    tmpued7ie1a                        0x000055a0bc44f3e8 <unavailable> + 5096

    8    libc.so.6                          0x00002b9b43f5c460 __libc_start_main +
    245

    9    tmpued7ie1a                        0x000055a0bc44f109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1659824872
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [0]\n    for i in 1...n {\n        for j in 1...n {\n\
    \            for k in 1...n {\n                if i != j && j != k && i != k &&\
    \ a[i] + a[j] + a[k] == 3 {\n                    a[i] = a[i] + a[j] + a[k]\n \
    \               }\n            }\n        }\n    }\n    return a.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae7c98ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae7c95d4561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae7c95d4286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae7c95d413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae7c95d3bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae7c93d3e83 <unavailable> + 188035

    6    tmplr2xtmoj                        0x0000555dfb38db42 <unavailable> + 6978

    7    tmplr2xtmoj                        0x0000555dfb38d4d8 <unavailable> + 5336

    8    libc.so.6                          0x00002ae7c9ac9460 __libc_start_main +
    245

    9    tmplr2xtmoj                        0x0000555dfb38d1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824872
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a: [Int] = []\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    let triple = i * i * i - i + j * j + k * k\n      \
    \              if triple % 3 == 0 {\n                        a.append(triple)\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpxvy5ehbt/tmpxvy5ehbt.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b328bf06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b328bbfdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b328bbfd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b328bbfc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxvy5ehbt                        0x000055f6c620b4a5 <unavailable> + 5285

    5    libc.so.6                          0x00002b328c0f2460 __libc_start_main +
    245

    6    tmpxvy5ehbt                        0x000055f6c620b159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1659824872
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    return a.maxElement()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp1b7pa21x.swift:17:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824871
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i < j < k {\n          \
    \          a[i] = i * i - i + 1\n                }\n            }\n        }\n\
    \    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpzhhpcwcb.swift:17:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpzhhpcwcb.swift:17:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824872
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp_42tbj6u/tmp_42tbj6u.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7390c0fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7390906b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7390906988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73909057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_42tbj6u                        0x000055b12be59495 <unavailable> + 5269

    5    libc.so.6                          0x00002b7390dfb460 __libc_start_main +
    245

    6    tmp_42tbj6u                        0x000055b12be59149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>(n)\n    for i in 0..<n {\n        a[i] = i\
    \ * i - i + 1\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            for k in 0..<n {\n                if i < j < k {\n    \
    \                if a[i] < a[j] || a[i] < a[k] || a[j] < a[k] {\n            \
    \            count += 1\n                    }\n                }\n          \
    \  }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpsfi77rfj.swift:13:24: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array<Int>(n)\n                       ^\n             \
    \          arrayLiteral: \n/tmp/tmpsfi77rfj.swift:21:22: error: adjacent operators\
    \ are in non-associative precedence group 'ComparisonPrecedence'\n           \
    \     if i < j < k {\n                     ^   ~\n/tmp/tmpsfi77rfj.swift:21:22:\
    \ error: cannot convert value of type 'Bool' to expected argument type 'Int'\n\
    \                if i < j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824873
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && j != k && i !=\
    \ k {\n                    a.append(i*i - i + 1)\n                }\n        \
    \    }\n        }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpdyo8x7q7/tmpdyo8x7q7.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c49b13c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c4980ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c4980a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c498097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdyo8x7q7                        0x0000561bb9781495 <unavailable> + 5269

    5    libc.so.6                          0x00002b7c49cff460 __libc_start_main +
    245

    6    tmpdyo8x7q7                        0x0000561bb9781149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array(n + 1)\n    for i : Int in 1...n {\n        a[i]\
    \ = i * i - i + 1\n    }\n    var count = 0\n    for i : Int in 1...n {\n    \
    \    for j : Int in 1...n {\n            for k : Int in 1...n {\n            \
    \    if i != j && i != k && j != k {\n                    if a[i] < a[j] && a[i]\
    \ < a[k] {\n                        count += 1\n                    }\n      \
    \              if a[j] < a[i] && a[j] < a[k] {\n                        count\
    \ += 1\n                    }\n                    if a[k] < a[i] && a[k] < a[j]\
    \ {\n                        count += 1\n                    }\n             \
    \   }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp5ba6v1ns.swift:13:19: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array(n + 1)\n                  ^\n                  arrayLiteral:\
    \ \n"
  stdout: ''
  timestamp: 1659824872
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [0]\n    for i in 1...n {\n        for j in 1...n {\n\
    \            for k in 1...n {\n                if i != j && i != k && j != k {\n\
    \                    a[i] = a[i] + a[j] + a[k]\n                }\n          \
    \  }\n        }\n    }\n    return a.max() % 3 == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpygrm2ysb.swift:23:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return a.max() % 3 == 0\n       \
    \      ^\n/tmp/tmpygrm2ysb.swift:23:14: note: coalesce using '??' to provide a\
    \ default when the optional value contains 'nil'\n    return a.max() % 3 == 0\n\
    \             ^\n           (       ?? <#default value#>)\n/tmp/tmpygrm2ysb.swift:23:14:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    return a.max() % 3 == 0\n             ^\n                  !\n/tmp/tmpygrm2ysb.swift:23:24:\
    \ error: cannot convert return expression of type 'Bool' to return type 'Int'\n\
    \    return a.max() % 3 == 0\n           ~~~~~~~~~~~~^~~~\n"
  stdout: ''
  timestamp: 1659824872
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>(n)\n    for i in 0..<n {\n        a[i] = i\
    \ * i - i + 1\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            for k in 0..<n {\n                if i != j && i != k &&\
    \ j != k {\n                    if a[i] < a[j] && a[i] < a[k] {\n            \
    \            count += 1\n                    }\n                }\n          \
    \  }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpepopq1kv.swift:13:24: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array<Int>(n)\n                       ^\n             \
    \          arrayLiteral: \n"
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[j] + a[k] == i*i + i*i + i*i {\n             \
    \           a.append(i)\n                        a.append(j)\n               \
    \         a.append(k)\n                    }\n                }\n            }\n\
    \        }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b46943b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b46940a7561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b46940a7286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b46940a713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b46940a6bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b4693ea6e83 <unavailable> + 188035

    6    tmpq08vzjws                        0x000056027fe50ac0 <unavailable> + 6848

    7    tmpq08vzjws                        0x000056027fe50478 <unavailable> + 5240

    8    libc.so.6                          0x00002b469459c460 __libc_start_main +
    245

    9    tmpq08vzjws                        0x000056027fe50199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659824872
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i < j && j < k && i < k\
    \ {\n                    a[i] = i * i - i + 1\n                }\n           \
    \ }\n        }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d49772c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d49469561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3d49469286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3d4946913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3d49468bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b3d492687ec <unavailable> + 186348

    6    tmpxqdrjm06                        0x0000555b0eed2abd <unavailable> + 6845

    7    tmpxqdrjm06                        0x0000555b0eed2418 <unavailable> + 5144

    8    libc.so.6                          0x00002b3d4995e460 __libc_start_main +
    245

    9    tmpxqdrjm06                        0x0000555b0eed2139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1659824872
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && j != k && i !=\
    \ k {\n                    let sum = i * i - i + j * j + k * k\n             \
    \       if sum % 3 == 0 {\n                        a.append(sum)\n           \
    \         }\n                }\n            }\n        }\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmp2m924z08/tmp2m924z08.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb201e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb1fedab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb1feda988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb1fed97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2m924z08                        0x0000557447e3f495 <unavailable> + 5269

    5    libc.so.6                          0x00002aeb203cf460 __libc_start_main +
    245

    6    tmp2m924z08                        0x0000557447e3f149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824872
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for _ in 1...n {\n        a.append(0)\n \
    \   }\n    var count = 0\n    for i in  1...n {\n        for j in (i+1)...n {\n\
    \            for k in (j+1)...n {\n                if a[i] < a[j] && a[j] < a[k]\
    \ {\n                    a[i] = a[j] + a[k]\n                    count += 1\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b5dc9463c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5dc915a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5dc915a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b5dc915a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5dc9159bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpb_xcw7sl                        0x000055d9c9345af7 <unavailable> + 6903

    6    tmpb_xcw7sl                        0x000055d9c9345428 <unavailable> + 5160

    7    libc.so.6                          0x00002b5dc964f460 __libc_start_main +
    245

    8    tmpb_xcw7sl                        0x000055d9c9345149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824872
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>(n)\n    for i in 0..<n {\n        a[i] = i\
    \ * i - i + 1\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            for k in 0..<n {\n                if i < j < k {\n    \
    \                if a[i] < a[j] < a[k] {\n                        count += 1\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpjblt8g95.swift:13:24: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array<Int>(n)\n                       ^\n             \
    \          arrayLiteral: \n/tmp/tmpjblt8g95.swift:21:22: error: adjacent operators\
    \ are in non-associative precedence group 'ComparisonPrecedence'\n           \
    \     if i < j < k {\n                     ^   ~\n/tmp/tmpjblt8g95.swift:21:22:\
    \ error: cannot convert value of type 'Bool' to expected argument type 'Int'\n\
    \                if i < j < k {\n                     ^\n/tmp/tmpjblt8g95.swift:22:29:\
    \ error: adjacent operators are in non-associative precedence group 'ComparisonPrecedence'\n\
    \                    if a[i] < a[j] < a[k] {\n                            ^  \
    \    ~\n/tmp/tmpjblt8g95.swift:22:36: error: binary operator '<' cannot be applied\
    \ to operands of type 'Bool' and '()'\n                    if a[i] < a[j] < a[k]\
    \ {\n                       ~~~~~~~~~~~ ^ ~~~~\n/tmp/tmpjblt8g95.swift:22:36:\
    \ note: overloads for '<' exist with these partially matching parameter lists:\
    \ ((), ()), (AnyIndex, AnyIndex), (Character, Character), (ContinuousClock.Instant,\
    \ ContinuousClock.Instant), (Duration, Duration), (Int, Int), (Int16, Int16),\
    \ (Int32, Int32), (Int64, Int64), (Int8, Int8), (Never, Never), (ObjectIdentifier,\
    \ ObjectIdentifier), (String, String), (String.Index, String.Index), (SuspendingClock.Instant,\
    \ SuspendingClock.Instant), (TaskPriority, TaskPriority), (UInt, UInt), (UInt16,\
    \ UInt16), (UInt32, UInt32), (UInt64, UInt64), (UInt8, UInt8), (Unicode.CanonicalCombiningClass,\
    \ Unicode.CanonicalCombiningClass), (Unicode.Scalar, Unicode.Scalar), (_ValidUTF8Buffer.Index,\
    \ _ValidUTF8Buffer.Index)\n                    if a[i] < a[j] < a[k] {\n     \
    \                              ^\n"
  stdout: ''
  timestamp: 1659824872
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i < j < k {\n          \
    \          let triple = i * i - i + 1 + j * j + k\n                    if triple\
    \ % 3 == 0 {\n                        a.append(triple)\n                    }\n\
    \                }\n            }\n        }\n    }\n    return a.count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp048vkz9l.swift:17:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmp048vkz9l.swift:17:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824872
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] + a[j] + a[k] == i*i*i + j*j*j + k*k*k {\n\
    \                        a.append(i)\n                        a.append(j)\n  \
    \                      a.append(k)\n                    }\n                }\n\
    \            }\n        }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b41ea6c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b41ea3b8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b41ea3b8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b41ea3b813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b41ea3b7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b41ea1b7e83 <unavailable> + 188035

    6    tmp48c1h9sk                        0x000055b940493ac0 <unavailable> + 6848

    7    tmp48c1h9sk                        0x000055b940493478 <unavailable> + 5240

    8    libc.so.6                          0x00002b41ea8ad460 __libc_start_main +
    245

    9    tmp48c1h9sk                        0x000055b940493199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i < j < k {\n          \
    \          a.append(i * i - i + 1)\n                }\n            }\n       \
    \ }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpqkoourtf.swift:17:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpqkoourtf.swift:17:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824871
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for _ in 1...n {\n        a.append(0)\n \
    \   }\n    var count = 0\n    for _ in 1...n {\n        for j in 1...n {\n   \
    \         for i in 1...n {\n                if a[i] < a[j] && a[i] < a[k] {\n\
    \                    a[i] = a[i] + a[j] + a[k]\n                    count += 1\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpb4ez9b2p.swift:21:44: error: cannot find 'k' in scope\n       \
    \         if a[i] < a[j] && a[i] < a[k] {\n                                  \
    \         ^\n/tmp/tmpb4ez9b2p.swift:22:44: error: cannot find 'k' in scope\n \
    \                   a[i] = a[i] + a[j] + a[k]\n                              \
    \             ^\n"
  stdout: ''
  timestamp: 1659824872
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [0]\n    for i in 1...n {\n        a[i] = a[i] * a[i]\
    \ - a[i] + i + 1\n    }\n    return a.maxElement()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpaqlg_ywi.swift:17:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a: [Int] = []\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    let sum = i * i + j * j + k * k\n                 \
    \   if sum % 3 == 0 {\n                        a.append(sum)\n               \
    \     }\n                }\n            }\n        }\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpl10n944f/tmpl10n944f.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4033efec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4033bf5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4033bf5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4033bf47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl10n944f                        0x00005632835224a5 <unavailable> + 5285

    5    libc.so.6                          0x00002b40340ea460 __libc_start_main +
    245

    6    tmpl10n944f                        0x0000563283522159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1659824872
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] + a[j] + a[k] == i*i*i + j*j*j + k*k*k {\n\
    \                        a.append(i)\n                        a.append(j)\n  \
    \                      a.append(k)\n                    }\n                }\n\
    \            }\n        }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002adc90f1ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc90c11561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adc90c11286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adc90c1113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adc90c10bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002adc90a10e83 <unavailable> + 188035

    6    tmpz0njwk3m                        0x00005555f1eabac0 <unavailable> + 6848

    7    tmpz0njwk3m                        0x00005555f1eab478 <unavailable> + 5240

    8    libc.so.6                          0x00002adc91106460 __libc_start_main +
    245

    9    tmpz0njwk3m                        0x00005555f1eab199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659824872
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    a.append(i*i - i + 1)\n                }\n        \
    \    }\n        }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpetk7_ark/tmpetk7_ark.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b722f180c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b722ee77b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b722ee77988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b722ee767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpetk7_ark                        0x000056377eff7495 <unavailable> + 5269

    5    libc.so.6                          0x00002b722f36c460 __libc_start_main +
    245

    6    tmpetk7_ark                        0x000056377eff7149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array(0..<n)\n    var count = 0\n    for i in 0..<n {\n\
    \        for j in 0..<n {\n            for k in 0..<n {\n                if i\
    \ < j < k {\n                    a[i] = i * i - i + 1\n                    count\
    \ += 1\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpp9xb0c6o.swift:18:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpp9xb0c6o.swift:18:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824871
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>(n)\n    for i in 0..<n {\n        a[i] = i\
    \ * i - i + 1\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            for k in 0..<n {\n                if i < j < k {\n    \
    \                if a[i] < a[j] || a[i] < a[k] || a[j] < a[k] {\n            \
    \            count += 1\n                    }\n                }\n          \
    \  }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpsfi77rfj.swift:13:24: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array<Int>(n)\n                       ^\n             \
    \          arrayLiteral: \n/tmp/tmpsfi77rfj.swift:21:22: error: adjacent operators\
    \ are in non-associative precedence group 'ComparisonPrecedence'\n           \
    \     if i < j < k {\n                     ^   ~\n/tmp/tmpsfi77rfj.swift:21:22:\
    \ error: cannot convert value of type 'Bool' to expected argument type 'Int'\n\
    \                if i < j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824873
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>(n)\n    for i in 0..<n {\n        a[i] = i\
    \ * i - i + 1\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            for k in 0..<n {\n                if i < j < k {\n    \
    \                if a[i] < a[j] || a[i] < a[k] || a[j] < a[k] {\n            \
    \            count += 1\n                    }\n                }\n          \
    \  }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpsfi77rfj.swift:13:24: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array<Int>(n)\n                       ^\n             \
    \          arrayLiteral: \n/tmp/tmpsfi77rfj.swift:21:22: error: adjacent operators\
    \ are in non-associative precedence group 'ComparisonPrecedence'\n           \
    \     if i < j < k {\n                     ^   ~\n/tmp/tmpsfi77rfj.swift:21:22:\
    \ error: cannot convert value of type 'Bool' to expected argument type 'Int'\n\
    \                if i < j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824873
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>(n)\n    for i in 0..<n {\n        a[i] = i\
    \ * i - i + 1\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            for k in 0..<n {\n                if i < j < k {\n    \
    \                if a[i] < a[j] && a[i] < a[k] {\n                        count\
    \ += 1\n                    }\n                    if a[j] < a[i] && a[j] < a[k]\
    \ {\n                        count += 1\n                    }\n             \
    \       if a[k] < a[i] && a[k] < a[j] {\n                        count += 1\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp0kfrlq62.swift:13:24: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array<Int>(n)\n                       ^\n             \
    \          arrayLiteral: \n/tmp/tmp0kfrlq62.swift:21:22: error: adjacent operators\
    \ are in non-associative precedence group 'ComparisonPrecedence'\n           \
    \     if i < j < k {\n                     ^   ~\n/tmp/tmp0kfrlq62.swift:21:22:\
    \ error: cannot convert value of type 'Bool' to expected argument type 'Int'\n\
    \                if i < j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824871
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [0]\n    for i in 1...n {\n        for j in 1...n {\n\
    \            for k in 1...n {\n                if i < j < k {\n              \
    \      a[0] += (i * i - i + 1)\n                    a[1] += (i * j - i + 1)\n\
    \                    a[2] += (i * k - i + 1)\n                }\n            }\n\
    \        }\n    }\n    return a[0]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpdae0zddq.swift:17:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpdae0zddq.swift:17:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824872
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp_42tbj6u/tmp_42tbj6u.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7390c0fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7390906b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7390906988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73909057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_42tbj6u                        0x000055b12be59495 <unavailable> + 5269

    5    libc.so.6                          0x00002b7390dfb460 __libc_start_main +
    245

    6    tmp_42tbj6u                        0x000055b12be59149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a: [Int] = []\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i < j < k {\n          \
    \          a[i] = i * i - i + 1\n                }\n            }\n        }\n\
    \    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmplscxzdff.swift:17:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmplscxzdff.swift:17:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824871
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i < j < k {\n          \
    \          a[i] = i * i - i + 1\n                }\n            }\n        }\n\
    \    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp4qeoranv.swift:17:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmp4qeoranv.swift:17:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824872
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [0]\n    for i in 1...n {\n        for j in 1...n {\n\
    \            for k in 1...n {\n                if i != j && j != k && i != k {\n\
    \                    let sum = i * i - i + j * j + k * k\n                   \
    \ if sum % 3 == 0 {\n                        a.append(sum)\n                 \
    \   }\n                }\n            }\n        }\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmp0ecy6sup/tmp0ecy6sup.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3228a3ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3228731b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3228731988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b32287307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0ecy6sup                        0x000055ad9607c4f5 <unavailable> + 5365

    5    libc.so.6                          0x00002b3228c26460 __libc_start_main +
    245

    6    tmp0ecy6sup                        0x000055ad9607c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824872
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>(n)\n    for i in 0..<n {\n        a[i] = i\
    \ * i - i + 1\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            for k in 0..<n {\n                if i < j < k {\n    \
    \                let sum = Int(a[i]) + Int(a[j]) + Int(a[k])\n               \
    \     if sum % 3 == 0 {\n                        count += 1\n                \
    \    }\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpch_9jwtb.swift:13:24: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array<Int>(n)\n                       ^\n             \
    \          arrayLiteral: \n/tmp/tmpch_9jwtb.swift:21:22: error: adjacent operators\
    \ are in non-associative precedence group 'ComparisonPrecedence'\n           \
    \     if i < j < k {\n                     ^   ~\n/tmp/tmpch_9jwtb.swift:21:22:\
    \ error: cannot convert value of type 'Bool' to expected argument type 'Int'\n\
    \                if i < j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824872
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>(n)\n    for i in 0..<n {\n        a[i] = i\
    \ * i - i + 1\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            for k in 0..<n {\n                if i < j < k {\n    \
    \                let sum = Int(a[i]) + Int(a[j]) + Int(a[k])\n               \
    \     if sum % 3 == 0 {\n                        count += 1\n                \
    \    }\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpch_9jwtb.swift:13:24: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array<Int>(n)\n                       ^\n             \
    \          arrayLiteral: \n/tmp/tmpch_9jwtb.swift:21:22: error: adjacent operators\
    \ are in non-associative precedence group 'ComparisonPrecedence'\n           \
    \     if i < j < k {\n                     ^   ~\n/tmp/tmpch_9jwtb.swift:21:22:\
    \ error: cannot convert value of type 'Bool' to expected argument type 'Int'\n\
    \                if i < j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824872
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    return a.maxElement()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp1b7pa21x.swift:17:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824871
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for _ in 1...n {\n        a.append(0)\n \
    \   }\n    var count = 0\n    for i in 1...n {\n        for j in 1...n {\n   \
    \         for k in 1...n {\n                if i < j < k {\n                 \
    \   a[i] = a[i] + a[j] + a[k]\n                    if a[i] % 3 == 0 {\n      \
    \                  count += 1\n                    }\n                }\n    \
    \        }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp_q3kgv9l.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmp_q3kgv9l.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824872
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && j != k && i !=\
    \ k && a[i] + a[j] + a[k] == i*i*i + j*j*j {\n                    a.append(i*i*i\
    \ + j*j*j)\n                }\n            }\n        }\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b7ea1c0dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7ea1904561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7ea1904286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7ea190413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7ea1903bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b7ea1703e83 <unavailable> + 188035

    6    tmpvoett19v                        0x000055c9251f5ac0 <unavailable> + 6848

    7    tmpvoett19v                        0x000055c9251f5478 <unavailable> + 5240

    8    libc.so.6                          0x00002b7ea1df9460 __libc_start_main +
    245

    9    tmpvoett19v                        0x000055c9251f5199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659824872
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp_42tbj6u/tmp_42tbj6u.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7390c0fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7390906b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7390906988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73909057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_42tbj6u                        0x000055b12be59495 <unavailable> + 5269

    5    libc.so.6                          0x00002b7390dfb460 __libc_start_main +
    245

    6    tmp_42tbj6u                        0x000055b12be59149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    let triple = i * i * i + j * j + k * k\n          \
    \          if triple % 3 == 0 {\n                        a.append(triple)\n  \
    \                  }\n                }\n            }\n        }\n    }\n   \
    \ return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpyq4my_ih/tmpyq4my_ih.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1cbf78c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1cbc6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1cbc6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1cbc6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyq4my_ih                        0x00005600a06bb495 <unavailable> + 5269

    5    libc.so.6                          0x00002ae1cc164460 __libc_start_main +
    245

    6    tmpyq4my_ih                        0x00005600a06bb149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824872
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array(0..<n)\n    var count = 0\n    for i in 0..<n {\n\
    \        for j in 0..<n {\n            for k in 0..<n {\n                if i\
    \ < j < k {\n                    a[i] = i * i - i + 1\n                    count\
    \ += 1\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpp9xb0c6o.swift:18:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpp9xb0c6o.swift:18:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for _ in 1...n {\n        a.append(0)\n \
    \   }\n    for _ in 1...n {\n        a[n - 1] += 1\n    }\n    for _ in 1...n\
    \ {\n        a[n - 1] += 1\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpx243p0gy/tmpx243p0gy.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d75c3ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d75931b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5d75931988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5d759307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx243p0gy                        0x0000561a5a2f74e5 <unavailable> + 5349

    5    libc.so.6                          0x00002b5d75e26460 __libc_start_main +
    245

    6    tmpx243p0gy                        0x0000561a5a2f7199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659824872
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i < j < k {\n          \
    \          let triple = i * i - i + 1 + j * j - j + k * k\n                  \
    \  if triple % 3 == 0 {\n                        a.append(triple)\n          \
    \          }\n                }\n            }\n        }\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpzvv7gas1.swift:17:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpzvv7gas1.swift:17:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824872
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i < j < k {\n          \
    \          let triple = i + j + k\n                    if triple % 3 == 0 {\n\
    \                        a.append(triple)\n                    }\n           \
    \     }\n            }\n        }\n    }\n    return a.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp5yjb0lsh.swift:17:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmp5yjb0lsh.swift:17:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a: [Int] = []\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    let triple = i * i - i + j + k\n                  \
    \  if triple % 3 == 0 {\n                        a.append(triple)\n          \
    \          }\n                }\n            }\n        }\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpdgt55raf/tmpdgt55raf.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b700cbd7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b700c8ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b700c8ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b700c8cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdgt55raf                        0x000055d1eda254a5 <unavailable> + 5285

    5    libc.so.6                          0x00002b700cdc3460 __libc_start_main +
    245

    6    tmpdgt55raf                        0x000055d1eda25159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1659824872
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array(0..<n)\n    var count = 0\n    for i in 0..<n {\n\
    \        for j in 0..<n {\n            for k in 0..<n {\n                if i\
    \ != j && i != k && j != k {\n                    let sum = i * i + j * j + k\
    \ * k\n                    if sum % 3 == 0 {\n                        count +=\
    \ 1\n                    }\n                }\n            }\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmphgh4gpns/tmphgh4gpns.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7115d84c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7115a7bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7115a7b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7115a7a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphgh4gpns                        0x000055ee88c99475 <unavailable> + 5237

    5    libc.so.6                          0x00002b7115f70460 __libc_start_main +
    245

    6    tmphgh4gpns                        0x000055ee88c99129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824872
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [0]\n    for i in 1...n {\n        a[i] = a[i] * i - i\
    \ + 1\n    }\n    return a.filter({$0 % 3 == 0}).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b9f0a3d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9f0a0c8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b9f0a0c8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b9f0a0c813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b9f0a0c7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b9f09ec7e83 <unavailable> + 188035

    6    tmp5jtbqada                        0x000055d7c50ab919 <unavailable> + 6425

    7    tmp5jtbqada                        0x000055d7c50ab598 <unavailable> + 5528

    8    libc.so.6                          0x00002b9f0a5bd460 __libc_start_main +
    245

    9    tmp5jtbqada                        0x000055d7c50ab2b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1659824872
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] + a[k] {\n                        a[i]\
    \ = a[j] + a[k]\n                    }\n                }\n            }\n   \
    \     }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b1ba5026c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1ba4d1d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b1ba4d1d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b1ba4d1d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b1ba4d1cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b1ba4b1ce83 <unavailable> + 188035

    6    tmpfhjz5m9d                        0x000055fb56877ab0 <unavailable> + 6832

    7    tmpfhjz5m9d                        0x000055fb56877468 <unavailable> + 5224

    8    libc.so.6                          0x00002b1ba5212460 __libc_start_main +
    245

    9    tmpfhjz5m9d                        0x000055fb56877189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp_42tbj6u/tmp_42tbj6u.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7390c0fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7390906b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7390906988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73909057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_42tbj6u                        0x000055b12be59495 <unavailable> + 5269

    5    libc.so.6                          0x00002b7390dfb460 __libc_start_main +
    245

    6    tmp_42tbj6u                        0x000055b12be59149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [0]\n    for i in 1..<n {\n        for j in 1..<n {\n\
    \            for k in 1..<n {\n                if i != j && j != k && i != k {\n\
    \                    if a[i] + a[j] + a[k] == 3 {\n                        return\
    \ 1\n                    }\n                }\n            }\n        }\n    \
    \    a[0] = a[i] + 1\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b03c621bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b03c5f12561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b03c5f12286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b03c5f1213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b03c5f11bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b03c5d11e83 <unavailable> + 188035

    6    tmpg7sunsoe                        0x0000559ea1320abb <unavailable> + 6843

    7    tmpg7sunsoe                        0x0000559ea1320478 <unavailable> + 5240

    8    libc.so.6                          0x00002b03c6407460 __libc_start_main +
    245

    9    tmpg7sunsoe                        0x0000559ea1320199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659824872
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [0]\n    for i in 1..<n {\n        for j in 1..<n {\n\
    \            for k in 1..<n {\n                if i != j && i != k && j != k {\n\
    \                    a[i] = a[i] + a[j] + a[k]\n                }\n          \
    \  }\n        }\n    }\n    return a.max()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp17cd3jry.swift:23:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return a.max()\n             ^\n\
    /tmp/tmp17cd3jry.swift:23:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return a.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmp17cd3jry.swift:23:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ a.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659824872
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [0]\n    for i in 1...n {\n        a[i] = a[i] * a[i]\
    \ - a[i] + i + 1\n    }\n    return a.maxElement()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpaqlg_ywi.swift:17:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && j != k && i !=\
    \ k {\n                    if a[i] == a[j] + a[k] {\n                        return\
    \ 1\n                    }\n                }\n            }\n        }\n    }\n\
    \    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b71edca8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b71ed99f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b71ed99f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b71ed99f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b71ed99ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b71ed79ee83 <unavailable> + 188035

    6    tmpc0uauun8                        0x0000564fa9955a4d <unavailable> + 6733

    7    tmpc0uauun8                        0x0000564fa99553c8 <unavailable> + 5064

    8    libc.so.6                          0x00002b71ede94460 __libc_start_main +
    245

    9    tmpc0uauun8                        0x0000564fa99550e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1659824872
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [0]\n    for i in 1...n {\n        a[i] = a[i] * a[i]\
    \ - a[i] + i + 1\n    }\n    return a.maxElement()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpaqlg_ywi.swift:17:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824871
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [0]\n    for i in 1...n {\n        a[i] = a[i] * a[i]\
    \ - a[i] + i + 1\n    }\n    return a.maxElement()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpaqlg_ywi.swift:17:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && j != k && i !=\
    \ k {\n                    if a[j] + a[k] == a[i] {\n                        a.removeAll()\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ef2462c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ef2159561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6ef2159286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6ef215913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6ef2158bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6ef1f58e83 <unavailable> + 188035

    6    tmpccmiww0s                        0x00005633f6cc7b40 <unavailable> + 6976

    7    tmpccmiww0s                        0x00005633f6cc74f8 <unavailable> + 5368

    8    libc.so.6                          0x00002b6ef264e460 __libc_start_main +
    245

    9    tmpccmiww0s                        0x00005633f6cc7219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659824872
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a: [Int] = []\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    a[i] = a[i] + a[j] + a[k]\n                }\n    \
    \        }\n        }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002afff896bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afff8662561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002afff8662286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002afff866213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002afff8661bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002afff8461e83 <unavailable> + 188035

    6    tmp80nih8m0                        0x00005573dd2ceadb <unavailable> + 6875

    7    tmp80nih8m0                        0x00005573dd2ce488 <unavailable> + 5256

    8    libc.so.6                          0x00002afff8b57460 __libc_start_main +
    245

    9    tmp80nih8m0                        0x00005573dd2ce1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824872
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>(n)\n    for i in 0..<n {\n        a[i] = i\
    \ * i - i + 1\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            for k in 0..<n {\n                if i != j && i != k &&\
    \ j != k {\n                    if a[i] < a[j] && a[i] < a[k] {\n            \
    \            if a[j] < a[k] {\n                            count += 2\n      \
    \                  }\n                    }\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpq9gea7lc.swift:13:24: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array<Int>(n)\n                       ^\n             \
    \          arrayLiteral: \n"
  stdout: ''
  timestamp: 1659824872
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] == a[j] + a[k] {\n                        return\
    \ 1\n                    }\n                }\n            }\n        }\n    }\n\
    \    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b38864b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b38861ab561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b38861ab286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b38861ab13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b38861aabb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b3885faae83 <unavailable> + 188035

    6    tmpl5ew7_qe                        0x000055af8b61aa4d <unavailable> + 6733

    7    tmpl5ew7_qe                        0x000055af8b61a3c8 <unavailable> + 5064

    8    libc.so.6                          0x00002b38866a0460 __libc_start_main +
    245

    9    tmpl5ew7_qe                        0x000055af8b61a0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1659824872
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && j != k && i !=\
    \ k {\n                    if a[i] < a[j] + a[k] {\n                        a[i]\
    \ = a[j] + a[k]\n                    }\n                }\n            }\n   \
    \     }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b68b31f1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b68b2ee8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b68b2ee8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b68b2ee813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b68b2ee7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b68b2ce7e83 <unavailable> + 188035

    6    tmpprtky74k                        0x0000561bf0c18ab0 <unavailable> + 6832

    7    tmpprtky74k                        0x0000561bf0c18468 <unavailable> + 5224

    8    libc.so.6                          0x00002b68b33dd460 __libc_start_main +
    245

    9    tmpprtky74k                        0x0000561bf0c18189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659824872
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a: [Int] = []\n    for i in 1...n {\n        a[i] = i * i\
    \ - i + 1\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aad8e688c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad8e37f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aad8e37f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aad8e37f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aad8e37ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aad8e17e7ec <unavailable> + 186348

    6    tmpjex7_8n3                        0x000055ebcf94d7f4 <unavailable> + 6132

    7    tmpjex7_8n3                        0x000055ebcf94d438 <unavailable> + 5176

    8    libc.so.6                          0x00002aad8e874460 __libc_start_main +
    245

    9    tmpjex7_8n3                        0x000055ebcf94d159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1659824872
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for i in 1...n {\n        a[i] = i * i -\
    \ i + 1\n    }\n    var count = 0\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] && a[i] < a[k] {\n                 \
    \       count += 1\n                    }\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b35e23b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b35e20b0561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b35e20b0286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b35e20b013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b35e20afbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b35e1eaf7ec <unavailable> + 186348

    6    tmpv2spv083                        0x00005654b1dc5801 <unavailable> + 6145

    7    tmpv2spv083                        0x00005654b1dc53c8 <unavailable> + 5064

    8    libc.so.6                          0x00002b35e25a5460 __libc_start_main +
    245

    9    tmpv2spv083                        0x00005654b1dc50e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1659824872
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>(n)\n    for i in 0..<n {\n        a[i] = i\
    \ * i - i + 1\n    }\n    return a.maxTriples(of: 3)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpdr7t3an9.swift:13:24: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array<Int>(n)\n                       ^\n             \
    \          arrayLiteral: \n"
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for _ in 1...n {\n        a.append(0)\n \
    \   }\n    for _ in 1...n {\n        for _ in 1...n {\n            for _ in 1...n\
    \ {\n                let i = a[0]\n                let j = a[1]\n            \
    \    let k = a[2]\n                a[0] += i * i - i + 1\n                a[1]\
    \ += j * j - j + 1\n                a[2] += k * k - k + 1\n            }\n   \
    \     }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659824872
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[j] > a[k] {\n                        a[k] = a[j]\n\
    \                    } else if a[k] > a[j] {\n                        a[j] = a[k]\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b1886597c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b188628e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b188628e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b188628e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b188628dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b188608de83 <unavailable> + 188035

    6    tmpwh7yjea_                        0x00005618b30aaab0 <unavailable> + 6832

    7    tmpwh7yjea_                        0x00005618b30aa468 <unavailable> + 5224

    8    libc.so.6                          0x00002b1886783460 __libc_start_main +
    245

    9    tmpwh7yjea_                        0x00005618b30aa189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659824872
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>(n)\n    for i in 0..<n {\n        a[i] = i\
    \ * i - i + 1\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            for k in 0..<n {\n                if i < j < k {\n    \
    \                if a[i] < a[j] + a[k] {\n                        count += 1\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp87t24vp0.swift:13:24: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array<Int>(n)\n                       ^\n             \
    \          arrayLiteral: \n/tmp/tmp87t24vp0.swift:21:22: error: adjacent operators\
    \ are in non-associative precedence group 'ComparisonPrecedence'\n           \
    \     if i < j < k {\n                     ^   ~\n/tmp/tmp87t24vp0.swift:21:22:\
    \ error: cannot convert value of type 'Bool' to expected argument type 'Int'\n\
    \                if i < j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    let triple = a[i] + a[j] + a[k]\n                 \
    \   if triple % 3 == 0 {\n                        return triple\n            \
    \        }\n                }\n            }\n        }\n    }\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6871f11c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6871c08561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6871c08286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6871c0813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6871c07bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6871a07e83 <unavailable> + 188035

    6    tmp1o967eot                        0x000055702700ea60 <unavailable> + 6752

    7    tmp1o967eot                        0x000055702700e3c8 <unavailable> + 5064

    8    libc.so.6                          0x00002b68720fd460 __libc_start_main +
    245

    9    tmp1o967eot                        0x000055702700e0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1659824872
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array(0..<n)\n    var count = 0\n    for i in 0..<n {\n\
    \        for j in 0..<n {\n            for k in 0..<n {\n                if i\
    \ != j && i != k && j != k {\n                    a[i] = a[i] + a[j] + a[k]\n\
    \                    if a[i] % 3 == 0 {\n                        count += 1\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmps6p_occi/tmps6p_occi.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad18db8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad18aafb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad18aaf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad18aae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps6p_occi                        0x0000557d62a91515 <unavailable> + 5397

    5    libc.so.6                          0x00002aad18fa4460 __libc_start_main +
    245

    6    tmps6p_occi                        0x0000557d62a911c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && j != k && i !=\
    \ k {\n                    let triple = i * i - i + j + k\n                  \
    \  if triple % 3 == 0 {\n                        a.append(triple)\n          \
    \          }\n                }\n            }\n        }\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpos9t6j12/tmpos9t6j12.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5c372a7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5c36f9eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5c36f9e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5c36f9d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpos9t6j12                        0x00005559362bb495 <unavailable> + 5269

    5    libc.so.6                          0x00002b5c37493460 __libc_start_main +
    245

    6    tmpos9t6j12                        0x00005559362bb149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824872
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>(n)\n    for i in 0..<n {\n        a[i] = i\
    \ * i - i + 1\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            for k in 0..<n {\n                if i != j && i != k &&\
    \ j != k {\n                    if a[i] < a[j] && a[i] < a[k] {\n            \
    \            count += 1\n                    }\n                    if a[j] <\
    \ a[i] && a[j] < a[k] {\n                        count += 1\n                \
    \    }\n                    if a[k] < a[i] && a[k] < a[j] {\n                \
    \        count += 1\n                    }\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp8_s2hu60.swift:13:24: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array<Int>(n)\n                       ^\n             \
    \          arrayLiteral: \n"
  stdout: ''
  timestamp: 1659824872
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i*i\
    \ - i + 1)\n    }\n    return a.maxElement()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp48hjf58g.swift:17:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824871
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for _ in 1...n {\n        a.append(0)\n\
    \    }\n    var count = 0\n    for i in 1...n {\n        for j in 1...n {\n  \
    \          for k in 1...n {\n                if i < j < k {\n                \
    \    a[i] += a[j] + a[k]\n                    if a[i] % 3 == 0 {\n           \
    \             count += 1\n                    }\n                }\n         \
    \   }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpfstlo3w2.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpfstlo3w2.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824872
