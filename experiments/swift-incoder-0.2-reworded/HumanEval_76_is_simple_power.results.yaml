language: swift
name: HumanEval_76_is_simple_power
results:
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if n == 0 {\n        return false\n    }\n   \
    \ if x == 1 {\n        return true\n    }\n    if x == 0 {\n        return false\n\
    \    }\n    if x == n {\n        return true\n    }\n    if x == n-1 {\n     \
    \   return false\n    }\n    if x == n-2 {\n        return true\n    }\n    if\
    \ x == n-3 {\n        return false\n    }\n    if x == n-4 {\n        return true\n\
    \    }\n    if x == n-5 {\n        return false\n    }\n    if x == n-6 {\n  \
    \      return true\n    }\n    if x == n-7 {\n        return false\n    }\n  \
    \  if x == n-8 {\n        return true\n    }\n    if x == n-9 {\n        return\
    \ false\n    }\n    if x == n-10 {\n        return true\n    }\n    if x == n-11\
    \ {\n        return false\n    }\n    if x == n-12 {\n        return true\n  \
    \  }\n    if x == n-13 {\n        return false\n    }\n    if x == n-14 {\n  \
    \      return true\n    }\n    if x == n-15 {\n        return false\n    }\n \
    \   if x == n-16 {\n        return true\n    }\n    if x == n-17 {\n        return\
    \ false\n    }\n    if x == n-18 {\n        return true\n    }\n    if x == n-19\
    \ {\n        return false\n    }\n    if x == n-20 {\n        return true\n  \
    \  }\n    if x == n-21 {\n        return false\n    }\n    if x == n-22 {\n  \
    \      return true\n    }\n    if x == n-23 {\n        return false\n    }\n \
    \   if x == n-24 {\n        return true\n    }\n    if x == n-25 {\n        return\
    \ false\n    }\n    if x == n-26 {\n        return true\n    }\n    if x == n-27\
    \ {\n        return false\n    }\n    if x == n-28 {\n        return true\n  \
    \  }\n    if x == n-29 {\n        return false\n    }\n    if x == n-30 {\n  \
    \      return true\n    }\n    if x == n-31 {\n        return false\n    }\n \
    \   if x == n-32 {\n        return true\n    }\n    if x == n-33 {\n        return\
    \ false\n    }\n    if x == n-34 {\n        return true\n    }\n    if x == n-35\
    \ {\n        return false\n    }\n    if x == n-36 {\n        return true\n  \
    \  }\n    if x == n-37 {\n        return false\n    }\n    if x == n-38 {\n  \
    \      return true\n    }\n    if x == n-39 {\n        return false\n    }\n \
    \   if x == n-40 {\n        return true\n    }\n    if x == n-45 {\n        return\
    \ false\n    }\n    if x == n-46 {\n        return true\n    }\n    if x == n-47\
    \ {\n        return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpzaqzswsm.swift:186:45: error: expected '}' at end of brace statement\n\
    assert(is_simple_power(x: 1, n: 12) == true)\n                               \
    \             ^\n/tmp/tmpzaqzswsm.swift:18:46: note: to match this opening '{'\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n                             \
    \                ^\n/tmp/tmpzaqzswsm.swift:165:6: error: operator functions can\
    \ only be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if n == 0 {\n        return false\n    }\n   \
    \ if x == 1 {\n        return true\n    }\n    if x == 0 {\n        return false\n\
    \    }\n    if x == n {\n        return true\n    }\n    if x % n == 0 {\n   \
    \     return is_simple_power(x / n, n)\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp9jdielsl.swift:35:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x / n, n)\n                           \
    \   ^\n                               x:     n: \n"
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if n == 0 {\n        return false\n    }\n   \
    \ if x == 0 {\n        return false\n    }\n    if x == 1 {\n        return true\n\
    \    }\n    if x == n {\n        return true\n    }\n    if n % 2 == 0 {\n   \
    \     return is_simple_power(x / 2, n-1)\n    }\n    return is_simple_power(x,\
    \ n-1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp6tamzvp0.swift:35:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x / 2, n-1)\n                         \
    \     ^\n                               x:     n: \n/tmp/tmp6tamzvp0.swift:37:27:\
    \ error: missing argument labels 'x:n:' in call\n    return is_simple_power(x,\
    \ n-1)\n                          ^\n                           x: n: \n"
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if x > n {\n        return false\n\
    \    }\n    if x < 0 {\n        return false\n    }\n    if n == 0 {\n       \
    \ return false\n    }\n    if n == 1 {\n        return true\n    }\n    if n ==\
    \ 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n    }\n\
    \    if n == 4 {\n        return true\n    }\n    if n == 5 {\n        return\
    \ true\n    }\n    if n == 6 {\n        return true\n    }\n    if n == 7 {\n\
    \        return true\n    }\n    if n == 8 {\n        return true\n    }\n   \
    \ if n == 9 {\n        return true\n    }\n    if n == 10 {\n        return true\n\
    \    }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n     \
    \   return true\n    }\n    if n == 13 {\n        return true\n    }\n    if n\
    \ == 14 {\n        return true\n    }\n    if n == 15 {\n        return true\n\
    \    }\n    if n == 16 {\n        return true\n    }\n    if n == 17 {\n     \
    \   return true\n    }\n    if n == 18 {\n        return true\n    }\n    if n\
    \ == 19 {\n        return true\n    }\n    if n == 20 {\n        return true\n\
    \    }\n    if n == 21 {\n        return true\n    }\n    if n == 22 {\n     \
    \   return true\n    }\n    if n == 23 {\n        return true\n    }\n    if n\
    \ == 24 {\n        return true\n    }\n    if n == 25 {\n        return true\n\
    \    }\n    if n == 26 {\n        return true\n    }\n    if n == 27 {\n     \
    \   return true\n    }\n    if n == 28 {\n        return true\n    }\n    if n\
    \ == 29 {\n        return true\n    }\n    if n == 30 {\n        return true\n\
    \    }\n    if n == 31 {\n        return true\n    }\n    if n == 32 {\n     \
    \   return true\n    }\n    if n == 33 {\n        return true\n    }\n    if n\
    \ == 34 {\n        return true\n    }\n    if n == 35 {\n        return true\n\
    \    }\n    if n == 36 {\n        return true\n    }\n    if n == 37 {\n     \
    \   return true\n    }\n    if n == 38 {\n        return true\n    }\n    if n\
    \ == 39 {\n        return true\n    }\n    if n == 40 {\n        return true\n\
    \    }\n    if n == 41 {\n        return true\n    }\n    if n == 42 {\n     \
    \   return true\n    }\n    if n == 43 {\n        return true\n    }\n    if n\
    \ == 44 {\n        return true\n    }\n    if n == 45 {\n        return true\n\
    \    }\n    if n == 46 {\n        return true\n    }\n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: '/tmp/tmpbvknug5u.swift:176:1: error: missing return in global function
    expected to return ''Bool''

    }

    ^

    '
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if n % x == 0 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmprb1xx1yn.swift:29:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if n == 0 {\n        return false\n    }\n   \
    \ if x == 1 {\n        return true\n    }\n    if x == 0 {\n        return false\n\
    \    }\n    if x == n {\n        return true\n    }\n    if x % n == 0 {\n   \
    \     return is_simple_power(x / n, n)\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp9jdielsl.swift:35:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x / n, n)\n                           \
    \   ^\n                               x:     n: \n"
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if n == 0 {\n        return false\n    }\n   \
    \ if x == 1 {\n        return true\n    }\n    if x == 0 {\n        return false\n\
    \    }\n    if x % n == 0 {\n        return is_simple_power(x, n-1)\n    }\n \
    \   return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpop_pyrw4.swift:32:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 0 {\n \
    \       return true\n    }\n    if n == 1 {\n        return true\n    }\n    if\
    \ x == 1 {\n        return true\n    }\n    if x == n {\n        return true\n\
    \    }\n    if x % n == 0 {\n        return is_simple_power(x, n-1)\n    }\n \
    \   return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpxsgnhggb.swift:32:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if n % 2 == 0 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp1tsvwoi6.swift:29:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 0 {\n \
    \       return true\n    }\n    if n == 1 {\n        return true\n    }\n    if\
    \ x == 1 {\n        return true\n    }\n    if x == x {\n        return true\n\
    \    }\n    if x == x*x {\n        return true\n    }\n    if x == x*x*x {\n \
    \       return true\n    }\n    if x == x*x*x*x {\n        return true\n    }\n\
    \    if x == x*x*x*x*x {\n        return true\n    }\n    if x == x*x*x*x*x*x\
    \ {\n        return true\n    }\n    if x == x*x*x*x*x*x*x {\n        return true\n\
    \    }\n    if x == x*x*x*x*x*x*x*x {\n        return true\n    }\n    if x ==\
    \ x*x*x*x*x*x*x*x*x {\n        return true\n    }\n    if x == x*x*x*x*x*x*x*x*x*x\
    \ {\n        return true\n    }\n    if x == x*x*x*x*x*x*x*x*x*x*x {\n       \
    \ return true\n    }\n    if x == x*x*x*x*x*x*x*x*x*x*x*x {\n        return true\n\
    \    }\n    if x == x*x*x*x*x*x*x*x*x*x*x*x*x {\n        return true\n    }\n\
    \    if x == x*x*x*x*x*x*x*x*x*x*x*x*x*x {\n        return true\n    }\n    if\
    \ x == x*x*x*x*x*x*x*x*x*x*x*x*x*x*x {\n        return true\n    }\n    if x ==\
    \ x*x*x*x*x*x*x*x*x*x*x*x*x*x*x {\n        return true\n    }\n    if x == x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x\
    \ {\n        return true\n    }\n    if x == x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x\
    \ {\n        return true\n    }\n    if x == x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x\
    \ {\n        return true\n    }\n    if x == x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x\
    \ {\n        return true\n    }\n    if x == x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x\
    \ {\n        return true\n    }\n    if x == x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x\
    \ {\n        return true\n    }\n    if x == x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x\
    \ {\n        return true\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: '/tmp/tmp0m8a4nmf.swift:97:1: error: missing return in global function expected
    to return ''Bool''

    }

    ^

    '
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return true\n    }\n    if\
    \ n == 2 {\n        return is_power_of_two(x)\n    }\n    if n == 3 {\n      \
    \  return is_power_of_three(x)\n    }\n    if n == 4 {\n        return is_power_of_four(x)\n\
    \    }\n    if n == 5 {\n        return is_power_of_five(x)\n    }\n    if n ==\
    \ 6 {\n        return is_power_of_six(x)\n    }\n    if n == 7 {\n        return\
    \ is_power_of_seven(x)\n    }\n    if n == 8 {\n        return is_power_of_eight(x)\n\
    \    }\n    if n == 9 {\n        return is_power_of_nine(x)\n    }\n    if n ==\
    \ 10 {\n        return is_power_of_ten(x)\n    }\n    if n == 11 {\n        return\
    \ is_power_of_eleven(x)\n    }\n    if n == 12 {\n        return is_power_of_twelve(x)\n\
    \    }\n    if n == 13 {\n        return is_power_of_thirteen(x)\n    }\n    if\
    \ n == 14 {\n        return is_power_of_fourteen(x)\n    }\n    if n == 15 {\n\
    \        return is_power_of_fifteen(x)\n    }\n    if n == 16 {\n        return\
    \ is_power_of_sixteen(x)\n    }\n    if n == 17 {\n        return is_power_of_seventeen(x)\n\
    \    }\n    if n == 18 {\n        return is_power_of_eighteen(x)\n    }\n    if\
    \ n == 19 {\n        return is_power_of_nineteen(x)\n    }\n    if n == 20 {\n\
    \        return is_power_of_twenty(x)\n    }\n    if n == 21 {\n        return\
    \ is_power_of_twenty_one(x)\n    }\n    if n == 22 {\n        return is_power_of_twenty_two(x)\n\
    \    }\n    if n == 23 {\n        return is_power_of_twenty_three(x)\n    }\n\
    \    if n == 24 {\n        return is_power_of_twenty_four(x)\n    }\n    if n\
    \ == 25 {\n        return is_power_of_twenty_five(x)\n    }\n    if n == 26 {\n\
    \        return is_power_of_twenty_six(x)\n    }\n    if n == 27 {\n        return\
    \ is_power_of_twenty_seven(x)\n    }\n    if n == 28 {\n        return is_power_of_twenty_eight(x)\n\
    \    }\n    if n == 29 {\n        return is_power_of_twenty_nine(x)\n    }\n \
    \   if n == 30 {\n        return is_power_of_thirty(x)\n    }\n    if n == 31\
    \ {\n        return is_power_of_thirty_one(x)\n    }\n    if n == 32 {\n     \
    \   return is_power_of_thirty_two(x)\n    }\n    if n == 33 {\n        return\
    \ is_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpb9tb72bs.swift:144:45: error: expected '}' at end of brace statement\n\
    assert(is_simple_power(x: 1, n: 12) == true)\n                               \
    \             ^\n/tmp/tmpb9tb72bs.swift:18:46: note: to match this opening '{'\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n                             \
    \                ^\n/tmp/tmpb9tb72bs.swift:26:16: error: cannot find 'is_power_of_two'\
    \ in scope\n        return is_power_of_two(x)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpb9tb72bs.swift:29:16: error: cannot find 'is_power_of_three' in scope\n\
    \        return is_power_of_three(x)\n               ^~~~~~~~~~~~~~~~~\n/tmp/tmpb9tb72bs.swift:32:16:\
    \ error: cannot find 'is_power_of_four' in scope\n        return is_power_of_four(x)\n\
    \               ^~~~~~~~~~~~~~~~\n/tmp/tmpb9tb72bs.swift:35:16: error: cannot\
    \ find 'is_power_of_five' in scope\n        return is_power_of_five(x)\n     \
    \          ^~~~~~~~~~~~~~~~\n/tmp/tmpb9tb72bs.swift:38:16: error: cannot find\
    \ 'is_power_of_six' in scope\n        return is_power_of_six(x)\n            \
    \   ^~~~~~~~~~~~~~~\n/tmp/tmpb9tb72bs.swift:41:16: error: cannot find 'is_power_of_seven'\
    \ in scope\n        return is_power_of_seven(x)\n               ^~~~~~~~~~~~~~~~~\n\
    /tmp/tmpb9tb72bs.swift:44:16: error: cannot find 'is_power_of_eight' in scope\n\
    \        return is_power_of_eight(x)\n               ^~~~~~~~~~~~~~~~~\n/tmp/tmpb9tb72bs.swift:47:16:\
    \ error: cannot find 'is_power_of_nine' in scope\n        return is_power_of_nine(x)\n\
    \               ^~~~~~~~~~~~~~~~\n/tmp/tmpb9tb72bs.swift:50:16: error: cannot\
    \ find 'is_power_of_ten' in scope\n        return is_power_of_ten(x)\n       \
    \        ^~~~~~~~~~~~~~~\n/tmp/tmpb9tb72bs.swift:53:16: error: cannot find 'is_power_of_eleven'\
    \ in scope\n        return is_power_of_eleven(x)\n               ^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpb9tb72bs.swift:56:16: error: cannot find 'is_power_of_twelve' in scope\n\
    \        return is_power_of_twelve(x)\n               ^~~~~~~~~~~~~~~~~~\n/tmp/tmpb9tb72bs.swift:59:16:\
    \ error: cannot find 'is_power_of_thirteen' in scope\n        return is_power_of_thirteen(x)\n\
    \        "
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if n == 0 {\n        return false\n    }\n   \
    \ if x == 1 {\n        return true\n    }\n    if x == 0 {\n        return false\n\
    \    }\n    if x == n {\n        return true\n    }\n    if x % n == 0 {\n   \
    \     return is_simple_power(x / n, n: n)\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp6t6fao66.swift:35:31: error: missing argument label 'x:' in call\n\
    \        return is_simple_power(x / n, n: n)\n                              ^\n\
    \                               x: \n"
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if x % n == 0 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpql79bezd.swift:29:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824559
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if x % n == 0 {\n        return true\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpkvpr0wav/tmpkvpr0wav.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8ba96dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8ba664b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8ba664988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8ba6637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkvpr0wav                        0x0000558a6469e4a7 <unavailable> + 5287

    5    libc.so.6                          0x00002ac8bab59460 __libc_start_main +
    245

    6    tmpkvpr0wav                        0x0000558a6469def9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if x % n == 0 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpql79bezd.swift:29:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if n % x == 0 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmprb1xx1yn.swift:29:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if n == 0 {\n        return false\n    }\n   \
    \ if x == 1 {\n        return true\n    }\n    if x == 0 {\n        return false\n\
    \    }\n    if x == n {\n        return true\n    }\n    if x > n {\n        return\
    \ false\n    }\n    if x < 0 {\n        return false\n    }\n    if x == n**n\
    \ {\n        return true\n    }\n    if x == n**(n-1) && n == n-1 {\n        return\
    \ true\n    }\n    if x == n**(n-2) && n == n-2 {\n        return true\n    }\n\
    \    if x == n**(n-3) && n == n-3 {\n        return true\n    }\n    if x == n**(n-4)\
    \ && n == n-4 {\n        return true\n    }\n    if x == n**(n-5) && n == n-5\
    \ {\n        return true\n    }\n    if x == n**(n-6) && n == n-6 {\n        return\
    \ true\n    }\n    if x == n**(n-7) && n == n-7 {\n        return true\n    }\n\
    \    if x == n**(n-8) && n == n-8 {\n        return true\n    }\n    if x == n**(n-9)\
    \ && n == n-9 {\n        return true\n    }\n    if x == n**(n-10) && n == n-10\
    \ {\n        return true\n    }\n    if x == n**(n-11) && n == n-11 {\n      \
    \  return true\n    }\n    if x == n**(n-12) && n == n-12 {\n        return true\n\
    \    }\n    if x == n**(n-13) && n == n-13 {\n        return true\n    }\n   \
    \ if x == n**(n-14) && n == n-14 {\n        return true\n    }\n    if x == n**(n-15)\
    \ && n == n-15 {\n        return true\n    }\n    if x == n**(n-16) && n == n-16\
    \ {\n        return true\n    }\n    if x == n**(n-17) && n == n-17 {\n      \
    \  return true\n    }\n    if x == n**(n-18) && n == n-18 {\n        return true\n\
    \    }\n    if x == n**(n-19) && n == n-19 {\n        return true\n    }\n   \
    \ if x == n**(n-20) && n == n-20 {\n        return true\n    }\n    if x == n**(n-21)\
    \ && n == n-21 {\n        return true\n    }\n    if x == n**(n-22) && n == n-22\
    \ {\n        return true\n    }\n    if x == n**(n-23) && n == n-23 {\n      \
    \  return true\n    }\n    if x == n**(n-24) && n == n-24 {\n        return true\n\
    \    }\n    if x == n**(n-25) && n == n-25 {\n        return true\n    }\n   \
    \ if x == n**(n-26) && n == \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmprhtgnghm.swift:119:1: error: expected expression after operator\n\
    }\n^\n/tmp/tmprhtgnghm.swift:40:14: error: cannot find operator '**' in scope\n\
    \    if x == n**n {\n             ^~\n/tmp/tmprhtgnghm.swift:43:14: error: cannot\
    \ find operator '**' in scope\n    if x == n**(n-1) && n == n-1 {\n          \
    \   ^~\n/tmp/tmprhtgnghm.swift:46:14: error: cannot find operator '**' in scope\n\
    \    if x == n**(n-2) && n == n-2 {\n             ^~\n/tmp/tmprhtgnghm.swift:49:14:\
    \ error: cannot find operator '**' in scope\n    if x == n**(n-3) && n == n-3\
    \ {\n             ^~\n/tmp/tmprhtgnghm.swift:52:14: error: cannot find operator\
    \ '**' in scope\n    if x == n**(n-4) && n == n-4 {\n             ^~\n/tmp/tmprhtgnghm.swift:55:14:\
    \ error: cannot find operator '**' in scope\n    if x == n**(n-5) && n == n-5\
    \ {\n             ^~\n/tmp/tmprhtgnghm.swift:58:14: error: cannot find operator\
    \ '**' in scope\n    if x == n**(n-6) && n == n-6 {\n             ^~\n/tmp/tmprhtgnghm.swift:61:14:\
    \ error: cannot find operator '**' in scope\n    if x == n**(n-7) && n == n-7\
    \ {\n             ^~\n/tmp/tmprhtgnghm.swift:64:14: error: cannot find operator\
    \ '**' in scope\n    if x == n**(n-8) && n == n-8 {\n             ^~\n/tmp/tmprhtgnghm.swift:67:14:\
    \ error: cannot find operator '**' in scope\n    if x == n**(n-9) && n == n-9\
    \ {\n             ^~\n/tmp/tmprhtgnghm.swift:70:14: error: cannot find operator\
    \ '**' in scope\n    if x == n**(n-10) && n == n-10 {\n             ^~\n/tmp/tmprhtgnghm.swift:73:14:\
    \ error: cannot find operator '**' in scope\n    if x == n**(n-11) && n == n-11\
    \ {\n             ^~\n/tmp/tmprhtgnghm.swift:76:14: error: cannot find operator\
    \ '**' in scope\n    if x == n**(n-12) && n == n-12 {\n             ^~\n/tmp/tmprhtgnghm.swift:79:14:\
    \ error: cannot find operator '**' in scope\n    if x == n**(n-13) && n == n-13\
    \ {\n             ^~\n/tmp/tmprhtgnghm.swift:82:14: error: cannot find operator\
    \ '**' in scope\n    if x == n**(n-14) && n == n-14 {\n             ^~\n/tmp/tmprhtgnghm.swift:85:14:\
    \ error: cannot find operator '**' in scope\n    if x == n**(n-15) && n == n-15\
    \ {\n             ^~\n/tmp/tmp"
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if n % 2 == 0 {\n        return is_simple_power(x,\
    \ n//2)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp9136r99m.swift:30:5: error: expected ')' in expression list\n \
    \   }\n    ^\n/tmp/tmp9136r99m.swift:29:31: note: to match this opening '('\n\
    \        return is_simple_power(x, n//2)\n                              ^\n/tmp/tmp9136r99m.swift:29:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ n//2)\n                              ^\n                               x: n:\
    \ \n"
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if n == 0 {\n        return false\n    }\n   \
    \ if n == 2 {\n        return is_simple_power(x, n: n - 1)\n    }\n    if x ==\
    \ 1 {\n        return true\n    }\n    if x == 0 {\n        return false\n   \
    \ }\n    if x == 2 {\n        return is_simple_power(x, n: n - 1)\n    }\n   \
    \ if x == 3 {\n        return is_simple_power(x, n: n - 2)\n    }\n    if x ==\
    \ 4 {\n        return is_simple_power(x, n: n - 3)\n    }\n    if x == 5 {\n \
    \       return is_simple_power(x, n: n - 4)\n    }\n    if x == 6 {\n        return\
    \ is_simple_power(x, n: n - 5)\n    }\n    if x == 7 {\n        return is_simple_power(x,\
    \ n: n - 6)\n    }\n    if x == 8 {\n        return is_simple_power(x, n: n -\
    \ 7)\n    }\n    if x == 9 {\n        return is_simple_power(x, n: n - 8)\n  \
    \  }\n    if x == 10 {\n        return is_simple_power(x, n: n - 9)\n    }\n \
    \   if x == 11 {\n        return is_simple_power(x, n: n - 10)\n    }\n    if\
    \ x == 12 {\n        return is_simple_power(x, n: n - 11)\n    }\n    if x ==\
    \ 13 {\n        return is_simple_power(x, n: n - 12)\n    }\n    if x == 14 {\n\
    \        return is_simple_power(x, n: n - 13)\n    }\n    if x == 15 {\n     \
    \   return is_simple_power(x, n: n - 14)\n    }\n    if x == 16 {\n        return\
    \ is_simple_power(x, n: n - 15)\n    }\n    if x == 17 {\n        return is_simple_power(x,\
    \ n: n - 16)\n    }\n    if x == 18 {\n        return is_simple_power(x, n: n\
    \ - 17)\n    }\n    if x == 19 {\n        return is_simple_power(x, n: n - 18)\n\
    \    }\n    if x == 20 {\n        return is_simple_power(x, n: n - 19)\n    }\n\
    \    if x == 21 {\n        return is_simple_power(x, n: n - 20)\n    }\n    if\
    \ x == 22 {\n        return is_simple_power(x, n: n - 21)\n    }\n    if x ==\
    \ 23 {\n        return is_simple_power(x, n: n - 22)\n    }\n    if x == 24 {\n\
    \        return is_simple_power(x, n: n - 23)\n    }\n    if x == 25 {\n     \
    \   return is_simple_power(x, n: n - 24)\n    }\n    if x == 26 {\n        return\
    \ is_simple_power(x, n: n - 25)\n    }\n    if x == 27 {\n        return is_simple_power(x,\
    \ n: n - 26)\n    }\n    if x == 28 {\n        return is_simple_power(x, n: n\
    \ - 27)\n    }\n    if x == 29 {\n        return is_simple_power(x, n: n - 28)\n\
    \    }\n    if x == 30 {\n        return is_simple_power(x, n: \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmptfnli0pj.swift:120:1: error: expected expression in list of expressions\n\
    }\n^\n/tmp/tmptfnli0pj.swift:144:45: error: expected '}' at end of brace statement\n\
    assert(is_simple_power(x: 1, n: 12) == true)\n                               \
    \             ^\n/tmp/tmptfnli0pj.swift:18:46: note: to match this opening '{'\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n                             \
    \                ^\n/tmp/tmptfnli0pj.swift:26:31: error: missing argument label\
    \ 'x:' in call\n        return is_simple_power(x, n: n - 1)\n                \
    \              ^\n                               x: \n/tmp/tmptfnli0pj.swift:35:31:\
    \ error: missing argument label 'x:' in call\n        return is_simple_power(x,\
    \ n: n - 1)\n                              ^\n                               x:\
    \ \n/tmp/tmptfnli0pj.swift:38:31: error: missing argument label 'x:' in call\n\
    \        return is_simple_power(x, n: n - 2)\n                              ^\n\
    \                               x: \n/tmp/tmptfnli0pj.swift:41:31: error: missing\
    \ argument label 'x:' in call\n        return is_simple_power(x, n: n - 3)\n \
    \                             ^\n                               x: \n/tmp/tmptfnli0pj.swift:44:31:\
    \ error: missing argument label 'x:' in call\n        return is_simple_power(x,\
    \ n: n - 4)\n                              ^\n                               x:\
    \ \n/tmp/tmptfnli0pj.swift:47:31: error: missing argument label 'x:' in call\n\
    \        return is_simple_power(x, n: n - 5)\n                              ^\n\
    \                               x: \n/tmp/tmptfnli0pj.swift:50:31: error: missing\
    \ argument label 'x:' in call\n        return is_simple_power(x, n: n - 6)\n \
    \                             ^\n                               x: \n/tmp/tmptfnli0pj.swift:53:31:\
    \ error: missing argument label 'x:' in call\n        return is_simple_power(x,\
    \ n: n - 7)\n                              ^\n                               x:\
    \ \n/tmp/tmptfnli0pj.swift:56:31: error: missing argument label 'x:' in call\n\
    \        return is_simple_power(x, n: n - 8)\n                              ^\n\
    \                   "
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if n % x == 0 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmprb1xx1yn.swift:29:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if n == 0 {\n        return false\n    }\n   \
    \ if x == 1 {\n        return true\n    }\n    if x == 0 {\n        return false\n\
    \    }\n    if x == n {\n        return true\n    }\n    if x % n == 0 {\n   \
    \     return is_simple_power(x / n, n)\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp9jdielsl.swift:35:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x / n, n)\n                           \
    \   ^\n                               x:     n: \n"
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ n == 0 {\n        return false\n    }\n    if x == 0 {\n        return false\n\
    \    }\n    if x == 1 {\n        return true\n    }\n    if x == 2 {\n       \
    \ return true\n    }\n    if x == 3 {\n        return true\n    }\n    if x ==\
    \ 4 {\n        return true\n    }\n    if x == 5 {\n        return true\n    }\n\
    \    if x == 6 {\n        return true\n    }\n    if x == 7 {\n        return\
    \ true\n    }\n    if x == 8 {\n        return true\n    }\n    if x == 9 {\n\
    \        return true\n    }\n    if x == 10 {\n        return true\n    }\n  \
    \  if x == 11 {\n        return true\n    }\n    if x == 12 {\n        return\
    \ true\n    }\n    if x == 13 {\n        return true\n    }\n    if x == 14 {\n\
    \        return true\n    }\n    if x == 15 {\n        return true\n    }\n  \
    \  if x == 16 {\n        return true\n    }\n    if x == 17 {\n        return\
    \ true\n    }\n    if x == 18 {\n        return true\n    }\n    if x == 19 {\n\
    \        return true\n    }\n    if x == 20 {\n        return true\n    }\n  \
    \  if x == 21 {\n        return true\n    }\n    if x == 22 {\n        return\
    \ true\n    }\n    if x == 23 {\n        return true\n    }\n    if x == 24 {\n\
    \        return true\n    }\n    if x == 25 {\n        return true\n    }\n  \
    \  if x == 26 {\n        return true\n    }\n    if x == 27 {\n        return\
    \ true\n    }\n    if x == 28 {\n        return true\n    }\n    if x == 29 {\n\
    \        return true\n    }\n    if x == 30 {\n        return true\n    }\n  \
    \  if x == 31 {\n        return true\n    }\n    if x == 32 {\n        return\
    \ true\n    }\n    if x == 33 {\n        return true\n    }\n    if x == 34 {\n\
    \        return true\n    }\n    if x == 35 {\n        return true\n    }\n  \
    \  if x == 36 {\n        return true\n    }\n    if x == 37 {\n        return\
    \ true\n    }\n    if x == 38 {\n        return true\n    }\n    if x == 39 {\n\
    \        return true\n    }\n    if x == 40 == 1 {\n        return true\n    }\n\
    \    if x == 41 == 2 {\n        return true\n    }\n    if x == 42 == 3 {\n  \
    \      return true\n    }\n    if x == 43 == 4 {\n        return true\n    }\n\
    \    if x == 44 == 5 {\n        return true\n    }\n    if x == 45 == 6 {\n  \
    \      return true\n    }\n    if x == 46 == 7 {\n        return true\n    }\n\
    \    if x == 47 == 8 {\n        return true\n    }\n    if x == \n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp3ymmq0ca.swift:173:1: error: expected expression after operator\n\
    }\n^\n/tmp/tmp3ymmq0ca.swift:148:10: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n    if x == 40 == 1 {\n         ^ \
    \    ~~\n/tmp/tmp3ymmq0ca.swift:148:16: error: binary operator '==' cannot be\
    \ applied to operands of type 'Bool' and 'Int'\n    if x == 40 == 1 {\n      \
    \ ~~~~~~~ ^  ~\n/tmp/tmp3ymmq0ca.swift:148:16: note: overloads for '==' exist\
    \ with these partially matching parameter lists: (Bool, Bool), (Int, Int)\n  \
    \  if x == 40 == 1 {\n               ^\n/tmp/tmp3ymmq0ca.swift:151:10: error:\
    \ adjacent operators are in non-associative precedence group 'ComparisonPrecedence'\n\
    \    if x == 41 == 2 {\n         ^     ~~\n/tmp/tmp3ymmq0ca.swift:151:16: error:\
    \ binary operator '==' cannot be applied to operands of type 'Bool' and 'Int'\n\
    \    if x == 41 == 2 {\n       ~~~~~~~ ^  ~\n/tmp/tmp3ymmq0ca.swift:151:16: note:\
    \ overloads for '==' exist with these partially matching parameter lists: (Bool,\
    \ Bool), (Int, Int)\n    if x == 41 == 2 {\n               ^\n/tmp/tmp3ymmq0ca.swift:154:10:\
    \ error: adjacent operators are in non-associative precedence group 'ComparisonPrecedence'\n\
    \    if x == 42 == 3 {\n         ^     ~~\n/tmp/tmp3ymmq0ca.swift:154:16: error:\
    \ binary operator '==' cannot be applied to operands of type 'Bool' and 'Int'\n\
    \    if x == 42 == 3 {\n       ~~~~~~~ ^  ~\n/tmp/tmp3ymmq0ca.swift:154:16: note:\
    \ overloads for '==' exist with these partially matching parameter lists: (Bool,\
    \ Bool), (Int, Int)\n    if x == 42 == 3 {\n               ^\n/tmp/tmp3ymmq0ca.swift:157:10:\
    \ error: adjacent operators are in non-associative precedence group 'ComparisonPrecedence'\n\
    \    if x == 43 == 4 {\n         ^     ~~\n/tmp/tmp3ymmq0ca.swift:157:16: error:\
    \ binary operator '==' cannot be applied to operands of type 'Bool' and 'Int'\n\
    \    if x == 43 == 4 {\n       ~~~~~~~ ^  ~\n/tmp/tmp3ymmq0ca.swift:157:16: note:\
    \ overloads for '==' exist with these partially matching parameter lists: (Bool,\
    \ Bool), (Int, Int)\n    if x == 43 == 4 {\n               ^\n/tmp/tmp3ymmq0ca"
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if n % x == 0 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmprb1xx1yn.swift:29:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return true\n    }\n    if\
    \ n == 2 {\n        return is_simple_power(x, n: 2)\n    }\n    if n == 3 {\n\
    \        return is_simple_power(x, n: 2)\n    }\n    if n == 4 {\n        return\
    \ is_simple_power(x, n: 2)\n    }\n    if n == 5 {\n        return is_simple_power(x,\
    \ n: 3)\n    }\n    if n == 6 {\n        return is_simple_power(x, n: 3)\n   \
    \ }\n    if n == 7 {\n        return is_simple_power(x, n: 3)\n    }\n    if n\
    \ == 8 {\n        return is_simple_power(x, n: 3)\n    }\n    if n == 9 {\n  \
    \      return is_simple_power(x, n: 3)\n    }\n    if n == 10 {\n        return\
    \ is_simple_power(x, n: 4)\n    }\n    if n == 11 {\n        return is_simple_power(x,\
    \ n: 4)\n    }\n    if n == 12 {\n        return is_simple_power(x, n: 4)\n  \
    \  }\n    if n == 13 {\n        return is_simple_power(x, n: 4)\n    }\n    if\
    \ n == 14 {\n        return is_simple_power(x, n: 4)\n    }\n    if n == 15 {\n\
    \        return is_simple_power(x, n: 4)\n    }\n    if n == 16 {\n        return\
    \ is_simple_power(x, n: 4)\n    }\n    if n == 17 {\n        return is_simple_power(x,\
    \ n: 4)\n    }\n    if n == 18 {\n        return is_simple_power(x, n: 4)\n  \
    \  }\n    if n == 19 {\n        return is_simple_power(x, n: 4)\n    }\n    if\
    \ n == 20 {\n        return is_simple_power(x, n: 4)\n    }\n    if n == 21 {\n\
    \        return is_simple_power(x, n: 4)\n    }\n    if n == 22 {\n        return\
    \ is_simple_power(x, n: 4)\n    }\n    if n == 23 {\n        return is_simple_power(x,\
    \ n: 4)\n    }\n    if n == 24 {\n        return is_simple_power(x, n: 4)\n  \
    \  }\n    if n == 25 {\n        return is_simple_power(x, n: 4)\n    }\n    if\
    \ n == 26 {\n        return is_simple_power(x, n: 4)\n    }\n    if n == 27 {\n\
    \        return is_simple_power(x, n: 4)\n    }\n    if n == 28 {\n        return\
    \ is_simple_power(x, n: 4)\n    }\n    if n == 29 {\n        return is_simple_power(x,\
    \ n: 4)\n    }\n    if n == 30 {\n        return is_simple_power(x, n: 4)\n  \
    \  }\n    if n == 31 {\n        return is_simple_power(x, n: 4)\n    }\n    if\
    \ n == 32 {\n        return is_simple_power(x, n: 4)\n    }\n    if n == 33 {\n\
    \        return is_simple_power(x, n: 4)\n    }\n    if n == 34 {\n        return\
    \ is_simple_power(x, n: 4)\n    }\n    if n == \n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpazvuj_2a.swift:125:1: error: expected expression after operator\n\
    }\n^\n/tmp/tmpazvuj_2a.swift:26:31: error: missing argument label 'x:' in call\n\
    \        return is_simple_power(x, n: 2)\n                              ^\n  \
    \                             x: \n/tmp/tmpazvuj_2a.swift:29:31: error: missing\
    \ argument label 'x:' in call\n        return is_simple_power(x, n: 2)\n     \
    \                         ^\n                               x: \n/tmp/tmpazvuj_2a.swift:32:31:\
    \ error: missing argument label 'x:' in call\n        return is_simple_power(x,\
    \ n: 2)\n                              ^\n                               x: \n\
    /tmp/tmpazvuj_2a.swift:35:31: error: missing argument label 'x:' in call\n   \
    \     return is_simple_power(x, n: 3)\n                              ^\n     \
    \                          x: \n/tmp/tmpazvuj_2a.swift:38:31: error: missing argument\
    \ label 'x:' in call\n        return is_simple_power(x, n: 3)\n              \
    \                ^\n                               x: \n/tmp/tmpazvuj_2a.swift:41:31:\
    \ error: missing argument label 'x:' in call\n        return is_simple_power(x,\
    \ n: 3)\n                              ^\n                               x: \n\
    /tmp/tmpazvuj_2a.swift:44:31: error: missing argument label 'x:' in call\n   \
    \     return is_simple_power(x, n: 3)\n                              ^\n     \
    \                          x: \n/tmp/tmpazvuj_2a.swift:47:31: error: missing argument\
    \ label 'x:' in call\n        return is_simple_power(x, n: 3)\n              \
    \                ^\n                               x: \n/tmp/tmpazvuj_2a.swift:50:31:\
    \ error: missing argument label 'x:' in call\n        return is_simple_power(x,\
    \ n: 4)\n                              ^\n                               x: \n\
    /tmp/tmpazvuj_2a.swift:53:31: error: missing argument label 'x:' in call\n   \
    \     return is_simple_power(x, n: 4)\n                              ^\n     \
    \                          x: \n/tmp/tmpazvuj_2a.swift:56:31: error: missing argument\
    \ label 'x:' in call\n        return is_simple_power(x, n: 4)\n              \
    \                ^\n                           "
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if x < n {\n        return false\n\
    \    }\n    if x > n {\n        return false\n    }\n    if x == n {\n       \
    \ return true\n    }\n    if x == 1 {\n        return true\n    }\n    if x ==\
    \ n {\n        return true\n    }\n    if x == 2 {\n        return true\n    }\n\
    \    if x == 3 {\n        return true\n    }\n    if x == 4 {\n        return\
    \ true\n    }\n    if x == 5 {\n        return true\n    }\n    if x == 6 {\n\
    \        return true\n    }\n    if x == 7 {\n        return true\n    }\n   \
    \ if x == 8 {\n        return true\n    }\n    if x == 9 {\n        return true\n\
    \    }\n    if x == 10 {\n        return true\n    }\n    if x == 11 {\n     \
    \   return true\n    }\n    if x == 12 {\n        return true\n    }\n    if x\
    \ == 13 {\n        return true\n    }\n    if x == 14 {\n        return true\n\
    \    }\n    if x == 15 {\n        return true\n    }\n    if x == 16 {\n     \
    \   return true\n    }\n    if x == 17 {\n        return true\n    }\n    if x\
    \ == 18 {\n        return true\n    }\n    if x == 19 {\n        return true\n\
    \    }\n    if x == 20 {\n        return true\n    }\n    if x == 21 {\n     \
    \   return true\n    }\n    if x == 22 {\n        return true\n    }\n    if x\
    \ == 23 {\n        return true\n    }\n    if x == 24 {\n        return true\n\
    \    }\n    if x == 25 {\n        return true\n    }\n    if x == 26 {\n     \
    \   return true\n    }\n    if x == 27 {\n        return true\n    }\n    if x\
    \ == 28 {\n        return true\n    }\n    if x == 29 {\n        return true\n\
    \    }\n    if x == 30 {\n        return true\n    }\n    if x == 31 {\n     \
    \   return true\n    }\n    if x == 32 {\n        return true\n    }\n    if x\
    \ == 33 {\n        return true\n    }\n    if x == 34 {\n        return true\n\
    \    }\n    if x == 35 {\n        return true\n    }\n    if x == 36 {\n     \
    \   return true\n    }\n    if x == 37 {\n        return true\n    }\n    if x\
    \ == 38 {\n        return true\n    }\n    if x == 39 {\n        return true\n\
    \    }\n    if x == 40 {\n        return true\n    }\n    if x == 41 {\n     \
    \   return true\n    }\n    if x == 42 {\n        return true\n    }\n    if x\
    \ == 43 {\n        return true\n    }\n    if x == 44 {\n        return true\n\
    \    }\n    if x == 45 {\n        return true\n\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpxgta29ht.swift:199:45: error: expected '}' at end of brace statement\n\
    assert(is_simple_power(x: 1, n: 12) == true)\n                               \
    \             ^\n/tmp/tmpxgta29ht.swift:18:46: note: to match this opening '{'\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n                             \
    \                ^\n/tmp/tmpxgta29ht.swift:178:6: error: operator functions can\
    \ only be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824559
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if x % n == 0 {\n        return true\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpkvpr0wav/tmpkvpr0wav.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8ba96dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8ba664b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8ba664988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8ba6637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkvpr0wav                        0x0000558a6469e4a7 <unavailable> + 5287

    5    libc.so.6                          0x00002ac8bab59460 __libc_start_main +
    245

    6    tmpkvpr0wav                        0x0000558a6469def9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824559
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if x % n == 0 {\n        return true\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpkvpr0wav/tmpkvpr0wav.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8ba96dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8ba664b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8ba664988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8ba6637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkvpr0wav                        0x0000558a6469e4a7 <unavailable> + 5287

    5    libc.so.6                          0x00002ac8bab59460 __libc_start_main +
    245

    6    tmpkvpr0wav                        0x0000558a6469def9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if x < n {\n        return false\n\
    \    }\n    return is_simple_power(x, n-1)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmprpgtawc7.swift:31:27: error: missing argument labels 'x:n:' in\
    \ call\n    return is_simple_power(x, n-1)\n                          ^\n    \
    \                       x: n: \n"
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if n % 2 == 0 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp6risw0mv.swift:29:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 0 {\n \
    \       return true\n    }\n    if n == 1 {\n        return true\n    }\n    if\
    \ x == 1 {\n        return true\n    }\n    if x == x {\n        return true\n\
    \    }\n    if x == x * x {\n        return true\n    }\n    if x == x * x * x\
    \ {\n        return true\n    }\n    if x == x * x * x * x {\n        return true\n\
    \    }\n    if x == x * x * x * x * x {\n        return true\n    }\n    if x\
    \ == x * x * x * x * x * x {\n        return true\n    }\n    if x == x * x *\
    \ x * x * x * x * x {\n        return true\n    }\n    if x == x * x * x * x *\
    \ x * x * x * x {\n        return true\n    }\n    if x == x * x * x * x * x *\
    \ x * x * x * x {\n        return true\n    }\n    if x == x * x * x * x * x *\
    \ x * x * x * x * x {\n        return true\n    }\n    if x == x * x * x * x *\
    \ x * x * x * x * x * x * x {\n        return true\n    }\n    if x == x * x *\
    \ x * x * x * x * x * x * x * x * x * x {\n        return true\n    }\n    if\
    \ x == x * x * x * x * x * x * x * x * x * x * x * x * x {\n        return true\n\
    \    }\n    if x == x * x * x * x * x * x * x * x * x * x * x * x * x * x {\n\
    \        return true\n    }\n    if x == x * x * x * x * x * x * x * x * x * x\
    \ * x * x * x * x * x {\n        return true\n    }\n    if x == x * x * x * x\
    \ * x * x * x * x * x * x * x * x * x * x * x * x {\n        return true\n   \
    \ }\n    if x == x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x\
    \ * x {\n        return true\n    }\n    if x == x * x * x * x * x * x * x * x\
    \ * x * x * x * x * x * x * x * x * x * x {\n        return true\n    }\n    if\
    \ x == x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x *\
    \ x {\n        return true\n    }\n    if x == x * x * x * x * x * x * x * x *\
    \ x * x * x * x * x * x * x * x * x * x * x {\n        return true\n    }\n  \
    \  if x == x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x *\
    \ x * x * x {\n        return true\n    }\n    if x == x * x * x * x * x * x *\
    \ x * x * x * x * x * x * x * x * x * x * x * x * x * x * x {\n        return\
    \ true\n    }\n    if x == x * x * x * x * x * x * x * x * x * x * x * x * x *\
    \ x * x * x * x * x * x * x * x * x {\n        return true\n    }\n    if x ==\
    \ x * x * x * x * \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: '/tmp/tmphqh5draz.swift:98:1: error: expected expression after operator

    }

    ^

    '
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ n == 0 {\n        return false\n    }\n    if x == 0 {\n        return false\n\
    \    }\n    if x == 1 {\n        return true\n    }\n    if n == 2 {\n       \
    \ return true\n    }\n    if x == 2 {\n        return true\n    }\n    if n ==\
    \ 3 {\n        return true\n    }\n    if x == 3 {\n        return true\n    }\n\
    \    if n == 4 {\n        return true\n    }\n    if x == 4 {\n        return\
    \ true\n    }\n    if n == 5 {\n        return true\n    }\n    if x == 5 {\n\
    \        return true\n    }\n    if n == 6 {\n        return true\n    }\n   \
    \ if x == 6 {\n        return true\n    }\n    if n == 7 {\n        return true\n\
    \    }\n    if x == 7 {\n        return true\n    }\n    if n == 8 {\n       \
    \ return true\n    }\n    if x == 8 {\n        return true\n    }\n    if n ==\
    \ 9 {\n        return true\n    }\n    if x == 9 {\n        return true\n    }\n\
    \    if n == 10 {\n        return true\n    }\n    if x == 10 {\n        return\
    \ true\n    }\n    if n == 11 {\n        return true\n    }\n    if x == 11 {\n\
    \        return true\n    }\n    if n == 12 {\n        return true\n    }\n  \
    \  if x == 12 {\n        return true\n    }\n    if n == 13 {\n        return\
    \ true\n    }\n    if x == 13 {\n        return true\n    }\n    if n == 14 {\n\
    \        return true\n    }\n    if x == 14 {\n        return true\n    }\n  \
    \  if n == 15 {\n        return true\n    }\n    if x == 15 {\n        return\
    \ true\n    }\n    if n == 16 {\n        return true\n    }\n    if x == 16 {\n\
    \        return true\n    }\n    if n == 17 {\n        return true\n    }\n  \
    \  if x == 17 {\n        return true\n    }\n    if n == 18 {\n        return\
    \ true\n    }\n    if x == 18 {\n        return true\n    }\n    if n == 19 {\n\
    \        return true\n    }\n    if x == 19 {\n        return true\n    }\n  \
    \  if n == 20 {\n        return true\n    }\n    if x == 20 {\n        return\
    \ true\n    }\n    if n == 21 {\n        return true\n    }\n    if x == 21 {\n\
    \        return true\n    }\n    if n == 22 {\n        return true\n    }\n  \
    \  if x == 22 {\n        return true\n    }\n    if n == 23 {\n        return\
    \ true\n    }\n    if x == 23 {\n        return true\n    }\n    if n == 24 {\n\
    \        return true\n    }\n    if x == 24 {\n        return true\n    }\n  \
    \  if n == 25 {\n        return true\n    }\n    if x == 25\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmptidc7_a7.swift:175:15: error: expected '{' after 'if' condition\n\
    \    if x == 25\n              ^\n"
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if x == n {\n        return true\n    }\n    if\
    \ n < 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n\
    \    }\n    if n == 0 {\n        return false\n    }\n    if x == 0 || n == 1\
    \ {\n        return true\n    }\n    if x == n {\n        return true\n    }\n\
    \    if x == 1 {\n        return true\n    }\n    if n == 2 {\n        return\
    \ true\n    }\n    if n == 3 {\n        return true\n    }\n    if n == 4 {\n\
    \        return true\n    }\n    if n == 5 {\n        return true\n    }\n   \
    \ if n == 6 {\n        return true\n    }\n    if n == 7 {\n        return true\n\
    \    }\n    if n == 8 {\n        return true\n    }\n    if n == 9 {\n       \
    \ return true\n    }\n    if n == 10 {\n        return true\n    }\n    if n ==\
    \ 11 {\n        return true\n    }\n    if n == 12 {\n        return true\n  \
    \  }\n    if n == 13 {\n        return true\n    }\n    if n == 14 {\n       \
    \ return true\n    }\n    if n == 15 {\n        return true\n    }\n    if n ==\
    \ 16 {\n        return true\n    }\n    if n == 17 {\n        return true\n  \
    \  }\n    if n == 18 {\n        return true\n    }\n    if n == 19 {\n       \
    \ return true\n    }\n    if n == 20 {\n        return true\n    }\n    if n ==\
    \ 21 {\n        return true\n    }\n    if n == 22 {\n        return true\n  \
    \  }\n    if n == 23 {\n        return true\n    }\n    if n == 24 {\n       \
    \ return true\n    }\n    if n == 25 {\n        return true\n    }\n    if n ==\
    \ 26 {\n        return true\n    }\n    if n == 27 {\n        return true\n  \
    \  }\n    if n == 28 {\n        return true\n    }\n    if n == 29 {\n       \
    \ return true\n    }\n    if n == 30 {\n        return true\n    }\n    if n ==\
    \ 31 {\n        return true\n    }\n    if n == 32 {\n        return true\n  \
    \  }\n    if n == 33 {\n        return true\n    }\n    if n == 34 {\n       \
    \ return true\n    }\n    if n == 35 {\n        return true\n    }\n    if n ==\
    \ 36 {\n        return true\n    }\n    if n == 37 {\n        return true\n  \
    \  }\n    if n == 38 {\n        return true\n    }\n    if n == 39 {\n       \
    \ return true\n    }\n    if n == 40 {\n        return true\n    }\n    if n ==\
    \ 41 {\n        return true\n    }\n    if n == 42 {\n        return true\n  \
    \  }\n    if n == 43 {\n        return true\n    }\n    if n == 44 {\n       \
    \ return true\n    }\n    if n == 45 {\n        return true\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: '/tmp/tmper39x_ne.swift:175:1: error: missing return in global function
    expected to return ''Bool''

    }

    ^

    '
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if n == 0 {\n        return false\n    }\n   \
    \ if x == 1 {\n        return true\n    }\n    if x == 0 {\n        return false\n\
    \    }\n    if x == n {\n        return true\n    }\n    if x % n == 0 {\n   \
    \     return is_simple_power(x, n-1)\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp1aksy0ki.swift:35:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return is_simple_power_impl(x,\
    \ n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_simple_power(x: 16, n: 2)\
    \ == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpzcc3hh6c.swift:19:12: error: cannot find 'is_simple_power_impl'\
    \ in scope\n    return is_simple_power_impl(x, n)\n           ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if n % x == 0 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmprb1xx1yn.swift:29:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 0 {\n \
    \       return true\n    }\n    if n == 1 {\n        return true\n    }\n    if\
    \ x == 1 {\n        return true\n    }\n    if x == n {\n        return true\n\
    \    }\n    if n % 2 == 0 {\n        return is_simple_power(x, n-1)\n    }\n \
    \   return is_simple_power(x, n-1)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x: 143214,\
    \ n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmppxgt62mw.swift:32:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n/tmp/tmppxgt62mw.swift:34:27: error:\
    \ missing argument labels 'x:n:' in call\n    return is_simple_power(x, n-1)\n\
    \                          ^\n                           x: n: \n"
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if n == 0 {\n        return false\n    }\n   \
    \ if x == 1 {\n        return true\n    }\n    if x == 0 {\n        return false\n\
    \    }\n    if x == n {\n        return true\n    }\n    if x % n == 0 {\n   \
    \     return is_simple_power(x, n-1)\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp1aksy0ki.swift:35:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return is_power_of_two(x)\
    \ && is_power_of_two(n) && is_power_of_two(n*n)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpml3iqds9.swift:19:12: error: cannot find 'is_power_of_two' in scope\n\
    \    return is_power_of_two(x) && is_power_of_two(n) && is_power_of_two(n*n)\n\
    \           ^~~~~~~~~~~~~~~\n/tmp/tmpml3iqds9.swift:19:34: error: cannot find\
    \ 'is_power_of_two' in scope\n    return is_power_of_two(x) && is_power_of_two(n)\
    \ && is_power_of_two(n*n)\n                                 ^~~~~~~~~~~~~~~\n\
    /tmp/tmpml3iqds9.swift:19:56: error: cannot find 'is_power_of_two' in scope\n\
    \    return is_power_of_two(x) && is_power_of_two(n) && is_power_of_two(n*n)\n\
    \                                                       ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824560
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if x % n == 0 {\n        return true\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpkvpr0wav/tmpkvpr0wav.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8ba96dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8ba664b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8ba664988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8ba6637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkvpr0wav                        0x0000558a6469e4a7 <unavailable> + 5287

    5    libc.so.6                          0x00002ac8bab59460 __libc_start_main +
    245

    6    tmpkvpr0wav                        0x0000558a6469def9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if x > n {\n        return false\n\
    \    }\n    if x < 0 {\n        return false\n    }\n    if x == n {\n       \
    \ return true\n    }\n    if x == 1 {\n        return true\n    }\n    if x ==\
    \ n {\n        return true\n    }\n    if x == 2 {\n        return true\n    }\n\
    \    if x == 4 {\n        return true\n    }\n    if x == 8 {\n        return\
    \ true\n    }\n    if x == 16 {\n        return true\n    }\n    if x == 32 {\n\
    \        return true\n    }\n    if x == 64 {\n        return true\n    }\n  \
    \  if x == 128 {\n        return true\n    }\n    if x == 256 {\n        return\
    \ true\n    }\n    if x == 512 {\n        return true\n    }\n    if x == 1024\
    \ {\n        return true\n    }\n    if x == 2048 {\n        return true\n   \
    \ }\n    if x == 4096 {\n        return true\n    }\n    if x == 8192 {\n    \
    \    return true\n    }\n    if x == 16384 {\n        return true\n    }\n   \
    \ if x == 32768 {\n        return true\n    }\n    if x == 65536 {\n        return\
    \ true\n    }\n    if x == 131072 {\n        return true\n    }\n    if x == 262144\
    \ {\n        return true\n    }\n    if x == 524288 {\n        return true\n \
    \   }\n    if x == 1048576 {\n        return true\n    }\n    if x == 2097152\
    \ {\n        return true\n    }\n    if x == 4194304 {\n        return true\n\
    \    }\n    if x == 8388608 {\n        return true\n    }\n    if x == 16777216\
    \ {\n        return true\n    }\n    if x == 33554432 {\n        return true\n\
    \    }\n    if x == 67108864 {\n        return true\n    }\n    if x == 134217728\
    \ {\n        return true\n    }\n    if x == 268435456 {\n        return true\n\
    \    }\n    if x == 536870912 {\n        return true\n    }\n    if x == 1073741824\
    \ {\n        return true\n    }\n    if x == 2147483648 {\n        return true\n\
    \    }\n    if x == 4294967296 {\n        return true\n    }\n    if x == 8589934592\
    \ {\n        return true\n    }\n    if x == 17179869184 {\n        return true\n\
    \    }\n    if x == 34359738368 {\n        return true\n    }\n    if x == 68719476736\
    \ {\n        return true\n    }\n    if x == 137438953472 {\n        return true\n\
    \    }\n    if x == 2748779069\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpfhkwhfey.swift:154:23: error: expected '{' after 'if' condition\n\
    \    if x == 2748779069\n                      ^\n"
  stdout: ''
  timestamp: 1659824560
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if x % n == 0 {\n        return true\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpknn8gd0v/tmpknn8gd0v.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9cc6879c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9cc6570b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9cc6570988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9cc656f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpknn8gd0v                        0x0000557d272784a7 <unavailable> + 5287

    5    libc.so.6                          0x00002b9cc6a65460 __libc_start_main +
    245

    6    tmpknn8gd0v                        0x0000557d27277ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return true\n    }\n    if\
    \ n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n       \
    \ return true\n    }\n    if n == 6 {\n        return true\n    }\n    if n ==\
    \ 7 {\n        return true\n    }\n    if n == 8 {\n        return true\n    }\n\
    \    if n == 9 {\n        return true\n    }\n    if n == 10 {\n        return\
    \ true\n    }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n\
    \        return true\n    }\n    if n == 13 {\n        return true\n    }\n  \
    \  if n == 14 {\n        return true\n    }\n    if n == 15 {\n        return\
    \ true\n    }\n    if n == 16 {\n        return true\n    }\n    if n == 17 {\n\
    \        return true\n    }\n    if n == 18 {\n        return true\n    }\n  \
    \  if n == 19 {\n        return true\n    }\n    if n == 20 {\n        return\
    \ true\n    }\n    if n == 21 {\n        return true\n    }\n    if n == 22 {\n\
    \        return true\n    }\n    if n == 23 {\n        return true\n    }\n  \
    \  if n == 24 {\n        return true\n    }\n    if n == 25 {\n        return\
    \ true\n    }\n    if n == 26 {\n        return true\n    }\n    if n == 27 {\n\
    \        return true\n    }\n    if n == 28 {\n        return true\n    }\n  \
    \  if n == 29 {\n        return true\n    }\n    if n == 30 {\n        return\
    \ true\n    }\n    if n == 31 {\n        return true\n    }\n    if n == 32 {\n\
    \        return true\n    }\n    if n == 33 {\n        return true\n    }\n  \
    \  if n == 34 {\n        return true\n    }\n    if n == 35 {\n        return\
    \ true\n    }\n    if n == 36 {\n        return true\n    }\n    if n == 37 {\n\
    \        return true\n    }\n    if n == 38 {\n        return true\n    }\n  \
    \  if n == 39 {\n        return true\n    }\n    if n == 40 {\n        return\
    \ true\n    }\n    if n == 41 {\n        return true\n    }\n    if n == 42 {\n\
    \        return true\n    }\n    if n == 43 {\n        return true\n    }\n  \
    \  if n == 44 {\n        return true\n    }\n    if n == 45 {\n        return\
    \ true\n    }\n    if n == 46 {\n        return true\n    }\n    if n == 47 {\n\
    \        return true\n    }\n    if n == 48 {\n        return true\n    }\n  \
    \  if n == 49 {\n        return true\n    }\n    if n == 50 {\n        return\
    \ true\n    }\n    if n == 51 {\n        return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp5y_ka5ft.swift:198:45: error: expected '}' at end of brace statement\n\
    assert(is_simple_power(x: 1, n: 12) == true)\n                               \
    \             ^\n/tmp/tmp5y_ka5ft.swift:18:46: note: to match this opening '{'\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n                             \
    \                ^\n/tmp/tmp5y_ka5ft.swift:177:6: error: operator functions can\
    \ only be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824560
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if n == 0 {\n        return false\n    }\n   \
    \ if x == 1 {\n        return true\n    }\n    if x == 0 {\n        return false\n\
    \    }\n    if x == n {\n        return true\n    }\n    if x % n == 0 {\n   \
    \     return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpqaotrr_c/tmpqaotrr_c.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b422a02ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4229d25b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4229d25988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4229d247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqaotrr_c                        0x0000558c857834a7 <unavailable> + 5287

    5    libc.so.6                          0x00002b422a21a460 __libc_start_main +
    245

    6    tmpqaotrr_c                        0x0000558c85782ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if n % 2 == 0 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp1tsvwoi6.swift:29:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ n == 0 {\n        return false\n    }\n    if x == 0 {\n        return false\n\
    \    }\n    if n == 2 {\n        return is_simple_power(x, n-1)\n    }\n    if\
    \ x == 2 {\n        return is_simple_power(x, n-1)\n    }\n    if n == 3 {\n \
    \       return is_simple_power(x, n-1)\n    }\n    if x == 3 {\n        return\
    \ is_simple_power(x, n-1)\n    }\n    if n == 4 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    if x == 4 {\n        return is_simple_power(x, n-1)\n    }\n\
    \    if n == 5 {\n        return is_simple_power(x, n-1)\n    }\n    if x == 5\
    \ {\n        return is_simple_power(x, n-1)\n    }\n    if n == 6 {\n        return\
    \ is_simple_power(x, n-1)\n    }\n    if x == 6 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    if n == 7 {\n        return is_simple_power(x, n-1)\n    }\n\
    \    if x == 7 {\n        return is_simple_power(x, n-1)\n    }\n    if n == 8\
    \ {\n        return is_simple_power(x, n-1)\n    }\n    if x == 8 {\n        return\
    \ is_simple_power(x, n-1)\n    }\n    if n == 9 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    if x == 9 {\n        return is_simple_power(x, n-1)\n    }\n\
    \    if n == 10 {\n        return is_simple_power(x, n-1)\n    }\n    if x ==\
    \ 10 {\n        return is_simple_power(x, n-1)\n    }\n    if n == 11 {\n    \
    \    return is_simple_power(x, n-1)\n    }\n    if x == 11 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    if n == 12 {\n        return is_simple_power(x, n-1)\n    }\n\
    \    if x == 12 {\n        return is_simple_power(x, n-1)\n    }\n    if n ==\
    \ 13 {\n        return is_simple_power(x, n-1)\n    }\n    if x == 13 {\n    \
    \    return is_simple_power(x, n-1)\n    }\n    if n == 14 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    if x == 14 {\n        return is_simple_power(x, n-1)\n    }\n\
    \    if n == 15 {\n        return is_simple_power(x, n-1)\n    }\n    if x ==\
    \ 15 {\n        return is_simple_power(x, n-1)\n    }\n    if n == 16 {\n    \
    \    return is_simple_power(x, n-1)\n    }\n    if x == 16 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    if n == 17 {\n        return is_simple_power(x, n-1)\n    }\n\
    \    if x == 17 {\n        return is_simple_power(x, n-1)\n    }\n    if n ==\
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_simple_power(x: 16, n: 2)\
    \ == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpkm120wx7.swift:128:1: error: expected expression after operator\n\
    }\n^\n/tmp/tmpkm120wx7.swift:32:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, n-1)\n                              ^\n   \
    \                            x: n: \n/tmp/tmpkm120wx7.swift:35:31: error: missing\
    \ argument labels 'x:n:' in call\n        return is_simple_power(x, n-1)\n   \
    \                           ^\n                               x: n: \n/tmp/tmpkm120wx7.swift:38:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ n-1)\n                              ^\n                               x: n:\
    \ \n/tmp/tmpkm120wx7.swift:41:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, n-1)\n                              ^\n   \
    \                            x: n: \n/tmp/tmpkm120wx7.swift:44:31: error: missing\
    \ argument labels 'x:n:' in call\n        return is_simple_power(x, n-1)\n   \
    \                           ^\n                               x: n: \n/tmp/tmpkm120wx7.swift:47:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ n-1)\n                              ^\n                               x: n:\
    \ \n/tmp/tmpkm120wx7.swift:50:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, n-1)\n                              ^\n   \
    \                            x: n: \n/tmp/tmpkm120wx7.swift:53:31: error: missing\
    \ argument labels 'x:n:' in call\n        return is_simple_power(x, n-1)\n   \
    \                           ^\n                               x: n: \n/tmp/tmpkm120wx7.swift:56:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ n-1)\n                              ^\n                               x: n:\
    \ \n/tmp/tmpkm120wx7.swift:59:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, n-1)\n                              ^\n   \
    \                            x: n: \n/tmp/tmpkm120wx7.swift:62:31: error: missing\
    \ argument labels 'x:n:' in call\n        return is_simple_power(x, n-1)\n   \
    \    "
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 0 {\n \
    \       return true\n    }\n    if n == 1 {\n        return true\n    }\n    if\
    \ x == 1 {\n        return true\n    }\n    if x == n {\n        return true\n\
    \    }\n    if x % n == 0 {\n        return true\n    }\n    if x % n == 1 {\n\
    \        return false\n    }\n    if x % n == 2 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    return is_simple_power(x, n-1)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpnta58gv0.swift:38:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n/tmp/tmpnta58gv0.swift:40:27: error:\
    \ missing argument labels 'x:n:' in call\n    return is_simple_power(x, n-1)\n\
    \                          ^\n                           x: n: \n"
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if x % n == 0 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpql79bezd.swift:29:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if n % x == 0 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmprb1xx1yn.swift:29:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if n == 0 {\n        return false\n    }\n   \
    \ if x == 1 {\n        return true\n    }\n    if x == 0 {\n        return false\n\
    \    }\n    if x == n {\n        return true\n    }\n    if x % n == 0 {\n   \
    \     return is_simple_power(x / n, n)\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp9jdielsl.swift:35:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x / n, n)\n                           \
    \   ^\n                               x:     n: \n"
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if n == 0 {\n        return false\n    }\n   \
    \ if x == 1 {\n        return true\n    }\n    if x == 0 {\n        return false\n\
    \    }\n    if x == n {\n        return true\n    }\n    if x > n {\n        return\
    \ false\n    }\n    if x < n {\n        return false\n    }\n    if x == n**n\
    \ {\n        return true\n    }\n    if x == n**(n-1) - 1 {\n        return true\n\
    \    }\n    if x == n**(n-2) - 1 {\n        return true\n    }\n    if x == n**(n-3)\
    \ - 1 {\n        return true\n    }\n    if x == n**(n-4) - 1 {\n        return\
    \ true\n    }\n    if x == n**(n-5) - 1 {\n        return true\n    }\n    if\
    \ x == n**(n-6) - 1 {\n        return true\n    }\n    if x == n**(n-7) - 1 {\n\
    \        return true\n    }\n    if x == n**(n-8) - 1 {\n        return true\n\
    \    }\n    if x == n**(n-9) - 1 {\n        return true\n    }\n    if x == n**(n-10)\
    \ - 1 {\n        return true\n    }\n    if x == n**(n-11) - 1 {\n        return\
    \ true\n    }\n    if x == n**(n-12) - 1 {\n        return true\n    }\n    if\
    \ x == n**(n-13) - 1 {\n        return true\n    }\n    if x == n**(n-14) - 1\
    \ {\n        return true\n    }\n    if x == n**(n-15) - 1 {\n        return true\n\
    \    }\n    if x == n**(n-16) - 1 {\n        return true\n    }\n    if x == n**(n-17)\
    \ - 1 {\n        return true\n    }\n    if x == n**(n-18) - 1 {\n        return\
    \ true\n    }\n    if x == n**(n-19) - 1 {\n        return true\n    }\n    if\
    \ x == n**(n-20) - 1 {\n        return true\n    }\n    if x == n**(n-21) - 1\
    \ {\n        return true\n    }\n    if x == n**(n-22) - 1 {\n        return true\n\
    \    }\n    if x == n**(n-23) - 1 {\n        return true\n    }\n    if x == n**(n-24)\
    \ - 1 {\n        return true\n    }\n    if x == n**(n-25) - 1 {\n        return\
    \ true\n    }\n    if x == n**(n-26) - 1 {\n        return true\n    }\n    if\
    \ x == n**(n-27) - 1 {\n        return true\n    }\n    if x == n**(n-28) - 1\
    \ {\n        return true\n    }\n    if x == n**(n-29) - 1 {\n        return true\n\
    \    }\n    if x == n**(n-30) - 1 {\n        return true\n    }\n    if x == n**(n-\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp8_ug9kig.swift:134:1: error: expected ')' in expression list\n\
    }\n^\n/tmp/tmp8_ug9kig.swift:133:16: note: to match this opening '('\n    if x\
    \ == n**(n-\n               ^\n/tmp/tmp8_ug9kig.swift:40:14: error: cannot find\
    \ operator '**' in scope\n    if x == n**n {\n             ^~\n/tmp/tmp8_ug9kig.swift:43:14:\
    \ error: cannot find operator '**' in scope\n    if x == n**(n-1) - 1 {\n    \
    \         ^~\n/tmp/tmp8_ug9kig.swift:43:22: error: type 'Int' cannot be used as\
    \ a boolean; test for '!= 0' instead\n    if x == n**(n-1) - 1 {\n           \
    \          ^\n       ((               ) != 0)\n/tmp/tmp8_ug9kig.swift:46:14: error:\
    \ cannot find operator '**' in scope\n    if x == n**(n-2) - 1 {\n           \
    \  ^~\n/tmp/tmp8_ug9kig.swift:46:22: error: type 'Int' cannot be used as a boolean;\
    \ test for '!= 0' instead\n    if x == n**(n-2) - 1 {\n                     ^\n\
    \       ((               ) != 0)\n/tmp/tmp8_ug9kig.swift:49:14: error: cannot\
    \ find operator '**' in scope\n    if x == n**(n-3) - 1 {\n             ^~\n/tmp/tmp8_ug9kig.swift:49:22:\
    \ error: type 'Int' cannot be used as a boolean; test for '!= 0' instead\n   \
    \ if x == n**(n-3) - 1 {\n                     ^\n       ((               ) !=\
    \ 0)\n/tmp/tmp8_ug9kig.swift:52:14: error: cannot find operator '**' in scope\n\
    \    if x == n**(n-4) - 1 {\n             ^~\n/tmp/tmp8_ug9kig.swift:52:22: error:\
    \ type 'Int' cannot be used as a boolean; test for '!= 0' instead\n    if x ==\
    \ n**(n-4) - 1 {\n                     ^\n       ((               ) != 0)\n/tmp/tmp8_ug9kig.swift:55:14:\
    \ error: cannot find operator '**' in scope\n    if x == n**(n-5) - 1 {\n    \
    \         ^~\n/tmp/tmp8_ug9kig.swift:55:22: error: type 'Int' cannot be used as\
    \ a boolean; test for '!= 0' instead\n    if x == n**(n-5) - 1 {\n           \
    \          ^\n       ((               ) != 0)\n/tmp/tmp8_ug9kig.swift:58:14: error:\
    \ cannot find operator '**' in scope\n    if x == n**(n-6) - 1 {\n           \
    \  ^~\n/tmp/tmp8_ug9kig.swift:58:22: error: type 'Int' cannot be used as a boolean;\
    \ test for '!= 0' instead\n    if x == n**(n-6) - 1 {\n                     ^\n\
    \       ((    "
  stdout: ''
  timestamp: 1659824561
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if n == 0 {\n        return false\n    }\n   \
    \ if x == 1 {\n        return true\n    }\n    if x == 0 {\n        return false\n\
    \    }\n    if x == n {\n        return true\n    }\n    if x % n == 0 {\n   \
    \     return is_simple_power(x / n, n: n)\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp6t6fao66.swift:35:31: error: missing argument label 'x:' in call\n\
    \        return is_simple_power(x / n, n: n)\n                              ^\n\
    \                               x: \n"
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if n == 0 {\n        return false\n    }\n   \
    \ if x == 1 {\n        return true\n    }\n    if x == 0 {\n        return false\n\
    \    }\n    if x == n {\n        return true\n    }\n    if x % n == 0 {\n   \
    \     return is_simple_power(x / n, n: n)\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp6t6fao66.swift:35:31: error: missing argument label 'x:' in call\n\
    \        return is_simple_power(x / n, n: n)\n                              ^\n\
    \                               x: \n"
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if x > n {\n        return false\n\
    \    }\n    if x < 0 {\n        return false\n    }\n    return is_simple_power(x,\
    \ n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp4hvrdbq5.swift:34:27: error: missing argument labels 'x:n:' in\
    \ call\n    return is_simple_power(x, n - 1)\n                          ^\n  \
    \                         x: n: \n"
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if n % 2 == 0 {\n        return is_simple_power(x,\
    \ n/2)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp83l3oc1t.swift:29:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n/2)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if x > n {\n        return false\n\
    \    }\n    if x < 0 {\n        return false\n    }\n    if x == 0 || n == 0 {\n\
    \        return false\n    }\n    if x == 1 {\n        return true\n    }\n  \
    \  if x == n {\n        return true\n    }\n    if x == n / 2 {\n        return\
    \ is_simple_power(x, n - 1)\n    }\n    if x == n * n {\n        return is_simple_power(x,\
    \ n - 2)\n    }\n    if x == n * n - n {\n        return is_simple_power(x, n\
    \ - 3)\n    }\n    if x == n * n - n / 2 {\n        return is_simple_power(x,\
    \ n - 4)\n    }\n    if x == n * n - n / 3 {\n        return is_simple_power(x,\
    \ n - 5)\n    }\n    if x == n * n - n / 4 {\n        return is_simple_power(x,\
    \ n - 6)\n    }\n    if x == n * n - n / 5 {\n        return is_simple_power(x,\
    \ n - 7)\n    }\n    if x == n * n - n / 6 {\n        return is_simple_power(x,\
    \ n - 8)\n    }\n    if x == n * n - n / 7 {\n        return is_simple_power(x,\
    \ n - 9)\n    }\n    if x == n * n - n / 8 {\n        return is_simple_power(x,\
    \ n - 10)\n    }\n    if x == n * n - n / 9 {\n        return is_simple_power(x,\
    \ n - 11)\n    }\n    if x == n * n - n / 10 {\n        return is_simple_power(x,\
    \ n - 12)\n    }\n    if x == n * n - n / 11 {\n        return is_simple_power(x,\
    \ n - 13)\n    }\n    if x == n * n - n / 12 {\n        return is_simple_power(x,\
    \ n - 14)\n    }\n    if x == n * n - n / 13 {\n        return is_simple_power(x,\
    \ n - 15)\n    }\n    if x == n * n - n / 14 {\n        return is_simple_power(x,\
    \ n - 16)\n    }\n    if x == n * n - n / 15 {\n        return is_simple_power(x,\
    \ n - 17)\n    }\n    if x == n * n - n / 16 {\n        return is_simple_power(x,\
    \ n - 18)\n    }\n    if x == n * n - n / 17 {\n        return is_simple_power(x,\
    \ n - 19)\n    }\n    if x == n * n - n / 18 {\n        return is_simple_power(x,\
    \ n - 20)\n    }\n    if x == n * n - n / 19 {\n        return is_simple_power(x,\
    \ n - 21)\n    }\n    if x == n * n - n / 20 {\n        return is_simple_power(x,\
    \ n - 22)\n    }\n    if x == n * n - n / 21 {\n        return is_simple_power(x,\
    \ n - 23)\n    }\n    if x == n * n - n / 22\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7lg2ax6a.swift:112:27: error: expected '{' after 'if' condition\n\
    \    if x == n * n - n / 22\n                          ^\n/tmp/tmp7lg2ax6a.swift:44:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ n - 1)\n                              ^\n                               x: n:\
    \ \n/tmp/tmp7lg2ax6a.swift:47:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, n - 2)\n                              ^\n \
    \                              x: n: \n/tmp/tmp7lg2ax6a.swift:50:31: error: missing\
    \ argument labels 'x:n:' in call\n        return is_simple_power(x, n - 3)\n \
    \                             ^\n                               x: n: \n/tmp/tmp7lg2ax6a.swift:53:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ n - 4)\n                              ^\n                               x: n:\
    \ \n/tmp/tmp7lg2ax6a.swift:56:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, n - 5)\n                              ^\n \
    \                              x: n: \n/tmp/tmp7lg2ax6a.swift:59:31: error: missing\
    \ argument labels 'x:n:' in call\n        return is_simple_power(x, n - 6)\n \
    \                             ^\n                               x: n: \n/tmp/tmp7lg2ax6a.swift:62:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ n - 7)\n                              ^\n                               x: n:\
    \ \n/tmp/tmp7lg2ax6a.swift:65:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, n - 8)\n                              ^\n \
    \                              x: n: \n/tmp/tmp7lg2ax6a.swift:68:31: error: missing\
    \ argument labels 'x:n:' in call\n        return is_simple_power(x, n - 9)\n \
    \                             ^\n                               x: n: \n/tmp/tmp7lg2ax6a.swift:71:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ n - 10)\n                              ^\n                               x:\
    \ n: \n/tmp/tmp7lg2ax6a.swift:74:31: error: missing argum"
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return true\n    }\n    if\
    \ n == 2 {\n        return is_simple_power(x, n-1)\n    }\n    if n == 3 {\n \
    \       return is_simple_power(x, n-2) || is_simple_power(x, n-2)\n    }\n   \
    \ if n == 4 {\n        return is_simple_power(x, n-3) || is_simple_power(x, n-3)\n\
    \    }\n    if n == 5 {\n        return is_simple_power(x, n-4) || is_simple_power(x,\
    \ n-4)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpr5ate4yd.swift:26:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n/tmp/tmpr5ate4yd.swift:29:31: error:\
    \ missing argument labels 'x:n:' in call\n        return is_simple_power(x, n-2)\
    \ || is_simple_power(x, n-2)\n                              ^\n              \
    \                 x: n: \n/tmp/tmpr5ate4yd.swift:29:58: error: missing argument\
    \ labels 'x:n:' in call\n        return is_simple_power(x, n-2) || is_simple_power(x,\
    \ n-2)\n                                                         ^\n         \
    \                                                 x: n: \n/tmp/tmpr5ate4yd.swift:32:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ n-3) || is_simple_power(x, n-3)\n                              ^\n         \
    \                      x: n: \n/tmp/tmpr5ate4yd.swift:32:58: error: missing argument\
    \ labels 'x:n:' in call\n        return is_simple_power(x, n-3) || is_simple_power(x,\
    \ n-3)\n                                                         ^\n         \
    \                                                 x: n: \n/tmp/tmpr5ate4yd.swift:35:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ n-4) || is_simple_power(x, n-4)\n                              ^\n         \
    \                      x: n: \n/tmp/tmpr5ate4yd.swift:35:58: error: missing argument\
    \ labels 'x:n:' in call\n        return is_simple_power(x, n-4) || is_simple_power(x,\
    \ n-4)\n                                                         ^\n         \
    \                                                 x: n: \n"
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if x > n {\n        return false\n\
    \    }\n    if x < n {\n        return false\n    }\n    return is_simple_power(x,\
    \ n-1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpv4ep9gb3.swift:34:27: error: missing argument labels 'x:n:' in\
    \ call\n    return is_simple_power(x, n-1)\n                          ^\n    \
    \                       x: n: \n"
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if x == n {\n        return true\n    }\n    if\
    \ n == 1 {\n        return false\n    }\n    if n == 2 {\n        return true\n\
    \    }\n    if n == 3 {\n        return true\n    }\n    if n == 4 {\n       \
    \ return true\n    }\n    if n == 5 {\n        return true\n    }\n    if n ==\
    \ 6 {\n        return true\n    }\n    if n == 7 {\n        return true\n    }\n\
    \    if n == 8 {\n        return true\n    }\n    if n == 9 {\n        return\
    \ true\n    }\n    if n == 10 {\n        return true\n    }\n    if n == 11 {\n\
    \        return true\n    }\n    if n == 12 {\n        return true\n    }\n  \
    \  if n == 13 {\n        return true\n    }\n    if n == 14 {\n        return\
    \ true\n    }\n    if n == 15 {\n        return true\n    }\n    if n == 16 {\n\
    \        return true\n    }\n    if n == 17 {\n        return true\n    }\n  \
    \  if n == 18 {\n        return true\n    }\n    if n == 19 {\n        return\
    \ true\n    }\n    if n == 20 {\n        return true\n    }\n    if n == 21 {\n\
    \        return true\n    }\n    if n == 22 {\n        return true\n    }\n  \
    \  if n == 23 {\n        return true\n    }\n    if n == 24 {\n        return\
    \ true\n    }\n    if n == 25 {\n        return true\n    }\n    if n == 26 {\n\
    \        return true\n    }\n    if n == 27 {\n        return true\n    }\n  \
    \  if n == 28 {\n        return true\n    }\n    if n == 29 {\n        return\
    \ true\n    }\n    if n == 30 {\n        return true\n    }\n    if n == 31 {\n\
    \        return true\n    }\n    if n == 32 {\n        return true\n    }\n  \
    \  if n == 33 {\n        return true\n    }\n    if n == 34 {\n        return\
    \ true\n    }\n    if n == 35 {\n        return true\n    }\n    if n == 36 {\n\
    \        return true\n    }\n    if n == 37 {\n        return true\n    }\n  \
    \  if n == 38 {\n        return true\n    }\n    if n == 39 {\n        return\
    \ true\n    }\n    if n == 40 {\n        return true\n    }\n    if n == 41 {\n\
    \        return true\n    }\n    if n == 42 {\n        return true\n    }\n  \
    \  if n == 43 {\n        return true\n    }\n    if n == 44 {\n        return\
    \ true\n    }\n    if n == 45 {\n        return true\n    }\n    if n == 46 {\n\
    \        return true\n    }\n    if n == 47 {\n        return true\n    }\n  \
    \  if n == 48 {\n        return true\n    }\n    if n == 49 {\n        return\
    \ true\n    }\n    if n == 50 {\n        return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpwbp36gt4.swift:198:45: error: expected '}' at end of brace statement\n\
    assert(is_simple_power(x: 1, n: 12) == true)\n                               \
    \             ^\n/tmp/tmpwbp36gt4.swift:18:46: note: to match this opening '{'\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n                             \
    \                ^\n/tmp/tmpwbp36gt4.swift:177:6: error: operator functions can\
    \ only be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return is_simple_power_of_2(x)\
    \ && is_power_of_2(n) && is_power_of_2(n * x)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp8sflj23d.swift:19:12: error: cannot find 'is_simple_power_of_2'\
    \ in scope\n    return is_simple_power_of_2(x) && is_power_of_2(n) && is_power_of_2(n\
    \ * x)\n           ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8sflj23d.swift:19:39: error:\
    \ cannot find 'is_power_of_2' in scope\n    return is_simple_power_of_2(x) &&\
    \ is_power_of_2(n) && is_power_of_2(n * x)\n                                 \
    \     ^~~~~~~~~~~~~\n/tmp/tmp8sflj23d.swift:19:59: error: cannot find 'is_power_of_2'\
    \ in scope\n    return is_simple_power_of_2(x) && is_power_of_2(n) && is_power_of_2(n\
    \ * x)\n                                                          ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if n % x == 0 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmprb1xx1yn.swift:29:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if n == 0 {\n        return false\n    }\n   \
    \ if x == 1 {\n        return true\n    }\n    if x == 0 {\n        return false\n\
    \    }\n    if x == n {\n        return true\n    }\n    if x == n * (n - 1) {\n\
    \        return true\n    }\n    if x == n * (n - 1) * (n - 2) {\n        return\
    \ true\n    }\n    if x == n * (n - 1) * (n - 2) * (n - 3) {\n        return true\n\
    \    }\n    if x == n * (n - 1) * (n - 2) * (n - 3) * (n - 4) {\n        return\
    \ true\n    }\n    if x == n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5)\
    \ {\n        return true\n    }\n    if x == n * (n - 1) * (n - 2) * (n - 3) *\
    \ (n - 4) * (n - 5) * (n - 6) {\n        return true\n    }\n    if x == n * (n\
    \ - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7) {\n       \
    \ return true\n    }\n    if x == n * (n - 1) * (n - 2) * (n - 3) * (n - 4) *\
    \ (n - 5) * (n - 6) * (n - 7) * (n - 8) {\n        return true\n    }\n    if\
    \ x == n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7)\
    \ * (n - 8) * (n - 9) {\n        return true\n    }\n    if x == n * (n - 1) *\
    \ (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7) * (n - 8) * (n - 9)\
    \ * (n - 10) {\n        return true\n    }\n    if x == n * (n - 1) * (n - 2)\
    \ * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7) * (n - 8) * (n - 9) * (n -\
    \ 10) * (n - 11) {\n        return true\n    }\n    if x == n * (n - 1) * (n -\
    \ 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7) * (n - 8) * (n - 9) * (n\
    \ - 10) * (n - 11) * (n - 12) {\n        return true\n    }\n    if x == n * (n\
    \ - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7) * (n - 8) *\
    \ (n - 9) * (n - 10) * (n - 11) * (n - 12) * (n - 13) {\n        return true\n\
    \    }\n    if x == n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n -\
    \ 6) * (n - 7) * (n - 8) * (n - 9) * (n - 10) * (n - 11) * (n - 12) * (n - 13)\
    \ * (n - 14) {\n        return true\n    }\n    if x == n * (n - 1) * (n - 2)\
    \ * (n - 3) * (n - 4\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmptljngh0p.swift:77:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmptljngh0p.swift:76:47: note: to match this opening '('\n    if x ==\
    \ n * (n - 1) * (n - 2) * (n - 3) * (n - 4\n                                 \
    \             ^\n"
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if n == 0 {\n        return false\n    }\n   \
    \ if x == 1 {\n        return true\n    }\n    if x == 0 {\n        return false\n\
    \    }\n    if n == 2 {\n        return is_simple_power(x, n-1) && is_simple_power(x,\
    \ n-1)\n    }\n    if n == 3 {\n        return is_simple_power(x, n-2) && is_simple_power(x,\
    \ n-2) && is_simple_power(x, n-1)\n    }\n    if n == 4 {\n        return is_simple_power(x,\
    \ n-3) && is_simple_power(x, n-3) && is_simple_power(x, n-2) && is_simple_power(x,\
    \ n-1)\n    }\n    if n == 5 {\n        return is_simple_power(x, n-4) && is_simple_power(x,\
    \ n-4) && is_simple_power(x, n-3) && is_simple_power(x, n-2) && is_simple_power(x,\
    \ n-1)\n    }\n    if n == 6 {\n        return is_simple_power(x, n-5) && is_simple_power(x,\
    \ n-5) && is_simple_power(x, n-4) && is_simple_power(x, n-3) && is_simple_power(x,\
    \ n-2) && is_simple_power(x, n-1)\n    }\n    if n == 7 {\n        return is_simple_power(x,\
    \ n-6) && is_simple_power(x, n-6) && is_simple_power(x, n-5) && is_simple_power(x,\
    \ n-4) && is_simple_power(x, n-3) && is_simple_power(x, n-2) && is_simple_power(x,\
    \ n-1)\n    }\n    if n == 8 {\n        return is_simple_power(x, n-7) && is_simple_power(x,\
    \ n-7) && is_simple_power(x, n-6) && is_simple_power(x, n-5) && is_simple_power(x,\
    \ n-4) && is_simple_power(x, n-3) && is_simple_power(x, n-2) && is_simple_power(x,\
    \ n-1)\n    }\n    if n == 9 {\n        return is_simple_power(x, n-8) && is_simple_power(x,\
    \ n-8) && is_simple_power(x, n-7) && is_simple_power(x, n-6) && is_simple_power(x,\
    \ n-5) && is_simple_power(x, n-4) && is_simple_power(x, n-3) && is_simple_power(x,\
    \ n-2) && is_simple_power(x, n-1)\n    }\n    if n == 10 {\n        return is_simple_power(x,\
    \ n-9) && is_simple_power(x, n-9) && is_simple_power(x, n-8) && is_simple_power(x,\
    \ n-7) && is_simple_power(x, n-6) && is_simple_power(x, n-5) && is_simple_power(x,\
    \ n-4) && is_simple_power(x, n-3) && is_simple_power(x, n-2) && is_simple_power(x,\
    \ n-1)\n    }\n    if n == 11 {\n        return is_simple_power(x, n-10) && is_simple_power(x,\
    \ n-10) && is_simple_power(x, n-9) && is_simple_\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpi4y8ddz4.swift:84:45: error: expected '}' at end of brace statement\n\
    assert(is_simple_power(x: 1, n: 12) == true)\n                               \
    \             ^\n/tmp/tmpi4y8ddz4.swift:18:46: note: to match this opening '{'\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n                             \
    \                ^\n/tmp/tmpi4y8ddz4.swift:32:31: error: missing argument labels\
    \ 'x:n:' in call\n        return is_simple_power(x, n-1) && is_simple_power(x,\
    \ n-1)\n                              ^\n                               x: n:\
    \ \n/tmp/tmpi4y8ddz4.swift:32:58: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, n-1) && is_simple_power(x, n-1)\n         \
    \                                                ^\n                         \
    \                                 x: n: \n/tmp/tmpi4y8ddz4.swift:35:31: error:\
    \ missing argument labels 'x:n:' in call\n        return is_simple_power(x, n-2)\
    \ && is_simple_power(x, n-2) && is_simple_power(x, n-1)\n                    \
    \          ^\n                               x: n: \n/tmp/tmpi4y8ddz4.swift:35:58:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ n-2) && is_simple_power(x, n-2) && is_simple_power(x, n-1)\n               \
    \                                          ^\n                               \
    \                           x: n: \n/tmp/tmpi4y8ddz4.swift:35:85: error: missing\
    \ argument labels 'x:n:' in call\n        return is_simple_power(x, n-2) && is_simple_power(x,\
    \ n-2) && is_simple_power(x, n-1)\n                                          \
    \                                          ^\n                               \
    \                                                      x: n: \n/tmp/tmpi4y8ddz4.swift:38:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ n-3) && is_simple_power(x, n-3) && is_simple_power(x, n-2) && is_simple_power(x,\
    \ n-1)\n                              ^\n                               x: n:\
    \ \n/tmp/tmpi4y8ddz4.swift:38:58: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_p"
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 0 {\n \
    \       return true\n    }\n    if n == 1 {\n        return true\n    }\n    if\
    \ x == 1 {\n        return true\n    }\n    if x == n {\n        return true\n\
    \    }\n    if x % n == 0 {\n        return is_simple_power(x, n-1)\n    }\n \
    \   return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpxsgnhggb.swift:32:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if x > n {\n        return false\n\
    \    }\n    if x > 1 {\n        return is_simple_power(x, n - 1)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpzgmt8ug_.swift:32:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n - 1)\n                           \
    \   ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return true\n    }\n    if\
    \ x == 0 || n == 0 {\n        return false\n    }\n    if n % 2 == 0 {\n     \
    \   return is_simple_power(x, n-1)\n    }\n    return is_simple_power(x, n/2)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpk4mlqnmu.swift:29:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n/tmp/tmpk4mlqnmu.swift:31:27: error:\
    \ missing argument labels 'x:n:' in call\n    return is_simple_power(x, n/2)\n\
    \                          ^\n                           x: n: \n"
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ n == 0 {\n        return false\n    }\n    if x == 0 {\n        return false\n\
    \    }\n    if x == n {\n        return true\n    }\n    if n % 2 == 0 {\n   \
    \     return is_simple_power(x, n/2)\n    }\n    return is_simple_power(x, n/2)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpz7730xd9.swift:35:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n/2)\n                             \
    \ ^\n                               x: n: \n/tmp/tmpz7730xd9.swift:37:27: error:\
    \ missing argument labels 'x:n:' in call\n    return is_simple_power(x, n/2)\n\
    \                          ^\n                           x: n: \n"
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if n == 0 {\n        return false\n    }\n   \
    \ if x == 1 {\n        return true\n    }\n    if x == 0 {\n        return false\n\
    \    }\n    if x == n {\n        return true\n    }\n    if x > n {\n        return\
    \ false\n    }\n    if x < 0 {\n        return false\n    }\n    if x == n**2\
    \ {\n        return true\n    }\n    if x == n**3 {\n        return true\n   \
    \ }\n    if x == n**4 {\n        return true\n    }\n    if x == n**5 {\n    \
    \    return true\n    }\n    if x == n**6 {\n        return true\n    }\n    if\
    \ x == n**7 {\n        return true\n    }\n    if x == n**8 {\n        return\
    \ true\n    }\n    if x == n**9 {\n        return true\n    }\n    if x == n**10\
    \ {\n        return true\n    }\n    if x == n**11 {\n        return true\n  \
    \  }\n    if x == n**12 {\n        return true\n    }\n    if x == n**13 {\n \
    \       return true\n    }\n    if x == n**14 {\n        return true\n    }\n\
    \    if x == n**15 {\n        return true\n    }\n    if x == n**16 {\n      \
    \  return true\n    }\n    if x == n**17 {\n        return true\n    }\n    if\
    \ x == n**18 {\n        return true\n    }\n    if x == n**19 {\n        return\
    \ true\n    }\n    if x == n**20 {\n        return true\n    }\n    if x == n**21\
    \ {\n        return true\n    }\n    if x == n**22 {\n        return true\n  \
    \  }\n    if x == n**23 {\n        return true\n    }\n    if x == n**24 {\n \
    \       return true\n    }\n    if x == n**25 {\n        return true\n    }\n\
    \    if x == n**26 {\n        return true\n    }\n    if x == n**27 {\n      \
    \  return true\n    }\n    if x == n**28 {\n        return true\n    }\n    if\
    \ x == n**29 {\n        return true\n    }\n    if x == n**30 {\n        return\
    \ true\n    }\n    if x == n**31 {\n        return true\n    }\n    if x == n**32\
    \ {\n        return true\n    }\n    if x == n**33 {\n        return true\n  \
    \  }\n    if x == n**34 {\n        return true\n    }\n    if x == n**35 {\n \
    \       return true\n    }\n    if x == n**36 {\n        return true\n    }\n\
    \    if x == n**37 {\n        return true\n    }\n    if x == n**38 {\n      \
    \  return true\n    }\n    if x == n**39 {\n\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_7widydf.swift:177:45: error: expected '}' at end of brace statement\n\
    assert(is_simple_power(x: 1, n: 12) == true)\n                               \
    \             ^\n/tmp/tmp_7widydf.swift:18:46: note: to match this opening '{'\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n                             \
    \                ^\n/tmp/tmp_7widydf.swift:40:14: error: cannot find operator\
    \ '**' in scope\n    if x == n**2 {\n             ^~\n/tmp/tmp_7widydf.swift:43:14:\
    \ error: cannot find operator '**' in scope\n    if x == n**3 {\n            \
    \ ^~\n/tmp/tmp_7widydf.swift:46:14: error: cannot find operator '**' in scope\n\
    \    if x == n**4 {\n             ^~\n/tmp/tmp_7widydf.swift:49:14: error: cannot\
    \ find operator '**' in scope\n    if x == n**5 {\n             ^~\n/tmp/tmp_7widydf.swift:52:14:\
    \ error: cannot find operator '**' in scope\n    if x == n**6 {\n            \
    \ ^~\n/tmp/tmp_7widydf.swift:55:14: error: cannot find operator '**' in scope\n\
    \    if x == n**7 {\n             ^~\n/tmp/tmp_7widydf.swift:58:14: error: cannot\
    \ find operator '**' in scope\n    if x == n**8 {\n             ^~\n/tmp/tmp_7widydf.swift:61:14:\
    \ error: cannot find operator '**' in scope\n    if x == n**9 {\n            \
    \ ^~\n/tmp/tmp_7widydf.swift:64:14: error: cannot find operator '**' in scope\n\
    \    if x == n**10 {\n             ^~\n/tmp/tmp_7widydf.swift:67:14: error: cannot\
    \ find operator '**' in scope\n    if x == n**11 {\n             ^~\n/tmp/tmp_7widydf.swift:70:14:\
    \ error: cannot find operator '**' in scope\n    if x == n**12 {\n           \
    \  ^~\n/tmp/tmp_7widydf.swift:73:14: error: cannot find operator '**' in scope\n\
    \    if x == n**13 {\n             ^~\n/tmp/tmp_7widydf.swift:76:14: error: cannot\
    \ find operator '**' in scope\n    if x == n**14 {\n             ^~\n/tmp/tmp_7widydf.swift:79:14:\
    \ error: cannot find operator '**' in scope\n    if x == n**15 {\n           \
    \  ^~\n/tmp/tmp_7widydf.swift:82:14: error: cannot find operator '**' in scope\n\
    \    if x == n**16 {\n             ^~\n/tmp/tmp_7widydf.swift:85:14: error: cannot\
    \ find operator '**' in scope\n    if x == n**17 {\n             ^~\n/tmp"
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if x > n {\n        return false\n\
    \    }\n    if x % n == 0 {\n        return is_simple_power(x / n, n)\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp006h792o.swift:32:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x / n, n)\n                           \
    \   ^\n                               x:     n: \n"
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if n == 0 {\n        return false\n    }\n   \
    \ if x == 1 {\n        return true\n    }\n    if x == 0 {\n        return false\n\
    \    }\n    if x == n {\n        return true\n    }\n    if n % 2 == 0 {\n   \
    \     return is_simple_power(x, n-1)\n    }\n    return is_simple_power(x, n/2)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpg28vcjig.swift:35:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n/tmp/tmpg28vcjig.swift:37:27: error:\
    \ missing argument labels 'x:n:' in call\n    return is_simple_power(x, n/2)\n\
    \                          ^\n                           x: n: \n"
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if x % n == 0 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpql79bezd.swift:29:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if n == 0 {\n        return false\n    }\n   \
    \ if x == 1 {\n        return true\n    }\n    if x == 0 {\n        return false\n\
    \    }\n    if x == n {\n        return true\n    }\n    if x % n == 0 {\n   \
    \     return is_simple_power(x / n, n)\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp9jdielsl.swift:35:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x / n, n)\n                           \
    \   ^\n                               x:     n: \n"
  stdout: ''
  timestamp: 1659824559
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if x % n == 0 {\n        return true\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpkvpr0wav/tmpkvpr0wav.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8ba96dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8ba664b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8ba664988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8ba6637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkvpr0wav                        0x0000558a6469e4a7 <unavailable> + 5287

    5    libc.so.6                          0x00002ac8bab59460 __libc_start_main +
    245

    6    tmpkvpr0wav                        0x0000558a6469def9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824559
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if n == 0 {\n        return false\n    }\n   \
    \ if x == 1 {\n        return true\n    }\n    if x == 0 {\n        return false\n\
    \    }\n    if x == n {\n        return true\n    }\n    if x % n == 0 {\n   \
    \     return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpqaotrr_c/tmpqaotrr_c.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b422a02ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4229d25b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4229d25988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4229d247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqaotrr_c                        0x0000558c857834a7 <unavailable> + 5287

    5    libc.so.6                          0x00002b422a21a460 __libc_start_main +
    245

    6    tmpqaotrr_c                        0x0000558c85782ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if x > n {\n        return false\n\
    \    }\n    if x % n == 0 {\n        return is_simple_power(x, n-1)\n    }\n \
    \   return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpjzcc88kd.swift:32:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if x > n {\n        return false\n\
    \    }\n    if x % n == 0 {\n        return is_simple_power(x, n-1)\n    }\n \
    \   return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpjzcc88kd.swift:32:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if x < n {\n        return false\n\
    \    }\n    if x > n {\n        return false\n    }\n    if x == n ** 2 {\n  \
    \      return true\n    }\n    if x == n ** 3 {\n        return true\n    }\n\
    \    if x == n ** 4 {\n        return true\n    }\n    if x == n ** 5 {\n    \
    \    return true\n    }\n    if x == n ** 6 {\n        return true\n    }\n  \
    \  if x == n ** 7 {\n        return true\n    }\n    if x == n ** 8 {\n      \
    \  return true\n    }\n    if x == n ** 9 {\n        return true\n    }\n    if\
    \ x == n ** 10 {\n        return true\n    }\n    if x == n ** 11 {\n        return\
    \ true\n    }\n    if x == n ** 12 {\n        return true\n    }\n    if x ==\
    \ n ** 13 {\n        return true\n    }\n    if x == n ** 14 {\n        return\
    \ true\n    }\n    if x == n ** 15 {\n        return true\n    }\n    if x ==\
    \ n ** 16 {\n        return true\n    }\n    if x == n ** 17 {\n        return\
    \ true\n    }\n    if x == n ** 18 {\n        return true\n    }\n    if x ==\
    \ n ** 19 {\n        return true\n    }\n    if x == n ** 20 {\n        return\
    \ true\n    }\n    if x == n ** 21 {\n        return true\n    }\n    if x ==\
    \ n ** 22 {\n        return true\n    }\n    if x == n ** 23 {\n        return\
    \ true\n    }\n    if x == n ** 24 {\n        return true\n    }\n    if x ==\
    \ n ** 25 {\n        return true\n    }\n    if x == n ** 26 {\n        return\
    \ true\n    }\n    if x == n ** 27 {\n        return true\n    }\n    if x ==\
    \ n ** 28 {\n        return true\n    }\n    if x == n ** 29 {\n        return\
    \ true\n    }\n    if x == n ** 30 {\n        return true\n    }\n    if x ==\
    \ n ** 31 {\n        return true\n    }\n    if x == n ** 32 {\n        return\
    \ true\n    }\n    if x == n ** 33 {\n        return true\n    }\n    if x ==\
    \ n ** 34 {\n        return true\n    }\n    if x == n ** 35 {\n        return\
    \ true\n    }\n    if x == n ** 36 {\n        return true\n    }\n    if x ==\
    \ n ** 37 {\n        return true\n    }\n    if x == n ** 38 {\n        return\
    \ true\n    }\n    if x == n ** 39 {\n        return true\n    }\n    if x ==\
    \ n ** 40 {\n        return true\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x: 143214,\
    \ n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpnzqrdhp_.swift:34:15: error: cannot find operator '**' in scope\n\
    \    if x == n ** 2 {\n              ^~\n/tmp/tmpnzqrdhp_.swift:37:15: error:\
    \ cannot find operator '**' in scope\n    if x == n ** 3 {\n              ^~\n\
    /tmp/tmpnzqrdhp_.swift:40:15: error: cannot find operator '**' in scope\n    if\
    \ x == n ** 4 {\n              ^~\n/tmp/tmpnzqrdhp_.swift:43:15: error: cannot\
    \ find operator '**' in scope\n    if x == n ** 5 {\n              ^~\n/tmp/tmpnzqrdhp_.swift:46:15:\
    \ error: cannot find operator '**' in scope\n    if x == n ** 6 {\n          \
    \    ^~\n/tmp/tmpnzqrdhp_.swift:49:15: error: cannot find operator '**' in scope\n\
    \    if x == n ** 7 {\n              ^~\n/tmp/tmpnzqrdhp_.swift:52:15: error:\
    \ cannot find operator '**' in scope\n    if x == n ** 8 {\n              ^~\n\
    /tmp/tmpnzqrdhp_.swift:55:15: error: cannot find operator '**' in scope\n    if\
    \ x == n ** 9 {\n              ^~\n/tmp/tmpnzqrdhp_.swift:58:15: error: cannot\
    \ find operator '**' in scope\n    if x == n ** 10 {\n              ^~\n/tmp/tmpnzqrdhp_.swift:61:15:\
    \ error: cannot find operator '**' in scope\n    if x == n ** 11 {\n         \
    \     ^~\n/tmp/tmpnzqrdhp_.swift:64:15: error: cannot find operator '**' in scope\n\
    \    if x == n ** 12 {\n              ^~\n/tmp/tmpnzqrdhp_.swift:67:15: error:\
    \ cannot find operator '**' in scope\n    if x == n ** 13 {\n              ^~\n\
    /tmp/tmpnzqrdhp_.swift:70:15: error: cannot find operator '**' in scope\n    if\
    \ x == n ** 14 {\n              ^~\n/tmp/tmpnzqrdhp_.swift:73:15: error: cannot\
    \ find operator '**' in scope\n    if x == n ** 15 {\n              ^~\n/tmp/tmpnzqrdhp_.swift:76:15:\
    \ error: cannot find operator '**' in scope\n    if x == n ** 16 {\n         \
    \     ^~\n/tmp/tmpnzqrdhp_.swift:79:15: error: cannot find operator '**' in scope\n\
    \    if x == n ** 17 {\n              ^~\n/tmp/tmpnzqrdhp_.swift:82:15: error:\
    \ cannot find operator '**' in scope\n    if x == n ** 18 {\n              ^~\n\
    /tmp/tmpnzqrdhp_.swift:85:15: error: cannot find operator '**' in scope\n    if\
    \ x == n ** 19 {\n              ^~\n/tmp/tmpnzqrdhp_.swift:88:15: error: cannot\
    \ find operator "
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return true\n    }\n    if\
    \ x == 0 || n == 0 {\n        return false\n    }\n    if x == n {\n        return\
    \ true\n    }\n    if x % n == 0 {\n        return is_simple_power(x / n, n)\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpw64gjay9.swift:32:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x / n, n)\n                           \
    \   ^\n                               x:     n: \n"
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if x % n == 0 {\n        return true\n\
    \    }\n    if x % n == 1 {\n        return false\n    }\n    if x % n == 2 {\n\
    \        return is_simple_power(x, n-1)\n    }\n    if x % n == 3 {\n        return\
    \ is_simple_power(x, n-1)\n    }\n    if x % n == 4 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    if x % n == 5 {\n        return is_simple_power(x, n-1)\n \
    \   }\n    if x % n == 6 {\n        return is_simple_power(x, n-1)\n    }\n  \
    \  if x % n == 7 {\n        return is_simple_power(x, n-1)\n    }\n    if x %\
    \ n == 8 {\n        return is_simple_power(x, n-1)\n    }\n    if x % n == 9 {\n\
    \        return is_simple_power(x, n-1)\n    }\n    if x % n == 10 {\n       \
    \ return is_simple_power(x, n-1)\n    }\n    if x % n == 11 {\n        return\
    \ is_simple_power(x, n-1)\n    }\n    if x % n == 12 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    if x % n == 13 {\n        return is_simple_power(x, n-1)\n\
    \    }\n    if x % n == 14 {\n        return is_simple_power(x, n-1)\n    }\n\
    \    if x % n == 15 {\n        return is_simple_power(x, n-1)\n    }\n    if x\
    \ % n == 16 {\n        return is_simple_power(x, n-1)\n    }\n    if x % n ==\
    \ 17 {\n        return is_simple_power(x, n-1)\n    }\n    if x % n == 18 {\n\
    \        return is_simple_power(x, n-1)\n    }\n    if x % n == 19 {\n       \
    \ return is_simple_power(x, n-1)\n    }\n    if x % n == 20 {\n        return\
    \ is_simple_power(x, n-1)\n    }\n    if x % n == 21 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    if x % n == 22 {\n        return is_simple_power(x, n-1)\n\
    \    }\n    if x % n == 23 {\n        return is_simple_power(x, n-1)\n    }\n\
    \    if x % n == 24 {\n        return is_simple_power(x, n-1)\n    }\n    if x\
    \ % n == 25 {\n        return is_simple_power(x, n-1)\n    }\n    if x % n ==\
    \ 26 {\n        return is_simple_power(x, n-1)\n    }\n    if x % n == 27 {\n\
    \        return is_simple_power(x, n-1)\n    }\n    if x % n == 28 {\n       \
    \ return is_simple_power(x, n-1)\n    }\n    if x % n == 29 {\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpve7rk9tn.swift:140:45: error: expected '}' at end of brace statement\n\
    assert(is_simple_power(x: 1, n: 12) == true)\n                               \
    \             ^\n/tmp/tmpve7rk9tn.swift:18:46: note: to match this opening '{'\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n                             \
    \                ^\n/tmp/tmpve7rk9tn.swift:35:31: error: missing argument labels\
    \ 'x:n:' in call\n        return is_simple_power(x, n-1)\n                   \
    \           ^\n                               x: n: \n/tmp/tmpve7rk9tn.swift:38:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ n-1)\n                              ^\n                               x: n:\
    \ \n/tmp/tmpve7rk9tn.swift:41:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, n-1)\n                              ^\n   \
    \                            x: n: \n/tmp/tmpve7rk9tn.swift:44:31: error: missing\
    \ argument labels 'x:n:' in call\n        return is_simple_power(x, n-1)\n   \
    \                           ^\n                               x: n: \n/tmp/tmpve7rk9tn.swift:47:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ n-1)\n                              ^\n                               x: n:\
    \ \n/tmp/tmpve7rk9tn.swift:50:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, n-1)\n                              ^\n   \
    \                            x: n: \n/tmp/tmpve7rk9tn.swift:53:31: error: missing\
    \ argument labels 'x:n:' in call\n        return is_simple_power(x, n-1)\n   \
    \                           ^\n                               x: n: \n/tmp/tmpve7rk9tn.swift:56:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ n-1)\n                              ^\n                               x: n:\
    \ \n/tmp/tmpve7rk9tn.swift:59:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, n-1)\n                              ^\n   \
    \                            x: n: \n/tmp/tmpve7rk9tn.swift:62:31: error: missing\
    \ argument label"
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if n % x == 0 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmprb1xx1yn.swift:29:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return true\n    }\n    if\
    \ n == 2 {\n        return is_simple_power(x, n: 2)\n    }\n    if n == 3 {\n\
    \        return is_simple_power(x, n: 2)\n    }\n    if n == 4 {\n        return\
    \ is_simple_power(x, n: 4)\n    }\n    if n == 5 {\n        return is_simple_power(x,\
    \ n: 4)\n    }\n    if n == 6 {\n        return is_simple_power(x, n: 6)\n   \
    \ }\n    if n == 7 {\n        return is_simple_power(x, n: 6)\n    }\n    if n\
    \ == 8 {\n        return is_simple_power(x, n: 8)\n    }\n    if n == 9 {\n  \
    \      return is_simple_power(x, n: 8)\n    }\n    if n == 10 {\n        return\
    \ is_simple_power(x, n: 10)\n    }\n    if n == 11 {\n        return is_simple_power(x,\
    \ n: 10)\n    }\n    if n == 12 {\n        return is_simple_power(x, n: 12)\n\
    \    }\n    if n == 13 {\n        return is_simple_power(x, n: 12)\n    }\n  \
    \  if n == 14 {\n        return is_simple_power(x, n: 14)\n    }\n    if n ==\
    \ 15 {\n        return is_simple_power(x, n: 14)\n    }\n    if n == 16 {\n  \
    \      return is_simple_power(x, n: 16)\n    }\n    if n == 17 {\n        return\
    \ is_simple_power(x, n: 16)\n    }\n    if n == 18 {\n        return is_simple_power(x,\
    \ n: 18)\n    }\n    if n == 19 {\n        return is_simple_power(x, n: 18)\n\
    \    }\n    if n == 20 {\n        return is_simple_power(x, n: 20)\n    }\n  \
    \  if n == 21 {\n        return is_simple_power(x, n: 20)\n    }\n    if n ==\
    \ 22 {\n        return is_simple_power(x, n: 22)\n    }\n    if n == 23 {\n  \
    \      return is_simple_power(x, n: 22)\n    }\n    if n == 24 {\n        return\
    \ is_simple_power(x, n: 24)\n    }\n    if n == 25 {\n        return is_simple_power(x,\
    \ n: 24)\n    }\n    if n == 26 {\n        return is_simple_power(x, n: 26)\n\
    \    }\n    if n == 27 {\n        return is_simple_power(x, n: 26)\n    }\n  \
    \  if n == 28 {\n        return is_simple_power(x, n: 28)\n    }\n    if n ==\
    \ 29 {\n        return is_simple_power(x, n: 28)\n    }\n    if n == 30 {\n  \
    \      return is_simple_power(x, n: 30)\n    }\n    if n == 31 {\n        return\
    \ is_simple_power(x, n: 30)\n    }\n    if n == 32 {\n        return is_simple_power(x,\
    \ n: 32)\n    }\n    if n == 33 {\n        return is_simple_power(x, n: 32)\n\
    \    }\n    if n == 34 {\n        return is_simple_power(x, n: \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpap8yib20.swift:123:1: error: expected expression in list of expressions\n\
    }\n^\n/tmp/tmpap8yib20.swift:147:45: error: expected '}' at end of brace statement\n\
    assert(is_simple_power(x: 1, n: 12) == true)\n                               \
    \             ^\n/tmp/tmpap8yib20.swift:18:46: note: to match this opening '{'\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n                             \
    \                ^\n/tmp/tmpap8yib20.swift:26:31: error: missing argument label\
    \ 'x:' in call\n        return is_simple_power(x, n: 2)\n                    \
    \          ^\n                               x: \n/tmp/tmpap8yib20.swift:29:31:\
    \ error: missing argument label 'x:' in call\n        return is_simple_power(x,\
    \ n: 2)\n                              ^\n                               x: \n\
    /tmp/tmpap8yib20.swift:32:31: error: missing argument label 'x:' in call\n   \
    \     return is_simple_power(x, n: 4)\n                              ^\n     \
    \                          x: \n/tmp/tmpap8yib20.swift:35:31: error: missing argument\
    \ label 'x:' in call\n        return is_simple_power(x, n: 4)\n              \
    \                ^\n                               x: \n/tmp/tmpap8yib20.swift:38:31:\
    \ error: missing argument label 'x:' in call\n        return is_simple_power(x,\
    \ n: 6)\n                              ^\n                               x: \n\
    /tmp/tmpap8yib20.swift:41:31: error: missing argument label 'x:' in call\n   \
    \     return is_simple_power(x, n: 6)\n                              ^\n     \
    \                          x: \n/tmp/tmpap8yib20.swift:44:31: error: missing argument\
    \ label 'x:' in call\n        return is_simple_power(x, n: 8)\n              \
    \                ^\n                               x: \n/tmp/tmpap8yib20.swift:47:31:\
    \ error: missing argument label 'x:' in call\n        return is_simple_power(x,\
    \ n: 8)\n                              ^\n                               x: \n\
    /tmp/tmpap8yib20.swift:50:31: error: missing argument label 'x:' in call\n   \
    \     return is_simple_power(x, n: 10)\n                              ^\n    \
    \                           x: \n/tmp/tmpap8yib20.sw"
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if x % n == 0 {\n        return true\n\
    \    }\n    if x % n == 1 {\n        return false\n    }\n    if x % n == 2 {\n\
    \        return is_simple_power(x, n-1)\n    }\n    if x % n == 3 {\n        return\
    \ is_simple_power(x, n-1)\n    }\n    if x % n == 4 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    if x % n == 5 {\n        return is_simple_power(x, n-1)\n \
    \   }\n    if x % n == 6 {\n        return is_simple_power(x, n-1)\n    }\n  \
    \  if x % n == 7 {\n        return is_simple_power(x, n-1)\n    }\n    if x %\
    \ n == 8 {\n        return is_simple_power(x, n-1)\n    }\n    if x % n == 9 {\n\
    \        return is_simple_power(x, n-1)\n    }\n    if x % n == 10 {\n       \
    \ return is_simple_power(x, n-1)\n    }\n    if x % n == 11 {\n        return\
    \ is_simple_power(x, n-1)\n    }\n    if x % n == 12 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    if x % n == 13 {\n        return is_simple_power(x, n-1)\n\
    \    }\n    if x % n == 14 {\n        return is_simple_power(x, n-1)\n    }\n\
    \    if x % n == 15 {\n        return is_simple_power(x, n-1)\n    }\n    if x\
    \ % n == 16 {\n        return is_simple_power(x, n-1)\n    }\n    if x % n ==\
    \ 17 {\n        return is_simple_power(x, n-1)\n    }\n    if x % n == 18 {\n\
    \        return is_simple_power(x, n-1)\n    }\n    if x % n == 19 {\n       \
    \ return is_simple_power(x, n-1)\n    }\n    if x % n == 20 {\n        return\
    \ is_simple_power(x, n-1)\n    }\n    if x % n == 21 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    if x % n == 22 {\n        return is_simple_power(x, n-1)\n\
    \    }\n    if x % n == 23 {\n        return is_simple_power(x, n-1)\n    }\n\
    \    if x % n == 24 {\n        return is_simple_power(x, n-1)\n    }\n    if x\
    \ % n == 25 {\n        return is_simple_power(x, n-1)\n    }\n    if x % n ==\
    \ 26 {\n        return is_simple_power(x, n-1)\n    }\n    if x % n == 27 {\n\
    \        return is_simple_power(x, n-1)\n    }\n    if x % n == 28 {\n       \
    \ return is_simple_power(x, n-1)\n    }\n    if x % n == 29 {\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpve7rk9tn.swift:140:45: error: expected '}' at end of brace statement\n\
    assert(is_simple_power(x: 1, n: 12) == true)\n                               \
    \             ^\n/tmp/tmpve7rk9tn.swift:18:46: note: to match this opening '{'\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n                             \
    \                ^\n/tmp/tmpve7rk9tn.swift:35:31: error: missing argument labels\
    \ 'x:n:' in call\n        return is_simple_power(x, n-1)\n                   \
    \           ^\n                               x: n: \n/tmp/tmpve7rk9tn.swift:38:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ n-1)\n                              ^\n                               x: n:\
    \ \n/tmp/tmpve7rk9tn.swift:41:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, n-1)\n                              ^\n   \
    \                            x: n: \n/tmp/tmpve7rk9tn.swift:44:31: error: missing\
    \ argument labels 'x:n:' in call\n        return is_simple_power(x, n-1)\n   \
    \                           ^\n                               x: n: \n/tmp/tmpve7rk9tn.swift:47:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ n-1)\n                              ^\n                               x: n:\
    \ \n/tmp/tmpve7rk9tn.swift:50:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, n-1)\n                              ^\n   \
    \                            x: n: \n/tmp/tmpve7rk9tn.swift:53:31: error: missing\
    \ argument labels 'x:n:' in call\n        return is_simple_power(x, n-1)\n   \
    \                           ^\n                               x: n: \n/tmp/tmpve7rk9tn.swift:56:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ n-1)\n                              ^\n                               x: n:\
    \ \n/tmp/tmpve7rk9tn.swift:59:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, n-1)\n                              ^\n   \
    \                            x: n: \n/tmp/tmpve7rk9tn.swift:62:31: error: missing\
    \ argument label"
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return is_power_of_two(x)\
    \ && is_power_of_two(n) && is_power_of_two(n * x)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpjmpq4n2t.swift:19:12: error: cannot find 'is_power_of_two' in scope\n\
    \    return is_power_of_two(x) && is_power_of_two(n) && is_power_of_two(n * x)\n\
    \           ^~~~~~~~~~~~~~~\n/tmp/tmpjmpq4n2t.swift:19:34: error: cannot find\
    \ 'is_power_of_two' in scope\n    return is_power_of_two(x) && is_power_of_two(n)\
    \ && is_power_of_two(n * x)\n                                 ^~~~~~~~~~~~~~~\n\
    /tmp/tmpjmpq4n2t.swift:19:56: error: cannot find 'is_power_of_two' in scope\n\
    \    return is_power_of_two(x) && is_power_of_two(n) && is_power_of_two(n * x)\n\
    \                                                       ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if n % x == 0 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmprb1xx1yn.swift:29:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if n == 0 {\n        return false\n    }\n   \
    \ if x == 1 {\n        return true\n    }\n    if x == 0 {\n        return false\n\
    \    }\n    if x == n {\n        return true\n    }\n    if x % n == 0 {\n   \
    \     return is_simple_power(x / n, n: n)\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp6t6fao66.swift:35:31: error: missing argument label 'x:' in call\n\
    \        return is_simple_power(x / n, n: n)\n                              ^\n\
    \                               x: \n"
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return true\n    }\n    if\
    \ n == 0 {\n        return false\n    }\n    if x == 0 || n == 0 {\n        return\
    \ false\n    }\n    if x == 1 {\n        return true\n    }\n    if n == 1 {\n\
    \        return true\n    }\n    if x == 0 || n == 0 {\n        return false\n\
    \    }\n    if x == 1 {\n        return true\n    }\n    if n == 1 {\n       \
    \ return true\n    }\n    if x == 0 || n == 0 {\n        return false\n    }\n\
    \    if x == 1 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ true\n    }\n    if x == 0 || n == 0 {\n        return false\n    }\n    if\
    \ x == 1 {\n        return true\n    }\n    if n == 1 {\n        return true\n\
    \    }\n    if x == 0 || n == 0 {\n        return false\n    }\n    if x == 1\
    \ {\n        return true\n    }\n    if n == 1 {\n        return true\n    }\n\
    \    if x == 0 || n == 0 {\n        return false\n    }\n    if x == 1 {\n   \
    \     return true\n    }\n    if n == 1 {\n        return true\n    }\n    if\
    \ x == 0 || n == 0 {\n        return false\n    }\n    if x == 1 {\n        return\
    \ true\n    }\n    if n == 1 {\n        return true\n    }\n    if x == 0 || n\
    \ == 0 {\n        return false\n    }\n    if x == 1 {\n        return true\n\
    \    }\n    if n == 1 {\n        return true\n    }\n    if x == 0 || n == 0 {\n\
    \        return false\n    }\n    if x == 1 {\n        return true\n    }\n  \
    \  if n == 1 {\n        return true\n    }\n    if x == 0 || n == 0 {\n      \
    \  return false\n    }\n    if x == 1 {\n        return true\n    }\n    if n\
    \ == 1 {\n        return true\n    }\n    if x == 0 || n == 0 {\n        return\
    \ false\n    }\n    if x == 1 {\n        return true\n    }\n    if n == 1 {\n\
    \        return true\n    }\n    if x == 0 || n == 0 {\n        return false\n\
    \    }\n    if x == 1 {\n        return true\n    }\n    if n == 1 {\n       \
    \ return true\n    }\n    if x == 0 || n == 0 {\n        return false\n    }\n\
    \    if x == 1 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ true\n    }\n    if x == 0 || n == 0 {\n        return false\n    }\n    if\
    \ x == 1 {\n        return true\n    }\n    if n == 1 {\n        return true\n\
    \    }\n    if x == 0 || n == 0 {\n        return false\n    }\n    if x == 1\
    \ {\n        return true\n    }\n    if n == 1 {\n        return true\n    }\n\
    \    if x == 0 || n == 0 {\n        return false\n    }\n    if x == 1 {\n   \
    \     return true\n    }\n    if n == 1 {\n        return true\n    }\n    if\
    \ x == 0 || n == 0 {\n        return false\n    }\n    if x == 1 {\n        return\
    \ true\n    }\n    if \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpf7zowpuv.swift:178:7: error: expected expression, var, or let in\
    \ 'if' condition\n    if \n      ^\n"
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if n == 0 {\n        return false\n    }\n   \
    \ if x == 1 {\n        return true\n    }\n    if x == 0 {\n        return false\n\
    \    }\n    if x == n {\n        return true\n    }\n    if x % n == 0 {\n   \
    \     return is_simple_power(x / n, n)\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp9jdielsl.swift:35:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x / n, n)\n                           \
    \   ^\n                               x:     n: \n"
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if n == 0 {\n        return false\n    }\n   \
    \ if x == 1 {\n        return true\n    }\n    if x == 0 {\n        return false\n\
    \    }\n    if x == n {\n        return true\n    }\n    if x % n == 0 {\n   \
    \     return is_simple_power(x, n-1)\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp1aksy0ki.swift:35:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if x % n == 0 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpql79bezd.swift:29:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if n % x == 0 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmprb1xx1yn.swift:29:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824559
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 0 {\n \
    \       return true\n    }\n    if n == 1 {\n        return true\n    }\n    if\
    \ x == 1 {\n        return true\n    }\n    if x == n {\n        return true\n\
    \    }\n    if x % n == 0 {\n        return true\n    }\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpdkbmrstg/tmpdkbmrstg.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c8ecf3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c8e9eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c8e9ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c8e9e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdkbmrstg                        0x0000563ee2af24a7 <unavailable> + 5287

    5    libc.so.6                          0x00002b0c8eedf460 __libc_start_main +
    245

    6    tmpdkbmrstg                        0x0000563ee2af1ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ n == 0 {\n        return false\n    }\n    if x == 0 {\n        return false\n\
    \    }\n    if x == 1 {\n        return true\n    }\n    if n == 2 {\n       \
    \ return true\n    }\n    if x == 2 {\n        return true\n    }\n    if n ==\
    \ 3 {\n        return true\n    }\n    if x == 3 {\n        return true\n    }\n\
    \    if n == 4 {\n        return true\n    }\n    if x == 4 {\n        return\
    \ true\n    }\n    if n == 5 {\n        return true\n    }\n    if x == 5 {\n\
    \        return true\n    }\n    if n == 6 {\n        return true\n    }\n   \
    \ if x == 6 {\n        return true\n    }\n    if n == 7 {\n        return true\n\
    \    }\n    if x == 7 {\n        return true\n    }\n    if n == 8 {\n       \
    \ return true\n    }\n    if x == 8 {\n        return true\n    }\n    if n ==\
    \ 9 {\n        return true\n    }\n    if x == 9 {\n        return true\n    }\n\
    \    if n == 10 {\n        return true\n    }\n    if x == 10 {\n        return\
    \ true\n    }\n    if n == 11 {\n        return true\n    }\n    if x == 11 {\n\
    \        return true\n    }\n    if n == 12 {\n        return true\n    }\n  \
    \  if x == 12 {\n        return true\n    }\n    if n == 13 {\n        return\
    \ true\n    }\n    if x == 13 {\n        return true\n    }\n    if n == 14 {\n\
    \        return true\n    }\n    if x == 14 {\n        return true\n    }\n  \
    \  if n == 15 {\n        return true\n    }\n    if x == 15 {\n        return\
    \ true\n    }\n    if n == 16 {\n        return true\n    }\n    if x == 16 {\n\
    \        return true\n    }\n    if n == 17 {\n        return true\n    }\n  \
    \  if x == 17 {\n        return true\n    }\n    if n == 18 {\n        return\
    \ true\n    }\n    if x == 18 {\n        return true\n    }\n    if n == 19 {\n\
    \        return true\n    }\n    if x == 19 {\n        return true\n    }\n  \
    \  if n == 20 {\n        return true\n    }\n    if x == 20 {\n        return\
    \ true\n    }\n    if n == 21 {\n        return true\n    }\n    if x == 21 {\n\
    \        return true\n    }\n    if n == 22 {\n        return true\n    }\n  \
    \  if x == 22 {\n        return true\n    }\n    if n == 23 {\n        return\
    \ true\n    }\n    if x == 23 {\n        return true\n    }\n    if n == 24 {\n\
    \        return true\n    }\n    if x == 24 {\n        return true\n    }\n  \
    \  if n == 25 {\n        return true\n    }\n    if x == 25\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmptidc7_a7.swift:175:15: error: expected '{' after 'if' condition\n\
    \    if x == 25\n              ^\n"
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if n == 0 {\n        return false\n    }\n   \
    \ if x == 1 {\n        return true\n    }\n    if x == 0 {\n        return false\n\
    \    }\n    if x == n {\n        return true\n    }\n    if x % n == 0 {\n   \
    \     return is_simple_power(x / n, n)\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp9jdielsl.swift:35:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x / n, n)\n                           \
    \   ^\n                               x:     n: \n"
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if n == 0 {\n        return false\n    }\n   \
    \ if x == 1 {\n        return true\n    }\n    if x == 0 {\n        return false\n\
    \    }\n    if x == n {\n        return true\n    }\n    if x % n == 0 {\n   \
    \     return is_simple_power(x / n, n: n)\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp6t6fao66.swift:35:31: error: missing argument label 'x:' in call\n\
    \        return is_simple_power(x / n, n: n)\n                              ^\n\
    \                               x: \n"
  stdout: ''
  timestamp: 1659824559
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if x % n == 0 {\n        return true\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpkvpr0wav/tmpkvpr0wav.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8ba96dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8ba664b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8ba664988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8ba6637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkvpr0wav                        0x0000558a6469e4a7 <unavailable> + 5287

    5    libc.so.6                          0x00002ac8bab59460 __libc_start_main +
    245

    6    tmpkvpr0wav                        0x0000558a6469def9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if n == 0 {\n        return false\n    }\n   \
    \ if x == 0 {\n        return false\n    }\n    if x == 1 {\n        return true\n\
    \    }\n    if x == n {\n        return true\n    }\n    if x % n == 0 {\n   \
    \     return is_simple_power(x / n, n)\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp8zp85hap.swift:35:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x / n, n)\n                           \
    \   ^\n                               x:     n: \n"
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return true\n    }\n    if\
    \ n == 0 {\n        return false\n    }\n    if x == 0 || n == 0 {\n        return\
    \ false\n    }\n    if x == 1 {\n        return true\n    }\n    if n == 1 {\n\
    \        return true\n    }\n    if n == 0 {\n        return false\n    }\n  \
    \  if x == 0 || n == 0 {\n        return false\n    }\n    if x == 1 {\n     \
    \   return true\n    }\n    if n == 1 {\n        return true\n    }\n    if n\
    \ == 0 {\n        return false\n    }\n    if x == 0 || n == 0 {\n        return\
    \ false\n    }\n    if x == 1 {\n        return true\n    }\n    if n == 1 {\n\
    \        return true\n    }\n    if n == 0 {\n        return false\n    }\n  \
    \  if x == 0 || n == 0 {\n        return false\n    }\n    if x == 1 {\n     \
    \   return true\n    }\n    if n == 1 {\n        return true\n    }\n    if n\
    \ == 0 {\n        return false\n    }\n    if x == 0 || n == 0 {\n        return\
    \ false\n    }\n    if x == 1 {\n        return true\n    }\n    if n == 1 {\n\
    \        return true\n    }\n    if n == 0 {\n        return false\n    }\n  \
    \  if x == 0 || n == 0 {\n        return false\n    }\n    if x == 1 {\n     \
    \   return true\n    }\n    if n == 1 {\n        return true\n    }\n    if n\
    \ == 0 {\n        return false\n    }\n    if x == 0 || n == 0 {\n        return\
    \ false\n    }\n    if x == 1 {\n        return true\n    }\n    if n == 1 {\n\
    \        return true\n    }\n    if n == 0 {\n        return false\n    }\n  \
    \  if x == 0 || n == 0 {\n        return false\n    }\n    if x == 1 {\n     \
    \   return true\n    }\n    if n == 1 {\n        return true\n    }\n    if n\
    \ == 0 {\n        return false\n    }\n    if x == 0 || n == 0 {\n        return\
    \ false\n    }\n    if x == 1 {\n        return true\n    }\n    if n == 1 {\n\
    \        return true\n    }\n    if n == 0 {\n        return false\n    }\n  \
    \  if x == 0 || n == 0 {\n        return false\n    }\n    if x == 1 {\n     \
    \   return true\n    }\n    if n == 1 {\n        return true\n    }\n    if n\
    \ == 0 {\n        return false\n    }\n    if x == 0 || n == 0 {\n        return\
    \ false\n    }\n    if x == 1 {\n        return true\n    }\n    if n == 1 {\n\
    \        return true\n    }\n    if n == 0 {\n        return false\n    }\n  \
    \  if x == 0 || n == 0 {\n        return false\n    }\n    if x == 1 {\n     \
    \   return true\n    }\n    if n == 1 {\n        return true\n    }\n    if n\
    \ == 0 {\n        return false\n    }\n    if x == 0 || n == 0 {\n        return\
    \ false\n    }\n    if x == 1 {\n        return true\n    }\n    if n == 1 {\n\
    \        return true\n    }\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: '/tmp/tmpft79i79g.swift:182:1: error: missing return in global function
    expected to return ''Bool''

    }

    ^

    '
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return true\n    }\n    if\
    \ n == 2 {\n        return is_simple_power(x, n: 2)\n    }\n    if n == 3 {\n\
    \        return is_simple_power(x, n: 3)\n    }\n    if n == 4 {\n        return\
    \ is_simple_power(x, n: 4)\n    }\n    if n == 5 {\n        return is_simple_power(x,\
    \ n: 5)\n    }\n    if n == 6 {\n        return is_simple_power(x, n: 6)\n   \
    \ }\n    if n == 7 {\n        return is_simple_power(x, n: 7)\n    }\n    if n\
    \ == 8 {\n        return is_simple_power(x, n: 8)\n    }\n    if n == 9 {\n  \
    \      return is_simple_power(x, n: 9)\n    }\n    if n == 10 {\n        return\
    \ is_simple_power(x, n: 10)\n    }\n    if n == 11 {\n        return is_simple_power(x,\
    \ n: 11)\n    }\n    if n == 12 {\n        return is_simple_power(x, n: 12)\n\
    \    }\n    if n == 13 {\n        return is_simple_power(x, n: 13)\n    }\n  \
    \  if n == 14 {\n        return is_simple_power(x, n: 14)\n    }\n    if n ==\
    \ 15 {\n        return is_simple_power(x, n: 15)\n    }\n    if n == 16 {\n  \
    \      return is_simple_power(x, n: 16)\n    }\n    if n == 17 {\n        return\
    \ is_simple_power(x, n: 17)\n    }\n    if n == 18 {\n        return is_simple_power(x,\
    \ n: 18)\n    }\n    if n == 19 {\n        return is_simple_power(x, n: 19)\n\
    \    }\n    if n == 20 {\n        return is_simple_power(x, n: 20)\n    }\n  \
    \  if n == 21 {\n        return is_simple_power(x, n: 21)\n    }\n    if n ==\
    \ 22 {\n        return is_simple_power(x, n: 22)\n    }\n    if n == 23 {\n  \
    \      return is_simple_power(x, n: 23)\n    }\n    if n == 24 {\n        return\
    \ is_simple_power(x, n: 24)\n    }\n    if n == 25 {\n        return is_simple_power(x,\
    \ n: 25)\n    }\n    if n == 26 {\n        return is_simple_power(x, n: 26)\n\
    \    }\n    if n == 27 {\n        return is_simple_power(x, n: 27)\n    }\n  \
    \  if n == 28 {\n        return is_simple_power(x, n: 28)\n    }\n    if n ==\
    \ 29 {\n        return is_simple_power(x, n: 29)\n    }\n    if n == 30 {\n  \
    \      return is_simple_power(x, n: 30)\n    }\n    if n == 31 {\n        return\
    \ is_simple_power(x, n: 31)\n    }\n    if n == 32 {\n        return is_simple_power(x,\
    \ n: 32)\n    }\n    if n == 33 {\n        return is_simple_power(x, n: 33)\n\
    \    }\n    if n == 34 {\n        return is_simple_power(\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp9ls8pu2m.swift:123:1: error: expected expression in list of expressions\n\
    }\n^\n/tmp/tmp9ls8pu2m.swift:147:45: error: expected '}' at end of brace statement\n\
    assert(is_simple_power(x: 1, n: 12) == true)\n                               \
    \             ^\n/tmp/tmp9ls8pu2m.swift:18:46: note: to match this opening '{'\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n                             \
    \                ^\n/tmp/tmp9ls8pu2m.swift:26:31: error: missing argument label\
    \ 'x:' in call\n        return is_simple_power(x, n: 2)\n                    \
    \          ^\n                               x: \n/tmp/tmp9ls8pu2m.swift:29:31:\
    \ error: missing argument label 'x:' in call\n        return is_simple_power(x,\
    \ n: 3)\n                              ^\n                               x: \n\
    /tmp/tmp9ls8pu2m.swift:32:31: error: missing argument label 'x:' in call\n   \
    \     return is_simple_power(x, n: 4)\n                              ^\n     \
    \                          x: \n/tmp/tmp9ls8pu2m.swift:35:31: error: missing argument\
    \ label 'x:' in call\n        return is_simple_power(x, n: 5)\n              \
    \                ^\n                               x: \n/tmp/tmp9ls8pu2m.swift:38:31:\
    \ error: missing argument label 'x:' in call\n        return is_simple_power(x,\
    \ n: 6)\n                              ^\n                               x: \n\
    /tmp/tmp9ls8pu2m.swift:41:31: error: missing argument label 'x:' in call\n   \
    \     return is_simple_power(x, n: 7)\n                              ^\n     \
    \                          x: \n/tmp/tmp9ls8pu2m.swift:44:31: error: missing argument\
    \ label 'x:' in call\n        return is_simple_power(x, n: 8)\n              \
    \                ^\n                               x: \n/tmp/tmp9ls8pu2m.swift:47:31:\
    \ error: missing argument label 'x:' in call\n        return is_simple_power(x,\
    \ n: 9)\n                              ^\n                               x: \n\
    /tmp/tmp9ls8pu2m.swift:50:31: error: missing argument label 'x:' in call\n   \
    \     return is_simple_power(x, n: 10)\n                              ^\n    \
    \                           x: \n/tmp/tmp9ls8pu2m.sw"
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if n % x == 0 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmprb1xx1yn.swift:29:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 0 {\n \
    \       return true\n    }\n    if n == 1 {\n        return true\n    }\n    if\
    \ x == 1 {\n        return true\n    }\n    if x == x {\n        return true\n\
    \    }\n    if x == x*x {\n        return true\n    }\n    if x == x*x*x {\n \
    \       return true\n    }\n    if x == x*x*x*x {\n        return true\n    }\n\
    \    if x == x*x*x*x*x {\n        return true\n    }\n    if x == x*x*x*x*x*x\
    \ {\n        return true\n    }\n    if x == x*x*x*x*x*x*x {\n        return true\n\
    \    }\n    if x == x*x*x*x*x*x*x*x {\n        return true\n    }\n    if x ==\
    \ x*x*x*x*x*x*x*x*x {\n        return true\n    }\n    if x == x*x*x*x*x*x*x*x*x*x\
    \ {\n        return true\n    }\n    if x == x*x*x*x*x*x*x*x*x*x*x {\n       \
    \ return true\n    }\n    if x == x*x*x*x*x*x*x*x*x*x*x*x {\n        return true\n\
    \    }\n    if x == x*x*x*x*x*x*x*x*x*x*x*x*x {\n        return true\n    }\n\
    \    if x == x*x*x*x*x*x*x*x*x*x*x*x*x*x {\n        return true\n    }\n    if\
    \ x == x*x*x*x*x*x*x*x*x*x*x*x*x*x*x {\n        return true\n    }\n    if x ==\
    \ x*x*x*x*x*x*x*x*x*x*x*x*x*x*x {\n        return true\n    }\n    if x == x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x\
    \ {\n        return true\n    }\n    if x == x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x\
    \ {\n        return true\n    }\n    if x == x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x\
    \ {\n        return true\n    }\n    if x == x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x\
    \ {\n        return true\n    }\n    if x == x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x\
    \ {\n        return true\n    }\n    if x == x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x\
    \ {\n        return true\n    }\n    if x == x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x\
    \ {\n        return true\n    }\n    if x == x*x*\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp1jsn4eme.swift:97:17: error: expected '{' after 'if' condition\n\
    \    if x == x*x*\n                ^\n/tmp/tmp1jsn4eme.swift:97:16: error: '*'\
    \ is not a postfix unary operator\n    if x == x*x*\n               ^\n"
  stdout: ''
  timestamp: 1659824560
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 0 {\n \
    \       return true\n    }\n    if n == 1 {\n        return true\n    }\n    if\
    \ x == 1 {\n        return true\n    }\n    if x == n {\n        return true\n\
    \    }\n    if x % n == 0 {\n        return true\n    }\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpdkbmrstg/tmpdkbmrstg.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c8ecf3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c8e9eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c8e9ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c8e9e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdkbmrstg                        0x0000563ee2af24a7 <unavailable> + 5287

    5    libc.so.6                          0x00002b0c8eedf460 __libc_start_main +
    245

    6    tmpdkbmrstg                        0x0000563ee2af1ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if x == n {\n        return true\n    }\n    if\
    \ n == 1 {\n        return false\n    }\n    if n == 0 {\n        return false\n\
    \    }\n    if n == 2 {\n        return is_simple_power(x, n-1)\n    }\n    if\
    \ n == 3 {\n        return is_simple_power(x, n-2) || is_simple_power(x, n-2)\n\
    \    }\n    if n == 4 {\n        return is_simple_power(x, n-3) || is_simple_power(x,\
    \ n-3)\n    }\n    if n == 5 {\n        return is_simple_power(x, n-4) || is_simple_power(x,\
    \ n-4)\n    }\n    if n == 6 {\n        return is_simple_power(x, n-5) || is_simple_power(x,\
    \ n-5)\n    }\n    if n == 7 {\n        return is_simple_power(x, n-6) || is_simple_power(x,\
    \ n-6)\n    }\n    if n == 8 {\n        return is_simple_power(x, n-7) || is_simple_power(x,\
    \ n-7)\n    }\n    if n == 9 {\n        return is_simple_power(x, n-8) || is_simple_power(x,\
    \ n-8)\n    }\n    if n == 10 {\n        return is_simple_power(x, n-9) || is_simple_power(x,\
    \ n-9)\n    }\n    if n == 11 {\n        return is_simple_power(x, n-10) || is_simple_power(x,\
    \ n-10)\n    }\n    if n == 12 {\n        return is_simple_power(x, n-11) || is_simple_power(x,\
    \ n-11)\n    }\n    if n == 13 {\n        return is_simple_power(x, n-12) || is_simple_power(x,\
    \ n-12)\n    }\n    if n == 14 {\n        return is_simple_power(x, n-13) || is_simple_power(x,\
    \ n-13)\n    }\n    if n == 15 {\n        return is_simple_power(x, n-14) || is_simple_power(x,\
    \ n-14)\n    }\n    if n == 16 {\n        return is_simple_power(x, n-15) || is_simple_power(x,\
    \ n-15)\n    }\n    if n == 17 {\n        return is_simple_power(x, n-16) || is_simple_power(x,\
    \ n-16)\n    }\n    if n == 18 {\n        return is_simple_power(x, n-17) || is_simple_power(x,\
    \ n-17)\n    }\n    if n == 19 {\n        return is_simple_power(x, n-18) || is_simple_power(x,\
    \ n-18)\n    }\n    if n == 20 {\n        return is_simple_power(x, n-19) || is_simple_power(x,\
    \ n-19)\n    }\n    if n == 21 {\n        return is_simple_power(x, n-20) || is_simple_power(x,\
    \ n-20)\n    }\n    if n == 22 {\n        return is_simple_power(x, n-21) || is_simple_power(x,\
    \ n-21)\n    }\n    if n == 23 {\n        return is_simple_power(x, n-22) || is_simple_power(x,\
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_simple_power(x: 16, n: 2)\
    \ == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmplzczftgt.swift:96:1: error: expected expression in list of expressions\n\
    }\n^\n/tmp/tmplzczftgt.swift:120:45: error: expected '}' at end of brace statement\n\
    assert(is_simple_power(x: 1, n: 12) == true)\n                               \
    \             ^\n/tmp/tmplzczftgt.swift:18:46: note: to match this opening '{'\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n                             \
    \                ^\n/tmp/tmplzczftgt.swift:32:31: error: missing argument labels\
    \ 'x:n:' in call\n        return is_simple_power(x, n-1)\n                   \
    \           ^\n                               x: n: \n/tmp/tmplzczftgt.swift:35:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ n-2) || is_simple_power(x, n-2)\n                              ^\n         \
    \                      x: n: \n/tmp/tmplzczftgt.swift:35:58: error: missing argument\
    \ labels 'x:n:' in call\n        return is_simple_power(x, n-2) || is_simple_power(x,\
    \ n-2)\n                                                         ^\n         \
    \                                                 x: n: \n/tmp/tmplzczftgt.swift:38:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ n-3) || is_simple_power(x, n-3)\n                              ^\n         \
    \                      x: n: \n/tmp/tmplzczftgt.swift:38:58: error: missing argument\
    \ labels 'x:n:' in call\n        return is_simple_power(x, n-3) || is_simple_power(x,\
    \ n-3)\n                                                         ^\n         \
    \                                                 x: n: \n/tmp/tmplzczftgt.swift:41:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ n-4) || is_simple_power(x, n-4)\n                              ^\n         \
    \                      x: n: \n/tmp/tmplzczftgt.swift:41:58: error: missing argument\
    \ labels 'x:n:' in call\n        return is_simple_power(x, n-4) || is_simple_power(x,\
    \ n-4)\n                                                         ^\n         \
    \                                                 x: n: \n/tmp/tmplzczftgt.swift"
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if n == 0 {\n        return false\n    }\n   \
    \ if x == 1 {\n        return true\n    }\n    if x == 0 {\n        return false\n\
    \    }\n    if x % n == 0 {\n        return is_simple_power(x / n, n: n)\n   \
    \ }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp3719z_6d.swift:32:31: error: missing argument label 'x:' in call\n\
    \        return is_simple_power(x / n, n: n)\n                              ^\n\
    \                               x: \n"
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if n == 0 {\n        return false\n    }\n   \
    \ if x == 0 {\n        return false\n    }\n    if x == 1 {\n        return true\n\
    \    }\n    if x == n {\n        return true\n    }\n    if x > n {\n        return\
    \ false\n    }\n    if x < 0 {\n        return false\n    }\n    if x == n / 2\
    \ {\n        return is_simple_power(x, n - 1)\n    }\n    if x == n / 4 {\n  \
    \      return is_simple_power(x, n - 2)\n    }\n    if x == n / 8 {\n        return\
    \ is_simple_power(x, n - 3)\n    }\n    if x == n / 16 {\n        return is_simple_power(x,\
    \ n - 4)\n    }\n    if x == n / 32 {\n        return is_simple_power(x, n - 5)\n\
    \    }\n    if x == n / 64 {\n        return is_simple_power(x, n - 6)\n    }\n\
    \    if x == n / 128 {\n        return is_simple_power(x, n - 7)\n    }\n    if\
    \ x == n / 256 {\n        return is_simple_power(x, n - 8)\n    }\n    if x ==\
    \ n / 512 {\n        return is_simple_power(x, n - 9)\n    }\n    if x == n /\
    \ 1024 {\n        return is_simple_power(x, n - 10)\n    }\n    if x == n / 2048\
    \ {\n        return is_simple_power(x, n - 11)\n    }\n    if x == n / 4096 {\n\
    \        return is_simple_power(x, n - 12)\n    }\n    if x == n / 8192 {\n  \
    \      return is_simple_power(x, n - 13)\n    }\n    if x == n / 16384 {\n   \
    \     return is_simple_power(x, n - 14)\n    }\n    if x == n / 32768 {\n    \
    \    return is_simple_power(x, n - 15)\n    }\n    if x == n / 65536 {\n     \
    \   return is_simple_power(x, n - 16)\n    }\n    if x == n / 131072 {\n     \
    \   return is_simple_power(x, n - 17)\n    }\n    if x == n / 262144 {\n     \
    \   return is_simple_power(x, n - 18)\n    }\n    if x == n / 524288 {\n     \
    \   return is_simple_power(x, n - 19)\n    }\n    if x == n / 1048576 {\n    \
    \    return is_simple_power(x, n - 20)\n    }\n    if x == n / 2097152 {\n   \
    \     return is_simple_power(x, n - 21)\n    }\n    if x == n / 4194304 {\n  \
    \      return is_simple_power(x, n - 22)\n    }\n    if x == n / 8388608 {\n \
    \       return is_simple_power(x, n - 23)\n    }\n    if x == n / 16777216 {\n\
    \        return is_simple_power(x, n - 24)\n    }\n    if x == n / 33554432 {\n\
    \        return is_simple_power(x, n - 25)\n    }\n    if x == n \n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp1i22qjeb.swift:115:14: error: expected '{' after 'if' condition\n\
    \    if x == n \n             ^\n/tmp/tmp1i22qjeb.swift:41:31: error: missing\
    \ argument labels 'x:n:' in call\n        return is_simple_power(x, n - 1)\n \
    \                             ^\n                               x: n: \n/tmp/tmp1i22qjeb.swift:44:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ n - 2)\n                              ^\n                               x: n:\
    \ \n/tmp/tmp1i22qjeb.swift:47:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, n - 3)\n                              ^\n \
    \                              x: n: \n/tmp/tmp1i22qjeb.swift:50:31: error: missing\
    \ argument labels 'x:n:' in call\n        return is_simple_power(x, n - 4)\n \
    \                             ^\n                               x: n: \n/tmp/tmp1i22qjeb.swift:53:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ n - 5)\n                              ^\n                               x: n:\
    \ \n/tmp/tmp1i22qjeb.swift:56:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, n - 6)\n                              ^\n \
    \                              x: n: \n/tmp/tmp1i22qjeb.swift:59:31: error: missing\
    \ argument labels 'x:n:' in call\n        return is_simple_power(x, n - 7)\n \
    \                             ^\n                               x: n: \n/tmp/tmp1i22qjeb.swift:62:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ n - 8)\n                              ^\n                               x: n:\
    \ \n/tmp/tmp1i22qjeb.swift:65:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, n - 9)\n                              ^\n \
    \                              x: n: \n/tmp/tmp1i22qjeb.swift:68:31: error: missing\
    \ argument labels 'x:n:' in call\n        return is_simple_power(x, n - 10)\n\
    \                              ^\n                               x: n: \n/tmp/tmp1i22qjeb.swift:71:31:\
    \ error: missing argument labels 'x:n:' in call"
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return is_simple_power_of_two(x)\
    \ && is_power_of_two(n) && is_power_of_two(x * n)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpluviqrxj.swift:19:12: error: cannot find 'is_simple_power_of_two'\
    \ in scope\n    return is_simple_power_of_two(x) && is_power_of_two(n) && is_power_of_two(x\
    \ * n)\n           ^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpluviqrxj.swift:19:41: error:\
    \ cannot find 'is_power_of_two' in scope\n    return is_simple_power_of_two(x)\
    \ && is_power_of_two(n) && is_power_of_two(x * n)\n                          \
    \              ^~~~~~~~~~~~~~~\n/tmp/tmpluviqrxj.swift:19:63: error: cannot find\
    \ 'is_power_of_two' in scope\n    return is_simple_power_of_two(x) && is_power_of_two(n)\
    \ && is_power_of_two(x * n)\n                                                \
    \              ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if n == 0 {\n        return false\n    }\n   \
    \ if x == 1 {\n        return true\n    }\n    if x == 0 {\n        return false\n\
    \    }\n    if x == n {\n        return true\n    }\n    if n % 2 == 0 {\n   \
    \     return is_simple_power(x, n-1)\n    }\n    return is_simple_power(x, n/2)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpg28vcjig.swift:35:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n/tmp/tmpg28vcjig.swift:37:27: error:\
    \ missing argument labels 'x:n:' in call\n    return is_simple_power(x, n/2)\n\
    \                          ^\n                           x: n: \n"
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if x % n == 0 {\n        return true\n\
    \    }\n    if x % n == 1 {\n        return false\n    }\n    if x % n == 2 {\n\
    \        return is_simple_power(x, n-1)\n    }\n    return is_simple_power(x,\
    \ n-1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpwklgwpz3.swift:35:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n/tmp/tmpwklgwpz3.swift:37:27: error:\
    \ missing argument labels 'x:n:' in call\n    return is_simple_power(x, n-1)\n\
    \                          ^\n                           x: n: \n"
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if n == 0 {\n        return false\n    }\n   \
    \ if x == 1 {\n        return true\n    }\n    if x == 0 {\n        return false\n\
    \    }\n    if x == n {\n        return true\n    }\n    if n % 2 == 0 {\n   \
    \     return is_simple_power(x, n/2)\n    }\n    return is_simple_power(x, n/2)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpeu81lqu6.swift:35:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n/2)\n                             \
    \ ^\n                               x: n: \n/tmp/tmpeu81lqu6.swift:37:27: error:\
    \ missing argument labels 'x:n:' in call\n    return is_simple_power(x, n/2)\n\
    \                          ^\n                           x: n: \n"
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if n % 2 == 0 {\n        return is_simple_power(x,\
    \ n//2)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp9136r99m.swift:30:5: error: expected ')' in expression list\n \
    \   }\n    ^\n/tmp/tmp9136r99m.swift:29:31: note: to match this opening '('\n\
    \        return is_simple_power(x, n//2)\n                              ^\n/tmp/tmp9136r99m.swift:29:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ n//2)\n                              ^\n                               x: n:\
    \ \n"
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if n == 0 {\n        return false\n    }\n   \
    \ if x == 1 {\n        return true\n    }\n    if x == 0 {\n        return false\n\
    \    }\n    if x == n {\n        return true\n    }\n    if x % n == 0 {\n   \
    \     return is_simple_power(x / n, n)\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp9jdielsl.swift:35:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x / n, n)\n                           \
    \   ^\n                               x:     n: \n"
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if x > n {\n        return false\n\
    \    }\n    if x > 1 {\n        return is_simple_power(x, n - 1)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpzgmt8ug_.swift:32:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n - 1)\n                           \
    \   ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824560
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if x % n == 0 {\n        return true\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpkvpr0wav/tmpkvpr0wav.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8ba96dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8ba664b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8ba664988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8ba6637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkvpr0wav                        0x0000558a6469e4a7 <unavailable> + 5287

    5    libc.so.6                          0x00002ac8bab59460 __libc_start_main +
    245

    6    tmpkvpr0wav                        0x0000558a6469def9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ n == 0 {\n        return false\n    }\n    if x == 0 {\n        return false\n\
    \    }\n    if x == 1 {\n        return true\n    }\n    if n == 2 {\n       \
    \ return true\n    }\n    if x == 2 {\n        return true\n    }\n    if n ==\
    \ 3 {\n        return true\n    }\n    if x == 3 {\n        return true\n    }\n\
    \    if n == 4 {\n        return true\n    }\n    if x == 4 {\n        return\
    \ true\n    }\n    if n == 5 {\n        return true\n    }\n    if x == 5 {\n\
    \        return true\n    }\n    if n == 6 {\n        return true\n    }\n   \
    \ if x == 6 {\n        return true\n    }\n    if n == 7 {\n        return true\n\
    \    }\n    if x == 7 {\n        return true\n    }\n    if n == 8 {\n       \
    \ return true\n    }\n    if x == 8 {\n        return true\n    }\n    if n ==\
    \ 9 {\n        return true\n    }\n    if x == 9 {\n        return true\n    }\n\
    \    if n == 10 {\n        return true\n    }\n    if x == 10 {\n        return\
    \ true\n    }\n    if n == 11 {\n        return true\n    }\n    if x == 11 {\n\
    \        return true\n    }\n    if n == 12 {\n        return true\n    }\n  \
    \  if x == 12 {\n        return true\n    }\n    if n == 13 {\n        return\
    \ true\n    }\n    if x == 13 {\n        return true\n    }\n    if n == 14 {\n\
    \        return true\n    }\n    if x == 14 {\n        return true\n    }\n  \
    \  if n == 15 {\n        return true\n    }\n    if x == 15 {\n        return\
    \ true\n    }\n    if n == 16 {\n        return true\n    }\n    if x == 16 {\n\
    \        return true\n    }\n    if n == 17 {\n        return true\n    }\n  \
    \  if x == 17 {\n        return true\n    }\n    if n == 18 {\n        return\
    \ true\n    }\n    if x == 18 {\n        return true\n    }\n    if n == 19 {\n\
    \        return true\n    }\n    if x == 19 {\n        return true\n    }\n  \
    \  if n == 20 {\n        return true\n    }\n    if x == 20 {\n        return\
    \ true\n    }\n    if n == 21 {\n        return true\n    }\n    if x == 21 {\n\
    \        return true\n    }\n    if n == 22 {\n        return true\n    }\n  \
    \  if x == 22 {\n        return true\n    }\n    if n == 23 {\n        return\
    \ true\n    }\n    if x == 23 {\n        return true\n    }\n    if n == 24 {\n\
    \        return true\n    }\n    if x == 24 {\n        return true\n    }\n  \
    \  if n == 25 {\n        return true\n    }\n    if x == 25\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmptidc7_a7.swift:175:15: error: expected '{' after 'if' condition\n\
    \    if x == 25\n              ^\n"
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ n == 0 {\n        return false\n    }\n    if x == 0 {\n        return false\n\
    \    }\n    if x == 1 {\n        return true\n    }\n    if x == 2 {\n       \
    \ return true\n    }\n    if x == 3 {\n        return true\n    }\n    if x ==\
    \ 4 {\n        return true\n    }\n    if x == 5 {\n        return true\n    }\n\
    \    if x == 6 {\n        return true\n    }\n    if x == 7 {\n        return\
    \ true\n    }\n    if x == 8 {\n        return true\n    }\n    if x == 9 {\n\
    \        return true\n    }\n    if x == 10 {\n        return true\n    }\n  \
    \  if x == 11 {\n        return true\n    }\n    if x == 12 {\n        return\
    \ true\n    }\n    if x == 13 {\n        return true\n    }\n    if x == 14 {\n\
    \        return true\n    }\n    if x == 15 {\n        return true\n    }\n  \
    \  if x == 16 {\n        return true\n    }\n    if x == 17 {\n        return\
    \ true\n    }\n    if x == 18 {\n        return true\n    }\n    if x == 19 {\n\
    \        return true\n    }\n    if x == 20 {\n        return true\n    }\n  \
    \  if x == 21 {\n        return true\n    }\n    if x == 22 {\n        return\
    \ true\n    }\n    if x == 23 {\n        return true\n    }\n    if x == 24 {\n\
    \        return true\n    }\n    if x == 25 {\n        return true\n    }\n  \
    \  if x == 26 {\n        return true\n    }\n    if x == 27 {\n        return\
    \ true\n    }\n    if x == 28 {\n        return true\n    }\n    if x == 29 {\n\
    \        return true\n    }\n    if x == 30 {\n        return true\n    }\n  \
    \  if x == 31 {\n        return true\n    }\n    if x == 32 {\n        return\
    \ true\n    }\n    if x == 33 {\n        return true\n    }\n    if x == 34 {\n\
    \        return true\n    }\n    if x == 35 {\n        return true\n    }\n  \
    \  if x == 36 {\n        return true\n    }\n    if x == 37 {\n        return\
    \ true\n    }\n    if x == 38 {\n        return true\n    }\n    if x == 39 {\n\
    \        return true\n    }\n    if x == 40 == {\n        return true\n    }\n\
    \    if x == 41 {\n        return true\n    }\n    if x == 42 {\n        return\
    \ true\n    }\n    if x == 43 {\n        return true\n    }\n    if x == 44 {\n\
    \        return true\n    }\n    if x == 45 {\n        return true\n    }\n  \
    \  if x == 46 {\n        return true\n    }\n    if x == 47 {\n        return\
    \ true\n    }\n    if x == 48 {\n        return true\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpmu7txg7l.swift:150:6: error: expected '{' after 'if' condition\n\
    \    }\n     ^\n/tmp/tmpmu7txg7l.swift:148:10: error: adjacent operators are in\
    \ non-associative precedence group 'ComparisonPrecedence'\n    if x == 40 == {\n\
    \         ^     ~~\n/tmp/tmpmu7txg7l.swift:148:19: error: function produces expected\
    \ type 'Bool'; did you mean to call it with '()'?\n    if x == 40 == {\n     \
    \             ^\n"
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if x < n {\n        return false\n\
    \    }\n    if x == n-1 {\n        return is_simple_power(x, n-1)\n    }\n   \
    \ return is_simple_power(x, n-1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp5ynqihro.swift:32:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n/tmp/tmp5ynqihro.swift:34:27: error:\
    \ missing argument labels 'x:n:' in call\n    return is_simple_power(x, n-1)\n\
    \                          ^\n                           x: n: \n"
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if x % n == 0 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpql79bezd.swift:29:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if x % n == 0 {\n        return is_simple_power(x\
    \ / n, n: n)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x: 143214,\
    \ n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpsm4c4d_j.swift:29:31: error: missing argument label 'x:' in call\n\
    \        return is_simple_power(x / n, n: n)\n                              ^\n\
    \                               x: \n"
  stdout: ''
  timestamp: 1659824560
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if x % n == 0 {\n        return true\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpkvpr0wav/tmpkvpr0wav.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8ba96dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8ba664b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8ba664988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8ba6637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkvpr0wav                        0x0000558a6469e4a7 <unavailable> + 5287

    5    libc.so.6                          0x00002ac8bab59460 __libc_start_main +
    245

    6    tmpkvpr0wav                        0x0000558a6469def9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if n == 0 {\n        return false\n    }\n   \
    \ if x == 0 {\n        return false\n    }\n    if x == 1 {\n        return true\n\
    \    }\n    if x == n {\n        return true\n    }\n    if x > n {\n        return\
    \ false\n    }\n    if x < 0 {\n        return false\n    }\n    if n == 2 {\n\
    \        return is_simple_power(x, n-1)\n    }\n    if n == 3 {\n        return\
    \ is_simple_power(x, n-2) || is_simple_power(x, n-1)\n    }\n    if n == 4 {\n\
    \        return is_simple_power(x, n-3) || is_simple_power(x, n-2)\n    }\n  \
    \  if n == 5 {\n        return is_simple_power(x, n-4) || is_simple_power(x, n-3)\n\
    \    }\n    if n == 6 {\n        return is_simple_power(x, n-5) || is_simple_power(x,\
    \ n-4)\n    }\n    if n == 7 {\n        return is_simple_power(x, n-6) || is_simple_power(x,\
    \ n-5)\n    }\n    if n == 8 {\n        return is_simple_power(x, n-7) || is_simple_power(x,\
    \ n-6)\n    }\n    if n == 9 {\n        return is_simple_power(x, n-8) || is_simple_power(x,\
    \ n-7)\n    }\n    if n == 10 {\n        return is_simple_power(x, n-9) || is_simple_power(x,\
    \ n-8)\n    }\n    if n == 11 {\n        return is_simple_power(x, n-10) || is_simple_power(x,\
    \ n-9)\n    }\n    if n == 12 {\n        return is_simple_power(x, n-11) || is_simple_power(x,\
    \ n-10)\n    }\n    if n == 13 {\n        return is_simple_power(x, n-12) || is_simple_power(x,\
    \ n-11)\n    }\n    if n == 14 {\n        return is_simple_power(x, n-13) || is_simple_power(x,\
    \ n-12)\n    }\n    if n == 15 {\n        return is_simple_power(x, n-14) || is_simple_power(x,\
    \ n-13)\n    }\n    if n == 16 {\n        return is_simple_power(x, n-15) || is_simple_power(x,\
    \ n-14)\n    }\n    if n == 17 {\n        return is_simple_power(x, n-16) || is_simple_power(x,\
    \ n-15)\n    }\n    if n == 18 {\n        return is_simple_power(x, n-17) || is_simple_power(x,\
    \ n-16)\n    }\n    if n == 19 {\n        return is_simple_power(x, n-18) || is_simple_power(x,\
    \ n-17)\n    }\n    if n == 20 {\n        return is_simple_power(x, n-19) || is_simple_power(x,\
    \ n-18)\n    }\n    if n == 21 {\n        return is_simple_power(x, n-20) || is_simple_power(x,\
    \ n-19)\n    }\n    if n == 22 {\n        return is_simple_power(x, n-21) || \n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpxh8u_yx3.swift:102:1: error: expected expression after operator\n\
    }\n^\n/tmp/tmpxh8u_yx3.swift:126:45: error: expected '}' at end of brace statement\n\
    assert(is_simple_power(x: 1, n: 12) == true)\n                               \
    \             ^\n/tmp/tmpxh8u_yx3.swift:18:46: note: to match this opening '{'\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n                             \
    \                ^\n/tmp/tmpxh8u_yx3.swift:41:31: error: missing argument labels\
    \ 'x:n:' in call\n        return is_simple_power(x, n-1)\n                   \
    \           ^\n                               x: n: \n/tmp/tmpxh8u_yx3.swift:44:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ n-2) || is_simple_power(x, n-1)\n                              ^\n         \
    \                      x: n: \n/tmp/tmpxh8u_yx3.swift:44:58: error: missing argument\
    \ labels 'x:n:' in call\n        return is_simple_power(x, n-2) || is_simple_power(x,\
    \ n-1)\n                                                         ^\n         \
    \                                                 x: n: \n/tmp/tmpxh8u_yx3.swift:47:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ n-3) || is_simple_power(x, n-2)\n                              ^\n         \
    \                      x: n: \n/tmp/tmpxh8u_yx3.swift:47:58: error: missing argument\
    \ labels 'x:n:' in call\n        return is_simple_power(x, n-3) || is_simple_power(x,\
    \ n-2)\n                                                         ^\n         \
    \                                                 x: n: \n/tmp/tmpxh8u_yx3.swift:50:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ n-4) || is_simple_power(x, n-3)\n                              ^\n         \
    \                      x: n: \n/tmp/tmpxh8u_yx3.swift:50:58: error: missing argument\
    \ labels 'x:n:' in call\n        return is_simple_power(x, n-4) || is_simple_power(x,\
    \ n-3)\n                                                         ^\n         \
    \                                                 x: n: \n/tmp/tmpxh8u_yx3.swift:53:31:"
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if n % x == 0 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmprb1xx1yn.swift:29:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if n == 0 {\n        return false\n    }\n   \
    \ if x == 0 {\n        return false\n    }\n    if x == 1 {\n        return true\n\
    \    }\n    if x == n {\n        return true\n    }\n    if x % n == 0 {\n   \
    \     return is_simple_power(x / n, n: n)\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp42d6xsoe.swift:35:31: error: missing argument label 'x:' in call\n\
    \        return is_simple_power(x / n, n: n)\n                              ^\n\
    \                               x: \n"
  stdout: ''
  timestamp: 1659824560
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if x % n == 0 {\n        return true\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpkvpr0wav/tmpkvpr0wav.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8ba96dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8ba664b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8ba664988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8ba6637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkvpr0wav                        0x0000558a6469e4a7 <unavailable> + 5287

    5    libc.so.6                          0x00002ac8bab59460 __libc_start_main +
    245

    6    tmpkvpr0wav                        0x0000558a6469def9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if n == 0 {\n        return false\n    }\n   \
    \ if x == 0 {\n        return false\n    }\n    if x == 1 {\n        return true\n\
    \    }\n    if x == n {\n        return true\n    }\n    if x % n == 0 {\n   \
    \     return is_simple_power(x / n, n: n)\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp42d6xsoe.swift:35:31: error: missing argument label 'x:' in call\n\
    \        return is_simple_power(x / n, n: n)\n                              ^\n\
    \                               x: \n"
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if x > n {\n        return false\n\
    \    }\n    if x % n == 0 {\n        return is_simple_power(x / n, n)\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp006h792o.swift:32:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x / n, n)\n                           \
    \   ^\n                               x:     n: \n"
  stdout: ''
  timestamp: 1659824560
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if x % n == 0 {\n        return true\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpkvpr0wav/tmpkvpr0wav.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8ba96dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8ba664b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8ba664988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8ba6637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkvpr0wav                        0x0000558a6469e4a7 <unavailable> + 5287

    5    libc.so.6                          0x00002ac8bab59460 __libc_start_main +
    245

    6    tmpkvpr0wav                        0x0000558a6469def9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if n == 0 {\n        return false\n    }\n   \
    \ if x == 1 {\n        return true\n    }\n    if x == 0 {\n        return false\n\
    \    }\n    if x == n {\n        return true\n    }\n    if x > n {\n        return\
    \ false\n    }\n    if x < 0 {\n        return false\n    }\n    if x > n {\n\
    \        return false\n    }\n    if x < n {\n        return false\n    }\n  \
    \  if x == n {\n        return true\n    }\n    if x == n+1 {\n        return\
    \ true\n    }\n    if x == n-1 {\n        return true\n    }\n    if x == n*n\
    \ {\n        return true\n    }\n    if x == n*n+1 {\n        return true\n  \
    \  }\n    if x == n*n-1 {\n        return true\n    }\n    if x == n*(n+1)/2 {\n\
    \        return true\n    }\n    if x == n*(n-1)/2 {\n        return true\n  \
    \  }\n    if x == n*(n+2)/3 {\n        return true\n    }\n    if x == n*(n-2)/3\
    \ {\n        return true\n    }\n    if x == n*(n+3)/6 {\n        return true\n\
    \    }\n    if x == n*(n-3)/6 {\n        return true\n    }\n    if x == n*(n+4)/15\
    \ {\n        return true\n    }\n    if x == n*(n-4)/15 {\n        return true\n\
    \    }\n    if x == n*(n+5)/30 {\n        return true\n    }\n    if x == n*(n-5)/30\
    \ {\n        return true\n    }\n    if x == n*(n+6)/60 {\n        return true\n\
    \    }\n    if x == n*(n-6)/60 {\n        return true\n    }\n    if x == n*(n+7)/120\
    \ {\n        return true\n    }\n    if x == n*(n-7)/120 {\n        return true\n\
    \    }\n    if x == n*(n+8)/240 {\n        return true\n    }\n    if x == n*(n-8)/240\
    \ {\n        return true\n    }\n    if x == n*(n+9)/720 {\n        return true\n\
    \    }\n    if x == n*(n-9)/720 {\n        return true\n    }\n    if x == n*(n+10)/1440\
    \  {\n        return true\n    }\n    if x == n*(n-10)/1440  {\n        return\
    \ true\n    }\n    if x == n*(n+11)/2880  {\n        return true\n    }\n    if\
    \ x == n*(n-11)/2880  {\n        return true\n    }\n    if x == n*(n+12)/5760\
    \  {\n        return true\n    }\n    if x == n*(n-12)/5760  {\n        return\
    \ true\n    }\n    if x == n*(n+13)/11840\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpuyi_wt89.swift:136:27: error: expected '{' after 'if' condition\n\
    \    if x == n*(n+13)/11840\n                          ^\n"
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if n == 0 {\n        return false\n    }\n   \
    \ if x == 0 {\n        return false\n    }\n    if x == 1 {\n        return true\n\
    \    }\n    if x == n {\n        return true\n    }\n    if n % 2 == 0 {\n   \
    \     return is_simple_power(x, n-1)\n    }\n    return is_simple_power(x, n/2)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmps3i4z036.swift:35:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n/tmp/tmps3i4z036.swift:37:27: error:\
    \ missing argument labels 'x:n:' in call\n    return is_simple_power(x, n/2)\n\
    \                          ^\n                           x: n: \n"
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return true\n    }\n    if\
    \ n == 2 {\n        return is_simple_power(x, n-1)\n    }\n    if n == 3 {\n \
    \       return is_simple_power(x, n-2) || is_simple_power(x, n-2)\n    }\n   \
    \ if n == 4 {\n        return is_simple_power(x, n-3) || is_simple_power(x, n-3)\n\
    \    }\n    if n == 5 {\n        return is_simple_power(x, n-4) || is_simple_power(x,\
    \ n-4)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpr5ate4yd.swift:26:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n/tmp/tmpr5ate4yd.swift:29:31: error:\
    \ missing argument labels 'x:n:' in call\n        return is_simple_power(x, n-2)\
    \ || is_simple_power(x, n-2)\n                              ^\n              \
    \                 x: n: \n/tmp/tmpr5ate4yd.swift:29:58: error: missing argument\
    \ labels 'x:n:' in call\n        return is_simple_power(x, n-2) || is_simple_power(x,\
    \ n-2)\n                                                         ^\n         \
    \                                                 x: n: \n/tmp/tmpr5ate4yd.swift:32:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ n-3) || is_simple_power(x, n-3)\n                              ^\n         \
    \                      x: n: \n/tmp/tmpr5ate4yd.swift:32:58: error: missing argument\
    \ labels 'x:n:' in call\n        return is_simple_power(x, n-3) || is_simple_power(x,\
    \ n-3)\n                                                         ^\n         \
    \                                                 x: n: \n/tmp/tmpr5ate4yd.swift:35:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ n-4) || is_simple_power(x, n-4)\n                              ^\n         \
    \                      x: n: \n/tmp/tmpr5ate4yd.swift:35:58: error: missing argument\
    \ labels 'x:n:' in call\n        return is_simple_power(x, n-4) || is_simple_power(x,\
    \ n-4)\n                                                         ^\n         \
    \                                                 x: n: \n"
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if n % x == 0 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmprb1xx1yn.swift:29:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ n == 0 {\n        return false\n    }\n    if x == 0 {\n        return false\n\
    \    }\n    if x == 1 {\n        return true\n    }\n    if n == 2 {\n       \
    \ return true\n    }\n    if x == 2 {\n        return true\n    }\n    if n ==\
    \ 3 {\n        return true\n    }\n    if x == 3 {\n        return true\n    }\n\
    \    if n == 4 {\n        return true\n    }\n    if x == 4 {\n        return\
    \ true\n    }\n    if n == 5 {\n        return true\n    }\n    if x == 5 {\n\
    \        return true\n    }\n    if n == 6 {\n        return true\n    }\n   \
    \ if x == 6 {\n        return true\n    }\n    if n == 7 {\n        return true\n\
    \    }\n    if x == 7 {\n        return true\n    }\n    if n == 8 {\n       \
    \ return true\n    }\n    if x == 8 {\n        return true\n    }\n    if n ==\
    \ 9 {\n        return true\n    }\n    if x == 9 {\n        return true\n    }\n\
    \    if n == 10 {\n        return true\n    }\n    if x == 10 {\n        return\
    \ true\n    }\n    if n == 11 {\n        return true\n    }\n    if x == 11 {\n\
    \        return true\n    }\n    if n == 12 {\n        return true\n    }\n  \
    \  if x == 12 {\n        return true\n    }\n    if n == 13 {\n        return\
    \ true\n    }\n    if x == 13 {\n        return true\n    }\n    if n == 14 {\n\
    \        return true\n    }\n    if x == 14 {\n        return true\n    }\n  \
    \  if n == 15 {\n        return true\n    }\n    if x == 15 {\n        return\
    \ true\n    }\n    if n == 16 {\n        return true\n    }\n    if x == 16 {\n\
    \        return true\n    }\n    if n == 17 {\n        return true\n    }\n  \
    \  if x == 17 {\n        return true\n    }\n    if n == 18 {\n        return\
    \ true\n    }\n    if x == 18 {\n        return true\n    }\n    if n == 19 {\n\
    \        return true\n    }\n    if x == 19 {\n        return true\n    }\n  \
    \  if n == 20 {\n        return true\n    }\n    if x == 20 {\n        return\
    \ true\n    }\n    if n == 21 {\n        return true\n    }\n    if x == 21 {\n\
    \        return true\n    }\n    if n == 22 {\n        return true\n    }\n  \
    \  if x == 22 {\n        return true\n    }\n    if n == 23 {\n        return\
    \ true\n    }\n    if x == 23 {\n        return true\n    }\n    if n == 24 {\n\
    \        return true\n    }\n    if x == 24 {\n        return true\n    }\n  \
    \  if n == 25 {\n        return true\n    }\n    if x == 25\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmptidc7_a7.swift:175:15: error: expected '{' after 'if' condition\n\
    \    if x == 25\n              ^\n"
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if x > n {\n        return false\n\
    \    }\n    if x < n {\n        return false\n    }\n    if x == 1 {\n       \
    \ return true\n    }\n    if n == 1 {\n        return true\n    }\n    if x ==\
    \ n {\n        return true\n    }\n    if x > n {\n        return false\n    }\n\
    \    if x < n {\n        return false\n    }\n    if x == 1 {\n        return\
    \ true\n    }\n    if n == 1 {\n        return true\n    }\n    if x == n {\n\
    \        return true\n    }\n    if x > n {\n        return false\n    }\n   \
    \ if x < n {\n        return false\n    }\n    if x == 1 {\n        return true\n\
    \    }\n    if n == 1 {\n        return true\n    }\n    if x == n {\n       \
    \ return true\n    }\n    if x > n {\n        return false\n    }\n    if x <\
    \ n {\n        return false\n    }\n    if x == 1 {\n        return true\n   \
    \ }\n    if n == 1 {\n        return true\n    }\n    if x == n {\n        return\
    \ true\n    }\n    if x > n {\n        return false\n    }\n    if x < n {\n \
    \       return false\n    }\n    if x == 1 {\n        return true\n    }\n   \
    \ if n == 1 {\n        return true\n    }\n    if x == n {\n        return true\n\
    \    }\n    if x > n {\n        return false\n    }\n    if x < n {\n        return\
    \ false\n    }\n    if x == 1 {\n        return true\n    }\n    if n == 1 {\n\
    \        return true\n    }\n    if x == n {\n        return true\n    }\n   \
    \ if x > n {\n        return false\n    }\n    if x < n {\n        return false\n\
    \    }\n    if x == 1 {\n        return true\n    }\n    if n == 1 {\n       \
    \ return true\n    }\n    if x == n {\n        return true\n    }\n    if x >\
    \ n {\n        return false\n    }\n    if x < n {\n        return false\n   \
    \ }\n    if x == 1 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ true\n    }\n    if x == n {\n        return true\n    }\n    if x > n {\n \
    \       return false\n    }\n    if x < n {\n        return false\n    }\n   \
    \ if x == 1 {\n        return true\n    }\n    if n == 1 {\n        return true\n\
    \    }\n    if x == n {\n        return true\n    }\n    if x > n {\n        return\
    \ false\n    }\n    if x < n {\n        return false\n    }\n    if x == 1 {\n\
    \        return true\n    }\n    if n == 1 {\n        return true\n    }\n   \
    \ if x == n {\n        return true\n    }\n    if x > n {\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp47rg72hr.swift:203:45: error: expected '}' at end of brace statement\n\
    assert(is_simple_power(x: 1, n: 12) == true)\n                               \
    \             ^\n/tmp/tmp47rg72hr.swift:18:46: note: to match this opening '{'\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n                             \
    \                ^\n/tmp/tmp47rg72hr.swift:182:6: error: operator functions can\
    \ only be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ n == 0 {\n        return false\n    }\n    if x == 0 {\n        return false\n\
    \    }\n    if x == 1 {\n        return true\n    }\n    if x == n {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return is_simple_power(x, n-1)\n\
    \    }\n    return is_simple_power(x, n/2)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpd44_j5nh.swift:38:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n/tmp/tmpd44_j5nh.swift:40:27: error:\
    \ missing argument labels 'x:n:' in call\n    return is_simple_power(x, n/2)\n\
    \                          ^\n                           x: n: \n"
  stdout: ''
  timestamp: 1659824560
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if x % n == 0 {\n        return true\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpkvpr0wav/tmpkvpr0wav.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8ba96dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8ba664b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8ba664988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8ba6637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkvpr0wav                        0x0000558a6469e4a7 <unavailable> + 5287

    5    libc.so.6                          0x00002ac8bab59460 __libc_start_main +
    245

    6    tmpkvpr0wav                        0x0000558a6469def9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if x < n {\n        return false\n\
    \    }\n    if x == n**x {\n        return true\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmps65h_cfv.swift:31:14: error: cannot find operator '**' in scope\n\
    \    if x == n**x {\n             ^~\n"
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if x > n {\n        return false\n\
    \    }\n    if x < n {\n        return false\n    }\n    if x == n*n*n {\n   \
    \     return true\n    }\n    if x == n*n*n + n*n*(n-1) + n*n*(n-2) + n*n*(n-3)\
    \ + n*n*(n-4) + n*n*(n-5) + n*n*(n-6) + n*n*(n-7) + n*n*(n-8) + n*n*(n-9) + n*n*(n-10)\
    \ + n*n*(n-11) + n*n*(n-12) + n*n*(n-13) + n*n*(n-14) + n*n*(n-15) + n*n*(n-16)\
    \ + n*n*(n-17) + n*n*(n-18) + n*n*(n-19) + n*n*(n-20) + n*n*(n-21) + n*n*(n-22)\
    \ + n*n*(n-23) + n*n*(n-24) + n*n*(n-25) + n*n*(n-26) + n*n*(n-27) + n*n*(n-28)\
    \ + n*n*(n-29) + n*n*(n-30) + n*n*(n-31) + n*n*(n-32) + n*n*(n-33) + n*n*(n-34)\
    \ + n*n*(n-35) + n*n*(n-36) + n*n*(n-37) + n*n*(n-38) + n*n*(n-39) + n*n*(n-40)\
    \ + n*n*(n-41) + n*n*(n-42) + n*n*(n-43) + n*n*(n-44) + n*n*(n-45) + n*n*(n-46)\
    \ + n*n*(n-47) + n*n*(n-48) + n*n*(n-49) + n*n*(n-50) + n*n*(n-51) + n*n*(n-52)\
    \ + n*n*(n-53) + n*n*(n-54) + n*n*(n-55) + n*n*(n-56) + n*n*(n-57) + n*n*(n-58)\
    \ + n*n*(n-59) + n*n*(n-60) + n*n*(n-61) + n*n*(n-62) + n*n*(n-63) + n*n*(n-64)\
    \ + n*n*(n-65) + n*n*(n-66) + n*n*(n-67) + n\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpgd3d_nfd.swift:37:884: error: expected '{' after 'if' condition\n\
    \    if x == n*n*n + n*n*(n-1) + n*n*(n-2) + n*n*(n-3) + n*n*(n-4) + n*n*(n-5)\
    \ + n*n*(n-6) + n*n*(n-7) + n*n*(n-8) + n*n*(n-9) + n*n*(n-10) + n*n*(n-11) +\
    \ n*n*(n-12) + n*n*(n-13) + n*n*(n-14) + n*n*(n-15) + n*n*(n-16) + n*n*(n-17)\
    \ + n*n*(n-18) + n*n*(n-19) + n*n*(n-20) + n*n*(n-21) + n*n*(n-22) + n*n*(n-23)\
    \ + n*n*(n-24) + n*n*(n-25) + n*n*(n-26) + n*n*(n-27) + n*n*(n-28) + n*n*(n-29)\
    \ + n*n*(n-30) + n*n*(n-31) + n*n*(n-32) + n*n*(n-33) + n*n*(n-34) + n*n*(n-35)\
    \ + n*n*(n-36) + n*n*(n-37) + n*n*(n-38) + n*n*(n-39) + n*n*(n-40) + n*n*(n-41)\
    \ + n*n*(n-42) + n*n*(n-43) + n*n*(n-44) + n*n*(n-45) + n*n*(n-46) + n*n*(n-47)\
    \ + n*n*(n-48) + n*n*(n-49) + n*n*(n-50) + n*n*(n-51) + n*n*(n-52) + n*n*(n-53)\
    \ + n*n*(n-54) + n*n*(n-55) + n*n*(n-56) + n*n*(n-57) + n*n*(n-58) + n*n*(n-59)\
    \ + n*n*(n-60) + n*n*(n-61) + n*n*(n-62) + n*n*(n-63) + n*n*(n-64) + n*n*(n-65)\
    \ + n*n*(n-66) + n*n*(n-67) + n\n                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \   ^\n"
  stdout: ''
  timestamp: 1659824561
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if n == 0 {\n        return false\n    }\n   \
    \ if x == 1 {\n        return true\n    }\n    if x == 0 {\n        return false\n\
    \    }\n    if x == n {\n        return true\n    }\n    if x % n == 0 {\n   \
    \     return is_simple_power(x / n, n)\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp9jdielsl.swift:35:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x / n, n)\n                           \
    \   ^\n                               x:     n: \n"
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return is_simple_power_impl(x,\
    \ n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_simple_power(x: 16, n: 2)\
    \ == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpzcc3hh6c.swift:19:12: error: cannot find 'is_simple_power_impl'\
    \ in scope\n    return is_simple_power_impl(x, n)\n           ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if x % n == 0 {\n        return true\n\
    \    }\n    if x % n == 1 {\n        return false\n    }\n    if x % n == 2 {\n\
    \        return is_simple_power(x, n-1)\n    }\n    if x % n == 3 {\n        return\
    \ is_simple_power(x, n-1)\n    }\n    if x % n == 4 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    if x % n == 5 {\n        return is_simple_power(x, n-1)\n \
    \   }\n    if x % n == 6 {\n        return is_simple_power(x, n-1)\n    }\n  \
    \  if x % n == 7 {\n        return is_simple_power(x, n-1)\n    }\n    if x %\
    \ n == 8 {\n        return is_simple_power(x, n-1)\n    }\n    if x % n == 9 {\n\
    \        return is_simple_power(x, n-1)\n    }\n    if x % n == 10 {\n       \
    \ return is_simple_power(x, n-1)\n    }\n    if x % n == 11 {\n        return\
    \ is_simple_power(x, n-1)\n    }\n    if x % n == 12 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    if x % n == 13 {\n        return is_simple_power(x, n-1)\n\
    \    }\n    if x % n == 14 {\n        return is_simple_power(x, n-1)\n    }\n\
    \    if x % n == 15 {\n        return is_simple_power(x, n-1)\n    }\n    if x\
    \ % n == 16 {\n        return is_simple_power(x, n-1)\n    }\n    if x % n ==\
    \ 17 {\n        return is_simple_power(x, n-1)\n    }\n    if x % n == 18 {\n\
    \        return is_simple_power(x, n-1)\n    }\n    if x % n == 19 {\n       \
    \ return is_simple_power(x, n-1)\n    }\n    if x % n == 20 {\n        return\
    \ is_simple_power(x, n-1)\n    }\n    if x % n == 21 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    if x % n == 22 {\n        return is_simple_power(x, n-1)\n\
    \    }\n    if x % n == 23 {\n        return is_simple_power(x, n-1)\n    }\n\
    \    if x % n == 24 {\n        return is_simple_power(x, n-1)\n    }\n    if x\
    \ % n == 25 {\n        return is_simple_power(x, n-1)\n    }\n    if x % n ==\
    \ 26 {\n        return is_simple_power(x, n-1)\n    }\n    if x % n == 27 {\n\
    \        return is_simple_power(x, n-1)\n    }\n    if x % n == 28 {\n       \
    \ return is_simple_power(x, n-1)\n    }\n    if x % n == 29 {\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpve7rk9tn.swift:140:45: error: expected '}' at end of brace statement\n\
    assert(is_simple_power(x: 1, n: 12) == true)\n                               \
    \             ^\n/tmp/tmpve7rk9tn.swift:18:46: note: to match this opening '{'\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n                             \
    \                ^\n/tmp/tmpve7rk9tn.swift:35:31: error: missing argument labels\
    \ 'x:n:' in call\n        return is_simple_power(x, n-1)\n                   \
    \           ^\n                               x: n: \n/tmp/tmpve7rk9tn.swift:38:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ n-1)\n                              ^\n                               x: n:\
    \ \n/tmp/tmpve7rk9tn.swift:41:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, n-1)\n                              ^\n   \
    \                            x: n: \n/tmp/tmpve7rk9tn.swift:44:31: error: missing\
    \ argument labels 'x:n:' in call\n        return is_simple_power(x, n-1)\n   \
    \                           ^\n                               x: n: \n/tmp/tmpve7rk9tn.swift:47:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ n-1)\n                              ^\n                               x: n:\
    \ \n/tmp/tmpve7rk9tn.swift:50:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, n-1)\n                              ^\n   \
    \                            x: n: \n/tmp/tmpve7rk9tn.swift:53:31: error: missing\
    \ argument labels 'x:n:' in call\n        return is_simple_power(x, n-1)\n   \
    \                           ^\n                               x: n: \n/tmp/tmpve7rk9tn.swift:56:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ n-1)\n                              ^\n                               x: n:\
    \ \n/tmp/tmpve7rk9tn.swift:59:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, n-1)\n                              ^\n   \
    \                            x: n: \n/tmp/tmpve7rk9tn.swift:62:31: error: missing\
    \ argument label"
  stdout: ''
  timestamp: 1659824560
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if x % n == 0 {\n        return true\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpkvpr0wav/tmpkvpr0wav.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8ba96dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8ba664b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8ba664988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8ba6637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkvpr0wav                        0x0000558a6469e4a7 <unavailable> + 5287

    5    libc.so.6                          0x00002ac8bab59460 __libc_start_main +
    245

    6    tmpkvpr0wav                        0x0000558a6469def9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824559
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if x % n == 0 {\n        return true\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpkvpr0wav/tmpkvpr0wav.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8ba96dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8ba664b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8ba664988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8ba6637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkvpr0wav                        0x0000558a6469e4a7 <unavailable> + 5287

    5    libc.so.6                          0x00002ac8bab59460 __libc_start_main +
    245

    6    tmpkvpr0wav                        0x0000558a6469def9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if n % x == 0 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmprb1xx1yn.swift:29:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if n % x == 0 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmprb1xx1yn.swift:29:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if n == 0 {\n        return false\n    }\n   \
    \ if x == 1 {\n        return true\n    }\n    if x == 0 {\n        return false\n\
    \    }\n    if x == n {\n        return true\n    }\n    if x % n == 0 {\n   \
    \     return is_simple_power(x / n, n)\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp9jdielsl.swift:35:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x / n, n)\n                           \
    \   ^\n                               x:     n: \n"
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if n == 0 {\n        return false\n    }\n   \
    \ if x == 1 {\n        return true\n    }\n    if x == 0 {\n        return false\n\
    \    }\n    if x == n {\n        return true\n    }\n    if x > n {\n        return\
    \ false\n    }\n    if x < n {\n        return false\n    }\n    if x == n+1 {\n\
    \        return true\n    }\n    if x == n-1 {\n        return true\n    }\n \
    \   if x == n+2 {\n        return true\n    }\n    if x == n-2 {\n        return\
    \ true\n    }\n    if x == n+3 {\n        return true\n    }\n    if x == n-3\
    \ {\n        return true\n    }\n    if x == n+4 {\n        return true\n    }\n\
    \    if x == n-4 {\n        return true\n    }\n    if x == n+5 {\n        return\
    \ true\n    }\n    if x == n-5 {\n        return true\n    }\n    if x == n+6\
    \ {\n        return true\n    }\n    if x == n-6 {\n        return true\n    }\n\
    \    if x == n+7 {\n        return true\n    }\n    if x == n-7 {\n        return\
    \ true\n    }\n    if x == n-8 {\n        return true\n    }\n    if x == n-9\
    \ {\n        return true\n    }\n    if x == n-10 {\n        return true\n   \
    \ }\n    if x == n-11 {\n        return true\n    }\n    if x == n-12 {\n    \
    \    return true\n    }\n    if x == n-13 {\n        return true\n    }\n    if\
    \ x == n-14 {\n        return true\n    }\n    if x == n-15 {\n        return\
    \ true\n    }\n    if x == n-16 {\n        return true\n    }\n    if x == n-17\
    \ {\n        return true\n    }\n    if x == n-18 {\n        return true\n   \
    \ }\n    if x == n-19 {\n        return true\n    }\n    if x == n-20 {\n    \
    \    return true\n    }\n    if x == n-21 {\n        return true\n    }\n    if\
    \ x == n-22 {\n        return true\n    }\n    if x == n-23 {\n        return\
    \ true\n    }\n    if x == n-24 {\n        return true\n    }\n    if x == n-25\
    \ {\n        return true\n    }\n    if x == n-26 {\n        return true\n   \
    \ }\n    if x == n-27 {\n        return true\n    }\n    if x == n-28 {\n    \
    \    return true\n    }\n    if x == n-29 {\n        return true\n    }\n    if\
    \ x == n-30 {\n        return true\n    }\n    if x == n-31 {\n        return\
    \ true\n    }\n    if x == n-32 {\n        return true\n    }\n    if x == n-33\
    \ {\n        return true\n    }\n    if x == n-34 {\n        return \n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpemzo5rcf.swift:186:45: error: expected '}' at end of brace statement\n\
    assert(is_simple_power(x: 1, n: 12) == true)\n                               \
    \             ^\n/tmp/tmpemzo5rcf.swift:18:46: note: to match this opening '{'\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n                             \
    \                ^\n/tmp/tmpemzo5rcf.swift:161:9: error: non-void function should\
    \ return a value\n        return \n        ^\n/tmp/tmpemzo5rcf.swift:165:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if n == 0 {\n        return false\n    }\n   \
    \ if x == 1 {\n        return true\n    }\n    if x == 0 {\n        return false\n\
    \    }\n    if x == n {\n        return true\n    }\n    if n % 2 == 0 {\n   \
    \     return is_simple_power(x, n/2)\n    }\n    return is_simple_power(x, n/2)\
    \ * is_simple_power(x, n-1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp8n6ixh_h.swift:35:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n/2)\n                             \
    \ ^\n                               x: n: \n/tmp/tmp8n6ixh_h.swift:37:27: error:\
    \ missing argument labels 'x:n:' in call\n    return is_simple_power(x, n/2) *\
    \ is_simple_power(x, n-1)\n                          ^\n                     \
    \      x: n: \n/tmp/tmp8n6ixh_h.swift:37:36: error: binary operator '*' cannot\
    \ be applied to two 'Bool' operands\n    return is_simple_power(x, n/2) * is_simple_power(x,\
    \ n-1)\n                                   ^\nSwift.FloatingPoint:1:17: note:\
    \ candidate requires that 'Bool' conform to 'FloatingPoint' (requirement specified\
    \ as 'Self' : 'FloatingPoint')\npublic protocol FloatingPoint : Hashable, SignedNumeric,\
    \ Strideable where Self == Self.Magnitude {\n                ^\n/tmp/tmp8n6ixh_h.swift:37:53:\
    \ error: missing argument labels 'x:n:' in call\n    return is_simple_power(x,\
    \ n/2) * is_simple_power(x, n-1)\n                                           \
    \         ^\n                                                     x: n: \n"
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if n % x == 0 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmprb1xx1yn.swift:29:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if n == 0 {\n        return false\n    }\n   \
    \ if x == 1 {\n        return true\n    }\n    if x == 0 {\n        return false\n\
    \    }\n    if x == n {\n        return true\n    }\n    if x > n {\n        return\
    \ false\n    }\n    if x < n {\n        return false\n    }\n    return is_simple_power(x,\
    \ n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp9u1mi14d.swift:40:27: error: missing argument labels 'x:n:' in\
    \ call\n    return is_simple_power(x, n - 1)\n                          ^\n  \
    \                         x: n: \n"
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if n == 0 {\n        return false\n    }\n   \
    \ if x == 1 {\n        return true\n    }\n    if x == 0 {\n        return false\n\
    \    }\n    if x == n {\n        return true\n    }\n    if x % n == 0 {\n   \
    \     return true\n    }\n    if x % n == 1 {\n        return false\n    }\n \
    \   return is_simple_power(x, n-1)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x: 143214,\
    \ n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmphuuvas9i.swift:40:27: error: missing argument labels 'x:n:' in\
    \ call\n    return is_simple_power(x, n-1)\n                          ^\n    \
    \                       x: n: \n"
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if n % x == 0 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmprb1xx1yn.swift:29:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if n == 0 {\n        return false\n    }\n   \
    \ if x == 1 {\n        return true\n    }\n    if x == 0 {\n        return false\n\
    \    }\n    if x == n {\n        return true\n    }\n    if x % n == 0 {\n   \
    \     return is_simple_power(x, n-1)\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp1aksy0ki.swift:35:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if n % 2 == 0 {\n        return is_simple_power(x,\
    \ n/2)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp83l3oc1t.swift:29:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n/2)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if n % x == 0 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmprb1xx1yn.swift:29:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824559
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if n == 0 {\n        return false\n    }\n   \
    \ if x == 1 {\n        return true\n    }\n    if x == 0 {\n        return false\n\
    \    }\n    if x == n {\n        return true\n    }\n    if x % n == 0 {\n   \
    \     return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpqaotrr_c/tmpqaotrr_c.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b422a02ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4229d25b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4229d25988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4229d247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqaotrr_c                        0x0000558c857834a7 <unavailable> + 5287

    5    libc.so.6                          0x00002b422a21a460 __libc_start_main +
    245

    6    tmpqaotrr_c                        0x0000558c85782ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if n % x == 0 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmprb1xx1yn.swift:29:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if n % x == 0 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmprb1xx1yn.swift:29:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if n == 0 {\n        return false\n    }\n   \
    \ if x == 1 {\n        return true\n    }\n    if x == 0 {\n        return false\n\
    \    }\n    if x == n {\n        return true\n    }\n    if x % n == 0 {\n   \
    \     return is_simple_power(x / n, n: n)\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp6t6fao66.swift:35:31: error: missing argument label 'x:' in call\n\
    \        return is_simple_power(x / n, n: n)\n                              ^\n\
    \                               x: \n"
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return true\n    }\n    if\
    \ n == 2 {\n        return is_simple_power(x, n: 2)\n    }\n    if n == 3 {\n\
    \        return is_simple_power(x, n: 4)\n    }\n    if n == 4 {\n        return\
    \ is_simple_power(x, n: 8)\n    }\n    if n == 8 {\n        return is_simple_power(x,\
    \ n: 16)\n    }\n    if n == 9 {\n        return is_simple_power(x, n: 32)\n \
    \   }\n    if n == 10 {\n        return is_simple_power(x, n: 64)\n    }\n   \
    \ if n == 11 {\n        return is_simple_power(x, n: 128)\n    }\n    if n ==\
    \ 12 {\n        return is_simple_power(x, n: 256)\n    }\n    if n == 13 {\n \
    \       return is_simple_power(x, n: 512)\n    }\n    if n == 14 {\n        return\
    \ is_simple_power(x, n: 1024)\n    }\n    if n == 15 {\n        return is_simple_power(x,\
    \ n: 2048)\n    }\n    if n == 16 {\n        return is_simple_power(x, n: 4096)\n\
    \    }\n    if n == 17 {\n        return is_simple_power(x, n: 8192)\n    }\n\
    \    if n == 18 {\n        return is_simple_power(x, n: 16384)\n    }\n    if\
    \ n == 19 {\n        return is_simple_power(x, n: 32768)\n    }\n    if n == 20\
    \ {\n        return is_simple_power(x, n: 65536)\n    }\n    if n == 21 {\n  \
    \      return is_simple_power(x, n: 131072)\n    }\n    if n == 22 {\n       \
    \ return is_simple_power(x, n: 262144)\n    }\n    if n == 23 {\n        return\
    \ is_simple_power(x, n: 524288)\n    }\n    if n == 24 {\n        return is_simple_power(x,\
    \ n: 1048576)\n    }\n    if n == 25 {\n        return is_simple_power(x, n: 2097152)\n\
    \    }\n    if n == 26 {\n        return is_simple_power(x, n: 4194304)\n    }\n\
    \    if n == 27 {\n        return is_simple_power(x, n: 8388608)\n    }\n    if\
    \ n == 28 {\n        return is_simple_power(x, n: 16777216)\n    }\n    if n ==\
    \ 29 {\n        return is_simple_power(x, n: 33554432)\n    }\n    if n == 30\
    \ {\n        return is_simple_power(x, n: 67108864)\n    }\n    if n == 31 {\n\
    \        return is_simple_power(x, n: 134217728)\n    }\n    if n == 32 {\n  \
    \      return is_simple_power(x, n: 268435456)\n    }\n    if n == 33 {\n    \
    \    return is_simple_power(x, n: 536870912)\n    }\n    if n == 34 {\n      \
    \  return is_simple_power(x, n: 10737418\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x: 143214,\
    \ n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp3je6u0nj.swift:114:1: error: expected ')' in expression list\n\
    }\n^\n/tmp/tmp3je6u0nj.swift:113:31: note: to match this opening '('\n       \
    \ return is_simple_power(x, n: 10737418\n                              ^\n/tmp/tmp3je6u0nj.swift:138:45:\
    \ error: expected '}' at end of brace statement\nassert(is_simple_power(x: 1,\
    \ n: 12) == true)\n                                            ^\n/tmp/tmp3je6u0nj.swift:18:46:\
    \ note: to match this opening '{'\nfunc is_simple_power(x: Int, n: Int) -> Bool\
    \ {\n                                             ^\n/tmp/tmp3je6u0nj.swift:26:31:\
    \ error: missing argument label 'x:' in call\n        return is_simple_power(x,\
    \ n: 2)\n                              ^\n                               x: \n\
    /tmp/tmp3je6u0nj.swift:29:31: error: missing argument label 'x:' in call\n   \
    \     return is_simple_power(x, n: 4)\n                              ^\n     \
    \                          x: \n/tmp/tmp3je6u0nj.swift:32:31: error: missing argument\
    \ label 'x:' in call\n        return is_simple_power(x, n: 8)\n              \
    \                ^\n                               x: \n/tmp/tmp3je6u0nj.swift:35:31:\
    \ error: missing argument label 'x:' in call\n        return is_simple_power(x,\
    \ n: 16)\n                              ^\n                               x: \n\
    /tmp/tmp3je6u0nj.swift:38:31: error: missing argument label 'x:' in call\n   \
    \     return is_simple_power(x, n: 32)\n                              ^\n    \
    \                           x: \n/tmp/tmp3je6u0nj.swift:41:31: error: missing\
    \ argument label 'x:' in call\n        return is_simple_power(x, n: 64)\n    \
    \                          ^\n                               x: \n/tmp/tmp3je6u0nj.swift:44:31:\
    \ error: missing argument label 'x:' in call\n        return is_simple_power(x,\
    \ n: 128)\n                              ^\n                               x:\
    \ \n/tmp/tmp3je6u0nj.swift:47:31: error: missing argument label 'x:' in call\n\
    \        return is_simple_power(x, n: 256)\n                              ^\n\
    \                               x: \n/tmp/tmp3je6u0nj.swift:50:31: error: missing\
    \ argument label 'x:"
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ n == 0 {\n        return false\n    }\n    if x == 0 {\n        return false\n\
    \    }\n    if x == n {\n        return true\n    }\n    if n % 2 == 0 {\n   \
    \     return is_simple_power(x, n-1)\n    }\n    return is_simple_power(x, n/2)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpppf21ndn.swift:35:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n/tmp/tmpppf21ndn.swift:37:27: error:\
    \ missing argument labels 'x:n:' in call\n    return is_simple_power(x, n/2)\n\
    \                          ^\n                           x: n: \n"
  stdout: ''
  timestamp: 1659824560
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if x % n == 0 {\n        return true\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpkvpr0wav/tmpkvpr0wav.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8ba96dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8ba664b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8ba664988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8ba6637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkvpr0wav                        0x0000558a6469e4a7 <unavailable> + 5287

    5    libc.so.6                          0x00002ac8bab59460 __libc_start_main +
    245

    6    tmpkvpr0wav                        0x0000558a6469def9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return is_power_of_two(x)\
    \ && is_power_of_two(n) && is_power_of_two(n*n)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpml3iqds9.swift:19:12: error: cannot find 'is_power_of_two' in scope\n\
    \    return is_power_of_two(x) && is_power_of_two(n) && is_power_of_two(n*n)\n\
    \           ^~~~~~~~~~~~~~~\n/tmp/tmpml3iqds9.swift:19:34: error: cannot find\
    \ 'is_power_of_two' in scope\n    return is_power_of_two(x) && is_power_of_two(n)\
    \ && is_power_of_two(n*n)\n                                 ^~~~~~~~~~~~~~~\n\
    /tmp/tmpml3iqds9.swift:19:56: error: cannot find 'is_power_of_two' in scope\n\
    \    return is_power_of_two(x) && is_power_of_two(n) && is_power_of_two(n*n)\n\
    \                                                       ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if n % x == 0 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmprb1xx1yn.swift:29:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if n == 0 {\n        return false\n    }\n   \
    \ if x == 1 {\n        return true\n    }\n    if x == 0 {\n        return false\n\
    \    }\n    if x == n {\n        return true\n    }\n    if x == n-1 {\n     \
    \   return false\n    }\n    if x == n+1 {\n        return true\n    }\n    if\
    \ x == n+2 {\n        return false\n    }\n    if x == n+3 {\n        return true\n\
    \    }\n    if x == n+4 {\n        return false\n    }\n    if x == n+5 {\n  \
    \      return true\n    }\n    if x == n+6 {\n        return false\n    }\n  \
    \  if x == n+7 {\n        return true\n    }\n    if x == n+8 {\n        return\
    \ false\n    }\n    if x == n+9 {\n        return true\n    }\n    if x == n+10\
    \ {\n        return false\n    }\n    if x == n+11 {\n        return true\n  \
    \  }\n    if x == n+12 {\n        return false\n    }\n    if x == n+13 {\n  \
    \      return true\n    }\n    if x == n+14 {\n        return false\n    }\n \
    \   if x == n+15 {\n        return true\n    }\n    if x == n+16 {\n        return\
    \ false\n    }\n    if x == n+17 {\n        return true\n    }\n    if x == n+18\
    \ {\n        return false\n    }\n    if x == n+19 {\n        return true\n  \
    \  }\n    if x == n+20 {\n        return false\n    }\n    if x == n+21 {\n  \
    \      return true\n    }\n    if x == n+22 {\n        return false\n    }\n \
    \   if x == n+23 {\n        return true\n    }\n    if x == n+24 {\n        return\
    \ false\n    }\n    if x == n+25 {\n        return true\n    }\n    if x == n+26\
    \ {\n        return false\n    }\n    if x == n+27 {\n        return true\n  \
    \  }\n    if x == n+28 {\n        return false\n    }\n    if x == n+29 {\n  \
    \      return true\n    }\n    if x == n+30 {\n        return false\n    }\n \
    \   if x == n+31 {\n        return true\n    }\n    if x == n+32 {\n        return\
    \ false\n    }\n    if x == n+33 {\n        return true\n    }\n    if x == n+34\
    \ {\n        return false\n    }\n    if x == n+35 {\n        return true\n  \
    \  }\n    if x == n+36 {\n        return false\n    }\n    if x == n+37 {\n  \
    \      return true\n    }\n    if x == n+38 {\n        return false\n    }\n \
    \   if x == n+\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpqsbw5ec8.swift:151:15: error: expected '{' after 'if' condition\n\
    \    if x == n+\n              ^\n/tmp/tmpqsbw5ec8.swift:151:14: error: '+' is\
    \ not a postfix unary operator\n    if x == n+\n             ^\n"
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if x % n == 0 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpql79bezd.swift:29:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if x > n {\n        return false\n\
    \    }\n    if x % n == 0 {\n        return is_simple_power(x, n-1)\n    }\n \
    \   return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpjzcc88kd.swift:32:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824560
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if n == 0 {\n        return false\n    }\n   \
    \ if x == 1 {\n        return true\n    }\n    if x == 0 {\n        return false\n\
    \    }\n    if x == n {\n        return true\n    }\n    if x % n == 0 {\n   \
    \     return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpqaotrr_c/tmpqaotrr_c.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b422a02ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4229d25b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4229d25988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4229d247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqaotrr_c                        0x0000558c857834a7 <unavailable> + 5287

    5    libc.so.6                          0x00002b422a21a460 __libc_start_main +
    245

    6    tmpqaotrr_c                        0x0000558c85782ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if n == 0 {\n        return false\n    }\n   \
    \ if x == 1 {\n        return true\n    }\n    if x == 0 {\n        return false\n\
    \    }\n    if x % n == 0 {\n        return true\n    }\n    return is_simple_power(x,\
    \ n-1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpnopvgddi.swift:34:27: error: missing argument labels 'x:n:' in\
    \ call\n    return is_simple_power(x, n-1)\n                          ^\n    \
    \                       x: n: \n"
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ n == 0 {\n        return false\n    }\n    if x == 0 {\n        return false\n\
    \    }\n    if n <= 0 {\n        return false\n    }\n    if x == 1 {\n      \
    \  return true\n    }\n    if x == 2 {\n        return true\n    }\n    if x ==\
    \ 3 {\n        return true\n    }\n    if x == 4 {\n        return true\n    }\n\
    \    if x == 5 {\n        return true\n    }\n    if x == 6 {\n        return\
    \ true\n    }\n    if x == 7 {\n        return true\n    }\n    if x == 8 {\n\
    \        return true\n    }\n    if x == 9 {\n        return true\n    }\n   \
    \ if x == 10 {\n        return true\n    }\n    if x == 11 {\n        return true\n\
    \    }\n    if x == 12 {\n        return true\n    }\n    if x == 13 {\n     \
    \   return true\n    }\n    if x == 14 {\n        return true\n    }\n    if x\
    \ == 15 {\n        return true\n    }\n    if x == 16 {\n        return true\n\
    \    }\n    if x == 17 {\n        return true\n    }\n    if x == 18 {\n     \
    \   return true\n    }\n    if x == 19 {\n        return true\n    }\n    if x\
    \ == 20 {\n        return true\n    }\n    if x == 21 {\n        return true\n\
    \    }\n    if x == 22 {\n        return true\n    }\n    if x == 23 {\n     \
    \   return true\n    }\n    if x == 24 {\n        return true\n    }\n    if x\
    \ == 25 {\n        return true\n    }\n    if x == 26 {\n        return true\n\
    \    }\n    if x == 27 {\n        return true\n    }\n    if x == 28 {\n     \
    \   return true\n    }\n    if x == 29 {\n        return true\n    }\n    if x\
    \ == 30 {\n        return true\n    }\n    if x == 31 {\n        return true\n\
    \    }\n    if x == 32 {\n        return true\n    }\n    if x == 33 {\n     \
    \   return true\n    }\n    if x == 34 {\n        return true\n    }\n    if x\
    \ == 35 {\n        return true\n    }\n    if x == 36 {\n        return true\n\
    \    }\n    if x == 37 {\n        return true\n    }\n    if x == 38 {\n     \
    \   return true\n    }\n    if x == 39 {\n        return true\n    }\n    if x\
    \ == 40 == {\n        return true\n    }\n    if x == 41 {\n        return true\n\
    \    }\n    if x == 42 {\n        return true\n    }\n    if x == 43 {\n     \
    \   return true\n    }\n    if x == 44 {\n        return true\n    }\n    if x\
    \ == 45 {\n        return true\n    }\n    if x == 46 {\n        return true\n\
    \    }\n    if x == 47 {\n        return true\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_wwt55qv.swift:153:6: error: expected '{' after 'if' condition\n\
    \    }\n     ^\n/tmp/tmp_wwt55qv.swift:151:10: error: adjacent operators are in\
    \ non-associative precedence group 'ComparisonPrecedence'\n    if x == 40 == {\n\
    \         ^     ~~\n/tmp/tmp_wwt55qv.swift:151:19: error: function produces expected\
    \ type 'Bool'; did you mean to call it with '()'?\n    if x == 40 == {\n     \
    \             ^\n"
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return is_power_of_two(x)\
    \ && is_power_of_two(n) && is_power_of_two(n*n)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpml3iqds9.swift:19:12: error: cannot find 'is_power_of_two' in scope\n\
    \    return is_power_of_two(x) && is_power_of_two(n) && is_power_of_two(n*n)\n\
    \           ^~~~~~~~~~~~~~~\n/tmp/tmpml3iqds9.swift:19:34: error: cannot find\
    \ 'is_power_of_two' in scope\n    return is_power_of_two(x) && is_power_of_two(n)\
    \ && is_power_of_two(n*n)\n                                 ^~~~~~~~~~~~~~~\n\
    /tmp/tmpml3iqds9.swift:19:56: error: cannot find 'is_power_of_two' in scope\n\
    \    return is_power_of_two(x) && is_power_of_two(n) && is_power_of_two(n*n)\n\
    \                                                       ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if n == 0 {\n        return false\n    }\n   \
    \ if x == 1 {\n        return true\n    }\n    if x == 0 {\n        return false\n\
    \    }\n    if x == n {\n        return true\n    }\n    if x % n == 0 {\n   \
    \     return is_simple_power(x / n, n)\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp9jdielsl.swift:35:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x / n, n)\n                           \
    \   ^\n                               x:     n: \n"
  stdout: ''
  timestamp: 1659824559
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if x % n == 0 {\n        return true\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpkvpr0wav/tmpkvpr0wav.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8ba96dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8ba664b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8ba664988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8ba6637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkvpr0wav                        0x0000558a6469e4a7 <unavailable> + 5287

    5    libc.so.6                          0x00002ac8bab59460 __libc_start_main +
    245

    6    tmpkvpr0wav                        0x0000558a6469def9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824559
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if x % n == 0 {\n        return true\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpkvpr0wav/tmpkvpr0wav.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8ba96dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8ba664b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8ba664988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8ba6637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkvpr0wav                        0x0000558a6469e4a7 <unavailable> + 5287

    5    libc.so.6                          0x00002ac8bab59460 __libc_start_main +
    245

    6    tmpkvpr0wav                        0x0000558a6469def9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if n == 0 {\n        return false\n    }\n   \
    \ if x == 1 {\n        return true\n    }\n    if x == 0 {\n        return false\n\
    \    }\n    if x == n {\n        return true\n    }\n    if x % n == 0 {\n   \
    \     return is_simple_power(x / n, n)\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp9jdielsl.swift:35:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x / n, n)\n                           \
    \   ^\n                               x:     n: \n"
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if n == 0 {\n        return false\n    }\n   \
    \ if x == 1 {\n        return true\n    }\n    if x == 0 {\n        return false\n\
    \    }\n    if x == n {\n        return true\n    }\n    if x % n == 0 {\n   \
    \     return is_simple_power(x / n, n)\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp9jdielsl.swift:35:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x / n, n)\n                           \
    \   ^\n                               x:     n: \n"
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if n % x == 0 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmprb1xx1yn.swift:29:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if n % x == 0 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmprb1xx1yn.swift:29:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if n % x == 0 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmprb1xx1yn.swift:29:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824559
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if x % n == 0 {\n        return true\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpkvpr0wav/tmpkvpr0wav.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8ba96dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8ba664b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8ba664988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8ba6637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkvpr0wav                        0x0000558a6469e4a7 <unavailable> + 5287

    5    libc.so.6                          0x00002ac8bab59460 __libc_start_main +
    245

    6    tmpkvpr0wav                        0x0000558a6469def9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ n == 0 {\n        return false\n    }\n    if x == 0 {\n        return false\n\
    \    }\n    if x == 1 {\n        return true\n    }\n    if n == 2 {\n       \
    \ return true\n    }\n    if x == 2 {\n        return true\n    }\n    if n ==\
    \ 3 {\n        return true\n    }\n    if x == 3 {\n        return true\n    }\n\
    \    if n == 4 {\n        return true\n    }\n    if x == 4 {\n        return\
    \ true\n    }\n    if n == 5 {\n        return true\n    }\n    if x == 5 {\n\
    \        return true\n    }\n    if n == 6 {\n        return true\n    }\n   \
    \ if x == 6 {\n        return true\n    }\n    if n == 7 {\n        return true\n\
    \    }\n    if x == 7 {\n        return true\n    }\n    if n == 8 {\n       \
    \ return true\n    }\n    if x == 8 {\n        return true\n    }\n    if n ==\
    \ 9 {\n        return true\n    }\n    if x == 9 {\n        return true\n    }\n\
    \    if n == 10 {\n        return true\n    }\n    if x == 10 {\n        return\
    \ true\n    }\n    if n == 11 {\n        return true\n    }\n    if x == 11 {\n\
    \        return true\n    }\n    if n == 12 {\n        return true\n    }\n  \
    \  if x == 12 {\n        return true\n    }\n    if n == 13 {\n        return\
    \ true\n    }\n    if x == 13 {\n        return true\n    }\n    if n == 14 {\n\
    \        return true\n    }\n    if x == 14 {\n        return true\n    }\n  \
    \  if n == 15 {\n        return true\n    }\n    if x == 15 {\n        return\
    \ true\n    }\n    if n == 16 {\n        return true\n    }\n    if x == 16 {\n\
    \        return true\n    }\n    if n == 17 {\n        return true\n    }\n  \
    \  if x == 17 {\n        return true\n    }\n    if n == 18 {\n        return\
    \ true\n    }\n    if x == 18 {\n        return true\n    }\n    if n == 19 {\n\
    \        return true\n    }\n    if x == 19 {\n        return true\n    }\n  \
    \  if n == 20 {\n        return true\n    }\n    if x == 20 {\n        return\
    \ true\n    }\n    if n == 21 {\n        return true\n    }\n    if x == 21 {\n\
    \        return true\n    }\n    if n == 22 {\n        return true\n    }\n  \
    \  if x == 22 {\n        return true\n    }\n    if n == 23 {\n        return\
    \ true\n    }\n    if x == 23 {\n        return true\n    }\n    if n == 24 {\n\
    \        return true\n    }\n    if x == 24 {\n        return true\n    }\n  \
    \  if n == 25 {\n        return true\n    }\n    if x == 25\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmptidc7_a7.swift:175:15: error: expected '{' after 'if' condition\n\
    \    if x == 25\n              ^\n"
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return true\n    }\n    if\
    \ n == 2 {\n        return is_simple_power(x, n-1)\n    }\n    if n == 3 {\n \
    \       return is_simple_power(x, n-2) || is_simple_power(x, n-1)\n    }\n   \
    \ if n == 4 {\n        return is_simple_power(x, n-3) || is_simple_power(x, n-2)\n\
    \    }\n    if n == 5 {\n        return is_simple_power(x, n-4) || is_simple_power(x,\
    \ n-3)\n    }\n    if n == 6 {\n        return is_simple_power(x, n-5) || is_simple_power(x,\
    \ n-4)\n    }\n    if n == 7 {\n        return is_simple_power(x, n-6) || is_simple_power(x,\
    \ n-5)\n    }\n    if n == 8 {\n        return is_simple_power(x, n-7) || is_simple_power(x,\
    \ n-6)\n    }\n    if n == 9 {\n        return is_simple_power(x, n-8) || is_simple_power(x,\
    \ n-7)\n    }\n    if n == 10 {\n        return is_simple_power(x, n-9) || is_simple_power(x,\
    \ n-8)\n    }\n    if n == 11 {\n        return is_simple_power(x, n-10) || is_simple_power(x,\
    \ n-9)\n    }\n    if n == 12 {\n        return is_simple_power(x, n-11) || is_simple_power(x,\
    \ n-10)\n    }\n    if n == 13 {\n        return is_simple_power(x, n-12) || is_simple_power(x,\
    \ n-11)\n    }\n    if n == 14 {\n        return is_simple_power(x, n-13) || is_simple_power(x,\
    \ n-12)\n    }\n    if n == 15 {\n        return is_simple_power(x, n-14) || is_simple_power(x,\
    \ n-13)\n    }\n    if n == 16 {\n        return is_simple_power(x, n-15) || is_simple_power(x,\
    \ n-14)\n    }\n    if n == 17 {\n        return is_simple_power(x, n-16) || is_simple_power(x,\
    \ n-15)\n    }\n    if n == 18 {\n        return is_simple_power(x, n-17) || is_simple_power(x,\
    \ n-16)\n    }\n    if n == 19 {\n        return is_simple_power(x, n-18) || is_simple_power(x,\
    \ n-17)\n    }\n    if n == 20 {\n        return is_simple_power(x, n-19) || is_simple_power(x,\
    \ n-18)\n    }\n    if n == 21 {\n        return is_simple_power(x, n-20) || is_simple_power(x,\
    \ n-19)\n    }\n    if n == 22 {\n        return is_simple_power(x, n-21) || is_simple_power(x,\
    \ n-20)\n    }\n    if n == 23 {\n        return is_simple_power(x, n-22) || is_simple_power(x,\
    \ n-21)\n    }\n    if n == 24 {\n        return is_simple_power(x, n-23) || is_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpf2mny8bm.swift:117:45: error: expected '}' at end of brace statement\n\
    assert(is_simple_power(x: 1, n: 12) == true)\n                               \
    \             ^\n/tmp/tmpf2mny8bm.swift:18:46: note: to match this opening '{'\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n                             \
    \                ^\n/tmp/tmpf2mny8bm.swift:26:31: error: missing argument labels\
    \ 'x:n:' in call\n        return is_simple_power(x, n-1)\n                   \
    \           ^\n                               x: n: \n/tmp/tmpf2mny8bm.swift:29:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ n-2) || is_simple_power(x, n-1)\n                              ^\n         \
    \                      x: n: \n/tmp/tmpf2mny8bm.swift:29:58: error: missing argument\
    \ labels 'x:n:' in call\n        return is_simple_power(x, n-2) || is_simple_power(x,\
    \ n-1)\n                                                         ^\n         \
    \                                                 x: n: \n/tmp/tmpf2mny8bm.swift:32:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ n-3) || is_simple_power(x, n-2)\n                              ^\n         \
    \                      x: n: \n/tmp/tmpf2mny8bm.swift:32:58: error: missing argument\
    \ labels 'x:n:' in call\n        return is_simple_power(x, n-3) || is_simple_power(x,\
    \ n-2)\n                                                         ^\n         \
    \                                                 x: n: \n/tmp/tmpf2mny8bm.swift:35:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ n-4) || is_simple_power(x, n-3)\n                              ^\n         \
    \                      x: n: \n/tmp/tmpf2mny8bm.swift:35:58: error: missing argument\
    \ labels 'x:n:' in call\n        return is_simple_power(x, n-4) || is_simple_power(x,\
    \ n-3)\n                                                         ^\n         \
    \                                                 x: n: \n/tmp/tmpf2mny8bm.swift:38:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_powe"
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if n == 0 {\n        return false\n    }\n   \
    \ if x == 1 {\n        return true\n    }\n    if x == 0 {\n        return false\n\
    \    }\n    if x == n {\n        return true\n    }\n    if x % n == 0 {\n   \
    \     return is_simple_power(x / n, n)\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp9jdielsl.swift:35:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x / n, n)\n                           \
    \   ^\n                               x:     n: \n"
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if n % x == 0 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmprb1xx1yn.swift:29:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if n == 0 {\n        return false\n    }\n   \
    \ if x == 0 {\n        return false\n    }\n    if x == 1 {\n        return true\n\
    \    }\n    if x == n {\n        return true\n    }\n    if x % n == 0 {\n   \
    \     return true\n    }\n    if x % n != 0 {\n        return false\n    }\n \
    \   return is_simple_power(x / n, n: n)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x: 143214,\
    \ n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp1fbm2rod.swift:40:27: error: missing argument label 'x:' in call\n\
    \    return is_simple_power(x / n, n: n)\n                          ^\n      \
    \                     x: \n"
  stdout: ''
  timestamp: 1659824560
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if x % n == 0 {\n        return true\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpkvpr0wav/tmpkvpr0wav.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8ba96dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8ba664b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8ba664988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8ba6637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkvpr0wav                        0x0000558a6469e4a7 <unavailable> + 5287

    5    libc.so.6                          0x00002ac8bab59460 __libc_start_main +
    245

    6    tmpkvpr0wav                        0x0000558a6469def9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return is_power_of_two(x)\
    \ && is_power_of_two(n) && is_power_of_two(n*x)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpwaajftqe.swift:19:12: error: cannot find 'is_power_of_two' in scope\n\
    \    return is_power_of_two(x) && is_power_of_two(n) && is_power_of_two(n*x)\n\
    \           ^~~~~~~~~~~~~~~\n/tmp/tmpwaajftqe.swift:19:34: error: cannot find\
    \ 'is_power_of_two' in scope\n    return is_power_of_two(x) && is_power_of_two(n)\
    \ && is_power_of_two(n*x)\n                                 ^~~~~~~~~~~~~~~\n\
    /tmp/tmpwaajftqe.swift:19:56: error: cannot find 'is_power_of_two' in scope\n\
    \    return is_power_of_two(x) && is_power_of_two(n) && is_power_of_two(n*x)\n\
    \                                                       ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if x < n {\n        return false\n\
    \    }\n    if x == n*n {\n        return true\n    }\n    if x == n*n - 1 {\n\
    \        return true\n    }\n    if x == n*n - 2 {\n        return true\n    }\n\
    \    if x == n*n - 3 {\n        return true\n    }\n    if x == n*n - 4 {\n  \
    \      return true\n    }\n    if x == n*n - 5 {\n        return true\n    }\n\
    \    if x == n*n - 6 {\n        return true\n    }\n    if x == n*n - 7 {\n  \
    \      return true\n    }\n    if x == n*n - 8 {\n        return true\n    }\n\
    \    if x == n*n - 9 {\n        return true\n    }\n    if x == n*n - 10 {\n \
    \       return true\n    }\n    if x == n*n - 11 {\n        return true\n    }\n\
    \    if x == n*n - 12 {\n        return true\n    }\n    if x == n*n - 13 {\n\
    \        return true\n    }\n    if x == n*n - 14 {\n        return true\n   \
    \ }\n    if x == n*n - 15 {\n        return true\n    }\n    if x == n*n - 16\
    \ {\n        return true\n    }\n    if x == n*n - 17 {\n        return true\n\
    \    }\n    if x == n*n - 18 {\n        return true\n    }\n    if x == n*n -\
    \ 19 {\n        return true\n    }\n    if x == n*n - 20 {\n        return true\n\
    \    }\n    if x == n*n - 21 {\n        return true\n    }\n    if x == n*n -\
    \ 22 {\n        return true\n    }\n    if x == n*n - 23 {\n        return true\n\
    \    }\n    if x == n*n - 24 {\n        return true\n    }\n    if x == n*n -\
    \ 25 {\n        return true\n    }\n    if x == n*n - 26 {\n        return true\n\
    \    }\n    if x == n*n - 27 {\n        return true\n    }\n    if x == n*n -\
    \ 28 {\n        return true\n    }\n    if x == n*n - 29 {\n        return true\n\
    \    }\n    if x == n*n - 30 {\n        return true\n    }\n    if x == n*n -\
    \ 31 {\n        return true\n    }\n    if x == n*n - 32 {\n        return true\n\
    \    }\n    if x == n*n - 33 {\n        return true\n    }\n    if x == n*n -\
    \ 34 {\n        return true\n    }\n    if x == n*n - 35 {\n        return true\n\
    \    }\n    if x == n*n - 36 {\n        return true\n    }\n    if x == n*n -\
    \ 37 {\n        return true\n    }\n    if x == n*n - 38 {\n        return true\n\
    \    }\n    if x == n*n - 39 {\n        return true\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: '/tmp/tmppy8_fi0o.swift:151:1: error: missing return in global function
    expected to return ''Bool''

    }

    ^

    '
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if n == 0 {\n        return false\n    }\n   \
    \ if x == 1 {\n        return true\n    }\n    if x == 0 {\n        return false\n\
    \    }\n    if x == n {\n        return true\n    }\n    if x % n == 0 {\n   \
    \     return is_simple_power(x / n, n)\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp9jdielsl.swift:35:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x / n, n)\n                           \
    \   ^\n                               x:     n: \n"
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if n % x == 0 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmprb1xx1yn.swift:29:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824559
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if x % n == 0 {\n        return true\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpkvpr0wav/tmpkvpr0wav.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8ba96dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8ba664b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8ba664988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8ba6637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkvpr0wav                        0x0000558a6469e4a7 <unavailable> + 5287

    5    libc.so.6                          0x00002ac8bab59460 __libc_start_main +
    245

    6    tmpkvpr0wav                        0x0000558a6469def9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if n % x == 0 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmprb1xx1yn.swift:29:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if n % x == 0 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmprb1xx1yn.swift:29:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if x > n {\n        return false\n\
    \    }\n    if x % n == 0 {\n        return is_simple_power(x, n-1)\n    }\n \
    \   return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpjzcc88kd.swift:32:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 0 {\n \
    \       return true\n    }\n    if n == 1 {\n        return true\n    }\n    if\
    \ x == 1 {\n        return true\n    }\n    if x == x {\n        return true\n\
    \    }\n    if x == x*x {\n        return true\n    }\n    if x == x*x*x {\n \
    \       return true\n    }\n    if x == x*x*x*x {\n        return true\n    }\n\
    \    if x == x*x*x*x*x {\n        return true\n    }\n    if x == x*x*x*x*x*x\
    \ {\n        return true\n    }\n    if x == x*x*x*x*x*x*x {\n        return true\n\
    \    }\n    if x == x*x*x*x*x*x*x*x {\n        return true\n    }\n    if x ==\
    \ x*x*x*x*x*x*x*x*x {\n        return true\n    }\n    if x == x*x*x*x*x*x*x*x*x*x\
    \ {\n        return true\n    }\n    if x == x*x*x*x*x*x*x*x*x*x*x {\n       \
    \ return true\n    }\n    if x == x*x*x*x*x*x*x*x*x*x*x*x {\n        return true\n\
    \    }\n    if x == x*x*x*x*x*x*x*x*x*x*x*x*x {\n        return true\n    }\n\
    \    if x == x*x*x*x*x*x*x*x*x*x*x*x*x*x {\n        return true\n    }\n    if\
    \ x == x*x*x*x*x*x*x*x*x*x*x*x*x*x*x {\n        return true\n    }\n    if x ==\
    \ x*x*x*x*x*x*x*x*x*x*x*x*x*x*x {\n        return true\n    }\n    if x == x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x\
    \ {\n        return true\n    }\n    if x == x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x\
    \ {\n        return true\n    }\n    if x == x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x\
    \ {\n        return true\n    }\n    if x == x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x\
    \ {\n        return true\n    }\n    if x == x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x\
    \ {\n        return true\n    }\n    if x == x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x\
    \ {\n        return true\n    }\n    if x == x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x\
    \ {\n        return true\n    }\n    if x == x*x*\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp1jsn4eme.swift:97:17: error: expected '{' after 'if' condition\n\
    \    if x == x*x*\n                ^\n/tmp/tmp1jsn4eme.swift:97:16: error: '*'\
    \ is not a postfix unary operator\n    if x == x*x*\n               ^\n"
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if n % x == 0 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmprb1xx1yn.swift:29:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if x < n {\n        return false\n\
    \    }\n    if x == n-1 {\n        return is_simple_power(x, n-1)\n    }\n   \
    \ return is_simple_power(x, n-1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp5ynqihro.swift:32:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n/tmp/tmp5ynqihro.swift:34:27: error:\
    \ missing argument labels 'x:n:' in call\n    return is_simple_power(x, n-1)\n\
    \                          ^\n                           x: n: \n"
  stdout: ''
  timestamp: 1659824560
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if x % n == 0 {\n        return true\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpkvpr0wav/tmpkvpr0wav.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8ba96dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8ba664b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8ba664988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8ba6637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkvpr0wav                        0x0000558a6469e4a7 <unavailable> + 5287

    5    libc.so.6                          0x00002ac8bab59460 __libc_start_main +
    245

    6    tmpkvpr0wav                        0x0000558a6469def9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if n % x == 0 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmprb1xx1yn.swift:29:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824559
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ n == 0 {\n        return false\n    }\n    if x == 0 {\n        return false\n\
    \    }\n    if n == x {\n        return true\n    }\n    if n == (x * x) {\n \
    \       return true\n    }\n    if n == (x * x * x) {\n        return true\n \
    \   }\n    if n == (x * x * x * x) {\n        return true\n    }\n    if n ==\
    \ (x * x * x * x * x) {\n        return true\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpicc8r9gw/tmpicc8r9gw.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf2b65dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf2b354b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf2b354988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf2b3537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpicc8r9gw                        0x000055ddb00911b6 <unavailable> + 4534

    5    libc.so.6                          0x00002aaf2b849460 __libc_start_main +
    245

    6    tmpicc8r9gw                        0x000055ddb0090e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 0 {\n \
    \       return true\n    }\n    if n == 1 {\n        return true\n    }\n    if\
    \ x == 1 {\n        return true\n    }\n    if x == n {\n        return true\n\
    \    }\n    if x > n {\n        return false\n    }\n    if x < n {\n        return\
    \ false\n    }\n    if x == n**2 {\n        return true\n    }\n    if x == n**3\
    \ {\n        return true\n    }\n    if x == n**4 {\n        return true\n   \
    \ }\n    if x == n**5 {\n        return true\n    }\n    if x == n**6 {\n    \
    \    return true\n    }\n    if x == n**7 {\n        return true\n    }\n    if\
    \ x == n**8 {\n        return true\n    }\n    if x == n**9 {\n        return\
    \ true\n    }\n    if x == n**10 {\n        return true\n    }\n    if x == n**11\
    \ {\n        return true\n    }\n    if x == n**12 {\n        return true\n  \
    \  }\n    if x == n**13 {\n        return true\n    }\n    if x == n**14 {\n \
    \       return true\n    }\n    if x == n**15 {\n        return true\n    }\n\
    \    if x == n**16 {\n        return true\n    }\n    if x == n**17 {\n      \
    \  return true\n    }\n    if x == n**18 {\n        return true\n    }\n    if\
    \ x == n**19 {\n        return true\n    }\n    if x == n**20 {\n        return\
    \ true\n    }\n    if x == n**21 {\n        return true\n    }\n    if x == n**22\
    \ {\n        return true\n    }\n    if x == n**23 {\n        return true\n  \
    \  }\n    if x == n**24 {\n        return true\n    }\n    if x == n**25 {\n \
    \       return true\n    }\n    if x == n**26 {\n        return true\n    }\n\
    \    if x == n**27 {\n        return true\n    }\n    if x == n**28 {\n      \
    \  return true\n    }\n    if x == n**29 {\n        return true\n    }\n    if\
    \ x == n**30 {\n        return true\n    }\n    if x == n**31 {\n        return\
    \ true\n    }\n    if x == n**32 {\n        return true\n    }\n    if x == n**33\
    \ {\n        return true\n    }\n    if x == n**34 {\n        return true\n  \
    \  }\n    if x == n**35 {\n        return true\n    }\n    if x == n**36 {\n \
    \       return true\n    }\n    if x == n**37 {\n        return true\n    }\n\
    \    if x == n**38 {\n        return true\n    }\n    if x == n**39 {\n      \
    \  return true\n    }\n    if x == \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x: 143214,\
    \ n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpu34bykf8.swift:152:1: error: expected expression after operator\n\
    }\n^\n/tmp/tmpu34bykf8.swift:37:14: error: cannot find operator '**' in scope\n\
    \    if x == n**2 {\n             ^~\n/tmp/tmpu34bykf8.swift:40:14: error: cannot\
    \ find operator '**' in scope\n    if x == n**3 {\n             ^~\n/tmp/tmpu34bykf8.swift:43:14:\
    \ error: cannot find operator '**' in scope\n    if x == n**4 {\n            \
    \ ^~\n/tmp/tmpu34bykf8.swift:46:14: error: cannot find operator '**' in scope\n\
    \    if x == n**5 {\n             ^~\n/tmp/tmpu34bykf8.swift:49:14: error: cannot\
    \ find operator '**' in scope\n    if x == n**6 {\n             ^~\n/tmp/tmpu34bykf8.swift:52:14:\
    \ error: cannot find operator '**' in scope\n    if x == n**7 {\n            \
    \ ^~\n/tmp/tmpu34bykf8.swift:55:14: error: cannot find operator '**' in scope\n\
    \    if x == n**8 {\n             ^~\n/tmp/tmpu34bykf8.swift:58:14: error: cannot\
    \ find operator '**' in scope\n    if x == n**9 {\n             ^~\n/tmp/tmpu34bykf8.swift:61:14:\
    \ error: cannot find operator '**' in scope\n    if x == n**10 {\n           \
    \  ^~\n/tmp/tmpu34bykf8.swift:64:14: error: cannot find operator '**' in scope\n\
    \    if x == n**11 {\n             ^~\n/tmp/tmpu34bykf8.swift:67:14: error: cannot\
    \ find operator '**' in scope\n    if x == n**12 {\n             ^~\n/tmp/tmpu34bykf8.swift:70:14:\
    \ error: cannot find operator '**' in scope\n    if x == n**13 {\n           \
    \  ^~\n/tmp/tmpu34bykf8.swift:73:14: error: cannot find operator '**' in scope\n\
    \    if x == n**14 {\n             ^~\n/tmp/tmpu34bykf8.swift:76:14: error: cannot\
    \ find operator '**' in scope\n    if x == n**15 {\n             ^~\n/tmp/tmpu34bykf8.swift:79:14:\
    \ error: cannot find operator '**' in scope\n    if x == n**16 {\n           \
    \  ^~\n/tmp/tmpu34bykf8.swift:82:14: error: cannot find operator '**' in scope\n\
    \    if x == n**17 {\n             ^~\n/tmp/tmpu34bykf8.swift:85:14: error: cannot\
    \ find operator '**' in scope\n    if x == n**18 {\n             ^~\n/tmp/tmpu34bykf8.swift:88:14:\
    \ error: cannot find operator '**' in scope\n    if x == n**19 {\n           \
    \  ^~\n/tmp/tmpu34bykf8.swift:91:14: error:"
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if x == n {\n        return true\n    }\n    if\
    \ n <= 0 {\n        return false\n    }\n    if x == n {\n        return true\n\
    \    }\n    if x == 1 {\n        return true\n    }\n    if x == n {\n       \
    \ return true\n    }\n    if x == 2 {\n        return true\n    }\n    if x ==\
    \ n {\n        return true\n    }\n    if x == 3 {\n        return true\n    }\n\
    \    if x == n {\n        return true\n    }\n    if x == 4 {\n        return\
    \ true\n    }\n    if x == n {\n        return true\n    }\n    if x == 5 {\n\
    \        return true\n    }\n    if x == n {\n        return true\n    }\n   \
    \ if x == 6 {\n        return true\n    }\n    if x == n {\n        return true\n\
    \    }\n    if x == 7 {\n        return true\n    }\n    if x == n {\n       \
    \ return true\n    }\n    if x == 8 {\n        return true\n    }\n    if x ==\
    \ n {\n        return true\n    }\n    if x == 9 {\n        return true\n    }\n\
    \    if x == n {\n        return true\n    }\n    if x == 10 {\n        return\
    \ true\n    }\n    if x == n {\n        return true\n    }\n    if x == 11 {\n\
    \        return true\n    }\n    if x == n {\n        return true\n    }\n   \
    \ if x == 12 {\n        return true\n    }\n    if x == n {\n        return true\n\
    \    }\n    if x == 13 {\n        return true\n    }\n    if x == n {\n      \
    \  return true\n    }\n    if x == 14 {\n        return true\n    }\n    if x\
    \ == n {\n        return true\n    }\n    if x == 15 {\n        return true\n\
    \    }\n    if x == n {\n        return true\n    }\n    if x == 16 {\n      \
    \  return true\n    }\n    if x == n {\n        return true\n    }\n    if x ==\
    \ 17 {\n        return true\n    }\n    if x == n {\n        return true\n   \
    \ }\n    if x == 18 {\n        return true\n    }\n    if x == n {\n        return\
    \ true\n    }\n    if x == 19 {\n        return true\n    }\n    if x == n {\n\
    \        return true\n    }\n    if x == 20 {\n        return true\n    }\n  \
    \  if x == n {\n        return true\n    }\n    if x == 21 {\n        return true\n\
    \    }\n    if x == n {\n        return true\n    }\n    if x == 22 {\n      \
    \  return true\n    }\n    if x == n {\n        return true\n    }\n    if x ==\
    \ 23 {\n        return true\n    }\n    if x == n {\n        return true\n   \
    \ }\n    if x == 24 {\n        return true\n    }\n    if x == n {\n        return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpuhvlol0n.swift:198:45: error: expected '}' at end of brace statement\n\
    assert(is_simple_power(x: 1, n: 12) == true)\n                               \
    \             ^\n/tmp/tmpuhvlol0n.swift:18:46: note: to match this opening '{'\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n                             \
    \                ^\n/tmp/tmpuhvlol0n.swift:177:6: error: operator functions can\
    \ only be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if n == 0 {\n        return false\n    }\n   \
    \ if x == 1 {\n        return true\n    }\n    if x == 0 {\n        return false\n\
    \    }\n    if x == n {\n        return true\n    }\n    if x % n == 0 {\n   \
    \     return is_simple_power(x, n-1)\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp1aksy0ki.swift:35:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 0 {\n        return false\n    }\n   \
    \ if n == 1 {\n        return true\n    }\n    if x == n {\n        return true\n\
    \    }\n    if x % n == 0 {\n        return is_simple_power(x, n-1)\n    }\n \
    \   return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpqfk_e3id.swift:32:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824560
