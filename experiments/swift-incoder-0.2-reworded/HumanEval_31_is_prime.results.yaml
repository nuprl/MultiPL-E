language: swift
name: HumanEval_31_is_prime
results:
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n == 3 {\n        return true\n    }\n    if n % 2 == 0\
    \ {\n        return false\n    }\n    if n % 3 == 0 {\n        return false\n\
    \    }\n    var i = 5\n    var s = 2\n    while i * i <= n {\n        if n % i\
    \ == 0 {\n            return false\n        }\n        s += 2\n        i += 6\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpsn9d687l/tmpsn9d687l.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff207b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff204adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff204ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff204ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsn9d687l                        0x0000555e2d5c577d <unavailable> + 6013

    5    libc.so.6                          0x00002aff209a2460 __libc_start_main +
    245

    6    tmpsn9d687l                        0x0000555e2d5c4ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824417
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i =\
    \ 2\n    var j = 3\n    var k = n - 1\n    while i <= k {\n        if n % i ==\
    \ 0 {\n            return false\n        }\n        if j % i == 0 {\n        \
    \    return false\n        }\n        i += 2\n        j += 2\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmprhhdvaiu/tmprhhdvaiu.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae37b444c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae37b13bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae37b13b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae37b13a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprhhdvaiu                        0x00005639b320a6fb <unavailable> + 5883

    5    libc.so.6                          0x00002ae37b630460 __libc_start_main +
    245

    6    tmprhhdvaiu                        0x00005639b3209ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824417
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    // TODO: use Sieve of Eratosthenes for better\
    \ performance\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n == 3 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    if n % 3 == 0 {\n        return false\n    }\n    var i =\
    \ 5\n    var prime = true\n    while i * i <= n {\n        if n % i == 0 {\n \
    \           prime = false\n            break\n        }\n        i += 2\n    }\n\
    \    return prime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824417
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    while i <= n {\n        if n\
    \ % i == 0 {\n            return false\n        }\n        if j > n / 2 {\n  \
    \          return true\n        }\n        i += 2\n        j += 2\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpawzpi478/tmpawzpi478.swift:65: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8645431c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8645128b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8645128988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86451277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpawzpi478                        0x00005612663276fb <unavailable> + 5883

    5    libc.so.6                          0x00002b864561d460 __libc_start_main +
    245

    6    tmpawzpi478                        0x0000561266326ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824417
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n == 3 {\n        return true\n    }\n    if n % 2 == 0\
    \ {\n        return false\n    }\n    if n % 3 == 0 {\n        return false\n\
    \    }\n    var i = 5\n    var s: Int64 = 1\n    var d: Int64 = 1\n    var e:\
    \ Int64 = 1\n    var p: Int64 = 1\n    var q: Int64 = 1\n    var m: Int64 = 1\n\
    \    var t: Int64 = 1\n    var k: Int64 = 1\n    var m: Int64 = 1\n    var n:\
    \ Int64 = 1\n    var m: Int64 = 1\n    var i: Int64 = 1\n    var p: Int64 = 1\n\
    \    var q: Int64 = 1\n    var m: Int64 = 1\n    var t: Int64 = 1\n    var k:\
    \ Int64 = 1\n    var m: Int64 = 1\n    var n: Int64 = 1\n    var m: Int64 = 1\n\
    \    var i: Int64 = 1\n    var p: Int64 = 1\n    var q: Int64 = 1\n    var m:\
    \ Int64 = 1\n    var t: Int64 = 1\n    var k: Int64 = 1\n    var m: Int64 = 1\n\
    \    var n: Int64 = 1\n    var m: Int64 = 1\n    var i: Int64 = 1\n    var p:\
    \ Int64 = 1\n    var q: Int64 = 1\n    var m: Int64 = 1\n    var t: Int64 = 1\n\
    \    var k: Int64 = 1\n    var m: Int64 = 1\n    var n: Int64 = 1\n    var m:\
    \ Int64 = 1\n    var i: Int64 = 1\n    var p: Int64 = 1\n    var q: Int64 = 1\n\
    \    var m: Int64 = 1\n    var t: Int64 = 1\n    var k: Int64 = 1\n    var m:\
    \ Int64 = 1\n    var n: Int64 = 1\n    var m: Int64 = 1\n    var i: Int64 = 1\n\
    \    var p: Int64 = 1\n    var q: Int64 = 1\n    var m: Int64 = 1\n    var t:\
    \ Int64 = 1\n    var k: Int64 = 1\n    var m: Int64 = 1\n    var n: Int64 = 1\n\
    \    var m: Int64 = 1\n    var i: Int64 = 1\n    var p: Int64 = 1\n    var q:\
    \ Int64 = 1\n    var m: Int64 = 1\n    var t: Int64 = 1\n    var k: Int64 = 1\n\
    \    var m: Int64 = 1\n    var n: Int64 = 1\n    var m: Int64 = 1\n    var i:\
    \ Int64 = 1\n    var p: Int64 = 1\n    var q: Int64 = 1\n    var m: Int64 = 1\n\
    \    var t: Int64 = 1\n    var k: Int64 = 1\n    var m: Int64 = 1\n    var n:\
    \ Int64 = 1\n    var m: Int64 = 1\n\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpc63a21rr.swift:45:9: error: invalid redeclaration of 'm'\n    var\
    \ m: Int64 = 1\n        ^\n/tmp/tmpc63a21rr.swift:42:9: note: 'm' previously declared\
    \ here\n    var m: Int64 = 1\n        ^\n/tmp/tmpc63a21rr.swift:47:9: error: invalid\
    \ redeclaration of 'm'\n    var m: Int64 = 1\n        ^\n/tmp/tmpc63a21rr.swift:42:9:\
    \ note: 'm' previously declared here\n    var m: Int64 = 1\n        ^\n/tmp/tmpc63a21rr.swift:48:9:\
    \ error: invalid redeclaration of 'i'\n    var i: Int64 = 1\n        ^\n/tmp/tmpc63a21rr.swift:36:9:\
    \ note: 'i' previously declared here\n    var i = 5\n        ^\n/tmp/tmpc63a21rr.swift:49:9:\
    \ error: invalid redeclaration of 'p'\n    var p: Int64 = 1\n        ^\n/tmp/tmpc63a21rr.swift:40:9:\
    \ note: 'p' previously declared here\n    var p: Int64 = 1\n        ^\n/tmp/tmpc63a21rr.swift:50:9:\
    \ error: invalid redeclaration of 'q'\n    var q: Int64 = 1\n        ^\n/tmp/tmpc63a21rr.swift:41:9:\
    \ note: 'q' previously declared here\n    var q: Int64 = 1\n        ^\n/tmp/tmpc63a21rr.swift:51:9:\
    \ error: invalid redeclaration of 'm'\n    var m: Int64 = 1\n        ^\n/tmp/tmpc63a21rr.swift:42:9:\
    \ note: 'm' previously declared here\n    var m: Int64 = 1\n        ^\n/tmp/tmpc63a21rr.swift:52:9:\
    \ error: invalid redeclaration of 't'\n    var t: Int64 = 1\n        ^\n/tmp/tmpc63a21rr.swift:43:9:\
    \ note: 't' previously declared here\n    var t: Int64 = 1\n        ^\n/tmp/tmpc63a21rr.swift:53:9:\
    \ error: invalid redeclaration of 'k'\n    var k: Int64 = 1\n        ^\n/tmp/tmpc63a21rr.swift:44:9:\
    \ note: 'k' previously declared here\n    var k: Int64 = 1\n        ^\n/tmp/tmpc63a21rr.swift:54:9:\
    \ error: invalid redeclaration of 'm'\n    var m: Int64 = 1\n        ^\n/tmp/tmpc63a21rr.swift:42:9:\
    \ note: 'm' previously declared here\n    var m: Int64 = 1\n        ^\n/tmp/tmpc63a21rr.swift:55:9:\
    \ error: invalid redeclaration of 'n'\n    var n: Int64 = 1\n        ^\n/tmp/tmpc63a21rr.swift:46:9:\
    \ note: 'n' previously declared here\n    var n: Int64 = 1\n        ^\n/tmp/tmpc63a21rr.swift:56:9:\
    \ error: invalid redeclaration of 'm'\n    var m: Int64 = 1\n        ^\n/tmp/tmpc63a21rr.swift:42:9:\
    \ note: 'm' previously"
  stdout: ''
  timestamp: 1659824417
- exit_code: -1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    var i = 5\n    var p: Int\n    while\
    \ i <= n {\n        p = 5\n        while p < n {\n            if n % p == 0 {\n\
    \                return false\n            }\n            p += 6\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824422
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    var i = 5\n    var s = 2\n    while\
    \ i * i <= n {\n        if n % i == 0 {\n            return false\n        }\n\
    \        i += s\n        s += 2\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmp_fh8n1qe/tmp_fh8n1qe.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad388968c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad38865fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad38865f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad38865e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_fh8n1qe                        0x00005632cd91e80a <unavailable> + 6154

    5    libc.so.6                          0x00002ad388b54460 __libc_start_main +
    245

    6    tmp_fh8n1qe                        0x00005632cd91def9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824417
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n == 4 {\n        return true\n    }\n    if n == 6 {\n\
    \        return true\n    }\n    if n == 8 {\n        return true\n    }\n   \
    \ if n == 9 {\n        return true\n    }\n    if n == 10 {\n        return true\n\
    \    }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n     \
    \   return true\n    }\n    if n == 13 {\n        return true\n    }\n    if n\
    \ == 14 {\n        return true\n    }\n    if n == 15 {\n        return true\n\
    \    }\n    if n == 16 {\n        return true\n    }\n    if n == 17 {\n     \
    \   return true\n    }\n    if n == 18 {\n        return true\n    }\n    if n\
    \ == 19 {\n        return true\n    }\n    if n == 20 {\n        return true\n\
    \    }\n    if n == 21 {\n        return true\n    }\n    if n == 22 {\n     \
    \   return true\n    }\n    if n == 23 {\n        return true\n    }\n    if n\
    \ == 24 {\n        return true\n    }\n    if n == 25 {\n        return true\n\
    \    }\n    if n == 26 {\n        return true\n    }\n    if n == 27 {\n     \
    \   return true\n    }\n    if n == 28 {\n        return true\n    }\n    if n\
    \ == 29 {\n        return true\n    }\n    if n == 30 {\n        return true\n\
    \    }\n    if n == 31 {\n        return true\n    }\n    if n == 32 {\n     \
    \   return true\n    }\n    if n == 33 {\n        return true\n    }\n    if n\
    \ == 34 {\n        return true\n    }\n    if n == 35 {\n        return true\n\
    \    }\n    if n == 36 {\n        return true\n    }\n    if n == 37 {\n     \
    \   return true\n    }\n    if n == 38 {\n        return true\n    }\n    if n\
    \ == 39 {\n        return true\n    }\n    if n == 40 {\n        return true\n\
    \    }\n    if n == 41 {\n        return true\n    }\n    if n == 42 {\n     \
    \   return true\n    }\n    if n == 43 {\n        return true\n    }\n    if n\
    \ == 44 {\n        return true\n    }\n    if n == 45 {\n        return true\n\
    \    }\n    if n == 46 {\n        return true\n    }\n    if n == 47 {\n     \
    \   return true\n    }\n    if n == 48 {\n        return true\n    }\n    if n\
    \ == 49 {\n        return true\n    }\n    if n == 50 {\n        return true\n\
    \    }\n    if n == 51 {\n        return true\n    }\n    if n == 52 {\n     \
    \   return true\n    }\n    if n == 53 {\n        return true\n    }\n    if n\
    \ == 54 {\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp3vcs8dh_.swift:200:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmp3vcs8dh_.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmp3vcs8dh_.swift:176:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824417
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n == 4 {\n        return true\n    }\n    if n == 6 {\n\
    \        return true\n    }\n    if n == 8 {\n        return true\n    }\n   \
    \ if n == 9 {\n        return true\n    }\n    if n == 10 {\n        return true\n\
    \    }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n     \
    \   return true\n    }\n    if n == 17 {\n        return true\n    }\n    if n\
    \ == 19 {\n        return true\n    }\n    if n == 20 {\n        return true\n\
    \    }\n    if n == 24 {\n        return true\n    }\n    if n == 25 {\n     \
    \   return true\n    }\n    if n == 29 {\n        return true\n    }\n    if n\
    \ == 30 {\n        return true\n    }\n    if n == 37 {\n        return true\n\
    \    }\n    if n == 39 {\n        return true\n    }\n    if n == 41 {\n     \
    \   return true\n    }\n    if n == 45 {\n        return true\n    }\n    if n\
    \ == 47 {\n        return true\n    }\n    if n == 49 {\n        return true\n\
    \    }\n    if n == 51 {\n        return true\n    }\n    if n == 55 {\n     \
    \   return true\n    }\n    if n == 57 {\n        return true\n    }\n    if n\
    \ == 59 {\n        return true\n    }\n    if n == 61 {\n        return true\n\
    \    }\n    if n == 65 {\n        return true\n    }\n    if n == 67 {\n     \
    \   return true\n    }\n    if n == 69 {\n        return true\n    }\n    if n\
    \ == 71 {\n        return true\n    }\n    if n == 75 {\n        return true\n\
    \    }\n    if n == 77 {\n        return true\n    }\n    if n == 79 {\n     \
    \   return true\n    }\n    if n == 81 {\n        return true\n    }\n    if n\
    \ == 85 {\n        return true\n    }\n    if n == 87 {\n        return true\n\
    \    }\n    if n == 89 {\n        return true\n    }\n    if n == 91 {\n     \
    \   return true\n    }\n    if n == 93 {\n        return true\n    }\n    if n\
    \ == 95 || n == 93 {\n        return true\n    }\n    if n == 97 {\n        return\
    \ true\n    }\n    if n == 99 {\n        return true\n    }\n    if n == 101 {\n\
    \        return true\n    }\n    if n == 103 {\n        return true\n    }\n \
    \   if n == 105 {\n        return true\n    }\n    if n == 107 {\n        return\
    \ true\n    }\n    if n == 109 {\n        return true\n    }\n    if n == 111\
    \ {\n        return true\n    }\n    if n == 113 {\n        return true\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: '/tmp/tmpw9fcyrx1.swift:171:1: error: missing return in global function
    expected to return ''Bool''

    }

    ^

    '
  stdout: ''
  timestamp: 1659824417
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \n    if n == 2 {\n        return true\n    }\n\n    if n == 3 {\n        return\
    \ true\n    }\n\n    if n % 2 == 0 {\n        return false\n    }\n\n    var i\
    \ = 5\n    var s: Int64 = 1\n    var d: Int64 = 2\n    var e: Int64 = 3\n\n  \
    \  while i <= n {\n        if n % i == 0 {\n            return false\n       \
    \ }\n\n        i += d\n        s += e\n        d += 2\n        e += 3\n    }\n\
    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdh9g9kyv.swift:44:14: error: cannot convert value of type 'Int64'\
    \ to expected argument type 'Int'\n        i += d\n             ^\n          \
    \   Int( )\n"
  stdout: ''
  timestamp: 1659824417
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i =\
    \ 2\n    var j = 3\n    var k = n - 1\n    while i <= k {\n        if n % i ==\
    \ 0 {\n            return false\n        }\n        if j % i == 0 {\n        \
    \    return false\n        }\n        i += 2\n        j += 2\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmprhhdvaiu/tmprhhdvaiu.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae37b444c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae37b13bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae37b13b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae37b13a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprhhdvaiu                        0x00005639b320a6fb <unavailable> + 5883

    5    libc.so.6                          0x00002ae37b630460 __libc_start_main +
    245

    6    tmprhhdvaiu                        0x00005639b3209ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824417
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    var i = 5\n    var s: Int\n    while\
    \ i * i <= n {\n        if n % i == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmpxue8lm6x/tmpxue8lm6x.swift:68: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4e6b0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4e6801b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4e6801988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4e68007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxue8lm6x                        0x000055a57ff4f77d <unavailable> + 6013

    5    libc.so.6                          0x00002ba4e6cf6460 __libc_start_main +
    245

    6    tmpxue8lm6x                        0x000055a57ff4eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824417
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i = 5\n\
    \    var j = (n - 1) / 2\n    while i <= j {\n        if n % i == 0 {\n      \
    \      return false\n        }\n        i += 2\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824417
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n == 3 {\n        return true\n    }\n    if n % 2 == 0\
    \ {\n        return false\n    }\n    if n % 3 == 0 {\n        return false\n\
    \    }\n    var i = 5\n    var j = (n - 1) / 2\n    while i <= j {\n        if\
    \ n % i == 0 {\n            return false\n        }\n        i += 6\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmp72bmw71m/tmp72bmw71m.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc6fa18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc6f70fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc6f70f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc6f70e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp72bmw71m                        0x000055cd3bf7c80a <unavailable> + 6154

    5    libc.so.6                          0x00002abc6fc04460 __libc_start_main +
    245

    6    tmp72bmw71m                        0x000055cd3bf7bef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824417
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    var k = n - 1\n    while i <=\
    \ k {\n        if n % i == 0 {\n            return false\n        }\n        i\
    \ += 2\n        j += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmp8wxuii84/tmp8wxuii84.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002add56dc9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002add56ac0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002add56ac0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002add56abf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8wxuii84                        0x0000561b3596c6fb <unavailable> + 5883

    5    libc.so.6                          0x00002add56fb5460 __libc_start_main +
    245

    6    tmp8wxuii84                        0x0000561b3596bef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824417
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    if n % 3 == 0 {\n        return false\n    }\n    var i =\
    \ 5\n    var j = 3\n    var k = 2\n    while i <= n {\n        if n % i == 0 {\n\
    \            return false\n        }\n        while j <= k {\n            if n\
    \ % j == 0 {\n                return false\n            }\n            j += 2\n\
    \        }\n        i += 2\n        j = 3\n        k += 2\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpzx_c4j3b/tmpzx_c4j3b.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b5aa78c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b5a76fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b5a76f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b5a76e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzx_c4j3b                        0x000055c0e770d2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b1b5ac64460 __libc_start_main +
    245

    6    tmpzx_c4j3b                        0x000055c0e770cef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824417
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i =\
    \ 2\n    var j = 3\n    var k = 3\n    while i <= n {\n        if n % i == 0 {\n\
    \            return false\n        }\n        if k % i == 0 {\n            return\
    \ false\n        }\n        if k % j == 0 {\n            return false\n      \
    \  }\n        i += 2\n        j += 2\n        k += 2\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpesl5cfht/tmpesl5cfht.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d85c91c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d85988b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d85988988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d859877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpesl5cfht                        0x00005635d550a2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b8d85e7d460 __libc_start_main +
    245

    6    tmpesl5cfht                        0x00005635d5509ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824417
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \n    if n == 2 {\n        return true\n    }\n\n    var i = 2\n    var j = 2\n\
    \    var k = 2\n\n    while i <= n {\n        if n % i == 0 {\n            return\
    \ false\n        }\n\n        if k % i == 0 {\n            return false\n    \
    \    }\n\n        if j > n / 2 {\n            return false\n        }\n\n    \
    \    i += 2\n        j += 2\n        k += 2\n    }\n\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpflvxys1p/tmpflvxys1p.swift:65: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b40ab451c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b40ab148b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b40ab148988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b40ab1477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpflvxys1p                        0x000055d5440b22b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b40ab63d460 __libc_start_main +
    245

    6    tmpflvxys1p                        0x000055d5440b1ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824417
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n == 0 {\n        return false\n    }\n    if n == 3 {\n\
    \        return true\n    }\n    if n == 4 {\n        return true\n    }\n   \
    \ if n == 5 {\n        return true\n    }\n    if n == 6 {\n        return true\n\
    \    }\n    if n == 7 {\n        return true\n    }\n    if n == 8 {\n       \
    \ return true\n    }\n    if n == 9 {\n        return true\n    }\n    if n ==\
    \ 10 {\n        return true\n    }\n    if n == 11 {\n        return true\n  \
    \  }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n       \
    \ return true\n    }\n    if n == 14 {\n        return true\n    }\n    if n ==\
    \ 15 {\n        return true\n    }\n    if n == 16 {\n        return true\n  \
    \  }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n       \
    \ return true\n    }\n    if n == 19 {\n        return true\n    }\n    if n ==\
    \ 20 {\n        return true\n    }\n    if n == 21 {\n        return true\n  \
    \  }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n       \
    \ return true\n    }\n    if n == 24 {\n        return true\n    }\n    if n ==\
    \ 25 {\n        return true\n    }\n    if n == 26 {\n        return true\n  \
    \  }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n       \
    \ return true\n    }\n    if n == 29 {\n        return true\n    }\n    if n ==\
    \ 30 {\n        return true\n    }\n    if n == 31 {\n        return true\n  \
    \  }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n       \
    \ return true\n    }\n    if n == 34 {\n        return true\n    }\n    if n ==\
    \ 35 {\n        return true\n    }\n    if n == 36 {\n        return true\n  \
    \  }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n       \
    \ return true\n    }\n    if n == 39 {\n        return true\n    }\n    if n ==\
    \ 40 {\n        return true\n    }\n    if n == 41 {\n        return true\n  \
    \  }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n       \
    \ return true\n    }\n    if n == 44 {\n        return true\n    }\n    if n ==\
    \ 45 {\n        return true\n    }\n    if n == 46 {\n        return true\n  \
    \  }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n       \
    \ return true\n    }\n    if n == 49 {\n        return true\n    }\n    if n ==\
    \ 50 {\n        return true\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmptuy6kt3r.swift:201:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmptuy6kt3r.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmptuy6kt3r.swift:177:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824417
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    var i = 5\n    var j = (n - 1) / 2\n\
    \    while i <= j {\n        if n % i == 0 {\n            return false\n     \
    \   }\n        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmpl1u2bi2p/tmpl1u2bi2p.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae7c3993c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae7c368ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae7c368a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae7c36897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl1u2bi2p                        0x00005646a45ed80a <unavailable> + 6154

    5    libc.so.6                          0x00002ae7c3b7f460 __libc_start_main +
    245

    6    tmpl1u2bi2p                        0x00005646a45ecef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824417
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    // TODO: Optimize this by caching primes\n\
    \    if n < 2 {\n        return false\n    }\n    if n == 2 {\n        return\
    \ true\n    }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n\
    \        return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n\
    \    if n % 3 == 0 {\n        return false\n    }\n    if n % 5 == 0 {\n     \
    \   return false\n    }\n    if n % 7 == 0 {\n        return false\n    }\n  \
    \  if n % 11 == 0 {\n        return false\n    }\n    if n % 13 == 0 {\n     \
    \   return false\n    }\n    if n % 17 == 0 {\n        return false\n    }\n \
    \   if n % 19 == 0 {\n        return false\n    }\n    if n % 23 == 0 {\n    \
    \    return false\n    }\n    if n % 29 == 0 {\n        return false\n    }\n\
    \    if n % 31 == 0 {\n        return false\n    }\n    if n % 37 == 0 {\n   \
    \     return false\n    }\n    if n % 41 == 0 {\n        return false\n    }\n\
    \    if n % 43 == 0 {\n        return false\n    }\n    if n % 47 == 0 {\n   \
    \     return false\n    }\n    if n % 53 == 0 {\n        return false\n    }\n\
    \    if n % 59 == 0 {\n        return false\n    }\n    if n % 61 == 0 {\n   \
    \     return false\n    }\n    if n % 67 == 0 {\n        return false\n    }\n\
    \    if n % 71 == 0 {\n        return false\n    }\n    if n % 73 == 0 {\n   \
    \     return false\n    }\n    if n % 79 == 0 {\n        return false\n    }\n\
    \    if n % 83 == 0 {\n        return false\n    }\n    if n % 89 == 0 {\n   \
    \     return false\n    }\n    if n % 97 == 0 {\n        return false\n    }\n\
    \    if n % 101 == 0 {\n        return false\n    }\n    if n % 103 == 0 {\n \
    \       return false\n    }\n    if n % 107 == 0 {\n        return false\n   \
    \ }\n    if n % 109 == 0 {\n        return false\n    }\n    if n % 113 == 0 {\n\
    \        return false\n    }\n    if n % 117 == 0 {\n        return false\n  \
    \  }\n    if n % 121 == 0 {\n        return false\n    }\n    if n % 127 == 0\
    \ {\n        return false\n    }\n    if n % 131 == 0 {\n        return false\n\
    \    }\n    if n % 137 == 0 {\n        return false\n    }\n    if n % 139 ==\
    \ 0 {\n        return false\n    }\n    if n % 143 == 0 {\n        return false\n\
    \    }\n    if n % 147 == 0 {\n        return false\n    }\n    if n % 151 ==\
    \ 0 {\n        return false\n    }\n    if n % 157 == 0 {\n        return false\n\
    \    }\n    if n % 161 == 0 {\n        return false\n    }\n    if n % 167 ==\
    \ 0 {\n        return false\n    }\n    if n % 173 == 0 {\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp13uq25ok.swift:185:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmp13uq25ok.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmp13uq25ok.swift:161:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824417
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \n    if n == 2 {\n        return true\n    }\n\n    if n == 1 {\n        return\
    \ false\n    }\n\n    var i = 2\n    var j = 2\n    var k = n - 1\n\n    while\
    \ i <= k {\n        if n % i == 0 {\n            return false\n        }\n\n \
    \       i = i + 1\n        j = j + 1\n        k = k - 1\n    }\n\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824417
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \n    if n == 2 {\n        return true\n    }\n\n    if n % 2 == 0 {\n       \
    \ return false\n    }\n\n    var i = 2\n    var j = 3\n    var k = 3\n    var\
    \ m = 2\n\n    while i <= n {\n        if n % i == 0 {\n            return false\n\
    \        }\n\n        if i == m {\n            return true\n        }\n\n    \
    \    if j > n / 2 {\n            return false\n        }\n\n        if k % i ==\
    \ 0 {\n            return false\n        }\n\n        if j % i == 0 {\n      \
    \      return false\n        }\n\n        i += 2\n        j += 2\n        k +=\
    \ 2\n        m += 2\n    }\n\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmpxvbuk9uw/tmpxvbuk9uw.swift:88: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89fe3bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89fe0b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89fe0b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89fe0b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxvbuk9uw                        0x00005618baf946fb <unavailable> + 5883

    5    libc.so.6                          0x00002b89fe5ab460 __libc_start_main +
    245

    6    tmpxvbuk9uw                        0x00005618baf93ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824417
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 2\n    var k = n\n    while i < k {\n\
    \        if n % i == 0 {\n            return false\n        }\n        i += 2\n\
    \    }\n    for i = 2; i < k; i++ {\n        if n % i == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpac2jn8x_.swift:36:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 2; i < k; i++ {\n    ^   ~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824417
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    let limit = (sqrt(Double(n))).rounded(.down)\n\
    \    for d in 2...limit {\n        if n % d == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp6017wqmk.swift:33:18: error: cannot find 'sqrt' in scope\n    let\
    \ limit = (sqrt(Double(n))).rounded(.down)\n                 ^~~~\n/tmp/tmp6017wqmk.swift:33:44:\
    \ error: cannot infer contextual base in reference to member 'down'\n    let limit\
    \ = (sqrt(Double(n))).rounded(.down)\n                                       \
    \   ~^~~~\n"
  stdout: ''
  timestamp: 1659824417
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    var i = 5\n    var j = 3\n    while\
    \ i * i <= n {\n        if n % i == 0 {\n            return false\n        }\n\
    \        i += j\n        j += 2\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmp0in9l_jy/tmp0in9l_jy.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac3d2741c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac3d2438b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac3d2438988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac3d24377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0in9l_jy                        0x00005567b6abf77d <unavailable> + 6013

    5    libc.so.6                          0x00002ac3d292d460 __libc_start_main +
    245

    6    tmp0in9l_jy                        0x00005567b6abeef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824417
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    var i = 5\n    var j = 3\n    while\
    \ i <= n {\n        if n % i == 0 {\n            return false\n        }\n   \
    \     if j > n / 2 {\n            return false\n        }\n        i += 2\n  \
    \      j += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmp_hcr2x6t/tmp_hcr2x6t.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba43c71bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba43c412b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba43c412988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba43c4117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_hcr2x6t                        0x000055e7306952b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ba43c907460 __libc_start_main +
    245

    6    tmp_hcr2x6t                        0x000055e730694ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824417
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    var i = 5\n    var s: Int64 = 1\n \
    \   while i * i <= n {\n        if n % i == 0 {\n            return false\n  \
    \      }\n        s += i\n        i += 6\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmprazt6dyj.swift:39:14: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Int64'\n        s += i\n             ^\n        \
    \     Int64( )\n"
  stdout: ''
  timestamp: 1659824417
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i =\
    \ 2\n    var j = 3\n    var k = n\n    while i <= k {\n        if n % i == 0 {\n\
    \            return false\n        }\n        if j > i {\n            j += i\n\
    \        }\n        i += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpqan1b13w/tmpqan1b13w.swift:68: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace6a754c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace6a44bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace6a44b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace6a44a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqan1b13w                        0x000055d0225b16fb <unavailable> + 5883

    5    libc.so.6                          0x00002ace6a940460 __libc_start_main +
    245

    6    tmpqan1b13w                        0x000055d0225b0ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824417
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    while i <= n {\n        if n\
    \ % i == 0 {\n            return false\n        }\n        i += j\n        j +=\
    \ 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmp9zsbca3g/tmp9zsbca3g.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba714b23c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba71481ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba71481a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7148197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9zsbca3g                        0x0000558c41d342b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ba714d0f460 __libc_start_main +
    245

    6    tmp9zsbca3g                        0x0000558c41d33ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824417
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n == 3 {\n        return true\n    }\n    if n % 2 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    var j = 3\n    var k = n\
    \ - 1\n    while i <= k {\n        if n % i == 0 {\n            return false\n\
    \        }\n        if j % i == 0 {\n            return false\n        }\n   \
    \     i += 2\n        j += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824417
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    var k = 3\n    while i <= n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n        if\
    \ k % i == 0 {\n            return false\n        }\n        if j % i == 0 {\n\
    \            return false\n        }\n        i += 2\n        j += 2\n       \
    \ k += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpnlubwwwz/tmpnlubwwwz.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b893c450c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b893c147b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b893c147988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b893c1467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnlubwwwz                        0x0000560d462bb6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b893c63c460 __libc_start_main +
    245

    6    tmpnlubwwwz                        0x0000560d462baef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824417
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    // TODO: add more checks\n    if n < 2 {\n\
    \        return false\n    }\n    if n == 2 {\n        return true\n    }\n  \
    \  if n == 1 {\n        return false\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    var k = 3\n    var m = 2\n \
    \   var r = true\n    while i < n {\n        if n % i == 0 {\n            r =\
    \ false\n            break\n        }\n        i += 2\n    }\n    while j < n\
    \ {\n        if n % j == 0 {\n            r = false\n            break\n     \
    \   }\n        j += 2\n    }\n    while k < n {\n        if n % k == 0 {\n   \
    \         r = false\n            break\n        }\n        k += 2\n    }\n   \
    \ while m < n {\n        if n % m == 0 {\n            r = false\n            break\n\
    \        }\n        m += 2\n    }\n    return r\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824417
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    let m = Int(sqrt(Double(n)))\n    for\
    \ _ in 0..<m {\n        if n % m == 0 {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmpvfmuk53u.swift:33:17: error: cannot find 'sqrt' in scope\n    let\
    \ m = Int(sqrt(Double(n)))\n                ^~~~\n"
  stdout: ''
  timestamp: 1659824417
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \n    if n == 2 {\n        return true\n    }\n\n    if n == 3 {\n        return\
    \ true\n    }\n\n    if n % 2 == 0 {\n        return false\n    }\n\n    var i\
    \ = 5\n    var j = (3 * n) + 1\n\n    while i <= j {\n        if n % i == 0 {\n\
    \            return false\n        }\n\n        i += 6\n    }\n\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmp95folk6e/tmp95folk6e.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b74645e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74642deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74642de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74642dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp95folk6e                        0x000055bc8f3652b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b74647d3460 __libc_start_main +
    245

    6    tmp95folk6e                        0x000055bc8f364ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824417
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i =\
    \ 2\n    var j = 3\n    var k = n\n    while i <= k {\n        if n % i == 0 {\n\
    \            return false\n        }\n        if j > i {\n            j += 2\n\
    \        }\n        i += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmp3jsrirm1/tmp3jsrirm1.swift:68: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbad96bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbad662b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbad662988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbad6617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3jsrirm1                        0x00005631e369a6fb <unavailable> + 5883

    5    libc.so.6                          0x00002abbadb57460 __libc_start_main +
    245

    6    tmp3jsrirm1                        0x00005631e3699ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824417
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    var j = 3\n    var k = 2\n    while i <= n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n        while\
    \ j <= k {\n            if n % j == 0 {\n                return false\n      \
    \      }\n            j += 2\n        }\n        i += 2\n        k += 2\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmp93uy1ubv/tmp93uy1ubv.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ddf685c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ddf37cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ddf37c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ddf37b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp93uy1ubv                        0x000055e04e1692b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b6ddf871460 __libc_start_main +
    245

    6    tmp93uy1ubv                        0x000055e04e168ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824417
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i =\
    \ 2\n    var j = 3\n    var k = n - 1\n    while i <= k {\n        if n % i ==\
    \ 0 {\n            return false\n        }\n        i += 2\n        j = j + 2\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmps43pfi9z/tmps43pfi9z.swift:66: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7ded87fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7ded576b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7ded576988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7ded5757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps43pfi9z                        0x0000564fc92966fb <unavailable> + 5883

    5    libc.so.6                          0x00002b7deda6b460 __libc_start_main +
    245

    6    tmps43pfi9z                        0x0000564fc9295ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824417
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n == 3 {\n        return true\n    }\n    if n % 2 == 0\
    \ {\n        return false\n    }\n    if n % 3 == 0 {\n        return false\n\
    \    }\n    if n % 5 == 0 {\n        return false\n    }\n    if n % 7 == 0 {\n\
    \        return false\n    }\n    if n % 11 == 0 {\n        return false\n   \
    \ }\n    if n % 13 == 0 {\n        return false\n    }\n    if n % 17 == 0 {\n\
    \        return false\n    }\n    if n % 19 == 0 {\n        return false\n   \
    \ }\n    if n % 23 == 0 {\n        return false\n    }\n    if n % 29 == 0 {\n\
    \        return false\n    }\n    if n % 31 == 0 {\n        return false\n   \
    \ }\n    if n % 37 == 0 {\n        return false\n    }\n    if n % 41 == 0 {\n\
    \        return false\n    }\n    if n % 43 == 0 {\n        return false\n   \
    \ }\n    if n % 47 == 0 {\n        return false\n    }\n    if n % 53 == 0 {\n\
    \        return false\n    }\n    if n % 59 == 0 {\n        return false\n   \
    \ }\n    if n % 61 == 0 {\n        return false\n    }\n    if n % 67 == 0 {\n\
    \        return false\n    }\n    if n % 71 == 0 {\n        return false\n   \
    \ }\n    if n % 73 == 0 {\n        return false\n    }\n    if n % 79 == 0 {\n\
    \        return false\n    }\n    if n % 83 == 0 {\n        return false\n   \
    \ }\n    if n % 89 == 0 {\n        return false\n    }\n    if n % 97 == 0 {\n\
    \        return false\n    }\n    if n % 101 == 0 {\n        return false\n  \
    \  }\n    if n % 103 == 0 {\n        return false\n    }\n    if n % 107 == 0\
    \ {\n        return false\n    }\n    if n % 109 == 0 {\n        return false\n\
    \    }\n    if n % 113 == 0 {\n        return false\n    }\n    if n % 117 ==\
    \ 0 {\n        return false\n    }\n    if n % 121 == 0 {\n        return false\n\
    \    }\n    if n % 123 == 0 {\n        return false\n    }\n    if n % 127 ==\
    \ 0 {\n        return false\n    }\n    if n % 131 == 0 {\n        return false\n\
    \    }\n    if n % 137 == 0 {\n        return false\n    }\n    if n % 139 ==\
    \ 0 {\n        return false\n    }\n    if n % 143 == 0 {\n        return false\n\
    \    }\n    if n % 147 == 0 {\n        return false\n    }\n    if n % 151 ==\
    \ 0 {\n        return false\n    }\n    if n % 157 == 0 {\n        return false\n\
    \    }\n    if n % 161 == 0 {\n        return false\n    }\n    if n % 165 ==\
    \ 0 {\n        return false\n    }\n    if n % 169 == 0 {\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpyi_uyrxz.swift:187:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmpyi_uyrxz.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmpyi_uyrxz.swift:163:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824417
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n == 4 {\n        return true\n    }\n    if n == 6 {\n\
    \        return true\n    }\n    if n == 8 {\n        return true\n    }\n   \
    \ if n == 9 {\n        return true\n    }\n    if n == 10 {\n        return true\n\
    \    }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n     \
    \   return true\n    }\n    if n == 13 {\n        return true\n    }\n    if n\
    \ == 14 {\n        return true\n    }\n    if n == 15 {\n        return true\n\
    \    }\n    if n == 16 {\n        return true\n    }\n    if n == 17 {\n     \
    \   return true\n    }\n    if n == 18 {\n        return true\n    }\n    if n\
    \ == 19 {\n        return true\n    }\n    if n == 20 {\n        return true\n\
    \    }\n    if n == 21 {\n        return true\n    }\n    if n == 22 {\n     \
    \   return true\n    }\n    if n == 23 {\n        return true\n    }\n    if n\
    \ == 24 {\n        return true\n    }\n    if n == 25 {\n        return true\n\
    \    }\n    if n == 26 {\n        return true\n    }\n    if n == 27 {\n     \
    \   return true\n    }\n    if n == 28 {\n        return true\n    }\n    if n\
    \ == 29 {\n        return true\n    }\n    if n == 30 {\n        return true\n\
    \    }\n    if n == 31 {\n        return true\n    }\n    if n == 32 {\n     \
    \   return true\n    }\n    if n == 33 {\n        return true\n    }\n    if n\
    \ == 34 {\n        return true\n    }\n    if n == 35 {\n        return true\n\
    \    }\n    if n == 36 {\n        return true\n    }\n    if n == 37 {\n     \
    \   return true\n    }\n    if n == 38 {\n        return true\n    }\n    if n\
    \ == 39 {\n        return true\n    }\n    if n == 40 {\n        return true\n\
    \    }\n    if n == 41 {\n        return true\n    }\n    if n == 42 {\n     \
    \   return true\n    }\n    if n == 43 {\n        return true\n    }\n    if n\
    \ == 44 {\n        return true\n    }\n    if n == 45 {\n        return true\n\
    \    }\n    if n == 46 {\n        return true\n    }\n    if n == 47 {\n     \
    \   return true\n    }\n    if n == 48 {\n        return true\n    }\n    if n\
    \ == 49 {\n        return true\n    }\n    if n == 50 {\n        return true\n\
    \    }\n    if n == 51 {\n        return true\n    }\n    if n == 52 {\n     \
    \   return true\n    }\n    if n == 53 {\n        return true\n    }\n    if n\
    \ == 54 {\n        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnillu_vp.swift:200:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmpnillu_vp.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmpnillu_vp.swift:172:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmpnillu_vp.swift:176:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824417
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n\
    \        return true\n    }\n    if n == 6 {\n        return true\n    }\n   \
    \ if n == 7 {\n        return true\n    }\n    if n == 8 {\n        return true\n\
    \    }\n    if n == 9 {\n        return true\n    }\n    if n == 10 {\n      \
    \  return true\n    }\n    if n == 11 {\n        return true\n    }\n    if n\
    \ == 12 {\n        return true\n    }\n    if n == 13 {\n        return true\n\
    \    }\n    if n == 14 {\n        return true\n    }\n    if n == 15 {\n     \
    \   return true\n    }\n    if n == 16 {\n        return true\n    }\n    if n\
    \ == 17 {\n        return true\n    }\n    if n == 18 {\n        return true\n\
    \    }\n    if n == 19 {\n        return true\n    }\n    if n == 20 {\n     \
    \   return true\n    }\n    if n == 21 {\n        return true\n    }\n    if n\
    \ == 22 {\n        return true\n    }\n    if n == 23 {\n        return true\n\
    \    }\n    if n == 24 {\n        return true\n    }\n    if n == 25 {\n     \
    \   return true\n    }\n    if n == 26 {\n        return true\n    }\n    if n\
    \ == 27 {\n        return true\n    }\n    if n == 28 {\n        return true\n\
    \    }\n    if n == 29 {\n        return true\n    }\n    if n == 30 {\n     \
    \   return true\n    }\n    if n == 31 {\n        return true\n    }\n    if n\
    \ == 32 {\n        return true\n    }\n    if n == 33 {\n        return true\n\
    \    }\n    if n == 34 {\n        return true\n    }\n    if n == 35 {\n     \
    \   return true\n    }\n    if n == 36 {\n        return true\n    }\n    if n\
    \ == 37 {\n        return true\n    }\n    if n == 38 {\n        return true\n\
    \    }\n    if n == 39 {\n        return true\n    }\n    if n == 40 {\n     \
    \   return true\n    }\n    if n == 41 {\n        return true\n    }\n    if n\
    \ == 42 {\n        return true\n    }\n    if n == 43 {\n        return true\n\
    \    }\n    if n == 44 {\n        return true\n    }\n    if n == 45 {\n     \
    \   return true\n    }\n    if n == 46 {\n        return true\n    }\n    if n\
    \ == 47 {\n        return true\n    }\n    if n == 48 {\n        return true\n\
    \    }\n    if n == 49 {\n        return true\n    }\n    if n == 50 {\n     \
    \   return true\n    }\n    if n == 51 {\n        return true\n    }\n    if n\
    \ == 52 {\n        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4zpibvm4.swift:200:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmp4zpibvm4.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmp4zpibvm4.swift:172:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmp4zpibvm4.swift:176:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824417
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n == 3 {\n        return true\n    }\n    if n % 2 == 0\
    \ {\n        return false\n    }\n    if n % 3 == 0 {\n        return false\n\
    \    }\n    var i = 5\n    var s = 2\n    while i * i <= n {\n        if n % i\
    \ == 0 {\n            return false\n        }\n        i += s\n        s += 2\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpos4y7wgr/tmpos4y7wgr.swift:73: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba412cfdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4129f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4129f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4129f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpos4y7wgr                        0x000055f770eed80a <unavailable> + 6154

    5    libc.so.6                          0x00002ba412ee9460 __libc_start_main +
    245

    6    tmpos4y7wgr                        0x000055f770eecef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824417
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n == 0 {\n        return false\n    }\n    if n == 3 {\n\
    \        return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n\
    \    if n % 3 == 0 {\n        return false\n    }\n    var i = 5\n    var s =\
    \ 2\n    while i * i <= n {\n        if n % i == 0 {\n            return false\n\
    \        }\n        s += 2\n        i += 6\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmp1dvvf1ei/tmp1dvvf1ei.swift:75: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04df2d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b04defceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b04defce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b04defcd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1dvvf1ei                        0x0000557392fb677d <unavailable> + 6013

    5    libc.so.6                          0x00002b04df4c3460 __libc_start_main +
    245

    6    tmp1dvvf1ei                        0x0000557392fb5ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824417
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \n    // Check factors.\n    var factors = [1]\n    for i := 2; i <= n/2; i++\
    \ {\n        if n % i == 0 {\n            factors = append(factors, i)\n     \
    \   }\n    }\n\n    // Check whether all factors are prime.\n    for _, factor\
    \ := range factors {\n        if factor == 1 {\n            return false\n   \
    \     }\n    }\n\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxr1zhd7t.swift:24:12: error: expected type\n    for i := 2; i <=\
    \ n/2; i++ {\n           ^\n            <#type#>\n/tmp/tmpxr1zhd7t.swift:24:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n/2; i++ {\n\
    \           ^\n/tmp/tmpxr1zhd7t.swift:24:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n/2; i++ {\n           ^\n/tmp/tmpxr1zhd7t.swift:31:10:\
    \ error: expected 'in' after for-each pattern\n    for _, factor := range factors\
    \ {\n         ^\n/tmp/tmpxr1zhd7t.swift:31:10: error: expected Sequence expression\
    \ for for-each loop\n    for _, factor := range factors {\n         ^\n"
  stdout: ''
  timestamp: 1659824417
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n\
    \        return true\n    }\n    if n == 6 {\n        return true\n    }\n   \
    \ if n == 7 {\n        return true\n    }\n    if n == 8 {\n        return true\n\
    \    }\n    if n == 9 {\n        return true\n    }\n    if n == 10 {\n      \
    \  return true\n    }\n    if n == 11 {\n        return true\n    }\n    if n\
    \ == 12 {\n        return true\n    }\n    if n == 13 {\n        return true\n\
    \    }\n    if n == 14 {\n        return true\n    }\n    if n == 15 {\n     \
    \   return true\n    }\n    if n == 16 {\n        return true\n    }\n    if n\
    \ == 17 {\n        return true\n    }\n    if n == 18 {\n        return true\n\
    \    }\n    if n == 19 {\n        return true\n    }\n    if n == 20 {\n     \
    \   return true\n    }\n    if n == 21 {\n        return true\n    }\n    if n\
    \ == 22 {\n        return true\n    }\n    if n == 23 {\n        return true\n\
    \    }\n    if n == 24 {\n        return true\n    }\n    if n == 25 {\n     \
    \   return true\n    }\n    if n == 26 {\n        return true\n    }\n    if n\
    \ == 27 {\n        return true\n    }\n    if n == 28 {\n        return true\n\
    \    }\n    if n == 29 {\n        return true\n    }\n    if n == 30 {\n     \
    \   return true\n    }\n    if n == 31 {\n        return true\n    }\n    if n\
    \ == 32 {\n        return true\n    }\n    if n == 33 {\n        return true\n\
    \    }\n    if n == 34 {\n        return true\n    }\n    if n == 35 {\n     \
    \   return true\n    }\n    if n == 36 {\n        return true\n    }\n    if n\
    \ == 37 {\n        return true\n    }\n    if n == 38 {\n        return true\n\
    \    }\n    if n == 39 {\n        return true\n    }\n    if n == 40 {\n     \
    \   return true\n    }\n    if n == 41 {\n        return true\n    }\n    if n\
    \ == 42 {\n        return true\n    }\n    if n == 43 {\n        return true\n\
    \    }\n    if n == 44 {\n        return true\n    }\n    if n == 45 {\n     \
    \   return true\n    }\n    if n == 46 {\n        return true\n    }\n    if n\
    \ == 47 {\n        return true\n    }\n    if n == 48 {\n        return true\n\
    \    }\n    if n == 49 {\n        return true\n    }\n    if n == 50 {\n     \
    \   return true\n    }\n    if n == 51 {\n        return true\n    }\n    if n\
    \ == 52 {\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmprlq01ahw.swift:200:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmprlq01ahw.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmprlq01ahw.swift:176:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824417
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    var i = 5\n    var j = 3\n    while\
    \ i * i <= n {\n        if n % i == 0 {\n            return false\n        }\n\
    \        if j > n / 2 {\n            return false\n        }\n        i += 2\n\
    \        j += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824417
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    if n == 3 {\n        return true\n    }\n    if n % 3 == 0\
    \ {\n        return false\n    }\n    if n % 5 == 0 {\n        return false\n\
    \    }\n    if n % 7 == 0 {\n        return false\n    }\n    if n == 21 || n\
    \ == 19 || n == 17 {\n        return true\n    }\n    if n == 19 || n == 17 {\n\
    \        return true\n    }\n    if n == 17 {\n        return true\n    }\n  \
    \  if n == 18 {\n        return true\n    }\n    if n == 19 {\n        return\
    \ true\n    }\n    if n == 20 {\n        return true\n    }\n    if n == 21 {\n\
    \        return true\n    }\n    if n == 22 {\n        return true\n    }\n  \
    \  if n == 23 {\n        return true\n    }\n    if n == 24 {\n        return\
    \ true\n    }\n    if n == 25 {\n        return true\n    }\n    if n == 26 {\n\
    \        return true\n    }\n    if n == 27 {\n        return true\n    }\n  \
    \  if n == 28 {\n        return true\n    }\n    if n == 29 {\n        return\
    \ true\n    }\n    if n == 30 {\n        return true\n    }\n    if n == 31 {\n\
    \        return true\n    }\n    if n == 32 {\n        return true\n    }\n  \
    \  if n == 33 {\n        return true\n    }\n    if n == 34 {\n        return\
    \ true\n    }\n    if n == 35 {\n        return true\n    }\n    if n == 36 {\n\
    \        return true\n    }\n    if n == 37 {\n        return true\n    }\n  \
    \  if n == 38 {\n        return true\n    }\n    if n == 39 {\n        return\
    \ true\n    }\n    if n == 40 {\n        return true\n    }\n    if n == 41 {\n\
    \        return true\n    }\n    if n == 42 {\n        return true\n    }\n  \
    \  if n == 43 {\n        return true\n    }\n    if n == 44 {\n        return\
    \ true\n    }\n    if n == 45 {\n        return true\n    }\n    if n == 46 {\n\
    \        return true\n    }\n    if n == 47 {\n        return true\n    }\n  \
    \  if n == 48 {\n        return true\n    }\n    if n == 49 {\n        return\
    \ true\n    }\n    if n == 50 {\n        return true\n    }\n    if n == 51 {\n\
    \        return true\n    }\n    if n == 52 {\n        return true\n    }\n  \
    \  if n == 53 {\n        return true\n    }\n    if n == 54 {\n        return\
    \ true\n    }\n    if n == 55 {\n        return true\n    }\n    if n == 56 {\n\
    \        return true\n    }\n    if n == 57 {\n        return true\n    }\n  \
    \  if n == 58 {\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmpoosnqoss.swift:196:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmpoosnqoss.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmpoosnqoss.swift:172:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824417
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    var k = n\n    while i <= k\
    \ {\n        if n % i == 0 {\n            return false\n        }\n        if\
    \ k % i == 0 {\n            return false\n        }\n        i += j\n        j\
    \ += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmphk5jqf2l/tmphk5jqf2l.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad58eaec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad58ba5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad58ba5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad58ba47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphk5jqf2l                        0x00005565d9e1f2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002aad5909a460 __libc_start_main +
    245

    6    tmphk5jqf2l                        0x00005565d9e1eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824417
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n == 3 {\n        return true\n    }\n    if n % 2 == 0\
    \ {\n        return false\n    }\n    if n % 3 == 0 {\n        return false\n\
    \    }\n    if n % 5 == 0 {\n        return false\n    }\n    if n % 7 == 0 {\n\
    \        return false\n    }\n    if n % 11 == 0 {\n        return false\n   \
    \ }\n    if n % 13 == 0 {\n        return false\n    }\n    if n % 17 == 0 {\n\
    \        return false\n    }\n    if n % 19 == 0 {\n        return false\n   \
    \ }\n    if n % 23 == 0 {\n        return false\n    }\n    if n % 29 == 0 {\n\
    \        return false\n    }\n    if n % 31 == 0 {\n        return false\n   \
    \ }\n    if n % 37 == 0 {\n        return false\n    }\n    if n % 41 == 0 {\n\
    \        return false\n    }\n    if n % 43 == 0 {\n        return false\n   \
    \ }\n    if n % 47 == 0 {\n        return false\n    }\n    if n % 53 == 0 {\n\
    \        return false\n    }\n    if n % 59 == 0 {\n        return false\n   \
    \ }\n    if n % 61 == 0 {\n        return false\n    }\n    if n % 67 == 0 {\n\
    \        return false\n    }\n    if n % 71 == 0 {\n        return false\n   \
    \ }\n    if n % 73 == 0 {\n        return false\n    }\n    if n % 79 == 0 {\n\
    \        return false\n    }\n    if n % 83 == 0 {\n        return false\n   \
    \ }\n    if n % 89 == 0 {\n        return false\n    }\n    if n % 97 == 0 {\n\
    \        return false\n    }\n    if n % 101 == 0 {\n        return false\n  \
    \  }\n    if n % 103 == 0 {\n        return false\n    }\n    if n % 107 == 0\
    \ {\n        return false\n    }\n    if n % 109 == 0 {\n        return false\n\
    \    }\n    if n % 113 == 0 {\n        return false\n    }\n    if n % 117 ==\
    \ 0 {\n        return false\n    }\n    if n % 121 == 0 {\n        return false\n\
    \    }\n    if n % 123 == 0 {\n        return false\n    }\n    if n % 127 ==\
    \ 0 {\n        return false\n    }\n    if n % 131 == 0 {\n        return false\n\
    \    }\n    if n % 137 == 0 {\n        return false\n    }\n    if n % 139 ==\
    \ 0 {\n        return false\n    }\n    if n % 143 == 0 {\n        return false\n\
    \    }\n    if n % 147 == 0 {\n        return false\n    }\n    if n % 151 ==\
    \ 0 {\n        return false\n    }\n    if n % 157 == 0 {\n        return false\n\
    \    }\n    if n % 159 == 0 {\n        return false\n    }\n    if n % 163 ==\
    \ 0 {\n        return false\n    }\n    if n % 167 == 0 {\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpzkmozzg9.swift:187:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmpzkmozzg9.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmpzkmozzg9.swift:163:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824417
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    var j = (n - 1) / 2\n    var k = n - 1\n  \
    \  while i <= k {\n        if n % i == 0 {\n            return false\n       \
    \ }\n        i += 2\n        j += 2\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824417
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n == 4 {\n        return true\n    }\n    if n == 6 {\n\
    \        return true\n    }\n    if n == 8 {\n        return true\n    }\n   \
    \ if n == 9 {\n        return true\n    }\n    if n == 10 {\n        return true\n\
    \    }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n     \
    \   return true\n    }\n    if n == 13 {\n        return true\n    }\n    if n\
    \ == 14 {\n        return true\n    }\n    if n == 15 {\n        return true\n\
    \    }\n    if n == 16 {\n        return true\n    }\n    if n == 17 {\n     \
    \   return true\n    }\n    if n == 18 {\n        return true\n    }\n    if n\
    \ == 19 {\n        return true\n    }\n    if n == 20 {\n        return true\n\
    \    }\n    if n == 21 {\n        return true\n    }\n    if n == 22 {\n     \
    \   return true\n    }\n    if n == 23 {\n        return true\n    }\n    if n\
    \ == 24 {\n        return true\n    }\n    if n == 25 {\n        return true\n\
    \    }\n    if n == 26 {\n        return true\n    }\n    if n == 27 {\n     \
    \   return true\n    }\n    if n == 28 {\n        return true\n    }\n    if n\
    \ == 29 {\n        return true\n    }\n    if n == 30 {\n        return true\n\
    \    }\n    if n == 31 {\n        return true\n    }\n    if n == 32 {\n     \
    \   return true\n    }\n    if n == 33 {\n        return true\n    }\n    if n\
    \ == 34 {\n        return true\n    }\n    if n == 35 {\n        return true\n\
    \    }\n    if n == 36 {\n        return true\n    }\n    if n == 37 {\n     \
    \   return true\n    }\n    if n == 38 {\n        return true\n    }\n    if n\
    \ == 39 {\n        return true\n    }\n    if n == 40 {\n        return true\n\
    \    }\n    if n == 41 {\n        return true\n    }\n    if n == 42 {\n     \
    \   return true\n    }\n    if n == 43 {\n        return true\n    }\n    if n\
    \ == 44 {\n        return true\n    }\n    if n == 45 {\n        return true\n\
    \    }\n    if n == 46 {\n        return true\n    }\n    if n == 47 {\n     \
    \   return true\n    }\n    if n == 48 {\n        return true\n    }\n    if n\
    \ == 49 {\n        return true\n    }\n    if n == 50 {\n        return true\n\
    \    }\n    if n == 51 {\n        return true\n    }\n    if n == 52 {\n     \
    \   return true\n    }\n    if n == 53 {\n        return true\n    }\n    if n\
    \ == 54 {\n        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmpb4am1oz8.swift:200:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmpb4am1oz8.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmpb4am1oz8.swift:172:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmpb4am1oz8.swift:176:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824417
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \n    if n == 2 {\n        return true\n    }\n\n    if n % 2 == 0 {\n       \
    \ return false\n    }\n\n    var i = 2\n    var j = 3\n    var k = 3\n    var\
    \ m = 2\n\n    while i <= n {\n        if n % i == 0 {\n            return false\n\
    \        }\n\n        if m > i {\n            if k % i == 0 {\n              \
    \  return false\n            }\n        }\n\n        i += 2\n        j += 2\n\
    \        k += 2\n        m += 2\n    }\n\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmp_k2urgk8/tmp_k2urgk8.swift:78: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada59a0fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada59706b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada59706988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada597057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_k2urgk8                        0x000055caf72ef6fb <unavailable> + 5883

    5    libc.so.6                          0x00002ada59bfb460 __libc_start_main +
    245

    6    tmp_k2urgk8                        0x000055caf72eeef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824417
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    if n % 5 == 0 {\n        return false\n\
    \    }\n    if n % 7 == 0 {\n        return false\n    }\n    if n <= 13 {\n \
    \       return true\n    }\n    if n > 13 {\n        return false\n    }\n   \
    \ let mut i = 6\n    let mut j = 3\n    let mut k = n - 1\n    while i <= k {\n\
    \        if n % i == 0 {\n            return false\n        }\n        if j %\
    \ i == 0 {\n            return false\n        }\n        if k % i == 0 {\n   \
    \         return false\n        }\n        if j % k == 0 {\n            return\
    \ false\n        }\n        i += 2\n        j += 2\n        k += 2\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdxaebfkz.swift:45:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut i = 6\n\
    \            ^\n/tmp/tmpdxaebfkz.swift:45:13: note: join the identifiers together\n\
    \    let mut i = 6\n        ~~~~^\n        muti\n/tmp/tmpdxaebfkz.swift:45:13:\
    \ note: join the identifiers together with camel-case\n    let mut i = 6\n   \
    \     ~~~~^\n        mutI\n/tmp/tmpdxaebfkz.swift:46:13: error: found an unexpected\
    \ second identifier in constant declaration; is there an accidental break?\n \
    \   let mut j = 3\n            ^\n/tmp/tmpdxaebfkz.swift:46:13: note: join the\
    \ identifiers together\n    let mut j = 3\n        ~~~~^\n        mutj\n/tmp/tmpdxaebfkz.swift:46:13:\
    \ note: join the identifiers together with camel-case\n    let mut j = 3\n   \
    \     ~~~~^\n        mutJ\n/tmp/tmpdxaebfkz.swift:47:13: error: found an unexpected\
    \ second identifier in constant declaration; is there an accidental break?\n \
    \   let mut k = n - 1\n            ^\n/tmp/tmpdxaebfkz.swift:47:13: note: join\
    \ the identifiers together\n    let mut k = n - 1\n        ~~~~^\n        mutk\n\
    /tmp/tmpdxaebfkz.swift:47:13: note: join the identifiers together with camel-case\n\
    \    let mut k = n - 1\n        ~~~~^\n        mutK\n/tmp/tmpdxaebfkz.swift:46:9:\
    \ error: invalid redeclaration of 'mut'\n    let mut j = 3\n        ^\n/tmp/tmpdxaebfkz.swift:45:9:\
    \ note: 'mut' previously declared here\n    let mut i = 6\n        ^\n/tmp/tmpdxaebfkz.swift:47:9:\
    \ error: invalid redeclaration of 'mut'\n    let mut k = n - 1\n        ^\n/tmp/tmpdxaebfkz.swift:45:9:\
    \ note: 'mut' previously declared here\n    let mut i = 6\n        ^\n/tmp/tmpdxaebfkz.swift:48:11:\
    \ error: cannot find 'i' in scope\n    while i <= k {\n          ^\n/tmp/tmpdxaebfkz.swift:48:16:\
    \ error: cannot find 'k' in scope\n    while i <= k {\n               ^\n/tmp/tmpdxaebfkz.swift:49:16:\
    \ error: cannot find 'i' in scope\n        if n % i == 0 {\n               ^\n\
    /tmp/tmpdxaebfkz.swift:52:12: error: cannot find 'j' in scope\n        if j %\
    \ i == 0 {\n           ^\n/tmp/tmpdxaebfkz.swift:52:16: error: cannot find 'i'\
    \ in scope"
  stdout: ''
  timestamp: 1659824417
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    if n % 5 == 0 {\n        return false\n\
    \    }\n    if n % 7 == 0 {\n        return false\n    }\n    if n % 11 == 0 {\n\
    \        return false\n    }\n    if n % 13 == 0 {\n        return false\n   \
    \ }\n    if n % 17 == 0 {\n        return false\n    }\n    if n % 19 == 0 {\n\
    \        return false\n    }\n    if n % 23 == 0 {\n        return false\n   \
    \ }\n    if n % 29 == 0 {\n        return false\n    }\n    if n % 31 == 0 {\n\
    \        return false\n    }\n    if n % 37 == 0 {\n        return false\n   \
    \ }\n    if n % 41 == 0 {\n        return false\n    }\n    if n % 43 == 0 {\n\
    \        return false\n    }\n    if n % 47 == 0 {\n        return false\n   \
    \ }\n    if n % 53 == 0 {\n        return false\n    }\n    if n % 59 == 0 {\n\
    \        return false\n    }\n    if n % 61 == 0 {\n        return false\n   \
    \ }\n    if n % 67 == 0 {\n        return false\n    }\n    if n % 71 == 0 {\n\
    \        return false\n    }\n    if n % 73 == 0 {\n        return false\n   \
    \ }\n    if n % 79 == 0 {\n        return false\n    }\n    if n % 83 == 0 {\n\
    \        return false\n    }\n    if n % 89 == 0 {\n        return false\n   \
    \ }\n    if n % 97 == 0 {\n        return false\n    }\n    if n % 101 == 0 {\n\
    \        return false\n    }\n    if n % 103 == 0 {\n        return false\n  \
    \  }\n    if n % 107 == 0 {\n        return false\n    }\n    if n % 109 == 0\
    \ {\n        return false\n    }\n    if n % 113 == 0 {\n        return false\n\
    \    }\n    if n % 117 == 0 {\n        return false\n    }\n    if n % 121 ==\
    \ 0 {\n        return false\n    }\n    if n % 123 == 0 {\n        return false\n\
    \    }\n    if n % 127 == 0 {\n        return false\n    }\n    if n % 131 ==\
    \ 0 {\n        return false\n    }\n    if n % 137 == 0 {\n        return false\n\
    \    }\n    if n % 139 == 0 {\n        return false\n    }\n    if n % 143 ==\
    \ 0 {\n        return false\n    }\n    if n % 147 == 0 {\n        return false\n\
    \    }\n    if n % 151 == 0 {\n        return false\n    }\n    if n % 157 ==\
    \ 0 {\n        return false\n    }\n    if n % 159 == 0 {\n        return false\n\
    \    }\n    if n % 163 == 0 {\n        return false\n    }\n    if n % 167 ==\
    \ 0 {\n        return false\n    }\n    if n % 17\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9xs7xfpw.swift:159:14: error: expected '{' after 'if' condition\n\
    \    if n % 17\n             ^\n/tmp/tmp9xs7xfpw.swift:159:10: error: type 'Int'\
    \ cannot be used as a boolean; test for '!= 0' instead\n    if n % 17\n      \
    \   ^\n       ((    ) != 0)\n"
  stdout: ''
  timestamp: 1659824417
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n\
    \        return true\n    }\n    if n == 6 {\n        return true\n    }\n   \
    \ if n == 7 {\n        return true\n    }\n    if n == 8 {\n        return true\n\
    \    }\n    if n == 9 {\n        return true\n    }\n    if n == 10 {\n      \
    \  return true\n    }\n    if n == 11 {\n        return true\n    }\n    if n\
    \ == 12 {\n        return true\n    }\n    if n == 13 {\n        return true\n\
    \    }\n    if n == 14 {\n        return true\n    }\n    if n == 15 {\n     \
    \   return true\n    }\n    if n == 16 {\n        return true\n    }\n    if n\
    \ == 17 {\n        return true\n    }\n    if n == 18 {\n        return true\n\
    \    }\n    if n == 19 {\n        return true\n    }\n    if n == 20 {\n     \
    \   return true\n    }\n    if n == 21 {\n        return true\n    }\n    if n\
    \ == 22 {\n        return true\n    }\n    if n == 23 {\n        return true\n\
    \    }\n    if n == 24 {\n        return true\n    }\n    if n == 25 {\n     \
    \   return true\n    }\n    if n == 26 {\n        return true\n    }\n    if n\
    \ == 27 {\n        return true\n    }\n    if n == 28 {\n        return true\n\
    \    }\n    if n == 29 {\n        return true\n    }\n    if n == 30 {\n     \
    \   return true\n    }\n    if n == 31 {\n        return true\n    }\n    if n\
    \ == 32 {\n        return true\n    }\n    if n == 33 {\n        return true\n\
    \    }\n    if n == 34 {\n        return true\n    }\n    if n == 35 {\n     \
    \   return true\n    }\n    if n == 36 {\n        return true\n    }\n    if n\
    \ == 37 {\n        return true\n    }\n    if n == 38 {\n        return true\n\
    \    }\n    if n == 39 {\n        return true\n    }\n    if n == 40 {\n     \
    \   return true\n    }\n    if n == 41 {\n        return true\n    }\n    if n\
    \ == 42 {\n        return true\n    }\n    if n == 43 {\n        return true\n\
    \    }\n    if n == 44 {\n        return true\n    }\n    if n == 45 {\n     \
    \   return true\n    }\n    if n == 46 {\n        return true\n    }\n    if n\
    \ == 47 {\n        return true\n    }\n    if n == 48 {\n        return true\n\
    \    }\n    if n == 49 {\n        return true\n    }\n    if n == 50 {\n     \
    \   return true\n    }\n    if n == 51 {\n        return true\n    }\n    if n\
    \ == 52 {\n        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmprp0b534_.swift:200:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmprp0b534_.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmprp0b534_.swift:172:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmprp0b534_.swift:176:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824417
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    if n % 5 == 0 {\n        return false\n\
    \    }\n    if n % 7 == 0 {\n        return false\n    }\n    if n % 11 == 0 {\n\
    \        return false\n    }\n    if n % 13 == 0 {\n        return false\n   \
    \ }\n    if n % 17 == 0 {\n        return false\n    }\n    if n % 19 == 0 {\n\
    \        return false\n    }\n    if n % 23 == 0 {\n        return false\n   \
    \ }\n    if n % 29 == 0 {\n        return false\n    }\n    if n % 31 == 0 {\n\
    \        return false\n    }\n    if n % 37 == 0 {\n        return false\n   \
    \ }\n    if n % 41 == 0 {\n        return false\n    }\n    if n % 43 == 0 {\n\
    \        return false\n    }\n    if n % 47 == 0 {\n        return false\n   \
    \ }\n    if n % 53 == 0 {\n        return false\n    }\n    if n % 59 == 0 {\n\
    \        return false\n    }\n    if n % 61 == 0 {\n        return false\n   \
    \ }\n    if n % 67 == 0 {\n        return false\n    }\n    if n % 71 == 0 {\n\
    \        return false\n    }\n    if n % 73 == 0 {\n        return false\n   \
    \ }\n    if n % 79 == 0 {\n        return false\n    }\n    if n % 83 == 0 {\n\
    \        return false\n    }\n    if n % 89 == 0 {\n        return false\n   \
    \ }\n    if n % 97 == 0 {\n        return false\n    }\n    if n % 101 == 0 {\n\
    \        return false\n    }\n    if n % 103 == 0 {\n        return false\n  \
    \  }\n    if n % 107 == 0 {\n        return false\n    }\n    if n % 109 == 0\
    \ {\n        return false\n    }\n    if n % 113 == 0 {\n        return false\n\
    \    }\n    if n % 117 == 0 {\n        return false\n    }\n    if n % 121 ==\
    \ 0 {\n        return false\n    }\n    if n % 123 == 0 {\n        return false\n\
    \    }\n    if n % 127 == 0 {\n        return false\n    }\n    if n % 131 ==\
    \ 0 {\n        return false\n    }\n    if n % 137 == 0 {\n        return false\n\
    \    }\n    if n % 139 == 0 {\n        return false\n    }\n    if n % 143 ==\
    \ 0 {\n        return false\n    }\n    if n % 147 == 0 {\n        return false\n\
    \    }\n    if n % 151 == 0 {\n        return false\n    }\n    if n % 157 ==\
    \ 0 {\n        return false\n    }\n    if n % 161 == 0 {\n        return false\n\
    \    }\n    if n % 165 == 0 {\n        return false\n    }\n    if n % 169 ==\
    \ 0 {\n        return false\n    }\n    if n % 17\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7j9hyb39.swift:159:14: error: expected '{' after 'if' condition\n\
    \    if n % 17\n             ^\n/tmp/tmp7j9hyb39.swift:159:10: error: type 'Int'\
    \ cannot be used as a boolean; test for '!= 0' instead\n    if n % 17\n      \
    \   ^\n       ((    ) != 0)\n"
  stdout: ''
  timestamp: 1659824417
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n\
    \        return true\n    }\n    if n == 6 {\n        return true\n    }\n   \
    \ if n == 7 {\n        return true\n    }\n    if n == 8 {\n        return true\n\
    \    }\n    if n == 9 {\n        return true\n    }\n    if n == 10 {\n      \
    \  return true\n    }\n    if n == 11 {\n        return true\n    }\n    if n\
    \ == 12 {\n        return true\n    }\n    if n == 13 {\n        return true\n\
    \    }\n    if n == 14 {\n        return true\n    }\n    if n == 15 {\n     \
    \   return true\n    }\n    if n == 16 {\n        return true\n    }\n    if n\
    \ == 17 {\n        return true\n    }\n    if n == 18 {\n        return true\n\
    \    }\n    if n == 19 {\n        return true\n    }\n    if n == 20 {\n     \
    \   return true\n    }\n    if n == 21 {\n        return true\n    }\n    if n\
    \ == 22 {\n        return true\n    }\n    if n == 23 {\n        return true\n\
    \    }\n    if n == 24 {\n        return true\n    }\n    if n == 25 {\n     \
    \   return true\n    }\n    if n == 26 {\n        return true\n    }\n    if n\
    \ == 27 {\n        return true\n    }\n    if n == 28 {\n        return true\n\
    \    }\n    if n == 29 {\n        return true\n    }\n    if n == 30 {\n     \
    \   return true\n    }\n    if n == 31 {\n        return true\n    }\n    if n\
    \ == 32 {\n        return true\n    }\n    if n == 33 {\n        return true\n\
    \    }\n    if n == 34 {\n        return true\n    }\n    if n == 35 {\n     \
    \   return true\n    }\n    if n == 36 {\n        return true\n    }\n    if n\
    \ == 37 {\n        return true\n    }\n    if n == 38 {\n        return true\n\
    \    }\n    if n == 39 {\n        return true\n    }\n    if n == 40 {\n     \
    \   return true\n    }\n    if n == 41 {\n        return true\n    }\n    if n\
    \ == 42 {\n        return true\n    }\n    if n == 43 {\n        return true\n\
    \    }\n    if n == 44 {\n        return true\n    }\n    if n == 45 {\n     \
    \   return true\n    }\n    if n == 46 {\n        return true\n    }\n    if n\
    \ == 47 {\n        return true\n    }\n    if n == 48 {\n        return true\n\
    \    }\n    if n == 49 {\n        return true\n    }\n    if n == 50 {\n     \
    \   return true\n    }\n    if n == 51 {\n        return true\n    }\n    if n\
    \ == 52 {\n        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4zpibvm4.swift:200:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmp4zpibvm4.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmp4zpibvm4.swift:172:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmp4zpibvm4.swift:176:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824417
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i = 5\n\
    \    var j = (3 * n) + 1\n    var k = (3 * n) + 2\n    while i <= j {\n      \
    \  if i % n == 0 {\n            return false\n        }\n        i += k\n    \
    \    j += k\n        k = (3 * n) + 2\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpg7g1m71c/tmpg7g1m71c.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0cab296c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caaf8db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caaf8d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caaf8c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg7g1m71c                        0x00005628edaa12b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b0cab482460 __libc_start_main +
    245

    6    tmpg7g1m71c                        0x00005628edaa0ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824417
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n\
    \        return true\n    }\n    if n == 6 {\n        return true\n    }\n   \
    \ if n == 7 {\n        return true\n    }\n    if n == 8 {\n        return true\n\
    \    }\n    if n == 9 {\n        return true\n    }\n    if n == 10 {\n      \
    \  return true\n    }\n    if n == 11 {\n        return true\n    }\n    if n\
    \ == 12 {\n        return true\n    }\n    if n == 13 {\n        return true\n\
    \    }\n    if n == 14 {\n        return true\n    }\n    if n == 15 {\n     \
    \   return true\n    }\n    if n == 16 {\n        return true\n    }\n    if n\
    \ == 17 {\n        return true\n    }\n    if n == 18 {\n        return true\n\
    \    }\n    if n == 19 {\n        return true\n    }\n    if n == 20 {\n     \
    \   return true\n    }\n    if n == 21 {\n        return true\n    }\n    if n\
    \ == 22 {\n        return true\n    }\n    if n == 23 {\n        return true\n\
    \    }\n    if n == 24 {\n        return true\n    }\n    if n == 25 {\n     \
    \   return true\n    }\n    if n == 26 {\n        return true\n    }\n    if n\
    \ == 27 {\n        return true\n    }\n    if n == 28 {\n        return true\n\
    \    }\n    if n == 29 {\n        return true\n    }\n    if n == 30 {\n     \
    \   return true\n    }\n    if n == 31 {\n        return true\n    }\n    if n\
    \ == 32 {\n        return true\n    }\n    if n == 33 {\n        return true\n\
    \    }\n    if n == 34 {\n        return true\n    }\n    if n == 35 {\n     \
    \   return true\n    }\n    if n == 36 {\n        return true\n    }\n    if n\
    \ == 37 {\n        return true\n    }\n    if n == 38 {\n        return true\n\
    \    }\n    if n == 39 {\n        return true\n    }\n    if n == 40 {\n     \
    \   return true\n    }\n    if n == 41 {\n        return true\n    }\n    if n\
    \ == 42 {\n        return true\n    }\n    if n == 43 {\n        return true\n\
    \    }\n    if n == 44 {\n        return true\n    }\n    if n == 45 {\n     \
    \   return true\n    }\n    if n == 46 {\n        return true\n    }\n    if n\
    \ == 47 {\n        return true\n    }\n    if n == 48 {\n        return true\n\
    \    }\n    if n == 49 {\n        return true\n    }\n    if n == 50 {\n     \
    \   return true\n    }\n    if n == 51 {\n        return true\n    }\n    if n\
    \ == 52 {\n        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmprp0b534_.swift:200:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmprp0b534_.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmprp0b534_.swift:172:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmprp0b534_.swift:176:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824417
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i =\
    \ 2\n    var j = 3\n    var k = n - 1\n    while i <= k {\n        if n % i ==\
    \ 0 {\n            return false\n        }\n        i += 2\n    }\n    for i =\
    \ 2; i <= n / 2; i += 2 {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmposglg_k3.swift:39:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 2; i <= n / 2; i += 2 {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824417
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i = 5\n\
    \    var j = 3\n    var k = 2\n    while i <= n {\n        if n % i == 0 {\n \
    \           return false\n        }\n        while j <= k {\n            if n\
    \ % j == 0 {\n                return false\n            }\n            j += 1\n\
    \        }\n        k += 1\n        i += 2\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpzxr3lirm/tmpzxr3lirm.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb7e0acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb7dda3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb7dda3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb7dda27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzxr3lirm                        0x000055d5b745a2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002acb7e298460 __libc_start_main +
    245

    6    tmpzxr3lirm                        0x000055d5b7459ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824417
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i =\
    \ 2\n    var j = 3\n    while i <= n {\n        if n % i == 0 {\n            return\
    \ false\n        }\n        if j > n / 2 {\n            return false\n       \
    \ }\n        i += 2\n        j += 2\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpy574hx8h/tmpy574hx8h.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4917ce0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49179d7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b49179d7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49179d67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy574hx8h                        0x000055b5dcfc22b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b4917ecc460 __libc_start_main +
    245

    6    tmpy574hx8h                        0x000055b5dcfc1ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824417
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    var i = 5\n    var j = 3\n    var k\
    \ = 2\n    while i * j <= n {\n        if n % i == 0 {\n            return false\n\
    \        }\n        if n % j == 0 {\n            return false\n        }\n   \
    \     if k % i == 0 {\n            return false\n        }\n        if k % j ==\
    \ 0 {\n            return false\n        }\n        i += 2\n        j += 2\n \
    \       k += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824417
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \n    if n == 2 {\n        return true\n    }\n\n    if n == 3 {\n        return\
    \ true\n    }\n\n    if n % 2 == 0 {\n        return false\n    }\n\n    var i\
    \ = 5\n    var j = 3\n    var k = 2\n\n    while i * j <= n {\n        if n %\
    \ i == 0 {\n            return false\n        }\n\n        if n % j == 0 {\n \
    \           return false\n        }\n\n        if k % i == 0 {\n            return\
    \ false\n        }\n\n        if k % j == 0 {\n            return false\n    \
    \    }\n\n        i += 2\n        j += 2\n        k += 2\n    }\n\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824417
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    let sqrt: Int = Int(sqrt(Double(n)))\n\
    \    for _ in 0..<sqrt {\n        if n % Int(Int(sqrt(Double(n))) + 2) == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpf_epr6h8.swift:33:25: error: use of local variable 'sqrt' before\
    \ its declaration\n    let sqrt: Int = Int(sqrt(Double(n)))\n                \
    \        ^\n/tmp/tmpf_epr6h8.swift:33:9: note: 'sqrt' declared here\n    let sqrt:\
    \ Int = Int(sqrt(Double(n)))\n        ^\n/tmp/tmpf_epr6h8.swift:35:24: error:\
    \ cannot call value of non-function type 'Int'\n        if n % Int(Int(sqrt(Double(n)))\
    \ + 2) == 0 {\n                       ^\n"
  stdout: ''
  timestamp: 1659824418
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i = 5\n\
    \    var j = (n - 1) / 2\n    while i <= j {\n        if n % i == 0 {\n      \
    \      return false\n        }\n        i += 6\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpueagryew/tmpueagryew.swift:66: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9926bddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b99268d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b99268d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b99268d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpueagryew                        0x00005640eddda80a <unavailable> + 6154

    5    libc.so.6                          0x00002b9926dc9460 __libc_start_main +
    245

    6    tmpueagryew                        0x00005640eddd9ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824417
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n == 3 {\n        return true\n    }\n    if n % 2 == 0\
    \ {\n        return false\n    }\n    if n % 3 == 0 {\n        return false\n\
    \    }\n    var i = 5\n    var j = 3\n    var k = 2\n    while i * j <= n {\n\
    \        if n % i == 0 {\n            return false\n        }\n        if n %\
    \ j == 0 {\n            return false\n        }\n        if k % 3 == 0 {\n   \
    \         return false\n        }\n        i += 2\n        j += 2\n        k +=\
    \ 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmp6re8sd1g/tmp6re8sd1g.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b82ae7afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82ae4a6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b82ae4a6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b82ae4a57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6re8sd1g                        0x000055d84b5d12b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b82ae99b460 __libc_start_main +
    245

    6    tmp6re8sd1g                        0x000055d84b5d0ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824417
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \n    if n == 2 {\n        return true\n    }\n\n    if n % 2 == 0 {\n       \
    \ return false\n    }\n\n    var i = 2\n    var j = 3\n    var k = 3\n\n    while\
    \ i <= n {\n        if n % i == 0 {\n            return false\n        }\n\n \
    \       if k % i == 0 {\n            return false\n        }\n\n        if j %\
    \ i == 0 {\n            return false\n        }\n\n        i += 2\n        j +=\
    \ 2\n        k += 2\n    }\n\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmp5wkalti4/tmp5wkalti4.swift:78: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002add450e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002add44dd8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002add44dd8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002add44dd77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5wkalti4                        0x00005655054206fb <unavailable> + 5883

    5    libc.so.6                          0x00002add452cd460 __libc_start_main +
    245

    6    tmp5wkalti4                        0x000056550541fef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824417
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n == 0 {\n        return false\n    }\n    if n == 3 {\n\
    \        return true\n    }\n    if n == 4 {\n        return true\n    }\n   \
    \ if n == 5 {\n        return true\n    }\n    if n == 6 {\n        return true\n\
    \    }\n    if n == 7 {\n        return true\n    }\n    if n == 8 {\n       \
    \ return true\n    }\n    if n == 9 {\n        return true\n    }\n    if n%2\
    \ == 0 {\n        return false\n    }\n    if n%3 == 0 {\n        return false\n\
    \    }\n    if n%5 == 0 {\n        return false\n    }\n    if n%7 == 0 {\n  \
    \      return false\n    }\n    if n%11 == 0 {\n        return false\n    }\n\
    \    if n%13 == 0 {\n        return false\n    }\n    if n%17 == 0 {\n       \
    \ return false\n    }\n    if n%19 == 0 {\n        return false\n    }\n    if\
    \ n%23 == 0 {\n        return false\n    }\n    if n%29 == 0 {\n        return\
    \ false\n    }\n    if n%31 == 0 {\n        return false\n    }\n    if n%37 ==\
    \ 0 {\n        return false\n    }\n    if n%41 == 0 {\n        return false\n\
    \    }\n    if n%43 == 0 {\n        return false\n    }\n    if n%47 == 0 {\n\
    \        return false\n    }\n    if n%53 == 0 {\n        return false\n    }\n\
    \    if n%59 == 0 {\n        return false\n    }\n    if n%61 == 0 {\n       \
    \ return false\n    }\n    if n%67 == 0 {\n        return false\n    }\n    if\
    \ n%71 == 0 {\n        return false\n    }\n    if n%73 == 0 {\n        return\
    \ false\n    }\n    if n%79 == 0 {\n        return false\n    }\n    if n%83 ==\
    \ 0 {\n        return false\n    }\n    if n%89 == 0 {\n        return false\n\
    \    }\n    if n%97 == 0 {\n        return false\n    }\n    if n%101 == 0 {\n\
    \        return false\n    }\n    if n%103 == 0 {\n        return false\n    }\n\
    \    if n%107 == 0 {\n        return false\n    }\n    if n%109 == 0 {\n     \
    \   return false\n    }\n    if n%113 == 0 {\n        return false\n    }\n  \
    \  if n%117 == 0 {\n        return false\n    }\n    if n%121 == 0 {\n       \
    \ return false\n    }\n    if n%123 == 0 {\n        return false\n    }\n    if\
    \ n%127 == 0 {\n        return false\n    }\n    if n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_msg45id.swift:153:9: error: expected '{' after 'if' condition\n\
    \    if n\n        ^\n/tmp/tmp_msg45id.swift:153:8: error: type 'Int' cannot be\
    \ used as a boolean; test for '!= 0' instead\n    if n\n       ^\n       ( !=\
    \ 0)\n"
  stdout: ''
  timestamp: 1659824417
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i =\
    \ 2\n    var j = 3\n    var k = n - 1\n    while i <= k {\n        if n % i ==\
    \ 0 {\n            return false\n        }\n        i += 2\n        j += 2\n \
    \   }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmp7b6k7f9a/tmp7b6k7f9a.swift:66: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafff62dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafff324b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafff324988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafff3237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7b6k7f9a                        0x000055cf104066fb <unavailable> + 5883

    5    libc.so.6                          0x00002aafff819460 __libc_start_main +
    245

    6    tmp7b6k7f9a                        0x000055cf10405ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824417
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    var p: Int\n    while i <= n {\n        p =\
    \ Int(pow(Double(n), Double(i)))\n        if p < n {\n            return false\n\
    \        }\n        if p % 2 == 0 {\n            return false\n        }\n   \
    \     i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpywt9w7o7.swift:30:17: error: cannot find 'pow' in scope\n     \
    \   p = Int(pow(Double(n), Double(i)))\n                ^~~\n"
  stdout: ''
  timestamp: 1659824417
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n == 4 {\n        return true\n    }\n    if n == 6 {\n\
    \        return true\n    }\n    if n == 8 {\n        return true\n    }\n   \
    \ if n == 9 {\n        return true\n    }\n    if n == 10 {\n        return true\n\
    \    }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n     \
    \   return true\n    }\n    if n == 13 {\n        return true\n    }\n    if n\
    \ == 14 {\n        return true\n    }\n    if n == 15 {\n        return true\n\
    \    }\n    if n == 16 {\n        return true\n    }\n    if n == 17 {\n     \
    \   return true\n    }\n    if n == 18 {\n        return true\n    }\n    if n\
    \ == 19 {\n        return true\n    }\n    if n == 20 {\n        return true\n\
    \    }\n    if n == 21 {\n        return true\n    }\n    if n == 22 {\n     \
    \   return true\n    }\n    if n == 23 {\n        return true\n    }\n    if n\
    \ == 24 {\n        return true\n    }\n    if n == 25 {\n        return true\n\
    \    }\n    if n == 26 {\n        return true\n    }\n    if n == 27 {\n     \
    \   return true\n    }\n    if n == 28 {\n        return true\n    }\n    if n\
    \ == 29 {\n        return true\n    }\n    if n == 30 {\n        return true\n\
    \    }\n    if n == 31 {\n        return true\n    }\n    if n == 32 {\n     \
    \   return true\n    }\n    if n == 33 {\n        return true\n    }\n    if n\
    \ == 34 {\n        return true\n    }\n    if n == 35 {\n        return true\n\
    \    }\n    if n == 36 {\n        return true\n    }\n    if n == 37 {\n     \
    \   return true\n    }\n    if n == 38 {\n        return true\n    }\n    if n\
    \ == 39 {\n        return true\n    }\n    if n == 40 {\n        return true\n\
    \    }\n    if n == 41 {\n        return true\n    }\n    if n == 42 {\n     \
    \   return true\n    }\n    if n == 43 {\n        return true\n    }\n    if n\
    \ == 44 {\n        return true\n    }\n    if n == 45 {\n        return true\n\
    \    }\n    if n == 46 {\n        return true\n    }\n    if n == 47 {\n     \
    \   return true\n    }\n    if n == 48 {\n        return true\n    }\n    if n\
    \ == 49 {\n        return true\n    }\n    if n == 50 {\n        return true\n\
    \    }\n    if n == 51 {\n        return true\n    }\n    if n == 52 {\n     \
    \   return true\n    }\n    if n == 53 {\n        return true\n    }\n    if n\
    \ == 54 {\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp3vcs8dh_.swift:200:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmp3vcs8dh_.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmp3vcs8dh_.swift:176:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824417
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    var i = 5\n    var j = 3\n    var k\
    \ = 2\n    while i * j <= n {\n        if n % i == 0 {\n            return false\n\
    \        }\n        if n % j == 0 {\n            return false\n        }\n   \
    \     if k % i == 0 {\n            return false\n        }\n        if k % j ==\
    \ 0 {\n            return false\n        }\n        i += 2\n        j += 2\n \
    \       k += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824417
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i =\
    \ 2\n    var j = 3\n    var k = n - 1\n    while i <= k {\n        if n % i ==\
    \ 0 {\n            return false\n        }\n        if j % i == 0 {\n        \
    \    return false\n        }\n        i += 2\n        j += 2\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmprhhdvaiu/tmprhhdvaiu.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae37b444c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae37b13bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae37b13b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae37b13a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprhhdvaiu                        0x00005639b320a6fb <unavailable> + 5883

    5    libc.so.6                          0x00002ae37b630460 __libc_start_main +
    245

    6    tmprhhdvaiu                        0x00005639b3209ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824417
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n == 3 {\n        return true\n    }\n    if n % 2 == 0\
    \ {\n        return false\n    }\n    if n % 3 == 0 {\n        return false\n\
    \    }\n    if n % 5 == 0 {\n        return false\n    }\n    if n % 7 == 0 {\n\
    \        return false\n    }\n    if n % 11 == 0 {\n        return false\n   \
    \ }\n    if n % 13 == 0 {\n        return false\n    }\n    if n % 17 == 0 {\n\
    \        return false\n    }\n    if n % 19 == 0 {\n        return false\n   \
    \ }\n    if n % 23 == 0 {\n        return false\n    }\n    if n % 29 == 0 {\n\
    \        return false\n    }\n    if n % 31 == 0 {\n        return false\n   \
    \ }\n    if n % 37 == 0 {\n        return false\n    }\n    if n % 41 == 0 {\n\
    \        return false\n    }\n    if n % 43 == 0 {\n        return false\n   \
    \ }\n    if n % 47 == 0 {\n        return false\n    }\n    if n % 53 == 0 {\n\
    \        return false\n    }\n    if n % 59 == 0 {\n        return false\n   \
    \ }\n    if n % 61 == 0 {\n        return false\n    }\n    if n % 67 == 0 {\n\
    \        return false\n    }\n    if n % 71 == 0 {\n        return false\n   \
    \ }\n    if n % 73 == 0 {\n        return false\n    }\n    if n % 79 == 0 {\n\
    \        return false\n    }\n    if n % 83 == 0 {\n        return false\n   \
    \ }\n    if n % 89 == 0 {\n        return false\n    }\n    if n % 97 == 0 {\n\
    \        return false\n    }\n    if n % 101 == 0 {\n        return false\n  \
    \  }\n    if n % 103 == 0 {\n        return false\n    }\n    if n % 107 == 0\
    \ {\n        return false\n    }\n    if n % 109 == 0 {\n        return false\n\
    \    }\n    if n % 113 == 0 {\n        return false\n    }\n    if n % 117 ==\
    \ 0 {\n        return false\n    }\n    if n % 121 == 0 {\n        return false\n\
    \    }\n    if n % 127 == 0 {\n        return false\n    }\n    if n % 131 ==\
    \ 0 {\n        return false\n    }\n    if n % 137 == 0 {\n        return false\n\
    \    }\n    if n % 139 == 0 {\n        return false\n    }\n    if n % 143 ==\
    \ 0 {\n        return false\n    }\n    if n % 147 == 0 {\n        return false\n\
    \    }\n    if n % 151 == 0 {\n        return false\n    }\n    if n % 157 ==\
    \ 0 {\n        return false\n    }\n    if n % 161 == 0 {\n        return false\n\
    \    }\n    if n % 167 == 0 {\n        return false\n    }\n    if n % 173 ==\
    \ 0 {\n        return false\n    }\n    if n % 179 == 0 {\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9tkksdya.swift:187:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmp9tkksdya.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmp9tkksdya.swift:163:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824417
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    while i <= n {\n        if n\
    \ % i == 0 {\n            return false\n        }\n        i += j\n        j +=\
    \ 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmprc_aywx1/tmprc_aywx1.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9dc083cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9dc0533b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9dc0533988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9dc05327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprc_aywx1                        0x0000560e323e82b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b9dc0a28460 __libc_start_main +
    245

    6    tmprc_aywx1                        0x0000560e323e7ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824417
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    var i = 5\n    var s = 2\n    while\
    \ i * i <= n {\n        if n % i == 0 {\n            return false\n        }\n\
    \        i += s\n        s = 6 - s\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpgn3tv2dz/tmpgn3tv2dz.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53e605ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53e5d51b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53e5d51988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53e5d507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgn3tv2dz                        0x000055a7d5bc04ff <unavailable> + 5375

    5    libc.so.6                          0x00002b53e6246460 __libc_start_main +
    245

    6    tmpgn3tv2dz                        0x000055a7d5bbfef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824418
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n\
    \        return true\n    }\n    if n == 6 {\n        return true\n    }\n   \
    \ if n == 7 {\n        return true\n    }\n    if n == 8 {\n        return true\n\
    \    }\n    if n == 9 {\n        return true\n    }\n    if n == 10 {\n      \
    \  return true\n    }\n    if n == 11 {\n        return true\n    }\n    if n\
    \ == 12 {\n        return true\n    }\n    if n == 13 {\n        return true\n\
    \    }\n    if n == 14 {\n        return true\n    }\n    if n == 15 {\n     \
    \   return true\n    }\n    if n == 16 {\n        return true\n    }\n    if n\
    \ == 17 {\n        return true\n    }\n    if n == 18 {\n        return true\n\
    \    }\n    if n == 19 {\n        return true\n    }\n    if n == 20 {\n     \
    \   return true\n    }\n    if n == 21 {\n        return true\n    }\n    if n\
    \ == 22 {\n        return true\n    }\n    if n == 23 {\n        return true\n\
    \    }\n    if n == 24 {\n        return true\n    }\n    if n == 25 {\n     \
    \   return true\n    }\n    if n == 26 {\n        return true\n    }\n    if n\
    \ == 27 {\n        return true\n    }\n    if n == 28 {\n        return true\n\
    \    }\n    if n == 29 {\n        return true\n    }\n    if n == 30 {\n     \
    \   return true\n    }\n    if n == 31 {\n        return true\n    }\n    if n\
    \ == 32 {\n        return true\n    }\n    if n == 33 {\n        return true\n\
    \    }\n    if n == 34 {\n        return true\n    }\n    if n == 35 {\n     \
    \   return true\n    }\n    if n == 36 {\n        return true\n    }\n    if n\
    \ == 37 {\n        return true\n    }\n    if n == 38 {\n        return true\n\
    \    }\n    if n == 39 {\n        return true\n    }\n    if n == 40 {\n     \
    \   return true\n    }\n    if n == 41 {\n        return true\n    }\n    if n\
    \ == 42 {\n        return true\n    }\n    if n == 43 {\n        return true\n\
    \    }\n    if n == 44 {\n        return true\n    }\n    if n == 45 {\n     \
    \   return true\n    }\n    if n == 46 {\n        return true\n    }\n    if n\
    \ == 47 {\n        return true\n    }\n    if n == 48 {\n        return true\n\
    \    }\n    if n == 49 {\n        return true\n    }\n    if n == 50 {\n     \
    \   return true\n    }\n    if n == 51 {\n        return true\n    }\n    if n\
    \ == 52 {\n        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4zpibvm4.swift:200:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmp4zpibvm4.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmp4zpibvm4.swift:172:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmp4zpibvm4.swift:176:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824417
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n\
    \        return true\n    }\n    if n == 6 {\n        return true\n    }\n   \
    \ if n == 7 {\n        return true\n    }\n    if n == 8 {\n        return true\n\
    \    }\n    if n == 9 {\n        return true\n    }\n    if n == 10 {\n      \
    \  return true\n    }\n    if n == 11 {\n        return true\n    }\n    if n\
    \ == 12 {\n        return true\n    }\n    if n == 13 {\n        return true\n\
    \    }\n    if n == 14 {\n        return true\n    }\n    if n == 15 {\n     \
    \   return true\n    }\n    if n == 16 {\n        return true\n    }\n    if n\
    \ == 17 {\n        return true\n    }\n    if n == 18 {\n        return true\n\
    \    }\n    if n == 19 {\n        return true\n    }\n    if n == 20 {\n     \
    \   return true\n    }\n    if n == 21 {\n        return true\n    }\n    if n\
    \ == 22 {\n        return true\n    }\n    if n == 23 {\n        return true\n\
    \    }\n    if n == 24 {\n        return true\n    }\n    if n == 25 {\n     \
    \   return true\n    }\n    if n == 26 {\n        return true\n    }\n    if n\
    \ == 27 {\n        return true\n    }\n    if n == 28 {\n        return true\n\
    \    }\n    if n == 29 {\n        return true\n    }\n    if n == 30 {\n     \
    \   return true\n    }\n    if n == 31 {\n        return true\n    }\n    if n\
    \ == 32 {\n        return true\n    }\n    if n == 33 {\n        return true\n\
    \    }\n    if n == 34 {\n        return true\n    }\n    if n == 35 {\n     \
    \   return true\n    }\n    if n == 36 {\n        return true\n    }\n    if n\
    \ == 37 {\n        return true\n    }\n    if n == 38 {\n        return true\n\
    \    }\n    if n == 39 {\n        return true\n    }\n    if n == 40 {\n     \
    \   return true\n    }\n    if n == 41 {\n        return true\n    }\n    if n\
    \ == 42 {\n        return true\n    }\n    if n == 43 {\n        return true\n\
    \    }\n    if n == 44 {\n        return true\n    }\n    if n == 45 {\n     \
    \   return true\n    }\n    if n == 46 {\n        return true\n    }\n    if n\
    \ == 47 {\n        return true\n    }\n    if n == 48 {\n        return true\n\
    \    }\n    if n == 49 {\n        return true\n    }\n    if n == 50 {\n     \
    \   return true\n    }\n    if n == 51 {\n        return true\n    }\n    if n\
    \ == 52 {\n        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmprp0b534_.swift:200:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmprp0b534_.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmprp0b534_.swift:172:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmprp0b534_.swift:176:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824417
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    var i = 5\n    var j = 3\n    var k\
    \ = 2\n    while i * j <= n {\n        if n % i == 0 {\n            return false\n\
    \        }\n        if n % j == 0 {\n            return false\n        }\n   \
    \     if k % i == 0 {\n            return false\n        }\n        if k % j ==\
    \ 0 {\n            return false\n        }\n        i += 2\n        j += 2\n \
    \       k += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824418
- exit_code: -1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var p: Int = 2\n    while i <= n {\n      \
    \  if n % i == 0 {\n            return false\n        }\n        i += p\n    \
    \    p = p / 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824423
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i =\
    \ 2\n    var j = 3\n    var m = Int(sqrt(Double(n)))\n    while i <= m {\n   \
    \     if n % i == 0 {\n            return false\n        }\n        if i == m\
    \ {\n            return true\n        }\n        i += 2\n        j += 2\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnqhz7set.swift:32:17: error: cannot find 'sqrt' in scope\n    var\
    \ m = Int(sqrt(Double(n)))\n                ^~~~\n"
  stdout: ''
  timestamp: 1659824417
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i = 5\n\
    \    var s = 2\n    while i * i <= n {\n        if n % i == 0 {\n            return\
    \ false\n        }\n        i += s\n        s += 2\n    }\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpasle5i71/tmpasle5i71.swift:67: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac3d438fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac3d4086b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac3d4086988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac3d40857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpasle5i71                        0x000055dcf018180a <unavailable> + 6154

    5    libc.so.6                          0x00002ac3d457b460 __libc_start_main +
    245

    6    tmpasle5i71                        0x000055dcf0180ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824418
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    let m = Int(sqrt(Double(n)))\n    for\
    \ _ in 0..<m {\n        if n % m == 0 {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmpvfmuk53u.swift:33:17: error: cannot find 'sqrt' in scope\n    let\
    \ m = Int(sqrt(Double(n)))\n                ^~~~\n"
  stdout: ''
  timestamp: 1659824417
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i = 5\n\
    \    var s = 2\n    while i * i <= n {\n        if n % i == 0 {\n            return\
    \ false\n        }\n        s += 2\n        i += 6\n    }\n    return s == n\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmp7r1rod2x/tmp7r1rod2x.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7820d9dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7820a94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7820a94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7820a937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7r1rod2x                        0x000055a61e8c82b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b7820f89460 __libc_start_main +
    245

    6    tmp7r1rod2x                        0x000055a61e8c7ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824418
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    if n % 5 == 0 {\n        return false\n\
    \    }\n    if n % 7 == 0 {\n        return false\n    }\n    if n % 11 == 0 {\n\
    \        return false\n    }\n    if n % 13 == 0 {\n        return false\n   \
    \ }\n    if n % 17 == 0 {\n        return false\n    }\n    if n % 19 == 0 {\n\
    \        return false\n    }\n    if n % 23 == 0 {\n        return false\n   \
    \ }\n    if n % 29 == 0 {\n        return false\n    }\n    if n % 31 == 0 {\n\
    \        return false\n    }\n    if n % 37 == 0 {\n        return false\n   \
    \ }\n    if n % 41 == 0 {\n        return false\n    }\n    if n % 43 == 0 {\n\
    \        return false\n    }\n    if n % 47 == 0 {\n        return false\n   \
    \ }\n    if n % 53 == 0 {\n        return false\n    }\n    if n % 59 == 0 {\n\
    \        return false\n    }\n    if n % 61 == 0 {\n        return false\n   \
    \ }\n    if n % 67 == 0 {\n        return false\n    }\n    if n % 71 == 0 {\n\
    \        return false\n    }\n    if n % 73 == 0 {\n        return false\n   \
    \ }\n    if n % 79 == 0 {\n        return false\n    }\n    if n % 83 == 0 {\n\
    \        return false\n    }\n    if n % 89 == 0 {\n        return false\n   \
    \ }\n    if n % 97 == 0 {\n        return false\n    }\n    if n % 101 == 0 {\n\
    \        return false\n    }\n    if n % 103 == 0 {\n        return false\n  \
    \  }\n    if n % 107 == 0 {\n        return false\n    }\n    if n % 109 == 0\
    \ {\n        return false\n    }\n    if n % 113 == 0 {\n        return false\n\
    \    }\n    if n % 117 == 0 {\n        return false\n    }\n    if n % 121 ==\
    \ 0 {\n        return false\n    }\n    if n % 123 == 0 {\n        return false\n\
    \    }\n    if n % 127 == 0 {\n        return false\n    }\n    if n % 131 ==\
    \ 0 {\n        return false\n    }\n    if n % 137 == 0 {\n        return false\n\
    \    }\n    if n % 139 == 0 {\n        return false\n    }\n    if n % 143 ==\
    \ 0 {\n        return false\n    }\n    if n % 147 == 0 {\n        return false\n\
    \    }\n    if n % 151 == 0 {\n        return false\n    }\n    if n % 157 ==\
    \ 0 {\n        return false\n    }\n    if n % 159 == 0 {\n        return false\n\
    \    }\n    if n % 163 == 0 {\n        return false\n    }\n    if n % 167 ==\
    \ 0 {\n        return false\n    }\n    if n % 17\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9xs7xfpw.swift:159:14: error: expected '{' after 'if' condition\n\
    \    if n % 17\n             ^\n/tmp/tmp9xs7xfpw.swift:159:10: error: type 'Int'\
    \ cannot be used as a boolean; test for '!= 0' instead\n    if n % 17\n      \
    \   ^\n       ((    ) != 0)\n"
  stdout: ''
  timestamp: 1659824417
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    if n % 3 == 0 {\n        return false\n    }\n    var i =\
    \ 5\n    var j = 3\n    while i * i <= n {\n        if n % i == 0 {\n        \
    \    return false\n        }\n        i += j\n        j += 2\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpp5r_lttn/tmpp5r_lttn.swift:66: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b4305ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b42d51b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b42d51988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b42d507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp5r_lttn                        0x000055acc084d77d <unavailable> + 6013

    5    libc.so.6                          0x00002b9b43246460 __libc_start_main +
    245

    6    tmpp5r_lttn                        0x000055acc084cef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824418
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    var i = 5\n    var s = 2\n    while\
    \ i * i <= n {\n        if n % i == 0 {\n            return false\n        }\n\
    \        if i == 3 {\n            if n % i == 0 {\n                return false\n\
    \            }\n        }\n        i += s\n        s *= 2\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824418
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n == 3 {\n        return true\n    }\n    if n % 2 == 0\
    \ {\n        return false\n    }\n    if n % 3 == 0 {\n        return false\n\
    \    }\n    var i = 5\n    var j = 3\n    var k = 2\n    while i * j <= n {\n\
    \        if n % i == 0 {\n            return false\n        }\n        if n %\
    \ j == 0 {\n            return false\n        }\n        if k % 2 == 0 {\n   \
    \         return false\n        }\n        if k % 3 == 0 {\n            return\
    \ false\n        }\n        i += 2\n        j += 2\n        k += 2\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpc_iq60m5/tmpc_iq60m5.swift:73: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b458345ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4583155b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4583155988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b45831547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_iq60m5                        0x000056173c58e2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b458364a460 __libc_start_main +
    245

    6    tmpc_iq60m5                        0x000056173c58def9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824418
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \n    var i = 2\n    var j: Int\n    var p: Bool\n\n    while i < n {\n      \
    \  p = true\n        j = 2\n        while j < i {\n            if n % j == 0 {\n\
    \                p = false\n                break\n            }\n           \
    \ j += 1\n        }\n        if p {\n            return true\n        }\n    \
    \    i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmprf_wmdbi/tmprf_wmdbi.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba3e4d2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba3e4a21b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba3e4a21988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba3e4a207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprf_wmdbi                        0x000055b356ddc243 <unavailable> + 4675

    5    libc.so.6                          0x00002ba3e4f16460 __libc_start_main +
    245

    6    tmprf_wmdbi                        0x000055b356ddbef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824418
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n == 4 {\n        return true\n    }\n    if n == 6 {\n\
    \        return true\n    }\n    if n == 8 {\n        return true\n    }\n   \
    \ if n == 9 {\n        return true\n    }\n    if n == 10 {\n        return true\n\
    \    }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n     \
    \   return true\n    }\n    if n == 13 {\n        return true\n    }\n    if n\
    \ == 14 {\n        return true\n    }\n    if n == 15 {\n        return true\n\
    \    }\n    if n == 16 {\n        return true\n    }\n    if n == 17 {\n     \
    \   return true\n    }\n    if n == 18 {\n        return true\n    }\n    if n\
    \ == 19 {\n        return true\n    }\n    if n == 20 {\n        return true\n\
    \    }\n    if n == 21 {\n        return true\n    }\n    if n == 22 {\n     \
    \   return true\n    }\n    if n == 23 {\n        return true\n    }\n    if n\
    \ == 24 {\n        return true\n    }\n    if n == 25 {\n        return true\n\
    \    }\n    if n == 26 {\n        return true\n    }\n    if n == 27 {\n     \
    \   return true\n    }\n    if n == 28 {\n        return true\n    }\n    if n\
    \ == 29 {\n        return true\n    }\n    if n == 30 {\n        return true\n\
    \    }\n    if n == 31 {\n        return true\n    }\n    if n == 32 {\n     \
    \   return true\n    }\n    if n == 33 {\n        return true\n    }\n    if n\
    \ == 34 {\n        return true\n    }\n    if n == 35 {\n        return true\n\
    \    }\n    if n == 36 {\n        return true\n    }\n    if n == 37 {\n     \
    \   return true\n    }\n    if n == 38 {\n        return true\n    }\n    if n\
    \ == 39 {\n        return true\n    }\n    if n == 40 {\n        return true\n\
    \    }\n    if n == 41 {\n        return true\n    }\n    if n == 42 {\n     \
    \   return true\n    }\n    if n == 43 {\n        return true\n    }\n    if n\
    \ == 44 {\n        return true\n    }\n    if n == 45 {\n        return true\n\
    \    }\n    if n == 46 {\n        return true\n    }\n    if n == 47 {\n     \
    \   return true\n    }\n    if n == 48 {\n        return true\n    }\n    if n\
    \ == 49 {\n        return true\n    }\n    if n == 50 {\n        return true\n\
    \    }\n    if n == 51 {\n        return true\n    }\n    if n == 52 {\n     \
    \   return true\n    }\n    if n == 53 {\n        return true\n    }\n    if n\
    \ == 54 {\n        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmpb4am1oz8.swift:200:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmpb4am1oz8.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmpb4am1oz8.swift:172:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmpb4am1oz8.swift:176:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824417
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n\
    \        return true\n    }\n    if n == 6 {\n        return true\n    }\n   \
    \ if n == 7 {\n        return true\n    }\n    if n == 8 {\n        return true\n\
    \    }\n    if n == 9 {\n        return true\n    }\n    if n == 10 {\n      \
    \  return true\n    }\n    if n == 11 {\n        return true\n    }\n    if n\
    \ == 12 {\n        return true\n    }\n    if n == 13 {\n        return true\n\
    \    }\n    if n == 14 {\n        return true\n    }\n    if n == 15 {\n     \
    \   return true\n    }\n    if n == 16 {\n        return true\n    }\n    if n\
    \ == 17 {\n        return true\n    }\n    if n == 18 {\n        return true\n\
    \    }\n    if n == 19 {\n        return true\n    }\n    if n == 20 {\n     \
    \   return true\n    }\n    if n == 21 {\n        return true\n    }\n    if n\
    \ == 22 {\n        return true\n    }\n    if n == 23 {\n        return true\n\
    \    }\n    if n == 24 {\n        return true\n    }\n    if n == 25 {\n     \
    \   return true\n    }\n    if n == 26 {\n        return true\n    }\n    if n\
    \ == 27 {\n        return true\n    }\n    if n == 28 {\n        return true\n\
    \    }\n    if n == 29 {\n        return true\n    }\n    if n == 30 {\n     \
    \   return true\n    }\n    if n == 31 {\n        return true\n    }\n    if n\
    \ == 32 {\n        return true\n    }\n    if n == 33 {\n        return true\n\
    \    }\n    if n == 34 {\n        return true\n    }\n    if n == 35 {\n     \
    \   return true\n    }\n    if n == 36 {\n        return true\n    }\n    if n\
    \ == 37 {\n        return true\n    }\n    if n == 38 {\n        return true\n\
    \    }\n    if n == 39 {\n        return true\n    }\n    if n == 40 {\n     \
    \   return true\n    }\n    if n == 41 {\n        return true\n    }\n    if n\
    \ == 42 {\n        return true\n    }\n    if n == 43 {\n        return true\n\
    \    }\n    if n == 44 {\n        return true\n    }\n    if n == 45 {\n     \
    \   return true\n    }\n    if n == 46 {\n        return true\n    }\n    if n\
    \ == 47 {\n        return true\n    }\n    if n == 48 {\n        return true\n\
    \    }\n    if n == 49 {\n        return true\n    }\n    if n == 50 {\n     \
    \   return true\n    }\n    if n == 51 {\n        return true\n    }\n    if n\
    \ == 52 {\n        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4zpibvm4.swift:200:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmp4zpibvm4.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmp4zpibvm4.swift:172:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmp4zpibvm4.swift:176:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824417
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    var i = 5\n    var j = 3\n    while\
    \ i * i <= n {\n        if n % i == 0 {\n            return false\n        }\n\
    \        if n % j == 0 {\n            return false\n        }\n        i += 2\n\
    \        j += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824418
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n == 0 {\n        return false\n    }\n    if n == 3 {\n\
    \        return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n\
    \    if n % 3 == 0 {\n        return false\n    }\n    if n % 5 == 0 {\n     \
    \   return false\n    }\n    if n % 7 == 0 {\n        return false\n    }\n  \
    \  if n % 11 == 0 {\n        return false\n    }\n    if n % 13 == 0 {\n     \
    \   return false\n    }\n    if n % 17 == 0 {\n        return false\n    }\n \
    \   if n % 19 == 0 {\n        return false\n    }\n    if n % 23 == 0 {\n    \
    \    return false\n    }\n    if n % 29 == 0 {\n        return false\n    }\n\
    \    if n % 31 == 0 {\n        return false\n    }\n    if n % 37 == 0 {\n   \
    \     return false\n    }\n    if n % 41 == 0 {\n        return false\n    }\n\
    \    if n % 43 == 0 {\n        return false\n    }\n    if n % 47 == 0 {\n   \
    \     return false\n    }\n    if n % 53 == 0 {\n        return false\n    }\n\
    \    if n % 59 == 0 {\n        return false\n    }\n    if n % 61 == 0 {\n   \
    \     return false\n    }\n    if n % 67 == 0 {\n        return false\n    }\n\
    \    if n % 71 == 0 {\n        return false\n    }\n    if n % 73 == 0 {\n   \
    \     return false\n    }\n    if n % 79 == 0 {\n        return false\n    }\n\
    \    if n % 83 == 0 {\n        return false\n    }\n    if n % 89 == 0 {\n   \
    \     return false\n    }\n    if n % 97 == 0 {\n        return false\n    }\n\
    \    if n % 101 == 0 {\n        return false\n    }\n    if n % 103 == 0 {\n \
    \       return false\n    }\n    if n % 107 == 0 {\n        return false\n   \
    \ }\n    if n % 109 == 0 {\n        return false\n    }\n    if n % 113 == 0 {\n\
    \        return false\n    }\n    if n % 117 == 0 {\n        return false\n  \
    \  }\n    if n % 121 == 0 {\n        return false\n    }\n    if n % 127 == 0\
    \ {\n        return false\n    }\n    if n % 131 == 0 {\n        return false\n\
    \    }\n    if n % 137 == 0 {\n        return false\n    }\n    if n % 139 ==\
    \ 0 {\n        return false\n    }\n    if n % 143 == 0 {\n        return false\n\
    \    }\n    if n % 147 == 0 {\n        return false\n    }\n    if n % 151 ==\
    \ 0 {\n        return false\n    }\n    if n % 157 == 0 {\n        return false\n\
    \    }\n    if n % 161 == 0 {\n        return false\n    }\n    if n % 167 ==\
    \ 0 {\n        return false\n    }\n    if n % 173 == 0 {\n        return \n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp14a0g1td.swift:188:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmp14a0g1td.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmp14a0g1td.swift:160:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmp14a0g1td.swift:164:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824418
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \n    var i = 2\n    var j = 2\n    var k = n - 1\n\n    while i <= k {\n    \
    \    if n % i == 0 {\n            return false\n        }\n        i += j\n  \
    \      j += 2\n    }\n\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmp52ep_nek/tmp52ep_nek.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56d3faac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56d3ca1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56d3ca1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56d3ca07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp52ep_nek                        0x0000560d9ff766fb <unavailable> + 5883

    5    libc.so.6                          0x00002b56d4196460 __libc_start_main +
    245

    6    tmp52ep_nek                        0x0000560d9ff75ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824418
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i = 5\n\
    \    var j = (n - 1) / 2\n    while i <= j {\n        if n % i == 0 {\n      \
    \      return false\n        }\n        i += 6\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpt1ae5ysu/tmpt1ae5ysu.swift:66: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a3941ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a39115b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a39115988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a391147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt1ae5ysu                        0x000055f42586a80a <unavailable> + 6154

    5    libc.so.6                          0x00002b8a3960a460 __libc_start_main +
    245

    6    tmpt1ae5ysu                        0x000055f425869ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824418
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n == 0 {\n        return false\n    }\n    var i = 2\n\
    \    var j = 3\n    var k = n - 1\n    while i <= k {\n        if n % i == 0 {\n\
    \            return false\n        }\n        if j % i == 0 {\n            return\
    \ false\n        }\n        i += 2\n        j += 2\n    }\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpgvfw5owx/tmpgvfw5owx.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae343f1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae343c12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae343c12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae343c117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgvfw5owx                        0x0000559242bc56fb <unavailable> + 5883

    5    libc.so.6                          0x00002ae344107460 __libc_start_main +
    245

    6    tmpgvfw5owx                        0x0000559242bc4ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824418
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n\
    \        return true\n    }\n    if n == 6 {\n        return true\n    }\n   \
    \ if n == 7 {\n        return true\n    }\n    if n == 8 {\n        return true\n\
    \    }\n    if n == 9 {\n        return true\n    }\n    if n == 10 {\n      \
    \  return true\n    }\n    if n == 11 {\n        return true\n    }\n    if n\
    \ == 12 {\n        return true\n    }\n    if n == 13 {\n        return true\n\
    \    }\n    if n == 14 {\n        return true\n    }\n    if n == 15 {\n     \
    \   return true\n    }\n    if n == 16 {\n        return true\n    }\n    if n\
    \ == 17 {\n        return true\n    }\n    if n == 18 {\n        return true\n\
    \    }\n    if n == 19 {\n        return true\n    }\n    if n == 20 {\n     \
    \   return true\n    }\n    if n == 21 {\n        return true\n    }\n    if n\
    \ == 22 {\n        return true\n    }\n    if n == 23 {\n        return true\n\
    \    }\n    if n == 24 {\n        return true\n    }\n    if n == 25 {\n     \
    \   return true\n    }\n    if n == 26 {\n        return true\n    }\n    if n\
    \ == 27 {\n        return true\n    }\n    if n == 28 {\n        return true\n\
    \    }\n    if n == 29 {\n        return true\n    }\n    if n == 30 {\n     \
    \   return true\n    }\n    if n == 31 {\n        return true\n    }\n    if n\
    \ == 32 {\n        return true\n    }\n    if n == 33 {\n        return true\n\
    \    }\n    if n == 34 {\n        return true\n    }\n    if n == 35 {\n     \
    \   return true\n    }\n    if n == 36 {\n        return true\n    }\n    if n\
    \ == 37 {\n        return true\n    }\n    if n == 38 {\n        return true\n\
    \    }\n    if n == 39 {\n        return true\n    }\n    if n == 40 {\n     \
    \   return true\n    }\n    if n == 41 {\n        return true\n    }\n    if n\
    \ == 42 {\n        return true\n    }\n    if n == 43 {\n        return true\n\
    \    }\n    if n == 44 {\n        return true\n    }\n    if n == 45 {\n     \
    \   return true\n    }\n    if n == 46 {\n        return true\n    }\n    if n\
    \ == 47 {\n        return true\n    }\n    if n == 48 {\n        return true\n\
    \    }\n    if n == 49 {\n        return true\n    }\n    if n == 50 {\n     \
    \   return true\n    }\n    if n == 51 {\n        return true\n    }\n    if n\
    \ == 52 {\n        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4zpibvm4.swift:200:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmp4zpibvm4.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmp4zpibvm4.swift:172:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmp4zpibvm4.swift:176:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824417
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    var s = 2\n    while i * i <= n {\n       \
    \ if n % i == 0 {\n            return false\n        }\n        i += s\n     \
    \   s += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmp6pml45p6/tmp6pml45p6.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1899b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1896a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1896a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1896a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6pml45p6                        0x000055555ab6a80a <unavailable> + 6154

    5    libc.so.6                          0x00002ab189b9e460 __libc_start_main +
    245

    6    tmp6pml45p6                        0x000055555ab69ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824418
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n == 3 {\n        return true\n    }\n    if n % 2 == 0\
    \ {\n        return false\n    }\n    if n % 3 == 0 {\n        return false\n\
    \    }\n    var i = 5\n    var j = (2 * i) + 1\n    while j < n {\n        if\
    \ n % j == 0 {\n            return false\n        }\n        i += 2\n        j\
    \ = (2 * i) + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmpid72dxhm/tmpid72dxhm.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b23cdc92c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b23cd989b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b23cd989988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b23cd9887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpid72dxhm                        0x0000564ca967b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b23cde7e460 __libc_start_main +
    245

    6    tmpid72dxhm                        0x0000564ca967aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824418
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    while i <= n {\n        if n\
    \ % i == 0 {\n            return false\n        }\n        if j > n / 2 {\n  \
    \          return true\n        }\n        i += 2\n        j += 2\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpe7tss41q/tmpe7tss41q.swift:65: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aab46275c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab45f6cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aab45f6c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aab45f6b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe7tss41q                        0x0000559fac9406fb <unavailable> + 5883

    5    libc.so.6                          0x00002aab46461460 __libc_start_main +
    245

    6    tmpe7tss41q                        0x0000559fac93fef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824418
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n == 3 {\n        return true\n    }\n    if n % 2 == 0\
    \ {\n        return false\n    }\n    if n % 3 == 0 {\n        return false\n\
    \    }\n    var i = 5\n    var j = 3\n    var k = n - 1\n    while i <= k {\n\
    \        if n % i == 0 {\n            return false\n        }\n        if j >\
    \ i {\n            j += 2\n        }\n        i += 2\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824418
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i =\
    \ 2\n    var j = 3\n    var k = 3\n    while i <= n {\n        if n % i == 0 {\n\
    \            return false\n        }\n        if k % i == 0 {\n            return\
    \ false\n        }\n        if j % i == 0 {\n            return false\n      \
    \  }\n        i += 2\n        j += 2\n        k += 2\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpcbr9ljma/tmpcbr9ljma.swift:73: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04a4461c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b04a4158b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b04a4158988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b04a41577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcbr9ljma                        0x00005645440a66fb <unavailable> + 5883

    5    libc.so.6                          0x00002b04a464d460 __libc_start_main +
    245

    6    tmpcbr9ljma                        0x00005645440a5ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824418
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i =\
    \ 5\n    var j = 3\n    while i <= n {\n        if n % i == 0 {\n            return\
    \ false\n        }\n        i += j\n        j += 2\n    }\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpkecketj5/tmpkecketj5.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b288f809c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b288f500b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b288f500988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b288f4ff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkecketj5                        0x00005564a01aa579 <unavailable> + 5497

    5    libc.so.6                          0x00002b288f9f5460 __libc_start_main +
    245

    6    tmpkecketj5                        0x00005564a01a9ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824418
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    var k = n - 1\n    while i <=\
    \ k {\n        if n % i == 0 {\n            return false\n        }\n        if\
    \ j % i == 0 {\n            return false\n        }\n        if k % i == 0 {\n\
    \            return false\n        }\n        i += 2\n        j += 2\n       \
    \ k /= i\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpkbkki3pm/tmpkbkki3pm.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2769202c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2768ef9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2768ef9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2768ef87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkbkki3pm                        0x0000559c9b5252b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b27693ee460 __libc_start_main +
    245

    6    tmpkbkki3pm                        0x0000559c9b524ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824418
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \n    // The first few primes are easy to check\n    if n == 2 || n == 3 {\n \
    \       return true\n    }\n\n    // Check odd and even numbers\n    if n % 2\
    \ == 0 || n % 3 == 0 {\n        return false\n    }\n\n    // Check odd and even\
    \ numbers in factors of 3 or 5\n    for d in 2...Int(ceil(sqrt(Double(n))) + 1)\
    \ {\n        if n % d == 0 || d % 3 == 0 || d % 5 == 0 {\n            return false\n\
    \        }\n    }\n\n    // Check all numbers in factors of 5\n    for d in 2...Int(ceil(sqrt(Double(n)))\
    \ + 1) {\n        if n % d == 0 || d % 5 == 0 {\n            return false\n  \
    \      }\n    }\n\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp90tfdq6y.swift:33:22: error: cannot find 'ceil' in scope\n    for\
    \ d in 2...Int(ceil(sqrt(Double(n))) + 1) {\n                     ^~~~\n/tmp/tmp90tfdq6y.swift:33:27:\
    \ error: cannot find 'sqrt' in scope\n    for d in 2...Int(ceil(sqrt(Double(n)))\
    \ + 1) {\n                          ^~~~\n/tmp/tmp90tfdq6y.swift:40:22: error:\
    \ cannot find 'ceil' in scope\n    for d in 2...Int(ceil(sqrt(Double(n))) + 1)\
    \ {\n                     ^~~~\n/tmp/tmp90tfdq6y.swift:40:27: error: cannot find\
    \ 'sqrt' in scope\n    for d in 2...Int(ceil(sqrt(Double(n))) + 1) {\n       \
    \                   ^~~~\n"
  stdout: ''
  timestamp: 1659824418
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i = 5\n\
    \    var p: Int\n    while i * i <= n {\n        p = n / i\n        if p > i {\n\
    \            return false\n        }\n        if p == i {\n            return\
    \ true\n        }\n        i += 2\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmp2zdxc2t4/tmp2zdxc2t4.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afce8ec6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afce8bbdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afce8bbd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afce8bbc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2zdxc2t4                        0x0000564701f2b2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002afce90b2460 __libc_start_main +
    245

    6    tmp2zdxc2t4                        0x0000564701f2aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824418
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    var i = 5\n    var s = 2\n    while\
    \ i * i <= n {\n        if n % i == 0 {\n            return false\n        }\n\
    \        s += 2\n        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpj6m0fnpb/tmpj6m0fnpb.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2629ae1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26297d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26297d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26297d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj6m0fnpb                        0x000055a31035177d <unavailable> + 6013

    5    libc.so.6                          0x00002b2629ccd460 __libc_start_main +
    245

    6    tmpj6m0fnpb                        0x000055a310350ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824418
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    if n % 5 == 0 {\n        return false\n\
    \    }\n    if n % 7 == 0 {\n        return false\n    }\n    if n <= 31 && n\
    \ > 2 {\n        return false\n    }\n    if n > 40 {\n        return false\n\
    \    }\n    if n <= 61 && n > 5 {\n        return false\n    }\n    if n <= 121\
    \ && n > 7 {\n        return false\n    }\n    if n <= 172 && n > 9 {\n      \
    \  return false\n    }\n    if n <= 193 && n > 11 {\n        return false\n  \
    \  }\n    if n <= 215 && n > 13 {\n        return false\n    }\n    if n <= 247\
    \ && n > 15 {\n        return false\n    }\n    if n <= 271 && n > 17 {\n    \
    \    return false\n    }\n    if n <= 303 && n > 19 {\n        return false\n\
    \    }\n    if n <= 337 && n > 21 {\n        return false\n    }\n    if n <=\
    \ 361 && n > 23 {\n        return false\n    }\n    if n <= 393 && n > 25 {\n\
    \        return false\n    }\n    if n <= 419 && n > 27 {\n        return false\n\
    \    }\n    if n <= 449 && n > 29 {\n        return false\n    }\n    if n <=\
    \ 471 && n > 31 {\n        return false\n    }\n    if n <= 493 && n > 33 {\n\
    \        return false\n    }\n    if n <= 519 && n > 35 {\n        return false\n\
    \    }\n    if n <= 541 && n > 37 {\n        return false\n    }\n    if n <=\
    \ 563 and n > 39 {\n        return false\n    }\n    if n <= 593 && n > 41 {\n\
    \        return false\n    }\n    if n <= 619 && n > 43 {\n        return false\n\
    \    }\n    if n <= 641 && n > 45 {\n        return false\n    }\n    if n <=\
    \ 663 && n > 47 {\n        return false\n    }\n    if n <= 693 && n > 49 {\n\
    \        return false\n    }\n    if n <= 719 && n > 51 {\n        return false\n\
    \    }\n    if n <= 741 && n > 53 {\n        return false\n    }\n    if n <=\
    \ 773 && n > 55 {\n        return false\n    }\n    if n <= 793 && n > 57 {\n\
    \        return false\n    }\n    if n <= 823 + 1 && n > 59 {\n        return\
    \ false\n    }\n    if n <= 843 + 1 && n > 61 {\n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpge6kpuox.swift:96:17: error: expected '{' after 'if' condition\n\
    \    if n <= 563 and n > 39 {\n                ^\n/tmp/tmpge6kpuox.swift:158:37:\
    \ error: expected '}' at end of brace statement\nassert(is_prime(n: 255379) ==\
    \ false)\n                                    ^\n/tmp/tmpge6kpuox.swift:17:31:\
    \ note: to match this opening '{'\nfunc is_prime(n: Int) -> Bool {\n         \
    \                     ^\n/tmp/tmpge6kpuox.swift:134:6: error: operator functions\
    \ can only be declared at global or in type scope\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824418
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n == 3 {\n        return true\n    }\n    if n % 2 == 0\
    \ {\n        return false\n    }\n    if n % 3 == 0 {\n        return false\n\
    \    }\n    if n % 5 == 0 {\n        return false\n    }\n    if n % 7 == 0 {\n\
    \        return false\n    }\n    if n % 11 == 0 {\n        return false\n   \
    \ }\n    if n % 13 == 0 {\n        return false\n    }\n    if n % 17 == 0 {\n\
    \        return false\n    }\n    if n % 19 == 0 {\n        return false\n   \
    \ }\n    if n % 23 == 0 {\n        return false\n    }\n    if n % 29 == 0 {\n\
    \        return false\n    }\n    if n % 31 == 0 {\n        return false\n   \
    \ }\n    if n % 37 == 0 {\n        return false\n    }\n    if n % 41 == 0 {\n\
    \        return false\n    }\n    if n % 43 == 0 {\n        return false\n   \
    \ }\n    if n % 47 == 0 {\n        return false\n    }\n    if n % 53 == 0 {\n\
    \        return false\n    }\n    if n % 59 == 0 {\n        return false\n   \
    \ }\n    if n % 61 == 0 {\n        return false\n    }\n    if n % 67 == 0 {\n\
    \        return false\n    }\n    if n % 71 == 0 {\n        return false\n   \
    \ }\n    if n % 73 == 0 {\n        return false\n    }\n    if n % 79 == 0 {\n\
    \        return false\n    }\n    if n % 83 == 0 {\n        return false\n   \
    \ }\n    if n % 89 == 0 {\n        return false\n    }\n    if n % 97 == 0 {\n\
    \        return false\n    }\n    if n % 101 == 0 {\n        return false\n  \
    \  }\n    if n % 103 == 0 {\n        return false\n    }\n    if n % 107 == 0\
    \ {\n        return false\n    }\n    if n % 109 == 0 {\n        return false\n\
    \    }\n    if n % 113 == 0 {\n        return false\n    }\n    if n % 117 ==\
    \ 0 {\n        return false\n    }\n    if n % 121 == 0 {\n        return false\n\
    \    }\n    if n % 127 == 0 {\n        return false\n    }\n    if n % 131 ==\
    \ 0 {\n        return false\n    }\n    if n % 137 == 0 {\n        return false\n\
    \    }\n    if n % 139 == 0 {\n        return false\n    }\n    if n % 143 ==\
    \ 0 {\n        return false\n    }\n    if n % 147 == 0 {\n        return false\n\
    \    }\n    if n % 151 == 0 {\n        return false\n    }\n    if n % 157 ==\
    \ 0 {\n        return false\n    }\n    if n % 161 == 0 {\n        return false\n\
    \    }\n    if n % 165 == 0 {\n        return false\n    }\n    if n % 169 ==\
    \ 0 {\n        return false\n    }\n    if n % 173 == 0 {\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpedbyluh4.swift:187:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmpedbyluh4.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmpedbyluh4.swift:163:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824418
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n == 4 {\n        return true\n    }\n    if n == 6 {\n\
    \        return true\n    }\n    if n == 8 {\n        return true\n    }\n   \
    \ if n == 9 {\n        return true\n    }\n    if n == 10 {\n        return true\n\
    \    }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n     \
    \   return true\n    }\n    if n == 13 {\n        return true\n    }\n    if n\
    \ == 14 {\n        return true\n    }\n    if n == 15 {\n        return true\n\
    \    }\n    if n == 16 {\n        return true\n    }\n    if n == 17 {\n     \
    \   return true\n    }\n    if n == 18 {\n        return true\n    }\n    if n\
    \ == 19 {\n        return true\n    }\n    if n == 20 {\n        return true\n\
    \    }\n    if n == 21 {\n        return true\n    }\n    if n == 22 {\n     \
    \   return true\n    }\n    if n == 23 {\n        return true\n    }\n    if n\
    \ == 24 {\n        return true\n    }\n    if n == 25 {\n        return true\n\
    \    }\n    if n == 26 {\n        return true\n    }\n    if n == 27 {\n     \
    \   return true\n    }\n    if n == 28 {\n        return true\n    }\n    if n\
    \ == 29 {\n        return true\n    }\n    if n == 30 {\n        return true\n\
    \    }\n    if n == 31 {\n        return true\n    }\n    if n == 32 {\n     \
    \   return true\n    }\n    if n == 33 {\n        return true\n    }\n    if n\
    \ == 34 {\n        return true\n    }\n    if n == 35 {\n        return true\n\
    \    }\n    if n == 36 {\n        return true\n    }\n    if n == 37 {\n     \
    \   return true\n    }\n    if n == 38 {\n        return true\n    }\n    if n\
    \ == 39 {\n        return true\n    }\n    if n == 40 {\n        return true\n\
    \    }\n    if n == 41 {\n        return true\n    }\n    if n == 42 {\n     \
    \   return true\n    }\n    if n == 43 {\n        return true\n    }\n    if n\
    \ == 44 {\n        return true\n    }\n    if n == 45 {\n        return true\n\
    \    }\n    if n == 46 {\n        return true\n    }\n    if n == 47 {\n     \
    \   return true\n    }\n    if n == 48 {\n        return true\n    }\n    if n\
    \ == 49 {\n        return true\n    }\n    if n == 50 {\n        return true\n\
    \    }\n    if n == 51 {\n        return true\n    }\n    if n == 52 {\n     \
    \   return true\n    }\n    if n == 53 {\n        return true\n    }\n    if n\
    \ == 54 {\n        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmpb4am1oz8.swift:200:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmpb4am1oz8.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmpb4am1oz8.swift:172:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmpb4am1oz8.swift:176:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824417
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i =\
    \ 2\n    var j = 3\n    var k = n\n    while i <= k {\n        if n % i == 0 {\n\
    \            return false\n        }\n        if j > i {\n            j += 2\n\
    \        }\n        i += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmp3jsrirm1/tmp3jsrirm1.swift:68: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbad96bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbad662b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbad662988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbad6617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3jsrirm1                        0x00005631e369a6fb <unavailable> + 5883

    5    libc.so.6                          0x00002abbadb57460 __libc_start_main +
    245

    6    tmp3jsrirm1                        0x00005631e3699ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824417
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    // TODO: implement this\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpebbhahsi/tmpebbhahsi.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac72f035c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac72ed2cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac72ed2c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac72ed2b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpebbhahsi                        0x000055ea00fdd227 <unavailable> + 4647

    5    libc.so.6                          0x00002ac72f221460 __libc_start_main +
    245

    6    tmpebbhahsi                        0x000055ea00fdce69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824418
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    if n % 3 == 0 {\n        return false\n    }\n    var i =\
    \ 5\n    var j = 3\n    var k = 3\n    while i <= n {\n        if n % i == 0 {\n\
    \            return false\n        }\n        if j > n / 2 {\n            return\
    \ false\n        }\n        if k <= n / i {\n            return false\n      \
    \  }\n        i += 2\n        j += 2\n        k += 2\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmp6sawqfqr/tmp6sawqfqr.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b585785cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5857553b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5857553988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b58575527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6sawqfqr                        0x0000557cc87db2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b5857a48460 __libc_start_main +
    245

    6    tmp6sawqfqr                        0x0000557cc87daef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824418
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \n    var i = 2\n    var j = 2\n    var k = n - 1\n\n    while i <= k {\n    \
    \    if n % i == 0 {\n            return false\n        }\n\n        if j > i\
    \ {\n            j += i\n        }\n\n        i += 2\n    }\n\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpid6jra4k/tmpid6jra4k.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2235283c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2234f7ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2234f7a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2234f797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpid6jra4k                        0x00005639177c06fb <unavailable> + 5883

    5    libc.so.6                          0x00002b223546f460 __libc_start_main +
    245

    6    tmpid6jra4k                        0x00005639177bfef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824418
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n == 3 {\n        return true\n    }\n    if n % 2 == 0\
    \ {\n        return false\n    }\n    if n % 3 == 0 {\n        return false\n\
    \    }\n    if n % 5 == 0 {\n        return false\n    }\n    if n % 7 == 0 {\n\
    \        return false\n    }\n    if n % 11 == 0 {\n        return false\n   \
    \ }\n    if n % 13 == 0 {\n        return false\n    }\n    if n % 17 == 0 {\n\
    \        return false\n    }\n    if n % 19 == 0 {\n        return false\n   \
    \ }\n    if n % 23 == 0 {\n        return false\n    }\n    if n % 29 == 0 {\n\
    \        return false\n    }\n    if n % 31 == 0 {\n        return false\n   \
    \ }\n    if n % 37 == 0 {\n        return false\n    }\n    if n % 41 == 0 {\n\
    \        return false\n    }\n    if n % 43 == 0 {\n        return false\n   \
    \ }\n    if n % 47 == 0 {\n        return false\n    }\n    if n % 53 == 0 {\n\
    \        return false\n    }\n    if n % 59 == 0 {\n        return false\n   \
    \ }\n    if n % 61 == 0 {\n        return false\n    }\n    if n % 67 == 0 {\n\
    \        return false\n    }\n    if n % 71 == 0 {\n        return false\n   \
    \ }\n    if n % 73 == 0 {\n        return false\n    }\n    if n % 79 == 0 {\n\
    \        return false\n    }\n    if n % 83 == 0 {\n        return false\n   \
    \ }\n    if n % 89 == 0 {\n        return false\n    }\n    if n % 97 == 0 {\n\
    \        return false\n    }\n    if n % 101 == 0 {\n        return false\n  \
    \  }\n    if n % 103 == 0 {\n        return false\n    }\n    if n % 107 == 0\
    \ {\n        return false\n    }\n    if n % 109 == 0 {\n        return false\n\
    \    }\n    if n % 113 == 0 {\n        return false\n    }\n    if n % 117 ==\
    \ 0 {\n        return false\n    }\n    if n % 121 == 0 {\n        return false\n\
    \    }\n    if n % 123 == 0 {\n        return false\n    }\n    if n % 127 ==\
    \ 0 {\n        return false\n    }\n    if n % 131 == 0 {\n        return false\n\
    \    }\n    if n % 137 == 0 {\n        return false\n    }\n    if n % 139 ==\
    \ 0 {\n        return false\n    }\n    if n % 143 == 0 {\n        return false\n\
    \    }\n    if n % 147 == 0 {\n        return false\n    }\n    if n % 151 ==\
    \ 0 {\n        return false\n    }\n    if n % 157 == 0 {\n        return false\n\
    \    }\n    if n % 161 == 0 {\n        return false\n    }\n    if n % 165 ==\
    \ 0 {\n        return false\n    }\n    if n % 169 == 0 {\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpyi_uyrxz.swift:187:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmpyi_uyrxz.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmpyi_uyrxz.swift:163:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824417
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \n    if n == 2 {\n        return true\n    }\n\n    if n == 3 {\n        return\
    \ true\n    }\n\n    if n % 2 == 0 {\n        return false\n    }\n\n    var i\
    \ = 5\n    var j = 3\n    var k = n - 1\n\n    while i <= k {\n        if n %\
    \ i == 0 {\n            return false\n        }\n\n        if i == j {\n     \
    \       return true\n        }\n\n        i += 2\n        j += 2\n    }\n\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824418
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i =\
    \ 2\n    var j = 3\n    var k = n - 1\n    while i <= k {\n        if n % i ==\
    \ 0 {\n            return false\n        }\n        i += 2\n    }\n    for i =\
    \ 2; i <= n / 2; i += 2 {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmposglg_k3.swift:39:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 2; i <= n / 2; i += 2 {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824417
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 3\n    var s = 2\n    while i <= n {\n        if n\
    \ % i == 0 {\n            return false\n        }\n        s += 2\n        i +=\
    \ s\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpbghdbju6/tmpbghdbju6.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0d650bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0d6202b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0d6202988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0d62017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbghdbju6                        0x0000556f5454d6fb <unavailable> + 5883

    5    libc.so.6                          0x00002ab0d66f7460 __libc_start_main +
    245

    6    tmpbghdbju6                        0x0000556f5454cef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824418
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i = 5\n\
    \    var j = (2 * i) + 1\n    while j < n {\n        if n % j == 0 {\n       \
    \     return false\n        }\n        i += 2\n        j = (2 * i) + 1\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmphh2vym8h/tmphh2vym8h.swift:65: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc83270c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc82f67b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc82f67988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc82f667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphh2vym8h                        0x000055cb17ffd6fb <unavailable> + 5883

    5    libc.so.6                          0x00002abc8345c460 __libc_start_main +
    245

    6    tmphh2vym8h                        0x000055cb17ffcef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824418
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i =\
    \ 2\n    var j = 3\n    var k = n - 1\n    while i <= k {\n        if n % i ==\
    \ 0 {\n            return false\n        }\n        i += 2\n        j += 2\n \
    \   }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmp7b6k7f9a/tmp7b6k7f9a.swift:66: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafff62dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafff324b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafff324988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafff3237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7b6k7f9a                        0x000055cf104066fb <unavailable> + 5883

    5    libc.so.6                          0x00002aafff819460 __libc_start_main +
    245

    6    tmp7b6k7f9a                        0x000055cf10405ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824417
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i =\
    \ 2\n    var j = 3\n    var k = n - 1\n    while i <= k {\n        if n % i ==\
    \ 0 {\n            return false\n        }\n        if i == k {\n            return\
    \ true\n        }\n        i += 2\n        j += 2\n    }\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmp2rispe9s/tmp2rispe9s.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34c534cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b34c5043b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b34c5043988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34c50427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2rispe9s                        0x000055b6317036fb <unavailable> + 5883

    5    libc.so.6                          0x00002b34c5538460 __libc_start_main +
    245

    6    tmp2rispe9s                        0x000055b631702ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824418
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n == 0 {\n        return false\n    }\n    if n == 3 {\n\
    \        return true\n    }\n    if n == 4 {\n        return true\n    }\n   \
    \ if n == 5 {\n        return true\n    }\n    if n == 6 {\n        return true\n\
    \    }\n    if n == 7 {\n        return true\n    }\n    if n == 8 {\n       \
    \ return true\n    }\n    if n == 9 {\n        return true\n    }\n    if n%2\
    \ == 0 {\n        return false\n    }\n    if n%3 == 0 {\n        return false\n\
    \    }\n    if n%5 == 0 {\n        return false\n    }\n    if n%7 == 0 {\n  \
    \      return false\n    }\n    if n%11 == 0 {\n        return false\n    }\n\
    \    if n%13 == 0 {\n        return false\n    }\n    if n%17 == 0 {\n       \
    \ return false\n    }\n    if n%19 == 0 {\n        return false\n    }\n    if\
    \ n%23 == 0 {\n        return false\n    }\n    if n%29 == 0 {\n        return\
    \ false\n    }\n    if n%31 == 0 {\n        return false\n    }\n    if n%37 ==\
    \ 0 {\n        return false\n    }\n    if n%41 == 0 {\n        return false\n\
    \    }\n    if n%43 == 0 {\n        return false\n    }\n    if n%47 == 0 {\n\
    \        return false\n    }\n    if n%53 == 0 {\n        return false\n    }\n\
    \    if n%59 == 0 {\n        return false\n    }\n    if n%61 == 0 {\n       \
    \ return false\n    }\n    if n%67 == 0 {\n        return false\n    }\n    if\
    \ n%71 == 0 {\n        return false\n    }\n    if n%73 == 0 {\n        return\
    \ false\n    }\n    if n%79 == 0 {\n        return false\n    }\n    if n%83 ==\
    \ 0 {\n        return false\n    }\n    if n%89 == 0 {\n        return false\n\
    \    }\n    if n%97 == 0 {\n        return false\n    }\n    if n%101 == 0 {\n\
    \        return false\n    }\n    if n%103 == 0 {\n        return false\n    }\n\
    \    if n%107 == 0 {\n        return false\n    }\n    if n%109 == 0 {\n     \
    \   return false\n    }\n    if n%113 == 0 {\n        return false\n    }\n  \
    \  if n%117 == 0 {\n        return false\n    }\n    if n%121 == 0 {\n       \
    \ return false\n    }\n    if n%123 == 0 {\n        return false\n    }\n    if\
    \ n%127 == 0 {\n        return false\n    }\n    if n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_msg45id.swift:153:9: error: expected '{' after 'if' condition\n\
    \    if n\n        ^\n/tmp/tmp_msg45id.swift:153:8: error: type 'Int' cannot be\
    \ used as a boolean; test for '!= 0' instead\n    if n\n       ^\n       ( !=\
    \ 0)\n"
  stdout: ''
  timestamp: 1659824417
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    if n % 5 == 0 {\n        return false\n\
    \    }\n    if n % 7 == 0 {\n        return false\n    }\n    if n % 11 == 0 {\n\
    \        return false\n    }\n    if n % 13 == 0 {\n        return false\n   \
    \ }\n    if n % 17 == 0 {\n        return false\n    }\n    if n % 19 == 0 {\n\
    \        return false\n    }\n    if n % 23 == 0 {\n        return false\n   \
    \ }\n    if n % 29 == 0 {\n        return false\n    }\n    if n % 31 == 0 {\n\
    \        return false\n    }\n    if n % 37 == 0 {\n        return false\n   \
    \ }\n    if n % 41 == 0 {\n        return false\n    }\n    if n % 43 == 0 {\n\
    \        return false\n    }\n    if n % 47 == 0 {\n        return false\n   \
    \ }\n    if n % 53 == 0 {\n        return false\n    }\n    if n % 59 == 0 {\n\
    \        return false\n    }\n    if n % 61 == 0 {\n        return false\n   \
    \ }\n    if n % 67 == 0 {\n        return false\n    }\n    if n % 71 == 0 {\n\
    \        return false\n    }\n    if n % 73 == 0 {\n        return false\n   \
    \ }\n    if n % 79 == 0 {\n        return false\n    }\n    if n % 83 == 0 {\n\
    \        return false\n    }\n    if n % 89 == 0 {\n        return false\n   \
    \ }\n    if n % 97 == 0 {\n        return false\n    }\n    if n % 101 == 0 {\n\
    \        return false\n    }\n    if n % 103 == 0 {\n        return false\n  \
    \  }\n    if n % 107 == 0 {\n        return false\n    }\n    if n % 109 == 0\
    \ {\n        return false\n    }\n    if n % 113 == 0 {\n        return false\n\
    \    }\n    if n % 117 == 0 {\n        return false\n    }\n    if n % 121 ==\
    \ 0 {\n        return false\n    }\n    if n % 123 == 0 {\n        return false\n\
    \    }\n    if n % 127 == 0 {\n        return false\n    }\n    if n % 131 ==\
    \ 0 {\n        return false\n    }\n    if n % 137 == 0 {\n        return false\n\
    \    }\n    if n % 139 == 0 {\n        return false\n    }\n    if n % 143 ==\
    \ 0 {\n        return false\n    }\n    if n % 147 == 0 {\n        return false\n\
    \    }\n    if n % 151 == 0 {\n        return false\n    }\n    if n % 157 ==\
    \ 0 {\n        return false\n    }\n    if n % 161 == 0 {\n        return false\n\
    \    }\n    if n % 165 == 0 {\n        return false\n    }\n    if n % 169 ==\
    \ 0 {\n        return false\n    }\n    if n % 17\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7j9hyb39.swift:159:14: error: expected '{' after 'if' condition\n\
    \    if n % 17\n             ^\n/tmp/tmp7j9hyb39.swift:159:10: error: type 'Int'\
    \ cannot be used as a boolean; test for '!= 0' instead\n    if n % 17\n      \
    \   ^\n       ((    ) != 0)\n"
  stdout: ''
  timestamp: 1659824417
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n == 4 {\n        return true\n    }\n    if n == 6 {\n\
    \        return true\n    }\n    if n == 8 {\n        return true\n    }\n   \
    \ if n == 9 {\n        return true\n    }\n    if n == 10 {\n        return true\n\
    \    }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n     \
    \   return true\n    }\n    if n == 13 {\n        return true\n    }\n    if n\
    \ == 14 {\n        return true\n    }\n    if n == 15 {\n        return true\n\
    \    }\n    if n == 16 {\n        return true\n    }\n    if n == 17 {\n     \
    \   return true\n    }\n    if n == 18 {\n        return true\n    }\n    if n\
    \ == 19 {\n        return true\n    }\n    if n == 20 {\n        return true\n\
    \    }\n    if n == 21 {\n        return true\n    }\n    if n == 22 {\n     \
    \   return true\n    }\n    if n == 23 {\n        return true\n    }\n    if n\
    \ == 24 {\n        return true\n    }\n    if n == 25 {\n        return true\n\
    \    }\n    if n == 26 {\n        return true\n    }\n    if n == 27 {\n     \
    \   return true\n    }\n    if n == 28 {\n        return true\n    }\n    if n\
    \ == 29 {\n        return true\n    }\n    if n == 30 {\n        return true\n\
    \    }\n    if n == 31 {\n        return true\n    }\n    if n == 32 {\n     \
    \   return true\n    }\n    if n == 33 {\n        return true\n    }\n    if n\
    \ == 34 {\n        return true\n    }\n    if n == 35 {\n        return true\n\
    \    }\n    if n == 36 {\n        return true\n    }\n    if n == 37 {\n     \
    \   return true\n    }\n    if n == 38 {\n        return true\n    }\n    if n\
    \ == 39 {\n        return true\n    }\n    if n == 40 {\n        return true\n\
    \    }\n    if n == 41 {\n        return true\n    }\n    if n == 42 {\n     \
    \   return true\n    }\n    if n == 43 {\n        return true\n    }\n    if n\
    \ == 44 {\n        return true\n    }\n    if n == 45 {\n        return true\n\
    \    }\n    if n == 46 {\n        return true\n    }\n    if n == 47 {\n     \
    \   return true\n    }\n    if n == 48 {\n        return true\n    }\n    if n\
    \ == 49 {\n        return true\n    }\n    if n == 50 {\n        return true\n\
    \    }\n    if n == 51 {\n        return true\n    }\n    if n == 52 {\n     \
    \   return true\n    }\n    if n == 53 {\n        return true\n    }\n    if n\
    \ == 54 {\n        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnillu_vp.swift:200:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmpnillu_vp.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmpnillu_vp.swift:172:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmpnillu_vp.swift:176:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824417
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n == 3 {\n        return true\n    }\n    if n % 2 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    var j = (3 * n) + 1\n   \
    \ var k = (3 * n) + 2\n    while i <= j {\n        if n % i == 0 {\n         \
    \   return false\n        }\n        i += 2\n    }\n    while k <= j {\n     \
    \   if n % k == 0 {\n            return false\n        }\n        k += 2\n   \
    \ }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmp6w9q6bjc/tmp6w9q6bjc.swift:65: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86d01fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86cfef5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86cfef5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86cfef47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6w9q6bjc                        0x0000563dcf7b02b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b86d03ea460 __libc_start_main +
    245

    6    tmp6w9q6bjc                        0x0000563dcf7afef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824418
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    var s = 2\n    while i * i <= n {\n       \
    \ if n % i == 0 {\n            return false\n        }\n        i += s\n     \
    \   s += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmpv96j75_i/tmpv96j75_i.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba488581c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba488278b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba488278988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4882777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv96j75_i                        0x00005632a278c80a <unavailable> + 6154

    5    libc.so.6                          0x00002ba48876d460 __libc_start_main +
    245

    6    tmpv96j75_i                        0x00005632a278bef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824418
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    var i = 5\n    var s: Int64 = 1\n \
    \   while i * i <= n {\n        if n % i == 0 {\n            return false\n  \
    \      }\n        s += i\n        i += 6\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmprazt6dyj.swift:39:14: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Int64'\n        s += i\n             ^\n        \
    \     Int64( )\n"
  stdout: ''
  timestamp: 1659824417
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n == 0 {\n        return false\n    }\n    if n == 3 {\n\
    \        return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n\
    \    if n % 3 == 0 {\n        return false\n    }\n    if n % 5 == 0 {\n     \
    \   return false\n    }\n    if n % 7 == 0 {\n        return false\n    }\n  \
    \  if n % 11 == 0 {\n        return false\n    }\n    if n % 13 == 0 {\n     \
    \   return false\n    }\n    if n % 17 == 0 {\n        return false\n    }\n \
    \   if n % 19 == 0 {\n        return false\n    }\n    if n % 23 == 0 {\n    \
    \    return false\n    }\n    if n % 29 == 0 {\n        return false\n    }\n\
    \    if n % 31 == 0 {\n        return false\n    }\n    if n % 37 == 0 {\n   \
    \     return false\n    }\n    if n % 41 == 0 {\n        return false\n    }\n\
    \    if n % 43 == 0 {\n        return false\n    }\n    if n % 47 == 0 {\n   \
    \     return false\n    }\n    if n % 53 == 0 {\n        return false\n    }\n\
    \    if n % 59 == 0 {\n        return false\n    }\n    if n % 61 == 0 {\n   \
    \     return false\n    }\n    if n % 67 == 0 {\n        return false\n    }\n\
    \    if n % 71 == 0 {\n        return false\n    }\n    if n % 73 == 0 {\n   \
    \     return false\n    }\n    if n % 79 == 0 {\n        return false\n    }\n\
    \    if n % 83 == 0 {\n        return false\n    }\n    if n % 89 == 0 {\n   \
    \     return false\n    }\n    if n % 97 == 0 {\n        return false\n    }\n\
    \    if n % 101 == 0 {\n        return false\n    }\n    if n % 103 == 0 {\n \
    \       return false\n    }\n    if n % 107 == 0 {\n        return false\n   \
    \ }\n    if n % 109 == 0 {\n        return false\n    }\n    if n % 113 == 0 {\n\
    \        return false\n    }\n    if n % 117 == 0 {\n        return false\n  \
    \  }\n    if n % 121 == 0 {\n        return false\n    }\n    if n % 123 == 0\
    \ {\n        return false\n    }\n    if n % 127 == 0 {\n        return false\n\
    \    }\n    if n % 131 == 0 {\n        return false\n    }\n    if n % 137 ==\
    \ 0 {\n        return false\n    }\n    if n % 139 == 0 {\n        return false\n\
    \    }\n    if n % 143 == 0 {\n        return false\n    }\n    if n % 147 ==\
    \ 0 {\n        return false\n    }\n    if n % 151 == 0 {\n        return false\n\
    \    }\n    if n % 157 == 0 {\n        return false\n    }\n    if n % 159 ==\
    \ 0 {\n        return false\n    }\n    if n % 163 == 0 {\n        return \n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpevd83aac.swift:188:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmpevd83aac.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmpevd83aac.swift:160:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmpevd83aac.swift:164:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824418
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i = 5\n\
    \    var j = (n - 1) / 2\n    var k = (n - 1) / 2\n    while i <= k {\n      \
    \  if n % i == 0 {\n            return false\n        }\n        i += 2\n    \
    \    j += 2\n        k -= 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824418
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n == 3 {\n        return true\n    }\n    if n == 4 {\n\
    \        return true\n    }\n    if n == 5 {\n        return true\n    }\n   \
    \ if n == 6 {\n        return true\n    }\n    if n == 7 {\n        return true\n\
    \    }\n    if n == 8 {\n        return true\n    }\n    if n == 9 {\n       \
    \ return true\n    }\n    if n == 10 {\n        return true\n    }\n    if n ==\
    \ 11 {\n        return true\n    }\n    if n == 12 {\n        return true\n  \
    \  }\n    if n == 13 {\n        return true\n    }\n    if n == 14 {\n       \
    \ return true\n    }\n    if n == 15 {\n        return true\n    }\n    if n ==\
    \ 16 {\n        return true\n    }\n    if n == 17 {\n        return true\n  \
    \  }\n    if n == 18 {\n        return true\n    }\n    if n == 19 {\n       \
    \ return true\n    }\n    if n == 20 {\n        return true\n    }\n    if n ==\
    \ 21 {\n        return true\n    }\n    if n == 22 {\n        return true\n  \
    \  }\n    if n == 23 {\n        return true\n    }\n    if n == 24 {\n       \
    \ return true\n    }\n    if n == 25 {\n        return true\n    }\n    if n ==\
    \ 26 {\n        return true\n    }\n    if n == 27 {\n        return true\n  \
    \  }\n    if n == 28 {\n        return true\n    }\n    if n == 29 {\n       \
    \ return true\n    }\n    if n == 30 {\n        return true\n    }\n    if n ==\
    \ 31 {\n        return true\n    }\n    if n == 32 {\n        return true\n  \
    \  }\n    if n == 33 {\n        return true\n    }\n    if n == 34 {\n       \
    \ return true\n    }\n    if n == 35 {\n        return true\n    }\n    if n ==\
    \ 36 {\n        return true\n    }\n    if n == 37 {\n        return true\n  \
    \  }\n    if n == 38 {\n        return true\n    }\n    if n == 39 {\n       \
    \ return true\n    }\n    if n == 40 {\n        return true\n    }\n    if n ==\
    \ 41 {\n        return true\n    }\n    if n == 42 {\n        return true\n  \
    \  }\n    if n == 43 {\n        return true\n    }\n    if n == 44 {\n       \
    \ return true\n    }\n    if n == 45 {\n        return true\n    }\n    if n ==\
    \ 46 {\n        return true\n    }\n    if n == 47 {\n        return true\n  \
    \  }\n    if n == 48 {\n        return true\n    }\n    if n == 49 {\n       \
    \ return true\n    }\n    if n == 50 {\n        return true\n    }\n    if n ==\
    \ 51 {\n        return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2argpmx7.swift:200:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmp2argpmx7.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmp2argpmx7.swift:176:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824418
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    var i = 5\n    var s = 2\n    while\
    \ i * i <= n {\n        if n % i == 0 {\n            return false\n        }\n\
    \        if i == 3 {\n            if n % i == 0 {\n                return false\n\
    \            }\n        }\n        i += s\n        s *= 2\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824418
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n == 3 {\n        return true\n    }\n    if n % 2 == 0\
    \ {\n        return false\n    }\n    if n % 3 == 0 {\n        return false\n\
    \    }\n    if n % 5 == 0 {\n        return false\n    }\n    if n % 7 == 0 {\n\
    \        return false\n    }\n    if n % 11 == 0 {\n        return false\n   \
    \ }\n    if n % 13 == 0 {\n        return false\n    }\n    if n % 17 == 0 {\n\
    \        return false\n    }\n    if n % 19 == 0 {\n        return false\n   \
    \ }\n    if n % 23 == 0 {\n        return false\n    }\n    if n % 29 == 0 {\n\
    \        return false\n    }\n    if n % 31 == 0 {\n        return false\n   \
    \ }\n    if n % 37 == 0 {\n        return false\n    }\n    if n % 41 == 0 {\n\
    \        return false\n    }\n    if n % 43 == 0 {\n        return false\n   \
    \ }\n    if n % 47 == 0 {\n        return false\n    }\n    if n % 53 == 0 {\n\
    \        return false\n    }\n    if n % 59 == 0 {\n        return false\n   \
    \ }\n    if n % 61 == 0 {\n        return false\n    }\n    if n % 67 == 0 {\n\
    \        return false\n    }\n    if n % 71 == 0 {\n        return false\n   \
    \ }\n    if n % 73 == 0 {\n        return false\n    }\n    if n % 79 == 0 {\n\
    \        return false\n    }\n    if n % 83 == 0 {\n        return false\n   \
    \ }\n    if n % 89 == 0 {\n        return false\n    }\n    if n % 97 == 0 {\n\
    \        return false\n    }\n    if n % 101 == 0 {\n        return false\n  \
    \  }\n    if n % 103 == 0 {\n        return false\n    }\n    if n % 107 == 0\
    \ {\n        return false\n    }\n    if n % 109 == 0 {\n        return false\n\
    \    }\n    if n % 113 == 0 {\n        return false\n    }\n    if n % 117 ==\
    \ 0 {\n        return false\n    }\n    if n % 121 == 0 {\n        return false\n\
    \    }\n    if n % 127 == 0 {\n        return false\n    }\n    if n % 131 ==\
    \ 0 {\n        return false\n    }\n    if n % 137 == 0 {\n        return false\n\
    \    }\n    if n % 141 == 0 {\n        return false\n    }\n    if n % 147 ==\
    \ 0 {\n        return false\n    }\n    if n % 151 == 0 {\n        return false\n\
    \    }\n    if n % 157 == 0 {\n        return false\n    }\n    if n % 161 ==\
    \ 0 {\n        return false\n    }\n    if n % 167 == 0 {\n        return false\n\
    \    }\n    if n % 173 == 0 {\n        return false\n    }\n    if n % 179 ==\
    \ 0 {\n        return false\n    }\n    if n % 183 == 0 {\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpv9s69t5b.swift:187:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmpv9s69t5b.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmpv9s69t5b.swift:163:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824418
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n == 3 {\n        return true\n    }\n    if n % 2 == 0\
    \ {\n        return false\n    }\n    if n % 3 == 0 {\n        return false\n\
    \    }\n    var i = 5\n    var s = 2\n    while i * i <= n {\n        if n % i\
    \ == 0 {\n            return false\n        }\n        s += 2\n        i += 6\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpsn9d687l/tmpsn9d687l.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff207b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff204adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff204ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff204ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsn9d687l                        0x0000555e2d5c577d <unavailable> + 6013

    5    libc.so.6                          0x00002aff209a2460 __libc_start_main +
    245

    6    tmpsn9d687l                        0x0000555e2d5c4ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824417
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    var j = (3 * n) + 1\n    while i <= j {\n \
    \       if n % i == 0 {\n            return false\n        }\n        i += 6\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmp7oou8k1n/tmp7oou8k1n.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4c14660c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4c14357b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4c14357988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4c143567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7oou8k1n                        0x000055ea213112b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b4c1484c460 __libc_start_main +
    245

    6    tmp7oou8k1n                        0x000055ea21310ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824418
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n == 3 {\n        return true\n    }\n    if n % 2 == 0\
    \ {\n        return false\n    }\n    if n % 3 == 0 {\n        return false\n\
    \    }\n    var i = 5\n    var s = 2\n    while i * i <= n {\n        if n % i\
    \ == 0 {\n            return false\n        }\n        s += 2\n        i += 6\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpsn9d687l/tmpsn9d687l.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff207b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff204adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff204ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff204ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsn9d687l                        0x0000555e2d5c577d <unavailable> + 6013

    5    libc.so.6                          0x00002aff209a2460 __libc_start_main +
    245

    6    tmpsn9d687l                        0x0000555e2d5c4ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824417
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    var j = 3\n    while i * i <= n {\n       \
    \ if n % i == 0 {\n            return false\n        }\n        i += j\n     \
    \   j += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmppnbsd050/tmppnbsd050.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b41c0625c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b41c031cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b41c031c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b41c031b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppnbsd050                        0x00005597a4f4f77d <unavailable> + 6013

    5    libc.so.6                          0x00002b41c0811460 __libc_start_main +
    245

    6    tmppnbsd050                        0x00005597a4f4eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824418
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    var i = 5\n    var s = 2\n    while\
    \ i * i <= n {\n        if n % i == 0 {\n            return false\n        }\n\
    \        if i == 3 {\n            if n % i == 0 {\n                return false\n\
    \            }\n        }\n        i += s\n        s = 6 - s\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824418
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    if n % 5 == 0 {\n        return false\n\
    \    }\n    if n % 7 == 0 {\n        return false\n    }\n    if n % 11 == 0 {\n\
    \        return false\n    }\n    if n % 13 == 0 {\n        return false\n   \
    \ }\n    if n % 17 == 0 {\n        return false\n    }\n    if n % 19 == 0 {\n\
    \        return false\n    }\n    if n % 23 == 0 {\n        return false\n   \
    \ }\n    if n % 29 == 0 {\n        return false\n    }\n    if n % 31 == 0 {\n\
    \        return false\n    }\n    if n % 37 == 0 {\n        return false\n   \
    \ }\n    if n % 41 == 0 {\n        return false\n    }\n    if n % 43 == 0 {\n\
    \        return false\n    }\n    if n % 47 == 0 {\n        return false\n   \
    \ }\n    if n % 53 == 0 {\n        return false\n    }\n    if n % 59 == 0 {\n\
    \        return false\n    }\n    if n % 61 == 0 {\n        return false\n   \
    \ }\n    if n % 67 == 0 {\n        return false\n    }\n    if n % 71 == 0 {\n\
    \        return false\n    }\n    if n % 73 == 0 {\n        return false\n   \
    \ }\n    if n % 79 == 0 {\n        return false\n    }\n    if n % 83 == 0 {\n\
    \        return false\n    }\n    if n % 89 == 0 {\n        return false\n   \
    \ }\n    if n % 97 == 0 {\n        return false\n    }\n    if n % 101 == 0 {\n\
    \        return false\n    }\n    if n % 103 == 0 {\n        return false\n  \
    \  }\n    if n % 107 == 0 {\n        return false\n    }\n    if n % 109 == 0\
    \ {\n        return false\n    }\n    if n % 113 == 0 {\n        return false\n\
    \    }\n    if n % 117 == 0 {\n        return false\n    }\n    if n % 121 ==\
    \ 0 {\n        return false\n    }\n    if n % 123 == 0 {\n        return false\n\
    \    }\n    if n % 127 == 0 {\n        return false\n    }\n    if n % 131 ==\
    \ 0 {\n        return false\n    }\n    if n % 137 == 0 {\n        return false\n\
    \    }\n    if n % 139 == 0 {\n        return false\n    }\n    if n % 143 ==\
    \ 0 {\n        return false\n    }\n    if n % 147 == 0 {\n        return false\n\
    \    }\n    if n % 151 == 0 {\n        return false\n    }\n    if n % 157 ==\
    \ 0 {\n        return false\n    }\n    if n % 161 == 0 {\n        return false\n\
    \    }\n    if n % 165 == 0 {\n        return false\n    }\n    if n % 169 ==\
    \ 0 {\n        return false\n    }\n    if n % 17\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7j9hyb39.swift:159:14: error: expected '{' after 'if' condition\n\
    \    if n % 17\n             ^\n/tmp/tmp7j9hyb39.swift:159:10: error: type 'Int'\
    \ cannot be used as a boolean; test for '!= 0' instead\n    if n % 17\n      \
    \   ^\n       ((    ) != 0)\n"
  stdout: ''
  timestamp: 1659824417
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n == 3 {\n        return true\n    }\n    if n % 2 == 0\
    \ {\n        return false\n    }\n    if n % 3 == 0 {\n        return false\n\
    \    }\n    var i = 5\n    var j = (3 * n) + 1\n    var k = (3 * n) + 2\n    while\
    \ i <= j {\n        if i % n == 0 {\n            return false\n        }\n   \
    \     if k % n == 0 {\n            return false\n        }\n        i += 2\n \
    \       k += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmp5t4kbo5i/tmp5t4kbo5i.swift:66: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cc4026c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cc3d1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cc3d1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cc3d1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5t4kbo5i                        0x000055f1579312b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b7cc4212460 __libc_start_main +
    245

    6    tmp5t4kbo5i                        0x000055f157930ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824418
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    var i = 5\n    var j = 3\n    var k\
    \ = 2\n    while i * j <= n {\n        if n % i == 0 {\n            return false\n\
    \        }\n        if n % j == 0 {\n            return false\n        }\n   \
    \     if k % i == 0 {\n            return false\n        }\n        if k % j ==\
    \ 0 {\n            return false\n        }\n        i += 2\n        j += 2\n \
    \       k += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824417
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \n    if n == 2 {\n        return true\n    }\n\n    if n % 2 == 0 {\n       \
    \ return false\n    }\n\n    var i = 3\n    var p: Int\n\n    while i * i <= n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n\n        i\
    \ += 2\n    }\n\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824418
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    var k = n - 1\n    while i <=\
    \ k {\n        if n % i == 0 {\n            return false\n        }\n        if\
    \ i == k {\n            return true\n        }\n        i += j\n        j += 2\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmp0qask_gy/tmp0qask_gy.swift:67: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a917a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a9149ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1a9149a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1a914997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0qask_gy                        0x000056142c16577d <unavailable> + 6013

    5    libc.so.6                          0x00002b1a9198f460 __libc_start_main +
    245

    6    tmp0qask_gy                        0x000056142c164ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824418
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n == 0 {\n        return false\n    }\n    if n % 2 ==\
    \ 0 {\n        return false\n    }\n    if n % 3 == 0 {\n        return false\n\
    \    }\n    if n % 5 == 0 {\n        return false\n    }\n    if n % 7 == 0 {\n\
    \        return false\n    }\n    if n % 11 == 0 {\n        return false\n   \
    \ }\n    if n % 13 == 0 {\n        return false\n    }\n    if n % 17 == 0 {\n\
    \        return false\n    }\n    if n % 19 == 0 {\n        return false\n   \
    \ }\n    if n % 23 == 0 {\n        return false\n    }\n    if n % 29 == 0 {\n\
    \        return false\n    }\n    if n % 31 == 0 {\n        return false\n   \
    \ }\n    if n % 37 == 0 {\n        return false\n    }\n    if n % 41 == 0 {\n\
    \        return false\n    }\n    if n % 43 == 0 {\n        return false\n   \
    \ }\n    if n % 47 == 0 {\n        return false\n    }\n    if n % 53 == 0 {\n\
    \        return false\n    }\n    if n % 59 == 0 {\n        return false\n   \
    \ }\n    if n % 61 == 0 {\n        return false\n    }\n    if n % 67 == 0 {\n\
    \        return false\n    }\n    if n % 71 == 0 {\n        return false\n   \
    \ }\n    if n % 73 == 0 {\n        return false\n    }\n    if n % 79 == 0 {\n\
    \        return false\n    }\n    if n % 83 == 0 {\n        return false\n   \
    \ }\n    if n % 89 == 0 {\n        return false\n    }\n    if n % 97 == 0 {\n\
    \        return false\n    }\n    if n % 101 == 0 {\n        return false\n  \
    \  }\n    if n % 103 == 0 {\n        return false\n    }\n    if n % 107 == 0\
    \ {\n        return false\n    }\n    if n % 109 == 0 {\n        return false\n\
    \    }\n    if n % 113 == 0 {\n        return false\n    }\n    if n % 117 ==\
    \ 0 {\n        return false\n    }\n    if n % 121 == 0 {\n        return false\n\
    \    }\n    if n % 123 == 0 {\n        return false\n    }\n    if n % 127 ==\
    \ 0 {\n        return false\n    }\n    if n % 131 == 0 {\n        return false\n\
    \    }\n    if n % 137 == 0 {\n        return false\n    }\n    if n % 139 ==\
    \ 0 {\n        return false\n    }\n    if n % 143 == 0 {\n        return false\n\
    \    }\n    if n % 147 == 0 {\n        return false\n    }\n    if n % 151 ==\
    \ 0 {\n        return false\n    }\n    if n % 157 == 0 {\n        return false\n\
    \    }\n    if n % 161 == 0 {\n        return false\n    }\n    if n % 165 ==\
    \ 0 {\n        return false\n    }\n    if n % 169 == 0 {\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpeb9lz47x.swift:187:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmpeb9lz47x.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmpeb9lz47x.swift:163:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824418
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n\
    \        return true\n    }\n    if n == 6 {\n        return true\n    }\n   \
    \ if n == 7 {\n        return true\n    }\n    if n == 8 {\n        return true\n\
    \    }\n    if n == 9 {\n        return true\n    }\n    if n == 10 {\n      \
    \  return true\n    }\n    if n == 11 {\n        return true\n    }\n    if n\
    \ == 12 {\n        return true\n    }\n    if n == 13 {\n        return true\n\
    \    }\n    if n == 14 {\n        return true\n    }\n    if n == 15 {\n     \
    \   return true\n    }\n    if n == 16 {\n        return true\n    }\n    if n\
    \ == 17 {\n        return true\n    }\n    if n == 18 {\n        return true\n\
    \    }\n    if n == 19 {\n        return true\n    }\n    if n == 20 {\n     \
    \   return true\n    }\n    if n == 21 {\n        return true\n    }\n    if n\
    \ == 22 {\n        return true\n    }\n    if n == 23 {\n        return true\n\
    \    }\n    if n == 24 {\n        return true\n    }\n    if n == 25 {\n     \
    \   return true\n    }\n    if n == 26 {\n        return true\n    }\n    if n\
    \ == 27 {\n        return true\n    }\n    if n == 28 {\n        return true\n\
    \    }\n    if n == 29 {\n        return true\n    }\n    if n == 30 {\n     \
    \   return true\n    }\n    if n == 31 {\n        return true\n    }\n    if n\
    \ == 32 {\n        return true\n    }\n    if n == 33 {\n        return true\n\
    \    }\n    if n == 34 {\n        return true\n    }\n    if n == 35 {\n     \
    \   return true\n    }\n    if n == 36 {\n        return true\n    }\n    if n\
    \ == 37 {\n        return true\n    }\n    if n == 38 {\n        return true\n\
    \    }\n    if n == 39 {\n        return true\n    }\n    if n == 40 {\n     \
    \   return true\n    }\n    if n == 41 {\n        return true\n    }\n    if n\
    \ == 42 {\n        return true\n    }\n    if n == 43 {\n        return true\n\
    \    }\n    if n == 44 {\n        return true\n    }\n    if n == 45 {\n     \
    \   return true\n    }\n    if n == 46 {\n        return true\n    }\n    if n\
    \ == 47 {\n        return true\n    }\n    if n == 48 {\n        return true\n\
    \    }\n    if n == 49 {\n        return true\n    }\n    if n == 50 {\n     \
    \   return true\n    }\n    if n == 51 {\n        return true\n    }\n    if n\
    \ == 52 {\n        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4zpibvm4.swift:200:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmp4zpibvm4.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmp4zpibvm4.swift:172:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmp4zpibvm4.swift:176:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824417
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i =\
    \ 2\n    var j = 3\n    while i <= n {\n        if n % i == 0 {\n            return\
    \ false\n        }\n        i += j\n        j += 2\n    }\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpmklt173v/tmpmklt173v.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a7f859c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a7f550b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a7f550988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a7f54f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmklt173v                        0x0000558bd48402b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b3a7fa45460 __libc_start_main +
    245

    6    tmpmklt173v                        0x0000558bd483fef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824418
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 2\n    var m = 1\n    while i <= n\
    \ {\n        if n % i == 0 {\n            m = m * j\n        }\n        j = j\
    \ + 1\n        i = i + 1\n    }\n    if m == 1 {\n        return false\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpbnqqtnly/tmpbnqqtnly.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cf00a5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cefd9cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cefd9c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cefd9b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbnqqtnly                        0x0000564210d78243 <unavailable> + 4675

    5    libc.so.6                          0x00002b6cf0291460 __libc_start_main +
    245

    6    tmpbnqqtnly                        0x0000564210d77ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824418
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n\
    \        return true\n    }\n    if n == 6 {\n        return true\n    }\n   \
    \ if n == 7 {\n        return true\n    }\n    if n == 8 {\n        return true\n\
    \    }\n    if n == 9 {\n        return true\n    }\n    if n == 10 {\n      \
    \  return true\n    }\n    if n == 11 {\n        return true\n    }\n    if n\
    \ == 12 {\n        return true\n    }\n    if n == 13 {\n        return true\n\
    \    }\n    if n == 14 {\n        return true\n    }\n    if n == 15 {\n     \
    \   return true\n    }\n    if n == 16 {\n        return true\n    }\n    if n\
    \ == 17 {\n        return true\n    }\n    if n == 18 {\n        return true\n\
    \    }\n    if n == 19 {\n        return true\n    }\n    if n == 20 {\n     \
    \   return true\n    }\n    if n == 21 {\n        return true\n    }\n    if n\
    \ == 22 {\n        return true\n    }\n    if n == 23 {\n        return true\n\
    \    }\n    if n == 24 {\n        return true\n    }\n    if n == 25 {\n     \
    \   return true\n    }\n    if n == 26 {\n        return true\n    }\n    if n\
    \ == 27 {\n        return true\n    }\n    if n == 28 {\n        return true\n\
    \    }\n    if n == 29 {\n        return true\n    }\n    if n == 30 {\n     \
    \   return true\n    }\n    if n == 31 {\n        return true\n    }\n    if n\
    \ == 32 {\n        return true\n    }\n    if n == 33 {\n        return true\n\
    \    }\n    if n == 34 {\n        return true\n    }\n    if n == 35 {\n     \
    \   return true\n    }\n    if n == 36 {\n        return true\n    }\n    if n\
    \ == 37 {\n        return true\n    }\n    if n == 38 {\n        return true\n\
    \    }\n    if n == 39 {\n        return true\n    }\n    if n == 40 {\n     \
    \   return true\n    }\n    if n == 41 {\n        return true\n    }\n    if n\
    \ == 42 {\n        return true\n    }\n    if n == 43 {\n        return true\n\
    \    }\n    if n == 44 {\n        return true\n    }\n    if n == 45 {\n     \
    \   return true\n    }\n    if n == 46 {\n        return true\n    }\n    if n\
    \ == 47 {\n        return true\n    }\n    if n == 48 {\n        return true\n\
    \    }\n    if n == 49 {\n        return true\n    }\n    if n == 50 {\n     \
    \   return true\n    }\n    if n == 51 {\n        return true\n    }\n    if n\
    \ == 52 {\n        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4zpibvm4.swift:200:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmp4zpibvm4.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmp4zpibvm4.swift:172:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmp4zpibvm4.swift:176:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824417
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i =\
    \ 2\n    var j = 3\n    var k = n - 1\n    while i <= k {\n        if n % i ==\
    \ 0 {\n            return false\n        }\n        i += 2\n        j += 2\n \
    \   }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmp7b6k7f9a/tmp7b6k7f9a.swift:66: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafff62dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafff324b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafff324988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafff3237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7b6k7f9a                        0x000055cf104066fb <unavailable> + 5883

    5    libc.so.6                          0x00002aafff819460 __libc_start_main +
    245

    6    tmp7b6k7f9a                        0x000055cf10405ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824417
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n == 3 {\n        return true\n    }\n    if n % 2 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    var j = 3\n    var k = 3\n\
    \    while i <= n {\n        if n % i == 0 {\n            return false\n     \
    \   }\n        if i == j {\n            return true\n        }\n        if j ==\
    \ k {\n            return true\n        }\n        i += 2\n        j += 2\n  \
    \      k += 2\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmp_52kb3bm/tmp_52kb3bm.swift:73: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aae61676c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aae6136db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aae6136d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aae6136c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_52kb3bm                        0x0000558f20d70579 <unavailable> + 5497

    5    libc.so.6                          0x00002aae61862460 __libc_start_main +
    245

    6    tmp_52kb3bm                        0x0000558f20d6fef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824418
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    // TODO: Make this faster\n    if n < 2 {\n\
    \        return false\n    }\n\n    if n == 2 {\n        return true\n    }\n\n\
    \    if n == 3 {\n        return true\n    }\n\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n\n    var i = 5\n    var j = (n - 1) / 2\n\n    while i <= j {\n\
    \        if n % i == 0 {\n            return false\n        }\n\n        i = i\
    \ + 6\n        j = (n - 1) / 6\n    }\n\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmp1h5t9iys/tmp1h5t9iys.swift:75: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b852846ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8528161b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8528161988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85281607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1h5t9iys                        0x0000562cda85780a <unavailable> + 6154

    5    libc.so.6                          0x00002b8528656460 __libc_start_main +
    245

    6    tmp1h5t9iys                        0x0000562cda856ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824418
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n == 3 {\n        return true\n    }\n    if n % 2 == 0\
    \ {\n        return false\n    }\n    if n % 3 == 0 {\n        return false\n\
    \    }\n    var i = 5\n    var j = 3\n    var k = 3\n    while i * j <= n {\n\
    \        if n % i == 0 {\n            return false\n        }\n        if n %\
    \ j == 0 {\n            return false\n        }\n        if k == n {\n       \
    \     return true\n        }\n        i += 2\n        j += 2\n        k += 2\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpdts0cfec/tmpdts0cfec.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7ffd4a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7ffd197b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7ffd197988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7ffd1967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdts0cfec                        0x00005610e63302b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b7ffd68c460 __libc_start_main +
    245

    6    tmpdts0cfec                        0x00005610e632fef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824418
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    if n % 5 == 0 {\n        return false\n\
    \    }\n    if n % 7 == 0 {\n        return false\n    }\n    if n % 11 == 0 {\n\
    \        return false\n    }\n    if n % 13 == 0 {\n        return false\n   \
    \ }\n    if n % 17 == 0 {\n        return false\n    }\n    if n % 19 == 0 {\n\
    \        return false\n    }\n    if n % 23 == 0 {\n        return false\n   \
    \ }\n    if n % 29 == 0 {\n        return false\n    }\n    if n % 31 == 0 {\n\
    \        return false\n    }\n    if n % 37 == 0 {\n        return false\n   \
    \ }\n    if n % 41 == 0 {\n        return false\n    }\n    if n % 43 == 0 {\n\
    \        return false\n    }\n    if n % 47 == 0 {\n        return false\n   \
    \ }\n    if n % 53 == 0 {\n        return false\n    }\n    if n % 59 == 0 {\n\
    \        return false\n    }\n    if n % 61 == 0 {\n        return false\n   \
    \ }\n    if n % 67 == 0 {\n        return false\n    }\n    if n % 71 == 0 {\n\
    \        return false\n    }\n    if n % 73 == 0 {\n        return false\n   \
    \ }\n    if n % 79 == 0 {\n        return false\n    }\n    if n % 83 == 0 {\n\
    \        return false\n    }\n    if n % 89 == 0 {\n        return false\n   \
    \ }\n    if n % 97 == 0 {\n        return false\n    }\n    if n % 101 == 0 {\n\
    \        return false\n    }\n    if n % 103 == 0 {\n        return false\n  \
    \  }\n    if n % 107 == 0 {\n        return false\n    }\n    if n % 109 == 0\
    \ {\n        return false\n    }\n    if n % 113 == 0 {\n        return false\n\
    \    }\n    if n % 117 == 0 {\n        return false\n    }\n    if n % 121 ==\
    \ 0 {\n        return false\n    }\n    if n % 123 == 0 {\n        return false\n\
    \    }\n    if n % 127 == 0 {\n        return false\n    }\n    if n % 131 ==\
    \ 0 {\n        return false\n    }\n    if n % 137 == 0 {\n        return false\n\
    \    }\n    if n % 139 == 0 {\n        return false\n    }\n    if n % 143 ==\
    \ 0 {\n        return false\n    }\n    if n % 147 == 0 {\n        return false\n\
    \    }\n    if n % 151 == 0 {\n        return false\n    }\n    if n % 157 ==\
    \ 0 {\n        return false\n    }\n    if n % 159 == 0 {\n        return false\n\
    \    }\n    if n % 163 == 0 {\n        return false\n    }\n    if n % 167 ==\
    \ 0 {\n        return false\n    }\n    if n % 17\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9xs7xfpw.swift:159:14: error: expected '{' after 'if' condition\n\
    \    if n % 17\n             ^\n/tmp/tmp9xs7xfpw.swift:159:10: error: type 'Int'\
    \ cannot be used as a boolean; test for '!= 0' instead\n    if n % 17\n      \
    \   ^\n       ((    ) != 0)\n"
  stdout: ''
  timestamp: 1659824417
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n == 4 {\n        return true\n    }\n    if n == 6 {\n\
    \        return true\n    }\n    if n == 8 {\n        return true\n    }\n   \
    \ if n == 9 {\n        return true\n    }\n    if n == 10 {\n        return true\n\
    \    }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n     \
    \   return true\n    }\n    if n == 13 {\n        return true\n    }\n    if n\
    \ == 14 {\n        return true\n    }\n    if n == 15 {\n        return true\n\
    \    }\n    if n == 16 {\n        return true\n    }\n    if n == 17 {\n     \
    \   return true\n    }\n    if n == 18 {\n        return true\n    }\n    if n\
    \ == 19 {\n        return true\n    }\n    if n == 20 {\n        return true\n\
    \    }\n    if n == 21 {\n        return true\n    }\n    if n == 22 {\n     \
    \   return true\n    }\n    if n == 23 {\n        return true\n    }\n    if n\
    \ == 24 {\n        return true\n    }\n    if n == 25 {\n        return true\n\
    \    }\n    if n == 26 {\n        return true\n    }\n    if n == 27 {\n     \
    \   return true\n    }\n    if n == 28 {\n        return true\n    }\n    if n\
    \ == 29 {\n        return true\n    }\n    if n == 30 {\n        return true\n\
    \    }\n    if n == 31 {\n        return true\n    }\n    if n == 32 {\n     \
    \   return true\n    }\n    if n == 33 {\n        return true\n    }\n    if n\
    \ == 34 {\n        return true\n    }\n    if n == 35 {\n        return true\n\
    \    }\n    if n == 36 {\n        return true\n    }\n    if n == 37 {\n     \
    \   return true\n    }\n    if n == 38 {\n        return true\n    }\n    if n\
    \ == 39 {\n        return true\n    }\n    if n == 40 {\n        return true\n\
    \    }\n    if n == 41 {\n        return true\n    }\n    if n == 42 {\n     \
    \   return true\n    }\n    if n == 43 {\n        return true\n    }\n    if n\
    \ == 44 {\n        return true\n    }\n    if n == 45 {\n        return true\n\
    \    }\n    if n == 46 {\n        return true\n    }\n    if n == 47 {\n     \
    \   return true\n    }\n    if n == 48 {\n        return true\n    }\n    if n\
    \ == 49 {\n        return true\n    }\n    if n == 50 {\n        return true\n\
    \    }\n    if n == 51 {\n        return true\n    }\n    if n == 52 {\n     \
    \   return true\n    }\n    if n == 53 {\n        return true\n    }\n    if n\
    \ == 54 {\n        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnillu_vp.swift:200:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmpnillu_vp.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmpnillu_vp.swift:172:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmpnillu_vp.swift:176:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824417
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n\
    \        return true\n    }\n    if n == 6 {\n        return true\n    }\n   \
    \ if n == 7 {\n        return true\n    }\n    if n == 8 {\n        return true\n\
    \    }\n    if n == 9 {\n        return true\n    }\n    if n == 10 {\n      \
    \  return true\n    }\n    if n == 11 {\n        return true\n    }\n    if n\
    \ == 12 {\n        return true\n    }\n    if n == 13 {\n        return true\n\
    \    }\n    if n == 14 {\n        return true\n    }\n    if n == 15 {\n     \
    \   return true\n    }\n    if n == 16 {\n        return true\n    }\n    if n\
    \ == 17 {\n        return true\n    }\n    if n == 18 {\n        return true\n\
    \    }\n    if n == 19 {\n        return true\n    }\n    if n == 20 {\n     \
    \   return true\n    }\n    if n == 21 {\n        return true\n    }\n    if n\
    \ == 22 {\n        return true\n    }\n    if n == 23 {\n        return true\n\
    \    }\n    if n == 24 {\n        return true\n    }\n    if n == 25 {\n     \
    \   return true\n    }\n    if n == 26 {\n        return true\n    }\n    if n\
    \ == 27 {\n        return true\n    }\n    if n == 28 {\n        return true\n\
    \    }\n    if n == 29 {\n        return true\n    }\n    if n == 30 {\n     \
    \   return true\n    }\n    if n == 31 {\n        return true\n    }\n    if n\
    \ == 32 {\n        return true\n    }\n    if n == 33 {\n        return true\n\
    \    }\n    if n == 34 {\n        return true\n    }\n    if n == 35 {\n     \
    \   return true\n    }\n    if n == 36 {\n        return true\n    }\n    if n\
    \ == 37 {\n        return true\n    }\n    if n == 38 {\n        return true\n\
    \    }\n    if n == 39 {\n        return true\n    }\n    if n == 40 {\n     \
    \   return true\n    }\n    if n == 41 {\n        return true\n    }\n    if n\
    \ == 42 {\n        return true\n    }\n    if n == 43 {\n        return true\n\
    \    }\n    if n == 44 {\n        return true\n    }\n    if n == 45 {\n     \
    \   return true\n    }\n    if n == 46 {\n        return true\n    }\n    if n\
    \ == 47 {\n        return true\n    }\n    if n == 48 {\n        return true\n\
    \    }\n    if n == 49 {\n        return true\n    }\n    if n == 50 {\n     \
    \   return true\n    }\n    if n == 51 {\n        return true\n    }\n    if n\
    \ == 52 {\n        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmprp0b534_.swift:200:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmprp0b534_.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmprp0b534_.swift:172:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmprp0b534_.swift:176:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824417
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    var j = (n - 1) / 2\n    while i <= j {\n \
    \       if n % i == 0 {\n            return false\n        }\n        i += 2\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824418
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \n    if n == 2 {\n        return true\n    }\n\n    if n % 2 == 0 {\n       \
    \ return false\n    }\n\n    var i = 2\n    var j = 3\n    var k = 3\n\n    while\
    \ i <= n {\n        if n % i == 0 {\n            return false\n        }\n\n \
    \       if k % i == 0 {\n            return false\n        }\n\n        i += j\n\
    \        j += 2\n        k += 2\n    }\n\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpq_taefz2/tmpq_taefz2.swift:65: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4e139d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4e136cfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4e136cf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4e136ce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq_taefz2                        0x000055fcff1932b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b4e13bc4460 __libc_start_main +
    245

    6    tmpq_taefz2                        0x000055fcff192ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824418
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    var i = 5\n    var j = 3\n    var k\
    \ = 2\n    while i * j <= n {\n        if n % i == 0 {\n            return false\n\
    \        }\n        if n % j == 0 {\n            return false\n        }\n   \
    \     if k % 2 == 0 {\n            return false\n        }\n        i = i + 1\n\
    \        j = j + 2\n        k = k + 2\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmp1n1odo2e/tmp1n1odo2e.swift:67: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5bac6bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5bac3b2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5bac3b2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5bac3b17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1n1odo2e                        0x00005635a7d0a2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b5bac8a7460 __libc_start_main +
    245

    6    tmp1n1odo2e                        0x00005635a7d09ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824418
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n == 3 {\n        return true\n    }\n    if n % 2 == 0\
    \ {\n        return false\n    }\n    if n % 3 == 0 {\n        return false\n\
    \    }\n    if n % 5 == 0 {\n        return false\n    }\n    if n % 7 == 0 {\n\
    \        return false\n    }\n    if n % 11 == 0 {\n        return false\n   \
    \ }\n    if n % 13 == 0 {\n        return false\n    }\n    if n % 17 == 0 {\n\
    \        return false\n    }\n    if n % 19 == 0 {\n        return false\n   \
    \ }\n    if n % 23 == 0 {\n        return false\n    }\n    if n % 29 == 0 {\n\
    \        return false\n    }\n    if n % 31 == 0 {\n        return false\n   \
    \ }\n    if n % 37 == 0 {\n        return false\n    }\n    if n % 41 == 0 {\n\
    \        return false\n    }\n    if n % 43 == 0 {\n        return false\n   \
    \ }\n    if n % 47 == 0 {\n        return false\n    }\n    if n % 53 == 0 {\n\
    \        return false\n    }\n    if n % 59 == 0 {\n        return false\n   \
    \ }\n    if n % 61 == 0 {\n        return false\n    }\n    if n % 67 == 0 {\n\
    \        return false\n    }\n    if n % 71 == 0 {\n        return false\n   \
    \ }\n    if n % 73 == 0 {\n        return false\n    }\n    if n % 79 == 0 {\n\
    \        return false\n    }\n    if n % 83 == 0 {\n        return false\n   \
    \ }\n    if n % 89 == 0 {\n        return false\n    }\n    if n % 97 == 0 {\n\
    \        return false\n    }\n    if n % 101 == 0 {\n        return false\n  \
    \  }\n    if n % 103 == 0 {\n        return false\n    }\n    if n % 107 == 0\
    \ {\n        return false\n    }\n    if n % 109 == 0 {\n        return false\n\
    \    }\n    if n % 113 == 0 {\n        return false\n    }\n    if n % 117 ==\
    \ 0 {\n        return false\n    }\n    if n % 121 == 0 {\n        return false\n\
    \    }\n    if n % 123 == 0 {\n        return false\n    }\n    if n % 127 ==\
    \ 0 {\n        return false\n    }\n    if n % 131 == 0 {\n        return false\n\
    \    }\n    if n % 137 == 0 {\n        return false\n    }\n    if n % 139 ==\
    \ 0 {\n        return false\n    }\n    if n % 143 == 0 {\n        return false\n\
    \    }\n    if n % 147 == 0 {\n        return false\n    }\n    if n % 151 ==\
    \ 0 {\n        return false\n    }\n    if n % 157 == 0 {\n        return false\n\
    \    }\n    if n % 161 == 0 {\n        return false\n    }\n    if n % 165 ==\
    \ 0 {\n        return false\n    }\n    if n % 169 == 0 {\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpyi_uyrxz.swift:187:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmpyi_uyrxz.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmpyi_uyrxz.swift:163:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824417
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i =\
    \ 2\n    var j = 3\n    var k = n\n    while i <= k {\n        if n % i == 0 {\n\
    \            return false\n        }\n        if j % i == 0 {\n            return\
    \ false\n        }\n        i += 2\n        j += 2\n    }\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmp10y2ggan/tmp10y2ggan.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3d7e78c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3d7b6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3d7b6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3d7b6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp10y2ggan                        0x000055786092d6fb <unavailable> + 5883

    5    libc.so.6                          0x00002ab3d8064460 __libc_start_main +
    245

    6    tmp10y2ggan                        0x000055786092cef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824418
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    var k = n - 1\n    while i <=\
    \ k {\n        if n % i == 0 {\n            return false\n        }\n        i\
    \ += j\n        j += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmplzj64lwk/tmplzj64lwk.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e32679c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e32370b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e32370988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e3236f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplzj64lwk                        0x00005640d36fa77d <unavailable> + 6013

    5    libc.so.6                          0x00002b5e32865460 __libc_start_main +
    245

    6    tmplzj64lwk                        0x00005640d36f9ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824418
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i =\
    \ 5\n    var j = 3\n    var k = 3\n    var m = 2\n    while i <= n {\n       \
    \ if n % i == 0 {\n            return false\n        }\n        i += j\n     \
    \   j += k\n        k += m\n        m += 2\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmplxyzf78z/tmplxyzf78z.swift:66: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a6525ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a64f51b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a64f51988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a64f507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplxyzf78z                        0x0000564f0fe59579 <unavailable> + 5497

    5    libc.so.6                          0x00002b8a65446460 __libc_start_main +
    245

    6    tmplxyzf78z                        0x0000564f0fe58ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824418
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n == 3 {\n        return true\n    }\n    if n % 2 == 0\
    \ {\n        return false\n    }\n    if n % 3 == 0 {\n        return false\n\
    \    }\n    var i = 5\n    var s = 2\n    while i * i <= n {\n        if n % i\
    \ == 0 {\n            return false\n        }\n        s += 2\n        i += 6\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpsn9d687l/tmpsn9d687l.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff207b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff204adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff204ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff204ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsn9d687l                        0x0000555e2d5c577d <unavailable> + 6013

    5    libc.so.6                          0x00002aff209a2460 __libc_start_main +
    245

    6    tmpsn9d687l                        0x0000555e2d5c4ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824417
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    while i <= n {\n        if n\
    \ % i == 0 {\n            return false\n        }\n        if j > n / 2 {\n  \
    \          return true\n        }\n        i += 2\n        j += 2\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpe7tss41q/tmpe7tss41q.swift:65: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aab46275c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab45f6cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aab45f6c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aab45f6b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe7tss41q                        0x0000559fac9406fb <unavailable> + 5883

    5    libc.so.6                          0x00002aab46461460 __libc_start_main +
    245

    6    tmpe7tss41q                        0x0000559fac93fef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824418
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \n    if n == 2 {\n        return true\n    }\n\n    if n == 3 {\n        return\
    \ true\n    }\n\n    if n % 2 == 0 {\n        return false\n    }\n\n    var i\
    \ = 5\n    var j = (n - 1) / 2\n\n    while i <= j {\n        if n % i == 0 {\n\
    \            return false\n        }\n\n        i += 6\n        j = (n - 1) /\
    \ 2\n    }\n\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmp9iplqhbc/tmp9iplqhbc.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b82e75cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82e72c4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b82e72c4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b82e72c37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9iplqhbc                        0x00005614d786580a <unavailable> + 6154

    5    libc.so.6                          0x00002b82e77b9460 __libc_start_main +
    245

    6    tmp9iplqhbc                        0x00005614d7864ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824418
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n == 3 {\n        return true\n    }\n    if n % 2 == 0\
    \ {\n        return false\n    }\n    if n % 3 == 0 {\n        return false\n\
    \    }\n    var i = 5\n    var j = 3\n    var k = n - 1\n    while i <= k {\n\
    \        if n % i == 0 {\n            return false\n        }\n        if j %\
    \ i == 0 {\n            return false\n        }\n        i += 2\n        j +=\
    \ 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824418
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i =\
    \ 5\n    var j = (n - 1) / 2\n    var k = n - 1\n    while i <= k {\n        if\
    \ n % i == 0 {\n            return false\n        }\n        i += 2\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824418
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \n    // The prime number theorem states that a prime number greater than 2\n\
    \    // is composite if and only if it has no positive divisors other than 1 and\
    \ itself.\n    // The first few prime numbers are 2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29\n    // 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97.\n\
    \    // The square root of 2 was chosen because it was easy to verify that no\n\
    \    // other prime number exists with a square root lower than it.\n    // The\
    \ number 61 was chosen because it had the smallest divisor <= sqrt(2)\n    //\
    \ and also the smallest prime <= sqrt(2).\n    // The number 41 was chosen because\
    \ it had the smallest divisor <= sqrt(3)\n    // and also the smallest prime <=\
    \ sqrt(3).\n    // The number 13 was chosen because it had the smallest divisor\
    \ <= sqrt(5)\n    // and also the smallest prime <= sqrt(5).\n    // The number\
    \ 97 was chosen because it had the smallest divisor <= sqrt(7)\n    // and also\
    \ the smallest prime <= sqrt(7).\n    // The number 29 was chosen because it had\
    \ the smallest divisor <= sqrt(11)\n    // and also the smallest prime <= sqrt(11).\n\
    \    // The number 39 was chosen because it had the smallest divisor <= sqrt(13)\n\
    \    // and also the smallest prime <= sqrt(13).\n    // The number 83 was chosen\
    \ because it had the smallest divisor <= sqrt(17)\n    // and also the smallest\
    \ prime <= sqrt(17).\n    // The number 93 was chosen because it had the smallest\
    \ divisor <= sqrt(19)\n    // and also the smallest prime <= sqrt(19).\n    //\
    \ The number 97 was chosen because it had the smallest divisor <= sqrt(23)\n \
    \   // and also the smallest prime <= sqrt(23).\n    // The number 131 was chosen\
    \ because it had the smallest divisor <= sqrt(29)\n    // and also the smallest\
    \ prime <= sqrt(29).\n    // The number 137 was chosen because it had the smallest\
    \ divisor <= sqrt(31)\n    // and also the smallest prime <= sqrt(31).\n    //\
    \ The number 193 was chosen because it had the smallest divisor <= sqrt(37)\n\
    \    // and also the smallest prime <= sqrt(37).\n    // The number 197 was chosen\
    \ because it had the smallest divisor <= sqrt(41)\n    // and also the smallest\
    \ prime <= sqrt(41).\n    // The number 233 was chosen because it had the smallest\
    \ divisor <= sqrt(43)\n    // and also the smallest prime <= sqrt(43).\n    //\
    \ The number 293 was chosen because it had \n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: SyntaxError
  stderr: '/tmp/tmpk1lf0i05.swift:57:1: error: missing return in global function expected
    to return ''Bool''

    }

    ^

    '
  stdout: ''
  timestamp: 1659824418
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i =\
    \ 2\n    var j = 3\n    var k = 3\n    var m = 2\n    while i <= n {\n       \
    \ if n % i == 0 {\n            return false\n        }\n        if i == m {\n\
    \            return true\n        }\n        if j > n / 2 {\n            return\
    \ false\n        }\n        while k <= n / i {\n            i += k\n         \
    \   k += k\n        }\n        j += k\n        k += k\n        m += 2\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmphq9imjnn/tmphq9imjnn.swift:78: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39b7a2bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b39b7722b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b39b7722988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b39b77217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphq9imjnn                        0x00005621cc9136fb <unavailable> + 5883

    5    libc.so.6                          0x00002b39b7c17460 __libc_start_main +
    245

    6    tmphq9imjnn                        0x00005621cc912ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824418
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    var s = 2\n    while i * i <= n {\n       \
    \ if n % i == 0 {\n            return false\n        }\n        i += s\n     \
    \   s += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmpv96j75_i/tmpv96j75_i.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba488581c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba488278b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba488278988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4882777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv96j75_i                        0x00005632a278c80a <unavailable> + 6154

    5    libc.so.6                          0x00002ba48876d460 __libc_start_main +
    245

    6    tmpv96j75_i                        0x00005632a278bef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824418
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 2\n    var k = n - 1\n    var m = true\n\
    \    while i < k {\n        if m {\n            if n % i == 0 {\n            \
    \    m = false\n            }\n        } else {\n            if n % j == 0 {\n\
    \                m = false\n            }\n        }\n        i += 1\n       \
    \ j += 1\n    }\n    return m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824418
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    // TODO: optimize this function\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n       \
    \ return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var\
    \ i = 5\n    var j = (3 * n) + 1\n    var k = (3 * n) + 2\n    var l = (3 * n)\
    \ + 3\n    var m = ((3 * n) + 4) + 2\n    var n = ((3 * n) + 5) + 2\n    var o\
    \ = ((3 * n) + 6) + 2\n    var p = ((3 * n) + 7) + 2\n    var q = ((3 * n) + 8)\
    \ + 2\n    var r = ((3 * n) + 9) + 2\n    var s = ((3 * n) + 10) + 2\n    var\
    \ t = ((3 * n) + 11) + 2\n    var u = ((3 * n) + 12) + 2\n    var v = ((3 * n)\
    \ + 13) + 2\n    var w = ((3 * n) + 14) + 2\n    var x = ((3 * n) + 15) + 2\n\
    \    var y = ((3 * n) + 16) + 2\n    var z = ((3 * n) + 17) + 2\n    var a = ((3\
    \ * n) + 18) + 2\n    var b = ((3 * n) + 19) + 2\n    var c = ((3 * n) + 20) +\
    \ 2\n    var d = ((3 * n) + 21) + 2\n    var e = ((3 * n) + 22) + 2\n    var f\
    \ = ((3 * n) + 23) + 2\n    var g = ((3 * n) + 24) + 2\n    var h = ((3 * n) +\
    \ 25) + 2\n    var i = ((3 * n) + 26) + 2\n    var j = ((3 * n) + 27) + 2\n  \
    \  var k = ((3 * n) + 28) + 2\n    var l = ((3 * n) + 29) + 2\n    var m = ((3\
    \ * n) + 30) + 2\n    var n = ((3 * n) + 31) + 2\n    var o = ((3 * n) + 32) +\
    \ 2\n    var p = ((3 * n) + 33) + 2\n    var q = ((3 * n) + 34) + 2\n    var r\
    \ = ((3 * n) + 35) + 2\n    var s = ((3 * n) + 36) + 2\n    var t = ((3 * n) +\
    \ 37) + 2\n    var u = ((3 * n) + 38) + 2\n    var v = ((3 * n) + 39) + 2\n  \
    \  var w = ((3 * n) + 40) + 2\n    var x = ((3 * n) + 41) + 2\n    var y = ((3\
    \ * n) + 42) + 2\n    var z = ((3 * n) + 43) + 2\n    var a = ((3 * n) + 44) +\
    \ 2\n    var b = ((3 * n) + 45) + 2\n    var c = ((3 * n) + 46) + 2\n    var d\
    \ = ((\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpa1ae0z87.swift:82:1: error: expected expression in list of expressions\n\
    }\n^\n/tmp/tmpa1ae0z87.swift:60:9: error: invalid redeclaration of 'i'\n    var\
    \ i = ((3 * n) + 26) + 2\n        ^\n/tmp/tmpa1ae0z87.swift:34:9: note: 'i' previously\
    \ declared here\n    var i = 5\n        ^\n/tmp/tmpa1ae0z87.swift:61:9: error:\
    \ invalid redeclaration of 'j'\n    var j = ((3 * n) + 27) + 2\n        ^\n/tmp/tmpa1ae0z87.swift:35:9:\
    \ note: 'j' previously declared here\n    var j = (3 * n) + 1\n        ^\n/tmp/tmpa1ae0z87.swift:62:9:\
    \ error: invalid redeclaration of 'k'\n    var k = ((3 * n) + 28) + 2\n      \
    \  ^\n/tmp/tmpa1ae0z87.swift:36:9: note: 'k' previously declared here\n    var\
    \ k = (3 * n) + 2\n        ^\n/tmp/tmpa1ae0z87.swift:63:9: error: invalid redeclaration\
    \ of 'l'\n    var l = ((3 * n) + 29) + 2\n        ^\n/tmp/tmpa1ae0z87.swift:37:9:\
    \ note: 'l' previously declared here\n    var l = (3 * n) + 3\n        ^\n/tmp/tmpa1ae0z87.swift:64:9:\
    \ error: invalid redeclaration of 'm'\n    var m = ((3 * n) + 30) + 2\n      \
    \  ^\n/tmp/tmpa1ae0z87.swift:38:9: note: 'm' previously declared here\n    var\
    \ m = ((3 * n) + 4) + 2\n        ^\n/tmp/tmpa1ae0z87.swift:65:9: error: invalid\
    \ redeclaration of 'n'\n    var n = ((3 * n) + 31) + 2\n        ^\n/tmp/tmpa1ae0z87.swift:39:9:\
    \ note: 'n' previously declared here\n    var n = ((3 * n) + 5) + 2\n        ^\n\
    /tmp/tmpa1ae0z87.swift:81:9: warning: variable 'd' inferred to have type '()',\
    \ which may be unexpected\n    var d = ((\n        ^\n/tmp/tmpa1ae0z87.swift:81:9:\
    \ note: add an explicit type annotation to silence this warning\n    var d = ((\n\
    \        ^\n         : ()\n/tmp/tmpa1ae0z87.swift:81:9: error: invalid redeclaration\
    \ of 'd'\n    var d = ((\n        ^\n/tmp/tmpa1ae0z87.swift:55:9: note: 'd' previously\
    \ declared here\n    var d = ((3 * n) + 21) + 2\n        ^\n"
  stdout: ''
  timestamp: 1659824418
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n == 3 {\n        return true\n    }\n    if n % 2 == 0\
    \ {\n        return false\n    }\n    if n % 3 == 0 {\n        return false\n\
    \    }\n    var i = 5\n    var j = 3\n    var k = n - 1\n    while i <= k {\n\
    \        if n % i == 0 {\n            return false\n        }\n        if n %\
    \ j == 0 {\n            return false\n        }\n        i += 2\n        j +=\
    \ 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824418
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \n    if n == 2 {\n        return true\n    }\n\n    if n % 2 == 0 {\n       \
    \ return false\n    }\n\n    var i = 2\n    var j = 3\n    var k = 3\n    var\
    \ m = 2\n\n    while i <= n {\n        if n % i == 0 {\n            return false\n\
    \        }\n\n        if m % i == 0 {\n            return false\n        }\n\n\
    \        if k > i {\n            k += 2\n        }\n\n        i += 2\n       \
    \ j += 2\n        m += 2\n    }\n\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpxbgqdanc/tmpxbgqdanc.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4c8ce8fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4c8cb86b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4c8cb86988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4c8cb857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxbgqdanc                        0x00005627b20ae2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b4c8d07b460 __libc_start_main +
    245

    6    tmpxbgqdanc                        0x00005627b20adef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824418
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n == 3 {\n        return true\n    }\n    if n % 2 == 0\
    \ {\n        return false\n    }\n    if n % 3 == 0 {\n        return false\n\
    \    }\n    let limit = (sqrt(Double(n))).rounded(.down)\n    for _ in 0..<limit\
    \ {\n        if n % Int(Int(n) + 1) != 0 {\n            return false\n       \
    \ }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmpaj2c1tsj.swift:36:18: error: cannot find 'sqrt' in scope\n    let\
    \ limit = (sqrt(Double(n))).rounded(.down)\n                 ^~~~\n/tmp/tmpaj2c1tsj.swift:36:44:\
    \ error: cannot infer contextual base in reference to member 'down'\n    let limit\
    \ = (sqrt(Double(n))).rounded(.down)\n                                       \
    \   ~^~~~\n"
  stdout: ''
  timestamp: 1659824418
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i =\
    \ 5\n    var j = (n - 1) / 2\n    var k = (n - 1) / 2\n    while i <= k {\n  \
    \      if n % i == 0 {\n            return false\n        }\n        i += 2\n\
    \        j += 2\n        k -= 2\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824418
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 2\n    var k = 2\n    var m = 2\n \
    \   while i < n {\n        if n % i == 0 {\n            return false\n       \
    \ }\n        i += 2\n    }\n    while j < n {\n        if n % j == 0 {\n     \
    \       return false\n        }\n        j += 2\n    }\n    while k < n {\n  \
    \      if n % k == 0 {\n            return false\n        }\n        k += 2\n\
    \    }\n    while m < n {\n        if n % m == 0 {\n            return false\n\
    \        }\n        m += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpyrhwajhz/tmpyrhwajhz.swift:81: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade610b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade60daeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade60dae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade60dad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyrhwajhz                        0x000055b7393da6fb <unavailable> + 5883

    5    libc.so.6                          0x00002ade612a3460 __libc_start_main +
    245

    6    tmpyrhwajhz                        0x000055b7393d9ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824418
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    let m = Int(sqrt(Double(n)))\n    for\
    \ _ in 0..<m {\n        if n % m == 0 {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmpvd1gdbhk.swift:33:17: error: cannot find 'sqrt' in scope\n    let\
    \ m = Int(sqrt(Double(n)))\n                ^~~~\n"
  stdout: ''
  timestamp: 1659824418
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i = 5\n\
    \    var j = (3 * n) + 1\n    var k = n - 1\n    while i <= k {\n        if j\
    \ % i == 0 {\n            return false\n        }\n        i += 2\n        j +=\
    \ 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmprwzypy7_/tmprwzypy7_.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae9896d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae9893ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae9893cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae9893cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprwzypy7_                        0x0000561e3d9442b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ae9898c1460 __libc_start_main +
    245

    6    tmprwzypy7_                        0x0000561e3d943ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824419
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 2\n    var k = 3\n    var m = 2\n \
    \   while i < n {\n        if n % i == 0 {\n            return false\n       \
    \ }\n        i += k\n        k += 2\n    }\n    for i = 2; i < n / 2; i += 2 {\n\
    \        if n % i == 0 {\n            return false\n        }\n    }\n    for\
    \ i = 3; i <= n / 2; i += 2 {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpockv31qn.swift:38:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 2; i < n / 2; i += 2 {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpockv31qn.swift:43:5: error: C-style for statement has been removed in\
    \ Swift 3\n    for i = 3; i <= n / 2; i += 2 {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824418
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    if n % 5 == 0 {\n        return false\n\
    \    }\n    if n % 7 == 0 {\n        return false\n    }\n    if n % 11 == 0 {\n\
    \        return false\n    }\n    if n % 13 == 0 {\n        return false\n   \
    \ }\n    if n % 17 == 0 {\n        return false\n    }\n    if n % 19 == 0 {\n\
    \        return false\n    }\n    if n % 23 == 0 {\n        return false\n   \
    \ }\n    if n % 29 == 0 {\n        return false\n    }\n    if n % 31 == 0 {\n\
    \        return false\n    }\n    if n % 37 == 0 {\n        return false\n   \
    \ }\n    if n % 41 == 0 {\n        return false\n    }\n    if n % 43 == 0 {\n\
    \        return false\n    }\n    if n % 47 == 0 {\n        return false\n   \
    \ }\n    if n % 53 == 0 {\n        return false\n    }\n    if n % 59 == 0 {\n\
    \        return false\n    }\n    if n % 61 == 0 {\n        return false\n   \
    \ }\n    if n % 67 == 0 {\n        return false\n    }\n    if n % 71 == 0 {\n\
    \        return false\n    }\n    if n % 73 == 0 {\n        return false\n   \
    \ }\n    if n % 79 == 0 {\n        return false\n    }\n    if n % 83 == 0 {\n\
    \        return false\n    }\n    if n % 89 == 0 {\n        return false\n   \
    \ }\n    if n % 97 == 0 {\n        return false\n    }\n    if n % 101 == 0 {\n\
    \        return false\n    }\n    if n % 103 == 0 {\n        return false\n  \
    \  }\n    if n % 107 == 0 {\n        return false\n    }\n    if n % 109 == 0\
    \ {\n        return false\n    }\n    if n % 113 == 0 {\n        return false\n\
    \    }\n    if n % 117 == 0 {\n        return false\n    }\n    if n % 121 ==\
    \ 0 {\n        return false\n    }\n    if n % 127 == 0 {\n        return false\n\
    \    }\n    if n % 131 == 0 {\n        return false\n    }\n    if n % 137 ==\
    \ 0 {\n        return false\n    }\n    if n % 139 == 0 {\n        return false\n\
    \    }\n    if n % 143 == 0 {\n        return false\n    }\n    if n % 147 ==\
    \ 0 {\n        return false\n    }\n    if n % 151 == 0 {\n        return false\n\
    \    }\n    if n % 157 == 0 {\n        return false\n    }\n    if n % 161 ==\
    \ 0 {\n        return false\n    }\n    if n % 167 == 0 {\n        return false\n\
    \    }\n    if n % 173 == 0 {\n        return false\n    }\n    if n % 179 ==\
    \ 0 {\n        return false\n    }\n    if n % 18\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9hn0bc__.swift:159:14: error: expected '{' after 'if' condition\n\
    \    if n % 18\n             ^\n/tmp/tmp9hn0bc__.swift:159:10: error: type 'Int'\
    \ cannot be used as a boolean; test for '!= 0' instead\n    if n % 18\n      \
    \   ^\n       ((    ) != 0)\n"
  stdout: ''
  timestamp: 1659824418
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i =\
    \ 2\n    var j = 3\n    var k = 3\n    while i <= n {\n        if n % i == 0 {\n\
    \            return false\n        }\n        if k % i == 0 {\n            return\
    \ false\n        }\n        i += 2\n        j += 2\n        k += 2\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmp84a8c94z/tmp84a8c94z.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8761386c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b876107db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b876107d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b876107c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84a8c94z                        0x000055d2997b06fb <unavailable> + 5883

    5    libc.so.6                          0x00002b8761572460 __libc_start_main +
    245

    6    tmp84a8c94z                        0x000055d2997afef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824419
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n == 3 {\n        return true\n    }\n    if n % 2 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    var j = 3\n    var k = n\
    \ - 1\n    while i <= k {\n        if n % i == 0 {\n            return false\n\
    \        }\n        if j % i == 0 {\n            return false\n        }\n   \
    \     i += 2\n        j += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824417
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n == 0 {\n        return false\n    }\n    if n % 2 ==\
    \ 0 {\n        return false\n    }\n    if n % 3 == 0 {\n        return false\n\
    \    }\n    if n % 5 == 0 {\n        return false\n    }\n    if n % 7 == 0 {\n\
    \        return false\n    }\n    if n % 11 == 0 {\n        return false\n   \
    \ }\n    if n % 13 == 0 {\n        return false\n    }\n    if n % 17 == 0 {\n\
    \        return false\n    }\n    if n % 19 == 0 {\n        return false\n   \
    \ }\n    if n % 23 == 0 {\n        return false\n    }\n    if n % 29 == 0 {\n\
    \        return false\n    }\n    if n % 31 == 0 {\n        return false\n   \
    \ }\n    if n % 37 == 0 {\n        return false\n    }\n    if n % 41 == 0 {\n\
    \        return false\n    }\n    if n % 43 == 0 {\n        return false\n   \
    \ }\n    if n % 47 == 0 {\n        return false\n    }\n    if n % 53 == 0 {\n\
    \        return false\n    }\n    if n % 59 == 0 {\n        return false\n   \
    \ }\n    if n % 61 == 0 {\n        return false\n    }\n    if n % 67 == 0 {\n\
    \        return false\n    }\n    if n % 71 == 0 {\n        return false\n   \
    \ }\n    if n % 73 == 0 {\n        return false\n    }\n    if n % 79 == 0 {\n\
    \        return false\n    }\n    if n % 83 == 0 {\n        return false\n   \
    \ }\n    if n % 89 == 0 {\n        return false\n    }\n    if n % 97 == 0 {\n\
    \        return false\n    }\n    if n % 101 == 0 {\n        return false\n  \
    \  }\n    if n % 103 == 0 {\n        return false\n    }\n    if n % 107 == 0\
    \ {\n        return false\n    }\n    if n % 109 == 0 {\n        return false\n\
    \    }\n    if n % 113 == 0 {\n        return false\n    }\n    if n % 117 ==\
    \ 0 {\n        return false\n    }\n    if n % 121 == 0 {\n        return false\n\
    \    }\n    if n % 123 == 0 {\n        return false\n    }\n    if n % 127 ==\
    \ 0 {\n        return false\n    }\n    if n % 131 == 0 {\n        return false\n\
    \    }\n    if n % 137 == 0 {\n        return false\n    }\n    if n % 139 ==\
    \ 0 {\n        return false\n    }\n    if n % 143 == 0 {\n        return false\n\
    \    }\n    if n % 147 == 0 {\n        return false\n    }\n    if n % 151 ==\
    \ 0 {\n        return false\n    }\n    if n % 157 == 0 {\n        return false\n\
    \    }\n    if n % 161 == 0 {\n        return false\n    }\n    if n % 165 ==\
    \ 0 {\n        return false\n    }\n    if n % 169 == 0 {\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpeb9lz47x.swift:187:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmpeb9lz47x.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmpeb9lz47x.swift:163:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824418
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n\
    \        return true\n    }\n    if n == 6 {\n        return true\n    }\n   \
    \ if n == 7 {\n        return true\n    }\n    if n == 8 {\n        return true\n\
    \    }\n    if n == 9 {\n        return true\n    }\n    if n == 10 {\n      \
    \  return true\n    }\n    if n == 11 {\n        return true\n    }\n    if n\
    \ == 12 {\n        return true\n    }\n    if n == 13 {\n        return true\n\
    \    }\n    if n == 14 {\n        return true\n    }\n    if n == 15 {\n     \
    \   return true\n    }\n    if n == 16 {\n        return true\n    }\n    if n\
    \ == 17 {\n        return true\n    }\n    if n == 18 {\n        return true\n\
    \    }\n    if n == 19 {\n        return true\n    }\n    if n == 20 {\n     \
    \   return true\n    }\n    if n == 21 {\n        return true\n    }\n    if n\
    \ == 22 {\n        return true\n    }\n    if n == 23 {\n        return true\n\
    \    }\n    if n == 24 {\n        return true\n    }\n    if n == 25 {\n     \
    \   return true\n    }\n    if n == 26 {\n        return true\n    }\n    if n\
    \ == 27 {\n        return true\n    }\n    if n == 28 {\n        return true\n\
    \    }\n    if n == 29 {\n        return true\n    }\n    if n == 30 {\n     \
    \   return true\n    }\n    if n == 31 {\n        return true\n    }\n    if n\
    \ == 32 {\n        return true\n    }\n    if n == 33 {\n        return true\n\
    \    }\n    if n == 34 {\n        return true\n    }\n    if n == 35 {\n     \
    \   return true\n    }\n    if n == 36 {\n        return true\n    }\n    if n\
    \ == 37 {\n        return true\n    }\n    if n == 38 {\n        return true\n\
    \    }\n    if n == 39 {\n        return true\n    }\n    if n == 40 {\n     \
    \   return true\n    }\n    if n == 41 {\n        return true\n    }\n    if n\
    \ == 42 {\n        return true\n    }\n    if n == 43 {\n        return true\n\
    \    }\n    if n == 44 {\n        return true\n    }\n    if n == 45 {\n     \
    \   return true\n    }\n    if n == 46 {\n        return true\n    }\n    if n\
    \ == 47 {\n        return true\n    }\n    if n == 48 {\n        return true\n\
    \    }\n    if n == 49 {\n        return true\n    }\n    if n == 50 {\n     \
    \   return true\n    }\n    if n == 51 {\n        return true\n    }\n    if n\
    \ == 52 {\n        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmprp0b534_.swift:200:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmprp0b534_.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmprp0b534_.swift:172:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmprp0b534_.swift:176:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824417
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    while i <= n {\n        if n\
    \ % i == 0 {\n            return false\n        }\n        i += j\n        j +=\
    \ 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmp9zsbca3g/tmp9zsbca3g.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba714b23c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba71481ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba71481a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7148197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9zsbca3g                        0x0000558c41d342b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ba714d0f460 __libc_start_main +
    245

    6    tmp9zsbca3g                        0x0000558c41d33ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824417
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \n    if n == 2 {\n        return true\n    }\n\n    if n % 2 == 0 {\n       \
    \ return false\n    }\n\n    var i = 2\n    var j = 3\n    var k = 3\n\n    while\
    \ i <= n {\n        if n % i == 0 {\n            return false\n        }\n\n \
    \       if k % i == 0 {\n            return false\n        }\n\n        i += 2\n\
    \        j += 2\n        k += 2\n    }\n\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpf37vn_2d/tmpf37vn_2d.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5dba4d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5dba1c9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5dba1c9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5dba1c87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf37vn_2d                        0x00005561689786fb <unavailable> + 5883

    5    libc.so.6                          0x00002b5dba6be460 __libc_start_main +
    245

    6    tmpf37vn_2d                        0x0000556168977ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824419
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    var k = n - 1\n    while i <=\
    \ k {\n        if n % i == 0 {\n            return false\n        }\n        if\
    \ j % i == 0 {\n            return false\n        }\n        i += 2\n        j\
    \ += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpw8ndqstg/tmpw8ndqstg.swift:66: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afd184edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afd181e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afd181e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afd181e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw8ndqstg                        0x000056197ad626fb <unavailable> + 5883

    5    libc.so.6                          0x00002afd186d9460 __libc_start_main +
    245

    6    tmpw8ndqstg                        0x000056197ad61ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824419
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i =\
    \ 2\n    var j = 3\n    var k = n - 1\n    while i <= k {\n        if n % i ==\
    \ 0 {\n            return false\n        }\n        if j % i == 0 {\n        \
    \    return false\n        }\n        if k % i == 0 {\n            return false\n\
    \        }\n        i += 2\n        j += 2\n        k /= i\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmp1zskv_g9/tmp1zskv_g9.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb68198c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb67e8fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb67e8f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb67e8e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1zskv_g9                        0x0000561115c112b7 <unavailable> + 4791

    5    libc.so.6                          0x00002acb68384460 __libc_start_main +
    245

    6    tmp1zskv_g9                        0x0000561115c10ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824419
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    var i = 5\n    var s = 2\n    while\
    \ i * i <= n {\n        if n % i == 0 {\n            return false\n        }\n\
    \        i += s\n        s = 6 - s\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824419
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    while i <= n {\n        if n\
    \ % i == 0 {\n            return false\n        }\n        i += j\n        j +=\
    \ 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmp8razs_tr/tmp8razs_tr.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b501dea2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b501db99b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b501db99988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b501db987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8razs_tr                        0x000055f942ff82b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b501e08e460 __libc_start_main +
    245

    6    tmp8razs_tr                        0x000055f942ff7ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824419
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 2\n    var k = 2\n    var m = 1\n \
    \   var prime = true\n    while i < n {\n        if n % i == 0 {\n           \
    \ prime = false\n            break\n        }\n        i += k\n        k += 2\n\
    \    }\n    if prime {\n        return true\n    }\n    for i = 2; i < m; i +=\
    \ 2 {\n        if n % i == 0 {\n            prime = false\n            break\n\
    \        }\n    }\n    return prime\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpt7uzxklc.swift:43:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 2; i < m; i += 2 {\n    ^   ~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824418
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n\
    \        return true\n    }\n    if n == 6 {\n        return true\n    }\n   \
    \ if n == 7 {\n        return true\n    }\n    if n == 8 {\n        return true\n\
    \    }\n    if n == 9 {\n        return true\n    }\n    if n == 10 {\n      \
    \  return true\n    }\n    if n == 11 {\n        return true\n    }\n    if n\
    \ == 12 {\n        return true\n    }\n    if n == 13 {\n        return true\n\
    \    }\n    if n == 14 {\n        return true\n    }\n    if n == 15 {\n     \
    \   return true\n    }\n    if n == 16 {\n        return true\n    }\n    if n\
    \ == 17 {\n        return true\n    }\n    if n == 18 {\n        return true\n\
    \    }\n    if n == 19 {\n        return true\n    }\n    if n == 20 {\n     \
    \   return true\n    }\n    if n == 21 {\n        return true\n    }\n    if n\
    \ == 22 {\n        return true\n    }\n    if n == 23 {\n        return true\n\
    \    }\n    if n == 24 {\n        return true\n    }\n    if n == 25 {\n     \
    \   return true\n    }\n    if n == 26 {\n        return true\n    }\n    if n\
    \ == 27 {\n        return true\n    }\n    if n == 28 {\n        return true\n\
    \    }\n    if n == 29 {\n        return true\n    }\n    if n == 30 {\n     \
    \   return true\n    }\n    if n == 31 {\n        return true\n    }\n    if n\
    \ == 32 {\n        return true\n    }\n    if n == 33 {\n        return true\n\
    \    }\n    if n == 34 {\n        return true\n    }\n    if n == 35 {\n     \
    \   return true\n    }\n    if n == 36 {\n        return true\n    }\n    if n\
    \ == 37 {\n        return true\n    }\n    if n == 38 {\n        return true\n\
    \    }\n    if n == 39 {\n        return true\n    }\n    if n == 40 {\n     \
    \   return true\n    }\n    if n == 41 {\n        return true\n    }\n    if n\
    \ == 42 {\n        return true\n    }\n    if n == 43 {\n        return true\n\
    \    }\n    if n == 44 {\n        return true\n    }\n    if n == 45 {\n     \
    \   return true\n    }\n    if n == 46 {\n        return true\n    }\n    if n\
    \ == 47 {\n        return true\n    }\n    if n == 48 {\n        return true\n\
    \    }\n    if n == 49 {\n        return true\n    }\n    if n == 50 {\n     \
    \   return true\n    }\n    if n == 51 {\n        return true\n    }\n    if n\
    \ == 52 {\n        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_pxvz8o7.swift:200:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmp_pxvz8o7.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmp_pxvz8o7.swift:172:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmp_pxvz8o7.swift:176:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824419
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i =\
    \ 2\n    var j = 3\n    while i <= n {\n        if n % i == 0 {\n            return\
    \ false\n        }\n        i += j\n        j += 2\n    }\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpmklt173v/tmpmklt173v.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a7f859c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a7f550b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a7f550988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a7f54f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmklt173v                        0x0000558bd48402b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b3a7fa45460 __libc_start_main +
    245

    6    tmpmklt173v                        0x0000558bd483fef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824418
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i =\
    \ 2\n    var j = 3\n    var k = n - 1\n    while i <= k {\n        if n % i ==\
    \ 0 {\n            return false\n        }\n        if j % i == 0 {\n        \
    \    return false\n        }\n        i += 2\n        j += 2\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmprhhdvaiu/tmprhhdvaiu.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae37b444c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae37b13bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae37b13b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae37b13a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprhhdvaiu                        0x00005639b320a6fb <unavailable> + 5883

    5    libc.so.6                          0x00002ae37b630460 __libc_start_main +
    245

    6    tmprhhdvaiu                        0x00005639b3209ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824417
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    var i = 5\n    var s = 2\n    while\
    \ i * i <= n {\n        if n % i == 0 {\n            return false\n        }\n\
    \        i += s\n        s += 2\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpn509tgek/tmpn509tgek.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b616ac66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b616a95db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b616a95d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b616a95c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn509tgek                        0x000055da4d37680a <unavailable> + 6154

    5    libc.so.6                          0x00002b616ae52460 __libc_start_main +
    245

    6    tmpn509tgek                        0x000055da4d375ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824419
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    var j = (3 * n) + 1\n    while i <= j {\n \
    \       if n % i == 0 {\n            return false\n        }\n        i += 6\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmp7oou8k1n/tmp7oou8k1n.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4c14660c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4c14357b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4c14357988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4c143567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7oou8k1n                        0x000055ea213112b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b4c1484c460 __libc_start_main +
    245

    6    tmp7oou8k1n                        0x000055ea21310ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824418
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    var k = n - 1\n    while i <=\
    \ k {\n        if n % i == 0 {\n            return false\n        }\n        if\
    \ j % i == 0 {\n            return false\n        }\n        i += 2\n        j\
    \ += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpw8ndqstg/tmpw8ndqstg.swift:66: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afd184edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afd181e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afd181e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afd181e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw8ndqstg                        0x000056197ad626fb <unavailable> + 5883

    5    libc.so.6                          0x00002afd186d9460 __libc_start_main +
    245

    6    tmpw8ndqstg                        0x000056197ad61ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824419
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \n    if n == 2 {\n        return true\n    }\n\n    if n == 1 {\n        return\
    \ false\n    }\n\n    if n % 2 == 0 {\n        return false\n    }\n\n    var\
    \ i = 2\n    var j = 3\n    var k = n - 1\n\n    while i <= k {\n        if n\
    \ % i == 0 {\n            return false\n        }\n\n        i += 2\n        j\
    \ += 2\n    }\n\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpzype6gxz/tmpzype6gxz.swift:73: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab4574afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab4571a6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab4571a6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4571a57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzype6gxz                        0x000055c3030146fb <unavailable> + 5883

    5    libc.so.6                          0x00002ab45769b460 __libc_start_main +
    245

    6    tmpzype6gxz                        0x000055c303013ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824419
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    var k = n\n    while i <= k\
    \ {\n        if n % i == 0 {\n            return false\n        }\n        if\
    \ j > i {\n            j += 2\n        }\n        i += 2\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpnh6gxuh9/tmpnh6gxuh9.swift:65: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd2c4bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd2c1b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd2c1b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd2c1b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnh6gxuh9                        0x0000556e4f0f56fb <unavailable> + 5883

    5    libc.so.6                          0x00002acd2c6a8460 __libc_start_main +
    245

    6    tmpnh6gxuh9                        0x0000556e4f0f4ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824419
